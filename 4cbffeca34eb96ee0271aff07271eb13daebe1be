{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "c2a09b60_7961833e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 34725
      },
      "writtenOn": "2023-02-07T12:56:30Z",
      "side": 1,
      "message": "TRY\u003dlinux",
      "revId": "4cbffeca34eb96ee0271aff07271eb13daebe1be",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6b35b84c_d1def1f1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-02-07T12:56:47Z",
      "side": 1,
      "message": "SlowBots beginning. Status page: https://farmer.golang.org/try?commit\u003d4cbffeca\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "4cbffeca34eb96ee0271aff07271eb13daebe1be",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a80f5bc7_86c0de36",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-02-07T12:56:47Z",
      "side": 1,
      "message": "Superseded.",
      "parentUuid": "c9bc1f79_e141a59f",
      "tag": "autogenerated:trybots~beginning",
      "revId": "4cbffeca34eb96ee0271aff07271eb13daebe1be",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9cf0f301_08f2a4a0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-02-07T13:08:13Z",
      "side": 1,
      "message": "SlowBots are happy.\n\nSlowBot builds that ran:\n* linux-amd64\n",
      "parentUuid": "6b35b84c_d1def1f1",
      "tag": "autogenerated:trybots~happy",
      "revId": "4cbffeca34eb96ee0271aff07271eb13daebe1be",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6117c9a8_30b66fa2",
        "filename": "src/net/splice_test.go",
        "patchSetId": 9
      },
      "lineNbr": 33,
      "author": {
        "id": 5206
      },
      "writtenOn": "2023-02-07T23:08:11Z",
      "side": 1,
      "message": "This looks like a t.Run just calls another t.Run.  Seems simpler to move this t.Run line into TestSplice.",
      "revId": "4cbffeca34eb96ee0271aff07271eb13daebe1be",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cd0a1868_4af69b07",
        "filename": "src/net/splice_test.go",
        "patchSetId": 9
      },
      "lineNbr": 33,
      "author": {
        "id": 34725
      },
      "writtenOn": "2023-02-08T04:36:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6117c9a8_30b66fa2",
      "revId": "4cbffeca34eb96ee0271aff07271eb13daebe1be",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "df38f51e_309d7317",
        "filename": "src/net/splice_test.go",
        "patchSetId": 9
      },
      "lineNbr": 104,
      "author": {
        "id": 5206
      },
      "writtenOn": "2023-02-07T23:08:11Z",
      "side": 1,
      "message": "Use a name like testFile, not test1.",
      "revId": "4cbffeca34eb96ee0271aff07271eb13daebe1be",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fec89f98_168f08ff",
        "filename": "src/net/splice_test.go",
        "patchSetId": 9
      },
      "lineNbr": 104,
      "author": {
        "id": 34725
      },
      "writtenOn": "2023-02-08T04:36:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "df38f51e_309d7317",
      "revId": "4cbffeca34eb96ee0271aff07271eb13daebe1be",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9ee21381_8b850c30",
        "filename": "src/net/splice_test.go",
        "patchSetId": 9
      },
      "lineNbr": 105,
      "author": {
        "id": 5206
      },
      "writtenOn": "2023-02-07T23:08:11Z",
      "side": 1,
      "message": "Instead of using os.CreateTemp create a known file name inside t.Tempdir.",
      "revId": "4cbffeca34eb96ee0271aff07271eb13daebe1be",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f375dcc3_4e699792",
        "filename": "src/net/splice_test.go",
        "patchSetId": 9
      },
      "lineNbr": 105,
      "author": {
        "id": 34725
      },
      "writtenOn": "2023-02-08T04:36:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9ee21381_8b850c30",
      "revId": "4cbffeca34eb96ee0271aff07271eb13daebe1be",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e15eb6bb_38f110e5",
        "filename": "src/net/splice_test.go",
        "patchSetId": 9
      },
      "lineNbr": 121,
      "author": {
        "id": 5206
      },
      "writtenOn": "2023-02-07T23:08:11Z",
      "side": 1,
      "message": "The man page says that splice only works if one of the descriptors is a pipe.  That doesn\u0027t seem to be true here.  Why does this help?",
      "revId": "4cbffeca34eb96ee0271aff07271eb13daebe1be",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9f6f3544_a71aabbd",
        "filename": "src/net/splice_test.go",
        "patchSetId": 9
      },
      "lineNbr": 121,
      "author": {
        "id": 34725
      },
      "writtenOn": "2023-02-08T04:36:20Z",
      "side": 1,
      "message": "io.Copy --\u003e File.ReadFrom --\u003e File.readFrom --\u003e poll.Splice, poll.Splice is where we call splice with pipe.",
      "parentUuid": "e15eb6bb_38f110e5",
      "revId": "4cbffeca34eb96ee0271aff07271eb13daebe1be",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "87a91714_5fed5167",
        "filename": "src/net/splice_test.go",
        "patchSetId": 9
      },
      "lineNbr": 121,
      "author": {
        "id": 5206
      },
      "writtenOn": "2023-02-09T00:03:37Z",
      "side": 1,
      "message": "Oh yeah, thanks.",
      "parentUuid": "9f6f3544_a71aabbd",
      "revId": "4cbffeca34eb96ee0271aff07271eb13daebe1be",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fb7bc11e_c200d08b",
        "filename": "src/net/splice_test.go",
        "patchSetId": 9
      },
      "lineNbr": 126,
      "author": {
        "id": 5206
      },
      "writtenOn": "2023-02-07T23:08:11Z",
      "side": 1,
      "message": "For this new code let\u0027s use got/want as suggested at https://github.com/golang/go/wiki/CodeReviewComments#useful-test-failures.  Thanks.",
      "revId": "4cbffeca34eb96ee0271aff07271eb13daebe1be",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "59293435_afbf1f5b",
        "filename": "src/net/splice_test.go",
        "patchSetId": 9
      },
      "lineNbr": 126,
      "author": {
        "id": 34725
      },
      "writtenOn": "2023-02-08T04:36:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fb7bc11e_c200d08b",
      "revId": "4cbffeca34eb96ee0271aff07271eb13daebe1be",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dec272e3_8a04c94c",
        "filename": "src/os/readfrom_linux.go",
        "patchSetId": 9
      },
      "lineNbr": 21,
      "author": {
        "id": 5206
      },
      "writtenOn": "2023-02-07T23:08:11Z",
      "side": 1,
      "message": "Let\u0027s move this into a new method, as you\u0027ve done with copyFileRange, so that this method just calls two new ones.",
      "revId": "4cbffeca34eb96ee0271aff07271eb13daebe1be",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "186dead3_1c9dc649",
        "filename": "src/os/readfrom_linux.go",
        "patchSetId": 9
      },
      "lineNbr": 21,
      "author": {
        "id": 34725
      },
      "writtenOn": "2023-02-08T04:36:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "dec272e3_8a04c94c",
      "revId": "4cbffeca34eb96ee0271aff07271eb13daebe1be",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e957e1ea_bbf70ac1",
        "filename": "src/os/readfrom_linux.go",
        "patchSetId": 9
      },
      "lineNbr": 65,
      "author": {
        "id": 5206
      },
      "writtenOn": "2023-02-07T23:08:11Z",
      "side": 1,
      "message": "Using a lengthy if statement like this is harder to read.  Just pull out assignment to ok from the if statement.",
      "revId": "4cbffeca34eb96ee0271aff07271eb13daebe1be",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e96b79e5_3d0bca33",
        "filename": "src/os/readfrom_linux.go",
        "patchSetId": 9
      },
      "lineNbr": 65,
      "author": {
        "id": 34725
      },
      "writtenOn": "2023-02-08T04:36:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e957e1ea_bbf70ac1",
      "revId": "4cbffeca34eb96ee0271aff07271eb13daebe1be",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "93184d61_637d88bf",
        "filename": "src/os/readfrom_linux.go",
        "patchSetId": 9
      },
      "lineNbr": 81,
      "author": {
        "id": 5206
      },
      "writtenOn": "2023-02-07T23:08:11Z",
      "side": 1,
      "message": "The names errSyscall and errSplice make them seem like the same kind of thing, but they are not.  Other code seems to use the name sc rather than errSyscall.",
      "revId": "4cbffeca34eb96ee0271aff07271eb13daebe1be",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "09f0a7bd_671d652b",
        "filename": "src/os/readfrom_linux.go",
        "patchSetId": 9
      },
      "lineNbr": 81,
      "author": {
        "id": 34725
      },
      "writtenOn": "2023-02-08T04:36:20Z",
      "side": 1,
      "message": "sc is already used by syscall.Conn in the code above, I\u0027m changing it to syscallName.",
      "parentUuid": "93184d61_637d88bf",
      "revId": "4cbffeca34eb96ee0271aff07271eb13daebe1be",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "04a42460_5e74c0a3",
        "filename": "src/os/readfrom_linux.go",
        "patchSetId": 9
      },
      "lineNbr": 87,
      "author": {
        "id": 5206
      },
      "writtenOn": "2023-02-07T23:08:11Z",
      "side": 1,
      "message": "This is too hacky.  We need to do something cleaner here.",
      "revId": "4cbffeca34eb96ee0271aff07271eb13daebe1be",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c8a2e020_2629e246",
        "filename": "src/os/readfrom_linux.go",
        "patchSetId": 9
      },
      "lineNbr": 87,
      "author": {
        "id": 34725
      },
      "writtenOn": "2023-02-08T04:36:20Z",
      "side": 1,
      "message": "This is because that the return error from https://go.googlesource.com/go/+/refs/tags/go1.20/src/internal/poll/fd_poll_runtime.go#82 is not a pre-defined error, maybe we should make it pre-defined?",
      "parentUuid": "04a42460_5e74c0a3",
      "revId": "4cbffeca34eb96ee0271aff07271eb13daebe1be",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "893cf7d0_d15883ae",
        "filename": "src/os/readfrom_linux.go",
        "patchSetId": 9
      },
      "lineNbr": 87,
      "author": {
        "id": 5206
      },
      "writtenOn": "2023-02-09T00:03:37Z",
      "side": 1,
      "message": "I don\u0027t think this should be looking for this error at all.  It\u0027s very awkward.  What if we actually call internal/poll.Init, so that are using the poller as expected?  Or come up with a way to get the poller FD out of the net.Conn?",
      "parentUuid": "c8a2e020_2629e246",
      "revId": "4cbffeca34eb96ee0271aff07271eb13daebe1be",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "472243b4_6cfbab8c",
        "filename": "src/os/readfrom_linux.go",
        "patchSetId": 9
      },
      "lineNbr": 87,
      "author": {
        "id": 34725
      },
      "writtenOn": "2023-02-09T04:18:13Z",
      "side": 1,
      "message": "\u003e What if we actually call internal/poll.Init, so that are using the poller as expected?\n\nThis is not going to work because epoll will return an EEXIST error given that the underlying fd is already registered to epoll instance.\n\n\u003e Or come up with a way to get the poller FD out of the net.Conn?\n\nThis is the ideal way to implement zero-copy here, but sadly, this seems impossible without adding a new method for the net.Conn to export its underlying poll.FD.\n\nActually, there are four ways to implement the zero-copy here:\n1. Extract the poll.FD from the net.Conn and use it with poll.Splice, this is the ideal way to do the zero-copy, but unfortunately, it can only be done by adding a new method to the net.Conn, something like `func (c *TCPConn) GetPollFD() *poll.FD`, however, means that this new method is also visible to users, which makes no sense because poll.FD is from an internal package and the users can do nothing with it;\n2. Set the underlying fd of the net.Conn with blocking mode via a system call and defer to undo this operation, ensuring there will be no EAGAIN error while poll.Splice is working. This can also work as expected but it will change the IO mode to blocking, which might cause the thread to enter kernel space while the user is calling io.Copy.\n3. Instead of invoking poll.Splice in File.ReadFrom we add a new method WriteTo to the net.TCPConn and net.UnixConn, then leverage the splice to make zero-copy there, in that way, even if we still have the problem getting the poll.FD from the os.File, we won\u0027t encounter EAGAIN error cuz linux will ignore non-blocking mode with regular files and make the IO blocking, with all versions of kernel, up to now. However, the net.UnixConn has already implemented its ReadFrom and WriteTo for PacketConn interface, not io.ReadFrom/io.WriteTo, which means that we can only make zero-copy possible from TCP socket to file by implementing WriteTo instead of ReadFrom.\n4. The current implementation in this CL, ensure both TCP and Unix socket can benefit from the zero-copy to file, but might need some tricks to achieve that, like the error checking here.",
      "parentUuid": "893cf7d0_d15883ae",
      "revId": "4cbffeca34eb96ee0271aff07271eb13daebe1be",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "85dd07f9_ad906dcf",
        "filename": "src/os/readfrom_linux.go",
        "patchSetId": 9
      },
      "lineNbr": 87,
      "author": {
        "id": 5206
      },
      "writtenOn": "2023-02-09T04:50:23Z",
      "side": 1,
      "message": "Perhaps the os package could use the internal/reflectlite package to pull the pfd field out of the net.conn.",
      "parentUuid": "472243b4_6cfbab8c",
      "revId": "4cbffeca34eb96ee0271aff07271eb13daebe1be",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e8ea47b4_154d8604",
        "filename": "src/os/readfrom_linux.go",
        "patchSetId": 9
      },
      "lineNbr": 87,
      "author": {
        "id": 34725
      },
      "writtenOn": "2023-02-09T05:17:10Z",
      "side": 1,
      "message": "It seems doable, I\u0027ll give it a shot.",
      "parentUuid": "85dd07f9_ad906dcf",
      "revId": "4cbffeca34eb96ee0271aff07271eb13daebe1be",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "af9b1c1d_e2e68f8d",
        "filename": "src/os/readfrom_linux.go",
        "patchSetId": 9
      },
      "lineNbr": 87,
      "author": {
        "id": 34725
      },
      "writtenOn": "2023-02-09T08:54:03Z",
      "side": 1,
      "message": "After several attempts to use reflection for this, I find a solution:\n\nFirst of all, `internal/reflectlite` is too lite to pull the `pfd` out of the net.Conn, I have to switch to the standard `reflect`.\n\nThen I used the `reflect` package, trying to pull the `pfd` out of the net.Conn:\n```go\nv :\u003d reflect.Indirect(reflect.ValueOf(r))\n// net.TCPConn/net.UnixConn -\u003e net.netFD -\u003e poll.FD\nvfd :\u003d reflect.Indirect(v.FieldByName(\"fd\"))\nif vfd.IsZero() {\n\treturn\n}\nvpfd :\u003d reflect.Indirect(vfd).FieldByName(\"pfd\")\n// pfd, ok :\u003d vpfd.Interface().(*poll.FD) // this will panic cuz the Value was obtained by accessing unexported struct fields, so we have to use reflect.NewAt below.\n\npfd, ok :\u003d reflect.NewAt(vpfd.Type(), unsafe.Pointer(vpfd.UnsafeAddr())).Interface().(*poll.FD)\nif !ok {\n\treturn\n}\n```\nThis is a workable solution, but I\u0027m not sure if it\u0027s acceptable here cuz I think we just replace the current trick of error checking with a new trick of accessing the private field `pfd` inside `net.Conn`. What do you think of this, Ian?",
      "parentUuid": "e8ea47b4_154d8604",
      "revId": "4cbffeca34eb96ee0271aff07271eb13daebe1be",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "36a25cbf_11c17839",
        "filename": "src/os/readfrom_linux.go",
        "patchSetId": 9
      },
      "lineNbr": 87,
      "author": {
        "id": 34725
      },
      "writtenOn": "2023-02-09T15:21:23Z",
      "side": 1,
      "message": "code updated:\n```go\nv :\u003d reflect.Indirect(reflect.ValueOf(r))\n// net.TCPConn/net.UnixConn -\u003e net.netFD -\u003e poll.FD\nvfd :\u003d reflect.Indirect(v.FieldByName(\"fd\"))\nif vfd.IsZero() {\n    return\n}\nvpfd :\u003d vfd.FieldByName(\"pfd\")\n// pfd, ok :\u003d vpfd.Interface().(*poll.FD) // this will panic cuz the Value was obtained by accessing unexported struct fields, so we have to use reflect.NewAt below.\n\npfd, ok :\u003d reflect.NewAt(vpfd.Type(), vpfd.Addr().UnsafePointer()).Interface().(*poll.FD)\nif !ok {\n    return\n}\n```",
      "parentUuid": "af9b1c1d_e2e68f8d",
      "revId": "4cbffeca34eb96ee0271aff07271eb13daebe1be",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a1495e9e_91e02d22",
        "filename": "src/os/readfrom_linux.go",
        "patchSetId": 9
      },
      "lineNbr": 87,
      "author": {
        "id": 34725
      },
      "writtenOn": "2023-02-09T15:38:28Z",
      "side": 1,
      "message": "I just check out the https://go.googlesource.com/go/+/refs/tags/go1.20/src/go/build/deps_test.go and find that `os` package is not allowed to import `reflect` package, so this seems to be a dead end.",
      "parentUuid": "36a25cbf_11c17839",
      "revId": "4cbffeca34eb96ee0271aff07271eb13daebe1be",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "09e8873e_4f52097d",
        "filename": "src/os/readfrom_linux.go",
        "patchSetId": 9
      },
      "lineNbr": 87,
      "author": {
        "id": 5206
      },
      "writtenOn": "2023-02-09T23:47:42Z",
      "side": 1,
      "message": "Right, you can\u0027t use reflect.  What is missing from reflectlite?\n\nI don\u0027t see why you need to use NewAt.  We know the type of the field.  Can we do something like (*poll.FD)(unsafe.Pointer(vpdf.Addr().Pointer())) ?",
      "parentUuid": "a1495e9e_91e02d22",
      "revId": "4cbffeca34eb96ee0271aff07271eb13daebe1be",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}