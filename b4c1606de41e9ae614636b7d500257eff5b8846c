{
  "comments": [
    {
      "key": {
        "uuid": "b7344e67_2b57c916",
        "filename": "src/cmd/compile/internal/gc/ssa.go",
        "patchSetId": 1
      },
      "lineNbr": 4349,
      "author": {
        "id": 5200
      },
      "writtenOn": "2016-05-19T22:07:43Z",
      "side": 1,
      "message": "I\u0027m not sure if it matters, but my gut instinct is that for an int64, the low-order part should be a uint32, not an int32 (because there\u0027s no sign bit on the low part).",
      "revId": "b4c1606de41e9ae614636b7d500257eff5b8846c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b7344e67_6b2631c3",
        "filename": "src/cmd/compile/internal/ssa/config.go",
        "patchSetId": 1
      },
      "lineNbr": 108,
      "author": {
        "id": 5200
      },
      "writtenOn": "2016-05-19T22:07:43Z",
      "side": 1,
      "message": "Comment that this returns (hi,lo)",
      "revId": "b4c1606de41e9ae614636b7d500257eff5b8846c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b7344e67_8b0db528",
        "filename": "src/cmd/compile/internal/ssa/gen/dec64.rules",
        "patchSetId": 1
      },
      "lineNbr": 83,
      "author": {
        "id": 5200
      },
      "writtenOn": "2016-05-19T22:07:43Z",
      "side": 1,
      "message": "Just c !\u003d 0?",
      "revId": "b4c1606de41e9ae614636b7d500257eff5b8846c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b7344e67_eb2481a6",
        "filename": "src/cmd/compile/internal/ssa/gen/dec64.rules",
        "patchSetId": 1
      },
      "lineNbr": 92,
      "author": {
        "id": 5200
      },
      "writtenOn": "2016-05-19T22:07:43Z",
      "side": 1,
      "message": "I presume you\u0027re saving 64x shifts for later?",
      "revId": "b4c1606de41e9ae614636b7d500257eff5b8846c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b7344e67_cb5c1d15",
        "filename": "src/cmd/compile/internal/ssa/gen/dec64.rules",
        "patchSetId": 1
      },
      "lineNbr": 110,
      "author": {
        "id": 5200
      },
      "writtenOn": "2016-05-19T22:07:43Z",
      "side": 1,
      "message": "Don\u0027t need type here?",
      "revId": "b4c1606de41e9ae614636b7d500257eff5b8846c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b7344e67_cb7f3d52",
        "filename": "src/cmd/compile/internal/ssa/gen/genericOps.go",
        "patchSetId": 1
      },
      "lineNbr": 419,
      "author": {
        "id": 5200
      },
      "writtenOn": "2016-05-19T22:07:43Z",
      "side": 1,
      "message": "I think I\u0027m a bit confused about the types here.  What type does Add32setcarry return?\n\nI was envisoning something like\n  v \u003d (Add32carry x y)\nreturns a tuple of value + carry.  Then you use (Carry v) for the 0/1 carry and (Result v) for the 32-bit add result.\n\nThen addition of x and y is\n  v \u003d (Add32carry (Int64Lo x) (Int64Lo y))\n  hi \u003d (Add32withcarry (Int64Hi x) (Int64Hi y) (Carry v))\n  lo \u003d (Result v)\n\nI just want to make sure what the type of (Add32carry) is.  In your CL, sometimes it is used as a naked 32-bit value, sometimes as an argument to Carry.  I just want to introduce the Result op (that\u0027s a bad name, needs something better) so it is clear which Int32s are just naked Int32s and which ones have a condition code associated with them (that needs to be preserved until use).",
      "revId": "b4c1606de41e9ae614636b7d500257eff5b8846c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}