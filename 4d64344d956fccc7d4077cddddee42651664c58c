{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "b933039c_1a8d45a9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 20,
      "author": {
        "id": 5821
      },
      "writtenOn": "2021-04-28T12:37:11Z",
      "side": 1,
      "message": "I also took a look at the state of delve on go 1.17 last week. I have annotated failing tests with the cause and fixed some. You can look at my annotations here:\n\nhttps://github.com/go-delve/delve/pull/2451",
      "revId": "4d64344d956fccc7d4077cddddee42651664c58c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5dd299df_d47e1735",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 20,
      "author": {
        "id": 14020
      },
      "writtenOn": "2021-04-28T13:13:48Z",
      "side": 1,
      "message": "Thanks. I was going to ask you about the panicCall stuff, but it sounds like you\u0027re already looking at that.",
      "parentUuid": "b933039c_1a8d45a9",
      "revId": "4d64344d956fccc7d4077cddddee42651664c58c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1cece966_c0010674",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 20,
      "author": {
        "id": 5821
      },
      "writtenOn": "2021-04-28T14:23:23Z",
      "side": 1,
      "message": "If you see delve doing something that looks wrong, let me know. The code for registerized variables should work but it is not as well tested as the code reading from memory.",
      "parentUuid": "5dd299df_d47e1735",
      "revId": "4d64344d956fccc7d4077cddddee42651664c58c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "db338651_b0b933e9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-04-27T20:10:00Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003d4d64344d",
      "tag": "autogenerated:trybots~beginning",
      "revId": "4d64344d956fccc7d4077cddddee42651664c58c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "90ca10da_e9b0599e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-04-27T20:49:46Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "db338651_b0b933e9",
      "tag": "autogenerated:trybots~happy",
      "revId": "4d64344d956fccc7d4077cddddee42651664c58c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9c8afd31_238a19aa",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 13315
      },
      "writtenOn": "2021-04-27T22:18:32Z",
      "side": 1,
      "message": "Looks good overall. Thanks.",
      "revId": "4d64344d956fccc7d4077cddddee42651664c58c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "97c51843_882f44c1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 7061
      },
      "writtenOn": "2021-04-28T02:01:32Z",
      "side": 1,
      "message": "I did a preliminary test (a quantity test, not a quality test)\nwith optargorder -- github.com/dr2chase/optargorder -- and\nthe numbers are superficially worse.  The test could be broken,\nof course.  It is whining about \"too many pieces\".\n\nI\u0027ll also try by hand.\nThe test binary for optargorder, is optargorder.\nIgnore the COULD NOT PARSE complaints.\n\n```\n# drchase-macbookpro ~/work/gocode/src/github.com/dr2chase/optargorder 21-04-27 21:51:37\n./optargorder ./old-dbg\n\tWARNING: COULD NOT PARSE (strconv.ryuDigits in /Users/drchase/work/go-debug/src/strconv/ftoaryu.go, err \u003d in:2:1: expected ), found \u0027}\u0027 (and 5 more errors))\n\tWARNING: COULD NOT PARSE (strconv.ryuDigits32 in /Users/drchase/work/go-debug/src/strconv/ftoaryu.go, err \u003d in:2:1: expected ), found \u0027}\u0027 (and 5 more errors))\n\tWARNING: COULD NOT PARSE (go/scanner.lower in /Users/drchase/work/go-debug/src/go/scanner/scanner.go, err \u003d in:2:1: expected declaration, found \u0027}\u0027)\nnFunctions,argumentError,tooManyPieces,missingSource,wrongOrder,missingDwarf,duplicated,1-totalErrors/nFunctions\n3300,458,31,2,35,7,11,0.835152\n# drchase-macbookpro ~/work/gocode/src/github.com/dr2chase/optargorder 21-04-27 21:51:48\n./optargorder ./new-dbg\n\tWARNING: COULD NOT PARSE (strconv.ryuDigits in /Users/drchase/work/go-debug/src/strconv/ftoaryu.go, err \u003d in:2:1: expected ), found \u0027}\u0027 (and 5 more errors))\n\tWARNING: COULD NOT PARSE (strconv.ryuDigits32 in /Users/drchase/work/go-debug/src/strconv/ftoaryu.go, err \u003d in:2:1: expected ), found \u0027}\u0027 (and 5 more errors))\n\tWARNING: COULD NOT PARSE (go/scanner.lower in /Users/drchase/work/go-debug/src/go/scanner/scanner.go, err \u003d in:2:1: expected declaration, found \u0027}\u0027)\nnFunctions,argumentError,tooManyPieces,missingSource,wrongOrder,missingDwarf,duplicated,1-totalErrors/nFunctions\n3300,458,821,2,16,5,11,0.602121\n```\n",
      "revId": "4d64344d956fccc7d4077cddddee42651664c58c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "354d923f_efebd6cb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 14020
      },
      "writtenOn": "2021-04-28T11:56:26Z",
      "side": 1,
      "message": "Thanks, I\u0027ll look that over. \n\nLooking at the code, https://github.com/dr2chase/optargorder/blob/master/checkargorder.go#L306, it seems to be assuming that everything is in memory as opposed to registers? Which would definitely not be the case. I\u0027ll poke at it a little and see if I can understand the logic.",
      "parentUuid": "97c51843_882f44c1",
      "revId": "4d64344d956fccc7d4077cddddee42651664c58c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "34a7be07_a63ba67d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 14020
      },
      "writtenOn": "2021-04-28T15:49:15Z",
      "side": 1,
      "message": "Yeah, I don\u0027t think the code in checkargorder.go is correct for multi-piece registerized params. Consider a function with a string parameter. The peices we get from with my patch are\n\n[{Size:8 Addr:0 RegNum:8 IsRegister:true} {Size:8 Addr:0 RegNum:9 IsRegister:true}]\n\nThe loop at line 322 is not going to touch this since Addr is zero for each piece. So when we return we still have a 2-element slice, meaning that it will trigger the \"too many pieces\" error. \n\nLet me know if I am misreading the code David, thanks.",
      "parentUuid": "354d923f_efebd6cb",
      "revId": "4d64344d956fccc7d4077cddddee42651664c58c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bf78a79a_d17d5106",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 7061
      },
      "writtenOn": "2021-04-29T15:03:20Z",
      "side": 1,
      "message": "I tried to back out all the cases where it rejected registers, but may have missed some.  This is not quite \"I have no idea what I am doing\" but it is definitely not something I do well.  I \"adapted\" the test from one of Alessandro\u0027s.",
      "parentUuid": "354d923f_efebd6cb",
      "revId": "4d64344d956fccc7d4077cddddee42651664c58c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2e71b151_dbfc3a53",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5821
      },
      "writtenOn": "2021-04-29T15:25:07Z",
      "side": 1,
      "message": "That code was originally written with very strong assumptions about the ABI, I think it needs some serious rework to function with the new ABI, orderArgsDwarf is trying to put the DWARF argument list in order by using the address of the arguments on the stack, which doesn\u0027t work at all for regabi.\nSome knowledge about the order that registers are used in regabi would have to be baked in.\nIt makes sense that that test gets worse after this change, because the compiler is no longer emitting locations that conform optargorder\u0027s worldview.",
      "parentUuid": "bf78a79a_d17d5106",
      "revId": "4d64344d956fccc7d4077cddddee42651664c58c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "efe07240_0e8b8aab",
        "filename": "src/cmd/compile/internal/dwarfgen/dwarf.go",
        "patchSetId": 2
      },
      "lineNbr": 329,
      "author": {
        "id": 13315
      },
      "writtenOn": "2021-04-27T22:18:32Z",
      "side": 1,
      "message": "Where in the code controls this is only for input parameters? (Sorry, I\u0027m not really familiar with this code)",
      "range": {
        "startLine": 326,
        "startChar": 0,
        "endLine": 329,
        "endChar": 54
      },
      "revId": "4d64344d956fccc7d4077cddddee42651664c58c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "03c779d4_4935bfc4",
        "filename": "src/cmd/compile/internal/dwarfgen/dwarf.go",
        "patchSetId": 2
      },
      "lineNbr": 329,
      "author": {
        "id": 14020
      },
      "writtenOn": "2021-04-28T12:26:34Z",
      "side": 1,
      "message": "The code in createComplexVars is doing everything based on what\u0027s been previously computed by the SSA backend (e.g. here https://go.googlesource.com/go/+/5f1df260a91183c605c08af7b00741d2761b84e4/src/cmd/compile/internal/dwarfgen/dwarf.go#320). Since the code in BuildFuncDebugNoOptimized only creates entries for register-allocated in params, this is how that\u0027s done.",
      "parentUuid": "efe07240_0e8b8aab",
      "range": {
        "startLine": 326,
        "startChar": 0,
        "endLine": 329,
        "endChar": 54
      },
      "revId": "4d64344d956fccc7d4077cddddee42651664c58c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e68add97_4808d846",
        "filename": "src/cmd/compile/internal/dwarfgen/dwarf.go",
        "patchSetId": 2
      },
      "lineNbr": 329,
      "author": {
        "id": 13315
      },
      "writtenOn": "2021-04-28T16:51:31Z",
      "side": 1,
      "message": "Okay, thanks. I think I understand how it works now.",
      "parentUuid": "03c779d4_4935bfc4",
      "range": {
        "startLine": 326,
        "startChar": 0,
        "endLine": 329,
        "endChar": 54
      },
      "revId": "4d64344d956fccc7d4077cddddee42651664c58c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "74a7b357_bb4b0968",
        "filename": "src/cmd/compile/internal/ssa/debug.go",
        "patchSetId": 2
      },
      "lineNbr": 1123,
      "author": {
        "id": 13315
      },
      "writtenOn": "2021-04-27T22:18:32Z",
      "side": 1,
      "message": "(Not for this CL) this comment is outdated.",
      "range": {
        "startLine": 1122,
        "startChar": 0,
        "endLine": 1123,
        "endChar": 13
      },
      "revId": "4d64344d956fccc7d4077cddddee42651664c58c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6eab45b5_8a7a22e7",
        "filename": "src/cmd/compile/internal/ssa/debug.go",
        "patchSetId": 2
      },
      "lineNbr": 1123,
      "author": {
        "id": 14020
      },
      "writtenOn": "2021-04-28T12:26:34Z",
      "side": 1,
      "message": "Indeed. I\u0027ll fix that up.",
      "parentUuid": "74a7b357_bb4b0968",
      "range": {
        "startLine": 1122,
        "startChar": 0,
        "endLine": 1123,
        "endChar": 13
      },
      "revId": "4d64344d956fccc7d4077cddddee42651664c58c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "915460e0_8f75e084",
        "filename": "src/cmd/compile/internal/ssa/debug.go",
        "patchSetId": 2
      },
      "lineNbr": 1250,
      "author": {
        "id": 13315
      },
      "writtenOn": "2021-04-27T22:18:32Z",
      "side": 1,
      "message": "We could just check a.Op without using a map.",
      "range": {
        "startLine": 1250,
        "startChar": 6,
        "endLine": 1250,
        "endChar": 31
      },
      "revId": "4d64344d956fccc7d4077cddddee42651664c58c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a1c6d400_8c9ff83e",
        "filename": "src/cmd/compile/internal/ssa/debug.go",
        "patchSetId": 2
      },
      "lineNbr": 1250,
      "author": {
        "id": 14020
      },
      "writtenOn": "2021-04-28T12:26:34Z",
      "side": 1,
      "message": "Good suggestion. Done.",
      "parentUuid": "915460e0_8f75e084",
      "range": {
        "startLine": 1250,
        "startChar": 6,
        "endLine": 1250,
        "endChar": 31
      },
      "revId": "4d64344d956fccc7d4077cddddee42651664c58c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b0f35a66_d2225aa5",
        "filename": "src/cmd/compile/internal/ssa/debug.go",
        "patchSetId": 2
      },
      "lineNbr": 1255,
      "author": {
        "id": 13315
      },
      "writtenOn": "2021-04-27T22:18:32Z",
      "side": 1,
      "message": "You probably can check that the other input is OpSP, and v.Aux is a Name of PPARAM.",
      "range": {
        "startLine": 1255,
        "startChar": 4,
        "endLine": 1255,
        "endChar": 22
      },
      "revId": "4d64344d956fccc7d4077cddddee42651664c58c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8dbe458a_2474d3c5",
        "filename": "src/cmd/compile/internal/ssa/debug.go",
        "patchSetId": 2
      },
      "lineNbr": 1255,
      "author": {
        "id": 14020
      },
      "writtenOn": "2021-04-28T12:26:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b0f35a66_d2225aa5",
      "range": {
        "startLine": 1255,
        "startChar": 4,
        "endLine": 1255,
        "endChar": 22
      },
      "revId": "4d64344d956fccc7d4077cddddee42651664c58c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d0ef14de_1532a805",
        "filename": "src/cmd/compile/internal/ssa/debug.go",
        "patchSetId": 2
      },
      "lineNbr": 1261,
      "author": {
        "id": 13315
      },
      "writtenOn": "2021-04-27T22:18:32Z",
      "side": 1,
      "message": "This probably will likely to have false positives. What about walking forward? All the spills should be pretty early, so it shouldn\u0027t walk very long. We can stop if you see a CALL or something.",
      "range": {
        "startLine": 1261,
        "startChar": 8,
        "endLine": 1261,
        "endChar": 22
      },
      "revId": "4d64344d956fccc7d4077cddddee42651664c58c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a57918bc_33d7a622",
        "filename": "src/cmd/compile/internal/ssa/debug.go",
        "patchSetId": 2
      },
      "lineNbr": 1261,
      "author": {
        "id": 14020
      },
      "writtenOn": "2021-04-28T20:58:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d0ef14de_1532a805",
      "range": {
        "startLine": 1261,
        "startChar": 8,
        "endLine": 1261,
        "endChar": 22
      },
      "revId": "4d64344d956fccc7d4077cddddee42651664c58c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e9cd3243_fabe05be",
        "filename": "src/cmd/compile/internal/ssa/debug.go",
        "patchSetId": 2
      },
      "lineNbr": 1313,
      "author": {
        "id": 13315
      },
      "writtenOn": "2021-04-27T22:18:32Z",
      "side": 1,
      "message": "What about parameters passed on stack?",
      "revId": "4d64344d956fccc7d4077cddddee42651664c58c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e99c47fb_f6dc561b",
        "filename": "src/cmd/compile/internal/ssa/debug.go",
        "patchSetId": 2
      },
      "lineNbr": 1313,
      "author": {
        "id": 14020
      },
      "writtenOn": "2021-04-28T12:26:34Z",
      "side": 1,
      "message": "Those are handled in createABIVars.",
      "parentUuid": "e9cd3243_fabe05be",
      "revId": "4d64344d956fccc7d4077cddddee42651664c58c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b9dbe024_793023cc",
        "filename": "src/cmd/compile/internal/ssa/debug.go",
        "patchSetId": 2
      },
      "lineNbr": 1336,
      "author": {
        "id": 13315
      },
      "writtenOn": "2021-04-27T22:18:32Z",
      "side": 1,
      "message": "Ideally for each parameter we could use the stack location as long as that parameter is spilled. I guess it is fine to change them altogether, as the registers should also be live until at least all of them are spilled.",
      "revId": "4d64344d956fccc7d4077cddddee42651664c58c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3179a722_117957bb",
        "filename": "src/cmd/compile/internal/ssa/debug.go",
        "patchSetId": 2
      },
      "lineNbr": 1336,
      "author": {
        "id": 14020
      },
      "writtenOn": "2021-04-28T12:26:34Z",
      "side": 1,
      "message": "Yes, good eye. Nothing gets by you Cherry :-).\n\nI chose to do things in a simple fashion as opposed to picking out the specific spill location for each parameter and generated a customized location for the param based on that (that would be more accurate).\n\nAnother consideration is supporting GDB\u0027s \"set var\" command. If you happen to be stopped partway through the spill sequence (let\u0027s say the first inparam has been spilled but not yet the second or third) and you do a \n\n  (gdb) set var p1\u003d101\n\nGDB will then modify the register that p1 came in, not the stack location, which would of course be incorrect. \n\nMy feeling is that it\u0027s ok to use this for now and then add more accuracy later if needed.",
      "parentUuid": "b9dbe024_793023cc",
      "revId": "4d64344d956fccc7d4077cddddee42651664c58c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d63d0818_8f1a6060",
        "filename": "src/cmd/compile/internal/ssa/debug.go",
        "patchSetId": 2
      },
      "lineNbr": 1336,
      "author": {
        "id": 13315
      },
      "writtenOn": "2021-04-28T16:51:31Z",
      "side": 1,
      "message": "Yeah, this is okay for now. Setting variable in debugger for a running program is scary. I think I never dared to do that (maybe I did once to bypass a segfault).\n\nA somewhat related thing is how we locate the prolog end. If we walk forward (see also my another comment), it may be easy to locate a spill of a particular arg than to locate the point where all args are spilled (for the latter we probably do need map, or a bitmap or something).",
      "parentUuid": "3179a722_117957bb",
      "revId": "4d64344d956fccc7d4077cddddee42651664c58c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "464235a3_a51866d6",
        "filename": "src/cmd/compile/internal/ssa/debug.go",
        "patchSetId": 2
      },
      "lineNbr": 1336,
      "author": {
        "id": 14020
      },
      "writtenOn": "2021-04-28T17:11:35Z",
      "side": 1,
      "message": "This is a fair point. I\u0027ll see about revamping it.",
      "parentUuid": "d63d0818_8f1a6060",
      "revId": "4d64344d956fccc7d4077cddddee42651664c58c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5d8c96a6_d44d95a2",
        "filename": "src/cmd/compile/internal/ssa/debug.go",
        "patchSetId": 2
      },
      "lineNbr": 1336,
      "author": {
        "id": 14020
      },
      "writtenOn": "2021-04-28T20:58:07Z",
      "side": 1,
      "message": "OK, latest patch uses a forward walk.",
      "parentUuid": "464235a3_a51866d6",
      "revId": "4d64344d956fccc7d4077cddddee42651664c58c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9ac87d89_6f1360d5",
        "filename": "src/cmd/compile/internal/ssa/debug.go",
        "patchSetId": 2
      },
      "lineNbr": 1351,
      "author": {
        "id": 13315
      },
      "writtenOn": "2021-04-27T22:18:32Z",
      "side": 1,
      "message": "I\u0027m not sure this. I think this offset is the offset within n, not including n\u0027s frame offset. (I could be wrong.)",
      "range": {
        "startLine": 1351,
        "startChar": 45,
        "endLine": 1351,
        "endChar": 48
      },
      "revId": "4d64344d956fccc7d4077cddddee42651664c58c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d48d3c98_615690da",
        "filename": "src/cmd/compile/internal/ssa/debug.go",
        "patchSetId": 2
      },
      "lineNbr": 1351,
      "author": {
        "id": 14020
      },
      "writtenOn": "2021-04-28T12:26:34Z",
      "side": 1,
      "message": "Sorry, this is misleading, see https://go.googlesource.com/go/+/5f1df260a91183c605c08af7b00741d2761b84e4/src/cmd/compile/internal/dwarfgen/dwarf.go#381. The offset in the LocalSlot winds up not being used for anything important, it\u0027s the offset in the location list that matters. I\u0027ll add a comment.",
      "parentUuid": "9ac87d89_6f1360d5",
      "range": {
        "startLine": 1351,
        "startChar": 45,
        "endLine": 1351,
        "endChar": 48
      },
      "revId": "4d64344d956fccc7d4077cddddee42651664c58c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4c80d1ba_170bea20",
        "filename": "src/cmd/compile/internal/ssa/debug.go",
        "patchSetId": 2
      },
      "lineNbr": 1351,
      "author": {
        "id": 13315
      },
      "writtenOn": "2021-04-28T16:51:31Z",
      "side": 1,
      "message": "Thanks. Leave it as 0, maybe?",
      "parentUuid": "d48d3c98_615690da",
      "range": {
        "startLine": 1351,
        "startChar": 45,
        "endLine": 1351,
        "endChar": 48
      },
      "revId": "4d64344d956fccc7d4077cddddee42651664c58c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e6467adf_a89213b9",
        "filename": "src/cmd/compile/internal/ssa/debug.go",
        "patchSetId": 2
      },
      "lineNbr": 1351,
      "author": {
        "id": 14020
      },
      "writtenOn": "2021-04-28T17:11:35Z",
      "side": 1,
      "message": "OK, I suppose this makes sense. Done.",
      "parentUuid": "4c80d1ba_170bea20",
      "range": {
        "startLine": 1351,
        "startChar": 45,
        "endLine": 1351,
        "endChar": 48
      },
      "revId": "4d64344d956fccc7d4077cddddee42651664c58c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c8edf2b2_5249374a",
        "filename": "src/cmd/compile/internal/ssa/debug.go",
        "patchSetId": 2
      },
      "lineNbr": 1377,
      "author": {
        "id": 14020
      },
      "writtenOn": "2021-04-28T13:12:11Z",
      "side": 1,
      "message": "This does not look correct. I think I have some more work to do here, stay tuned.",
      "revId": "4d64344d956fccc7d4077cddddee42651664c58c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ff0fc0ca_74cd95a8",
        "filename": "src/cmd/compile/internal/ssa/debug.go",
        "patchSetId": 2
      },
      "lineNbr": 1377,
      "author": {
        "id": 14020
      },
      "writtenOn": "2021-04-28T15:49:15Z",
      "side": 1,
      "message": "OK, I have a fix for this, will upload shortly.",
      "parentUuid": "c8edf2b2_5249374a",
      "revId": "4d64344d956fccc7d4077cddddee42651664c58c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a3c08170_516d3ba1",
        "filename": "src/cmd/compile/internal/ssa/debug.go",
        "patchSetId": 2
      },
      "lineNbr": 1391,
      "author": {
        "id": 13315
      },
      "writtenOn": "2021-04-27T22:18:32Z",
      "side": 1,
      "message": "Is this possible? list is not nil at line 1362 but is nil here?",
      "range": {
        "startLine": 1388,
        "startChar": 2,
        "endLine": 1391,
        "endChar": 3
      },
      "revId": "4d64344d956fccc7d4077cddddee42651664c58c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6c576de7_56abb16c",
        "filename": "src/cmd/compile/internal/ssa/debug.go",
        "patchSetId": 2
      },
      "lineNbr": 1391,
      "author": {
        "id": 14020
      },
      "writtenOn": "2021-04-28T12:26:34Z",
      "side": 1,
      "message": "I suppose you are right-- if the first one succeeds then the second one should as well. I think I\u0027d like to leave it in just in case the code evolves later on in time somehow.",
      "parentUuid": "a3c08170_516d3ba1",
      "range": {
        "startLine": 1388,
        "startChar": 2,
        "endLine": 1391,
        "endChar": 3
      },
      "revId": "4d64344d956fccc7d4077cddddee42651664c58c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "72611002_f8058191",
        "filename": "src/cmd/compile/internal/ssa/debug.go",
        "patchSetId": 2
      },
      "lineNbr": 1391,
      "author": {
        "id": 13315
      },
      "writtenOn": "2021-04-30T18:25:20Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "6c576de7_56abb16c",
      "range": {
        "startLine": 1388,
        "startChar": 2,
        "endLine": 1391,
        "endChar": 3
      },
      "revId": "4d64344d956fccc7d4077cddddee42651664c58c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ed80c080_d0f8d80f",
        "filename": "src/cmd/compile/internal/ssa/debug.go",
        "patchSetId": 2
      },
      "lineNbr": 1394,
      "author": {
        "id": 13315
      },
      "writtenOn": "2021-04-27T22:18:32Z",
      "side": 1,
      "message": "I\u0027m not sure I understand this. call_frame_cfa sounds like the FP. But the code above also does this, so it is probably okay.",
      "range": {
        "startLine": 1394,
        "startChar": 29,
        "endLine": 1394,
        "endChar": 49
      },
      "revId": "4d64344d956fccc7d4077cddddee42651664c58c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}