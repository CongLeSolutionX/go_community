{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "3ec66d85_fc4cf3eb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-01-18T21:32:32Z",
      "side": 1,
      "message": "SlowBots beginning. Status page: https://farmer.golang.org/try?commit\u003de308228e",
      "tag": "autogenerated:trybots~beginning",
      "revId": "e308228e408f443c8f63483e9de0c41226466abd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8d4ef46a_64d0de94",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-01-18T21:44:16Z",
      "side": 1,
      "message": "SlowBots are happy.\n\nSlowBot builds that ran:\n* js-wasm\n",
      "parentUuid": "3ec66d85_fc4cf3eb",
      "tag": "autogenerated:trybots~happy",
      "revId": "e308228e408f443c8f63483e9de0c41226466abd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9b1e4c2a_2bee8169",
        "filename": "src/runtime/stack_test.go",
        "patchSetId": 4
      },
      "lineNbr": 117,
      "author": {
        "id": 5167
      },
      "writtenOn": "2022-01-19T15:33:43Z",
      "side": 1,
      "message": "Any idea why we do this in a goroutine at all? It seems like we could just lift this up and have a little less synchronization.",
      "revId": "e308228e408f443c8f63483e9de0c41226466abd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0f023094_4595760a",
        "filename": "src/runtime/stack_test.go",
        "patchSetId": 4
      },
      "lineNbr": 117,
      "author": {
        "id": 6365
      },
      "writtenOn": "2022-01-19T15:55:35Z",
      "side": 1,
      "message": "I don\u0027t know: I assumed it might have something to do with escape analysis or GC optimization — maybe to avoid running on the parent goroutine\u0027s stack, or to avoid false-reachability if the compile eliminates the dead-store of `s \u003d nil`? (It was added way back in CL 76080044.)\n\nBut I suppose the compiler can\u0027t safely eliminate that store (because it is observable via the finalizer), and the comment for runtime.SetFinalizer does promise to run it “in a separate goroutine”, and the test still passed when I eliminated the goroutine in an earlier draft...\n\nSo the only plausible reason I can think of is: maybe it was in a separate goroutine so that the test would reach the timeout even if the call to SetFinalizer deadlocked? But if that\u0027s the case, it still seems more useful to just let the test time out so that we can diagnose it from the resulting goroutine dump.\n\nRemoved the extra goroutine.",
      "parentUuid": "9b1e4c2a_2bee8169",
      "revId": "e308228e408f443c8f63483e9de0c41226466abd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}