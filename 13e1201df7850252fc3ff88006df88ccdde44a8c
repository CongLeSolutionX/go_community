{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "43f09d65_fb0ec1fb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-02-11T09:10:42Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003d13e1201d\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "13e1201df7850252fc3ff88006df88ccdde44a8c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "25a0d1f2_6d5525fc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-02-11T09:17:50Z",
      "side": 1,
      "message": "Build is still in progress... Status page: https://farmer.golang.org/try?commit\u003d13e1201d\nFailed on linux-amd64-race: https://storage.googleapis.com/go-build-log/13e1201d/linux-amd64-race_5df03c6a.log\nOther builds still in progress; subsequent failure notices suppressed until final report.\n\nConsult https://build.golang.org/ to see whether they are new failures. Keep in mind that TryBots currently test *exactly* your git commit, without rebasing. If your commit\u0027s git parent is old, the failure might\u0027ve already been fixed.\n",
      "parentUuid": "43f09d65_fb0ec1fb",
      "tag": "autogenerated:trybots~progress",
      "revId": "13e1201df7850252fc3ff88006df88ccdde44a8c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "78898663_9627b49e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-02-11T09:22:08Z",
      "side": 1,
      "message": "1 of 45 TryBots failed.\nFailed on linux-amd64-race: https://storage.googleapis.com/go-build-log/13e1201d/linux-amd64-race_5df03c6a.log\n\nConsult https://build.golang.org/ to see whether they are new failures. Keep in mind that TryBots currently test *exactly* your git commit, without rebasing. If your commit\u0027s git parent is old, the failure might\u0027ve already been fixed.\n\n",
      "parentUuid": "43f09d65_fb0ec1fb",
      "tag": "autogenerated:trybots~failed",
      "revId": "13e1201df7850252fc3ff88006df88ccdde44a8c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dab18c86_2c5d8bbf",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 5200
      },
      "writtenOn": "2023-02-11T16:45:56Z",
      "side": 1,
      "message": "We\u0027ve historically avoided doing this because it messes up stack traces. For example, what does this program print:\n\npackage main\n\nimport \"runtime\"\n\nfunc main() {\n\tf(4)\n}\n\nfunc f(n int) {\n\tif n \u003e 0 {\n\t\tf(n - 1)\n\t\treturn\n\t}\n\tvar b [1024]byte\n\tn \u003d runtime.Stack(b[:], false)\n\tprintln(string(b[:n]))\n}\n\nThis would need a proposal, at least, before we consider using it.",
      "revId": "13e1201df7850252fc3ff88006df88ccdde44a8c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f52fbae8_62d04e33",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 55763
      },
      "writtenOn": "2023-02-11T16:47:07Z",
      "side": 1,
      "message": "AFAIT this is related to CL 466865, I\u0027ve done `go test -count\u003d10 -race ./net/http/` and was not able to reproduce (I run linux amd64 too).\nThis have the same crash as https://golang.org/issues/58446.\n\nSo I think this is solved once CL 467055 or CL 467355 is merged (whichever one solve the issue).",
      "parentUuid": "78898663_9627b49e",
      "revId": "13e1201df7850252fc3ff88006df88ccdde44a8c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "af99bae8_89f69f85",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 55763
      },
      "writtenOn": "2023-02-11T16:55:16Z",
      "side": 1,
      "message": "I do not think this require a proposal. (also some proposals changing the sementics were refused already)\nYour example program with my patch prints:\n```\n$ go run a.go \ngoroutine 1 [running]:\nmain.f(0x7f93f66aa888?)\n\t/mnt/ramdisk/a.go:15 +0x39\nmain.f(0x18000000000?)\n\t/mnt/ramdisk/a.go:11 +0x93\nmain.f(0x404da5?)\n\t/mnt/ramdisk/a.go:11 +0x93\nmain.f(0x7f93f66aa6a8?)\n\t/mnt/ramdisk/a.go:11 +0x93\nmain.f(0xc0000021a0?)\n\t/mnt/ramdisk/a.go:11 +0x93\nmain.main()\n\t/mnt/ramdisk/a.go:6 +0x18\n```\nThis was brought up to my attention so I added in patch set 4 to 5:\n```go\n\t\tfor _, v :\u003d range b.Values {\n\t\t\tswitch v.Op {\n\t\t\tcase OpClosureLECall, OpInterLECall, OpTailLECall:\n\t\t\t\t// do not do if this might be observable through runtime.Callers\n\t\t\t\tif f.pass.debug \u003e 1 {\n\t\t\t\t\tf.Warnl(b.Pos, \"failed because we call an other function\")\n\t\t\t\t}\n\t\t\t\treturn\n\t\t\tcase OpStaticLECall:\n\t\t\t\tif v.Aux.(*AuxCall).Fn.Name \u003d\u003d f.OwnAux.Fn.Name {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\t// TODO: this is on the easy side of interprocedural optimisations, we\n\t\t\t\t// are leaving lots on the table here. If the function we call never\n\t\t\t\t// calls runtime.Callers this would still be safe to do.\n\t\t\t\t// do not do if this might be observable through runtime.Callers\n\t\t\t\tif f.pass.debug \u003e 1 {\n\t\t\t\t\tf.Warnl(b.Pos, \"failed because we call an other function\")\n\t\t\t\t}\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n```\nWhich disable this optimisation if you call a function that is not yours, this prevent the optimisation to ever be observed within the program.\n\nI\u0027m thinking of adding some trivial interprocedural analysis similar to the escape code which marks functions that may observe the stack trace.\nThis would allows to optimise safe code like this (which my code currently conservatively do not optimize):\n```go\n//go:noinline\nfunc defaultCase() uint64 {\n  // we can trivialy prove that defaultCase never observe the stack trace\n  return 42\n}\n\nfunc recurse(x uint64) uint64 {\n  if x !\u003d 0 {\n    return recurse(x)\n  }\n  return defaultCase()\n}\n```",
      "parentUuid": "dab18c86_2c5d8bbf",
      "revId": "13e1201df7850252fc3ff88006df88ccdde44a8c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f607de3b_4a7d9b23",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 5200
      },
      "writtenOn": "2023-02-11T18:13:31Z",
      "side": 1,
      "message": "Ok, I didn\u0027t realize that. So if there\u0027s any other call besides to itself, then the optimization is turned off? Then I think you\u0027re right we don\u0027t need a proposal for this as it isn\u0027t observable.\n\nThere is still the issue that this introduces a \"performance optimization ratchet\", where once this is implemented, people will use it where otherwise it would cause a stack overflow, and now we\u0027re never going to be able to turn it off. It becomes an additional requirement of any implementation.\nI\u0027m not sure that is a dealbreaker, but something to think about.\n\n\u003e I\u0027m thinking of adding some trivial interprocedural analysis similar to the escape code which marks functions that may observe the stack trace.\n\u003e This would allows to optimise safe code like this (which my code currently conservatively do not optimize):\n\nThat would probably help, yes. Interface calls are a problem because the target is statically unknown, but maybe there are enough cases that could still benefit.\n\nSpeaking of which, you said this triggers a bunch. Could you point to some examples? Particularly, in non-test code? I\u0027m curious what\u0027s using recursion like this but calling no other functions.",
      "parentUuid": "af99bae8_89f69f85",
      "revId": "13e1201df7850252fc3ff88006df88ccdde44a8c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0e1e4c0c_6b0c758b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 55763
      },
      "writtenOn": "2023-02-11T19:19:21Z",
      "side": 1,
      "message": "This is actually pretty useless (TIL the last steps of ./make.bash do not share a build cache):\n- https://github.com/golang/go/blob/261fe25c83a94fc3defe064baed3944cd3d16959/src/go/printer/nodes.go#L1276\n- https://github.com/golang/go/blob/261fe25c83a94fc3defe064baed3944cd3d16959/src/cmd/internal/obj/arm/asm5.go#L1145 (2 other occurances in that function)\n- https://github.com/golang/go/blob/261fe25c83a94fc3defe064baed3944cd3d16959/src/cmd/internal/obj/arm64/asm7.go#L2231 (1 other occurances in that function)\n- https://github.com/golang/go/blob/261fe25c83a94fc3defe064baed3944cd3d16959/src/cmd/internal/obj/ppc64/asm9.go#L1145 (16 other occurances in that function)\n- https://github.com/ianlancetaylor/demangle/blob/0058ec4f073c198fb42ea276530cde4e912f6149/demangle.go#L503\n\nWithout the anti observation code (overestimating what would be possible with interprocedural marking of stack observations), you get something that seems reasonable to me:\n\n- https://github.com/golang/go/blob/261fe25c83a94fc3defe064baed3944cd3d16959/src/cmd/compile/internal/escape/utils.go#L164 cmd/compile/internal/escape.mayAffectMemory\n- https://github.com/golang/go/blob/261fe25c83a94fc3defe064baed3944cd3d16959/src/cmd/compile/internal/escape/utils.go#L152 cmd/compile/internal/escape.mayAffectMemory\n- https://github.com/golang/go/blob/261fe25c83a94fc3defe064baed3944cd3d16959/src/cmd/compile/internal/escape/utils.go#L156 cmd/compile/internal/escape.mayAffectMemory\n- https://github.com/golang/go/blob/261fe25c83a94fc3defe064baed3944cd3d16959/src/cmd/compile/internal/escape/utils.go#L160 cmd/compile/internal/escape.mayAffectMemory\n- https://github.com/golang/go/blob/261fe25c83a94fc3defe064baed3944cd3d16959/src/cmd/compile/internal/ir/expr.go#L1014 cmd/compile/internal/ir.SameSafeExpr\n- https://github.com/golang/go/blob/261fe25c83a94fc3defe064baed3944cd3d16959/src/cmd/compile/internal/ir/expr.go#L1019 cmd/compile/internal/ir.SameSafeExpr\n- https://github.com/golang/go/blob/261fe25c83a94fc3defe064baed3944cd3d16959/src/cmd/compile/internal/ir/expr.go#L824 cmd/compile/internal/ir.IsAddressable\n- https://github.com/golang/go/blob/261fe25c83a94fc3defe064baed3944cd3d16959/src/cmd/compile/internal/ir/expr.go#L835 cmd/compile/internal/ir.IsAddressable\n- https://github.com/golang/go/blob/261fe25c83a94fc3defe064baed3944cd3d16959/src/cmd/compile/internal/noder/helpers.go#L263 cmd/compile/internal/noder.isNotInHeap\n- https://github.com/golang/go/blob/261fe25c83a94fc3defe064baed3944cd3d16959/src/cmd/compile/internal/ssagen/ssa.go#L7941 cmd/compile/internal/ssagen.clobberBase\n- https://github.com/golang/go/blob/261fe25c83a94fc3defe064baed3944cd3d16959/src/cmd/compile/internal/ssagen/ssa.go#L7947 cmd/compile/internal/ssagen.clobberBase\n- https://github.com/golang/go/blob/261fe25c83a94fc3defe064baed3944cd3d16959/src/cmd/compile/internal/staticinit/sched.go#L694 cmd/compile/internal/staticinit.StaticLoc\n- https://github.com/golang/go/blob/261fe25c83a94fc3defe064baed3944cd3d16959/src/cmd/compile/internal/syntax/parser.go#L1225 cmd/compile/internal/syntax.isValue\n- https://github.com/golang/go/blob/261fe25c83a94fc3defe064baed3944cd3d16959/src/cmd/compile/internal/syntax/parser.go#L727 cmd/compile/internal/syntax.isTypeElem\n- https://github.com/golang/go/blob/261fe25c83a94fc3defe064baed3944cd3d16959/src/cmd/compile/internal/typecheck/iexport.go#L390 cmd/compile/internal/typecheck.simplifyForExport\n- https://github.com/golang/go/blob/261fe25c83a94fc3defe064baed3944cd3d16959/src/cmd/compile/internal/types2/struct.go#L189 cmd/compile/internal/types2.embeddedFieldIdent\n- https://github.com/golang/go/blob/261fe25c83a94fc3defe064baed3944cd3d16959/src/cmd/compile/internal/types2/struct.go#L195 cmd/compile/internal/types2.embeddedFieldIdent\n- https://github.com/golang/go/blob/261fe25c83a94fc3defe064baed3944cd3d16959/src/cmd/compile/internal/walk/complit.go#L168 cmd/compile/internal/walk.isStaticCompositeLiteral\n- https://github.com/golang/go/blob/261fe25c83a94fc3defe064baed3944cd3d16959/src/cmd/internal/obj/arm64/asm7.go#L2231 cmd/internal/obj/arm64.cmp\n- https://github.com/golang/go/blob/261fe25c83a94fc3defe064baed3944cd3d16959/src/cmd/internal/obj/arm64/asm7.go#L2234 cmd/internal/obj/arm64.cmp\n- https://github.com/golang/go/blob/261fe25c83a94fc3defe064baed3944cd3d16959/src/cmd/internal/obj/arm/asm5.go#L1145 cmd/internal/obj/arm.cmp\n- https://github.com/golang/go/blob/261fe25c83a94fc3defe064baed3944cd3d16959/src/cmd/internal/obj/arm/asm5.go#L1148 cmd/internal/obj/arm.cmp\n- https://github.com/golang/go/blob/261fe25c83a94fc3defe064baed3944cd3d16959/src/cmd/internal/obj/arm/asm5.go#L1163 cmd/internal/obj/arm.cmp\n- https://github.com/golang/go/blob/261fe25c83a94fc3defe064baed3944cd3d16959/src/cmd/internal/obj/ppc64/asm9.go#L1145 cmd/internal/obj/ppc64.cmp\n- https://github.com/golang/go/blob/261fe25c83a94fc3defe064baed3944cd3d16959/src/cmd/internal/obj/ppc64/asm9.go#L1147 cmd/internal/obj/ppc64.cmp\n- https://github.com/golang/go/blob/261fe25c83a94fc3defe064baed3944cd3d16959/src/cmd/internal/obj/ppc64/asm9.go#L1149 cmd/internal/obj/ppc64.cmp\n- https://github.com/golang/go/blob/261fe25c83a94fc3defe064baed3944cd3d16959/src/cmd/internal/obj/ppc64/asm9.go#L1151 cmd/internal/obj/ppc64.cmp\n- https://github.com/golang/go/blob/261fe25c83a94fc3defe064baed3944cd3d16959/src/cmd/internal/obj/ppc64/asm9.go#L1153 cmd/internal/obj/ppc64.cmp\n- https://github.com/golang/go/blob/261fe25c83a94fc3defe064baed3944cd3d16959/src/cmd/internal/obj/ppc64/asm9.go#L1155 cmd/internal/obj/ppc64.cmp\n- https://github.com/golang/go/blob/261fe25c83a94fc3defe064baed3944cd3d16959/src/cmd/internal/obj/ppc64/asm9.go#L1157 cmd/internal/obj/ppc64.cmp\n- https://github.com/golang/go/blob/261fe25c83a94fc3defe064baed3944cd3d16959/src/cmd/internal/obj/ppc64/asm9.go#L1159 cmd/internal/obj/ppc64.cmp\n- https://github.com/golang/go/blob/261fe25c83a94fc3defe064baed3944cd3d16959/src/cmd/internal/obj/ppc64/asm9.go#L1162 cmd/internal/obj/ppc64.cmp\n- https://github.com/golang/go/blob/261fe25c83a94fc3defe064baed3944cd3d16959/src/cmd/internal/obj/ppc64/asm9.go#L1166 cmd/internal/obj/ppc64.cmp\n- https://github.com/golang/go/blob/261fe25c83a94fc3defe064baed3944cd3d16959/src/cmd/internal/obj/ppc64/asm9.go#L1168 cmd/internal/obj/ppc64.cmp\n- https://github.com/golang/go/blob/261fe25c83a94fc3defe064baed3944cd3d16959/src/cmd/internal/obj/ppc64/asm9.go#L1171 cmd/internal/obj/ppc64.cmp\n- https://github.com/golang/go/blob/261fe25c83a94fc3defe064baed3944cd3d16959/src/cmd/internal/obj/ppc64/asm9.go#L1174 cmd/internal/obj/ppc64.cmp\n- https://github.com/golang/go/blob/261fe25c83a94fc3defe064baed3944cd3d16959/src/cmd/internal/obj/ppc64/asm9.go#L1177 cmd/internal/obj/ppc64.cmp\n- https://github.com/golang/go/blob/261fe25c83a94fc3defe064baed3944cd3d16959/src/cmd/internal/obj/ppc64/asm9.go#L1180 cmd/internal/obj/ppc64.cmp\n- https://github.com/golang/go/blob/261fe25c83a94fc3defe064baed3944cd3d16959/src/cmd/internal/obj/ppc64/asm9.go#L1183 cmd/internal/obj/ppc64.cmp\n- https://github.com/golang/go/blob/261fe25c83a94fc3defe064baed3944cd3d16959/src/cmd/internal/obj/ppc64/asm9.go#L1192 cmd/internal/obj/ppc64.cmp\n- https://github.com/golang/go/blob/261fe25c83a94fc3defe064baed3944cd3d16959/src/cmd/vendor/github.com/ianlancetaylor/demangle/demangle.go#L484 cmd/vendor/github.com/ianlancetaylor/demangle.hasReturnType\n- https://github.com/golang/go/blob/261fe25c83a94fc3defe064baed3944cd3d16959/src/cmd/vendor/github.com/ianlancetaylor/demangle/demangle.go#L490 cmd/vendor/github.com/ianlancetaylor/demangle.hasReturnType\n- https://github.com/golang/go/blob/261fe25c83a94fc3defe064baed3944cd3d16959/src/cmd/vendor/github.com/ianlancetaylor/demangle/demangle.go#L492 cmd/vendor/github.com/ianlancetaylor/demangle.hasReturnType\n- https://github.com/golang/go/blob/261fe25c83a94fc3defe064baed3944cd3d16959/src/cmd/vendor/github.com/ianlancetaylor/demangle/demangle.go#L503 cmd/vendor/github.com/ianlancetaylor/demangle.isCDtorConversion\n- https://github.com/golang/go/blob/261fe25c83a94fc3defe064baed3944cd3d16959/src/cmd/vendor/golang.org/x/arch/arm/armasm/decode.go#L279 cmd/vendor/golang.org/x/arch/arm/armasm.decodeArg\n- https://github.com/golang/go/blob/261fe25c83a94fc3defe064baed3944cd3d16959/src/cmd/vendor/golang.org/x/arch/arm/armasm/decode.go#L421 cmd/vendor/golang.org/x/arch/arm/armasm.decodeArg\n- https://github.com/golang/go/blob/261fe25c83a94fc3defe064baed3944cd3d16959/src/cmd/vendor/golang.org/x/arch/arm/armasm/decode.go#L426 cmd/vendor/golang.org/x/arch/arm/armasm.decodeArg\n- https://github.com/golang/go/blob/261fe25c83a94fc3defe064baed3944cd3d16959/src/cmd/vendor/golang.org/x/arch/arm/armasm/decode.go#L431 cmd/vendor/golang.org/x/arch/arm/armasm.decodeArg\n- https://github.com/golang/go/blob/261fe25c83a94fc3defe064baed3944cd3d16959/src/cmd/vendor/golang.org/x/arch/arm/armasm/decode.go#L436 cmd/vendor/golang.org/x/arch/arm/armasm.decodeArg\n- https://github.com/golang/go/blob/261fe25c83a94fc3defe064baed3944cd3d16959/src/cmd/vendor/golang.org/x/arch/arm/armasm/decode.go#L458 cmd/vendor/golang.org/x/arch/arm/armasm.decodeArg\n- https://github.com/golang/go/blob/261fe25c83a94fc3defe064baed3944cd3d16959/src/cmd/vendor/golang.org/x/arch/arm/armasm/decode.go#L463 cmd/vendor/golang.org/x/arch/arm/armasm.decodeArg\n- https://github.com/golang/go/blob/261fe25c83a94fc3defe064baed3944cd3d16959/src/cmd/vendor/golang.org/x/arch/arm/armasm/decode.go#L484 cmd/vendor/golang.org/x/arch/arm/armasm.decodeArg\n- https://github.com/golang/go/blob/261fe25c83a94fc3defe064baed3944cd3d16959/src/cmd/vendor/golang.org/x/tools/go/analysis/passes/httpresponse/httpresponse.go#L166 cmd/vendor/golang.org/x/tools/go/analysis/passes/httpresponse.rootIdent\n- https://github.com/golang/go/blob/261fe25c83a94fc3defe064baed3944cd3d16959/src/go/ast/filter.go#L69 go/ast.fieldName\n- https://github.com/golang/go/blob/261fe25c83a94fc3defe064baed3944cd3d16959/src/go/build/constraint/expr.go#L525 go/build/constraint.pushNot\n- https://github.com/golang/go/blob/261fe25c83a94fc3defe064baed3944cd3d16959/src/go/constant/value.go#L899 go/constant.ToInt\n- https://github.com/golang/go/blob/261fe25c83a94fc3defe064baed3944cd3d16959/src/go/constant/value.go#L921 go/constant.ToFloat\n- https://github.com/golang/go/blob/261fe25c83a94fc3defe064baed3944cd3d16959/src/go/doc/reader.go#L129 go/doc.baseTypeName\n- https://github.com/golang/go/blob/261fe25c83a94fc3defe064baed3944cd3d16959/src/go/doc/reader.go#L131 go/doc.baseTypeName\n- https://github.com/golang/go/blob/261fe25c83a94fc3defe064baed3944cd3d16959/src/go/doc/reader.go#L139 go/doc.baseTypeName\n- https://github.com/golang/go/blob/261fe25c83a94fc3defe064baed3944cd3d16959/src/go/doc/reader.go#L141 go/doc.baseTypeName\n- https://github.com/golang/go/blob/261fe25c83a94fc3defe064baed3944cd3d16959/src/go/parser/parser.go#L2671 go/parser.isTypeElem\n- https://github.com/golang/go/blob/261fe25c83a94fc3defe064baed3944cd3d16959/src/go/printer/nodes.go#L1243 go/printer.isTypeName\n- https://github.com/golang/go/blob/261fe25c83a94fc3defe064baed3944cd3d16959/src/go/printer/nodes.go#L1268 go/printer.stripParens\n- https://github.com/golang/go/blob/261fe25c83a94fc3defe064baed3944cd3d16959/src/go/printer/nodes.go#L1276 go/printer.stripParensAlways\n- https://github.com/golang/go/blob/261fe25c83a94fc3defe064baed3944cd3d16959/src/go/printer/nodes.go#L435 go/printer.isTypeElem\n- https://github.com/golang/go/blob/261fe25c83a94fc3defe064baed3944cd3d16959/src/go/printer/printer.go#L1076 go/printer.getLastComment\n- https://github.com/golang/go/blob/261fe25c83a94fc3defe064baed3944cd3d16959/src/go/types/struct.go#L187 go/types.embeddedFieldIdent\n- https://github.com/golang/go/blob/261fe25c83a94fc3defe064baed3944cd3d16959/src/go/types/struct.go#L192 go/types.embeddedFieldIdent\n- https://github.com/golang/go/blob/261fe25c83a94fc3defe064baed3944cd3d16959/src/go/types/struct.go#L194 go/types.embeddedFieldIdent\n- https://github.com/golang/go/blob/261fe25c83a94fc3defe064baed3944cd3d16959/src/math/pow.go#L87 math.pow\n- https://github.com/golang/go/blob/261fe25c83a94fc3defe064baed3944cd3d16959/src/net/http/server.go#L2106 net/http.requestBodyRemains\n- https://github.com/golang/go/blob/261fe25c83a94fc3defe064baed3944cd3d16959/src/net/http/transfer.go#L1103 net/http.isKnownInMemoryReader\n- https://github.com/golang/go/blob/261fe25c83a94fc3defe064baed3944cd3d16959/src/net/http/transfer.go#L1106 net/http.isKnownInMemoryReader\n\nIt\u0027s seems that this pattern is only consistently used after problem reduction when you have multiple options in the problem.\nFor example isKnownInMemoryReader from net/http:\n```go\nfunc isKnownInMemoryReader(r io.Reader) bool {\n\tswitch r.(type) {\n\tcase *bytes.Reader, *bytes.Buffer, *strings.Reader:\n\t\treturn true // edge cases\n\t}\n\tif r, ok :\u003d unwrapNopCloser(r); ok { // reduce\n\t\treturn isKnownInMemoryReader(r) // apply on reduced problem\n\t}\n\tif r, ok :\u003d r.(*readTrackingBody); ok { // reduce\n\t\treturn isKnownInMemoryReader(r.ReadCloser) // apply on reduced problem\n\t}\n\treturn false // default case\n}\n```\nOr `isStaticCompositeLiteral`:\n```go\nfunc isStaticCompositeLiteral(n ir.Node) bool {\n\tswitch n.Op() { // test\n\tcase ir.OSLICELIT:\n\t\treturn false\n\tcase ir.OARRAYLIT:\n\t\t// checks\n\tcase ir.OSTRUCTLIT:\n\t\t// checks\n\tcase ir.OLITERAL, ir.ONIL:\n\t\treturn true\n\tcase ir.OCONVIFACE:\n\t\t// problem reduction\n\t\tn :\u003d n.(*ir.ConvExpr)\n\t\tval :\u003d ir.Node(n)\n\t\t// checks\n\t\treturn isStaticCompositeLiteral(val) // loop on reduced problem\n\t}\n\treturn false // default\n}\n```\nThe ones I randomly looked to all had this \"reapply the same algorithm on a smaller part of the original problem\" pattern.",
      "parentUuid": "f607de3b_4a7d9b23",
      "revId": "13e1201df7850252fc3ff88006df88ccdde44a8c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}