{
  "comments": [
    {
      "key": {
        "uuid": "1fd49531_74b52c9e",
        "filename": "src/cmd/link/internal/ppc64/asm.go",
        "patchSetId": 3
      },
      "lineNbr": 540,
      "author": {
        "id": 13315
      },
      "writtenOn": "2017-06-12T13:15:31Z",
      "side": 1,
      "message": "I think the idea we discussed in Issue 20492 is that for external linking, you\u0027ll need trampolines for all cross-section calls. So this condition may need to change to something like s.Sect !\u003d r.Sym.Sect in external linking. Also need to be sure that the trampoline and the caller are in the same section.",
      "range": {
        "startLine": 540,
        "startChar": 5,
        "endLine": 540,
        "endChar": 31
      },
      "revId": "0fc6656d39a99c99ea271b3e68305358eb70e07b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5b0daac9_b1c004c9",
        "filename": "src/cmd/link/internal/ppc64/asm.go",
        "patchSetId": 3
      },
      "lineNbr": 540,
      "author": {
        "id": 6320
      },
      "writtenOn": "2017-06-13T12:10:47Z",
      "side": 1,
      "message": "Yes we did decide that.  But I was thinking that this was simpler and should be good enough but now I see why it isn\u0027t. \n\nYour comment about putting the trampoline in the same section as the caller is something I hadn\u0027t considered, so I changed data.go to handle that.",
      "parentUuid": "1fd49531_74b52c9e",
      "range": {
        "startLine": 540,
        "startChar": 5,
        "endLine": 540,
        "endChar": 31
      },
      "revId": "0fc6656d39a99c99ea271b3e68305358eb70e07b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "75cbb746_65ad1895",
        "filename": "src/cmd/link/internal/ppc64/asm.go",
        "patchSetId": 3
      },
      "lineNbr": 571,
      "author": {
        "id": 13315
      },
      "writtenOn": "2017-06-12T13:15:31Z",
      "side": 1,
      "message": "I think it is clearer to put this comment inside the if.",
      "range": {
        "startLine": 571,
        "startChar": 4,
        "endLine": 571,
        "endChar": 52
      },
      "revId": "0fc6656d39a99c99ea271b3e68305358eb70e07b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "85188a2b_401cf701",
        "filename": "src/cmd/link/internal/ppc64/asm.go",
        "patchSetId": 3
      },
      "lineNbr": 571,
      "author": {
        "id": 6320
      },
      "writtenOn": "2017-06-13T12:10:47Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "75cbb746_65ad1895",
      "range": {
        "startLine": 571,
        "startChar": 4,
        "endLine": 571,
        "endChar": 52
      },
      "revId": "0fc6656d39a99c99ea271b3e68305358eb70e07b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6cc7f102_e327132e",
        "filename": "src/cmd/link/internal/ppc64/asm.go",
        "patchSetId": 3
      },
      "lineNbr": 594,
      "author": {
        "id": 13315
      },
      "writtenOn": "2017-06-12T13:15:31Z",
      "side": 1,
      "message": "I\u0027m still a little concerned about R12 here. In non-shared build mode, R12 is not reserved. Normally registers are not live across function calls, so this is fine. But there may be special cases (for example, Duff\u0027s Device)?",
      "range": {
        "startLine": 594,
        "startChar": 33,
        "endLine": 594,
        "endChar": 36
      },
      "revId": "0fc6656d39a99c99ea271b3e68305358eb70e07b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5d7d5e86_36678c60",
        "filename": "src/cmd/link/internal/ppc64/asm.go",
        "patchSetId": 3
      },
      "lineNbr": 594,
      "author": {
        "id": 6320
      },
      "writtenOn": "2017-06-13T12:10:47Z",
      "side": 1,
      "message": "Sorry I forgot to respond to your previous comment on this.  My thinking was that this was a function call to some unknown address so there should be no expectation of r12 remaining valid.  But I can change it to what it was before.",
      "parentUuid": "6cc7f102_e327132e",
      "range": {
        "startLine": 594,
        "startChar": 33,
        "endLine": 594,
        "endChar": 36
      },
      "revId": "0fc6656d39a99c99ea271b3e68305358eb70e07b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c2ce5e1c_4bd4ce49",
        "filename": "src/cmd/link/internal/ppc64/asm.go",
        "patchSetId": 3
      },
      "lineNbr": 594,
      "author": {
        "id": 13315
      },
      "writtenOn": "2017-06-13T15:50:18Z",
      "side": 1,
      "message": "In external linking (which I think could be static or dynamic), when does R12 need to hold the function entry address? Is it only needed for stubs created by the external linker? If this is the case, using R31 should be fine, because we no longer need the external linker to create call stubs.\n\nIf R12 is needed in other cases, we probably have to use R12 then. Normally it is ok. For special cases like runtime.duffzero/duffcopy, we can tell the compiler that R12 will be clobbered. Is there any other case that CALL does not kill registers?\n\nI\u0027ll go read the ABI doc. But leave a comment first.",
      "parentUuid": "5d7d5e86_36678c60",
      "range": {
        "startLine": 594,
        "startChar": 33,
        "endLine": 594,
        "endChar": 36
      },
      "revId": "0fc6656d39a99c99ea271b3e68305358eb70e07b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "73644025_e8e67f0b",
        "filename": "src/cmd/link/internal/ppc64/asm.go",
        "patchSetId": 3
      },
      "lineNbr": 594,
      "author": {
        "id": 6320
      },
      "writtenOn": "2017-06-13T17:12:35Z",
      "side": 1,
      "message": "If Go code is compiled for PIC (shared or dynlink) then at the start of each function call, it expects that R12 was passed holding the function\u0027s address, and uses that to initialize R2 with the TOC address.  Executables created by default with golang are not compiled for PIC (dynamic or static), and that is the reason this bug has happened, and that is the only case now where trampolines are being created.\n\nThe question is, is it ever possible to link a program where some Go code was compiled for PIC and some not.  I don\u0027t know if there is a situation where that could happen or if the linker tries to detect it.  To be safe R12 could be used here and then indicate R12 as clobbered for the duff devices calls.\n\nNote this does not affect C code because C code is always built with R12 and R2 set up.\n\nMy understanding is that the external linking can only create dynamic executables, and the internal linker must be used to create static executables on ppc64le.",
      "parentUuid": "c2ce5e1c_4bd4ce49",
      "range": {
        "startLine": 594,
        "startChar": 33,
        "endLine": 594,
        "endChar": 36
      },
      "revId": "0fc6656d39a99c99ea271b3e68305358eb70e07b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bf004c1b_9f5770a3",
        "filename": "src/cmd/link/internal/ppc64/asm.go",
        "patchSetId": 3
      },
      "lineNbr": 594,
      "author": {
        "id": 13315
      },
      "writtenOn": "2017-06-13T18:00:03Z",
      "side": 1,
      "message": "So, if I understand correctly, using R31 is ok even with external linking as long as we are not linking PIC and non-PIC together?\n\nI\u0027m not worried about linking PIC and non-PIC at the moment. I\u0027m not sure this even works on other architectures as well as on PPC64 even if R12 is set.\n\nIt is possible to create static binary with external linking:\n\n$ CGO_ENABLED\u003d1 GOARCH\u003dppc64le GOOS\u003dlinux CC\u003d/usr/bin/powerpc64le-linux-gnu-gcc go build -ldflags\u003d\u0027-linkmode\u003dexternal -extldflags\u003d-static\u0027 hello.go\n$ file hello\nhello: ELF 64-bit LSB  executable, 64-bit PowerPC or cisco 7500, version 1 (GNU/Linux), statically linked, for GNU/Linux 2.6.32, BuildID[sha1]\u003dce00110b7d2deaf27d65e5b5211cf70760f123fb, not stripped",
      "parentUuid": "73644025_e8e67f0b",
      "range": {
        "startLine": 594,
        "startChar": 33,
        "endLine": 594,
        "endChar": 36
      },
      "revId": "0fc6656d39a99c99ea271b3e68305358eb70e07b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "59f5082c_0128bf21",
        "filename": "src/cmd/link/internal/ppc64/asm.go",
        "patchSetId": 3
      },
      "lineNbr": 594,
      "author": {
        "id": 6320
      },
      "writtenOn": "2017-06-13T19:40:58Z",
      "side": 1,
      "message": "Only functions compiled as PIC expect R12 to hold the function\u0027s address.  It doesn\u0027t matter if it is linked internally or externally, only if the code was compiled for PIC.  In this fix trampolines are only being created for non-PIC code.  I was just trying to understand if there was any way this could be calling PIC code from non-PIC code.",
      "parentUuid": "bf004c1b_9f5770a3",
      "range": {
        "startLine": 594,
        "startChar": 33,
        "endLine": 594,
        "endChar": 36
      },
      "revId": "0fc6656d39a99c99ea271b3e68305358eb70e07b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b1e4fc53_6b5be859",
        "filename": "src/cmd/link/internal/ppc64/asm.go",
        "patchSetId": 3
      },
      "lineNbr": 594,
      "author": {
        "id": 13315
      },
      "writtenOn": "2017-06-14T13:10:02Z",
      "side": 1,
      "message": "Ok, thanks. I think we are fine with R31 (at least for now).",
      "parentUuid": "59f5082c_0128bf21",
      "range": {
        "startLine": 594,
        "startChar": 33,
        "endLine": 594,
        "endChar": 36
      },
      "revId": "0fc6656d39a99c99ea271b3e68305358eb70e07b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    }
  ]
}