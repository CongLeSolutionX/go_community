{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "041f0516_db86da3c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 13315
      },
      "writtenOn": "2024-09-05T19:10:54Z",
      "side": 1,
      "message": "It probably makes sense to make rconv keyed by architecture, instead of the ranges, so every architecture can use all the bits. But I don\u0027t understand why it needs the Addr. It is printing a register, and only it, so it shouldn\u0027t need other fields. If it needs other fields, it probably should be a different Type.",
      "revId": "880446fdcf4e9c5ae0dd07c8ca92ee6260dca3f7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fe6737c8_b89abf34",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 3400833
      },
      "writtenOn": "2024-09-06T11:54:35Z",
      "side": 1,
      "message": "The reason is because our SIMD registers have extensions, in SVE particularly we need to be able to specify a SIMD lane size like with NEON. The design I settled on was to put the register number in Addr.Reg as before, but I also use the Addr.Class field to contain some enumeration that represents the register extension. For example Z0.D \u003d\u003e Reg: REG_Z0, Class: EXT_D. I need both pieces of information to print the register. We also might need the Addr.Index field to print the index, e.g. Z0.D[1] as another example.\n\nI\u0027m currently working through a similar problem with the TYPE_MEM Addr, where I need the base address to be a register with a lane size extension, e.g. $43(Z0.D)(R5), which is needed for scatter-gather loads and stores.",
      "parentUuid": "041f0516_db86da3c",
      "revId": "880446fdcf4e9c5ae0dd07c8ca92ee6260dca3f7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0518491d_975a6552",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 13315
      },
      "writtenOn": "2024-09-06T16:57:55Z",
      "side": 1,
      "message": "I don\u0027t think Class is the right place to put the extension information. It is used for classify an Addr, not an input field. Even if the SVE codepath doesn\u0027t use Class for classification, using Class in two very different ways doesn\u0027t sound like a good idea.\n\nCould we do the same as NEON externsion/arrangements https://cs.opensource.google/go/go/+/master:src/cmd/internal/obj/link.go;l\u003d182-187 ?",
      "parentUuid": "fe6737c8_b89abf34",
      "revId": "880446fdcf4e9c5ae0dd07c8ca92ee6260dca3f7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f1375bf3_6df98b0c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 3400833
      },
      "writtenOn": "2024-09-09T13:41:18Z",
      "side": 1,
      "message": "I believe it would be possible to store the arrangement for SVE within the ~11 bits we\u0027ve got left for register numbers, I\u0027ll look into this. I thought it was convenient to use the space available to avoid running out of space in future. But maybe keying rconv with the architecture as you say would solve this problem better.",
      "parentUuid": "0518491d_975a6552",
      "revId": "880446fdcf4e9c5ae0dd07c8ca92ee6260dca3f7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b8902ad2_da074099",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 3400833
      },
      "writtenOn": "2024-09-10T13:54:29Z",
      "side": 1,
      "message": "I\u0027ve looked into this again and I can\u0027t find any space in the bits we have to add in Z/P registers.\n\nSince our register range is [8192, 13312), we have 12 bits of free space to work with, and one bit at position 13 that is always set. The top three bits can only hold 0-4 so we don\u0027t reach 13312, these are used already for REG_SPECIAL, REG_ARNG, REG_EXT and REG_SXT*. Underneath REG_ARNG, we have 9 bits that are already allocated so I don\u0027t have space to add a field for V/Z/P registers there. \n\nThere might be some more space hidden somewhere underneath another flag but it\u0027s hard to find and likely won\u0027t read very well in code. So keying rconv by architecture would be best in my opinion.\n\nDo you agree with this? If so I can try making this change to rconv and we can drop this patch, and I\u0027ll fix the SVE register type to wrap uint16 instead of *obj.Addr.",
      "parentUuid": "f1375bf3_6df98b0c",
      "revId": "880446fdcf4e9c5ae0dd07c8ca92ee6260dca3f7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b8fed31a_7b1b7dea",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 13315
      },
      "writtenOn": "2024-09-10T15:14:39Z",
      "side": 1,
      "message": "\u003e So keying rconv by architecture would be best in my opinion.\n\nSGTM. Thanks.",
      "parentUuid": "b8902ad2_da074099",
      "revId": "880446fdcf4e9c5ae0dd07c8ca92ee6260dca3f7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "05c7c5f4_c49616ea",
        "filename": "src/cmd/internal/obj/util.go",
        "patchSetId": 4
      },
      "lineNbr": 207,
      "author": {
        "id": 13315
      },
      "writtenOn": "2024-09-05T19:10:54Z",
      "side": 1,
      "message": "Forcing the RegTo2 to Reg seems like a bad way of doing this. This suggests using an Addr is probably not the right way of doing this.",
      "revId": "880446fdcf4e9c5ae0dd07c8ca92ee6260dca3f7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "49b5a540_531e3e99",
        "filename": "src/cmd/internal/obj/util.go",
        "patchSetId": 4
      },
      "lineNbr": 207,
      "author": {
        "id": 3400833
      },
      "writtenOn": "2024-09-06T11:54:35Z",
      "side": 1,
      "message": "I\u0027ve noticed now that this change here and the other few lines above aren\u0027t necessary as they are not reached by the SVE assembler due to this logic: https://go-review.googlesource.com/c/go/+/606195/1/src/cmd/internal/obj/util.go#170. So I can revert this.",
      "parentUuid": "05c7c5f4_c49616ea",
      "revId": "880446fdcf4e9c5ae0dd07c8ca92ee6260dca3f7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}