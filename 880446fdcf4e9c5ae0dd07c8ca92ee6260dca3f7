{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "041f0516_db86da3c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 13315
      },
      "writtenOn": "2024-09-05T19:10:54Z",
      "side": 1,
      "message": "It probably makes sense to make rconv keyed by architecture, instead of the ranges, so every architecture can use all the bits. But I don\u0027t understand why it needs the Addr. It is printing a register, and only it, so it shouldn\u0027t need other fields. If it needs other fields, it probably should be a different Type.",
      "revId": "880446fdcf4e9c5ae0dd07c8ca92ee6260dca3f7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fe6737c8_b89abf34",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 3400833
      },
      "writtenOn": "2024-09-06T11:54:35Z",
      "side": 1,
      "message": "The reason is because our SIMD registers have extensions, in SVE particularly we need to be able to specify a SIMD lane size like with NEON. The design I settled on was to put the register number in Addr.Reg as before, but I also use the Addr.Class field to contain some enumeration that represents the register extension. For example Z0.D \u003d\u003e Reg: REG_Z0, Class: EXT_D. I need both pieces of information to print the register. We also might need the Addr.Index field to print the index, e.g. Z0.D[1] as another example.\n\nI\u0027m currently working through a similar problem with the TYPE_MEM Addr, where I need the base address to be a register with a lane size extension, e.g. $43(Z0.D)(R5), which is needed for scatter-gather loads and stores.",
      "parentUuid": "041f0516_db86da3c",
      "revId": "880446fdcf4e9c5ae0dd07c8ca92ee6260dca3f7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "05c7c5f4_c49616ea",
        "filename": "src/cmd/internal/obj/util.go",
        "patchSetId": 4
      },
      "lineNbr": 207,
      "author": {
        "id": 13315
      },
      "writtenOn": "2024-09-05T19:10:54Z",
      "side": 1,
      "message": "Forcing the RegTo2 to Reg seems like a bad way of doing this. This suggests using an Addr is probably not the right way of doing this.",
      "revId": "880446fdcf4e9c5ae0dd07c8ca92ee6260dca3f7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "49b5a540_531e3e99",
        "filename": "src/cmd/internal/obj/util.go",
        "patchSetId": 4
      },
      "lineNbr": 207,
      "author": {
        "id": 3400833
      },
      "writtenOn": "2024-09-06T11:54:35Z",
      "side": 1,
      "message": "I\u0027ve noticed now that this change here and the other few lines above aren\u0027t necessary as they are not reached by the SVE assembler due to this logic: https://go-review.googlesource.com/c/go/+/606195/1/src/cmd/internal/obj/util.go#170. So I can revert this.",
      "parentUuid": "05c7c5f4_c49616ea",
      "revId": "880446fdcf4e9c5ae0dd07c8ca92ee6260dca3f7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}