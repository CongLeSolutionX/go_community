{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "0ff9a712_1f9297ac",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-02-14T05:29:20Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003d1e7054ea",
      "tag": "autogenerated:trybots~beginning",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "57b1e313_5246a8b3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-02-14T05:29:20Z",
      "side": 1,
      "message": "Superseded.",
      "parentUuid": "66e2a5c2_ed93491f",
      "tag": "autogenerated:trybots~beginning",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5b46283a_84c1a813",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-02-14T05:41:15Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "0ff9a712_1f9297ac",
      "tag": "autogenerated:trybots~happy",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1be4e2f3_88ed111c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5015
      },
      "writtenOn": "2022-02-27T23:34:37Z",
      "side": 1,
      "message": "there is a lot of algorithmics around the type inference and constraint matching stuff, uncharacteristic of the rest of the spec. i\u0027m not sure it\u0027s right, either, but i am far from the best person to judge. can this stuff be defined rather than explained, if you know what i mean? i am uncomfortable with the idea that we apply these steps to see if they succeed, rather than defining what actually can succeed.",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "148b8621_39cc8c22",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5210
      },
      "writtenOn": "2022-03-08T23:55:45Z",
      "side": 1,
      "message": "Agreed. In the meantime we have learned more about type inference as well and explaining what matches would be better (and perhaps easier) than detailing the algorithmic steps. (That said, we do have algorithmic descriptions even in the current spec, e.g., on package initialization. But it\u0027s comparatively small.)\n\nI won\u0027t get to this before the release but we\u0027ll keep working on it.",
      "parentUuid": "1be4e2f3_88ed111c",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6a2f48b3_26caa6ad",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 689,
      "author": {
        "id": 5015
      },
      "writtenOn": "2022-02-18T00:20:16Z",
      "side": 1,
      "message": "this sentence is very hard to parse and also hard to understand. the problem is likely to arise often because the word \u0027type\u0027 is part of \u0027type parameter\u0027.\n\nalso, what is a \"value of the type parameter\"? i mean, i know what you\u0027re trying to say, but why does that phrase mean that? we don\u0027t say \"value of the float64\". Try this:\n\nIf the type of the value is derived from a type parameter, the constant is converted into a non-constant value of that type.",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d2122a2a_36aea312",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 721,
      "author": {
        "id": 5015
      },
      "writtenOn": "2022-02-18T00:20:16Z",
      "side": 1,
      "message": "unrelated to the recent changes but i wonder if it should also require an error due to underflow. no soft underflow is allowed, right? but does it go to zero or give an error?",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bc45d7e6_53f887e8",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 992,
      "author": {
        "id": 5015
      },
      "writtenOn": "2022-02-18T00:20:16Z",
      "side": 1,
      "message": "maybe s/is/may be/\nit\u0027s not the only way.",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4716bdf4_3691968a",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 992,
      "author": {
        "id": 5210
      },
      "writtenOn": "2022-03-04T05:44:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bc45d7e6_53f887e8",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "19b0c6d9_cf2b6a16",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 1427,
      "author": {
        "id": 5015
      },
      "writtenOn": "2022-02-19T01:19:21Z",
      "side": 1,
      "message": "s/which/that/",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "36ef729c_894b178e",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 1427,
      "author": {
        "id": 5210
      },
      "writtenOn": "2022-03-04T05:44:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "19b0c6d9_cf2b6a16",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5aa0c495_b3602745",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 1460,
      "author": {
        "id": 5015
      },
      "writtenOn": "2022-02-19T01:19:21Z",
      "side": 1,
      "message": "why is this plural? s/Floats/Float/ here and on line 1463",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a78e679d_be192a57",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 1460,
      "author": {
        "id": 5210
      },
      "writtenOn": "2022-03-04T05:44:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5aa0c495_b3602745",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a7eb6eea_9301cfe0",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 1469,
      "author": {
        "id": 5015
      },
      "writtenOn": "2022-02-19T01:19:21Z",
      "side": 1,
      "message": "link to \"type parameter\"?\n\nbut i think this isn\u0027t the way to say this, or else you need to define what you mean when you use the term this way. what you\u0027re saying is that the term cannot be an identifier that is the name of a type parameter that is part of a surrounding declaration. (i think - do you also mean it can\u0027t be []T where T is a t.p.?) that\u0027s a mouthful, but you want to be precise.\n\nfor this particular example, i think you want something like this, absent other changes:\n\nA term in a union cannot contain a name denoting a type parameter of a surrounding declaration.\n\nsomewhere, i suggest you need to add a real definition of this term or, i would prefer, a new term to represent this concept, which comes up a lot but isn\u0027t really the same as a \"type parameter\", which is an element of a declaration.  you might be able get by with something like,\n\nThe term \"type parameter name\" refers to an identifier that denotes a type parameter of a surrounding declaration.",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2d665af5_2f8a187c",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 1471,
      "author": {
        "id": 5015
      },
      "writtenOn": "2022-02-19T01:19:21Z",
      "side": 1,
      "message": "again, this is not clear. given how? you want some improved terminology. i have to stop and think hard about how you could even write the upcoming example.",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3653998a_52179aa3",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 1476,
      "author": {
        "id": 5015
      },
      "writtenOn": "2022-02-19T01:19:21Z",
      "side": 1,
      "message": "P is the name of a type parameter\n\netc.",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b5c7c8ca_fed6747c",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 1476,
      "author": {
        "id": 5210
      },
      "writtenOn": "2022-03-04T05:44:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3653998a_52179aa3",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1059b166_3c567b65",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 1479,
      "author": {
        "id": 5015
      },
      "writtenOn": "2022-02-19T01:19:21Z",
      "side": 1,
      "message": "s/Floats/Float/g",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ec3be4db_92764792",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 1479,
      "author": {
        "id": 5210
      },
      "writtenOn": "2022-03-04T05:44:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1059b166_3c567b65",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3e4de360_afdd883a",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 1485,
      "author": {
        "id": 5015
      },
      "writtenOn": "2022-02-19T01:19:21Z",
      "side": 1,
      "message": "how can a union have only one term? just as \"x\" is not a sum, but \"x+y\" is.",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "51d5193d_967b5ea1",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 1485,
      "author": {
        "id": 5210
      },
      "writtenOn": "2022-03-04T05:44:33Z",
      "side": 1,
      "message": "Syntactically, a single term is still a union, this was meant as clarification. For a single term the restrictions don\u0027t apply.\nPut in parentheses.",
      "parentUuid": "3e4de360_afdd883a",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3ba898eb_8a303f3c",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 1499,
      "author": {
        "id": 5015
      },
      "writtenOn": "2022-02-19T01:19:21Z",
      "side": 1,
      "message": "s/Floats/Float/g\n\ndo this globally; i\u0027ll stop marking it",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "648a1bbd_c10cee47",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 1499,
      "author": {
        "id": 5210
      },
      "writtenOn": "2022-03-04T05:44:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3ba898eb_8a303f3c",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "06b9a380_a1255182",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 1510,
      "author": {
        "id": 5015
      },
      "writtenOn": "2022-02-19T01:19:21Z",
      "side": 1,
      "message": "define \"contains\"\n\nis this legal?\n\ninterface Equaler { Equal() Equaler }",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9a289197_3ce21cf5",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 1510,
      "author": {
        "id": 5015
      },
      "writtenOn": "2022-03-09T00:31:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "06b9a380_a1255182",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fdb5e9a9_67599512",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 1550,
      "author": {
        "id": 5015
      },
      "writtenOn": "2022-02-19T01:19:21Z",
      "side": 1,
      "message": "this is a little unsettling. i had to reread to see that it was not a repetition. you can do it in one easier go:\n\nA type T, or a value of type T, implements an interface I if",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ef1464cd_6b05cd85",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 1550,
      "author": {
        "id": 5210
      },
      "writtenOn": "2022-03-04T05:44:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fdb5e9a9_67599512",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ad72e6de_108cd1d5",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 1707,
      "author": {
        "id": 28783
      },
      "writtenOn": "2022-02-20T17:57:22Z",
      "side": 1,
      "message": "Nit: I think it would be better to move \"The underlying type of a type parameter is the underlying type of its ...\" just before its preceding sentence (which begins with \"Otherwise\").  That way, the \"Otherwise\" really does apply to all remaining cases.",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e0f94af5_5857c9b7",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 1707,
      "author": {
        "id": 5210
      },
      "writtenOn": "2022-03-04T05:44:33Z",
      "side": 1,
      "message": "Actually, for a type parameter it\u0027s also the type it refers to in its declaration. Clarified by rephrasing slightly.",
      "parentUuid": "ad72e6de_108cd1d5",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0803598b_10628273",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 1733,
      "author": {
        "id": 5015
      },
      "writtenOn": "2022-02-21T22:45:23Z",
      "side": 1,
      "message": "so []B3 and []int are several steps apart. is there a way to relate them directly?\n\ni presume []~int works, but what does ~[]B1 match? does it match []int? i can\u0027t tell.",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "07ea0fe4_4a9d8a6f",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 1733,
      "author": {
        "id": 5015
      },
      "writtenOn": "2022-03-09T00:31:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0803598b_10628273",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6e19ca54_00521f35",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 1760,
      "author": {
        "id": 5015
      },
      "writtenOn": "2022-02-21T22:45:23Z",
      "side": 1,
      "message": "No other interface has a core type",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ba033641_990459f6",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 1760,
      "author": {
        "id": 5210
      },
      "writtenOn": "2022-03-04T05:44:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6e19ca54_00521f35",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "500364ce_8850cb93",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 1800,
      "author": {
        "id": 28783
      },
      "writtenOn": "2022-02-20T17:57:22Z",
      "side": 1,
      "message": "whithout -\u003e without",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d0642388_85406213",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 1800,
      "author": {
        "id": 5210
      },
      "writtenOn": "2022-03-04T05:44:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "500364ce_8850cb93",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "67e9ad26_eff23e84",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 1810,
      "author": {
        "id": 5015
      },
      "writtenOn": "2022-02-21T22:45:23Z",
      "side": 1,
      "message": "i don\u0027t understand the purpose of this definition, and i don\u0027t understand what it means. i am confused.\n\ni\u0027m sure it will come up later, but on the face of it we have too many kinds of types to make this all clear: \n\ntypes\nunderlying types\ncore types\nspecific types\ntype sets\n...\n\n(not to mention the mess with untyped constants and default types. i have no idea how those are going to interoperate with this list.)\n\n\nit\u0027s overwhelming. do you really need all these definitions to explain the mechanism? i hope not, but if so perhaps you should provide an introductory paragraph explaining why and how these concepts interrelate.",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "853f10e8_cc49d8e0",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 1810,
      "author": {
        "id": 5210
      },
      "writtenOn": "2022-03-08T23:55:45Z",
      "side": 1,
      "message": "I have a pending CL that removes the need for specific types again. This is really an implementation detail that should not be visible in the spec. With that the only new concepts are type sets and core types.\n\nCore types are only needed (for now) because some operations have restrictions on what type sets they accept. Maybe at some point those go away and then we don\u0027t need the notion of a core type anymore.",
      "parentUuid": "67e9ad26_eff23e84",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "113dd291_ea716bf5",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 1978,
      "author": {
        "id": 28783
      },
      "writtenOn": "2022-02-20T17:57:22Z",
      "side": 1,
      "message": "I think it will be easier to read if you describe V here, rather than multiple times below.  Just say:\n\nA value x of type V is assignable to a variable of type T ...:\n\n - V and T are identical\n - V and T have identical underlying types and ...\n - V and T are channel types...",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "873ab64c_b38119f2",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 1978,
      "author": {
        "id": 5210
      },
      "writtenOn": "2022-03-04T05:44:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "113dd291_ea716bf5",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a032e099_bf2db3e8",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 1997,
      "author": {
        "id": 5015
      },
      "writtenOn": "2022-02-21T22:45:23Z",
      "side": 1,
      "message": "here\u0027s that term \u0027type parameter\u0027 creeping in again",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3d54c61e_70bdc975",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 2003,
      "author": {
        "id": 5015
      },
      "writtenOn": "2022-02-21T22:45:23Z",
      "side": 1,
      "message": "ditto.\nthis remains troubling\n\ni\u0027ll stop mentioning it but please define better terminology and use it everywhere. grep for \u0027type parameter\u0027 and check every use.",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a66d903a_9591eb92",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 2184,
      "author": {
        "id": 5015
      },
      "writtenOn": "2022-02-22T02:31:53Z",
      "side": 1,
      "message": "here i would expect \"type parameter\" to appear",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "acb9bd1e_c46f0f11",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 2184,
      "author": {
        "id": 5210
      },
      "writtenOn": "2022-03-08T23:55:45Z",
      "side": 1,
      "message": "Good point! Done.",
      "parentUuid": "a66d903a_9591eb92",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6430d1b5_f4434e4b",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 2225,
      "author": {
        "id": 5015
      },
      "writtenOn": "2022-02-22T02:31:53Z",
      "side": 1,
      "message": "s/generic //",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c040719d_de125c68",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 2225,
      "author": {
        "id": 5210
      },
      "writtenOn": "2022-03-04T05:44:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6430d1b5_f4434e4b",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d141a529_d5b4608d",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 2230,
      "author": {
        "id": 5015
      },
      "writtenOn": "2022-02-22T02:31:53Z",
      "side": 1,
      "message": "s/generic //",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "75d31941_9a18a3f7",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 2230,
      "author": {
        "id": 5210
      },
      "writtenOn": "2022-03-04T05:44:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d141a529_d5b4608d",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d345172e_37132a83",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 2231,
      "author": {
        "id": 5015
      },
      "writtenOn": "2022-02-22T02:31:53Z",
      "side": 1,
      "message": "s/generic //",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3a0a6d9b_6bbe3209",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 2231,
      "author": {
        "id": 5210
      },
      "writtenOn": "2022-03-04T05:44:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d345172e_37132a83",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5960fa75_531839dd",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 2331,
      "author": {
        "id": 5015
      },
      "writtenOn": "2022-02-22T02:31:53Z",
      "side": 1,
      "message": "what does being exported have to do with this? if they are in different packages, they are different identifiers, aren\u0027t they?",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4867808c_f01906ab",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 2517,
      "author": {
        "id": 5015
      },
      "writtenOn": "2022-02-28T10:31:46Z",
      "side": 1,
      "message": "either this should be lower case or you should pick a less confusing example.",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b6c60b17_b9ef9277",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 2517,
      "author": {
        "id": 5210
      },
      "writtenOn": "2022-03-04T05:44:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4867808c_f01906ab",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "784f0a95_05fd3fea",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 2590,
      "author": {
        "id": 52648
      },
      "writtenOn": "2022-02-14T14:50:51Z",
      "side": 1,
      "message": "You probably dont want to mention the constraints package in the spec right now",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ea760860_8bc3d498",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 2590,
      "author": {
        "id": 5210
      },
      "writtenOn": "2022-03-04T05:44:33Z",
      "side": 1,
      "message": "removed this example - doesn\u0027t add enough value",
      "parentUuid": "784f0a95_05fd3fea",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "691edad8_b49521cb",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 2597,
      "author": {
        "id": 28783
      },
      "writtenOn": "2022-02-20T17:57:22Z",
      "side": 1,
      "message": "I think you just want to remove \"in a type definition\" here.  It sounds like you are specifically excluding type parameters from a generic function definition, but you do want to include those - that is your second example below.\n\nOr say \"The given type cannot be a type parameter from a type definition or generic function definition\".",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b8fd63f2_6cccb065",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 2597,
      "author": {
        "id": 5015
      },
      "writtenOn": "2022-02-22T02:31:53Z",
      "side": 1,
      "message": "what about\n\ntype T[P any] []P\n\ni believe it is, but the wording only implies it. be clear. \n\nagain, my complaint about terminology applies here. see how this opener would be clearer:\n\nThe given type cannot be a type parameter name.",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "49066651_521acd38",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 2597,
      "author": {
        "id": 5210
      },
      "writtenOn": "2022-03-04T05:44:33Z",
      "side": 1,
      "message": "It says \"in a type definition\", not \"from a type definition\".  I think this is correct. But flipped the sentence to make it clearer.",
      "parentUuid": "691edad8_b49521cb",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ad11e451_0b256722",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 2597,
      "author": {
        "id": 5210
      },
      "writtenOn": "2022-03-08T23:55:45Z",
      "side": 1,
      "message": "To answer the question:\n\ntype T[P any] []P\n\nis permitted: the given type is a slice.\n\nI\u0027m not sure \"type parameter name\" is quite correct: that name is not a type, it denotes a (type parameter) type.\n\nI think some of the confusion here (and elsewhere) may perhaps be due to it not being clear enough that a type parameter is a type in its own right, like a pointer or an array. When we consider a generic function, we don\u0027t think of a type parameter as a place holder for a \"real type\", the type parameter _is_ the real type. And the only way to denote a type parameter is by its name, there\u0027s no such thing as a literal type parameter.\n\nElsewhere we refer to other types in a similar way: we talk about arrays, slices, interfaces, etc. So here we talk about type parameters.",
      "parentUuid": "b8fd63f2_6cccb065",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cbda95b6_32e5df90",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 2610,
      "author": {
        "id": 52648
      },
      "writtenOn": "2022-02-14T14:50:51Z",
      "side": 1,
      "message": "It\u0027s not clear if \"number\" is sufficient here - should they be the same names? Or is the mapping done positionally? Is this something that should be explicitly mentioned?",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9be85334_5883fa44",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 2610,
      "author": {
        "id": 5206
      },
      "writtenOn": "2022-02-14T22:06:41Z",
      "side": 1,
      "message": "The type parameters in the receiver type of a method declaration do not have to have the same name as the type parameters in the declaration of the receiver type.  But you do have to have the same number.  The text is correct.  But it might be worth an example.",
      "parentUuid": "cbda95b6_32e5df90",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2525c77b_9eaa42dd",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 2610,
      "author": {
        "id": 28783
      },
      "writtenOn": "2022-02-20T17:57:22Z",
      "side": 1,
      "message": "There is an example of methods of generic types in the \"method declaration\" section.  Maybe just a link reference to that section would help.",
      "parentUuid": "9be85334_5883fa44",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "715627a8_69e29b96",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 2610,
      "author": {
        "id": 5210
      },
      "writtenOn": "2022-03-04T05:44:33Z",
      "side": 1,
      "message": "I believe this is correct and further clarified in the method declaration section. Added link.",
      "parentUuid": "2525c77b_9eaa42dd",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b3e70647_7ce787c6",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 2645,
      "author": {
        "id": 52648
      },
      "writtenOn": "2022-02-14T14:50:51Z",
      "side": 1,
      "message": "Should this say something about some type params referring to others? (this is unlike function parameter lists AFAIU)\n\nAre there specific rules this must follow - e.g. here E is used first and defined later; does this order matter?",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7083151a_bf6dff87",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 2645,
      "author": {
        "id": 5210
      },
      "writtenOn": "2022-03-08T23:55:45Z",
      "side": 1,
      "message": "All type parameters are in scope together, so there\u0027s no order relevance (except that it influences the order in which type arguments may be passed). This is clear from the scope rules.\n\nWe probably need some prose re: invalid cycles. Added a note (this doesn\u0027t need to be pinned down for the release).",
      "parentUuid": "b3e70647_7ce787c6",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "48c52066_4ad15d15",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 2660,
      "author": {
        "id": 31647
      },
      "writtenOn": "2022-02-14T21:54:16Z",
      "side": 1,
      "message": "I think this may need to be worded more carefully. For example *C|int and *struct{}|int are currently also ambiguous, and *C|~int fails to parse.\n\nMore details in #49482.",
      "range": {
        "startLine": 2657,
        "startChar": 0,
        "endLine": 2660,
        "endChar": 34
      },
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "76001364_ec2e09ee",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 2660,
      "author": {
        "id": 5015
      },
      "writtenOn": "2022-02-22T02:31:53Z",
      "side": 1,
      "message": "yuck",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b310b8e3_d1661bfb",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 2660,
      "author": {
        "id": 5210
      },
      "writtenOn": "2022-03-04T05:44:33Z",
      "side": 1,
      "message": "ack",
      "parentUuid": "76001364_ec2e09ee",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "68d953a9_d0745d9e",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 2660,
      "author": {
        "id": 5210
      },
      "writtenOn": "2022-03-08T23:55:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "48c52066_4ad15d15",
      "range": {
        "startLine": 2657,
        "startChar": 0,
        "endLine": 2660,
        "endChar": 34
      },
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6c637dc1_1caf98ad",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 2692,
      "author": {
        "id": 5015
      },
      "writtenOn": "2022-02-22T02:31:53Z",
      "side": 1,
      "message": "value is probably the right word here, but it sure reads funny. again, the phrase \u0027type parameter\u0027 is carrying too much weight.\n\nperhaps something like\n\ncontrols the operations supported by values that implement the type parameter\u0027s interface\n\nthat\u0027s really what you mean, isn\u0027t it?",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a4f3908b_c9f8aa14",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 2706,
      "author": {
        "id": 52648
      },
      "writtenOn": "2022-02-14T14:50:51Z",
      "side": 1,
      "message": "Just a bit above you mention that [P *C] is a potential ambiguity without the interface{}, it\u0027s not clear to me what the nuance is that makes this not an ambiguity.",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c4a203f4_288b0aac",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 2706,
      "author": {
        "id": 5206
      },
      "writtenOn": "2022-02-14T22:06:41Z",
      "side": 1,
      "message": "Well, the ambiguity only arises for a generic type declaration, not for a generic function declaration.  But still might be better to use a different example here.",
      "parentUuid": "a4f3908b_c9f8aa14",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3ed2edd9_84f90675",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 2706,
      "author": {
        "id": 5210
      },
      "writtenOn": "2022-03-08T23:55:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c4a203f4_288b0aac",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "16a8cdcd_1638157e",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 2905,
      "author": {
        "id": 5015
      },
      "writtenOn": "2022-02-22T02:31:53Z",
      "side": 1,
      "message": "\"used\"?\ni suppose \"called\" isn\u0027t good enough.\nmaybe \"referenced\"?\n\nperhaps rewrite\n\na generic function must be _instantiated_ before it can be called or used in an assignment.",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "052015b9_53bd4a30",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 2905,
      "author": {
        "id": 5210
      },
      "writtenOn": "2022-03-04T05:44:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "16a8cdcd_1638157e",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b95d42f1_7ee4dbc2",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 2909,
      "author": {
        "id": 52648
      },
      "writtenOn": "2022-02-14T18:48:09Z",
      "side": 1,
      "message": "Here too, don\u0027t use `constraints.Ordered`",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "778bcca6_6a1c0772",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 2909,
      "author": {
        "id": 5210
      },
      "writtenOn": "2022-03-04T05:44:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b95d42f1_7ee4dbc2",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2e3762d9_b082a10f",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 2968,
      "author": {
        "id": 5015
      },
      "writtenOn": "2022-02-22T02:31:53Z",
      "side": 1,
      "message": "s/$/,/",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b142435e_65b39f37",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 2968,
      "author": {
        "id": 5210
      },
      "writtenOn": "2022-03-04T05:44:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2e3762d9_b082a10f",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "48fac0ad_a2a1bcc7",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 2995,
      "author": {
        "id": 5015
      },
      "writtenOn": "2022-02-22T02:31:53Z",
      "side": 1,
      "message": "what does \"this\" refer to?\nmaybe\n\nIn the declaration,\n\ntype ...\n\nthe type parameter...",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d2dc55c8_28afb1dc",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 2995,
      "author": {
        "id": 5210
      },
      "writtenOn": "2022-03-08T23:55:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "48fac0ad_a2a1bcc7",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ea33618b_76fca548",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 2997,
      "author": {
        "id": 52648
      },
      "writtenOn": "2022-02-14T18:48:09Z",
      "side": 1,
      "message": "I find the \"except...\" part between the commas hard to parse.",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fe38722d_539a12a2",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 2997,
      "author": {
        "id": 5210
      },
      "writtenOn": "2022-03-08T23:55:45Z",
      "side": 1,
      "message": "adjusted",
      "parentUuid": "ea33618b_76fca548",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d0e372ae_e3abce3b",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 2998,
      "author": {
        "id": 14570
      },
      "writtenOn": "2022-02-19T13:27:25Z",
      "side": 1,
      "message": "and parameters may be blank, and it cannot be partial.",
      "range": {
        "startLine": 2998,
        "startChar": 25,
        "endLine": 2998,
        "endChar": 26
      },
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4b8b5c81_9a3477ad",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 2998,
      "author": {
        "id": 5210
      },
      "writtenOn": "2022-03-04T05:44:33Z",
      "side": 1,
      "message": "That is already said by \"one for each type parameter of the receiver base type\" and later, when we talk about non-blank parameters.",
      "parentUuid": "d0e372ae_e3abce3b",
      "range": {
        "startLine": 2998,
        "startChar": 25,
        "endLine": 2998,
        "endChar": 26
      },
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b9607ef6_0534bab5",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 3763,
      "author": {
        "id": 28783
      },
      "writtenOn": "2022-02-20T17:57:22Z",
      "side": 1,
      "message": "I think you want to add \"and a is not of type parameter type\"?\n\n(Since for type parameter type, x can possibly be a key for a map type)",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f15ee862_922a0108",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 3763,
      "author": {
        "id": 5210
      },
      "writtenOn": "2022-03-04T05:44:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b9607ef6_0534bab5",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6416daa1_74330698",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 4047,
      "author": {
        "id": 28783
      },
      "writtenOn": "2022-02-20T17:57:22Z",
      "side": 1,
      "message": "Do you want to mention that T can be a type parameter or parameterized type (like cases in a type switch), and in that case, there are no compile-time checks/requirements?\n\nFor instance, typechecker doesn\u0027t complain with:\n\n```\ntype I interface {\n\tfoo()\n}\n\ntype myint int\ntype myint2 int\n\nfunc (myint) foo() {\n}\n\nfunc g[T any](x I) T {\n\treturn x.(T)\n}\n\nfunc main() {\n    var j I \u003d myint(3)\n\n    g[myint2](j)\n}\n```\n\neven though x of type I cannot be type-asserted to an arbitrary typeparam T (constraint of any).  And in particular, we get a run-time error, but not compile-time error from g[myint2](j), as expected.",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "99bb1889_e08da976",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 4122,
      "author": {
        "id": 5015
      },
      "writtenOn": "2022-02-27T23:34:37Z",
      "side": 1,
      "message": "should instantation of a function value be described in the function literal section? a function literal cannot declare type parameters, but can it use them?\n\nf :\u003d typeparameteredfunction[int] \n\n?",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f4892c41_dcbbef24",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 4122,
      "author": {
        "id": 5210
      },
      "writtenOn": "2022-03-08T23:55:45Z",
      "side": 1,
      "message": "I think this is the best place for now: this is where we declare generic functions and so a sentence referring to the need for instantiation before use seems appropriate. Instantiation per se is described in its own section as it also applies to generic types.\n\nFunction literals cannot declare type parameters. They may refer to type parameters of the enclosing function; as type parameters are simply types.",
      "parentUuid": "99bb1889_e08da976",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "46ac240e_cadd75c9",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 4267,
      "author": {
        "id": 5015
      },
      "writtenOn": "2022-02-27T23:34:37Z",
      "side": 1,
      "message": "i do not understand this example at all, unless there is a missing comma. what on earth does [int any] mean?",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4bb3d49d_4e075110",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 4267,
      "author": {
        "id": 5210
      },
      "writtenOn": "2022-03-09T00:53:13Z",
      "side": 1,
      "message": "clarified by rephrasing the \"after substitution\" column",
      "parentUuid": "46ac240e_cadd75c9",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7bc24978_0bd29031",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 4268,
      "author": {
        "id": 5015
      },
      "writtenOn": "2022-02-27T23:34:37Z",
      "side": 1,
      "message": "ditto.",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cae712f2_a37c690d",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 4268,
      "author": {
        "id": 5210
      },
      "writtenOn": "2022-03-09T00:53:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7bc24978_0bd29031",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "50d37c3f_b19f47d5",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 4303,
      "author": {
        "id": 5015
      },
      "writtenOn": "2022-02-27T23:34:37Z",
      "side": 1,
      "message": "probably poor to use constraints.Ordered here",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "31c422af_9eded688",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 4303,
      "author": {
        "id": 5210
      },
      "writtenOn": "2022-03-08T23:55:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "50d37c3f_b19f47d5",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fc55b030_ec96cf34",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 4348,
      "author": {
        "id": 31647
      },
      "writtenOn": "2022-02-17T22:14:36Z",
      "side": 1,
      "message": "This step suggests that inference only applies to functions, when we in fact do constraint type inference for type instances.",
      "range": {
        "startLine": 4348,
        "startChar": 21,
        "endLine": 4348,
        "endChar": 48
      },
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3fbb77f9_56264127",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 4348,
      "author": {
        "id": 5210
      },
      "writtenOn": "2022-03-08T23:55:45Z",
      "side": 1,
      "message": "We don\u0027t do type inference for types anymore.",
      "parentUuid": "fc55b030_ec96cf34",
      "range": {
        "startLine": 4348,
        "startChar": 21,
        "endLine": 4348,
        "endChar": 48
      },
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9a3aae86_c9bed9ed",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 4372,
      "author": {
        "id": 5015
      },
      "writtenOn": "2022-02-27T23:34:37Z",
      "side": 1,
      "message": "is this section rigorous enough? i can\u0027t tell. the operational semantics gives me pause.",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5707aef4_65a5e7da",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 4372,
      "author": {
        "id": 5210
      },
      "writtenOn": "2022-03-08T23:55:45Z",
      "side": 1,
      "message": "Per other feedback, I agree that this needs to be reworked.",
      "parentUuid": "9a3aae86_c9bed9ed",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "655307ff_5bc20b1e",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 4392,
      "author": {
        "id": 14570
      },
      "writtenOn": "2022-02-19T13:27:25Z",
      "side": 1,
      "message": "I don\u0027t understand how these qualifications work. Given\n\n   func f[T any](a, b T) {}\n   type myint int\n\nit is illegal to write\n\n   f(int(1), myint(2))\n\nyet int and myint are equivalent because their underlying types are.",
      "range": {
        "startLine": 4391,
        "startChar": 0,
        "endLine": 4392,
        "endChar": 54
      },
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cdd616b4_1e7413e0",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 4392,
      "author": {
        "id": 28783
      },
      "writtenOn": "2022-02-20T17:57:22Z",
      "side": 1,
      "message": "Yes, here\u0027s another example that only requires one argument:\n\n```\ntype myint int\n\nfunc f[T any](a struct {\n\ta myint\n\tb T\n}) {\n\tfmt.Printf(\"%v\\n\", a)\n}\n\nfunc main() {\n\tvar x struct {\n\t\ta int\n\t\tb string\n\t}\n\n\tf(x)\n}\n```\n\nThe current rule would seem to say that we could infer that the type args of the f() call is string, but really there is no match.\n\nSo, I would think that you get rid of \"or if their underlying types are equivalent\" here, and just stay with the exception listed at 4435-4448 (which does somewhat involve underlying types).",
      "parentUuid": "655307ff_5bc20b1e",
      "range": {
        "startLine": 4391,
        "startChar": 0,
        "endLine": 4392,
        "endChar": 54
      },
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6d0e373a_f55c67fa",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 4448,
      "author": {
        "id": 28783
      },
      "writtenOn": "2022-02-20T17:57:22Z",
      "side": 1,
      "message": "Should this exception only apply when the type literal has a type param in it?\nOtherwise, wouldn\u0027t this exception again allow \u0027myint\u0027 to unify with \u0027int\u0027?",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "220afb6b_58677a2c",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 4496,
      "author": {
        "id": 52648
      },
      "writtenOn": "2022-02-14T18:48:09Z",
      "side": 1,
      "message": "Maybe I\u0027m missing something, but doesn\u0027t this first sentence just repeat what was already said above?\n\n\"Function argument type inference infers type arguments from function arguments: if a function parameter is declared with a type T that uses type parameters, unifying the type of the corresponding function argument with T may infer type arguments for the type parameters used by T. \"",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "370c0fa9_e4548e06",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 4496,
      "author": {
        "id": 5210
      },
      "writtenOn": "2022-03-08T23:55:45Z",
      "side": 1,
      "message": "Indeed. Removed.",
      "parentUuid": "220afb6b_58677a2c",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aa761f83_43f68041",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 4555,
      "author": {
        "id": 52648
      },
      "writtenOn": "2022-02-14T18:48:09Z",
      "side": 1,
      "message": "Another constraints.Ordered usage",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "79902e3f_023d334d",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 4555,
      "author": {
        "id": 5210
      },
      "writtenOn": "2022-03-04T05:44:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "aa761f83_43f68041",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6afa56fe_17648926",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 4640,
      "author": {
        "id": 14570
      },
      "writtenOn": "2022-02-19T13:27:25Z",
      "side": 1,
      "message": "Can there be a cycle? If not, why not?\n\nIn 1.18 beta2, it is not an error to write\n\n   func f[L []E, E []L](x L) {}\n   \nalthough I do get an error when I try to instantiate it.",
      "range": {
        "startLine": 4640,
        "startChar": 45,
        "endLine": 4640,
        "endChar": 46
      },
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4d7f10bb_e63e2620",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 5056,
      "author": {
        "id": 5015
      },
      "writtenOn": "2022-02-28T10:31:46Z",
      "side": 1,
      "message": "this term is also the name of a predefined constant that means something subtly different. probably worth clarifying here.\nsuggestion:\n\nThe term _comparable_ refers to operands that may be tested with the \u003d\u003d or !\u003d operator. (Such operands satisfy the \u003ccode\u003ecomparable\u003c/code\u003e type constraint.)\nThe term _ordered_ refers to operands that may be tested with the \u003c, ... or \u003e\u003d operator.",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a023008f_29787dea",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 6357,
      "author": {
        "id": 28783
      },
      "writtenOn": "2022-02-20T17:57:22Z",
      "side": 1,
      "message": "I think what you had before \"type-parameterized type\" is more correct.  Or maybe just \"type containing one or more type parameters\".\n\nIf you say generic type, it doesn\u0027t really express things like \"[]P\", but instead sounds like you mean an uninstantiated generic type (such as just \u0027Pair\u0027, a generic type you defined above).",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}