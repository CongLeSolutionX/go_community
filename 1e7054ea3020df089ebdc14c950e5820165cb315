{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "0ff9a712_1f9297ac",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-02-14T05:29:20Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003d1e7054ea",
      "tag": "autogenerated:trybots~beginning",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "57b1e313_5246a8b3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-02-14T05:29:20Z",
      "side": 1,
      "message": "Superseded.",
      "parentUuid": "66e2a5c2_ed93491f",
      "tag": "autogenerated:trybots~beginning",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5b46283a_84c1a813",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-02-14T05:41:15Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "0ff9a712_1f9297ac",
      "tag": "autogenerated:trybots~happy",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6a2f48b3_26caa6ad",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 689,
      "author": {
        "id": 5015
      },
      "writtenOn": "2022-02-18T00:20:16Z",
      "side": 1,
      "message": "this sentence is very hard to parse and also hard to understand. the problem is likely to arise often because the word \u0027type\u0027 is part of \u0027type parameter\u0027.\n\nalso, what is a \"value of the type parameter\"? i mean, i know what you\u0027re trying to say, but why does that phrase mean that? we don\u0027t say \"value of the float64\". Try this:\n\nIf the type of the value is derived from a type parameter, the constant is converted into a non-constant value of that type.",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d2122a2a_36aea312",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 721,
      "author": {
        "id": 5015
      },
      "writtenOn": "2022-02-18T00:20:16Z",
      "side": 1,
      "message": "unrelated to the recent changes but i wonder if it should also require an error due to underflow. no soft underflow is allowed, right? but does it go to zero or give an error?",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bc45d7e6_53f887e8",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 992,
      "author": {
        "id": 5015
      },
      "writtenOn": "2022-02-18T00:20:16Z",
      "side": 1,
      "message": "maybe s/is/may be/\nit\u0027s not the only way.",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "19b0c6d9_cf2b6a16",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 1427,
      "author": {
        "id": 5015
      },
      "writtenOn": "2022-02-19T01:19:21Z",
      "side": 1,
      "message": "s/which/that/",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5aa0c495_b3602745",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 1460,
      "author": {
        "id": 5015
      },
      "writtenOn": "2022-02-19T01:19:21Z",
      "side": 1,
      "message": "why is this plural? s/Floats/Float/ here and on line 1463",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a7eb6eea_9301cfe0",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 1469,
      "author": {
        "id": 5015
      },
      "writtenOn": "2022-02-19T01:19:21Z",
      "side": 1,
      "message": "link to \"type parameter\"?\n\nbut i think this isn\u0027t the way to say this, or else you need to define what you mean when you use the term this way. what you\u0027re saying is that the term cannot be an identifier that is the name of a type parameter that is part of a surrounding declaration. (i think - do you also mean it can\u0027t be []T where T is a t.p.?) that\u0027s a mouthful, but you want to be precise.\n\nfor this particular example, i think you want something like this, absent other changes:\n\nA term in a union cannot contain a name denoting a type parameter of a surrounding declaration.\n\nsomewhere, i suggest you need to add a real definition of this term or, i would prefer, a new term to represent this concept, which comes up a lot but isn\u0027t really the same as a \"type parameter\", which is an element of a declaration.  you might be able get by with something like,\n\nThe term \"type parameter name\" refers to an identifier that denotes a type parameter of a surrounding declaration.",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2d665af5_2f8a187c",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 1471,
      "author": {
        "id": 5015
      },
      "writtenOn": "2022-02-19T01:19:21Z",
      "side": 1,
      "message": "again, this is not clear. given how? you want some improved terminology. i have to stop and think hard about how you could even write the upcoming example.",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3653998a_52179aa3",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 1476,
      "author": {
        "id": 5015
      },
      "writtenOn": "2022-02-19T01:19:21Z",
      "side": 1,
      "message": "P is the name of a type parameter\n\netc.",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1059b166_3c567b65",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 1479,
      "author": {
        "id": 5015
      },
      "writtenOn": "2022-02-19T01:19:21Z",
      "side": 1,
      "message": "s/Floats/Float/g",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3e4de360_afdd883a",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 1485,
      "author": {
        "id": 5015
      },
      "writtenOn": "2022-02-19T01:19:21Z",
      "side": 1,
      "message": "how can a union have only one term? just as \"x\" is not a sum, but \"x+y\" is.",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3ba898eb_8a303f3c",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 1499,
      "author": {
        "id": 5015
      },
      "writtenOn": "2022-02-19T01:19:21Z",
      "side": 1,
      "message": "s/Floats/Float/g\n\ndo this globally; i\u0027ll stop marking it",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "06b9a380_a1255182",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 1510,
      "author": {
        "id": 5015
      },
      "writtenOn": "2022-02-19T01:19:21Z",
      "side": 1,
      "message": "define \"contains\"\n\nis this legal?\n\ninterface Equaler { Equal() Equaler }",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fdb5e9a9_67599512",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 1550,
      "author": {
        "id": 5015
      },
      "writtenOn": "2022-02-19T01:19:21Z",
      "side": 1,
      "message": "this is a little unsettling. i had to reread to see that it was not a repetition. you can do it in one easier go:\n\nA type T, or a value of type T, implements an interface I if",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "784f0a95_05fd3fea",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 2590,
      "author": {
        "id": 52648
      },
      "writtenOn": "2022-02-14T14:50:51Z",
      "side": 1,
      "message": "You probably dont want to mention the constraints package in the spec right now",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cbda95b6_32e5df90",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 2610,
      "author": {
        "id": 52648
      },
      "writtenOn": "2022-02-14T14:50:51Z",
      "side": 1,
      "message": "It\u0027s not clear if \"number\" is sufficient here - should they be the same names? Or is the mapping done positionally? Is this something that should be explicitly mentioned?",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9be85334_5883fa44",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 2610,
      "author": {
        "id": 5206
      },
      "writtenOn": "2022-02-14T22:06:41Z",
      "side": 1,
      "message": "The type parameters in the receiver type of a method declaration do not have to have the same name as the type parameters in the declaration of the receiver type.  But you do have to have the same number.  The text is correct.  But it might be worth an example.",
      "parentUuid": "cbda95b6_32e5df90",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b3e70647_7ce787c6",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 2645,
      "author": {
        "id": 52648
      },
      "writtenOn": "2022-02-14T14:50:51Z",
      "side": 1,
      "message": "Should this say something about some type params referring to others? (this is unlike function parameter lists AFAIU)\n\nAre there specific rules this must follow - e.g. here E is used first and defined later; does this order matter?",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "48c52066_4ad15d15",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 2660,
      "author": {
        "id": 31647
      },
      "writtenOn": "2022-02-14T21:54:16Z",
      "side": 1,
      "message": "I think this may need to be worded more carefully. For example *C|int and *struct{}|int are currently also ambiguous, and *C|~int fails to parse.\n\nMore details in #49482.",
      "range": {
        "startLine": 2657,
        "startChar": 0,
        "endLine": 2660,
        "endChar": 34
      },
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a4f3908b_c9f8aa14",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 2706,
      "author": {
        "id": 52648
      },
      "writtenOn": "2022-02-14T14:50:51Z",
      "side": 1,
      "message": "Just a bit above you mention that [P *C] is a potential ambiguity without the interface{}, it\u0027s not clear to me what the nuance is that makes this not an ambiguity.",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c4a203f4_288b0aac",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 2706,
      "author": {
        "id": 5206
      },
      "writtenOn": "2022-02-14T22:06:41Z",
      "side": 1,
      "message": "Well, the ambiguity only arises for a generic type declaration, not for a generic function declaration.  But still might be better to use a different example here.",
      "parentUuid": "a4f3908b_c9f8aa14",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b95d42f1_7ee4dbc2",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 2909,
      "author": {
        "id": 52648
      },
      "writtenOn": "2022-02-14T18:48:09Z",
      "side": 1,
      "message": "Here too, don\u0027t use `constraints.Ordered`",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ea33618b_76fca548",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 2997,
      "author": {
        "id": 52648
      },
      "writtenOn": "2022-02-14T18:48:09Z",
      "side": 1,
      "message": "I find the \"except...\" part between the commas hard to parse.",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fc55b030_ec96cf34",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 4348,
      "author": {
        "id": 31647
      },
      "writtenOn": "2022-02-17T22:14:36Z",
      "side": 1,
      "message": "This step suggests that inference only applies to functions, when we in fact do constraint type inference for type instances.",
      "range": {
        "startLine": 4348,
        "startChar": 21,
        "endLine": 4348,
        "endChar": 48
      },
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "220afb6b_58677a2c",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 4496,
      "author": {
        "id": 52648
      },
      "writtenOn": "2022-02-14T18:48:09Z",
      "side": 1,
      "message": "Maybe I\u0027m missing something, but doesn\u0027t this first sentence just repeat what was already said above?\n\n\"Function argument type inference infers type arguments from function arguments: if a function parameter is declared with a type T that uses type parameters, unifying the type of the corresponding function argument with T may infer type arguments for the type parameters used by T. \"",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aa761f83_43f68041",
        "filename": "doc/go_spec.html",
        "patchSetId": 2
      },
      "lineNbr": 4555,
      "author": {
        "id": 52648
      },
      "writtenOn": "2022-02-14T18:48:09Z",
      "side": 1,
      "message": "Another constraints.Ordered usage",
      "revId": "1e7054ea3020df089ebdc14c950e5820165cb315",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}