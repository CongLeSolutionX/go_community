{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "4ef0daeb_b2a9bc92",
        "filename": "test/fixedbugs/issue69434.go",
        "patchSetId": 2
      },
      "lineNbr": 16,
      "author": {
        "id": 5200
      },
      "writtenOn": "2024-09-26T23:31:35Z",
      "side": 1,
      "message": "That\u0027s not a lot of stack growing ðŸ˜Š\nMaybe this just needs a call to an empty but go:noinline function?",
      "revId": "d6417bc128116179ea38ea42c5b413881ac0f8f7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a8a759ed_8508754d",
        "filename": "test/fixedbugs/issue69434.go",
        "patchSetId": 2
      },
      "lineNbr": 16,
      "author": {
        "id": 14665
      },
      "writtenOn": "2024-09-27T00:07:32Z",
      "side": 1,
      "message": "Yeah, but I want to make it clear that the stack is growing, so we are moving to new one, thus the old stale pointer is invalid.\n\nIf the stack is not moved, then the code still run fine.",
      "parentUuid": "4ef0daeb_b2a9bc92",
      "revId": "d6417bc128116179ea38ea42c5b413881ac0f8f7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cad7e439_dc9659b0",
        "filename": "test/fixedbugs/issue69434.go",
        "patchSetId": 2
      },
      "lineNbr": 16,
      "author": {
        "id": 5200
      },
      "writtenOn": "2024-09-27T04:49:18Z",
      "side": 1,
      "message": "If 2 invocations of growStack (one with i\u003d\u003d1, and one with i\u003d\u003d0) are causing the stack to grow, then it must be right past the edge where we trigger a stack growth. The stack frame of growStack is tiny. That makes this test pretty fragile, as any change in the stack frame size of any ancestor might prevent it from growing the stack, or causing some frame higher in the stack to grow the stack instead.",
      "parentUuid": "a8a759ed_8508754d",
      "revId": "d6417bc128116179ea38ea42c5b413881ac0f8f7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f4bae391_548b8e5d",
        "filename": "test/fixedbugs/issue69434.go",
        "patchSetId": 2
      },
      "lineNbr": 16,
      "author": {
        "id": 14665
      },
      "writtenOn": "2024-09-27T05:00:45Z",
      "side": 1,
      "message": "Hmm, then what should we do to make it better? A call to empty function with go:noinline will have the same effect with current growStack, which is currently not be inlined because itâ€™s recursive.",
      "parentUuid": "cad7e439_dc9659b0",
      "revId": "d6417bc128116179ea38ea42c5b413881ac0f8f7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1d592e6f_959b6587",
        "filename": "test/fixedbugs/issue69434.go",
        "patchSetId": 2
      },
      "lineNbr": 16,
      "author": {
        "id": 5200
      },
      "writtenOn": "2024-09-27T15:34:03Z",
      "side": 1,
      "message": "I guess my question is, is this really because it is growing the stack, or is it enough to just have a call that requires a spill/restore around it, or adjusts the inlining threshold of the calling function, or something else?\n\nIf it really is because of stack growth, then making it deeper would help keep the test from being flaky.",
      "parentUuid": "f4bae391_548b8e5d",
      "revId": "d6417bc128116179ea38ea42c5b413881ac0f8f7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1457c6cb_bfc9b5a9",
        "filename": "test/fixedbugs/issue69434.go",
        "patchSetId": 2
      },
      "lineNbr": 16,
      "author": {
        "id": 14665
      },
      "writtenOn": "2024-09-27T16:09:33Z",
      "side": 1,
      "message": "So if we remove the growStack call, and do:\n\n```\ngo1.23.1 run -gcflags\u003d-d\u003dmaymorestack\u003druntime.mayMoreStackMove main.go\n```\n\nThe test still failed, so we should just use this gcflags instead?",
      "parentUuid": "1d592e6f_959b6587",
      "revId": "d6417bc128116179ea38ea42c5b413881ac0f8f7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0b574261_c29622dc",
        "filename": "test/fixedbugs/issue69434.go",
        "patchSetId": 2
      },
      "lineNbr": 16,
      "author": {
        "id": 5200
      },
      "writtenOn": "2024-09-27T21:07:16Z",
      "side": 1,
      "message": "That seems like a pretty big hammer, as that copies the stack at every possible preemption point. But I guess that\u0027s fine for just one test.",
      "parentUuid": "1457c6cb_bfc9b5a9",
      "revId": "d6417bc128116179ea38ea42c5b413881ac0f8f7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5c6b8efa_6c021fd5",
        "filename": "test/fixedbugs/issue69434.go",
        "patchSetId": 2
      },
      "lineNbr": 16,
      "author": {
        "id": 14665
      },
      "writtenOn": "2024-09-28T00:32:10Z",
      "side": 1,
      "message": "Yeah, but it proves that moving the stack is the culprit and the requirement for the test, and it is not run more reliably, no fragile.",
      "parentUuid": "0b574261_c29622dc",
      "revId": "d6417bc128116179ea38ea42c5b413881ac0f8f7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}