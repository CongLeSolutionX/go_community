// Copyright 2024 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package ecdsa

import (
	"bytes"
	"crypto/internal/fips"
	"errors"
	"sync"
)

var fipsSelfTest = sync.OnceFunc(func() {
	fips.CAST("ECDSA P-256 SHA2-256", func() error {
		// https://www.rfc-editor.org/rfc/rfc9500.html#section-2.3
		k := &PrivateKey{
			pub: PublicKey{
				curve: p256,
				q: []byte{
					0x04,
					0x42, 0x25, 0x48, 0xF8, 0x8F, 0xB7, 0x82, 0xFF,
					0xB5, 0xEC, 0xA3, 0x74, 0x44, 0x52, 0xC7, 0x2A,
					0x1E, 0x55, 0x8F, 0xBD, 0x6F, 0x73, 0xBE, 0x5E,
					0x48, 0xE9, 0x32, 0x32, 0xCC, 0x45, 0xC5, 0xB1,
					0x6C, 0x4C, 0xD1, 0x0C, 0x4C, 0xB8, 0xD5, 0xB8,
					0xA1, 0x71, 0x39, 0xE9, 0x48, 0x82, 0xC8, 0x99,
					0x25, 0x72, 0x99, 0x34, 0x25, 0xF4, 0x14, 0x19,
					0xAB, 0x7E, 0x90, 0xA4, 0x2A, 0x49, 0x42, 0x72},
			},
			d: []byte{
				0xE6, 0xCB, 0x5B, 0xDD, 0x80, 0xAA, 0x45, 0xAE,
				0x9C, 0x95, 0xE8, 0xC1, 0x54, 0x76, 0x67, 0x9F,
				0xFE, 0xC9, 0x53, 0xC1, 0x68, 0x51, 0xE7, 0x11,
				0xE7, 0x43, 0x93, 0x95, 0x89, 0xC6, 0x4F, 0xC1,
			},
		}
		hash := []byte{
			0x32, 0xb3, 0xda, 0x19, 0xf9, 0x44, 0xb0, 0x48,
			0x66, 0xd9, 0x31, 0xa6, 0x6c, 0x30, 0xb9, 0x4a,
			0xe7, 0x28, 0xcc, 0xe7, 0x00, 0xe4, 0xb0, 0xa5,
			0xb4, 0xfe, 0xae, 0x8f, 0x43, 0x8f, 0xde, 0xc2,
		}
		want := &Signature{
			R: []byte{
				0x6b, 0x17, 0xd1, 0xf2, 0xe1, 0x2c, 0x42, 0x47,
				0xf8, 0xbc, 0xe6, 0xe5, 0x63, 0xa4, 0x40, 0xf2,
				0x77, 0x03, 0x7d, 0x81, 0x2d, 0xeb, 0x33, 0xa0,
				0xf4, 0xa1, 0x39, 0x45, 0xd8, 0x98, 0xc2, 0x96,
			}, S: []byte{
				0x2d, 0x4f, 0x31, 0xc9, 0x07, 0x35, 0x74, 0x2b,
				0x82, 0x04, 0x19, 0xa0, 0x97, 0xb1, 0x4a, 0x75,
				0x99, 0xf7, 0x8a, 0x54, 0xf8, 0x3b, 0xe9, 0x89,
				0x50, 0x26, 0x35, 0x32, 0x52, 0x0f, 0x73, 0xfc,
			},
		}
		got, err := sign(P256(), k, testingOnlyFixedRandomPoint, hash)
		if err != nil {
			return err
		}
		if err := verify(P256(), &k.pub, hash, got); err != nil {
			return err
		}
		if !bytes.Equal(got.R, want.R) || !bytes.Equal(got.S, want.S) {
			return errors.New("unexpected result")
		}
		return nil
	})
})
