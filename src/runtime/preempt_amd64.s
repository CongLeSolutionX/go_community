// Code generated by mkpreempt.go; DO NOT EDIT.

#include "go_asm.h"
#include "textflag.h"

TEXT ·asyncPreempt(SB),NOSPLIT|NOFRAME,$0-0
	// Save flags before clobbering them
	PUSHFQ
	// obj doesn't understand ADD/SUB on SP, but does understand ADJSP
	ADJSP $376
	// But vet doesn't know ADJSP, so suppress vet stack checking
	NOP SP
	MOVQ AX, 0(SP)
	MOVQ CX, 8(SP)
	MOVQ DX, 16(SP)
	MOVQ BX, 24(SP)
	MOVQ BP, 32(SP)
	MOVQ SI, 40(SP)
	MOVQ DI, 48(SP)
	MOVQ R8, 56(SP)
	MOVQ R9, 64(SP)
	MOVQ R10, 72(SP)
	MOVQ R11, 80(SP)
	MOVQ R12, 88(SP)
	MOVQ R13, 96(SP)
	MOVQ R14, 104(SP)
	MOVQ R15, 112(SP)
	MOVUPS X0, 120(SP)
	MOVUPS X1, 136(SP)
	MOVUPS X2, 152(SP)
	MOVUPS X3, 168(SP)
	MOVUPS X4, 184(SP)
	MOVUPS X5, 200(SP)
	MOVUPS X6, 216(SP)
	MOVUPS X7, 232(SP)
	MOVUPS X8, 248(SP)
	MOVUPS X9, 264(SP)
	MOVUPS X10, 280(SP)
	MOVUPS X11, 296(SP)
	MOVUPS X12, 312(SP)
	MOVUPS X13, 328(SP)
	MOVUPS X14, 344(SP)
	MOVUPS X15, 360(SP)
	CALL ·asyncPreempt2(SB)
	MOVUPS 360(SP), X15
	MOVUPS 344(SP), X14
	MOVUPS 328(SP), X13
	MOVUPS 312(SP), X12
	MOVUPS 296(SP), X11
	MOVUPS 280(SP), X10
	MOVUPS 264(SP), X9
	MOVUPS 248(SP), X8
	MOVUPS 232(SP), X7
	MOVUPS 216(SP), X6
	MOVUPS 200(SP), X5
	MOVUPS 184(SP), X4
	MOVUPS 168(SP), X3
	MOVUPS 152(SP), X2
	MOVUPS 136(SP), X1
	MOVUPS 120(SP), X0
	MOVQ 112(SP), R15
	MOVQ 104(SP), R14
	MOVQ 96(SP), R13
	MOVQ 88(SP), R12
	MOVQ 80(SP), R11
	MOVQ 72(SP), R10
	MOVQ 64(SP), R9
	MOVQ 56(SP), R8
	MOVQ 48(SP), DI
	MOVQ 40(SP), SI
	MOVQ 32(SP), BP
	MOVQ 24(SP), BX
	MOVQ 16(SP), DX
	MOVQ 8(SP), CX
	MOVQ 0(SP), AX
	ADJSP $-376
	POPFQ
	RET
