// AUTO-GENERATED by mkduff.go

#include "textflag.h"

// runtime路duffzero is a Duff's device for zeroing memory.
// The compiler jumps to computed addresses within
// this routine to zero chunks of memory.
// Do not change this code without also
// changing clearfat in cmd/5g/ggen.go.
//
// R0: zero
// R1: ptr to memory to be zeroed
// R1 is updated as a side effect.
TEXT runtime路duffzero(SB), NOSPLIT, $0-0
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	MOVW.P	R0, 4(R1)
	RET

// runtime路duffcopy is a Duff's device for copying memory.
// The compiler jumps to computed addresses within
// this routine to copy chunks of memory.
// Source and destination must not overlap.
// Do not change this code without also
// changing stackcopy in cmd/5g/cgen.go.
//
// R0: scratch space
// R1: ptr to source memory
// R2: ptr to destination memory
// R1 and R2 are updated as a side effect
TEXT runtime路duffcopy(SB), NOSPLIT, $0-0
	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	MOVW.P	4(R1), R0
	MOVW.P	R0, 4(R2)

	RET
