// AUTO-GENERATED by mkduff.go

#include "textflag.h"

// runtime路duffzero is a Duff's device for zeroing memory.
// The compiler jumps to computed addresses within
// this routine to zero chunks of memory.
// Do not change this code without also
// changing clearfat in cmd/7g/ggen.go.
//
// ZR: always zero
// R16 (aka REGRT1): ptr to memory to be zeroed - 8
// On return, R16 points to the last zeroed dword.
TEXT runtime路duffzero(SB), NOSPLIT, $-8-0
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	MOVD.W	ZR, 8(R16)
	RET

// runtime路duffcopy is a Duff's device for copying memory.
// The compiler jumps to computed addresses within
// this routine to copy chunks of memory.
// Source and destination must not overlap.
// Do not change this code without also
// changing stackcopy in cmd/7g/cgen.go.
//
// TODO: Implement runtime路duffcopy.
