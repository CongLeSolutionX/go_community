// Copyright 2014 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Test that random number sequences generated by a specific seed
// do not change from version to version.
//
// Do NOT make changes to the golden outputs. If bugs need to be fixed
// in the underlying code, find ways to fix them that do not affect the
// outputs.

package rand_test

import (
	"flag"
	"fmt"
	. "math/rand/v2"
	"reflect"
	"testing"
)

var printgolden = flag.Bool("printgolden", false, "print golden results for regression test")

func TestRegress(t *testing.T) {
	var int32s = []int32{1, 10, 32, 1 << 20, 1<<20 + 1, 1000000000, 1 << 30, 1<<31 - 2, 1<<31 - 1}
	var uint32s = []uint32{1, 10, 32, 1 << 20, 1<<20 + 1, 1000000000, 1 << 30, 1<<31 - 2, 1<<31 - 1, 1<<32 - 2, 1<<32 - 1}
	var int64s = []int64{1, 10, 32, 1 << 20, 1<<20 + 1, 1000000000, 1 << 30, 1<<31 - 2, 1<<31 - 1, 1000000000000000000, 1 << 60, 1<<63 - 2, 1<<63 - 1}
	var uint64s = []uint64{1, 10, 32, 1 << 20, 1<<20 + 1, 1000000000, 1 << 30, 1<<31 - 2, 1<<31 - 1, 1000000000000000000, 1 << 60, 1<<63 - 2, 1<<63 - 1, 1<<64 - 2, 1<<64 - 1}
	var permSizes = []int{0, 1, 5, 8, 9, 10, 16}

	n := reflect.TypeOf(New(NewPCG(1, 2))).NumMethod()
	p := 0
	if *printgolden {
		fmt.Printf("var regressGolden = []any{\n")
	}
	for i := 0; i < n; i++ {
		r := New(NewPCG(1, 2))
		rv := reflect.ValueOf(r)
		m := rv.Type().Method(i)
		mv := rv.Method(i)
		mt := mv.Type()
		if mt.NumOut() == 0 {
			continue
		}
		for repeat := 0; repeat < 20; repeat++ {
			var args []reflect.Value
			var argstr string
			if mt.NumIn() == 1 {
				var x any
				switch mt.In(0).Kind() {
				default:
					t.Fatalf("unexpected argument type for r.%s", m.Name)

				case reflect.Int:
					if m.Name == "Perm" {
						x = permSizes[repeat%len(permSizes)]
						break
					}
					big := int64s[repeat%len(int64s)]
					if int64(int(big)) != big {
						r.Int63n(big) // what would happen on 64-bit machine, to keep stream in sync
						if *printgolden {
							fmt.Printf("\tskipped, // must run printgolden on 64-bit machine\n")
						}
						p++
						continue
					}
					x = int(big)

				case reflect.Uint:
					big := uint64s[repeat%len(uint64s)]
					if uint64(uint(big)) != big {
						r.Uint64n(big) // what would happen on 64-bit machine, to keep stream in sync
						if *printgolden {
							fmt.Printf("\tskipped, // must run printgolden on 64-bit machine\n")
						}
						p++
						continue
					}
					x = uint(big)

				case reflect.Int32:
					x = int32s[repeat%len(int32s)]

				case reflect.Int64:
					x = int64s[repeat%len(int64s)]

				case reflect.Uint32:
					x = uint32s[repeat%len(uint32s)]

				case reflect.Uint64:
					x = uint64s[repeat%len(uint64s)]
				}
				argstr = fmt.Sprint(x)
				args = append(args, reflect.ValueOf(x))
			}

			var out any
			out = mv.Call(args)[0].Interface()
			if m.Name == "Int" || m.Name == "Intn" {
				out = int64(out.(int))
			}
			if *printgolden {
				var val string
				big := int64(1 << 60)
				if int64(int(big)) != big && (m.Name == "Int" || m.Name == "Intn") {
					// 32-bit machine cannot print 64-bit results
					val = "truncated"
				} else if reflect.TypeOf(out).Kind() == reflect.Slice {
					val = fmt.Sprintf("%#v", out)
				} else {
					val = fmt.Sprintf("%T(%v)", out, out)
				}
				fmt.Printf("\t%s, // %s(%s)\n", val, m.Name, argstr)
			} else {
				want := regressGolden[p]
				if m.Name == "Int" {
					want = int64(int(uint(want.(int64)) << 1 >> 1))
				}
				if !reflect.DeepEqual(out, want) {
					t.Errorf("r.%s(%s) = %v, want %v", m.Name, argstr, out, want)
				}
			}
			p++
		}
	}
	if *printgolden {
		fmt.Printf("}\n")
	}
}

var regressGolden = []any{
	float64(1.3438209448589165),         // ExpFloat64()
	float64(1.432411500258701),          // ExpFloat64()
	float64(0.14900891683868758),        // ExpFloat64()
	float64(2.753302979193604),          // ExpFloat64()
	float64(0.46677319812825857),        // ExpFloat64()
	float64(0.06831266684282972),        // ExpFloat64()
	float64(0.8350275782877681),         // ExpFloat64()
	float64(0.5921950942784975),         // ExpFloat64()
	float64(0.10320694987600221),        // ExpFloat64()
	float64(0.3908490576725023),         // ExpFloat64()
	float64(0.6004230690769485),         // ExpFloat64()
	float64(0.9393172042534115),         // ExpFloat64()
	float64(1.468032634918398),          // ExpFloat64()
	float64(0.2384813300175685),         // ExpFloat64()
	float64(1.3420099976470599),         // ExpFloat64()
	float64(1.2130571411038633),         // ExpFloat64()
	float64(1.363723868099661),          // ExpFloat64()
	float64(0.6815828060103077),         // ExpFloat64()
	float64(0.017118185054735426),       // ExpFloat64()
	float64(0.34201543730918926),        // ExpFloat64()
	float32(0.95955694),                 // Float32()
	float32(0.8076733),                  // Float32()
	float32(0.8135684),                  // Float32()
	float32(0.92872405),                 // Float32()
	float32(0.97472525),                 // Float32()
	float32(0.5485458),                  // Float32()
	float32(0.97740936),                 // Float32()
	float32(0.042272687),                // Float32()
	float32(0.99663067),                 // Float32()
	float32(0.035181105),                // Float32()
	float32(0.45059562),                 // Float32()
	float32(0.86597633),                 // Float32()
	float32(0.8954844),                  // Float32()
	float32(0.090798736),                // Float32()
	float32(0.46218646),                 // Float32()
	float32(0.5955118),                  // Float32()
	float32(0.08985227),                 // Float32()
	float32(0.19820237),                 // Float32()
	float32(0.7443699),                  // Float32()
	float32(0.56461),                    // Float32()
	float64(0.6764556596678251),         // Float64()
	float64(0.4613862177205994),         // Float64()
	float64(0.5085473976760264),         // Float64()
	float64(0.4297927436037299),         // Float64()
	float64(0.797802349388613),          // Float64()
	float64(0.3883664855410056),         // Float64()
	float64(0.8192750264193612),         // Float64()
	float64(0.3381816951746133),         // Float64()
	float64(0.9730458047755973),         // Float64()
	float64(0.281449117585586),          // Float64()
	float64(0.6047654075331631),         // Float64()
	float64(0.9278107175107462),         // Float64()
	float64(0.16387541502137226),        // Float64()
	float64(0.7263900707339023),         // Float64()
	float64(0.6974917552729882),         // Float64()
	float64(0.7640946923790318),         // Float64()
	float64(0.7188183661358182),         // Float64()
	float64(0.5856191500346635),         // Float64()
	float64(0.9549597149363428),         // Float64()
	float64(0.5168804691962643),         // Float64()
	int64(4969059760275911952),          // Int()
	int64(2147869220224756844),          // Int()
	int64(5246770554000605320),          // Int()
	int64(5471241176507662746),          // Int()
	int64(4321634407747778896),          // Int()
	int64(760102831717374652),           // Int()
	int64(9221744211007427193),          // Int()
	int64(8289669384274456462),          // Int()
	int64(2449715415482412441),          // Int()
	int64(3389241988064777392),          // Int()
	int64(2986830195847294191),          // Int()
	int64(8204908297817606218),          // Int()
	int64(8134976985547166651),          // Int()
	int64(2240328155279531677),          // Int()
	int64(7311121042813227358),          // Int()
	int64(5231057920893523323),          // Int()
	int64(4257872588489500903),          // Int()
	int64(158397175702351138),           // Int()
	int64(1350674201389090105),          // Int()
	int64(6093522341581845358),          // Int()
	int32(1652216515),                   // Int31()
	int32(1323786710),                   // Int31()
	int32(1684546306),                   // Int31()
	int32(1710678126),                   // Int31()
	int32(503104460),                    // Int31()
	int32(88487615),                     // Int31()
	int32(1073552320),                   // Int31()
	int32(965044529),                    // Int31()
	int32(285184408),                    // Int31()
	int32(394559696),                    // Int31()
	int32(1421454622),                   // Int31()
	int32(955177040),                    // Int31()
	int32(2020777787),                   // Int31()
	int32(260808523),                    // Int31()
	int32(851126509),                    // Int31()
	int32(1682717115),                   // Int31()
	int32(1569423431),                   // Int31()
	int32(1092181682),                   // Int31()
	int32(157239171),                    // Int31()
	int32(709379364),                    // Int31()
	int32(0),                            // Int31n(1)
	int32(6),                            // Int31n(10)
	int32(5),                            // Int31n(32)
	int32(901340),                       // Int31n(1048576)
	int32(245656),                       // Int31n(1048577)
	int32(41205256),                     // Int31n(1000000000)
	int32(1073362816),                   // Int31n(1073741824)
	int32(965044528),                    // Int31n(2147483646)
	int32(285184407),                    // Int31n(2147483647)
	int32(0),                            // Int31n(1)
	int32(6),                            // Int31n(10)
	int32(0),                            // Int31n(32)
	int32(343671),                       // Int31n(1048576)
	int32(127348),                       // Int31n(1048577)
	int32(396336665),                    // Int31n(1000000000)
	int32(144208758),                    // Int31n(1073741824)
	int32(1569423430),                   // Int31n(2147483646)
	int32(1092181681),                   // Int31n(2147483647)
	int32(0),                            // Int31n(1)
	int32(3),                            // Int31n(10)
	int64(4969059760275911952),          // Int63()
	int64(2147869220224756844),          // Int63()
	int64(5246770554000605320),          // Int63()
	int64(5471241176507662746),          // Int63()
	int64(4321634407747778896),          // Int63()
	int64(760102831717374652),           // Int63()
	int64(9221744211007427193),          // Int63()
	int64(8289669384274456462),          // Int63()
	int64(2449715415482412441),          // Int63()
	int64(3389241988064777392),          // Int63()
	int64(2986830195847294191),          // Int63()
	int64(8204908297817606218),          // Int63()
	int64(8134976985547166651),          // Int63()
	int64(2240328155279531677),          // Int63()
	int64(7311121042813227358),          // Int63()
	int64(5231057920893523323),          // Int63()
	int64(4257872588489500903),          // Int63()
	int64(158397175702351138),           // Int63()
	int64(1350674201389090105),          // Int63()
	int64(6093522341581845358),          // Int63()
	int64(0),                            // Int63n(1)
	int64(6),                            // Int63n(10)
	int64(8),                            // Int63n(32)
	int64(704922),                       // Int63n(1048576)
	int64(245656),                       // Int63n(1048577)
	int64(41205257),                     // Int63n(1000000000)
	int64(43831929),                     // Int63n(1073741824)
	int64(965044528),                    // Int63n(2147483646)
	int64(285184408),                    // Int63n(2147483647)
	int64(183731176326946086),           // Int63n(1000000000000000000)
	int64(680987186633600239),           // Int63n(1152921504606846976)
	int64(4102454148908803108),          // Int63n(9223372036854775806)
	int64(8679174511200971228),          // Int63n(9223372036854775807)
	int64(0),                            // Int63n(1)
	int64(3),                            // Int63n(10)
	int64(27),                           // Int63n(32)
	int64(665831),                       // Int63n(1048576)
	int64(533292),                       // Int63n(1048577)
	int64(73220195),                     // Int63n(1000000000)
	int64(686060398),                    // Int63n(1073741824)
	int64(0),                            // Intn(1)
	int64(6),                            // Intn(10)
	int64(5),                            // Intn(32)
	int64(901340),                       // Intn(1048576)
	int64(245656),                       // Intn(1048577)
	int64(41205256),                     // Intn(1000000000)
	int64(1073362816),                   // Intn(1073741824)
	int64(965044528),                    // Intn(2147483646)
	int64(285184407),                    // Intn(2147483647)
	int64(183731176326946086),           // Intn(1000000000000000000)
	int64(680987186633600239),           // Intn(1152921504606846976)
	int64(4102454148908803108),          // Intn(9223372036854775806)
	int64(8679174511200971228),          // Intn(9223372036854775807)
	int64(0),                            // Intn(1)
	int64(3),                            // Intn(10)
	int64(22),                           // Intn(32)
	int64(458895),                       // Intn(1048576)
	int64(533292),                       // Intn(1048577)
	int64(330330507),                    // Intn(1000000000)
	int64(208955345),                    // Intn(1073741824)
	float64(-0.25769869141277585),       // NormFloat64()
	float64(-0.9795530770996541),        // NormFloat64()
	float64(-0.22447773001753593),       // NormFloat64()
	float64(-0.7943089779712367),        // NormFloat64()
	float64(0.452553843529665),          // NormFloat64()
	float64(0.2837080668893781),         // NormFloat64()
	float64(3.8108869476455878),         // NormFloat64()
	float64(0.9716138177551059),         // NormFloat64()
	float64(-0.313466656094052),         // NormFloat64()
	float64(0.22628665134246095),        // NormFloat64()
	float64(1.520551449164751),          // NormFloat64()
	float64(-1.1301529420352148),        // NormFloat64()
	float64(-0.4296612676015604),        // NormFloat64()
	float64(-2.0664647087102463),        // NormFloat64()
	float64(0.08683372137667736),        // NormFloat64()
	float64(1.0859114235799696),         // NormFloat64()
	float64(0.17269567270353503),        // NormFloat64()
	float64(-0.8171679461894215),        // NormFloat64()
	float64(1.0825221588267857),         // NormFloat64()
	float64(0.053436443509575215),       // NormFloat64()
	[]int{},                             // Perm(0)
	[]int{0},                            // Perm(1)
	[]int{4, 0, 2, 1, 3},                // Perm(5)
	[]int{1, 4, 3, 6, 5, 2, 7, 0},       // Perm(8)
	[]int{6, 5, 1, 8, 3, 2, 0, 7, 4},    // Perm(9)
	[]int{7, 4, 2, 5, 6, 8, 1, 9, 0, 3}, // Perm(10)
	[]int{5, 9, 7, 1, 4, 2, 10, 3, 12, 11, 0, 14, 13, 15, 6, 8}, // Perm(16)
	[]int{},                             // Perm(0)
	[]int{0},                            // Perm(1)
	[]int{2, 4, 3, 1, 0},                // Perm(5)
	[]int{7, 0, 3, 1, 5, 4, 6, 2},       // Perm(8)
	[]int{3, 2, 8, 0, 7, 5, 6, 4, 1},    // Perm(9)
	[]int{0, 6, 5, 8, 2, 4, 1, 3, 9, 7}, // Perm(10)
	[]int{14, 9, 4, 6, 13, 8, 0, 15, 2, 12, 3, 7, 1, 10, 5, 11}, // Perm(16)
	[]int{},                             // Perm(0)
	[]int{0},                            // Perm(1)
	[]int{2, 3, 0, 4, 1},                // Perm(5)
	[]int{2, 0, 1, 7, 6, 5, 4, 3},       // Perm(8)
	[]int{3, 1, 7, 5, 0, 2, 8, 4, 6},    // Perm(9)
	[]int{8, 1, 9, 4, 2, 6, 5, 7, 0, 3}, // Perm(10)
	uint32(3304433030),                  // Uint32()
	uint32(2647573421),                  // Uint32()
	uint32(3369092613),                  // Uint32()
	uint32(3421356252),                  // Uint32()
	uint32(1006208920),                  // Uint32()
	uint32(176975231),                   // Uint32()
	uint32(2147104640),                  // Uint32()
	uint32(1930089058),                  // Uint32()
	uint32(570368816),                   // Uint32()
	uint32(789119393),                   // Uint32()
	uint32(2842909244),                  // Uint32()
	uint32(1910354080),                  // Uint32()
	uint32(4041555575),                  // Uint32()
	uint32(521617046),                   // Uint32()
	uint32(1702253018),                  // Uint32()
	uint32(3365434230),                  // Uint32()
	uint32(3138846863),                  // Uint32()
	uint32(2184363364),                  // Uint32()
	uint32(314478343),                   // Uint32()
	uint32(1418758728),                  // Uint32()
	uint32(0),                           // Uint32n(1)
	uint32(6),                           // Uint32n(10)
	uint32(5),                           // Uint32n(32)
	uint32(901340),                      // Uint32n(1048576)
	uint32(245656),                      // Uint32n(1048577)
	uint32(41205256),                    // Uint32n(1000000000)
	uint32(1073362816),                  // Uint32n(1073741824)
	uint32(965044528),                   // Uint32n(2147483646)
	uint32(285184407),                   // Uint32n(2147483647)
	uint32(789119392),                   // Uint32n(4294967294)
	uint32(2842909243),                  // Uint32n(4294967295)
	uint32(0),                           // Uint32n(1)
	uint32(9),                           // Uint32n(10)
	uint32(22),                          // Uint32n(32)
	uint32(414170),                      // Uint32n(1048576)
	uint32(821639),                      // Uint32n(1048577)
	uint32(730819735),                   // Uint32n(1000000000)
	uint32(36879716),                    // Uint32n(1073741824)
	uint32(157239171),                   // Uint32n(2147483646)
	uint32(709379363),                   // Uint32n(2147483647)
	uint64(14192431797130687760),        // Uint64()
	uint64(11371241257079532652),        // Uint64()
	uint64(14470142590855381128),        // Uint64()
	uint64(14694613213362438554),        // Uint64()
	uint64(4321634407747778896),         // Uint64()
	uint64(760102831717374652),          // Uint64()
	uint64(9221744211007427193),         // Uint64()
	uint64(8289669384274456462),         // Uint64()
	uint64(2449715415482412441),         // Uint64()
	uint64(3389241988064777392),         // Uint64()
	uint64(12210202232702069999),        // Uint64()
	uint64(8204908297817606218),         // Uint64()
	uint64(17358349022401942459),        // Uint64()
	uint64(2240328155279531677),         // Uint64()
	uint64(7311121042813227358),         // Uint64()
	uint64(14454429957748299131),        // Uint64()
	uint64(13481244625344276711),        // Uint64()
	uint64(9381769212557126946),         // Uint64()
	uint64(1350674201389090105),         // Uint64()
	uint64(6093522341581845358),         // Uint64()
	uint64(0),                           // Uint64n(1)
	uint64(6),                           // Uint64n(10)
	uint64(8),                           // Uint64n(32)
	uint64(704922),                      // Uint64n(1048576)
	uint64(245656),                      // Uint64n(1048577)
	uint64(41205257),                    // Uint64n(1000000000)
	uint64(43831929),                    // Uint64n(1073741824)
	uint64(965044528),                   // Uint64n(2147483646)
	uint64(285184408),                   // Uint64n(2147483647)
	uint64(183731176326946086),          // Uint64n(1000000000000000000)
	uint64(680987186633600239),          // Uint64n(1152921504606846976)
	uint64(4102454148908803108),         // Uint64n(9223372036854775806)
	uint64(8679174511200971228),         // Uint64n(9223372036854775807)
	uint64(2240328155279531676),         // Uint64n(18446744073709551614)
	uint64(7311121042813227357),         // Uint64n(18446744073709551615)
	uint64(0),                           // Uint64n(1)
	uint64(7),                           // Uint64n(10)
	uint64(2),                           // Uint64n(32)
	uint64(312633),                      // Uint64n(1048576)
	uint64(346376),                      // Uint64n(1048577)
	uint(0),                             // Uintn(1)
	uint(6),                             // Uintn(10)
	uint(5),                             // Uintn(32)
	uint(901340),                        // Uintn(1048576)
	uint(245656),                        // Uintn(1048577)
	uint(41205256),                      // Uintn(1000000000)
	uint(1073362816),                    // Uintn(1073741824)
	uint(965044528),                     // Uintn(2147483646)
	uint(285184407),                     // Uintn(2147483647)
	uint(183731176326946086),            // Uintn(1000000000000000000)
	uint(680987186633600239),            // Uintn(1152921504606846976)
	uint(4102454148908803108),           // Uintn(9223372036854775806)
	uint(8679174511200971228),           // Uintn(9223372036854775807)
	uint(2240328155279531676),           // Uintn(18446744073709551614)
	uint(7311121042813227357),           // Uintn(18446744073709551615)
	uint(0),                             // Uintn(1)
	uint(7),                             // Uintn(10)
	uint(4),                             // Uintn(32)
	uint(954119),                        // Uintn(1048576)
	uint(346376),                        // Uintn(1048577)
}
