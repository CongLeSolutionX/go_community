// Copyright 2014 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Test that random number sequences generated by a specific seed
// do not change from version to version.
//
// Do NOT make changes to the golden outputs. If bugs need to be fixed
// in the underlying code, find ways to fix them that do not affect the
// outputs.

package rand_test

import (
	"flag"
	"fmt"
	. "math/rand/v2"
	"reflect"
	"testing"
)

var printgolden = flag.Bool("printgolden", false, "print golden results for regression test")

func TestRegress(t *testing.T) {
	var int32s = []int32{1, 10, 32, 1 << 20, 1<<20 + 1, 1000000000, 1 << 30, 1<<31 - 2, 1<<31 - 1}
	var uint32s = []uint32{1, 10, 32, 1 << 20, 1<<20 + 1, 1000000000, 1 << 30, 1<<31 - 2, 1<<31 - 1, 1<<32 - 2, 1<<32 - 1}
	var int64s = []int64{1, 10, 32, 1 << 20, 1<<20 + 1, 1000000000, 1 << 30, 1<<31 - 2, 1<<31 - 1, 1000000000000000000, 1 << 60, 1<<63 - 2, 1<<63 - 1}
	var uint64s = []uint64{1, 10, 32, 1 << 20, 1<<20 + 1, 1000000000, 1 << 30, 1<<31 - 2, 1<<31 - 1, 1000000000000000000, 1 << 60, 1<<63 - 2, 1<<63 - 1, 1<<64 - 2, 1<<64 - 1}
	var permSizes = []int{0, 1, 5, 8, 9, 10, 16}

	n := reflect.TypeOf(New(NewSource(0))).NumMethod()
	p := 0
	if *printgolden {
		fmt.Printf("var regressGolden = []any{\n")
	}
	for i := 0; i < n; i++ {
		r := New(NewSource(0))
		rv := reflect.ValueOf(r)
		m := rv.Type().Method(i)
		mv := rv.Method(i)
		mt := mv.Type()
		if mt.NumOut() == 0 {
			continue
		}
		for repeat := 0; repeat < 20; repeat++ {
			var args []reflect.Value
			var argstr string
			if mt.NumIn() == 1 {
				var x any
				switch mt.In(0).Kind() {
				default:
					t.Fatalf("unexpected argument type for r.%s", m.Name)

				case reflect.Int:
					if m.Name == "Perm" {
						x = permSizes[repeat%len(permSizes)]
						break
					}
					big := int64s[repeat%len(int64s)]
					if int64(int(big)) != big {
						r.Int64N(big) // what would happen on 64-bit machine, to keep stream in sync
						if *printgolden {
							fmt.Printf("\tskipped, // must run printgolden on 64-bit machine\n")
						}
						p++
						continue
					}
					x = int(big)

				case reflect.Uint:
					big := uint64s[repeat%len(uint64s)]
					if uint64(uint(big)) != big {
						r.Uint64N(big) // what would happen on 64-bit machine, to keep stream in sync
						if *printgolden {
							fmt.Printf("\tskipped, // must run printgolden on 64-bit machine\n")
						}
						p++
						continue
					}
					x = uint(big)

				case reflect.Int32:
					x = int32s[repeat%len(int32s)]

				case reflect.Int64:
					x = int64s[repeat%len(int64s)]

				case reflect.Uint32:
					x = uint32s[repeat%len(uint32s)]

				case reflect.Uint64:
					x = uint64s[repeat%len(uint64s)]
				}
				argstr = fmt.Sprint(x)
				args = append(args, reflect.ValueOf(x))
			}

			var out any
			out = mv.Call(args)[0].Interface()
			if m.Name == "Int" || m.Name == "IntN" {
				out = int64(out.(int))
			}
			if *printgolden {
				var val string
				big := int64(1 << 60)
				if int64(int(big)) != big && (m.Name == "Int" || m.Name == "IntN") {
					// 32-bit machine cannot print 64-bit results
					val = "truncated"
				} else if reflect.TypeOf(out).Kind() == reflect.Slice {
					val = fmt.Sprintf("%#v", out)
				} else {
					val = fmt.Sprintf("%T(%v)", out, out)
				}
				fmt.Printf("\t%s, // %s(%s)\n", val, m.Name, argstr)
			} else {
				want := regressGolden[p]
				if m.Name == "Int" {
					want = int64(int(uint(want.(int64)) << 1 >> 1))
				}
				if !reflect.DeepEqual(out, want) {
					t.Errorf("r.%s(%s) = %v, want %v", m.Name, argstr, out, want)
				}
			}
			p++
		}
	}
	if *printgolden {
		fmt.Printf("}\n")
	}
}

var regressGolden = []any{
	float64(2.6779344406612786),         // ExpFloat64()
	float64(0.05089323208834337),        // ExpFloat64()
	float64(1.79826822177316),           // ExpFloat64()
	float64(0.3746141888631642),         // ExpFloat64()
	float64(4.022172748846355),          // ExpFloat64()
	float64(2.3264991117657434),         // ExpFloat64()
	float64(0.035763960321454576),       // ExpFloat64()
	float64(1.4349725579630954),         // ExpFloat64()
	float64(0.24061647358821514),        // ExpFloat64()
	float64(2.560810155241616),          // ExpFloat64()
	float64(0.8527189468171191),         // ExpFloat64()
	float64(0.9727612588668213),         // ExpFloat64()
	float64(0.28003711641258855),        // ExpFloat64()
	float64(1.6210945073196381),         // ExpFloat64()
	float64(1.8954635750678257),         // ExpFloat64()
	float64(2.3670106902586165),         // ExpFloat64()
	float64(0.008489411649247741),       // ExpFloat64()
	float64(3.298224561119382),          // ExpFloat64()
	float64(1.1457048101103602),         // ExpFloat64()
	float64(0.3229373732068336),         // ExpFloat64()
	float32(0.98510706),                 // Float32()
	float32(0.35553086),                 // Float32()
	float32(0.9624019),                  // Float32()
	float32(0.9560114),                  // Float32()
	float32(0.05116242),                 // Float32()
	float32(0.053495407),                // Float32()
	float32(0.632142),                   // Float32()
	float32(0.88251525),                 // Float32()
	float32(0.83772326),                 // Float32()
	float32(0.4213686),                  // Float32()
	float32(0.9389634),                  // Float32()
	float32(0.53342026),                 // Float32()
	float32(0.77187604),                 // Float32()
	float32(0.949991),                   // Float32()
	float32(0.96226454),                 // Float32()
	float32(0.46796882),                 // Float32()
	float32(0.15574259),                 // Float32()
	float32(0.2375375),                  // Float32()
	float32(0.74546635),                 // Float32()
	float32(0.3223933),                  // Float32()
	float64(0.8808568771752335),         // Float64()
	float64(0.8442473408304565),         // Float64()
	float64(0.6992155600949118),         // Float64()
	float64(0.6480917500931975),         // Float64()
	float64(0.40929959163751417),        // Float64()
	float64(0.4279635523510218),         // Float64()
	float64(0.05713630713052631),        // Float64()
	float64(0.06012243438844589),        // Float64()
	float64(0.7017862653962174),         // Float64()
	float64(0.3709491804757563),         // Float64()
	float64(0.5117074487860114),         // Float64()
	float64(0.26736258099681054),        // Float64()
	float64(0.1750085251823984),         // Float64()
	float64(0.5999280266065254),         // Float64()
	float64(0.6981165981246322),         // Float64()
	float64(0.743750597464934),          // Float64()
	float64(0.2459409264438016),         // Float64()
	float64(0.9003004484068063),         // Float64()
	float64(0.963731255290121),          // Float64()
	float64(0.5791467104813477),         // Float64()
	int64(8717895732742165505),          // Int()
	int64(2259404117704393152),          // Int()
	int64(6050128673802995827),          // Int()
	int64(501233450539197794),           // Int()
	int64(3390393562759376202),          // Int()
	int64(2669985732393126063),          // Int()
	int64(1774932891286980153),          // Int()
	int64(6044372234677422456),          // Int()
	int64(8274930044578894929),          // Int()
	int64(1543572285742637646),          // Int()
	int64(2661732831099943416),          // Int()
	int64(8325060299420976708),          // Int()
	int64(7837839688282259259),          // Int()
	int64(2518412263346885298),          // Int()
	int64(5617773211005988520),          // Int()
	int64(2339563716805116249),          // Int()
	int64(7144924247938981575),          // Int()
	int64(161231572858529631),           // Int()
	int64(7259475919510918339),          // Int()
	int64(7373105480197164748),          // Int()
	int32(1014896637),                   // Int32()
	int32(263029257),                    // Int32()
	int32(704327676),                    // Int32()
	int32(1132093077),                   // Int32()
	int32(1468435581),                   // Int32()
	int32(1384569072),                   // Int32()
	int32(206629383),                    // Int32()
	int32(1777399362),                   // Int32()
	int32(2037070468),                   // Int32()
	int32(179695464),                    // Int32()
	int32(1383608308),                   // Int32()
	int32(2042906397),                   // Int32()
	int32(912444629),                    // Int32()
	int32(293181774),                    // Int32()
	int32(653994876),                    // Int32()
	int32(1346102887),                   // Int32()
	int32(1905520479),                   // Int32()
	int32(18769825),                     // Int32()
	int32(1918856049),                   // Int32()
	int32(1932084271),                   // Int32()
	int32(0),                            // Int32N(1)
	int32(1),                            // Int32N(10)
	int32(25),                           // Int32N(32)
	int32(310570),                       // Int32N(1048576)
	int32(717010),                       // Int32N(1048577)
	int32(644740216),                    // Int32N(1000000000)
	int32(413258767),                    // Int32N(1073741824)
	int32(1777399360),                   // Int32N(2147483646)
	int32(2037070467),                   // Int32N(2147483647)
	int32(0),                            // Int32N(1)
	int32(6),                            // Int32N(10)
	int32(27),                           // Int32N(32)
	int32(367019),                       // Int32N(1048576)
	int32(143155),                       // Int32N(1048577)
	int32(304540095),                    // Int32N(1000000000)
	int32(544722126),                    // Int32N(1073741824)
	int32(1905520477),                   // Int32N(2147483646)
	int32(18769824),                     // Int32N(2147483647)
	int32(0),                            // Int32N(1)
	int32(8),                            // Int32N(10)
	int64(8717895732742165505),          // Int64()
	int64(2259404117704393152),          // Int64()
	int64(6050128673802995827),          // Int64()
	int64(501233450539197794),           // Int64()
	int64(3390393562759376202),          // Int64()
	int64(2669985732393126063),          // Int64()
	int64(1774932891286980153),          // Int64()
	int64(6044372234677422456),          // Int64()
	int64(8274930044578894929),          // Int64()
	int64(1543572285742637646),          // Int64()
	int64(2661732831099943416),          // Int64()
	int64(8325060299420976708),          // Int64()
	int64(7837839688282259259),          // Int64()
	int64(2518412263346885298),          // Int64()
	int64(5617773211005988520),          // Int64()
	int64(2339563716805116249),          // Int64()
	int64(7144924247938981575),          // Int64()
	int64(161231572858529631),           // Int64()
	int64(7259475919510918339),          // Int64()
	int64(7373105480197164748),          // Int64()
	int64(0),                            // Int64N(1)
	int64(1),                            // Int64N(10)
	int64(19),                           // Int64N(32)
	int64(959842),                       // Int64N(1048576)
	int64(717010),                       // Int64N(1048577)
	int64(644740216),                    // Int64N(1000000000)
	int64(89212473),                     // Int64N(1073741824)
	int64(1777399361),                   // Int64N(2147483646)
	int64(2037070467),                   // Int64N(2147483647)
	int64(83677221279529177),            // Int64N(1000000000000000000)
	int64(355889821886249464),           // Int64N(1152921504606846976)
	int64(8774216168137876256),          // Int64N(9223372036854775806)
	int64(3918919844141129629),          // Int64N(9223372036854775807)
	int64(0),                            // Int64N(1)
	int64(3),                            // Int64N(10)
	int64(25),                           // Int64N(32)
	int64(679623),                       // Int64N(1048576)
	int64(9164),                         // Int64N(1048577)
	int64(893536978),                    // Int64N(1000000000)
	int64(782454476),                    // Int64N(1073741824)
	int64(0),                            // IntN(1)
	int64(1),                            // IntN(10)
	int64(25),                           // IntN(32)
	int64(310570),                       // IntN(1048576)
	int64(717010),                       // IntN(1048577)
	int64(644740216),                    // IntN(1000000000)
	int64(413258767),                    // IntN(1073741824)
	int64(1777399360),                   // IntN(2147483646)
	int64(2037070467),                   // IntN(2147483647)
	int64(83677221279529177),            // IntN(1000000000000000000)
	int64(355889821886249464),           // IntN(1152921504606846976)
	int64(8774216168137876256),          // IntN(9223372036854775806)
	int64(3918919844141129629),          // IntN(9223372036854775807)
	int64(0),                            // IntN(1)
	int64(3),                            // IntN(10)
	int64(14),                           // IntN(32)
	int64(515775),                       // IntN(1048576)
	int64(9164),                         // IntN(1048577)
	int64(893536977),                    // IntN(1000000000)
	int64(642943070),                    // IntN(1073741824)
	float64(2.668407220510161),          // NormFloat64()
	float64(0.21029195509451104),        // NormFloat64()
	float64(1.8112063888329146),         // NormFloat64()
	float64(-1.1684995306284094),        // NormFloat64()
	float64(-1.8304202324350647),        // NormFloat64()
	float64(-1.438551308224536),         // NormFloat64()
	float64(0.1535837276190394),         // NormFloat64()
	float64(-0.1794534008749901),        // NormFloat64()
	float64(-0.06420297349800763),       // NormFloat64()
	float64(0.29450537259597365),        // NormFloat64()
	float64(-1.5567029664729137),        // NormFloat64()
	float64(-0.14273512924363313),       // NormFloat64()
	float64(1.061772026801234),          // NormFloat64()
	float64(0.28146490968692306),        // NormFloat64()
	float64(1.6482401761780148),         // NormFloat64()
	float64(-1.2912155160282552),        // NormFloat64()
	float64(-0.3424150368477369),        // NormFloat64()
	float64(0.027276582766491697),       // NormFloat64()
	float64(-0.4392200723971982),        // NormFloat64()
	float64(-0.39879722927501393),       // NormFloat64()
	[]int{},                             // Perm(0)
	[]int{0},                            // Perm(1)
	[]int{0, 2, 1, 4, 3},                // Perm(5)
	[]int{3, 1, 6, 4, 7, 5, 2, 0},       // Perm(8)
	[]int{1, 6, 3, 2, 7, 5, 8, 4, 0},    // Perm(9)
	[]int{9, 8, 5, 4, 0, 7, 1, 2, 6, 3}, // Perm(10)
	[]int{8, 0, 1, 9, 5, 11, 4, 14, 10, 2, 6, 3, 7, 13, 15, 12}, // Perm(16)
	[]int{},                             // Perm(0)
	[]int{0},                            // Perm(1)
	[]int{4, 0, 2, 1, 3},                // Perm(5)
	[]int{3, 2, 1, 4, 5, 7, 0, 6},       // Perm(8)
	[]int{8, 2, 0, 6, 5, 1, 3, 7, 4},    // Perm(9)
	[]int{5, 3, 8, 7, 4, 0, 6, 2, 1, 9}, // Perm(10)
	[]int{4, 9, 8, 2, 15, 5, 13, 0, 11, 3, 14, 10, 1, 7, 12, 6}, // Perm(16)
	[]int{},                             // Perm(0)
	[]int{0},                            // Perm(1)
	[]int{0, 3, 2, 1, 4},                // Perm(5)
	[]int{2, 1, 7, 0, 3, 6, 4, 5},       // Perm(8)
	[]int{6, 7, 5, 3, 2, 8, 0, 1, 4},    // Perm(9)
	[]int{6, 0, 4, 3, 9, 1, 8, 2, 5, 7}, // Perm(10)
	uint32(2029793274),                  // Uint32()
	uint32(526058514),                   // Uint32()
	uint32(1408655353),                  // Uint32()
	uint32(2264186154),                  // Uint32()
	uint32(2936871163),                  // Uint32()
	uint32(2769138144),                  // Uint32()
	uint32(413258767),                   // Uint32()
	uint32(3554798725),                  // Uint32()
	uint32(4074140936),                  // Uint32()
	uint32(359390928),                   // Uint32()
	uint32(2767216616),                  // Uint32()
	uint32(4085812795),                  // Uint32()
	uint32(1824889259),                  // Uint32()
	uint32(586363548),                   // Uint32()
	uint32(1307989752),                  // Uint32()
	uint32(2692205774),                  // Uint32()
	uint32(3811040959),                  // Uint32()
	uint32(37539650),                    // Uint32()
	uint32(3837712098),                  // Uint32()
	uint32(3864168542),                  // Uint32()
	uint32(0),                           // Uint32N(1)
	uint32(1),                           // Uint32N(10)
	uint32(25),                          // Uint32N(32)
	uint32(310570),                      // Uint32N(1048576)
	uint32(717010),                      // Uint32N(1048577)
	uint32(644740216),                   // Uint32N(1000000000)
	uint32(413258767),                   // Uint32N(1073741824)
	uint32(1777399360),                  // Uint32N(2147483646)
	uint32(2037070467),                  // Uint32N(2147483647)
	uint32(359390927),                   // Uint32N(4294967294)
	uint32(2767216615),                  // Uint32N(4294967295)
	uint32(0),                           // Uint32N(1)
	uint32(4),                           // Uint32N(10)
	uint32(28),                          // Uint32N(32)
	uint32(415480),                      // Uint32N(1048576)
	uint32(657277),                      // Uint32N(1048577)
	uint32(887327119),                   // Uint32N(1000000000)
	uint32(37539650),                    // Uint32N(1073741824)
	uint32(1918856047),                  // Uint32N(2147483646)
	uint32(1932084270),                  // Uint32N(2147483647)
	uint64(8717895732742165505),         // Uint64()
	uint64(2259404117704393152),         // Uint64()
	uint64(6050128673802995827),         // Uint64()
	uint64(9724605487393973602),         // Uint64()
	uint64(12613765599614152010),        // Uint64()
	uint64(11893357769247901871),        // Uint64()
	uint64(1774932891286980153),         // Uint64()
	uint64(15267744271532198264),        // Uint64()
	uint64(17498302081433670737),        // Uint64()
	uint64(1543572285742637646),         // Uint64()
	uint64(11885104867954719224),        // Uint64()
	uint64(17548432336275752516),        // Uint64()
	uint64(7837839688282259259),         // Uint64()
	uint64(2518412263346885298),         // Uint64()
	uint64(5617773211005988520),         // Uint64()
	uint64(11562935753659892057),        // Uint64()
	uint64(16368296284793757383),        // Uint64()
	uint64(161231572858529631),          // Uint64()
	uint64(16482847956365694147),        // Uint64()
	uint64(16596477517051940556),        // Uint64()
	uint64(0),                           // Uint64N(1)
	uint64(1),                           // Uint64N(10)
	uint64(19),                          // Uint64N(32)
	uint64(959842),                      // Uint64N(1048576)
	uint64(717010),                      // Uint64N(1048577)
	uint64(644740216),                   // Uint64N(1000000000)
	uint64(89212473),                    // Uint64N(1073741824)
	uint64(1777399361),                  // Uint64N(2147483646)
	uint64(2037070467),                  // Uint64N(2147483647)
	uint64(83677221279529177),           // Uint64N(1000000000000000000)
	uint64(355889821886249464),          // Uint64N(1152921504606846976)
	uint64(8774216168137876256),         // Uint64N(9223372036854775806)
	uint64(3918919844141129629),         // Uint64N(9223372036854775807)
	uint64(2518412263346885297),         // Uint64N(18446744073709551614)
	uint64(5617773211005988519),         // Uint64N(18446744073709551615)
	uint64(0),                           // Uint64N(1)
	uint64(8),                           // Uint64N(10)
	uint64(31),                          // Uint64N(32)
	uint64(218307),                      // Uint64N(1048576)
	uint64(943401),                      // Uint64N(1048577)
	uint(0),                             // UintN(1)
	uint(1),                             // UintN(10)
	uint(25),                            // UintN(32)
	uint(310570),                        // UintN(1048576)
	uint(717010),                        // UintN(1048577)
	uint(644740216),                     // UintN(1000000000)
	uint(413258767),                     // UintN(1073741824)
	uint(1777399360),                    // UintN(2147483646)
	uint(2037070467),                    // UintN(2147483647)
	uint(83677221279529177),             // UintN(1000000000000000000)
	uint(355889821886249464),            // UintN(1152921504606846976)
	uint(8774216168137876256),           // UintN(9223372036854775806)
	uint(3918919844141129629),           // UintN(9223372036854775807)
	uint(2518412263346885297),           // UintN(18446744073709551614)
	uint(5617773211005988519),           // UintN(18446744073709551615)
	uint(0),                             // UintN(1)
	uint(8),                             // UintN(10)
	uint(2),                             // UintN(32)
	uint(972514),                        // UintN(1048576)
	uint(943401),                        // UintN(1048577)
}
