// Copyright 2017 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// +build ignore

// This program generates example_test.go.

package main

import (
	"bytes"
	"fmt"
	"go/format"
	"io/ioutil"
	"log"
	"math/bits"
	"reflect"
	"strings"
	"text/template"
)

const (
	header = `// Copyright 2017 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by go run make_examples.go. DO NOT EDIT.

package bits_test

import (
	"fmt"
	"math/bits"
)

`

	regT = `
func Example{{ .Name }}{{ .Size }}() {
	fmt.Printf("{{ .Name }}{{ .Size }}(%0{{ .Size }}b) = %d\n", {{ .FirstArg }}, bits.{{ .Name }}{{ .Size }}({{ .Input }}))
	// Output:
	// {{ .Name }}{{ .Size }}({{ .FirstArgBytes }}) = {{ .Output }}
}
`

	revT = `
func Example{{ .Name }}{{ .Size }}() {
	fmt.Printf("%0{{ .Size }}b\n", {{ .FirstArg }})
	fmt.Printf("%0{{ .Size }}b\n", bits.{{ .Name }}{{ .Size }}({{ .Input }}))
	// Output:
	// {{ .FirstArgBytes }}
	// {{ .OutputBytes }}
}
`
)

var funcs = map[string]interface{}{
	"LeadingZeros8":   bits.LeadingZeros8,
	"LeadingZeros16":  bits.LeadingZeros16,
	"LeadingZeros32":  bits.LeadingZeros32,
	"LeadingZeros64":  bits.LeadingZeros64,
	"TrailingZeros8":  bits.TrailingZeros8,
	"TrailingZeros16": bits.TrailingZeros16,
	"TrailingZeros32": bits.TrailingZeros32,
	"TrailingZeros64": bits.TrailingZeros64,
	"OnesCount8":      bits.OnesCount8,
	"OnesCount16":     bits.OnesCount16,
	"OnesCount32":     bits.OnesCount32,
	"OnesCount64":     bits.OnesCount64,
	"RotateLeft8":     bits.RotateLeft8,
	"RotateLeft16":    bits.RotateLeft16,
	"RotateLeft32":    bits.RotateLeft32,
	"RotateLeft64":    bits.RotateLeft64,
	"Reverse8":        bits.Reverse8,
	"Reverse16":       bits.Reverse16,
	"Reverse32":       bits.Reverse32,
	"Reverse64":       bits.Reverse64,
	"ReverseBytes16":  bits.ReverseBytes16,
	"ReverseBytes32":  bits.ReverseBytes32,
	"ReverseBytes64":  bits.ReverseBytes64,
	"Len8":            bits.Len8,
	"Len16":           bits.Len16,
	"Len32":           bits.Len32,
	"Len64":           bits.Len64,
}

type data struct {
	Name   string
	Args   []interface{}
	Size   int
	Output reflect.Value
}

func (d data) FirstArg() interface{} {
	return d.Args[0]
}

func (d data) FirstArgBytes() string {
	return fmt.Sprintf(fmt.Sprintf("%%0%db", d.Size), d.FirstArg())
}

func (d data) OutputBytes() string {
	return fmt.Sprintf(fmt.Sprintf("%%0%db", d.Size), d.Output)
}

func (d data) Input() string {
	strArgs := make([]string, 0, len(d.Args))
	for _, arg := range d.Args {
		strArgs = append(strArgs, fmt.Sprintf("%d", arg))
	}
	return strings.Join(strArgs, ", ")
}

func main() {
	expls := []struct {
		name     string
		in       []interface{}
		template string
	}{
		{"LeadingZeros", []interface{}{1}, regT},
		{"TrailingZeros", []interface{}{14}, regT},
		{"OnesCount", []interface{}{14}, regT},
		{"RotateLeft", []interface{}{15, 2}, revT},
		{"Reverse", []interface{}{15}, revT},
		{"ReverseBytes", []interface{}{15}, revT},
		{"Len", []interface{}{8}, regT},
	}

	buf := bytes.NewBufferString(header)
	for _, e := range expls {
		tmpl, err := template.New(e.name).Parse(e.template)
		if err != nil {
			log.Fatalf("template parsing failed: %s", err)
		}

		for _, size := range []int{8, 16, 32, 64} {
			f, ok := funcs[fmt.Sprintf("%s%d", e.name, size)]
			if !ok {
				continue
			}
			t := reflect.TypeOf(f)
			in := make([]reflect.Value, 0, t.NumIn())
			for i, arg := range e.in {
				in = append(in, reflect.ValueOf(arg).Convert(t.In(i)))
			}
			out := reflect.ValueOf(f).Call(in)[0]
			content := data{Name: e.name, Args: e.in, Size: size, Output: out}
			if err = tmpl.Execute(buf, content); err != nil {
				log.Fatalf("template execution failed: %s", err)
			}
		}
	}

	out, err := format.Source(buf.Bytes())
	if err != nil {
		log.Fatalf("source code formating failed: %s", err)
	}
	if err = ioutil.WriteFile("example_test.go", out, 0666); err != nil {
		log.Fatalf("could not write file: %s", err)
	}
}
