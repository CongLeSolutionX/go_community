// Copyright 2015 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package big

import (
	"testing"
)

type funTest struct {
	x, want string
}

// Test values computed via http://www.wolframalpha.com/.

var lnTests = []funTest{
	{"1", "0"},

	{"2", "0.6931471805599453094172321214581765680755001343602552541206800094933936219696947156058633269964186875420014810205706857336855202357581305570326707516350759619307275708283714351903070386238916734711233501153644979552391204751726815749320651555"},
	{"10", "2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867"},
	{"100", "4.6051701859880913680359829093687284152022029772575459520666558019351452193547049604719944101791965966839355680845724972668190509301656135133325747381975633789658144166511093616875997896524663970567870106179307554652576923267324445753964397734"},
	{"1000", "6.9077552789821370520539743640530926228033044658863189280999837029027178290320574407079916152687948950259033521268587459002285763952484202699988621072963450684487216249766640425313996844786995955851805159268961331978865384900986668630946596602"},
	{"10000", "9.2103403719761827360719658187374568304044059545150919041333116038702904387094099209439888203583931933678711361691449945336381018603312270266651494763951267579316288333022187233751995793049327941135740212358615109305153846534648891507928795469"},
	{"1e10", "23.025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867"},
	{"1e100", "230.25850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867"},
	{"1e1000", "2302.5850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867"},
	{"1e10000", "23025.850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867"},
	{"1e100000", "230258.50929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867"},
	{"1e1000000", "2.30258509299404568401799145468436420760110148862877297603332790096757260967735248023599720508959829834196778404228624863340952546508280675666628736909878168948290720832555468084379989482623319852839350530896537773262884616336622228769821e6"},
	{"+Inf", "+Inf"},

	{"0.5", "-0.6931471805599453094172321214581765680755001343602552541206800094933936219696947156058633269964186875420014810205706857336855202357581305570326707516350759619307275708283714351903070386238916734711233501153644979552391204751726815749320651555"},
	{"0.1", "-2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867"},
	{"0.01", "-4.6051701859880913680359829093687284152022029772575459520666558019351452193547049604719944101791965966839355680845724972668190509301656135133325747381975633789658144166511093616875997896524663970567870106179307554652576923267324445753964397734"},
	{"0.001", "-6.9077552789821370520539743640530926228033044658863189280999837029027178290320574407079916152687948950259033521268587459002285763952484202699988621072963450684487216249766640425313996844786995955851805159268961331978865384900986668630946596602"},
	{"0.0001", "-9.2103403719761827360719658187374568304044059545150919041333116038702904387094099209439888203583931933678711361691449945336381018603312270266651494763951267579316288333022187233751995793049327941135740212358615109305153846534648891507928795469"},
	{"1e-10", "-23.025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867"},
	{"1e-100", "-230.25850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867"},
	{"1e-1000", "-2302.5850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867"},
	{"1e-10000", "-23025.850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867"},
	{"1e-100000", "-230258.50929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867"},
	{"1e-1000000", "-2.30258509299404568401799145468436420760110148862877297603332790096757260967735248023599720508959829834196778404228624863340952546508280675666628736909878168948290720832555468084379989482623319852839350530896537773262884616336622228769821e6"},
	// TODO(gri) compute ln(0) as -Inf?
}

var exponentialTests = []funTest{
	{"-1000", "5.075958897549456765291809479574336919305599282892837361832393845410540542974819175679662169046542867863667106831065285113578793448019063225125907230021391563809177149539835110857491919430954812995242144157272610846540716381226010492453e-435"},
	{"-10", "0.0000453999297624848515355915155605506102379180888665649692590713056509994216143022816525250045459477823217080550896860284929451991172445203888371833477094145675609909092170073639701810595017839007629685177870309088243651715484487222936523324"},
	{"-0.5", "0.6065306597126334236037995349911804534419181354871869556828921587350565194137484239986476115079894560264237897940395251765378080855629465333411798229476774247075812465168479412725158988479005552443885718507531384868441993187156845315753208901"},
	{"-0.1", "0.9048374180359595731642490594464366211947053609804009520562573170557799653442483610125034460360904572384787453146483184977489081612387900951892794312557248399318523139860115705012439666105039449066273807537937177461582470033208910360687511714"},
	{"-0.01", "0.9900498337491680535739059771800365577720790812538374668838787452931477271687452950182155307793838109929633337294097244838883483458364892608940548417118727078258579447283702134431402601990111765484388801249394070232945610710314408224882353623"},
	{"0", "1"},
	{"0.01", "1.0100501670841680575421654569028600338073622015242925151644040312543741907313238522532104170208054246448220483490181874618368829628670294713481225099949806201933437569834192633316781168909529773424125252386600521285647716610991411383737400309"},
	{"0.1", "1.1051709180756476248117078264902466682245471947375187187928632894409679667476543029891433189707486536329171204854012445361537347145315787020068902997574505197515004866018321613310249357028047934586850494525645057122112661163770326284627042965"},
	{"0.5", "1.6487212707001281468486507878141635716537761007101480115750793116406610211942156086327765200563666430028666377563077970046711669752196091598409714524900597969294226590984039147199484646594892448968689053364184657208410666568598000889249812117"},
	{"0.75", "2.1170000166126746685453698198370956101344915847024034217791330308109845333640128200027915602666157982188859047190155142623585203389722060194287309647850753815687763740346986575676391837495167514651568288075236749574281618696995461994430935724"},
	{"1", "2.7182818284590452353602874713526624977572470936999595749669676277240766303535475945713821785251664274274663919320030599218174135966290435729003342952605956307381323286279434907632338298807531952510190115738341879307021540891499348841675092447"},
	{"2", "7.3890560989306502272304274605750078131803155705518473240871278225225737960790577633843124850791217947737531612654788661238846036927812733744783922133980777749001228956074107537023913309475506820865818202696478682084042209822552348757424625414"},
	{"3", "20.085536923187667740928529654581717896987907838554150144378934229698845878091973731204497160253017702153607615851949002881811012479353506690232621784477250503945677100066077851812229047884383940258152534709352622981465538424555697733515108150"},
	{"5", "148.41315910257660342111558004055227962348766759387898904675284511091206482095857607968840945989902114129280827066632605290992623769454818278044911243542477722369787450840974393799212355166686324188559697667222321326562343238300977335818269336"},
	{"10", "22026.465794806716516957900645284244366353512618556781074235426355225202818570792575199120968164525895451555501092457836652423291606522895166222480137728972873485577837847275195480610095881417055888657927317236168401192698035170264925041101757"},
	{"100", "2.68811714181613544841262555158001358736111187737419224151916086152802870349095649141588710972198457108116708791905760686975977097618682335484596389298719660896291336261200293809572765340329622698656680169177435144518460651628044422377567e43"},
	{"1000", "1.9700711140170469938888793522433231253169379853238457899528029913850638507824411934749780765630268899309638179875202269359829817305446128992326278366015282523232053516958456675619227156760278807142246682631400685516850865349794166031604e434"},
}

func testFun(t *testing.T, name string, fun func(*Float, *Float) *Float, tests []funTest) {
	for _, prec := range []uint{0, 64, 100, 200 /* 300, */, 400, 500} {
		for _, test := range tests {
			x, _, err := ParseFloat(test.x, 0, prec, ToNearestEven)
			if err != nil {
				t.Errorf("parse(%s) (prec = %d): %v", test.x, prec, err)
				continue
			}

			var fx Float
			fun(&fx, x)

			wx, _, err := ParseFloat(test.want, 0, prec, ToNearestEven)
			if err != nil {
				t.Errorf("parse(%s) (prec = %d): %v", test.want, prec, err)
				continue
			}

			got := fx.Text('g', -1)
			want := wx.Text('g', -1)
			if got != want {
				t.Errorf("%s(%s) (prec = %d): got %s; want %s", name, test.x, prec, got, want)
			}

			// TODO(gri) check rounding as well
		}
	}
}

func TestLn(t *testing.T)          { testFun(t, "ln", (*Float).ln, lnTests) }
func TestExponential(t *testing.T) { testFun(t, "exponential", (*Float).exponential, exponentialTests) }
