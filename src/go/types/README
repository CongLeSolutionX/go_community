This version of go/types and related go/* libraries contains changes
to type-check generic code as outlined in the latest contracts proposal,
as presented by Ian Taylor at GopherCon 2019.

CAUTION: EARLY PROTOTYPE. A LOT IS STILL MISSING. THERE ARE MANY BUGS.

Read and use the code at your own risk.

That said, the go/parser and go/ast changes are working and pass tests
including all the larger examples in the latest contracts design doc.
Look for the *.go2 files in go/parser/testdata.

gofmt does not work with parameterized code yet.

The type-checker is starting to work but has still many problems.
I will update this CL from time to time as progress happens.

Specifically, the following pieces (and more) are missing from type-
checking or lead to unexpected behavior:

- Importing of packages with type parameters or contracts.
- Type-checking of contracts and type parameter lists with contracts.
  For instance, because contracts are not yet type-checked, maps where
  the key type is a type parameter will lead to an error because the
  type checker doesn't know whether the key type is comparable or not.
- Parameterized alias types.
- Type instantiation is not always working as expected, leading to
  some odd error messages.
- Methods with parameterized receiver types have only recently started
  to work; there are a few issues around them with proper type
  instantiation.

The following is "working" (as in: can be type-checked without errors):

- Declaration and use of simple parameterized types without contracts.
- Declaration and use (calls) of simple parameterized functions without
  contracts, including type inference from function arguments.

Error messages, where present, are in usable condition but expect
them to be significantly better in a more complete implementation.

To play with this prototype:

- Cherry-pick this CL on top of tip (the cherry-pick was tested with
  tip at 919594830f17):

  git fetch "https://go.googlesource.com/go" ... && git cherry-pick FETCH_HEAD

  (replace the ... with the respective information from Gerrit's CL page)

- Build the gotype command:

  go install go/types/gotype.go

- Run it against a test case (assuming gotype was installed in a location that
  is in your $PATH):

  gotype $GOROOT/src/go/types/examples/functions.go2

See also `gotype -h` for more information.

Note: Currently, files containing parameterized code have extension ".go2".
This is solely to distinguish them from regular Go code and to prevent gofmt
from touching them. We expect a proper implementation to keep using ".go".
