// Copyright 2019 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package p

type myInt int

// Parametrized type declarations

type T1(type P) P

type T2(type P) struct {
        f P
        g int // int should still be in scope chain
}

type List(type P) []P

type A1(type P) = P

type A2(type P) = struct {
        f P
        g int
}

type A3(type P) = struct {
        f P
        g myInt // myInt should still be in scope chain
}

// Parametrized type instantiations

var x int
type _ x /* ERROR not a type */ (int)

type _ int /* ERROR not a parametrized type */ ()
type _ myInt /* ERROR not a parametrized type */ ()

// TODO(gri) better error messages
type _ T1 /* ERROR got 0 arguments but 1 type parameters */ ()
type _ T1(x /* ERROR not a type */ )
type _ T1 /* ERROR got 2 arguments but 1 type parameters */ (int, float32)

// TODO(gri) parameterized alias types don't work correctly
// var _ A1(int) = x
// var _ A1(float32) = x // ERROR cannot use x .* as float32

// var _ T2(*int) = A2(*int){}
// var _ T2(*int) = A2 /* ERROR cannot use */ (int){}
var _ T2(int) = T2(int){}

var _ List(int) = []int{1, 2, 3}
var _ List([]int) = [][]int{{1, 2, 3}}
var _ List(List(List(int)))

// Parametrized types containing parametrized types

type T3(type P) List(P)

var _ T3(int) = T3(int)(List(int){1, 2, 3})
