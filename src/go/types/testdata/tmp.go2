// Copyright 2019 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

contract C(T) {
	T m() T
}

// contract C(T₁) {T₁ C₀(type T₁ any) = interface{m() T₁}}

contract W(T) {
	C(T)
}

// contract W(T₂) {T₂ W₀(type T₂ main.C₀<T₂>) = interface{interface{m() T₂}}}

func _(type T W)(x T) {
	var _ T = x.m()
}

contract compareTwo(A, B) {
	comparable(A)
	comparable(B)
}

func _(type T1, T2 compareTwo)(x1, y1 T1) bool {
	return x1 == y1
}

func _(type T comparable)(x, y T) bool {
	return x == y || x != y
}
