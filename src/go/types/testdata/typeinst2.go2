// Copyright 2019 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package p

type List(type E) []E
var _ List(List(List(int)))
var _ List(List(List(int))) = [](List(List(int))){}

type (
	T1(type P1) struct {
		f1 T2(P1, float32)
	}

	T2(type P2, P3) struct {
		f2 P2
		f3 P3
	}
)

func _() {
	var x1 T1(int)
	var x2 T2(int, float32)
	
	x1.f1.f2 = 0
	x1.f1 = x2
}

type T3(type P) T1(T2(P, P))

func _() {
	var x1 T3(int)
	var x2 T2(int, int)
	x1.f1.f2 = x2
}

func f(type P) (x P) List(P) {
	return List(P){x}
}

var (
	_ []int = f(0)
	_ []float32 = f(float32)(10)
	_ List(complex128) = f(1i)
	_ [](List(int)) = f(List(int){})
        _ List(List(int)) = [](List(int)){}
        _ = [](List(int)){}
)

// Parameterized types with methods

func (l List(E)) Head() (_ E, _ bool) {
	if len(l) > 0 {
		return l[0], true
	}
	return
}

// A test case for instantiating types with other types (extracted from map.go2)

type Pair(type K) struct {
	key K
}

type Receiver(type T) struct {
	values T
}

type Iterator(type K) struct {
	r Receiver(Pair(K))
}

func Values (type T) (r Receiver(T)) T {
        return r.values
}

func (it Iterator(K)) Next() K {
        return Values(Pair(K))(it.r).key
}
