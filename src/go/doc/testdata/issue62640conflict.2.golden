// 
PACKAGE issue62640conflict

IMPORTPATH
	testdata/issue62640conflict

FILENAMES
	testdata/issue62640conflict.go

TYPES
	// 
	type A struct {
		// B should be hidden within S because it conflicts with u.S.
		B int
	}

	// 
	type B struct {
		// E should be unambiguous within s even though u.B has a conflict.
		E int
	}

	// 
	type D struct {
		// F should be visible within s because it is embedded in u,
		// even though u itself is unexported.
		F int
	}

	// 
	type Deep struct {
		Deeper
	}

	// 
	func (Deep) A()

	// 
	func (Deep) B()

	// 
	func (Deep) D()

	// E should be masked by S.c.B.E. 
	func (Deep) E()

	// F should be masked by S.c.D.F. 
	func (Deep) F()

	// 
	type Deeper struct {
		Deepest
	}

	// 
	func (Deeper) A()

	// 
	func (Deeper) B()

	// 
	func (Deeper) D()

	// E should be masked by S.c.B.E. 
	func (Deeper) E()

	// F should be masked by S.c.D.F. 
	func (Deeper) F()

	// Deepest declares methods that may or may not be visible in ...
	type Deepest struct{}

	// 
	func (Deepest) A()

	// 
	func (Deepest) B()

	// 
	func (Deepest) D()

	// E should be masked by S.c.B.E. 
	func (Deepest) E()

	// F should be masked by S.c.D.F. 
	func (Deepest) F()

	// 
	type Outer struct {
		S
		Shallow
	}

	// 
	func (Outer) A()

	// 
	func (Outer) D()

	// S has visible selectors A, D, and F, which should hide deep ...
	type S struct {
		A
		// contains filtered or unexported fields
	}

	// 
	type Shallow struct {
		Deep
	}

	// 
	func (Shallow) A()

	// 
	func (Shallow) B()

	// 
	func (Shallow) D()

	// E should be masked by S.c.B.E. 
	func (Shallow) E()

	// F should be masked by S.c.D.F. 
	func (Shallow) F()

