// Copyright 2016 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// +build ignore

package main

import (
	"flag"
	"fmt"
	"os"
)

var (
	filename = flag.String("output", "", "output file name (standard output if omitted)")
)

func main() {
	flag.Parse()

	var dateLayouts []string

	dows := [...]string{"", "Mon, "}   // day-of-week
	days := [...]string{"2", "02"}     // day = 1*2DIGIT
	years := [...]string{"2006", "06"} // year = 4*DIGIT / 2*DIGIT
	seconds := [...]string{":05", ""}  // second
	// "-0700 (MST)" is not in RFC 5322, but is common.
	zones := [...]string{"-0700", "MST", "-0700 (MST)"} // zone = (("+" / "-") 4DIGIT) / "GMT" / ...

	for _, dow := range dows {
		for _, day := range days {
			for _, year := range years {
				for _, second := range seconds {
					for _, zone := range zones {
						s := dow + day + " Jan " + year + " 15:04" + second + " " + zone
						dateLayouts = append(dateLayouts, s)
					}
				}
			}
		}
	}

	var output *os.File

	if *filename == "" {
		output = os.Stdout
	} else {
		var err error
		output, err = os.OpenFile(*filename, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0644)
		if err != nil {
			panic(err)
		}
	}

	fmt.Fprintln(output, "// MACHINE GENERATED BY 'mkdate_layouts.go'; RUN 'go generate' COMMAND; DO NOT EDIT")
	fmt.Fprintln(output, "")
	fmt.Fprintln(output, "package mail")
	fmt.Fprintln(output, "")
	fmt.Fprintln(output, "// Layouts suitable for passing to time.Parse.")
	fmt.Fprintln(output, "// These are tried in order.")
	fmt.Fprintln(output, "var dateLayouts = [...]string{")
	for _, l := range dateLayouts {
		fmt.Fprintf(output, "\t%q,\n", l)
	}
	fmt.Fprintln(output, "}")
}
