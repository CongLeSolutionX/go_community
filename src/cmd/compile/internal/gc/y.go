//line go.y:21
package gc

import __yyfmt__ "fmt"

//line go.y:21
import (
	"fmt"
	"strings"
)

//line go.y:28
type yySymType struct {
	yys  int
	node *Node
	list *NodeList
	typ  *Type
	sym  *Sym
	val  Val
	i    int
}

const LLITERAL = 57346
const LASOP = 57347
const LCOLAS = 57348
const LBREAK = 57349
const LCASE = 57350
const LCHAN = 57351
const LCONST = 57352
const LCONTINUE = 57353
const LDDD = 57354
const LDEFAULT = 57355
const LDEFER = 57356
const LELSE = 57357
const LFALL = 57358
const LFOR = 57359
const LFUNC = 57360
const LGO = 57361
const LGOTO = 57362
const LIF = 57363
const LIMPORT = 57364
const LINTERFACE = 57365
const LMAP = 57366
const LNAME = 57367
const LPACKAGE = 57368
const LRANGE = 57369
const LRETURN = 57370
const LSELECT = 57371
const LSTRUCT = 57372
const LSWITCH = 57373
const LTYPE = 57374
const LVAR = 57375
const LANDAND = 57376
const LANDNOT = 57377
const LBODY = 57378
const LCOMM = 57379
const LDEC = 57380
const LEQ = 57381
const LGE = 57382
const LGT = 57383
const LIGNORE = 57384
const LINC = 57385
const LLE = 57386
const LLSH = 57387
const LLT = 57388
const LNE = 57389
const LOROR = 57390
const LRSH = 57391
const NotPackage = 57392
const NotParen = 57393
const PreferToRightParen = 57394

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LLITERAL",
	"LASOP",
	"LCOLAS",
	"LBREAK",
	"LCASE",
	"LCHAN",
	"LCONST",
	"LCONTINUE",
	"LDDD",
	"LDEFAULT",
	"LDEFER",
	"LELSE",
	"LFALL",
	"LFOR",
	"LFUNC",
	"LGO",
	"LGOTO",
	"LIF",
	"LIMPORT",
	"LINTERFACE",
	"LMAP",
	"LNAME",
	"LPACKAGE",
	"LRANGE",
	"LRETURN",
	"LSELECT",
	"LSTRUCT",
	"LSWITCH",
	"LTYPE",
	"LVAR",
	"LANDAND",
	"LANDNOT",
	"LBODY",
	"LCOMM",
	"LDEC",
	"LEQ",
	"LGE",
	"LGT",
	"LIGNORE",
	"LINC",
	"LLE",
	"LLSH",
	"LLT",
	"LNE",
	"LOROR",
	"LRSH",
	"'+'",
	"'-'",
	"'|'",
	"'^'",
	"'*'",
	"'/'",
	"'%'",
	"'&'",
	"NotPackage",
	"NotParen",
	"'('",
	"')'",
	"PreferToRightParen",
	"';'",
	"'.'",
	"'$'",
	"'='",
	"':'",
	"'{'",
	"'}'",
	"'!'",
	"'~'",
	"'['",
	"']'",
	"'?'",
	"'@'",
	"','",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyMaxDepth = 200

//line go.y:2422
func fixlbrace(lbr int) {
	// If the opening brace was an LBODY,
	// set up for another one now that we're done.
	// See comment in lex.C about loophack.
	if lbr == LBODY {
		loophack = 1
	}
}

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 23,
	1, 1,
	63, 36,
	-2, 0,
	-1, 58,
	6, 289,
	66, 289,
	76, 289,
	-2, 62,
	-1, 66,
	67, 166,
	-2, 175,
	-1, 84,
	60, 194,
	-2, 228,
	-1, 85,
	60, 195,
	-2, 196,
	-1, 135,
	60, 147,
	64, 147,
	68, 147,
	72, 147,
	-2, 279,
	-1, 139,
	60, 147,
	64, 147,
	68, 147,
	72, 147,
	-2, 280,
	-1, 190,
	2, 228,
	36, 228,
	60, 194,
	68, 228,
	-2, 186,
	-1, 191,
	36, 196,
	60, 195,
	68, 196,
	-2, 187,
	-1, 198,
	63, 264,
	69, 264,
	-2, 0,
	-1, 260,
	63, 264,
	69, 264,
	-2, 0,
	-1, 270,
	8, 264,
	13, 264,
	63, 264,
	69, 264,
	-2, 0,
	-1, 343,
	4, 249,
	63, 249,
	69, 249,
	-2, 170,
	-1, 425,
	67, 157,
	-2, 155,
	-1, 430,
	36, 189,
	60, 189,
	68, 189,
	-2, 180,
	-1, 431,
	36, 190,
	60, 190,
	68, 190,
	-2, 181,
	-1, 432,
	36, 191,
	60, 191,
	68, 191,
	-2, 182,
	-1, 433,
	36, 192,
	60, 192,
	68, 192,
	-2, 183,
	-1, 439,
	8, 264,
	13, 264,
	63, 264,
	69, 264,
	-2, 0,
	-1, 440,
	63, 264,
	69, 264,
	-2, 0,
	-1, 522,
	63, 264,
	69, 264,
	-2, 0,
	-1, 578,
	60, 170,
	-2, 331,
	-1, 579,
	60, 171,
	-2, 330,
	-1, 604,
	8, 264,
	13, 264,
	63, 264,
	69, 264,
	-2, 0,
	-1, 618,
	36, 193,
	60, 193,
	68, 193,
	-2, 184,
	-1, 657,
	67, 158,
	-2, 156,
}

const yyNprod = 365
const yyPrivate = 57344

var yyTokenNames []string
var yyStates []string

const yyLast = 2256

var yyAct = [...]int{

	84, 636, 309, 511, 483, 303, 44, 403, 244, 571,
	322, 200, 314, 575, 85, 304, 247, 261, 491, 336,
	503, 378, 482, 64, 117, 342, 360, 346, 420, 20,
	321, 263, 424, 266, 361, 123, 350, 422, 423, 95,
	264, 396, 188, 492, 414, 14, 259, 118, 504, 31,
	248, 308, 115, 338, 230, 320, 88, 411, 169, 268,
	105, 494, 359, 343, 9, 138, 122, 343, 541, 436,
	93, 89, 13, 19, 395, 132, 132, 92, 190, 140,
	186, 652, 16, 30, 250, 493, 189, 677, 625, 205,
	120, 237, 191, 98, 104, 567, 340, 195, 349, 222,
	494, 210, 339, 206, 610, 207, 16, 249, 415, 445,
	609, 335, 15, 16, 13, 471, 15, 16, 245, 87,
	212, 15, 16, 245, 328, 407, 245, 219, 639, 245,
	470, 327, 246, 531, 227, 688, 217, 246, 532, 208,
	246, 651, 650, 246, 168, 450, 122, 658, 223, 96,
	485, 653, 98, 100, 657, 231, 231, 231, 231, 629,
	257, 626, 218, 15, 16, 232, 234, 236, 226, 240,
	251, 13, 561, 13, 552, 190, 548, 300, 300, 306,
	300, 485, 343, 189, 198, 406, 298, 686, 313, 191,
	213, 214, 13, 190, 648, 169, 199, 486, 540, 469,
	473, 189, 13, 472, 167, 245, 484, 191, 319, 216,
	245, 245, 100, 245, 169, 427, 606, 349, 260, 246,
	15, 16, 15, 16, 246, 246, 345, 246, 486, 185,
	196, 15, 16, 98, 326, 316, 543, 341, 347, 78,
	348, 15, 16, 174, 88, 419, 130, 175, 352, 228,
	245, 15, 16, 138, 13, 176, 356, 389, 93, 89,
	13, 439, 197, 531, 246, 92, 245, 646, 532, 245,
	245, 439, 245, 343, 457, 380, 362, 619, 362, 362,
	246, 377, 375, 246, 246, 488, 246, 400, 387, 402,
	355, 384, 391, 100, 439, 77, 13, 332, 196, 398,
	509, 401, 340, 15, 16, 13, 397, 87, 339, 15,
	16, 382, 190, 439, 416, 13, 393, 13, 430, 438,
	189, 101, 15, 16, 529, 640, 191, 439, 245, 245,
	197, 311, 431, 635, 432, 630, 627, 600, 245, 13,
	594, 256, 246, 246, 584, 15, 16, 490, 437, 13,
	413, 252, 246, 239, 15, 16, 489, 13, 468, 358,
	435, 373, 374, 467, 15, 16, 15, 16, 433, 459,
	447, 446, 410, 13, 128, 462, 79, 370, 405, 392,
	388, 458, 381, 351, 124, 466, 114, 245, 15, 16,
	113, 464, 121, 452, 455, 515, 245, 94, 15, 16,
	58, 246, 26, 514, 479, 682, 15, 16, 116, 516,
	246, 517, 300, 505, 362, 362, 190, 300, 536, 465,
	533, 523, 15, 16, 189, 362, 527, 519, 508, 245,
	191, 539, 478, 681, 498, 245, 110, 680, 679, 544,
	545, 671, 645, 246, 112, 518, 245, 642, 108, 246,
	633, 632, 59, 623, 622, 621, 535, 143, 111, 109,
	246, 618, 245, 542, 608, 211, 588, 553, 564, 556,
	549, 341, 547, 555, 538, 537, 246, 534, 187, 563,
	521, 520, 507, 347, 501, 348, 500, 562, 202, 585,
	497, 106, 463, 443, 211, 565, 550, 474, 454, 211,
	583, 394, 211, 580, 315, 211, 245, 557, 495, 142,
	559, 587, 631, 596, 245, 362, 590, 362, 481, 579,
	246, 515, 515, 362, 598, 461, 362, 376, 246, 514,
	514, 597, 190, 456, 271, 516, 516, 517, 517, 593,
	189, 269, 362, 194, 634, 272, 191, 404, 273, 274,
	275, 276, 277, 278, 279, 280, 281, 282, 283, 284,
	285, 286, 287, 288, 289, 290, 291, 292, 143, 143,
	295, 518, 518, 616, 617, 187, 613, 312, 599, 611,
	612, 211, 526, 605, 603, 305, 211, 211, 454, 211,
	10, 6, 454, 229, 554, 318, 131, 245, 566, 34,
	568, 558, 577, 22, 25, 323, 581, 300, 676, 582,
	80, 246, 67, 362, 644, 643, 647, 453, 362, 505,
	293, 294, 655, 301, 515, 592, 211, 661, 656, 36,
	480, 386, 514, 451, 362, 667, 586, 663, 516, 668,
	517, 591, 211, 143, 665, 211, 211, 357, 211, 134,
	666, 221, 220, 324, 190, 143, 536, 669, 27, 670,
	649, 107, 189, 270, 135, 139, 136, 136, 191, 86,
	172, 362, 515, 409, 518, 683, 579, 38, 171, 362,
	514, 689, 691, 607, 690, 678, 516, 687, 517, 412,
	173, 170, 137, 522, 211, 383, 624, 692, 300, 12,
	693, 628, 620, 408, 211, 211, 65, 390, 604, 440,
	41, 32, 187, 21, 211, 425, 66, 33, 99, 215,
	425, 24, 518, 354, 225, 362, 103, 29, 362, 18,
	8, 4, 353, 119, 119, 126, 129, 224, 641, 102,
	28, 17, 7, 3, 133, 133, 11, 5, 133, 2,
	1, 475, 233, 569, 662, 570, 573, 574, 637, 577,
	512, 203, 90, 211, 91, 460, 267, 659, 660, 82,
	81, 211, 211, 255, 664, 177, 178, 179, 180, 181,
	182, 183, 184, 143, 502, 88, 334, 238, 344, 99,
	143, 262, 674, 654, 138, 675, 141, 23, 421, 93,
	89, 13, 337, 35, 37, 211, 92, 143, 143, 119,
	46, 211, 47, 250, 119, 299, 187, 126, 76, 125,
	202, 265, 211, 49, 48, 45, 297, 296, 83, 235,
	210, 127, 528, 530, 97, 499, 249, 0, 211, 0,
	0, 0, 506, 0, 0, 0, 0, 0, 87, 0,
	15, 16, 449, 0, 0, 0, 0, 88, 0, 293,
	294, 0, 0, 0, 0, 369, 138, 0, 310, 0,
	0, 93, 89, 13, 371, 0, 0, 0, 92, 367,
	365, 363, 211, 0, 241, 250, 366, 0, 0, 253,
	211, 66, 258, 370, 0, 0, 0, 211, 211, 177,
	184, 0, 210, 0, 0, 0, 133, 133, 249, 0,
	368, 0, 0, 0, 254, 0, 638, 0, 0, 0,
	87, 0, 15, 16, 243, 601, 602, 0, 364, 0,
	379, 16, 187, 0, 0, 78, 119, 0, 163, 0,
	88, 0, 425, 0, 614, 425, 425, 0, 164, 138,
	0, 0, 165, 66, 93, 89, 13, 159, 160, 161,
	162, 92, 265, 66, 265, 0, 0, 0, 75, 0,
	0, 329, 0, 211, 0, 0, 330, 331, 0, 333,
	0, 70, 71, 0, 74, 68, 0, 0, 69, 0,
	0, 77, 0, 78, 0, 0, 0, 0, 88, 426,
	211, 72, 73, 87, 0, 15, 16, 138, 0, 0,
	0, 202, 93, 89, 13, 0, 385, 0, 0, 92,
	0, 417, 0, 0, 0, 444, 193, 0, 0, 0,
	0, 0, 0, 0, 0, 399, 0, 0, 0, 70,
	71, 0, 74, 192, 99, 0, 69, 0, 211, 77,
	0, 0, 672, 673, 187, 0, 0, 425, 0, 72,
	73, 87, 0, 15, 16, 487, 0, 0, 0, 379,
	0, 0, 0, 0, 119, 0, 0, 0, 0, 0,
	0, 119, 0, 0, 429, 126, 0, 510, 265, 0,
	0, 0, 0, 0, 441, 442, 148, 163, 0, 166,
	0, 149, 153, 154, 448, 0, 152, 164, 151, 150,
	147, 165, 155, 156, 157, 158, 159, 160, 161, 162,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 66, 66, 0, 0, 0, 0, 436, 0,
	133, 0, 133, 0, 0, 0, 0, 369, 0, 0,
	560, 0, 133, 429, 265, 0, 371, 0, 0, 0,
	0, 367, 365, 363, 0, 572, 576, 0, 366, 0,
	0, 0, 0, 0, 379, 477, 0, 487, 0, 0,
	0, 487, 0, 0, 0, 0, 589, 379, 0, 0,
	0, 0, 368, 0, 0, 329, 0, 0, 476, 0,
	0, 546, 0, 0, 0, 0, 265, 0, 0, 325,
	364, 78, 551, 16, 51, 66, 88, 57, 52, 0,
	0, 54, 0, 50, 60, 138, 53, 55, 63, 0,
	93, 89, 13, 163, 0, 56, 62, 92, 61, 42,
	40, 0, 0, 164, 75, 0, 0, 165, 155, 156,
	157, 158, 159, 160, 161, 162, 0, 70, 71, 0,
	74, 68, 0, 0, 69, 0, 0, 77, 0, 0,
	0, 0, 595, 0, 0, 326, 0, 72, 73, 87,
	0, 15, 16, 0, 0, 0, 39, 119, 78, 265,
	0, 51, 0, 88, 57, 52, 0, 66, 54, 0,
	50, 60, 43, 53, 55, 63, 0, 93, 89, 13,
	0, 0, 56, 62, 92, 61, 42, 40, 0, 0,
	572, 75, 0, 576, 379, 0, 0, 487, 0, 0,
	0, 379, 0, 379, 70, 71, 0, 74, 68, 0,
	0, 69, 0, 78, 77, 0, 0, 0, 88, 0,
	0, 0, 0, 0, 72, 73, 87, 138, 15, 16,
	0, 0, 93, 89, 13, 0, 0, 0, 0, 92,
	0, 0, 0, 0, 0, 0, 75, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 70,
	71, 0, 74, 68, 0, 0, 69, 0, 78, 77,
	0, 0, 0, 88, 0, 0, 0, 615, 0, 72,
	73, 87, 138, 15, 16, 0, 0, 93, 89, 13,
	0, 525, 0, 0, 92, 0, 0, 0, 0, 0,
	0, 75, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 70, 71, 0, 74, 68, 0,
	0, 69, 0, 78, 77, 0, 0, 0, 88, 0,
	0, 0, 0, 0, 72, 73, 87, 138, 15, 16,
	0, 0, 93, 89, 13, 0, 524, 0, 0, 92,
	0, 0, 0, 0, 0, 0, 75, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 78, 0, 0, 70,
	71, 88, 74, 68, 0, 0, 69, 0, 0, 77,
	138, 0, 0, 0, 0, 93, 89, 13, 0, 72,
	73, 87, 92, 15, 16, 0, 0, 0, 0, 193,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 70, 71, 0, 74, 192, 0, 0, 69,
	0, 78, 77, 307, 0, 0, 88, 0, 0, 0,
	0, 0, 72, 73, 87, 138, 15, 16, 0, 0,
	93, 89, 13, 0, 302, 0, 0, 92, 0, 0,
	0, 0, 0, 0, 75, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 78, 0, 0, 70, 71, 88,
	74, 68, 201, 0, 69, 0, 0, 77, 138, 0,
	0, 0, 0, 93, 89, 13, 0, 72, 73, 87,
	92, 15, 16, 0, 0, 0, 0, 75, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 78, 0, 0,
	70, 71, 88, 74, 68, 0, 0, 69, 0, 0,
	77, 138, 0, 0, 0, 0, 93, 89, 13, 0,
	72, 73, 87, 92, 15, 16, 0, 0, 0, 0,
	75, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	78, 0, 0, 70, 71, 88, 74, 68, 0, 0,
	69, 0, 0, 77, 138, 0, 0, 0, 0, 93,
	89, 13, 0, 72, 73, 87, 92, 15, 16, 0,
	0, 0, 0, 193, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 70, 71, 0, 74,
	192, 0, 0, 69, 0, 0, 77, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 72, 73, 87, 0,
	15, 16, 148, 163, 0, 166, 0, 149, 153, 154,
	0, 0, 152, 164, 151, 150, 147, 165, 155, 156,
	157, 158, 159, 160, 161, 162, 78, 0, 0, 0,
	0, 317, 0, 0, 0, 0, 0, 0, 0, 0,
	138, 418, 369, 0, 0, 93, 89, 13, 0, 0,
	0, 371, 92, 88, 0, 0, 367, 365, 578, 75,
	0, 0, 138, 366, 0, 0, 0, 93, 89, 13,
	370, 0, 70, 71, 92, 74, 68, 0, 0, 69,
	0, 250, 77, 0, 0, 0, 0, 368, 0, 0,
	0, 0, 72, 73, 87, 0, 15, 16, 210, 0,
	0, 0, 0, 0, 249, 364, 0, 15, 16, 0,
	242, 0, 0, 0, 0, 0, 87, 0, 15, 16,
	243, 148, 163, 0, 166, 0, 149, 153, 154, 0,
	0, 152, 164, 151, 150, 147, 165, 155, 156, 157,
	158, 159, 160, 161, 162, 148, 163, 0, 166, 0,
	149, 153, 154, 0, 685, 152, 164, 151, 150, 147,
	165, 155, 156, 157, 158, 159, 160, 161, 162, 0,
	88, 0, 0, 0, 88, 0, 0, 0, 684, 138,
	0, 0, 0, 138, 93, 89, 13, 0, 93, 89,
	13, 92, 0, 0, 0, 92, 317, 0, 250, 0,
	0, 0, 250, 0, 0, 138, 0, 0, 0, 0,
	93, 89, 13, 0, 0, 210, 0, 92, 0, 210,
	0, 513, 0, 0, 250, 249, 0, 0, 0, 88,
	0, 0, 0, 87, 0, 15, 16, 87, 138, 15,
	16, 210, 0, 93, 89, 13, 0, 249, 0, 0,
	92, 88, 0, 0, 0, 369, 0, 428, 496, 87,
	138, 15, 16, 0, 371, 93, 89, 13, 0, 367,
	365, 363, 92, 0, 210, 0, 366, 0, 0, 204,
	434, 0, 0, 370, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 0, 15, 16, 210, 0, 0, 0,
	368, 0, 209, 0, 0, 0, 0, 0, 0, 0,
	369, 0, 0, 0, 87, 0, 15, 16, 364, 371,
	369, 16, 0, 0, 367, 365, 363, 0, 0, 371,
	0, 366, 0, 0, 367, 365, 363, 0, 370, 0,
	0, 366, 0, 0, 0, 0, 0, 0, 370, 0,
	0, 0, 0, 0, 0, 368, 0, 0, 144, 0,
	0, 0, 0, 0, 0, 368, 0, 372, 0, 0,
	0, 0, 0, 364, 0, 0, 16, 0, 0, 0,
	0, 0, 0, 364, 0, 0, 16, 148, 163, 0,
	166, 146, 149, 153, 154, 0, 145, 152, 164, 151,
	150, 147, 165, 155, 156, 157, 158, 159, 160, 161,
	162, 148, 163, 0, 166, 0, 149, 153, 154, 0,
	0, 152, 164, 151, 150, 147, 165, 155, 156, 157,
	158, 159, 160, 161, 162, 148, 163, 0, 0, 0,
	149, 153, 154, 0, 0, 152, 164, 151, 150, 147,
	165, 155, 156, 157, 158, 159, 160, 161, 162, 148,
	163, 0, 0, 0, 149, 153, 154, 0, 0, 152,
	164, 151, 150, 0, 165, 155, 156, 157, 158, 159,
	160, 161, 162, 163, 0, 0, 0, 149, 153, 154,
	0, 0, 152, 164, 151, 150, 0, 165, 155, 156,
	157, 158, 159, 160, 161, 162,
}
var yyPact = [...]int{

	-1000, -1000, 565, -1000, 564, -1000, 167, -1000, 564, -1000,
	578, 582, 339, -1000, -1000, -1000, 654, -1000, 564, -1000,
	-1000, -1000, 574, 1284, 334, 89, -1000, 257, -1000, 564,
	-1000, -1000, 426, 327, -1000, 323, -1000, -1000, -1000, -1000,
	348, 332, 324, 314, -1000, -1000, -1000, -1000, -1000, 179,
	-1000, 167, 167, 235, 235, 167, 1633, -1000, 2103, 138,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 183, 1633, 1633,
	1633, 1633, 1633, 1633, 1633, 1633, 161, 1676, -1000, -1000,
	-1000, 483, 262, -1000, -1000, -1000, 194, 1590, 1992, 48,
	-1000, -1000, 262, 262, -1000, -1000, 148, 564, -1000, 648,
	647, 74, -1000, 564, -1000, -1000, 184, -1000, 568, 7,
	7, 7, 31, -1000, -1000, -1000, 292, 1794, -1000, -1000,
	-1000, 290, 848, -1000, 280, 1915, -1000, 150, 47, 481,
	-1000, -1000, -1000, -1000, -1000, -1000, 183, -1000, 474, -1000,
	-1000, -1000, -18, 2127, 1633, -1000, -1000, 1633, 1633, 1633,
	1633, 1633, 1633, 1633, 1633, 1633, 1633, 1633, 1633, 1633,
	1633, 1633, 1633, 1633, 1633, 1633, 1633, 1633, 1633, 1633,
	1547, 1633, 549, 1633, 1492, 271, 1633, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 443, 2127, -1000, -1000,
	-1000, -1000, 1676, 1772, 1633, -1000, -1000, -1000, 1207, -1000,
	58, 51, 2127, -1000, 1915, -1000, -1000, -1000, -1000, 1915,
	1915, 233, 1915, 42, 157, 320, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 564, -1000, -1000, -1000, 643,
	2061, -1000, 2051, 2061, -1000, 150, 467, 167, 319, -1000,
	-1000, 245, 1633, 167, -1000, -1000, -1000, -1000, -1000, 1915,
	622, 317, -1000, 191, 1633, 316, -1000, -1000, -1000, -1000,
	1207, 440, -2, -1000, -1000, 47, -1000, -1000, 1915, 47,
	1207, 47, 2127, 2175, 2198, 1198, 1198, 1198, 1198, 1198,
	1198, 903, 903, 903, 903, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2151, -18, -18, 2127, -1000, 511, 315, -1000,
	-1000, 119, 1633, -1000, 309, -1000, -1000, -1000, 32, -1000,
	-1000, 989, 1718, 178, 931, 147, -1000, 1970, 1062, 931,
	250, -1000, -1000, -1000, -1000, -1000, -1000, 1915, 1915, -1000,
	432, -1000, 167, 36, 307, -1000, -1000, 776, 629, 563,
	473, -1000, -1000, 210, 306, -1000, -1000, 465, -1000, 567,
	431, 229, -1000, -1000, 564, -1000, -1000, 300, 295, -1000,
	-1000, -1000, -1000, -1000, 126, 43, 135, 132, 2061, 1138,
	621, 458, 146, 219, 293, 284, 167, 24, -1000, 1996,
	429, 167, 1633, -18, -1000, 425, 1915, 423, 167, 1633,
	-18, 421, 167, 231, 1911, 47, -1000, -1000, -1000, -1000,
	420, -1000, 419, -1000, -1000, 1633, 1449, 1394, 2127, 546,
	1633, 255, 511, 416, -7, 1676, 414, 413, -1000, 1633,
	129, -8, -1000, -1000, 169, 2127, -1000, -1000, 1937, -1000,
	-1000, -1000, -1000, -1000, 1915, 411, -1000, 107, -1000, 1207,
	1207, -1000, -1000, -1000, -1000, 1915, 105, 248, 629, 167,
	-1000, -1000, 408, 567, 210, 629, 567, 167, 103, 38,
	-1000, 47, 407, -1000, -1000, -1000, -1000, -1000, -1000, 2061,
	22, 2061, 167, 1783, -1000, -1000, 340, 2061, -1000, -1000,
	2061, 167, 281, -1000, 177, -1000, 632, -1000, 146, -1000,
	-1000, 405, -15, 167, 167, 629, 2061, -1000, -1000, -18,
	-1000, -1000, 277, -1000, -1000, 848, -18, -1000, -1000, -1000,
	453, -1000, -1000, 47, -1000, -1000, -1000, -1000, -1000, -1000,
	1911, 1911, 1207, 274, 1633, 1633, -1000, -1000, -1000, -1000,
	-1000, 1676, 149, -1000, -1000, 403, -1000, -1000, -1000, 37,
	-1000, 931, -1000, 1339, 931, 931, 400, -1000, -1000, -1000,
	208, -1000, -1000, -1000, -1000, -1000, 629, 394, -1000, 393,
	-1000, -1000, -1000, 392, -1000, -1000, -1000, 2061, 15, 92,
	273, -1000, 2061, 90, 272, -1000, 452, -1000, -1000, -1000,
	390, -1000, -1000, 389, -1000, 494, -1000, 270, 856, 265,
	-1000, -1000, 629, 386, 167, 191, 47, 381, -1000, 198,
	1633, 2127, 2127, 125, 1207, 75, -1000, -1000, -1000, -1000,
	1633, -1000, -1000, -1000, 2127, -1000, 85, 78, -1000, -1000,
	-1000, 629, 629, 1911, -1000, 2061, -1000, 167, 629, -1000,
	1783, 167, -1000, 856, 177, -1000, -1000, -1000, 167, -1000,
	167, -1000, -1000, -1000, 380, -1000, -1000, -1000, -1000, 264,
	-1000, 1633, 1633, 1676, 593, 14, 931, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 377, -1000, 376, 372,
	344, 1911, 1861, 1837, -1000, -1000, 166, -1000, 66, 856,
	-1000, -1000, 856, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1633, 511, -1000,
}
var yyPgo = [...]int{

	0, 97, 834, 692, 25, 145, 30, 766, 31, 833,
	832, 10, 50, 53, 400, 32, 38, 2, 831, 829,
	828, 827, 826, 825, 5, 824, 653, 27, 37, 823,
	376, 40, 42, 23, 47, 11, 819, 596, 15, 612,
	818, 610, 815, 812, 6, 810, 706, 804, 35, 12,
	803, 46, 3, 7, 24, 802, 452, 798, 28, 51,
	797, 796, 57, 795, 793, 792, 55, 17, 791, 788,
	52, 787, 19, 786, 605, 48, 20, 784, 773, 770,
	769, 33, 765, 764, 762, 16, 8, 761, 14, 760,
	0, 45, 54, 22, 4, 21, 13, 9, 758, 1,
	43, 18, 757, 756, 755, 753, 128, 62, 752, 34,
	26, 751, 750, 749, 747, 746, 743, 742, 741, 740,
	739, 737, 732, 731, 64, 29, 730, 729, 727, 726,
	724, 723, 721, 39, 719, 36, 717, 713, 711, 710,
	709, 708, 693, 691, 690, 689, 683, 682, 678, 673,
	670, 41, 669, 663, 661,
}
var yyR1 = [...]int{

	0, 112, 114, 114, 113, 123, 116, 126, 117, 127,
	118, 128, 119, 129, 120, 130, 121, 131, 122, 115,
	115, 132, 132, 132, 133, 133, 134, 134, 2, 2,
	2, 124, 136, 136, 137, 125, 50, 50, 50, 50,
	50, 74, 74, 74, 74, 74, 74, 74, 74, 74,
	74, 139, 70, 70, 70, 75, 75, 76, 76, 76,
	36, 48, 44, 44, 44, 44, 44, 44, 9, 9,
	9, 9, 140, 11, 141, 10, 62, 62, 142, 53,
	42, 42, 42, 22, 22, 22, 21, 143, 23, 24,
	24, 144, 145, 146, 25, 147, 63, 64, 64, 65,
	65, 148, 149, 45, 150, 43, 14, 14, 14, 14,
	14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
	14, 14, 14, 14, 14, 14, 14, 46, 46, 46,
	46, 46, 46, 46, 46, 46, 41, 41, 41, 40,
	40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
	40, 40, 40, 49, 28, 16, 16, 15, 15, 39,
	39, 17, 17, 31, 1, 1, 33, 34, 37, 37,
	3, 3, 3, 91, 91, 30, 29, 81, 81, 7,
	7, 7, 7, 7, 7, 32, 32, 32, 32, 87,
	87, 87, 87, 87, 79, 79, 80, 89, 89, 89,
	89, 89, 12, 12, 88, 88, 88, 88, 88, 88,
	88, 85, 86, 84, 84, 83, 83, 47, 18, 18,
	19, 19, 90, 51, 51, 52, 52, 52, 152, 20,
	20, 60, 60, 71, 71, 77, 77, 78, 78, 73,
	73, 69, 69, 72, 72, 72, 72, 72, 72, 4,
	4, 13, 27, 27, 27, 82, 8, 8, 8, 8,
	68, 68, 67, 67, 6, 6, 6, 6, 6, 26,
	26, 26, 26, 26, 153, 26, 26, 26, 26, 26,
	26, 26, 26, 66, 66, 55, 55, 54, 54, 56,
	56, 59, 59, 57, 57, 57, 57, 58, 58, 135,
	135, 151, 151, 35, 35, 61, 61, 38, 38, 101,
	101, 105, 105, 103, 103, 5, 5, 154, 154, 154,
	154, 154, 154, 92, 108, 106, 106, 106, 111, 111,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 110, 109, 95, 95, 97, 96, 96, 99, 99,
	98, 98, 94, 94, 94, 93, 93, 138, 138, 100,
	100, 104, 104, 102, 102,
}
var yyR2 = [...]int{

	0, 4, 0, 3, 7, 0, 3, 0, 3, 0,
	3, 0, 3, 0, 3, 0, 3, 0, 3, 0,
	3, 2, 5, 3, 3, 2, 1, 3, 1, 2,
	2, 4, 0, 1, 0, 4, 0, 1, 1, 1,
	1, 2, 5, 3, 2, 5, 7, 3, 2, 5,
	3, 1, 2, 4, 3, 4, 3, 1, 2, 1,
	1, 2, 1, 3, 3, 3, 2, 2, 3, 5,
	5, 2, 0, 4, 0, 3, 0, 2, 0, 4,
	4, 4, 2, 5, 1, 1, 2, 0, 3, 1,
	3, 0, 0, 0, 8, 0, 5, 0, 2, 0,
	2, 0, 0, 7, 0, 5, 1, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 1, 2, 2,
	2, 2, 2, 2, 2, 2, 3, 5, 6, 1,
	1, 3, 5, 5, 4, 6, 8, 1, 5, 5,
	5, 7, 1, 0, 3, 1, 4, 1, 4, 1,
	3, 1, 1, 1, 1, 1, 1, 1, 0, 1,
	1, 1, 1, 4, 4, 1, 1, 1, 2, 1,
	1, 1, 1, 1, 3, 1, 1, 1, 2, 1,
	1, 1, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 4, 4, 2, 3, 5, 1,
	1, 2, 3, 5, 3, 5, 3, 3, 5, 8,
	5, 8, 5, 0, 3, 0, 1, 3, 1, 4,
	2, 0, 3, 1, 3, 1, 3, 1, 3, 1,
	3, 1, 3, 3, 2, 4, 3, 5, 5, 1,
	3, 1, 2, 1, 3, 4, 1, 2, 2, 1,
	1, 3, 0, 2, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 4, 1, 2, 2, 2,
	2, 2, 2, 1, 3, 1, 3, 1, 3, 1,
	3, 1, 3, 1, 1, 3, 3, 0, 2, 0,
	1, 0, 1, 0, 1, 0, 1, 0, 1, 0,
	1, 0, 1, 0, 1, 0, 1, 4, 4, 5,
	6, 4, 4, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 4, 5, 4, 4, 2, 2, 4,
	3, 3, 5, 3, 4, 3, 5, 1, 0, 1,
	3, 1, 1, 2, 1, 1, 5, 0, 2, 1,
	3, 1, 3, 1, 3,
}
var yyChk = [...]int{

	-1000, -112, -113, -116, -123, -114, 26, -117, -126, -124,
	26, -115, -3, 25, -91, 74, 75, -118, -127, -124,
	-125, -137, 25, -60, -132, 22, 63, 4, -119, -128,
	-124, -125, -138, -136, 25, -50, -74, -47, -26, 2,
	33, -139, 32, 18, -44, -23, -45, -43, -25, -29,
	16, 7, 11, 19, 14, 20, 28, 10, -14, -56,
	17, 31, 29, 21, -33, -46, -3, -39, 54, 57,
	50, 51, 70, 71, 53, 37, -40, 60, 4, -30,
	-41, -79, -80, -20, -90, -88, -152, 72, 9, 24,
	-84, -83, 30, 23, 63, -133, 60, -2, 4, -3,
	64, 64, -120, -129, -124, -125, 65, -154, 22, 33,
	10, 32, 18, 63, 63, -70, 60, -54, -34, -3,
	-75, 60, -54, -48, 60, -36, -3, -18, 60, -3,
	67, -37, -33, -3, -37, -41, -39, -3, 18, -41,
	-33, -61, -56, -14, 5, 43, 38, 48, 34, 39,
	47, 46, 44, 40, 41, 50, 51, 52, 53, 54,
	55, 56, 57, 35, 45, 49, 37, 66, 6, 76,
	-143, -148, -150, -144, 60, 64, 72, -46, -46, -46,
	-46, -46, -46, -46, -46, 68, -17, -14, -32, -86,
	-90, -88, 54, 37, 60, -1, 36, 68, -1, 2,
	-35, 12, -14, -87, 37, -90, -88, -85, -12, 60,
	54, -30, 72, -1, -1, -134, 61, -133, -124, -125,
	4, 4, 25, 74, -121, -130, -124, -125, 65, 25,
	-92, -91, -92, -108, -92, -19, -92, 60, -71, 61,
	-70, -7, 66, 76, -86, -90, -88, -85, -12, 60,
	37, -75, 61, -7, 66, -78, 61, -48, -7, -51,
	68, -67, -68, -8, -31, -3, -81, -7, 12, 60,
	-153, 60, -14, -14, -14, -14, -14, -14, -14, -14,
	-14, -14, -14, -14, -14, -14, -14, -14, -14, -14,
	-14, -14, -14, -56, -56, -14, -21, -22, -38, -42,
	-44, -56, 27, -24, -38, 36, -24, 61, -59, -17,
	-3, 60, -14, -35, -49, 61, -32, 9, -14, -49,
	-66, -6, -11, -74, -26, 2, 68, 73, 73, -7,
	-7, -7, 64, -7, -73, 69, -72, -55, -13, 60,
	54, -33, -4, 25, -69, 69, -27, -33, -4, 60,
	-135, 63, -125, -122, -131, -124, -125, 4, -106, -107,
	-110, -109, -91, 25, 72, 24, 30, 23, 54, 9,
	37, 18, 66, -106, -106, -51, 60, -100, -95, -3,
	-135, 63, 66, -56, -34, -7, 9, -135, 63, 66,
	-56, -135, 63, -66, 61, 76, -151, -31, -81, -7,
	-67, -6, -67, -53, 36, 63, 66, 6, -14, -149,
	63, -62, -145, -151, 12, 76, -17, 32, 73, 67,
	-58, -57, -28, -16, -15, -14, 68, 68, 37, -7,
	-90, -88, -85, -12, 60, -151, 76, -58, 69, 63,
	-140, -7, -7, 61, -3, 73, -135, 63, -7, 76,
	-5, 4, -13, 54, 25, -13, 60, 64, -135, 63,
	-82, 60, -4, 61, -133, -124, -125, 63, 63, 73,
	4, 72, 68, 68, -106, -111, 60, 37, -107, -109,
	9, 60, -93, -94, 60, 4, 51, -3, 66, 63,
	63, -101, -100, 61, 76, -106, 12, 61, -70, -56,
	61, 61, -77, -76, -75, -54, -56, 61, -48, 69,
	-3, -52, -89, 60, -86, -90, -88, -85, -12, -8,
	61, 61, -142, -38, 27, 27, 36, -38, -10, 69,
	-9, 8, 13, -53, 61, -151, -17, 61, 61, -35,
	69, 76, -151, 67, -49, -49, -7, 61, 69, -6,
	-66, -7, 69, -72, -5, -33, 61, -13, -5, -13,
	-3, 69, -27, -67, 61, -125, -106, 73, -106, -105,
	-104, -97, -3, -103, -102, -96, -3, -106, 25, -91,
	-110, -106, -106, -101, 63, -94, 4, -93, 61, -3,
	-95, -5, -106, -135, 63, -7, 60, -67, -52, -66,
	63, -14, -14, -62, -141, -59, 67, -146, 61, 73,
	67, -28, -16, -15, -14, 68, -58, -58, 61, 69,
	-5, 61, 61, 61, -106, 73, 69, 63, -106, 69,
	63, 60, 61, 61, 50, 63, -99, -98, 60, -106,
	60, -5, 61, -76, -67, 61, 69, -38, 69, -66,
	67, 66, 6, 76, -64, -35, -49, 69, 69, -5,
	-5, -52, -106, -97, -5, -96, -101, -99, -94, -101,
	-101, 61, -14, -14, -65, -63, 15, 73, -58, 61,
	61, 61, 61, -52, 67, 67, 21, -11, 69, -99,
	-99, -147, -24, -53,
}
var yyDef = [...]int{

	5, -2, 2, 7, 0, 19, 0, 9, 0, 34,
	0, 231, 0, 170, 171, 172, 0, 11, 0, 34,
	6, 357, 32, -2, 0, 0, 3, 0, 13, 0,
	34, 8, 0, 0, 33, 0, 37, 38, 39, 40,
	0, 0, 0, 0, 269, 270, 271, 272, 273, 0,
	276, 168, 168, 0, 0, 0, 305, 51, -2, 0,
	87, 101, 104, 91, 176, 106, -2, 127, 0, 0,
	0, 0, 0, 0, 0, 0, 159, 0, 139, 140,
	147, 0, 0, 152, -2, -2, 0, 303, 0, 0,
	209, 210, 0, 0, 20, 21, 0, 34, 28, 0,
	0, 0, 15, 0, 34, 10, 0, 358, 0, 0,
	0, 0, 0, 31, 232, 41, 0, 0, 287, 167,
	44, 0, 0, 48, 0, 0, 60, 223, 262, 0,
	274, 277, 169, 166, 278, -2, 0, 175, 0, -2,
	281, 282, 306, 289, 0, 66, 67, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	307, 307, 0, 307, 0, 0, 303, 128, 129, 130,
	131, 132, 133, 134, 135, 153, 0, 161, 162, 185,
	-2, -2, 0, 0, 0, 153, 164, 165, -2, 230,
	0, 0, 304, 206, 0, 189, 190, 191, 192, 0,
	0, 202, 0, 0, 0, 299, 23, 26, 34, 25,
	29, 30, 173, 174, 17, 0, 34, 12, 35, 0,
	0, 323, 0, 0, 324, 223, 0, 0, 299, 43,
	233, 52, 0, 0, 179, 180, 181, 182, 183, 0,
	0, 299, 47, 0, 0, 299, 50, 237, 61, 217,
	-2, 0, 301, 260, 256, 175, 259, 163, 177, 262,
	-2, 262, 63, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 125, 126, 64, 65, 290, 88, 0, 84, 85,
	308, 0, 0, 102, 89, 76, 92, 136, 301, 291,
	141, 0, 304, 0, 297, 160, 188, 0, 301, 297,
	0, 283, 265, 266, 267, 268, 72, 0, 0, 207,
	0, 211, 0, 0, 299, 214, 239, 0, 315, 0,
	0, 285, 251, -2, 299, 216, 241, 0, 253, 0,
	0, 300, 24, 4, 0, 34, 14, 0, 0, 325,
	326, 327, 330, 331, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 309, 0, 359, 0,
	0, 300, 0, 54, 288, 0, 0, 0, 300, 0,
	56, 0, 300, 0, 225, 302, 263, 257, 258, 178,
	0, 275, 0, 86, 78, 307, 0, 0, 82, 0,
	307, 0, 0, 0, 301, 302, 0, 0, 144, 303,
	0, 301, 293, 294, 0, -2, 153, 153, 0, 212,
	-2, -2, -2, -2, 0, 0, 302, 0, 229, -2,
	-2, 204, 205, 193, 203, 0, 0, 300, 315, 0,
	244, 316, 0, 0, 249, 315, 0, 0, 0, 300,
	252, 262, 0, 22, 27, 34, 16, 317, 318, 0,
	0, 0, 311, 313, 337, 338, 0, 0, 328, 329,
	0, 309, 0, 355, 0, 352, 0, 354, 0, 321,
	322, 0, 310, 0, 0, 315, 0, 42, 234, 53,
	184, 45, 299, 235, 57, 59, 55, 49, 238, 224,
	175, 222, 226, 262, 197, 198, 199, 200, 201, 261,
	225, 225, -2, 0, 0, 0, 76, 90, 77, 105,
	74, 0, 0, 93, 137, 0, 292, 142, 143, 0,
	150, 302, 298, 0, 297, 297, 0, 148, 149, 284,
	0, 208, 213, 240, 243, 286, 315, 0, 246, 0,
	250, 215, 242, 0, 254, 18, 332, 0, 0, 0,
	312, 361, 0, 0, 314, 363, 0, 347, -2, -2,
	0, 340, 341, 0, 319, 0, 353, 0, 348, 0,
	360, 343, 315, 0, 300, 58, 262, 0, 218, 0,
	307, 80, 81, 0, -2, 0, 71, 97, 138, 145,
	303, 295, 296, 154, 157, 153, 0, 0, -2, 73,
	245, 315, 315, 225, 333, 0, 335, 0, 315, 336,
	0, 309, 339, 348, 0, 320, 220, 349, 309, 351,
	309, 344, 46, 236, 0, 227, 79, 83, 103, 75,
	68, 0, 0, 0, 99, 0, 297, -2, 151, 247,
	248, 255, 334, 362, 345, 364, 0, 342, 0, 0,
	0, 225, 0, 0, 94, 98, 0, 146, 0, 348,
	356, 350, 348, 219, 69, 70, 95, 100, 158, 346,
	221, 307, 0, 96,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 70, 3, 3, 65, 56, 57, 3,
	60, 61, 54, 50, 76, 51, 64, 55, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 67, 63,
	3, 66, 3, 74, 75, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 72, 3, 73, 53, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 68, 52, 69, 71,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 58, 59,
	62,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{
	{350, 76, "unexpected comma during import block"},
	{99, 63, "missing import path; require quoted string"},
	{412, 63, "missing { after if clause"},
	{409, 63, "missing { after switch clause"},
	{297, 63, "missing { after for clause"},
	{523, 36, "missing { after for clause"},
	{23, 68, "unexpected semicolon or newline before {"},
	{125, 63, "unexpected semicolon or newline in type declaration"},
	{88, 69, "unexpected } in channel type"},
	{88, 61, "unexpected ) in channel type"},
	{88, 76, "unexpected comma in channel type"},
	{439, 15, "unexpected semicolon or newline before else"},
	{347, 76, "name list not allowed in interface type"},
	{297, 33, "var declaration not allowed in for initializer"},
	{35, 68, "unexpected { at end of statement"},
	{393, 68, "unexpected { at end of statement"},
	{136, 63, "argument to go/defer must be function call"},
	{420, 63, "need trailing comma before newline in composite literal"},
	{437, 63, "need trailing comma before newline in composite literal"},
	{138, 25, "nested func not allowed"},
	{676, 63, "else must be followed by if or statement block"},
}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lookahead func() int
}

func (p *yyParserImpl) Lookahead() int {
	return p.lookahead()
}

func yyNewParser() yyParser {
	p := &yyParserImpl{
		lookahead: func() int { return -1 },
	}
	return p
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	var yyDollar []yySymType
	yyS := make([]yySymType, yyMaxDepth)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yychar := -1
	yytoken := -1 // yychar translated into internal numbering
	yyrcvr.lookahead = func() int { return yychar }
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yychar = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yychar < 0 {
		yychar, yytoken = yylex1(yylex, &yylval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yychar = -1
		yytoken = -1
		yyVAL = yylval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yychar < 0 {
			yychar, yytoken = yylex1(yylex, &yylval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yychar = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:189
		{
			xtop = concat(xtop, yyDollar[4].list)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:195
		{
			prevlineno = lineno
			Yyerror("package statement must be first")
			errorexit()
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:201
		{
			mkpackage(yyDollar[2].sym.Name)
		}
	case 4:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line go.y:218
		{
		}
	case 5:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:222
		{
			importpkg = Basepkg
			if (Debug['A']) > 0 {
				cannedimports("base.builtin", "package base\n\n$$\n\n")
			} else {
				cannedimports("base.builtin", baseimport)
			}

			curio.importsafe = true
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:234
		{
			importpkg = nil
		}
	case 7:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:239
		{
			importpkg = Gcpkg
			if (Debug['A']) > 0 {
				cannedimports("gc.builtin", "package gc\n\n$$\n\n")
			} else {
				cannedimports("gc.builtin", gcimport)
			}

			curio.importsafe = true
		}
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:251
		{
			importpkg = nil
		}
	case 9:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:256
		{
			importpkg = Ifacepkg
			if (Debug['A']) > 0 {
				cannedimports("iface.builtin", "package iface\n\n$$\n\n")
			} else {
				cannedimports("iface.builtin", ifaceimport)
			}

			curio.importsafe = true
		}
	case 10:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:268
		{
			importpkg = nil
		}
	case 11:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:273
		{
			importpkg = Writebarrierpkg
			if (Debug['A']) > 0 {
				cannedimports("writebarrier.builtin", "package writebarrier\n\n$$\n\n")
			} else {
				cannedimports("writebarrier.builtin", writebarrierimport)
			}

			curio.importsafe = true
		}
	case 12:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:285
		{
			importpkg = nil
		}
	case 13:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:290
		{
			importpkg = Racepkg
			if (Debug['A']) > 0 {
				cannedimports("race.builtin", "package race\n\n$$\n\n")
			} else {
				cannedimports("race.builtin", raceimport)
			}

			curio.importsafe = true
		}
	case 14:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:302
		{
			importpkg = nil
		}
	case 15:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:307
		{
			importpkg = Printpkg
			if (Debug['A']) > 0 {
				cannedimports("print.builtin", "package print\n\n$$\n\n")
			} else {
				cannedimports("print.builtin", printimport)
			}

			curio.importsafe = true
		}
	case 16:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:319
		{
			importpkg = nil
		}
	case 17:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:324
		{
			importpkg = Runtimepkg
			if (Debug['A']) > 0 {
				cannedimports("runtime.builtin", "package runtime\n\n$$\n\n")
			} else {
				cannedimports("runtime.builtin", runtimeimport)
			}

			curio.importsafe = true
		}
	case 18:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:336
		{
			importpkg = nil
		}
	case 24:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:351
		{
			ipkg := importpkg
			my := importmyname
			importpkg = nil
			importmyname = nil

			if my == nil {
				my = Lookup(ipkg.Name)
			}

			pack := Nod(OPACK, nil, nil)
			pack.Sym = my
			pack.Name.Pkg = ipkg
			pack.Lineno = int32(yyDollar[1].i)

			if strings.HasPrefix(my.Name, ".") {
				importdot(ipkg, pack)
				break
			}
			if my.Name == "init" {
				Yyerror("cannot import package as init - init must be a func")
				break
			}
			if my.Name == "_" {
				break
			}
			if my.Def != nil {
				lineno = int32(yyDollar[1].i)
				redeclare(my, "as imported package name")
			}
			my.Def = pack
			my.Lastlineno = int32(yyDollar[1].i)
			my.Block = 1 // at top level
		}
	case 25:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:386
		{
			// When an invalid import path is passed to importfile,
			// it calls Yyerror and then sets up a fake import with
			// no package statement. This allows us to test more
			// than one invalid import statement in a single file.
			if nerrors == 0 {
				Fatal("phase error in import")
			}
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:402
		{
			// import with original name
			yyVAL.i = parserline()
			importmyname = nil
			importfile(&yyDollar[1].val, yyVAL.i)
		}
	case 29:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:409
		{
			// import with given name
			yyVAL.i = parserline()
			importmyname = yyDollar[1].sym
			importfile(&yyDollar[2].val, yyVAL.i)
		}
	case 30:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:416
		{
			// import into my name space
			yyVAL.i = parserline()
			importmyname = Lookup(".")
			importfile(&yyDollar[2].val, yyVAL.i)
		}
	case 31:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:425
		{
			if importpkg.Name == "" {
				importpkg.Name = yyDollar[2].sym.Name
				numImport[yyDollar[2].sym.Name]++
			} else if importpkg.Name != yyDollar[2].sym.Name {
				Yyerror("conflicting names %s and %s for package %q", importpkg.Name, yyDollar[2].sym.Name, importpkg.Path)
			}
			importpkg.Direct = 1
			importpkg.Safe = curio.importsafe

			if safemode != 0 && !curio.importsafe {
				Yyerror("cannot import unsafe package %q", importpkg.Path)
			}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:442
		{
			if yyDollar[1].sym.Name == "safe" {
				curio.importsafe = true
			}
		}
	case 34:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:449
		{
			defercheckwidth()
		}
	case 35:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:453
		{
			resumecheckwidth()
			unimportfile()
		}
	case 36:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:462
		{
			Yyerror("empty top-level declaration")
			yyVAL.list = nil
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:468
		{
			yyVAL.list = list1(yyDollar[1].node)
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:472
		{
			Yyerror("non-declaration statement outside function body")
			yyVAL.list = nil
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:477
		{
			yyVAL.list = nil
		}
	case 41:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:483
		{
			yyVAL.list = yyDollar[2].list
		}
	case 42:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:487
		{
			yyVAL.list = yyDollar[3].list
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:491
		{
			yyVAL.list = nil
		}
	case 44:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:495
		{
			yyVAL.list = yyDollar[2].list
			iota_ = -100000
			lastconst = nil
		}
	case 45:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:501
		{
			yyVAL.list = yyDollar[3].list
			iota_ = -100000
			lastconst = nil
		}
	case 46:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line go.y:507
		{
			yyVAL.list = concat(yyDollar[3].list, yyDollar[5].list)
			iota_ = -100000
			lastconst = nil
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:513
		{
			yyVAL.list = nil
			iota_ = -100000
		}
	case 48:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:518
		{
			yyVAL.list = list1(yyDollar[2].node)
		}
	case 49:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:522
		{
			yyVAL.list = yyDollar[3].list
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:526
		{
			yyVAL.list = nil
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:532
		{
			iota_ = 0
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:538
		{
			yyVAL.list = variter(yyDollar[1].list, yyDollar[2].node, nil)
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:542
		{
			yyVAL.list = variter(yyDollar[1].list, yyDollar[2].node, yyDollar[4].list)
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:546
		{
			yyVAL.list = variter(yyDollar[1].list, nil, yyDollar[3].list)
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:552
		{
			yyVAL.list = constiter(yyDollar[1].list, yyDollar[2].node, yyDollar[4].list)
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:556
		{
			yyVAL.list = constiter(yyDollar[1].list, nil, yyDollar[3].list)
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:563
		{
			yyVAL.list = constiter(yyDollar[1].list, yyDollar[2].node, nil)
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:567
		{
			yyVAL.list = constiter(yyDollar[1].list, nil, nil)
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:573
		{
			// different from dclname because the name
			// becomes visible right here, not at the end
			// of the declaration.
			yyVAL.node = typedcl0(yyDollar[1].sym)
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:582
		{
			yyVAL.node = typedcl1(yyDollar[1].node, yyDollar[2].node, true)
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:588
		{
			yyVAL.node = yyDollar[1].node

			// These nodes do not carry line numbers.
			// Since a bare name used as an expression is an error,
			// introduce a wrapper node to give the correct line.
			switch yyVAL.node.Op {
			case ONAME, ONONAME, OTYPE, OPACK, OLITERAL:
				yyVAL.node = Nod(OPAREN, yyVAL.node, nil)
				yyVAL.node.Implicit = true
				break
			}
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:602
		{
			yyVAL.node = Nod(OASOP, yyDollar[1].node, yyDollar[3].node)
			yyVAL.node.Etype = uint8(yyDollar[2].i) // rathole to pass opcode
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:607
		{
			if yyDollar[1].list.Next == nil && yyDollar[3].list.Next == nil {
				// simple
				yyVAL.node = Nod(OAS, yyDollar[1].list.N, yyDollar[3].list.N)
				break
			}
			// multiple
			yyVAL.node = Nod(OAS2, nil, nil)
			yyVAL.node.List = yyDollar[1].list
			yyVAL.node.Rlist = yyDollar[3].list
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:619
		{
			if yyDollar[3].list.N.Op == OTYPESW {
				yyVAL.node = Nod(OTYPESW, nil, yyDollar[3].list.N.Right)
				if yyDollar[3].list.Next != nil {
					Yyerror("expr.(type) must be alone in list")
				}
				if yyDollar[1].list.Next != nil {
					Yyerror("argument count mismatch: %d = %d", count(yyDollar[1].list), 1)
				} else if (yyDollar[1].list.N.Op != ONAME && yyDollar[1].list.N.Op != OTYPE && yyDollar[1].list.N.Op != ONONAME) || isblank(yyDollar[1].list.N) {
					Yyerror("invalid variable name %s in type switch", yyDollar[1].list.N)
				} else {
					yyVAL.node.Left = dclname(yyDollar[1].list.N.Sym)
				} // it's a colas, so must not re-use an oldname.
				break
			}
			yyVAL.node = colas(yyDollar[1].list, yyDollar[3].list, int32(yyDollar[2].i))
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:637
		{
			yyVAL.node = Nod(OASOP, yyDollar[1].node, Nodintconst(1))
			yyVAL.node.Implicit = true
			yyVAL.node.Etype = OADD
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:643
		{
			yyVAL.node = Nod(OASOP, yyDollar[1].node, Nodintconst(1))
			yyVAL.node.Implicit = true
			yyVAL.node.Etype = OSUB
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:651
		{
			var n, nn *Node

			// will be converted to OCASE
			// right will point to next case
			// done in casebody()
			markdcl()
			yyVAL.node = Nod(OXCASE, nil, nil)
			yyVAL.node.List = yyDollar[2].list
			if typesw != nil && typesw.Right != nil {
				n = typesw.Right.Left
				if n != nil {
					// type switch - declare variable
					nn = newname(n.Sym)
					declare(nn, dclcontext)
					yyVAL.node.Rlist = list1(nn)

					// keep track of the instances for reporting unused
					nn.Name.Defn = typesw.Right
				}
			}
		}
	case 69:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:674
		{
			var n *Node

			// will be converted to OCASE
			// right will point to next case
			// done in casebody()
			markdcl()
			yyVAL.node = Nod(OXCASE, nil, nil)
			if yyDollar[2].list.Next == nil {
				n = Nod(OAS, yyDollar[2].list.N, yyDollar[4].node)
			} else {
				n = Nod(OAS2, nil, nil)
				n.List = yyDollar[2].list
				n.Rlist = list1(yyDollar[4].node)
			}
			yyVAL.node.List = list1(n)
		}
	case 70:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:692
		{
			// will be converted to OCASE
			// right will point to next case
			// done in casebody()
			markdcl()
			yyVAL.node = Nod(OXCASE, nil, nil)
			yyVAL.node.List = list1(colas(yyDollar[2].list, list1(yyDollar[4].node), int32(yyDollar[3].i)))
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:701
		{
			var n, nn *Node

			markdcl()
			yyVAL.node = Nod(OXCASE, nil, nil)
			if typesw != nil && typesw.Right != nil {
				n = typesw.Right.Left
				if n != nil {
					// type switch - declare variable
					nn = newname(n.Sym)
					declare(nn, dclcontext)
					yyVAL.node.Rlist = list1(nn)

					// keep track of the instances for reporting unused
					nn.Name.Defn = typesw.Right
				}
			}
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:722
		{
			markdcl()
		}
	case 73:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:726
		{
			if yyDollar[3].list == nil {
				yyVAL.node = Nod(OEMPTY, nil, nil)
			} else {
				yyVAL.node = liststmt(yyDollar[3].list)
			}
			popdcl()
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:737
		{
			// If the last token read by the lexer was consumed
			// as part of the case, clear it (parser has cleared yychar).
			// If the last token read by the lexer was the lookahead
			// leave it alone (parser has it cached in yychar).
			// This is so that the stmt_list action doesn't look at
			// the case tokens if the stmt_list is empty.
			yylast = yychar
			yyDollar[1].node.Xoffset = int64(block)
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:748
		{
			// This is the only place in the language where a statement
			// list is not allowed to drop the final semicolon, because
			// it's the only place where a statement list is not followed
			// by a closing brace.  Handle the error for pedantry.

			// Find the final token of the statement list.
			// yylast is lookahead; yyprev is last of stmt_list
			last := yyprev

			if last > 0 && last != ';' && yychar != '}' {
				Yyerror("missing statement after label")
			}
			yyVAL.node = yyDollar[1].node
			yyVAL.node.Nbody = yyDollar[3].list
			popdcl()
		}
	case 76:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:767
		{
			yyVAL.list = nil
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:771
		{
			yyVAL.list = list(yyDollar[1].list, yyDollar[2].node)
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:777
		{
			markdcl()
		}
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:781
		{
			yyVAL.list = yyDollar[3].list
			popdcl()
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:788
		{
			yyVAL.node = Nod(ORANGE, nil, yyDollar[4].node)
			yyVAL.node.List = yyDollar[1].list
			yyVAL.node.Etype = 0 // := flag
		}
	case 81:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:794
		{
			yyVAL.node = Nod(ORANGE, nil, yyDollar[4].node)
			yyVAL.node.List = yyDollar[1].list
			yyVAL.node.Colas = true
			colasdefn(yyDollar[1].list, yyVAL.node)
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:801
		{
			yyVAL.node = Nod(ORANGE, nil, yyDollar[2].node)
			yyVAL.node.Etype = 0 // := flag
		}
	case 83:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:808
		{
			// init ; test ; incr
			if yyDollar[5].node != nil && yyDollar[5].node.Colas {
				Yyerror("cannot declare in the for-increment")
			}
			yyVAL.node = Nod(OFOR, nil, nil)
			if yyDollar[1].node != nil {
				yyVAL.node.Ninit = list1(yyDollar[1].node)
			}
			yyVAL.node.Left = yyDollar[3].node
			yyVAL.node.Right = yyDollar[5].node
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:821
		{
			// normal test
			yyVAL.node = Nod(OFOR, nil, nil)
			yyVAL.node.Left = yyDollar[1].node
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:830
		{
			yyVAL.node = yyDollar[1].node
			yyVAL.node.Nbody = concat(yyVAL.node.Nbody, yyDollar[2].list)
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:837
		{
			markdcl()
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:841
		{
			yyVAL.node = yyDollar[3].node
			popdcl()
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:848
		{
			// test
			yyVAL.node = Nod(OIF, nil, nil)
			yyVAL.node.Left = yyDollar[1].node
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:854
		{
			// init ; test
			yyVAL.node = Nod(OIF, nil, nil)
			if yyDollar[1].node != nil {
				yyVAL.node.Ninit = list1(yyDollar[1].node)
			}
			yyVAL.node.Left = yyDollar[3].node
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:866
		{
			markdcl()
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:870
		{
			if yyDollar[3].node.Left == nil {
				Yyerror("missing condition in if statement")
			}
		}
	case 93:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:876
		{
			yyDollar[3].node.Nbody = yyDollar[5].list
		}
	case 94:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line go.y:880
		{
			var n *Node
			var nn *NodeList

			yyVAL.node = yyDollar[3].node
			n = yyDollar[3].node
			popdcl()
			for nn = concat(yyDollar[7].list, yyDollar[8].list); nn != nil; nn = nn.Next {
				if nn.N.Op == OIF {
					popdcl()
				}
				n.Rlist = list1(nn.N)
				n = nn.N
			}
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:898
		{
			markdcl()
		}
	case 96:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:902
		{
			if yyDollar[4].node.Left == nil {
				Yyerror("missing condition in if statement")
			}
			yyDollar[4].node.Nbody = yyDollar[5].list
			yyVAL.list = list1(yyDollar[4].node)
		}
	case 97:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:911
		{
			yyVAL.list = nil
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:915
		{
			yyVAL.list = concat(yyDollar[1].list, yyDollar[2].list)
		}
	case 99:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:920
		{
			yyVAL.list = nil
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:924
		{
			l := &NodeList{N: yyDollar[2].node}
			l.End = l
			yyVAL.list = l
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:932
		{
			markdcl()
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:936
		{
			var n *Node
			n = yyDollar[3].node.Left
			if n != nil && n.Op != OTYPESW {
				n = nil
			}
			typesw = Nod(OXXX, typesw, n)
		}
	case 103:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line go.y:945
		{
			yyVAL.node = yyDollar[3].node
			yyVAL.node.Op = OSWITCH
			yyVAL.node.List = yyDollar[6].list
			typesw = typesw.Left
			popdcl()
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:955
		{
			typesw = Nod(OXXX, typesw, nil)
		}
	case 105:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:959
		{
			yyVAL.node = Nod(OSELECT, nil, nil)
			yyVAL.node.Lineno = typesw.Lineno
			yyVAL.node.List = yyDollar[4].list
			typesw = typesw.Left
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:972
		{
			yyVAL.node = Nod(OOROR, yyDollar[1].node, yyDollar[3].node)
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:976
		{
			yyVAL.node = Nod(OANDAND, yyDollar[1].node, yyDollar[3].node)
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:980
		{
			yyVAL.node = Nod(OEQ, yyDollar[1].node, yyDollar[3].node)
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:984
		{
			yyVAL.node = Nod(ONE, yyDollar[1].node, yyDollar[3].node)
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:988
		{
			yyVAL.node = Nod(OLT, yyDollar[1].node, yyDollar[3].node)
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:992
		{
			yyVAL.node = Nod(OLE, yyDollar[1].node, yyDollar[3].node)
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:996
		{
			yyVAL.node = Nod(OGE, yyDollar[1].node, yyDollar[3].node)
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1000
		{
			yyVAL.node = Nod(OGT, yyDollar[1].node, yyDollar[3].node)
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1004
		{
			yyVAL.node = Nod(OADD, yyDollar[1].node, yyDollar[3].node)
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1008
		{
			yyVAL.node = Nod(OSUB, yyDollar[1].node, yyDollar[3].node)
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1012
		{
			yyVAL.node = Nod(OOR, yyDollar[1].node, yyDollar[3].node)
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1016
		{
			yyVAL.node = Nod(OXOR, yyDollar[1].node, yyDollar[3].node)
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1020
		{
			yyVAL.node = Nod(OMUL, yyDollar[1].node, yyDollar[3].node)
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1024
		{
			yyVAL.node = Nod(ODIV, yyDollar[1].node, yyDollar[3].node)
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1028
		{
			yyVAL.node = Nod(OMOD, yyDollar[1].node, yyDollar[3].node)
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1032
		{
			yyVAL.node = Nod(OAND, yyDollar[1].node, yyDollar[3].node)
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1036
		{
			yyVAL.node = Nod(OANDNOT, yyDollar[1].node, yyDollar[3].node)
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1040
		{
			yyVAL.node = Nod(OLSH, yyDollar[1].node, yyDollar[3].node)
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1044
		{
			yyVAL.node = Nod(ORSH, yyDollar[1].node, yyDollar[3].node)
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1049
		{
			yyVAL.node = Nod(OSEND, yyDollar[1].node, yyDollar[3].node)
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1056
		{
			yyVAL.node = Nod(OIND, yyDollar[2].node, nil)
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1060
		{
			if yyDollar[2].node.Op == OCOMPLIT {
				// Special case for &T{...}: turn into (*T){...}.
				yyVAL.node = yyDollar[2].node
				yyVAL.node.Right = Nod(OIND, yyVAL.node.Right, nil)
				yyVAL.node.Right.Implicit = true
			} else {
				yyVAL.node = Nod(OADDR, yyDollar[2].node, nil)
			}
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1071
		{
			yyVAL.node = Nod(OPLUS, yyDollar[2].node, nil)
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1075
		{
			yyVAL.node = Nod(OMINUS, yyDollar[2].node, nil)
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1079
		{
			yyVAL.node = Nod(ONOT, yyDollar[2].node, nil)
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1083
		{
			Yyerror("the bitwise complement operator is ^")
			yyVAL.node = Nod(OCOM, yyDollar[2].node, nil)
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1088
		{
			yyVAL.node = Nod(OCOM, yyDollar[2].node, nil)
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1092
		{
			yyVAL.node = Nod(ORECV, yyDollar[2].node, nil)
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1102
		{
			yyVAL.node = Nod(OCALL, yyDollar[1].node, nil)
		}
	case 137:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:1106
		{
			yyVAL.node = Nod(OCALL, yyDollar[1].node, nil)
			yyVAL.node.List = yyDollar[3].list
		}
	case 138:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line go.y:1111
		{
			yyVAL.node = Nod(OCALL, yyDollar[1].node, nil)
			yyVAL.node.List = yyDollar[3].list
			yyVAL.node.Isddd = true
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1119
		{
			yyVAL.node = nodlit(yyDollar[1].val)
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1124
		{
			if yyDollar[1].node.Op == OPACK {
				var s *Sym
				s = restrictlookup(yyDollar[3].sym.Name, yyDollar[1].node.Name.Pkg)
				yyDollar[1].node.Used = true
				yyVAL.node = oldname(s)
				break
			}
			yyVAL.node = Nod(OXDOT, yyDollar[1].node, newname(yyDollar[3].sym))
		}
	case 142:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:1135
		{
			yyVAL.node = Nod(ODOTTYPE, yyDollar[1].node, yyDollar[4].node)
		}
	case 143:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:1139
		{
			yyVAL.node = Nod(OTYPESW, nil, yyDollar[1].node)
		}
	case 144:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:1143
		{
			yyVAL.node = Nod(OINDEX, yyDollar[1].node, yyDollar[3].node)
		}
	case 145:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line go.y:1147
		{
			yyVAL.node = Nod(OSLICE, yyDollar[1].node, Nod(OKEY, yyDollar[3].node, yyDollar[5].node))
		}
	case 146:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line go.y:1151
		{
			if yyDollar[5].node == nil {
				Yyerror("middle index required in 3-index slice")
			}
			if yyDollar[7].node == nil {
				Yyerror("final index required in 3-index slice")
			}
			yyVAL.node = Nod(OSLICE3, yyDollar[1].node, Nod(OKEY, yyDollar[3].node, Nod(OKEY, yyDollar[5].node, yyDollar[7].node)))
		}
	case 148:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:1162
		{
			// conversion
			yyVAL.node = Nod(OCALL, yyDollar[1].node, nil)
			yyVAL.node.List = list1(yyDollar[3].node)
		}
	case 149:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:1168
		{
			yyVAL.node = yyDollar[3].node
			yyVAL.node.Right = yyDollar[1].node
			yyVAL.node.List = yyDollar[4].list
			fixlbrace(yyDollar[2].i)
		}
	case 150:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:1175
		{
			yyVAL.node = yyDollar[3].node
			yyVAL.node.Right = yyDollar[1].node
			yyVAL.node.List = yyDollar[4].list
		}
	case 151:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line go.y:1181
		{
			Yyerror("cannot parenthesize type in composite literal")
			yyVAL.node = yyDollar[5].node
			yyVAL.node.Right = yyDollar[2].node
			yyVAL.node.List = yyDollar[6].list
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:1190
		{
			// composite expression.
			// make node early so we get the right line number.
			yyVAL.node = Nod(OCOMPLIT, nil, nil)
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1198
		{
			yyVAL.node = Nod(OKEY, yyDollar[1].node, yyDollar[3].node)
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1204
		{
			// These nodes do not carry line numbers.
			// Since a composite literal commonly spans several lines,
			// the line number on errors may be misleading.
			// Introduce a wrapper node to give the correct line.
			yyVAL.node = yyDollar[1].node
			switch yyVAL.node.Op {
			case ONAME, ONONAME, OTYPE, OPACK, OLITERAL:
				yyVAL.node = Nod(OPAREN, yyVAL.node, nil)
				yyVAL.node.Implicit = true
			}
		}
	case 156:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:1217
		{
			yyVAL.node = yyDollar[2].node
			yyVAL.node.List = yyDollar[3].list
		}
	case 158:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:1225
		{
			yyVAL.node = yyDollar[2].node
			yyVAL.node.List = yyDollar[3].list
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1233
		{
			yyVAL.node = yyDollar[2].node

			// Need to know on lhs of := whether there are ( ).
			// Don't bother with the OPAREN in other cases:
			// it's just a waste of memory and time.
			switch yyVAL.node.Op {
			case ONAME, ONONAME, OPACK, OTYPE, OLITERAL, OTYPESW:
				yyVAL.node = Nod(OPAREN, yyVAL.node, nil)
			}
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1254
		{
			yyVAL.i = LBODY
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1258
		{
			yyVAL.i = '{'
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1269
		{
			if yyDollar[1].sym == nil {
				yyVAL.node = nil
			} else {
				yyVAL.node = newname(yyDollar[1].sym)
			}
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1279
		{
			yyVAL.node = dclname(yyDollar[1].sym)
		}
	case 168:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:1284
		{
			yyVAL.node = nil
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1291
		{
			yyVAL.sym = yyDollar[1].sym
			// during imports, unqualified non-exported identifiers are from builtinpkg
			if importpkg != nil && !exportname(yyDollar[1].sym.Name) {
				yyVAL.sym = Pkglookup(yyDollar[1].sym.Name, builtinpkg)
			}
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1300
		{
			yyVAL.sym = nil
		}
	case 173:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:1306
		{
			var p *Pkg

			if yyDollar[2].val.U.(string) == "" {
				p = importpkg
			} else {
				if isbadimport(yyDollar[2].val.U.(string)) {
					errorexit()
				}
				p = mkpkg(yyDollar[2].val.U.(string))
			}
			yyVAL.sym = Pkglookup(yyDollar[4].sym.Name, p)
		}
	case 174:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:1320
		{
			var p *Pkg

			if yyDollar[2].val.U.(string) == "" {
				p = importpkg
			} else {
				if isbadimport(yyDollar[2].val.U.(string)) {
					errorexit()
				}
				p = mkpkg(yyDollar[2].val.U.(string))
			}
			yyVAL.sym = Pkglookup("?", p)
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1336
		{
			yyVAL.node = oldname(yyDollar[1].sym)
			if yyVAL.node.Name != nil && yyVAL.node.Name.Pack != nil {
				yyVAL.node.Name.Pack.Used = true
			}
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1357
		{
			Yyerror("final argument in variadic function missing type")
			yyVAL.node = Nod(ODDD, typenod(typ(TINTER)), nil)
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1362
		{
			yyVAL.node = Nod(ODDD, yyDollar[2].node, nil)
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1373
		{
			yyVAL.node = yyDollar[2].node
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1382
		{
			yyVAL.node = Nod(OIND, yyDollar[2].node, nil)
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1392
		{
			yyVAL.node = yyDollar[2].node
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1413
		{
			if yyDollar[1].node.Op == OPACK {
				var s *Sym
				s = restrictlookup(yyDollar[3].sym.Name, yyDollar[1].node.Name.Pkg)
				yyDollar[1].node.Used = true
				yyVAL.node = oldname(s)
				break
			}
			yyVAL.node = Nod(OXDOT, yyDollar[1].node, newname(yyDollar[3].sym))
		}
	case 204:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:1426
		{
			yyVAL.node = Nod(OTARRAY, yyDollar[2].node, yyDollar[4].node)
		}
	case 205:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:1430
		{
			// array literal of nelem
			yyVAL.node = Nod(OTARRAY, Nod(ODDD, nil, nil), yyDollar[4].node)
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1435
		{
			yyVAL.node = Nod(OTCHAN, yyDollar[2].node, nil)
			yyVAL.node.Etype = Cboth
		}
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1440
		{
			yyVAL.node = Nod(OTCHAN, yyDollar[3].node, nil)
			yyVAL.node.Etype = Csend
		}
	case 208:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:1445
		{
			yyVAL.node = Nod(OTMAP, yyDollar[3].node, yyDollar[5].node)
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1453
		{
			yyVAL.node = Nod(OIND, yyDollar[2].node, nil)
		}
	case 212:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1459
		{
			yyVAL.node = Nod(OTCHAN, yyDollar[3].node, nil)
			yyVAL.node.Etype = Crecv
		}
	case 213:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:1466
		{
			yyVAL.node = Nod(OTSTRUCT, nil, nil)
			yyVAL.node.List = yyDollar[3].list
			fixlbrace(yyDollar[2].i)
		}
	case 214:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1472
		{
			yyVAL.node = Nod(OTSTRUCT, nil, nil)
			fixlbrace(yyDollar[2].i)
		}
	case 215:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:1479
		{
			yyVAL.node = Nod(OTINTER, nil, nil)
			yyVAL.node.List = yyDollar[3].list
			fixlbrace(yyDollar[2].i)
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1485
		{
			yyVAL.node = Nod(OTINTER, nil, nil)
			fixlbrace(yyDollar[2].i)
		}
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1496
		{
			yyVAL.node = yyDollar[2].node
			if yyVAL.node == nil {
				break
			}
			if noescape && yyDollar[3].list != nil {
				Yyerror("can only use //go:noescape with external func implementations")
			}
			yyVAL.node.Nbody = yyDollar[3].list
			yyVAL.node.Func.Endlineno = lineno
			yyVAL.node.Noescape = noescape
			yyVAL.node.Func.Norace = norace
			yyVAL.node.Func.Nosplit = nosplit
			yyVAL.node.Func.Nowritebarrier = nowritebarrier
			yyVAL.node.Func.Systemstack = systemstack
			funcbody(yyVAL.node)
		}
	case 218:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:1516
		{
			var t *Node

			yyVAL.node = nil
			yyDollar[3].list = checkarglist(yyDollar[3].list, 1)

			if yyDollar[1].sym.Name == "init" {
				yyDollar[1].sym = renameinit()
				if yyDollar[3].list != nil || yyDollar[5].list != nil {
					Yyerror("func init must have no arguments and no return values")
				}
			}
			if localpkg.Name == "main" && yyDollar[1].sym.Name == "main" {
				if yyDollar[3].list != nil || yyDollar[5].list != nil {
					Yyerror("func main must have no arguments and no return values")
				}
			}

			t = Nod(OTFUNC, nil, nil)
			t.List = yyDollar[3].list
			t.Rlist = yyDollar[5].list

			yyVAL.node = Nod(ODCLFUNC, nil, nil)
			yyVAL.node.Func.Nname = newfuncname(yyDollar[1].sym)
			yyVAL.node.Func.Nname.Name.Defn = yyVAL.node
			yyVAL.node.Func.Nname.Name.Param.Ntype = t // TODO: check if nname already has an ntype
			declare(yyVAL.node.Func.Nname, PFUNC)

			funchdr(yyVAL.node)
		}
	case 219:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line go.y:1547
		{
			var rcvr, t *Node

			yyVAL.node = nil
			yyDollar[2].list = checkarglist(yyDollar[2].list, 0)
			yyDollar[6].list = checkarglist(yyDollar[6].list, 1)

			if yyDollar[2].list == nil {
				Yyerror("method has no receiver")
				break
			}
			if yyDollar[2].list.Next != nil {
				Yyerror("method has multiple receivers")
				break
			}
			rcvr = yyDollar[2].list.N
			if rcvr.Op != ODCLFIELD {
				Yyerror("bad receiver in method")
				break
			}

			t = Nod(OTFUNC, rcvr, nil)
			t.List = yyDollar[6].list
			t.Rlist = yyDollar[8].list

			yyVAL.node = Nod(ODCLFUNC, nil, nil)
			yyVAL.node.Func.Shortname = newfuncname(yyDollar[4].sym)
			yyVAL.node.Func.Nname = methodname1(yyVAL.node.Func.Shortname, rcvr.Right)
			yyVAL.node.Func.Nname.Name.Defn = yyVAL.node
			yyVAL.node.Func.Nname.Name.Param.Ntype = t
			yyVAL.node.Func.Nname.Nointerface = nointerface
			declare(yyVAL.node.Func.Nname, PFUNC)

			funchdr(yyVAL.node)
		}
	case 220:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:1585
		{
			var s *Sym
			var t *Type

			yyVAL.node = nil

			s = yyDollar[1].sym
			t = functype(nil, yyDollar[3].list, yyDollar[5].list)

			importsym(s, ONAME)
			if s.Def != nil && s.Def.Op == ONAME {
				if Eqtype(t, s.Def.Type) {
					dclcontext = PDISCARD // since we skip funchdr below
					break
				}
				Yyerror("inconsistent definition for func %v during import\n\t%v\n\t%v", s, s.Def.Type, t)
			}

			yyVAL.node = newfuncname(s)
			yyVAL.node.Type = t
			declare(yyVAL.node, PFUNC)

			funchdr(yyVAL.node)
		}
	case 221:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line go.y:1610
		{
			yyVAL.node = methodname1(newname(yyDollar[4].sym), yyDollar[2].list.N.Right)
			yyVAL.node.Type = functype(yyDollar[2].list.N, yyDollar[6].list, yyDollar[8].list)

			checkwidth(yyVAL.node.Type)
			addmethod(yyDollar[4].sym, yyVAL.node.Type, false, nointerface)
			nointerface = false
			funchdr(yyVAL.node)

			// inl.C's inlnode in on a dotmeth node expects to find the inlineable body as
			// (dotmeth's type).Nname.Inl, and dotmeth's type has been pulled
			// out by typecheck's lookdot as this $$.ttype.  So by providing
			// this back link here we avoid special casing there.
			yyVAL.node.Type.Nname = yyVAL.node
		}
	case 222:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:1628
		{
			yyDollar[3].list = checkarglist(yyDollar[3].list, 1)
			yyVAL.node = Nod(OTFUNC, nil, nil)
			yyVAL.node.List = yyDollar[3].list
			yyVAL.node.Rlist = yyDollar[5].list
		}
	case 223:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:1636
		{
			yyVAL.list = nil
		}
	case 224:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1640
		{
			yyVAL.list = yyDollar[2].list
			if yyVAL.list == nil {
				yyVAL.list = list1(Nod(OEMPTY, nil, nil))
			}
		}
	case 225:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:1649
		{
			yyVAL.list = nil
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1653
		{
			yyVAL.list = list1(Nod(ODCLFIELD, nil, yyDollar[1].node))
		}
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1657
		{
			yyDollar[2].list = checkarglist(yyDollar[2].list, 0)
			yyVAL.list = yyDollar[2].list
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1664
		{
			closurehdr(yyDollar[1].node)
		}
	case 229:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:1670
		{
			yyVAL.node = closurebody(yyDollar[3].list)
			fixlbrace(yyDollar[2].i)
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1675
		{
			yyVAL.node = closurebody(nil)
		}
	case 231:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:1686
		{
			yyVAL.list = nil
		}
	case 232:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1690
		{
			yyVAL.list = concat(yyDollar[1].list, yyDollar[2].list)
			if nsyntaxerrors == 0 {
				testdclstack()
			}
			nointerface = false
			noescape = false
			norace = false
			nosplit = false
			nowritebarrier = false
			systemstack = false
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1706
		{
			yyVAL.list = concat(yyDollar[1].list, yyDollar[3].list)
		}
	case 236:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1713
		{
			yyVAL.list = concat(yyDollar[1].list, yyDollar[3].list)
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1719
		{
			yyVAL.list = list1(yyDollar[1].node)
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1723
		{
			yyVAL.list = list(yyDollar[1].list, yyDollar[3].node)
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1730
		{
			yyVAL.list = concat(yyDollar[1].list, yyDollar[3].list)
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1736
		{
			yyVAL.list = list1(yyDollar[1].node)
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1740
		{
			yyVAL.list = list(yyDollar[1].list, yyDollar[3].node)
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1746
		{
			var l *NodeList

			var n *Node
			l = yyDollar[1].list
			if l == nil || l.N.Sym.Name == "?" {
				// ? symbol, during import (list1(nil) == nil)
				n = yyDollar[2].node
				if n.Op == OIND {
					n = n.Left
				}
				n = embedded(n.Sym, importpkg)
				n.Right = yyDollar[2].node
				n.SetVal(yyDollar[3].val)
				yyVAL.list = list1(n)
				break
			}

			for l = yyDollar[1].list; l != nil; l = l.Next {
				l.N = Nod(ODCLFIELD, l.N, yyDollar[2].node)
				l.N.SetVal(yyDollar[3].val)
			}
		}
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1770
		{
			yyDollar[1].node.SetVal(yyDollar[2].val)
			yyVAL.list = list1(yyDollar[1].node)
		}
	case 245:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:1775
		{
			yyDollar[2].node.SetVal(yyDollar[4].val)
			yyVAL.list = list1(yyDollar[2].node)
			Yyerror("cannot parenthesize embedded type")
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1781
		{
			yyDollar[2].node.Right = Nod(OIND, yyDollar[2].node.Right, nil)
			yyDollar[2].node.SetVal(yyDollar[3].val)
			yyVAL.list = list1(yyDollar[2].node)
		}
	case 247:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:1787
		{
			yyDollar[3].node.Right = Nod(OIND, yyDollar[3].node.Right, nil)
			yyDollar[3].node.SetVal(yyDollar[5].val)
			yyVAL.list = list1(yyDollar[3].node)
			Yyerror("cannot parenthesize embedded type")
		}
	case 248:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:1794
		{
			yyDollar[3].node.Right = Nod(OIND, yyDollar[3].node.Right, nil)
			yyDollar[3].node.SetVal(yyDollar[5].val)
			yyVAL.list = list1(yyDollar[3].node)
			Yyerror("cannot parenthesize embedded type")
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1803
		{
			var n *Node

			yyVAL.sym = yyDollar[1].sym
			n = oldname(yyDollar[1].sym)
			if n.Name != nil && n.Name.Pack != nil {
				n.Name.Pack.Used = true
			}
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1813
		{
			var pkg *Pkg

			if yyDollar[1].sym.Def == nil || yyDollar[1].sym.Def.Op != OPACK {
				Yyerror("%v is not a package", yyDollar[1].sym)
				pkg = localpkg
			} else {
				yyDollar[1].sym.Def.Used = true
				pkg = yyDollar[1].sym.Def.Name.Pkg
			}
			yyVAL.sym = restrictlookup(yyDollar[3].sym.Name, pkg)
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1828
		{
			yyVAL.node = embedded(yyDollar[1].sym, localpkg)
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1834
		{
			yyVAL.node = Nod(ODCLFIELD, yyDollar[1].node, yyDollar[2].node)
			ifacedcl(yyVAL.node)
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1839
		{
			yyVAL.node = Nod(ODCLFIELD, nil, oldname(yyDollar[1].sym))
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1843
		{
			yyVAL.node = Nod(ODCLFIELD, nil, oldname(yyDollar[2].sym))
			Yyerror("cannot parenthesize embedded type")
		}
	case 255:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:1850
		{
			// without func keyword
			yyDollar[2].list = checkarglist(yyDollar[2].list, 1)
			yyVAL.node = Nod(OTFUNC, fakethis(), nil)
			yyVAL.node.List = yyDollar[2].list
			yyVAL.node.Rlist = yyDollar[4].list
		}
	case 257:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1864
		{
			yyVAL.node = Nod(ONONAME, nil, nil)
			yyVAL.node.Sym = yyDollar[1].sym
			yyVAL.node = Nod(OKEY, yyVAL.node, yyDollar[2].node)
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1870
		{
			yyVAL.node = Nod(ONONAME, nil, nil)
			yyVAL.node.Sym = yyDollar[1].sym
			yyVAL.node = Nod(OKEY, yyVAL.node, yyDollar[2].node)
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1879
		{
			yyVAL.list = list1(yyDollar[1].node)
		}
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1883
		{
			yyVAL.list = list(yyDollar[1].list, yyDollar[3].node)
		}
	case 262:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:1888
		{
			yyVAL.list = nil
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1892
		{
			yyVAL.list = yyDollar[1].list
		}
	case 264:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:1900
		{
			yyVAL.node = nil
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1905
		{
			yyVAL.node = liststmt(yyDollar[1].list)
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1910
		{
			yyVAL.node = nil
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1921
		{
			yyDollar[1].node = Nod(OLABEL, yyDollar[1].node, nil)
			yyDollar[1].node.Sym = dclstack // context, for goto restrictions
		}
	case 275:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:1926
		{
			var l *NodeList

			yyDollar[1].node.Name.Defn = yyDollar[4].node
			l = list1(yyDollar[1].node)
			if yyDollar[4].node != nil {
				l = list(l, yyDollar[4].node)
			}
			yyVAL.node = liststmt(l)
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1937
		{
			// will be converted to OFALL
			yyVAL.node = Nod(OXFALL, nil, nil)
			yyVAL.node.Xoffset = int64(block)
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1943
		{
			yyVAL.node = Nod(OBREAK, yyDollar[2].node, nil)
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1947
		{
			yyVAL.node = Nod(OCONTINUE, yyDollar[2].node, nil)
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1951
		{
			yyVAL.node = Nod(OPROC, yyDollar[2].node, nil)
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1955
		{
			yyVAL.node = Nod(ODEFER, yyDollar[2].node, nil)
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1959
		{
			yyVAL.node = Nod(OGOTO, yyDollar[2].node, nil)
			yyVAL.node.Sym = dclstack // context, for goto restrictions
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1964
		{
			yyVAL.node = Nod(ORETURN, nil, nil)
			yyVAL.node.List = yyDollar[2].list
			if yyVAL.node.List == nil && Curfn != nil {
				var l *NodeList

				for l = Curfn.Func.Dcl; l != nil; l = l.Next {
					if l.N.Class == PPARAM {
						continue
					}
					if l.N.Class != PPARAMOUT {
						break
					}
					if l.N.Sym.Def != l.N {
						Yyerror("%s is shadowed during return", l.N.Sym.Name)
					}
				}
			}
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1986
		{
			yyVAL.list = nil
			if yyDollar[1].node != nil {
				yyVAL.list = list1(yyDollar[1].node)
			}
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1993
		{
			yyVAL.list = yyDollar[1].list
			if yyDollar[3].node != nil {
				yyVAL.list = list(yyVAL.list, yyDollar[3].node)
			}
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:2002
		{
			yyVAL.list = list1(yyDollar[1].node)
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:2006
		{
			yyVAL.list = list(yyDollar[1].list, yyDollar[3].node)
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:2012
		{
			yyVAL.list = list1(yyDollar[1].node)
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:2016
		{
			yyVAL.list = list(yyDollar[1].list, yyDollar[3].node)
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:2022
		{
			yyVAL.list = list1(yyDollar[1].node)
		}
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:2026
		{
			yyVAL.list = list(yyDollar[1].list, yyDollar[3].node)
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:2032
		{
			yyVAL.list = list1(yyDollar[1].node)
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:2036
		{
			yyVAL.list = list(yyDollar[1].list, yyDollar[3].node)
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:2045
		{
			yyVAL.list = list1(yyDollar[1].node)
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:2049
		{
			yyVAL.list = list1(yyDollar[1].node)
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:2053
		{
			yyVAL.list = list(yyDollar[1].list, yyDollar[3].node)
		}
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:2057
		{
			yyVAL.list = list(yyDollar[1].list, yyDollar[3].node)
		}
	case 297:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:2062
		{
			yyVAL.list = nil
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:2066
		{
			yyVAL.list = yyDollar[1].list
		}
	case 303:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:2080
		{
			yyVAL.node = nil
		}
	case 305:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:2086
		{
			yyVAL.list = nil
		}
	case 307:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:2092
		{
			yyVAL.node = nil
		}
	case 309:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:2098
		{
			yyVAL.list = nil
		}
	case 311:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:2104
		{
			yyVAL.list = nil
		}
	case 313:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:2110
		{
			yyVAL.list = nil
		}
	case 315:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:2116
		{
			yyVAL.val.U = nil
		}
	case 317:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:2126
		{
			importimport(yyDollar[2].sym, yyDollar[3].val.U.(string))
		}
	case 318:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:2130
		{
			importvar(yyDollar[2].sym, yyDollar[3].typ)
		}
	case 319:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:2134
		{
			importconst(yyDollar[2].sym, Types[TIDEAL], yyDollar[4].node)
		}
	case 320:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line go.y:2138
		{
			importconst(yyDollar[2].sym, yyDollar[3].typ, yyDollar[5].node)
		}
	case 321:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:2142
		{
			importtype(yyDollar[2].typ, yyDollar[3].typ)
		}
	case 322:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:2146
		{
			if yyDollar[2].node == nil {
				dclcontext = PEXTERN // since we skip the funcbody below
				break
			}

			yyDollar[2].node.Func.Inl = yyDollar[3].list

			funcbody(yyDollar[2].node)
			importlist = list(importlist, yyDollar[2].node)

			if Debug['E'] > 0 {
				fmt.Printf("import [%q] func %v \n", importpkg.Path, yyDollar[2].node)
				if Debug['m'] > 2 && yyDollar[2].node.Func.Inl != nil {
					fmt.Printf("inl body:%v\n", yyDollar[2].node.Func.Inl)
				}
			}
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:2167
		{
			yyVAL.sym = yyDollar[1].sym
			structpkg = yyVAL.sym.Pkg
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:2174
		{
			yyVAL.typ = pkgtype(yyDollar[1].sym)
			importsym(yyDollar[1].sym, OTYPE)
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:2194
		{
			yyVAL.typ = pkgtype(yyDollar[1].sym)
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:2198
		{
			// predefined name like uint8
			yyDollar[1].sym = Pkglookup(yyDollar[1].sym.Name, builtinpkg)
			if yyDollar[1].sym.Def == nil || yyDollar[1].sym.Def.Op != OTYPE {
				Yyerror("%s is not a type", yyDollar[1].sym.Name)
				yyVAL.typ = nil
			} else {
				yyVAL.typ = yyDollar[1].sym.Def.Type
			}
		}
	case 332:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:2209
		{
			yyVAL.typ = aindex(nil, yyDollar[3].typ)
		}
	case 333:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:2213
		{
			yyVAL.typ = aindex(nodlit(yyDollar[2].val), yyDollar[4].typ)
		}
	case 334:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:2217
		{
			yyVAL.typ = maptype(yyDollar[3].typ, yyDollar[5].typ)
		}
	case 335:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:2221
		{
			yyVAL.typ = tostruct(yyDollar[3].list)
		}
	case 336:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:2225
		{
			yyVAL.typ = tointerface(yyDollar[3].list)
		}
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:2229
		{
			yyVAL.typ = Ptrto(yyDollar[2].typ)
		}
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:2233
		{
			yyVAL.typ = typ(TCHAN)
			yyVAL.typ.Type = yyDollar[2].typ
			yyVAL.typ.Chan = Cboth
		}
	case 339:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:2239
		{
			yyVAL.typ = typ(TCHAN)
			yyVAL.typ.Type = yyDollar[3].typ
			yyVAL.typ.Chan = Cboth
		}
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:2245
		{
			yyVAL.typ = typ(TCHAN)
			yyVAL.typ.Type = yyDollar[3].typ
			yyVAL.typ.Chan = Csend
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:2253
		{
			yyVAL.typ = typ(TCHAN)
			yyVAL.typ.Type = yyDollar[3].typ
			yyVAL.typ.Chan = Crecv
		}
	case 342:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:2261
		{
			yyVAL.typ = functype(nil, yyDollar[3].list, yyDollar[5].list)
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:2267
		{
			yyVAL.node = Nod(ODCLFIELD, nil, typenod(yyDollar[2].typ))
			if yyDollar[1].sym != nil {
				yyVAL.node.Left = newname(yyDollar[1].sym)
			}
			yyVAL.node.SetVal(yyDollar[3].val)
		}
	case 344:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:2275
		{
			var t *Type

			t = typ(TARRAY)
			t.Bound = -1
			t.Type = yyDollar[3].typ

			yyVAL.node = Nod(ODCLFIELD, nil, typenod(t))
			if yyDollar[1].sym != nil {
				yyVAL.node.Left = newname(yyDollar[1].sym)
			}
			yyVAL.node.Isddd = true
			yyVAL.node.SetVal(yyDollar[4].val)
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:2292
		{
			var s *Sym
			var p *Pkg

			if yyDollar[1].sym != nil && yyDollar[1].sym.Name != "?" {
				yyVAL.node = Nod(ODCLFIELD, newname(yyDollar[1].sym), typenod(yyDollar[2].typ))
				yyVAL.node.SetVal(yyDollar[3].val)
			} else {
				s = yyDollar[2].typ.Sym
				if s == nil && Isptr[yyDollar[2].typ.Etype] {
					s = yyDollar[2].typ.Type.Sym
				}
				p = importpkg
				if yyDollar[1].sym != nil {
					p = yyDollar[1].sym.Pkg
				}
				yyVAL.node = embedded(s, p)
				yyVAL.node.Right = typenod(yyDollar[2].typ)
				yyVAL.node.SetVal(yyDollar[3].val)
			}
		}
	case 346:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:2316
		{
			yyVAL.node = Nod(ODCLFIELD, newname(yyDollar[1].sym), typenod(functype(fakethis(), yyDollar[3].list, yyDollar[5].list)))
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:2320
		{
			yyVAL.node = Nod(ODCLFIELD, nil, typenod(yyDollar[1].typ))
		}
	case 348:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:2325
		{
			yyVAL.list = nil
		}
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:2332
		{
			yyVAL.list = yyDollar[2].list
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:2336
		{
			yyVAL.list = list1(Nod(ODCLFIELD, nil, typenod(yyDollar[1].typ)))
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:2346
		{
			yyVAL.node = nodlit(yyDollar[1].val)
		}
	case 353:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:2350
		{
			yyVAL.node = nodlit(yyDollar[2].val)
			switch yyVAL.node.Val().Ctype() {
			case CTINT, CTRUNE:
				mpnegfix(yyVAL.node.Val().U.(*Mpint))
				break
			case CTFLT:
				mpnegflt(yyVAL.node.Val().U.(*Mpflt))
				break
			case CTCPLX:
				mpnegflt(&yyVAL.node.Val().U.(*Mpcplx).Real)
				mpnegflt(&yyVAL.node.Val().U.(*Mpcplx).Imag)
				break
			default:
				Yyerror("bad negated constant")
			}
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:2368
		{
			yyVAL.node = oldname(Pkglookup(yyDollar[1].sym.Name, builtinpkg))
			if yyVAL.node.Op != OLITERAL {
				Yyerror("bad constant %v", yyVAL.node.Sym)
			}
		}
	case 356:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:2378
		{
			if yyDollar[2].node.Val().Ctype() == CTRUNE && yyDollar[4].node.Val().Ctype() == CTINT {
				yyVAL.node = yyDollar[2].node
				mpaddfixfix(yyDollar[2].node.Val().U.(*Mpint), yyDollar[4].node.Val().U.(*Mpint), 0)
				break
			}
			yyDollar[4].node.Val().U.(*Mpcplx).Real = yyDollar[4].node.Val().U.(*Mpcplx).Imag
			Mpmovecflt(&yyDollar[4].node.Val().U.(*Mpcplx).Imag, 0.0)
			yyVAL.node = nodcplxlit(yyDollar[2].node.Val(), yyDollar[4].node.Val())
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:2394
		{
			yyVAL.list = list1(yyDollar[1].node)
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:2398
		{
			yyVAL.list = list(yyDollar[1].list, yyDollar[3].node)
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:2404
		{
			yyVAL.list = list1(yyDollar[1].node)
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:2408
		{
			yyVAL.list = list(yyDollar[1].list, yyDollar[3].node)
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:2414
		{
			yyVAL.list = list1(yyDollar[1].node)
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:2418
		{
			yyVAL.list = list(yyDollar[1].list, yyDollar[3].node)
		}
	}
	goto yystack /* stack new state and value */
}
