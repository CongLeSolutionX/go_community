// Copyright 2023 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by "stringer -bitset -type ReturnPropBits"; DO NOT EDIT.

package funcprop

import (
	"bytes"
	"strconv"
)

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ReturnNoInfo-0]
	_ = x[ReturnIsAllocatedMem-2]
	_ = x[ReturnIsConcreteTypeConvertedToInterface-4]
	_ = x[ReturnAlwaysSameConstant-8]
	_ = x[ReturnTop-16]
}

var _ReturnPropBits_value = [...]uint64{
	0x0,  /* ReturnNoInfo */
	0x2,  /* ReturnIsAllocatedMem */
	0x4,  /* ReturnIsConcreteTypeConvertedToInterface */
	0x8,  /* ReturnAlwaysSameConstant */
	0x10, /* ReturnTop */
}

const _ReturnPropBits_name = "ReturnNoInfoReturnIsAllocatedMemReturnIsConcreteTypeConvertedToInterfaceReturnAlwaysSameConstantReturnTop"

var _ReturnPropBits_index = [...]uint8{0, 12, 32, 72, 96, 105}

func (i ReturnPropBits) String() string {
	var b bytes.Buffer

	remain := uint64(i)
	seen := false

	for k, v := range _ReturnPropBits_value {
		x := _ReturnPropBits_name[_ReturnPropBits_index[k]:_ReturnPropBits_index[k+1]]
		if v == 0 {
			if i == 0 {
				b.WriteString(x)
				return b.String()
			}
			continue
		}
		if (v & remain) == v {
			remain &^= v
			x := _ReturnPropBits_name[_ReturnPropBits_index[k]:_ReturnPropBits_index[k+1]]
			if seen {
				b.WriteString("|")
			}
			seen = true
			b.WriteString(x)
		}
	}
	if remain == 0 {
		return b.String()
	}
	return "ReturnPropBits(0x" + strconv.FormatInt(int64(i), 16) + ")"
}
