// Code generated by mkprototype.go. DO NOT EDIT.

package dwarfgen

import (
	"cmd/internal/dwarf"
	"cmd/internal/objabi"
)

func _386Prototypes() []prototype {
	var typs [28]prototype
	typs[0] = prototype{size: 0, numElem: 0, fieldName: nil, fieldType: nil, fieldOff: []int64{}, name: "runtime._type", kind: objabi.KindStruct}
	typs[1] = prototype{size: 8, numElem: 1, fieldName: []string{"tophash"}, fieldType: []dwarf.Type{&typs[2]}, fieldOff: []int64{0}, name: "runtime.bmap", kind: objabi.KindStruct}
	typs[2] = prototype{size: 8, elem: &typs[3], numElem: 8, name: "[8]uint8", kind: objabi.KindArray}
	typs[3] = prototype{size: 1, name: "uint8", kind: objabi.KindUint8}
	typs[4] = prototype{size: 0, numElem: 0, fieldName: nil, fieldType: nil, fieldOff: []int64{}, name: "runtime.g", kind: objabi.KindStruct}
	typs[5] = prototype{size: 52, numElem: 11, fieldName: []string{"qcount", "dataqsiz", "buf", "elemsize", "closed", "elemtype", "sendx", "recvx", "recvq", "sendq", "lock"}, fieldType: []dwarf.Type{&typs[6], &typs[6], &typs[7], &typs[8], &typs[9], &typs[10], &typs[6], &typs[6], &typs[11], &typs[11], &typs[18]}, fieldOff: []int64{0, 4, 8, 12, 16, 20, 24, 28, 32, 40, 48}, name: "runtime.hchan", kind: objabi.KindStruct}
	typs[6] = prototype{size: 4, name: "uint", kind: objabi.KindUint}
	typs[7] = prototype{size: 4, name: "unsafe.Pointer", kind: objabi.KindUnsafePointer}
	typs[8] = prototype{size: 2, name: "uint16", kind: objabi.KindUint16}
	typs[9] = prototype{size: 4, name: "uint32", kind: objabi.KindUint32}
	typs[10] = prototype{size: 4, elem: &typs[0], name: "*runtime._type", kind: objabi.KindPtr}
	typs[11] = prototype{size: 8, numElem: 2, fieldName: []string{"first", "last"}, fieldType: []dwarf.Type{&typs[12], &typs[12]}, fieldOff: []int64{0, 4}, name: "runtime.waitq", kind: objabi.KindStruct}
	typs[12] = prototype{size: 4, elem: &typs[13], name: "*runtime.sudog", kind: objabi.KindPtr}
	typs[13] = prototype{size: 56, numElem: 13, fieldName: []string{"g", "next", "prev", "elem", "acquiretime", "releasetime", "ticket", "isSelect", "success", "parent", "waitlink", "waittail", "c"}, fieldType: []dwarf.Type{&typs[14], &typs[12], &typs[12], &typs[7], &typs[15], &typs[15], &typs[9], &typs[16], &typs[16], &typs[12], &typs[12], &typs[12], &typs[17]}, fieldOff: []int64{0, 4, 8, 12, 16, 24, 32, 36, 37, 40, 44, 48, 52}, name: "runtime.sudog", kind: objabi.KindStruct}
	typs[14] = prototype{size: 4, elem: &typs[4], name: "*runtime.g", kind: objabi.KindPtr}
	typs[15] = prototype{size: 8, name: "int64", kind: objabi.KindInt64}
	typs[16] = prototype{size: 1, name: "bool", kind: objabi.KindBool}
	typs[17] = prototype{size: 4, elem: &typs[5], name: "*runtime.hchan", kind: objabi.KindPtr}
	typs[18] = prototype{size: 4, numElem: 1, fieldName: []string{"key"}, fieldType: []dwarf.Type{&typs[19]}, fieldOff: []int64{0}, name: "runtime.mutex", kind: objabi.KindStruct}
	typs[19] = prototype{size: 4, name: "uintptr", kind: objabi.KindUintptr}
	typs[20] = prototype{size: 28, numElem: 9, fieldName: []string{"count", "flags", "B", "noverflow", "hash0", "buckets", "oldbuckets", "nevacuate", "extra"}, fieldType: []dwarf.Type{&typs[21], &typs[3], &typs[3], &typs[8], &typs[9], &typs[7], &typs[7], &typs[19], &typs[22]}, fieldOff: []int64{0, 4, 5, 6, 8, 12, 16, 20, 24}, name: "runtime.hmap", kind: objabi.KindStruct}
	typs[21] = prototype{size: 4, name: "int", kind: objabi.KindInt}
	typs[22] = prototype{size: 4, elem: &typs[23], name: "*runtime.mapextra", kind: objabi.KindPtr}
	typs[23] = prototype{size: 0, numElem: 0, fieldName: nil, fieldType: nil, fieldOff: []int64{}, name: "runtime.mapextra", kind: objabi.KindStruct}
	typs[24] = prototype{size: 12, numElem: 3, fieldName: []string{"array", "len", "cap"}, fieldType: []dwarf.Type{&typs[7], &typs[21], &typs[21]}, fieldOff: []int64{0, 4, 8}, name: "runtime.slice", kind: objabi.KindStruct}
	typs[25] = prototype{size: 8, numElem: 2, fieldName: []string{"str", "len"}, fieldType: []dwarf.Type{&typs[26], &typs[21]}, fieldOff: []int64{0, 4}, name: "runtime.stringStructDWARF", kind: objabi.KindStruct}
	typs[26] = prototype{size: 4, elem: &typs[27], name: "*uint8", kind: objabi.KindPtr}
	typs[27] = prototype{size: 1, name: "uint8", kind: objabi.KindUint8}
	return typs[:]
}

func _armPrototypes() []prototype {
	var typs [28]prototype
	typs[0] = prototype{size: 0, numElem: 0, fieldName: nil, fieldType: nil, fieldOff: []int64{}, name: "runtime._type", kind: objabi.KindStruct}
	typs[1] = prototype{size: 8, numElem: 1, fieldName: []string{"tophash"}, fieldType: []dwarf.Type{&typs[2]}, fieldOff: []int64{0}, name: "runtime.bmap", kind: objabi.KindStruct}
	typs[2] = prototype{size: 8, elem: &typs[3], numElem: 8, name: "[8]uint8", kind: objabi.KindArray}
	typs[3] = prototype{size: 1, name: "uint8", kind: objabi.KindUint8}
	typs[4] = prototype{size: 0, numElem: 0, fieldName: nil, fieldType: nil, fieldOff: []int64{}, name: "runtime.g", kind: objabi.KindStruct}
	typs[5] = prototype{size: 52, numElem: 11, fieldName: []string{"qcount", "dataqsiz", "buf", "elemsize", "closed", "elemtype", "sendx", "recvx", "recvq", "sendq", "lock"}, fieldType: []dwarf.Type{&typs[6], &typs[6], &typs[7], &typs[8], &typs[9], &typs[10], &typs[6], &typs[6], &typs[11], &typs[11], &typs[18]}, fieldOff: []int64{0, 4, 8, 12, 16, 20, 24, 28, 32, 40, 48}, name: "runtime.hchan", kind: objabi.KindStruct}
	typs[6] = prototype{size: 4, name: "uint", kind: objabi.KindUint}
	typs[7] = prototype{size: 4, name: "unsafe.Pointer", kind: objabi.KindUnsafePointer}
	typs[8] = prototype{size: 2, name: "uint16", kind: objabi.KindUint16}
	typs[9] = prototype{size: 4, name: "uint32", kind: objabi.KindUint32}
	typs[10] = prototype{size: 4, elem: &typs[0], name: "*runtime._type", kind: objabi.KindPtr}
	typs[11] = prototype{size: 8, numElem: 2, fieldName: []string{"first", "last"}, fieldType: []dwarf.Type{&typs[12], &typs[12]}, fieldOff: []int64{0, 4}, name: "runtime.waitq", kind: objabi.KindStruct}
	typs[12] = prototype{size: 4, elem: &typs[13], name: "*runtime.sudog", kind: objabi.KindPtr}
	typs[13] = prototype{size: 56, numElem: 13, fieldName: []string{"g", "next", "prev", "elem", "acquiretime", "releasetime", "ticket", "isSelect", "success", "parent", "waitlink", "waittail", "c"}, fieldType: []dwarf.Type{&typs[14], &typs[12], &typs[12], &typs[7], &typs[15], &typs[15], &typs[9], &typs[16], &typs[16], &typs[12], &typs[12], &typs[12], &typs[17]}, fieldOff: []int64{0, 4, 8, 12, 16, 24, 32, 36, 37, 40, 44, 48, 52}, name: "runtime.sudog", kind: objabi.KindStruct}
	typs[14] = prototype{size: 4, elem: &typs[4], name: "*runtime.g", kind: objabi.KindPtr}
	typs[15] = prototype{size: 8, name: "int64", kind: objabi.KindInt64}
	typs[16] = prototype{size: 1, name: "bool", kind: objabi.KindBool}
	typs[17] = prototype{size: 4, elem: &typs[5], name: "*runtime.hchan", kind: objabi.KindPtr}
	typs[18] = prototype{size: 4, numElem: 1, fieldName: []string{"key"}, fieldType: []dwarf.Type{&typs[19]}, fieldOff: []int64{0}, name: "runtime.mutex", kind: objabi.KindStruct}
	typs[19] = prototype{size: 4, name: "uintptr", kind: objabi.KindUintptr}
	typs[20] = prototype{size: 28, numElem: 9, fieldName: []string{"count", "flags", "B", "noverflow", "hash0", "buckets", "oldbuckets", "nevacuate", "extra"}, fieldType: []dwarf.Type{&typs[21], &typs[3], &typs[3], &typs[8], &typs[9], &typs[7], &typs[7], &typs[19], &typs[22]}, fieldOff: []int64{0, 4, 5, 6, 8, 12, 16, 20, 24}, name: "runtime.hmap", kind: objabi.KindStruct}
	typs[21] = prototype{size: 4, name: "int", kind: objabi.KindInt}
	typs[22] = prototype{size: 4, elem: &typs[23], name: "*runtime.mapextra", kind: objabi.KindPtr}
	typs[23] = prototype{size: 0, numElem: 0, fieldName: nil, fieldType: nil, fieldOff: []int64{}, name: "runtime.mapextra", kind: objabi.KindStruct}
	typs[24] = prototype{size: 12, numElem: 3, fieldName: []string{"array", "len", "cap"}, fieldType: []dwarf.Type{&typs[7], &typs[21], &typs[21]}, fieldOff: []int64{0, 4, 8}, name: "runtime.slice", kind: objabi.KindStruct}
	typs[25] = prototype{size: 8, numElem: 2, fieldName: []string{"str", "len"}, fieldType: []dwarf.Type{&typs[26], &typs[21]}, fieldOff: []int64{0, 4}, name: "runtime.stringStructDWARF", kind: objabi.KindStruct}
	typs[26] = prototype{size: 4, elem: &typs[27], name: "*uint8", kind: objabi.KindPtr}
	typs[27] = prototype{size: 1, name: "uint8", kind: objabi.KindUint8}
	return typs[:]
}

func _arm64Prototypes() []prototype {
	var typs [28]prototype
	typs[0] = prototype{size: 0, numElem: 0, fieldName: nil, fieldType: nil, fieldOff: []int64{}, name: "runtime._type", kind: objabi.KindStruct}
	typs[1] = prototype{size: 8, numElem: 1, fieldName: []string{"tophash"}, fieldType: []dwarf.Type{&typs[2]}, fieldOff: []int64{0}, name: "runtime.bmap", kind: objabi.KindStruct}
	typs[2] = prototype{size: 8, elem: &typs[3], numElem: 8, name: "[8]uint8", kind: objabi.KindArray}
	typs[3] = prototype{size: 1, name: "uint8", kind: objabi.KindUint8}
	typs[4] = prototype{size: 0, numElem: 0, fieldName: nil, fieldType: nil, fieldOff: []int64{}, name: "runtime.g", kind: objabi.KindStruct}
	typs[5] = prototype{size: 96, numElem: 11, fieldName: []string{"qcount", "dataqsiz", "buf", "elemsize", "closed", "elemtype", "sendx", "recvx", "recvq", "sendq", "lock"}, fieldType: []dwarf.Type{&typs[6], &typs[6], &typs[7], &typs[8], &typs[9], &typs[10], &typs[6], &typs[6], &typs[11], &typs[11], &typs[18]}, fieldOff: []int64{0, 8, 16, 24, 28, 32, 40, 48, 56, 72, 88}, name: "runtime.hchan", kind: objabi.KindStruct}
	typs[6] = prototype{size: 8, name: "uint", kind: objabi.KindUint}
	typs[7] = prototype{size: 8, name: "unsafe.Pointer", kind: objabi.KindUnsafePointer}
	typs[8] = prototype{size: 2, name: "uint16", kind: objabi.KindUint16}
	typs[9] = prototype{size: 4, name: "uint32", kind: objabi.KindUint32}
	typs[10] = prototype{size: 8, elem: &typs[0], name: "*runtime._type", kind: objabi.KindPtr}
	typs[11] = prototype{size: 16, numElem: 2, fieldName: []string{"first", "last"}, fieldType: []dwarf.Type{&typs[12], &typs[12]}, fieldOff: []int64{0, 8}, name: "runtime.waitq", kind: objabi.KindStruct}
	typs[12] = prototype{size: 8, elem: &typs[13], name: "*runtime.sudog", kind: objabi.KindPtr}
	typs[13] = prototype{size: 88, numElem: 13, fieldName: []string{"g", "next", "prev", "elem", "acquiretime", "releasetime", "ticket", "isSelect", "success", "parent", "waitlink", "waittail", "c"}, fieldType: []dwarf.Type{&typs[14], &typs[12], &typs[12], &typs[7], &typs[15], &typs[15], &typs[9], &typs[16], &typs[16], &typs[12], &typs[12], &typs[12], &typs[17]}, fieldOff: []int64{0, 8, 16, 24, 32, 40, 48, 52, 53, 56, 64, 72, 80}, name: "runtime.sudog", kind: objabi.KindStruct}
	typs[14] = prototype{size: 8, elem: &typs[4], name: "*runtime.g", kind: objabi.KindPtr}
	typs[15] = prototype{size: 8, name: "int64", kind: objabi.KindInt64}
	typs[16] = prototype{size: 1, name: "bool", kind: objabi.KindBool}
	typs[17] = prototype{size: 8, elem: &typs[5], name: "*runtime.hchan", kind: objabi.KindPtr}
	typs[18] = prototype{size: 8, numElem: 1, fieldName: []string{"key"}, fieldType: []dwarf.Type{&typs[19]}, fieldOff: []int64{0}, name: "runtime.mutex", kind: objabi.KindStruct}
	typs[19] = prototype{size: 8, name: "uintptr", kind: objabi.KindUintptr}
	typs[20] = prototype{size: 48, numElem: 9, fieldName: []string{"count", "flags", "B", "noverflow", "hash0", "buckets", "oldbuckets", "nevacuate", "extra"}, fieldType: []dwarf.Type{&typs[21], &typs[3], &typs[3], &typs[8], &typs[9], &typs[7], &typs[7], &typs[19], &typs[22]}, fieldOff: []int64{0, 8, 9, 10, 12, 16, 24, 32, 40}, name: "runtime.hmap", kind: objabi.KindStruct}
	typs[21] = prototype{size: 8, name: "int", kind: objabi.KindInt}
	typs[22] = prototype{size: 8, elem: &typs[23], name: "*runtime.mapextra", kind: objabi.KindPtr}
	typs[23] = prototype{size: 0, numElem: 0, fieldName: nil, fieldType: nil, fieldOff: []int64{}, name: "runtime.mapextra", kind: objabi.KindStruct}
	typs[24] = prototype{size: 24, numElem: 3, fieldName: []string{"array", "len", "cap"}, fieldType: []dwarf.Type{&typs[7], &typs[21], &typs[21]}, fieldOff: []int64{0, 8, 16}, name: "runtime.slice", kind: objabi.KindStruct}
	typs[25] = prototype{size: 16, numElem: 2, fieldName: []string{"str", "len"}, fieldType: []dwarf.Type{&typs[26], &typs[21]}, fieldOff: []int64{0, 8}, name: "runtime.stringStructDWARF", kind: objabi.KindStruct}
	typs[26] = prototype{size: 8, elem: &typs[27], name: "*uint8", kind: objabi.KindPtr}
	typs[27] = prototype{size: 1, name: "uint8", kind: objabi.KindUint8}
	return typs[:]
}

func _amd64Prototypes() []prototype {
	var typs [28]prototype
	typs[0] = prototype{size: 0, numElem: 0, fieldName: nil, fieldType: nil, fieldOff: []int64{}, name: "runtime._type", kind: objabi.KindStruct}
	typs[1] = prototype{size: 8, numElem: 1, fieldName: []string{"tophash"}, fieldType: []dwarf.Type{&typs[2]}, fieldOff: []int64{0}, name: "runtime.bmap", kind: objabi.KindStruct}
	typs[2] = prototype{size: 8, elem: &typs[3], numElem: 8, name: "[8]uint8", kind: objabi.KindArray}
	typs[3] = prototype{size: 1, name: "uint8", kind: objabi.KindUint8}
	typs[4] = prototype{size: 0, numElem: 0, fieldName: nil, fieldType: nil, fieldOff: []int64{}, name: "runtime.g", kind: objabi.KindStruct}
	typs[5] = prototype{size: 96, numElem: 11, fieldName: []string{"qcount", "dataqsiz", "buf", "elemsize", "closed", "elemtype", "sendx", "recvx", "recvq", "sendq", "lock"}, fieldType: []dwarf.Type{&typs[6], &typs[6], &typs[7], &typs[8], &typs[9], &typs[10], &typs[6], &typs[6], &typs[11], &typs[11], &typs[18]}, fieldOff: []int64{0, 8, 16, 24, 28, 32, 40, 48, 56, 72, 88}, name: "runtime.hchan", kind: objabi.KindStruct}
	typs[6] = prototype{size: 8, name: "uint", kind: objabi.KindUint}
	typs[7] = prototype{size: 8, name: "unsafe.Pointer", kind: objabi.KindUnsafePointer}
	typs[8] = prototype{size: 2, name: "uint16", kind: objabi.KindUint16}
	typs[9] = prototype{size: 4, name: "uint32", kind: objabi.KindUint32}
	typs[10] = prototype{size: 8, elem: &typs[0], name: "*runtime._type", kind: objabi.KindPtr}
	typs[11] = prototype{size: 16, numElem: 2, fieldName: []string{"first", "last"}, fieldType: []dwarf.Type{&typs[12], &typs[12]}, fieldOff: []int64{0, 8}, name: "runtime.waitq", kind: objabi.KindStruct}
	typs[12] = prototype{size: 8, elem: &typs[13], name: "*runtime.sudog", kind: objabi.KindPtr}
	typs[13] = prototype{size: 88, numElem: 13, fieldName: []string{"g", "next", "prev", "elem", "acquiretime", "releasetime", "ticket", "isSelect", "success", "parent", "waitlink", "waittail", "c"}, fieldType: []dwarf.Type{&typs[14], &typs[12], &typs[12], &typs[7], &typs[15], &typs[15], &typs[9], &typs[16], &typs[16], &typs[12], &typs[12], &typs[12], &typs[17]}, fieldOff: []int64{0, 8, 16, 24, 32, 40, 48, 52, 53, 56, 64, 72, 80}, name: "runtime.sudog", kind: objabi.KindStruct}
	typs[14] = prototype{size: 8, elem: &typs[4], name: "*runtime.g", kind: objabi.KindPtr}
	typs[15] = prototype{size: 8, name: "int64", kind: objabi.KindInt64}
	typs[16] = prototype{size: 1, name: "bool", kind: objabi.KindBool}
	typs[17] = prototype{size: 8, elem: &typs[5], name: "*runtime.hchan", kind: objabi.KindPtr}
	typs[18] = prototype{size: 8, numElem: 1, fieldName: []string{"key"}, fieldType: []dwarf.Type{&typs[19]}, fieldOff: []int64{0}, name: "runtime.mutex", kind: objabi.KindStruct}
	typs[19] = prototype{size: 8, name: "uintptr", kind: objabi.KindUintptr}
	typs[20] = prototype{size: 48, numElem: 9, fieldName: []string{"count", "flags", "B", "noverflow", "hash0", "buckets", "oldbuckets", "nevacuate", "extra"}, fieldType: []dwarf.Type{&typs[21], &typs[3], &typs[3], &typs[8], &typs[9], &typs[7], &typs[7], &typs[19], &typs[22]}, fieldOff: []int64{0, 8, 9, 10, 12, 16, 24, 32, 40}, name: "runtime.hmap", kind: objabi.KindStruct}
	typs[21] = prototype{size: 8, name: "int", kind: objabi.KindInt}
	typs[22] = prototype{size: 8, elem: &typs[23], name: "*runtime.mapextra", kind: objabi.KindPtr}
	typs[23] = prototype{size: 0, numElem: 0, fieldName: nil, fieldType: nil, fieldOff: []int64{}, name: "runtime.mapextra", kind: objabi.KindStruct}
	typs[24] = prototype{size: 24, numElem: 3, fieldName: []string{"array", "len", "cap"}, fieldType: []dwarf.Type{&typs[7], &typs[21], &typs[21]}, fieldOff: []int64{0, 8, 16}, name: "runtime.slice", kind: objabi.KindStruct}
	typs[25] = prototype{size: 16, numElem: 2, fieldName: []string{"str", "len"}, fieldType: []dwarf.Type{&typs[26], &typs[21]}, fieldOff: []int64{0, 8}, name: "runtime.stringStructDWARF", kind: objabi.KindStruct}
	typs[26] = prototype{size: 8, elem: &typs[27], name: "*uint8", kind: objabi.KindPtr}
	typs[27] = prototype{size: 1, name: "uint8", kind: objabi.KindUint8}
	return typs[:]
}

func _amd64p32Prototypes() []prototype {
	var typs [28]prototype
	typs[0] = prototype{size: 0, numElem: 0, fieldName: nil, fieldType: nil, fieldOff: []int64{}, name: "runtime._type", kind: objabi.KindStruct}
	typs[1] = prototype{size: 8, numElem: 1, fieldName: []string{"tophash"}, fieldType: []dwarf.Type{&typs[2]}, fieldOff: []int64{0}, name: "runtime.bmap", kind: objabi.KindStruct}
	typs[2] = prototype{size: 8, elem: &typs[3], numElem: 8, name: "[8]uint8", kind: objabi.KindArray}
	typs[3] = prototype{size: 1, name: "uint8", kind: objabi.KindUint8}
	typs[4] = prototype{size: 0, numElem: 0, fieldName: nil, fieldType: nil, fieldOff: []int64{}, name: "runtime.g", kind: objabi.KindStruct}
	typs[5] = prototype{size: 52, numElem: 11, fieldName: []string{"qcount", "dataqsiz", "buf", "elemsize", "closed", "elemtype", "sendx", "recvx", "recvq", "sendq", "lock"}, fieldType: []dwarf.Type{&typs[6], &typs[6], &typs[7], &typs[8], &typs[9], &typs[10], &typs[6], &typs[6], &typs[11], &typs[11], &typs[18]}, fieldOff: []int64{0, 4, 8, 12, 16, 20, 24, 28, 32, 40, 48}, name: "runtime.hchan", kind: objabi.KindStruct}
	typs[6] = prototype{size: 4, name: "uint", kind: objabi.KindUint}
	typs[7] = prototype{size: 4, name: "unsafe.Pointer", kind: objabi.KindUnsafePointer}
	typs[8] = prototype{size: 2, name: "uint16", kind: objabi.KindUint16}
	typs[9] = prototype{size: 4, name: "uint32", kind: objabi.KindUint32}
	typs[10] = prototype{size: 4, elem: &typs[0], name: "*runtime._type", kind: objabi.KindPtr}
	typs[11] = prototype{size: 8, numElem: 2, fieldName: []string{"first", "last"}, fieldType: []dwarf.Type{&typs[12], &typs[12]}, fieldOff: []int64{0, 4}, name: "runtime.waitq", kind: objabi.KindStruct}
	typs[12] = prototype{size: 4, elem: &typs[13], name: "*runtime.sudog", kind: objabi.KindPtr}
	typs[13] = prototype{size: 56, numElem: 13, fieldName: []string{"g", "next", "prev", "elem", "acquiretime", "releasetime", "ticket", "isSelect", "success", "parent", "waitlink", "waittail", "c"}, fieldType: []dwarf.Type{&typs[14], &typs[12], &typs[12], &typs[7], &typs[15], &typs[15], &typs[9], &typs[16], &typs[16], &typs[12], &typs[12], &typs[12], &typs[17]}, fieldOff: []int64{0, 4, 8, 12, 16, 24, 32, 36, 37, 40, 44, 48, 52}, name: "runtime.sudog", kind: objabi.KindStruct}
	typs[14] = prototype{size: 4, elem: &typs[4], name: "*runtime.g", kind: objabi.KindPtr}
	typs[15] = prototype{size: 8, name: "int64", kind: objabi.KindInt64}
	typs[16] = prototype{size: 1, name: "bool", kind: objabi.KindBool}
	typs[17] = prototype{size: 4, elem: &typs[5], name: "*runtime.hchan", kind: objabi.KindPtr}
	typs[18] = prototype{size: 4, numElem: 1, fieldName: []string{"key"}, fieldType: []dwarf.Type{&typs[19]}, fieldOff: []int64{0}, name: "runtime.mutex", kind: objabi.KindStruct}
	typs[19] = prototype{size: 4, name: "uintptr", kind: objabi.KindUintptr}
	typs[20] = prototype{size: 28, numElem: 9, fieldName: []string{"count", "flags", "B", "noverflow", "hash0", "buckets", "oldbuckets", "nevacuate", "extra"}, fieldType: []dwarf.Type{&typs[21], &typs[3], &typs[3], &typs[8], &typs[9], &typs[7], &typs[7], &typs[19], &typs[22]}, fieldOff: []int64{0, 4, 5, 6, 8, 12, 16, 20, 24}, name: "runtime.hmap", kind: objabi.KindStruct}
	typs[21] = prototype{size: 4, name: "int", kind: objabi.KindInt}
	typs[22] = prototype{size: 4, elem: &typs[23], name: "*runtime.mapextra", kind: objabi.KindPtr}
	typs[23] = prototype{size: 0, numElem: 0, fieldName: nil, fieldType: nil, fieldOff: []int64{}, name: "runtime.mapextra", kind: objabi.KindStruct}
	typs[24] = prototype{size: 12, numElem: 3, fieldName: []string{"array", "len", "cap"}, fieldType: []dwarf.Type{&typs[7], &typs[21], &typs[21]}, fieldOff: []int64{0, 4, 8}, name: "runtime.slice", kind: objabi.KindStruct}
	typs[25] = prototype{size: 8, numElem: 2, fieldName: []string{"str", "len"}, fieldType: []dwarf.Type{&typs[26], &typs[21]}, fieldOff: []int64{0, 4}, name: "runtime.stringStructDWARF", kind: objabi.KindStruct}
	typs[26] = prototype{size: 4, elem: &typs[27], name: "*uint8", kind: objabi.KindPtr}
	typs[27] = prototype{size: 1, name: "uint8", kind: objabi.KindUint8}
	return typs[:]
}

func _mipsPrototypes() []prototype {
	var typs [28]prototype
	typs[0] = prototype{size: 0, numElem: 0, fieldName: nil, fieldType: nil, fieldOff: []int64{}, name: "runtime._type", kind: objabi.KindStruct}
	typs[1] = prototype{size: 8, numElem: 1, fieldName: []string{"tophash"}, fieldType: []dwarf.Type{&typs[2]}, fieldOff: []int64{0}, name: "runtime.bmap", kind: objabi.KindStruct}
	typs[2] = prototype{size: 8, elem: &typs[3], numElem: 8, name: "[8]uint8", kind: objabi.KindArray}
	typs[3] = prototype{size: 1, name: "uint8", kind: objabi.KindUint8}
	typs[4] = prototype{size: 0, numElem: 0, fieldName: nil, fieldType: nil, fieldOff: []int64{}, name: "runtime.g", kind: objabi.KindStruct}
	typs[5] = prototype{size: 52, numElem: 11, fieldName: []string{"qcount", "dataqsiz", "buf", "elemsize", "closed", "elemtype", "sendx", "recvx", "recvq", "sendq", "lock"}, fieldType: []dwarf.Type{&typs[6], &typs[6], &typs[7], &typs[8], &typs[9], &typs[10], &typs[6], &typs[6], &typs[11], &typs[11], &typs[18]}, fieldOff: []int64{0, 4, 8, 12, 16, 20, 24, 28, 32, 40, 48}, name: "runtime.hchan", kind: objabi.KindStruct}
	typs[6] = prototype{size: 4, name: "uint", kind: objabi.KindUint}
	typs[7] = prototype{size: 4, name: "unsafe.Pointer", kind: objabi.KindUnsafePointer}
	typs[8] = prototype{size: 2, name: "uint16", kind: objabi.KindUint16}
	typs[9] = prototype{size: 4, name: "uint32", kind: objabi.KindUint32}
	typs[10] = prototype{size: 4, elem: &typs[0], name: "*runtime._type", kind: objabi.KindPtr}
	typs[11] = prototype{size: 8, numElem: 2, fieldName: []string{"first", "last"}, fieldType: []dwarf.Type{&typs[12], &typs[12]}, fieldOff: []int64{0, 4}, name: "runtime.waitq", kind: objabi.KindStruct}
	typs[12] = prototype{size: 4, elem: &typs[13], name: "*runtime.sudog", kind: objabi.KindPtr}
	typs[13] = prototype{size: 56, numElem: 13, fieldName: []string{"g", "next", "prev", "elem", "acquiretime", "releasetime", "ticket", "isSelect", "success", "parent", "waitlink", "waittail", "c"}, fieldType: []dwarf.Type{&typs[14], &typs[12], &typs[12], &typs[7], &typs[15], &typs[15], &typs[9], &typs[16], &typs[16], &typs[12], &typs[12], &typs[12], &typs[17]}, fieldOff: []int64{0, 4, 8, 12, 16, 24, 32, 36, 37, 40, 44, 48, 52}, name: "runtime.sudog", kind: objabi.KindStruct}
	typs[14] = prototype{size: 4, elem: &typs[4], name: "*runtime.g", kind: objabi.KindPtr}
	typs[15] = prototype{size: 8, name: "int64", kind: objabi.KindInt64}
	typs[16] = prototype{size: 1, name: "bool", kind: objabi.KindBool}
	typs[17] = prototype{size: 4, elem: &typs[5], name: "*runtime.hchan", kind: objabi.KindPtr}
	typs[18] = prototype{size: 4, numElem: 1, fieldName: []string{"key"}, fieldType: []dwarf.Type{&typs[19]}, fieldOff: []int64{0}, name: "runtime.mutex", kind: objabi.KindStruct}
	typs[19] = prototype{size: 4, name: "uintptr", kind: objabi.KindUintptr}
	typs[20] = prototype{size: 28, numElem: 9, fieldName: []string{"count", "flags", "B", "noverflow", "hash0", "buckets", "oldbuckets", "nevacuate", "extra"}, fieldType: []dwarf.Type{&typs[21], &typs[3], &typs[3], &typs[8], &typs[9], &typs[7], &typs[7], &typs[19], &typs[22]}, fieldOff: []int64{0, 4, 5, 6, 8, 12, 16, 20, 24}, name: "runtime.hmap", kind: objabi.KindStruct}
	typs[21] = prototype{size: 4, name: "int", kind: objabi.KindInt}
	typs[22] = prototype{size: 4, elem: &typs[23], name: "*runtime.mapextra", kind: objabi.KindPtr}
	typs[23] = prototype{size: 0, numElem: 0, fieldName: nil, fieldType: nil, fieldOff: []int64{}, name: "runtime.mapextra", kind: objabi.KindStruct}
	typs[24] = prototype{size: 12, numElem: 3, fieldName: []string{"array", "len", "cap"}, fieldType: []dwarf.Type{&typs[7], &typs[21], &typs[21]}, fieldOff: []int64{0, 4, 8}, name: "runtime.slice", kind: objabi.KindStruct}
	typs[25] = prototype{size: 8, numElem: 2, fieldName: []string{"str", "len"}, fieldType: []dwarf.Type{&typs[26], &typs[21]}, fieldOff: []int64{0, 4}, name: "runtime.stringStructDWARF", kind: objabi.KindStruct}
	typs[26] = prototype{size: 4, elem: &typs[27], name: "*uint8", kind: objabi.KindPtr}
	typs[27] = prototype{size: 1, name: "uint8", kind: objabi.KindUint8}
	return typs[:]
}

func _mipslePrototypes() []prototype {
	var typs [28]prototype
	typs[0] = prototype{size: 0, numElem: 0, fieldName: nil, fieldType: nil, fieldOff: []int64{}, name: "runtime._type", kind: objabi.KindStruct}
	typs[1] = prototype{size: 8, numElem: 1, fieldName: []string{"tophash"}, fieldType: []dwarf.Type{&typs[2]}, fieldOff: []int64{0}, name: "runtime.bmap", kind: objabi.KindStruct}
	typs[2] = prototype{size: 8, elem: &typs[3], numElem: 8, name: "[8]uint8", kind: objabi.KindArray}
	typs[3] = prototype{size: 1, name: "uint8", kind: objabi.KindUint8}
	typs[4] = prototype{size: 0, numElem: 0, fieldName: nil, fieldType: nil, fieldOff: []int64{}, name: "runtime.g", kind: objabi.KindStruct}
	typs[5] = prototype{size: 52, numElem: 11, fieldName: []string{"qcount", "dataqsiz", "buf", "elemsize", "closed", "elemtype", "sendx", "recvx", "recvq", "sendq", "lock"}, fieldType: []dwarf.Type{&typs[6], &typs[6], &typs[7], &typs[8], &typs[9], &typs[10], &typs[6], &typs[6], &typs[11], &typs[11], &typs[18]}, fieldOff: []int64{0, 4, 8, 12, 16, 20, 24, 28, 32, 40, 48}, name: "runtime.hchan", kind: objabi.KindStruct}
	typs[6] = prototype{size: 4, name: "uint", kind: objabi.KindUint}
	typs[7] = prototype{size: 4, name: "unsafe.Pointer", kind: objabi.KindUnsafePointer}
	typs[8] = prototype{size: 2, name: "uint16", kind: objabi.KindUint16}
	typs[9] = prototype{size: 4, name: "uint32", kind: objabi.KindUint32}
	typs[10] = prototype{size: 4, elem: &typs[0], name: "*runtime._type", kind: objabi.KindPtr}
	typs[11] = prototype{size: 8, numElem: 2, fieldName: []string{"first", "last"}, fieldType: []dwarf.Type{&typs[12], &typs[12]}, fieldOff: []int64{0, 4}, name: "runtime.waitq", kind: objabi.KindStruct}
	typs[12] = prototype{size: 4, elem: &typs[13], name: "*runtime.sudog", kind: objabi.KindPtr}
	typs[13] = prototype{size: 56, numElem: 13, fieldName: []string{"g", "next", "prev", "elem", "acquiretime", "releasetime", "ticket", "isSelect", "success", "parent", "waitlink", "waittail", "c"}, fieldType: []dwarf.Type{&typs[14], &typs[12], &typs[12], &typs[7], &typs[15], &typs[15], &typs[9], &typs[16], &typs[16], &typs[12], &typs[12], &typs[12], &typs[17]}, fieldOff: []int64{0, 4, 8, 12, 16, 24, 32, 36, 37, 40, 44, 48, 52}, name: "runtime.sudog", kind: objabi.KindStruct}
	typs[14] = prototype{size: 4, elem: &typs[4], name: "*runtime.g", kind: objabi.KindPtr}
	typs[15] = prototype{size: 8, name: "int64", kind: objabi.KindInt64}
	typs[16] = prototype{size: 1, name: "bool", kind: objabi.KindBool}
	typs[17] = prototype{size: 4, elem: &typs[5], name: "*runtime.hchan", kind: objabi.KindPtr}
	typs[18] = prototype{size: 4, numElem: 1, fieldName: []string{"key"}, fieldType: []dwarf.Type{&typs[19]}, fieldOff: []int64{0}, name: "runtime.mutex", kind: objabi.KindStruct}
	typs[19] = prototype{size: 4, name: "uintptr", kind: objabi.KindUintptr}
	typs[20] = prototype{size: 28, numElem: 9, fieldName: []string{"count", "flags", "B", "noverflow", "hash0", "buckets", "oldbuckets", "nevacuate", "extra"}, fieldType: []dwarf.Type{&typs[21], &typs[3], &typs[3], &typs[8], &typs[9], &typs[7], &typs[7], &typs[19], &typs[22]}, fieldOff: []int64{0, 4, 5, 6, 8, 12, 16, 20, 24}, name: "runtime.hmap", kind: objabi.KindStruct}
	typs[21] = prototype{size: 4, name: "int", kind: objabi.KindInt}
	typs[22] = prototype{size: 4, elem: &typs[23], name: "*runtime.mapextra", kind: objabi.KindPtr}
	typs[23] = prototype{size: 0, numElem: 0, fieldName: nil, fieldType: nil, fieldOff: []int64{}, name: "runtime.mapextra", kind: objabi.KindStruct}
	typs[24] = prototype{size: 12, numElem: 3, fieldName: []string{"array", "len", "cap"}, fieldType: []dwarf.Type{&typs[7], &typs[21], &typs[21]}, fieldOff: []int64{0, 4, 8}, name: "runtime.slice", kind: objabi.KindStruct}
	typs[25] = prototype{size: 8, numElem: 2, fieldName: []string{"str", "len"}, fieldType: []dwarf.Type{&typs[26], &typs[21]}, fieldOff: []int64{0, 4}, name: "runtime.stringStructDWARF", kind: objabi.KindStruct}
	typs[26] = prototype{size: 4, elem: &typs[27], name: "*uint8", kind: objabi.KindPtr}
	typs[27] = prototype{size: 1, name: "uint8", kind: objabi.KindUint8}
	return typs[:]
}

func _mips64Prototypes() []prototype {
	var typs [28]prototype
	typs[0] = prototype{size: 0, numElem: 0, fieldName: nil, fieldType: nil, fieldOff: []int64{}, name: "runtime._type", kind: objabi.KindStruct}
	typs[1] = prototype{size: 8, numElem: 1, fieldName: []string{"tophash"}, fieldType: []dwarf.Type{&typs[2]}, fieldOff: []int64{0}, name: "runtime.bmap", kind: objabi.KindStruct}
	typs[2] = prototype{size: 8, elem: &typs[3], numElem: 8, name: "[8]uint8", kind: objabi.KindArray}
	typs[3] = prototype{size: 1, name: "uint8", kind: objabi.KindUint8}
	typs[4] = prototype{size: 0, numElem: 0, fieldName: nil, fieldType: nil, fieldOff: []int64{}, name: "runtime.g", kind: objabi.KindStruct}
	typs[5] = prototype{size: 96, numElem: 11, fieldName: []string{"qcount", "dataqsiz", "buf", "elemsize", "closed", "elemtype", "sendx", "recvx", "recvq", "sendq", "lock"}, fieldType: []dwarf.Type{&typs[6], &typs[6], &typs[7], &typs[8], &typs[9], &typs[10], &typs[6], &typs[6], &typs[11], &typs[11], &typs[18]}, fieldOff: []int64{0, 8, 16, 24, 28, 32, 40, 48, 56, 72, 88}, name: "runtime.hchan", kind: objabi.KindStruct}
	typs[6] = prototype{size: 8, name: "uint", kind: objabi.KindUint}
	typs[7] = prototype{size: 8, name: "unsafe.Pointer", kind: objabi.KindUnsafePointer}
	typs[8] = prototype{size: 2, name: "uint16", kind: objabi.KindUint16}
	typs[9] = prototype{size: 4, name: "uint32", kind: objabi.KindUint32}
	typs[10] = prototype{size: 8, elem: &typs[0], name: "*runtime._type", kind: objabi.KindPtr}
	typs[11] = prototype{size: 16, numElem: 2, fieldName: []string{"first", "last"}, fieldType: []dwarf.Type{&typs[12], &typs[12]}, fieldOff: []int64{0, 8}, name: "runtime.waitq", kind: objabi.KindStruct}
	typs[12] = prototype{size: 8, elem: &typs[13], name: "*runtime.sudog", kind: objabi.KindPtr}
	typs[13] = prototype{size: 88, numElem: 13, fieldName: []string{"g", "next", "prev", "elem", "acquiretime", "releasetime", "ticket", "isSelect", "success", "parent", "waitlink", "waittail", "c"}, fieldType: []dwarf.Type{&typs[14], &typs[12], &typs[12], &typs[7], &typs[15], &typs[15], &typs[9], &typs[16], &typs[16], &typs[12], &typs[12], &typs[12], &typs[17]}, fieldOff: []int64{0, 8, 16, 24, 32, 40, 48, 52, 53, 56, 64, 72, 80}, name: "runtime.sudog", kind: objabi.KindStruct}
	typs[14] = prototype{size: 8, elem: &typs[4], name: "*runtime.g", kind: objabi.KindPtr}
	typs[15] = prototype{size: 8, name: "int64", kind: objabi.KindInt64}
	typs[16] = prototype{size: 1, name: "bool", kind: objabi.KindBool}
	typs[17] = prototype{size: 8, elem: &typs[5], name: "*runtime.hchan", kind: objabi.KindPtr}
	typs[18] = prototype{size: 8, numElem: 1, fieldName: []string{"key"}, fieldType: []dwarf.Type{&typs[19]}, fieldOff: []int64{0}, name: "runtime.mutex", kind: objabi.KindStruct}
	typs[19] = prototype{size: 8, name: "uintptr", kind: objabi.KindUintptr}
	typs[20] = prototype{size: 48, numElem: 9, fieldName: []string{"count", "flags", "B", "noverflow", "hash0", "buckets", "oldbuckets", "nevacuate", "extra"}, fieldType: []dwarf.Type{&typs[21], &typs[3], &typs[3], &typs[8], &typs[9], &typs[7], &typs[7], &typs[19], &typs[22]}, fieldOff: []int64{0, 8, 9, 10, 12, 16, 24, 32, 40}, name: "runtime.hmap", kind: objabi.KindStruct}
	typs[21] = prototype{size: 8, name: "int", kind: objabi.KindInt}
	typs[22] = prototype{size: 8, elem: &typs[23], name: "*runtime.mapextra", kind: objabi.KindPtr}
	typs[23] = prototype{size: 0, numElem: 0, fieldName: nil, fieldType: nil, fieldOff: []int64{}, name: "runtime.mapextra", kind: objabi.KindStruct}
	typs[24] = prototype{size: 24, numElem: 3, fieldName: []string{"array", "len", "cap"}, fieldType: []dwarf.Type{&typs[7], &typs[21], &typs[21]}, fieldOff: []int64{0, 8, 16}, name: "runtime.slice", kind: objabi.KindStruct}
	typs[25] = prototype{size: 16, numElem: 2, fieldName: []string{"str", "len"}, fieldType: []dwarf.Type{&typs[26], &typs[21]}, fieldOff: []int64{0, 8}, name: "runtime.stringStructDWARF", kind: objabi.KindStruct}
	typs[26] = prototype{size: 8, elem: &typs[27], name: "*uint8", kind: objabi.KindPtr}
	typs[27] = prototype{size: 1, name: "uint8", kind: objabi.KindUint8}
	return typs[:]
}

func _mips64lePrototypes() []prototype {
	var typs [28]prototype
	typs[0] = prototype{size: 0, numElem: 0, fieldName: nil, fieldType: nil, fieldOff: []int64{}, name: "runtime._type", kind: objabi.KindStruct}
	typs[1] = prototype{size: 8, numElem: 1, fieldName: []string{"tophash"}, fieldType: []dwarf.Type{&typs[2]}, fieldOff: []int64{0}, name: "runtime.bmap", kind: objabi.KindStruct}
	typs[2] = prototype{size: 8, elem: &typs[3], numElem: 8, name: "[8]uint8", kind: objabi.KindArray}
	typs[3] = prototype{size: 1, name: "uint8", kind: objabi.KindUint8}
	typs[4] = prototype{size: 0, numElem: 0, fieldName: nil, fieldType: nil, fieldOff: []int64{}, name: "runtime.g", kind: objabi.KindStruct}
	typs[5] = prototype{size: 96, numElem: 11, fieldName: []string{"qcount", "dataqsiz", "buf", "elemsize", "closed", "elemtype", "sendx", "recvx", "recvq", "sendq", "lock"}, fieldType: []dwarf.Type{&typs[6], &typs[6], &typs[7], &typs[8], &typs[9], &typs[10], &typs[6], &typs[6], &typs[11], &typs[11], &typs[18]}, fieldOff: []int64{0, 8, 16, 24, 28, 32, 40, 48, 56, 72, 88}, name: "runtime.hchan", kind: objabi.KindStruct}
	typs[6] = prototype{size: 8, name: "uint", kind: objabi.KindUint}
	typs[7] = prototype{size: 8, name: "unsafe.Pointer", kind: objabi.KindUnsafePointer}
	typs[8] = prototype{size: 2, name: "uint16", kind: objabi.KindUint16}
	typs[9] = prototype{size: 4, name: "uint32", kind: objabi.KindUint32}
	typs[10] = prototype{size: 8, elem: &typs[0], name: "*runtime._type", kind: objabi.KindPtr}
	typs[11] = prototype{size: 16, numElem: 2, fieldName: []string{"first", "last"}, fieldType: []dwarf.Type{&typs[12], &typs[12]}, fieldOff: []int64{0, 8}, name: "runtime.waitq", kind: objabi.KindStruct}
	typs[12] = prototype{size: 8, elem: &typs[13], name: "*runtime.sudog", kind: objabi.KindPtr}
	typs[13] = prototype{size: 88, numElem: 13, fieldName: []string{"g", "next", "prev", "elem", "acquiretime", "releasetime", "ticket", "isSelect", "success", "parent", "waitlink", "waittail", "c"}, fieldType: []dwarf.Type{&typs[14], &typs[12], &typs[12], &typs[7], &typs[15], &typs[15], &typs[9], &typs[16], &typs[16], &typs[12], &typs[12], &typs[12], &typs[17]}, fieldOff: []int64{0, 8, 16, 24, 32, 40, 48, 52, 53, 56, 64, 72, 80}, name: "runtime.sudog", kind: objabi.KindStruct}
	typs[14] = prototype{size: 8, elem: &typs[4], name: "*runtime.g", kind: objabi.KindPtr}
	typs[15] = prototype{size: 8, name: "int64", kind: objabi.KindInt64}
	typs[16] = prototype{size: 1, name: "bool", kind: objabi.KindBool}
	typs[17] = prototype{size: 8, elem: &typs[5], name: "*runtime.hchan", kind: objabi.KindPtr}
	typs[18] = prototype{size: 8, numElem: 1, fieldName: []string{"key"}, fieldType: []dwarf.Type{&typs[19]}, fieldOff: []int64{0}, name: "runtime.mutex", kind: objabi.KindStruct}
	typs[19] = prototype{size: 8, name: "uintptr", kind: objabi.KindUintptr}
	typs[20] = prototype{size: 48, numElem: 9, fieldName: []string{"count", "flags", "B", "noverflow", "hash0", "buckets", "oldbuckets", "nevacuate", "extra"}, fieldType: []dwarf.Type{&typs[21], &typs[3], &typs[3], &typs[8], &typs[9], &typs[7], &typs[7], &typs[19], &typs[22]}, fieldOff: []int64{0, 8, 9, 10, 12, 16, 24, 32, 40}, name: "runtime.hmap", kind: objabi.KindStruct}
	typs[21] = prototype{size: 8, name: "int", kind: objabi.KindInt}
	typs[22] = prototype{size: 8, elem: &typs[23], name: "*runtime.mapextra", kind: objabi.KindPtr}
	typs[23] = prototype{size: 0, numElem: 0, fieldName: nil, fieldType: nil, fieldOff: []int64{}, name: "runtime.mapextra", kind: objabi.KindStruct}
	typs[24] = prototype{size: 24, numElem: 3, fieldName: []string{"array", "len", "cap"}, fieldType: []dwarf.Type{&typs[7], &typs[21], &typs[21]}, fieldOff: []int64{0, 8, 16}, name: "runtime.slice", kind: objabi.KindStruct}
	typs[25] = prototype{size: 16, numElem: 2, fieldName: []string{"str", "len"}, fieldType: []dwarf.Type{&typs[26], &typs[21]}, fieldOff: []int64{0, 8}, name: "runtime.stringStructDWARF", kind: objabi.KindStruct}
	typs[26] = prototype{size: 8, elem: &typs[27], name: "*uint8", kind: objabi.KindPtr}
	typs[27] = prototype{size: 1, name: "uint8", kind: objabi.KindUint8}
	return typs[:]
}

func _ppc64Prototypes() []prototype {
	var typs [28]prototype
	typs[0] = prototype{size: 0, numElem: 0, fieldName: nil, fieldType: nil, fieldOff: []int64{}, name: "runtime._type", kind: objabi.KindStruct}
	typs[1] = prototype{size: 8, numElem: 1, fieldName: []string{"tophash"}, fieldType: []dwarf.Type{&typs[2]}, fieldOff: []int64{0}, name: "runtime.bmap", kind: objabi.KindStruct}
	typs[2] = prototype{size: 8, elem: &typs[3], numElem: 8, name: "[8]uint8", kind: objabi.KindArray}
	typs[3] = prototype{size: 1, name: "uint8", kind: objabi.KindUint8}
	typs[4] = prototype{size: 0, numElem: 0, fieldName: nil, fieldType: nil, fieldOff: []int64{}, name: "runtime.g", kind: objabi.KindStruct}
	typs[5] = prototype{size: 96, numElem: 11, fieldName: []string{"qcount", "dataqsiz", "buf", "elemsize", "closed", "elemtype", "sendx", "recvx", "recvq", "sendq", "lock"}, fieldType: []dwarf.Type{&typs[6], &typs[6], &typs[7], &typs[8], &typs[9], &typs[10], &typs[6], &typs[6], &typs[11], &typs[11], &typs[18]}, fieldOff: []int64{0, 8, 16, 24, 28, 32, 40, 48, 56, 72, 88}, name: "runtime.hchan", kind: objabi.KindStruct}
	typs[6] = prototype{size: 8, name: "uint", kind: objabi.KindUint}
	typs[7] = prototype{size: 8, name: "unsafe.Pointer", kind: objabi.KindUnsafePointer}
	typs[8] = prototype{size: 2, name: "uint16", kind: objabi.KindUint16}
	typs[9] = prototype{size: 4, name: "uint32", kind: objabi.KindUint32}
	typs[10] = prototype{size: 8, elem: &typs[0], name: "*runtime._type", kind: objabi.KindPtr}
	typs[11] = prototype{size: 16, numElem: 2, fieldName: []string{"first", "last"}, fieldType: []dwarf.Type{&typs[12], &typs[12]}, fieldOff: []int64{0, 8}, name: "runtime.waitq", kind: objabi.KindStruct}
	typs[12] = prototype{size: 8, elem: &typs[13], name: "*runtime.sudog", kind: objabi.KindPtr}
	typs[13] = prototype{size: 88, numElem: 13, fieldName: []string{"g", "next", "prev", "elem", "acquiretime", "releasetime", "ticket", "isSelect", "success", "parent", "waitlink", "waittail", "c"}, fieldType: []dwarf.Type{&typs[14], &typs[12], &typs[12], &typs[7], &typs[15], &typs[15], &typs[9], &typs[16], &typs[16], &typs[12], &typs[12], &typs[12], &typs[17]}, fieldOff: []int64{0, 8, 16, 24, 32, 40, 48, 52, 53, 56, 64, 72, 80}, name: "runtime.sudog", kind: objabi.KindStruct}
	typs[14] = prototype{size: 8, elem: &typs[4], name: "*runtime.g", kind: objabi.KindPtr}
	typs[15] = prototype{size: 8, name: "int64", kind: objabi.KindInt64}
	typs[16] = prototype{size: 1, name: "bool", kind: objabi.KindBool}
	typs[17] = prototype{size: 8, elem: &typs[5], name: "*runtime.hchan", kind: objabi.KindPtr}
	typs[18] = prototype{size: 8, numElem: 1, fieldName: []string{"key"}, fieldType: []dwarf.Type{&typs[19]}, fieldOff: []int64{0}, name: "runtime.mutex", kind: objabi.KindStruct}
	typs[19] = prototype{size: 8, name: "uintptr", kind: objabi.KindUintptr}
	typs[20] = prototype{size: 48, numElem: 9, fieldName: []string{"count", "flags", "B", "noverflow", "hash0", "buckets", "oldbuckets", "nevacuate", "extra"}, fieldType: []dwarf.Type{&typs[21], &typs[3], &typs[3], &typs[8], &typs[9], &typs[7], &typs[7], &typs[19], &typs[22]}, fieldOff: []int64{0, 8, 9, 10, 12, 16, 24, 32, 40}, name: "runtime.hmap", kind: objabi.KindStruct}
	typs[21] = prototype{size: 8, name: "int", kind: objabi.KindInt}
	typs[22] = prototype{size: 8, elem: &typs[23], name: "*runtime.mapextra", kind: objabi.KindPtr}
	typs[23] = prototype{size: 0, numElem: 0, fieldName: nil, fieldType: nil, fieldOff: []int64{}, name: "runtime.mapextra", kind: objabi.KindStruct}
	typs[24] = prototype{size: 24, numElem: 3, fieldName: []string{"array", "len", "cap"}, fieldType: []dwarf.Type{&typs[7], &typs[21], &typs[21]}, fieldOff: []int64{0, 8, 16}, name: "runtime.slice", kind: objabi.KindStruct}
	typs[25] = prototype{size: 16, numElem: 2, fieldName: []string{"str", "len"}, fieldType: []dwarf.Type{&typs[26], &typs[21]}, fieldOff: []int64{0, 8}, name: "runtime.stringStructDWARF", kind: objabi.KindStruct}
	typs[26] = prototype{size: 8, elem: &typs[27], name: "*uint8", kind: objabi.KindPtr}
	typs[27] = prototype{size: 1, name: "uint8", kind: objabi.KindUint8}
	return typs[:]
}

func _ppc64lePrototypes() []prototype {
	var typs [28]prototype
	typs[0] = prototype{size: 0, numElem: 0, fieldName: nil, fieldType: nil, fieldOff: []int64{}, name: "runtime._type", kind: objabi.KindStruct}
	typs[1] = prototype{size: 8, numElem: 1, fieldName: []string{"tophash"}, fieldType: []dwarf.Type{&typs[2]}, fieldOff: []int64{0}, name: "runtime.bmap", kind: objabi.KindStruct}
	typs[2] = prototype{size: 8, elem: &typs[3], numElem: 8, name: "[8]uint8", kind: objabi.KindArray}
	typs[3] = prototype{size: 1, name: "uint8", kind: objabi.KindUint8}
	typs[4] = prototype{size: 0, numElem: 0, fieldName: nil, fieldType: nil, fieldOff: []int64{}, name: "runtime.g", kind: objabi.KindStruct}
	typs[5] = prototype{size: 96, numElem: 11, fieldName: []string{"qcount", "dataqsiz", "buf", "elemsize", "closed", "elemtype", "sendx", "recvx", "recvq", "sendq", "lock"}, fieldType: []dwarf.Type{&typs[6], &typs[6], &typs[7], &typs[8], &typs[9], &typs[10], &typs[6], &typs[6], &typs[11], &typs[11], &typs[18]}, fieldOff: []int64{0, 8, 16, 24, 28, 32, 40, 48, 56, 72, 88}, name: "runtime.hchan", kind: objabi.KindStruct}
	typs[6] = prototype{size: 8, name: "uint", kind: objabi.KindUint}
	typs[7] = prototype{size: 8, name: "unsafe.Pointer", kind: objabi.KindUnsafePointer}
	typs[8] = prototype{size: 2, name: "uint16", kind: objabi.KindUint16}
	typs[9] = prototype{size: 4, name: "uint32", kind: objabi.KindUint32}
	typs[10] = prototype{size: 8, elem: &typs[0], name: "*runtime._type", kind: objabi.KindPtr}
	typs[11] = prototype{size: 16, numElem: 2, fieldName: []string{"first", "last"}, fieldType: []dwarf.Type{&typs[12], &typs[12]}, fieldOff: []int64{0, 8}, name: "runtime.waitq", kind: objabi.KindStruct}
	typs[12] = prototype{size: 8, elem: &typs[13], name: "*runtime.sudog", kind: objabi.KindPtr}
	typs[13] = prototype{size: 88, numElem: 13, fieldName: []string{"g", "next", "prev", "elem", "acquiretime", "releasetime", "ticket", "isSelect", "success", "parent", "waitlink", "waittail", "c"}, fieldType: []dwarf.Type{&typs[14], &typs[12], &typs[12], &typs[7], &typs[15], &typs[15], &typs[9], &typs[16], &typs[16], &typs[12], &typs[12], &typs[12], &typs[17]}, fieldOff: []int64{0, 8, 16, 24, 32, 40, 48, 52, 53, 56, 64, 72, 80}, name: "runtime.sudog", kind: objabi.KindStruct}
	typs[14] = prototype{size: 8, elem: &typs[4], name: "*runtime.g", kind: objabi.KindPtr}
	typs[15] = prototype{size: 8, name: "int64", kind: objabi.KindInt64}
	typs[16] = prototype{size: 1, name: "bool", kind: objabi.KindBool}
	typs[17] = prototype{size: 8, elem: &typs[5], name: "*runtime.hchan", kind: objabi.KindPtr}
	typs[18] = prototype{size: 8, numElem: 1, fieldName: []string{"key"}, fieldType: []dwarf.Type{&typs[19]}, fieldOff: []int64{0}, name: "runtime.mutex", kind: objabi.KindStruct}
	typs[19] = prototype{size: 8, name: "uintptr", kind: objabi.KindUintptr}
	typs[20] = prototype{size: 48, numElem: 9, fieldName: []string{"count", "flags", "B", "noverflow", "hash0", "buckets", "oldbuckets", "nevacuate", "extra"}, fieldType: []dwarf.Type{&typs[21], &typs[3], &typs[3], &typs[8], &typs[9], &typs[7], &typs[7], &typs[19], &typs[22]}, fieldOff: []int64{0, 8, 9, 10, 12, 16, 24, 32, 40}, name: "runtime.hmap", kind: objabi.KindStruct}
	typs[21] = prototype{size: 8, name: "int", kind: objabi.KindInt}
	typs[22] = prototype{size: 8, elem: &typs[23], name: "*runtime.mapextra", kind: objabi.KindPtr}
	typs[23] = prototype{size: 0, numElem: 0, fieldName: nil, fieldType: nil, fieldOff: []int64{}, name: "runtime.mapextra", kind: objabi.KindStruct}
	typs[24] = prototype{size: 24, numElem: 3, fieldName: []string{"array", "len", "cap"}, fieldType: []dwarf.Type{&typs[7], &typs[21], &typs[21]}, fieldOff: []int64{0, 8, 16}, name: "runtime.slice", kind: objabi.KindStruct}
	typs[25] = prototype{size: 16, numElem: 2, fieldName: []string{"str", "len"}, fieldType: []dwarf.Type{&typs[26], &typs[21]}, fieldOff: []int64{0, 8}, name: "runtime.stringStructDWARF", kind: objabi.KindStruct}
	typs[26] = prototype{size: 8, elem: &typs[27], name: "*uint8", kind: objabi.KindPtr}
	typs[27] = prototype{size: 1, name: "uint8", kind: objabi.KindUint8}
	return typs[:]
}

func _riscv64Prototypes() []prototype {
	var typs [28]prototype
	typs[0] = prototype{size: 0, numElem: 0, fieldName: nil, fieldType: nil, fieldOff: []int64{}, name: "runtime._type", kind: objabi.KindStruct}
	typs[1] = prototype{size: 8, numElem: 1, fieldName: []string{"tophash"}, fieldType: []dwarf.Type{&typs[2]}, fieldOff: []int64{0}, name: "runtime.bmap", kind: objabi.KindStruct}
	typs[2] = prototype{size: 8, elem: &typs[3], numElem: 8, name: "[8]uint8", kind: objabi.KindArray}
	typs[3] = prototype{size: 1, name: "uint8", kind: objabi.KindUint8}
	typs[4] = prototype{size: 0, numElem: 0, fieldName: nil, fieldType: nil, fieldOff: []int64{}, name: "runtime.g", kind: objabi.KindStruct}
	typs[5] = prototype{size: 96, numElem: 11, fieldName: []string{"qcount", "dataqsiz", "buf", "elemsize", "closed", "elemtype", "sendx", "recvx", "recvq", "sendq", "lock"}, fieldType: []dwarf.Type{&typs[6], &typs[6], &typs[7], &typs[8], &typs[9], &typs[10], &typs[6], &typs[6], &typs[11], &typs[11], &typs[18]}, fieldOff: []int64{0, 8, 16, 24, 28, 32, 40, 48, 56, 72, 88}, name: "runtime.hchan", kind: objabi.KindStruct}
	typs[6] = prototype{size: 8, name: "uint", kind: objabi.KindUint}
	typs[7] = prototype{size: 8, name: "unsafe.Pointer", kind: objabi.KindUnsafePointer}
	typs[8] = prototype{size: 2, name: "uint16", kind: objabi.KindUint16}
	typs[9] = prototype{size: 4, name: "uint32", kind: objabi.KindUint32}
	typs[10] = prototype{size: 8, elem: &typs[0], name: "*runtime._type", kind: objabi.KindPtr}
	typs[11] = prototype{size: 16, numElem: 2, fieldName: []string{"first", "last"}, fieldType: []dwarf.Type{&typs[12], &typs[12]}, fieldOff: []int64{0, 8}, name: "runtime.waitq", kind: objabi.KindStruct}
	typs[12] = prototype{size: 8, elem: &typs[13], name: "*runtime.sudog", kind: objabi.KindPtr}
	typs[13] = prototype{size: 88, numElem: 13, fieldName: []string{"g", "next", "prev", "elem", "acquiretime", "releasetime", "ticket", "isSelect", "success", "parent", "waitlink", "waittail", "c"}, fieldType: []dwarf.Type{&typs[14], &typs[12], &typs[12], &typs[7], &typs[15], &typs[15], &typs[9], &typs[16], &typs[16], &typs[12], &typs[12], &typs[12], &typs[17]}, fieldOff: []int64{0, 8, 16, 24, 32, 40, 48, 52, 53, 56, 64, 72, 80}, name: "runtime.sudog", kind: objabi.KindStruct}
	typs[14] = prototype{size: 8, elem: &typs[4], name: "*runtime.g", kind: objabi.KindPtr}
	typs[15] = prototype{size: 8, name: "int64", kind: objabi.KindInt64}
	typs[16] = prototype{size: 1, name: "bool", kind: objabi.KindBool}
	typs[17] = prototype{size: 8, elem: &typs[5], name: "*runtime.hchan", kind: objabi.KindPtr}
	typs[18] = prototype{size: 8, numElem: 1, fieldName: []string{"key"}, fieldType: []dwarf.Type{&typs[19]}, fieldOff: []int64{0}, name: "runtime.mutex", kind: objabi.KindStruct}
	typs[19] = prototype{size: 8, name: "uintptr", kind: objabi.KindUintptr}
	typs[20] = prototype{size: 48, numElem: 9, fieldName: []string{"count", "flags", "B", "noverflow", "hash0", "buckets", "oldbuckets", "nevacuate", "extra"}, fieldType: []dwarf.Type{&typs[21], &typs[3], &typs[3], &typs[8], &typs[9], &typs[7], &typs[7], &typs[19], &typs[22]}, fieldOff: []int64{0, 8, 9, 10, 12, 16, 24, 32, 40}, name: "runtime.hmap", kind: objabi.KindStruct}
	typs[21] = prototype{size: 8, name: "int", kind: objabi.KindInt}
	typs[22] = prototype{size: 8, elem: &typs[23], name: "*runtime.mapextra", kind: objabi.KindPtr}
	typs[23] = prototype{size: 0, numElem: 0, fieldName: nil, fieldType: nil, fieldOff: []int64{}, name: "runtime.mapextra", kind: objabi.KindStruct}
	typs[24] = prototype{size: 24, numElem: 3, fieldName: []string{"array", "len", "cap"}, fieldType: []dwarf.Type{&typs[7], &typs[21], &typs[21]}, fieldOff: []int64{0, 8, 16}, name: "runtime.slice", kind: objabi.KindStruct}
	typs[25] = prototype{size: 16, numElem: 2, fieldName: []string{"str", "len"}, fieldType: []dwarf.Type{&typs[26], &typs[21]}, fieldOff: []int64{0, 8}, name: "runtime.stringStructDWARF", kind: objabi.KindStruct}
	typs[26] = prototype{size: 8, elem: &typs[27], name: "*uint8", kind: objabi.KindPtr}
	typs[27] = prototype{size: 1, name: "uint8", kind: objabi.KindUint8}
	return typs[:]
}

func _s390xPrototypes() []prototype {
	var typs [28]prototype
	typs[0] = prototype{size: 0, numElem: 0, fieldName: nil, fieldType: nil, fieldOff: []int64{}, name: "runtime._type", kind: objabi.KindStruct}
	typs[1] = prototype{size: 8, numElem: 1, fieldName: []string{"tophash"}, fieldType: []dwarf.Type{&typs[2]}, fieldOff: []int64{0}, name: "runtime.bmap", kind: objabi.KindStruct}
	typs[2] = prototype{size: 8, elem: &typs[3], numElem: 8, name: "[8]uint8", kind: objabi.KindArray}
	typs[3] = prototype{size: 1, name: "uint8", kind: objabi.KindUint8}
	typs[4] = prototype{size: 0, numElem: 0, fieldName: nil, fieldType: nil, fieldOff: []int64{}, name: "runtime.g", kind: objabi.KindStruct}
	typs[5] = prototype{size: 96, numElem: 11, fieldName: []string{"qcount", "dataqsiz", "buf", "elemsize", "closed", "elemtype", "sendx", "recvx", "recvq", "sendq", "lock"}, fieldType: []dwarf.Type{&typs[6], &typs[6], &typs[7], &typs[8], &typs[9], &typs[10], &typs[6], &typs[6], &typs[11], &typs[11], &typs[18]}, fieldOff: []int64{0, 8, 16, 24, 28, 32, 40, 48, 56, 72, 88}, name: "runtime.hchan", kind: objabi.KindStruct}
	typs[6] = prototype{size: 8, name: "uint", kind: objabi.KindUint}
	typs[7] = prototype{size: 8, name: "unsafe.Pointer", kind: objabi.KindUnsafePointer}
	typs[8] = prototype{size: 2, name: "uint16", kind: objabi.KindUint16}
	typs[9] = prototype{size: 4, name: "uint32", kind: objabi.KindUint32}
	typs[10] = prototype{size: 8, elem: &typs[0], name: "*runtime._type", kind: objabi.KindPtr}
	typs[11] = prototype{size: 16, numElem: 2, fieldName: []string{"first", "last"}, fieldType: []dwarf.Type{&typs[12], &typs[12]}, fieldOff: []int64{0, 8}, name: "runtime.waitq", kind: objabi.KindStruct}
	typs[12] = prototype{size: 8, elem: &typs[13], name: "*runtime.sudog", kind: objabi.KindPtr}
	typs[13] = prototype{size: 88, numElem: 13, fieldName: []string{"g", "next", "prev", "elem", "acquiretime", "releasetime", "ticket", "isSelect", "success", "parent", "waitlink", "waittail", "c"}, fieldType: []dwarf.Type{&typs[14], &typs[12], &typs[12], &typs[7], &typs[15], &typs[15], &typs[9], &typs[16], &typs[16], &typs[12], &typs[12], &typs[12], &typs[17]}, fieldOff: []int64{0, 8, 16, 24, 32, 40, 48, 52, 53, 56, 64, 72, 80}, name: "runtime.sudog", kind: objabi.KindStruct}
	typs[14] = prototype{size: 8, elem: &typs[4], name: "*runtime.g", kind: objabi.KindPtr}
	typs[15] = prototype{size: 8, name: "int64", kind: objabi.KindInt64}
	typs[16] = prototype{size: 1, name: "bool", kind: objabi.KindBool}
	typs[17] = prototype{size: 8, elem: &typs[5], name: "*runtime.hchan", kind: objabi.KindPtr}
	typs[18] = prototype{size: 8, numElem: 1, fieldName: []string{"key"}, fieldType: []dwarf.Type{&typs[19]}, fieldOff: []int64{0}, name: "runtime.mutex", kind: objabi.KindStruct}
	typs[19] = prototype{size: 8, name: "uintptr", kind: objabi.KindUintptr}
	typs[20] = prototype{size: 48, numElem: 9, fieldName: []string{"count", "flags", "B", "noverflow", "hash0", "buckets", "oldbuckets", "nevacuate", "extra"}, fieldType: []dwarf.Type{&typs[21], &typs[3], &typs[3], &typs[8], &typs[9], &typs[7], &typs[7], &typs[19], &typs[22]}, fieldOff: []int64{0, 8, 9, 10, 12, 16, 24, 32, 40}, name: "runtime.hmap", kind: objabi.KindStruct}
	typs[21] = prototype{size: 8, name: "int", kind: objabi.KindInt}
	typs[22] = prototype{size: 8, elem: &typs[23], name: "*runtime.mapextra", kind: objabi.KindPtr}
	typs[23] = prototype{size: 0, numElem: 0, fieldName: nil, fieldType: nil, fieldOff: []int64{}, name: "runtime.mapextra", kind: objabi.KindStruct}
	typs[24] = prototype{size: 24, numElem: 3, fieldName: []string{"array", "len", "cap"}, fieldType: []dwarf.Type{&typs[7], &typs[21], &typs[21]}, fieldOff: []int64{0, 8, 16}, name: "runtime.slice", kind: objabi.KindStruct}
	typs[25] = prototype{size: 16, numElem: 2, fieldName: []string{"str", "len"}, fieldType: []dwarf.Type{&typs[26], &typs[21]}, fieldOff: []int64{0, 8}, name: "runtime.stringStructDWARF", kind: objabi.KindStruct}
	typs[26] = prototype{size: 8, elem: &typs[27], name: "*uint8", kind: objabi.KindPtr}
	typs[27] = prototype{size: 1, name: "uint8", kind: objabi.KindUint8}
	return typs[:]
}

func _sparc64Prototypes() []prototype {
	var typs [28]prototype
	typs[0] = prototype{size: 0, numElem: 0, fieldName: nil, fieldType: nil, fieldOff: []int64{}, name: "runtime._type", kind: objabi.KindStruct}
	typs[1] = prototype{size: 8, numElem: 1, fieldName: []string{"tophash"}, fieldType: []dwarf.Type{&typs[2]}, fieldOff: []int64{0}, name: "runtime.bmap", kind: objabi.KindStruct}
	typs[2] = prototype{size: 8, elem: &typs[3], numElem: 8, name: "[8]uint8", kind: objabi.KindArray}
	typs[3] = prototype{size: 1, name: "uint8", kind: objabi.KindUint8}
	typs[4] = prototype{size: 0, numElem: 0, fieldName: nil, fieldType: nil, fieldOff: []int64{}, name: "runtime.g", kind: objabi.KindStruct}
	typs[5] = prototype{size: 96, numElem: 11, fieldName: []string{"qcount", "dataqsiz", "buf", "elemsize", "closed", "elemtype", "sendx", "recvx", "recvq", "sendq", "lock"}, fieldType: []dwarf.Type{&typs[6], &typs[6], &typs[7], &typs[8], &typs[9], &typs[10], &typs[6], &typs[6], &typs[11], &typs[11], &typs[18]}, fieldOff: []int64{0, 8, 16, 24, 28, 32, 40, 48, 56, 72, 88}, name: "runtime.hchan", kind: objabi.KindStruct}
	typs[6] = prototype{size: 8, name: "uint", kind: objabi.KindUint}
	typs[7] = prototype{size: 8, name: "unsafe.Pointer", kind: objabi.KindUnsafePointer}
	typs[8] = prototype{size: 2, name: "uint16", kind: objabi.KindUint16}
	typs[9] = prototype{size: 4, name: "uint32", kind: objabi.KindUint32}
	typs[10] = prototype{size: 8, elem: &typs[0], name: "*runtime._type", kind: objabi.KindPtr}
	typs[11] = prototype{size: 16, numElem: 2, fieldName: []string{"first", "last"}, fieldType: []dwarf.Type{&typs[12], &typs[12]}, fieldOff: []int64{0, 8}, name: "runtime.waitq", kind: objabi.KindStruct}
	typs[12] = prototype{size: 8, elem: &typs[13], name: "*runtime.sudog", kind: objabi.KindPtr}
	typs[13] = prototype{size: 88, numElem: 13, fieldName: []string{"g", "next", "prev", "elem", "acquiretime", "releasetime", "ticket", "isSelect", "success", "parent", "waitlink", "waittail", "c"}, fieldType: []dwarf.Type{&typs[14], &typs[12], &typs[12], &typs[7], &typs[15], &typs[15], &typs[9], &typs[16], &typs[16], &typs[12], &typs[12], &typs[12], &typs[17]}, fieldOff: []int64{0, 8, 16, 24, 32, 40, 48, 52, 53, 56, 64, 72, 80}, name: "runtime.sudog", kind: objabi.KindStruct}
	typs[14] = prototype{size: 8, elem: &typs[4], name: "*runtime.g", kind: objabi.KindPtr}
	typs[15] = prototype{size: 8, name: "int64", kind: objabi.KindInt64}
	typs[16] = prototype{size: 1, name: "bool", kind: objabi.KindBool}
	typs[17] = prototype{size: 8, elem: &typs[5], name: "*runtime.hchan", kind: objabi.KindPtr}
	typs[18] = prototype{size: 8, numElem: 1, fieldName: []string{"key"}, fieldType: []dwarf.Type{&typs[19]}, fieldOff: []int64{0}, name: "runtime.mutex", kind: objabi.KindStruct}
	typs[19] = prototype{size: 8, name: "uintptr", kind: objabi.KindUintptr}
	typs[20] = prototype{size: 48, numElem: 9, fieldName: []string{"count", "flags", "B", "noverflow", "hash0", "buckets", "oldbuckets", "nevacuate", "extra"}, fieldType: []dwarf.Type{&typs[21], &typs[3], &typs[3], &typs[8], &typs[9], &typs[7], &typs[7], &typs[19], &typs[22]}, fieldOff: []int64{0, 8, 9, 10, 12, 16, 24, 32, 40}, name: "runtime.hmap", kind: objabi.KindStruct}
	typs[21] = prototype{size: 8, name: "int", kind: objabi.KindInt}
	typs[22] = prototype{size: 8, elem: &typs[23], name: "*runtime.mapextra", kind: objabi.KindPtr}
	typs[23] = prototype{size: 0, numElem: 0, fieldName: nil, fieldType: nil, fieldOff: []int64{}, name: "runtime.mapextra", kind: objabi.KindStruct}
	typs[24] = prototype{size: 24, numElem: 3, fieldName: []string{"array", "len", "cap"}, fieldType: []dwarf.Type{&typs[7], &typs[21], &typs[21]}, fieldOff: []int64{0, 8, 16}, name: "runtime.slice", kind: objabi.KindStruct}
	typs[25] = prototype{size: 16, numElem: 2, fieldName: []string{"str", "len"}, fieldType: []dwarf.Type{&typs[26], &typs[21]}, fieldOff: []int64{0, 8}, name: "runtime.stringStructDWARF", kind: objabi.KindStruct}
	typs[26] = prototype{size: 8, elem: &typs[27], name: "*uint8", kind: objabi.KindPtr}
	typs[27] = prototype{size: 1, name: "uint8", kind: objabi.KindUint8}
	return typs[:]
}

func _wasmPrototypes() []prototype {
	var typs [28]prototype
	typs[0] = prototype{size: 0, numElem: 0, fieldName: nil, fieldType: nil, fieldOff: []int64{}, name: "runtime._type", kind: objabi.KindStruct}
	typs[1] = prototype{size: 8, numElem: 1, fieldName: []string{"tophash"}, fieldType: []dwarf.Type{&typs[2]}, fieldOff: []int64{0}, name: "runtime.bmap", kind: objabi.KindStruct}
	typs[2] = prototype{size: 8, elem: &typs[3], numElem: 8, name: "[8]uint8", kind: objabi.KindArray}
	typs[3] = prototype{size: 1, name: "uint8", kind: objabi.KindUint8}
	typs[4] = prototype{size: 0, numElem: 0, fieldName: nil, fieldType: nil, fieldOff: []int64{}, name: "runtime.g", kind: objabi.KindStruct}
	typs[5] = prototype{size: 96, numElem: 11, fieldName: []string{"qcount", "dataqsiz", "buf", "elemsize", "closed", "elemtype", "sendx", "recvx", "recvq", "sendq", "lock"}, fieldType: []dwarf.Type{&typs[6], &typs[6], &typs[7], &typs[8], &typs[9], &typs[10], &typs[6], &typs[6], &typs[11], &typs[11], &typs[18]}, fieldOff: []int64{0, 8, 16, 24, 28, 32, 40, 48, 56, 72, 88}, name: "runtime.hchan", kind: objabi.KindStruct}
	typs[6] = prototype{size: 8, name: "uint", kind: objabi.KindUint}
	typs[7] = prototype{size: 8, name: "unsafe.Pointer", kind: objabi.KindUnsafePointer}
	typs[8] = prototype{size: 2, name: "uint16", kind: objabi.KindUint16}
	typs[9] = prototype{size: 4, name: "uint32", kind: objabi.KindUint32}
	typs[10] = prototype{size: 8, elem: &typs[0], name: "*runtime._type", kind: objabi.KindPtr}
	typs[11] = prototype{size: 16, numElem: 2, fieldName: []string{"first", "last"}, fieldType: []dwarf.Type{&typs[12], &typs[12]}, fieldOff: []int64{0, 8}, name: "runtime.waitq", kind: objabi.KindStruct}
	typs[12] = prototype{size: 8, elem: &typs[13], name: "*runtime.sudog", kind: objabi.KindPtr}
	typs[13] = prototype{size: 88, numElem: 13, fieldName: []string{"g", "next", "prev", "elem", "acquiretime", "releasetime", "ticket", "isSelect", "success", "parent", "waitlink", "waittail", "c"}, fieldType: []dwarf.Type{&typs[14], &typs[12], &typs[12], &typs[7], &typs[15], &typs[15], &typs[9], &typs[16], &typs[16], &typs[12], &typs[12], &typs[12], &typs[17]}, fieldOff: []int64{0, 8, 16, 24, 32, 40, 48, 52, 53, 56, 64, 72, 80}, name: "runtime.sudog", kind: objabi.KindStruct}
	typs[14] = prototype{size: 8, elem: &typs[4], name: "*runtime.g", kind: objabi.KindPtr}
	typs[15] = prototype{size: 8, name: "int64", kind: objabi.KindInt64}
	typs[16] = prototype{size: 1, name: "bool", kind: objabi.KindBool}
	typs[17] = prototype{size: 8, elem: &typs[5], name: "*runtime.hchan", kind: objabi.KindPtr}
	typs[18] = prototype{size: 8, numElem: 1, fieldName: []string{"key"}, fieldType: []dwarf.Type{&typs[19]}, fieldOff: []int64{0}, name: "runtime.mutex", kind: objabi.KindStruct}
	typs[19] = prototype{size: 8, name: "uintptr", kind: objabi.KindUintptr}
	typs[20] = prototype{size: 48, numElem: 9, fieldName: []string{"count", "flags", "B", "noverflow", "hash0", "buckets", "oldbuckets", "nevacuate", "extra"}, fieldType: []dwarf.Type{&typs[21], &typs[3], &typs[3], &typs[8], &typs[9], &typs[7], &typs[7], &typs[19], &typs[22]}, fieldOff: []int64{0, 8, 9, 10, 12, 16, 24, 32, 40}, name: "runtime.hmap", kind: objabi.KindStruct}
	typs[21] = prototype{size: 8, name: "int", kind: objabi.KindInt}
	typs[22] = prototype{size: 8, elem: &typs[23], name: "*runtime.mapextra", kind: objabi.KindPtr}
	typs[23] = prototype{size: 0, numElem: 0, fieldName: nil, fieldType: nil, fieldOff: []int64{}, name: "runtime.mapextra", kind: objabi.KindStruct}
	typs[24] = prototype{size: 24, numElem: 3, fieldName: []string{"array", "len", "cap"}, fieldType: []dwarf.Type{&typs[7], &typs[21], &typs[21]}, fieldOff: []int64{0, 8, 16}, name: "runtime.slice", kind: objabi.KindStruct}
	typs[25] = prototype{size: 16, numElem: 2, fieldName: []string{"str", "len"}, fieldType: []dwarf.Type{&typs[26], &typs[21]}, fieldOff: []int64{0, 8}, name: "runtime.stringStructDWARF", kind: objabi.KindStruct}
	typs[26] = prototype{size: 8, elem: &typs[27], name: "*uint8", kind: objabi.KindPtr}
	typs[27] = prototype{size: 1, name: "uint8", kind: objabi.KindUint8}
	return typs[:]
}

var DwarfPrototypes = map[string]int{
	"runtime._type":             0,
	"runtime.bmap":              1,
	"runtime.g":                 4,
	"runtime.hchan":             5,
	"runtime.hmap":              20,
	"runtime.mapextra":          23,
	"runtime.mutex":             18,
	"runtime.slice":             24,
	"runtime.stringStructDWARF": 25,
	"runtime.sudog":             13,
	"runtime.waitq":             11,
}

var archPrototypeGen = map[string]func() []prototype{
	"386":      _386Prototypes,
	"arm":      _armPrototypes,
	"arm64":    _arm64Prototypes,
	"amd64":    _amd64Prototypes,
	"amd64p32": _amd64p32Prototypes,
	"mips":     _mipsPrototypes,
	"mipsle":   _mipslePrototypes,
	"mips64":   _mips64Prototypes,
	"mips64le": _mips64lePrototypes,
	"ppc64":    _ppc64Prototypes,
	"ppc64le":  _ppc64lePrototypes,
	"riscv64":  _riscv64Prototypes,
	"s390x":    _s390xPrototypes,
	"sparc64":  _sparc64Prototypes,
	"wasm":     _wasmPrototypes,
}
