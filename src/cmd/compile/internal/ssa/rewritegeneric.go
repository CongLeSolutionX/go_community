// autogenerated from gen/generic.rules: do not edit!
// generated with: cd gen; go run *.go
package ssa

func rewriteValuegeneric(v *Value, config *Config) bool {
	switch v.Op {
	case OpAdd64:
		// match: (Add64 (Const [c]) (Const [d]))
		// cond:
		// result: (Const [c+d])
		{
			if v.Args[0].Op != OpgenericConst {
				goto endd2f4bfaaf6c937171a287b73e5c2f73e
			}
			c := v.Args[0].AuxInt
			if v.Args[1].Op != OpgenericConst {
				goto endd2f4bfaaf6c937171a287b73e5c2f73e
			}
			d := v.Args[1].AuxInt
			v.Op = OpgenericConst
			v.AuxInt = 0
			v.Aux = nil
			v.resetArgs()
			v.AuxInt = c + d
			return true
		}
		goto endd2f4bfaaf6c937171a287b73e5c2f73e
	endd2f4bfaaf6c937171a287b73e5c2f73e:
		;
	case OpgenericAdd64U:
		// match: (Add64U (Const [c]) (Const [d]))
		// cond:
		// result: (Const [c+d])
		{
			if v.Args[0].Op != OpgenericConst {
				goto endfedc373d8be0243cb5dbbc948996fe3a
			}
			c := v.Args[0].AuxInt
			if v.Args[1].Op != OpgenericConst {
				goto endfedc373d8be0243cb5dbbc948996fe3a
			}
			d := v.Args[1].AuxInt
			v.Op = OpgenericConst
			v.AuxInt = 0
			v.Aux = nil
			v.resetArgs()
			v.AuxInt = c + d
			return true
		}
		goto endfedc373d8be0243cb5dbbc948996fe3a
	endfedc373d8be0243cb5dbbc948996fe3a:
		;
	case OpAddPtr:
		// match: (AddPtr (Const [c]) (Const [d]))
		// cond:
		// result: (Const [c+d])
		{
			if v.Args[0].Op != OpgenericConst {
				goto end67284cb7ae441d6c763096b49a3569a3
			}
			c := v.Args[0].AuxInt
			if v.Args[1].Op != OpgenericConst {
				goto end67284cb7ae441d6c763096b49a3569a3
			}
			d := v.Args[1].AuxInt
			v.Op = OpgenericConst
			v.AuxInt = 0
			v.Aux = nil
			v.resetArgs()
			v.AuxInt = c + d
			return true
		}
		goto end67284cb7ae441d6c763096b49a3569a3
	end67284cb7ae441d6c763096b49a3569a3:
		;
	case OpArrayIndex:
		// match: (ArrayIndex (Load ptr mem) idx)
		// cond:
		// result: (Load (PtrIndex <v.Type.PtrTo()> ptr idx) mem)
		{
			if v.Args[0].Op != OpLoad {
				goto end4894dd7b58383fee5f8a92be08437c33
			}
			ptr := v.Args[0].Args[0]
			mem := v.Args[0].Args[1]
			idx := v.Args[1]
			v.Op = OpLoad
			v.AuxInt = 0
			v.Aux = nil
			v.resetArgs()
			v0 := v.Block.NewValue0(v.Line, OpPtrIndex, TypeInvalid)
			v0.Type = v.Type.PtrTo()
			v0.AddArg(ptr)
			v0.AddArg(idx)
			v.AddArg(v0)
			v.AddArg(mem)
			return true
		}
		goto end4894dd7b58383fee5f8a92be08437c33
	end4894dd7b58383fee5f8a92be08437c33:
		;
	case OpConstString:
		// match: (ConstString {s})
		// cond:
		// result: (StringMake (Addr <TypeBytePtr> {config.fe.StringData(s.(string))} (SB <config.Uintptr>)) (ConstPtr <config.Uintptr> [int64(len(s.(string)))]))
		{
			s := v.Aux
			v.Op = OpStringMake
			v.AuxInt = 0
			v.Aux = nil
			v.resetArgs()
			v0 := v.Block.NewValue0(v.Line, OpAddr, TypeInvalid)
			v0.Type = TypeBytePtr
			v0.Aux = config.fe.StringData(s.(string))
			v1 := v.Block.NewValue0(v.Line, OpSB, TypeInvalid)
			v1.Type = config.Uintptr
			v0.AddArg(v1)
			v.AddArg(v0)
			v2 := v.Block.NewValue0(v.Line, OpConstPtr, TypeInvalid)
			v2.Type = config.Uintptr
			v2.AuxInt = int64(len(s.(string)))
			v.AddArg(v2)
			return true
		}
		goto end1a01fc02fad8727f9a3b716cfdac3a44
	end1a01fc02fad8727f9a3b716cfdac3a44:
		;
	case OpEq64:
		// match: (Eq64 (Const [c]) (Const [d]))
		// cond:
		// result: (Const {c == d})
		{
			if v.Args[0].Op != OpgenericConst {
				goto endf5c7924b95cbed86ae799919f3ae1f75
			}
			c := v.Args[0].AuxInt
			if v.Args[1].Op != OpgenericConst {
				goto endf5c7924b95cbed86ae799919f3ae1f75
			}
			d := v.Args[1].AuxInt
			v.Op = OpgenericConst
			v.AuxInt = 0
			v.Aux = nil
			v.resetArgs()
			v.Aux = c == d
			return true
		}
		goto endf5c7924b95cbed86ae799919f3ae1f75
	endf5c7924b95cbed86ae799919f3ae1f75:
		;
		// match: (Eq64 x y)
		// cond: x == y
		// result: (Const {true})
		{
			x := v.Args[0]
			y := v.Args[1]
			if !(x == y) {
				goto endca33f5f503417b50aac1630bc45bd5fe
			}
			v.Op = OpgenericConst
			v.AuxInt = 0
			v.Aux = nil
			v.resetArgs()
			v.Aux = true
			return true
		}
		goto endca33f5f503417b50aac1630bc45bd5fe
	endca33f5f503417b50aac1630bc45bd5fe:
		;
	case OpEqFat:
		// match: (EqFat x y)
		// cond: x.Op == OpConstNil && y.Op != OpConstNil
		// result: (EqFat y x)
		{
			x := v.Args[0]
			y := v.Args[1]
			if !(x.Op == OpConstNil && y.Op != OpConstNil) {
				goto endcea7f7399afcff860c54d82230a9a934
			}
			v.Op = OpEqFat
			v.AuxInt = 0
			v.Aux = nil
			v.resetArgs()
			v.AddArg(y)
			v.AddArg(x)
			return true
		}
		goto endcea7f7399afcff860c54d82230a9a934
	endcea7f7399afcff860c54d82230a9a934:
		;
		// match: (EqFat (Load ptr mem) (ConstNil))
		// cond:
		// result: (EqPtr (Load <config.Uintptr> ptr mem) (ConstPtr <config.Uintptr> [0]))
		{
			if v.Args[0].Op != OpLoad {
				goto end2597220d1792c84d362da7901d2065d2
			}
			ptr := v.Args[0].Args[0]
			mem := v.Args[0].Args[1]
			if v.Args[1].Op != OpConstNil {
				goto end2597220d1792c84d362da7901d2065d2
			}
			v.Op = OpEqPtr
			v.AuxInt = 0
			v.Aux = nil
			v.resetArgs()
			v0 := v.Block.NewValue0(v.Line, OpLoad, TypeInvalid)
			v0.Type = config.Uintptr
			v0.AddArg(ptr)
			v0.AddArg(mem)
			v.AddArg(v0)
			v1 := v.Block.NewValue0(v.Line, OpConstPtr, TypeInvalid)
			v1.Type = config.Uintptr
			v1.AuxInt = 0
			v.AddArg(v1)
			return true
		}
		goto end2597220d1792c84d362da7901d2065d2
	end2597220d1792c84d362da7901d2065d2:
		;
	case OpGeq64:
		// match: (Geq64 (Const [c]) (Const [d]))
		// cond:
		// result: (Const {c >= d})
		{
			if v.Args[0].Op != OpgenericConst {
				goto end2a2d0512b687aa84204920ef0f0d770f
			}
			c := v.Args[0].AuxInt
			if v.Args[1].Op != OpgenericConst {
				goto end2a2d0512b687aa84204920ef0f0d770f
			}
			d := v.Args[1].AuxInt
			v.Op = OpgenericConst
			v.AuxInt = 0
			v.Aux = nil
			v.resetArgs()
			v.Aux = c >= d
			return true
		}
		goto end2a2d0512b687aa84204920ef0f0d770f
	end2a2d0512b687aa84204920ef0f0d770f:
		;
	case OpGeq64U:
		// match: (Geq64U _ (Const [0]))
		// cond:
		// result: (Const {true})
		{
			if v.Args[1].Op != OpgenericConst {
				goto end37145378c3026713a7a4eef18758375f
			}
			if v.Args[1].AuxInt != 0 {
				goto end37145378c3026713a7a4eef18758375f
			}
			v.Op = OpgenericConst
			v.AuxInt = 0
			v.Aux = nil
			v.resetArgs()
			v.Aux = true
			return true
		}
		goto end37145378c3026713a7a4eef18758375f
	end37145378c3026713a7a4eef18758375f:
		;
	case OpGreater64:
		// match: (Greater64 (Const [c]) (Const [d]))
		// cond:
		// result: (Const {c > d})
		{
			if v.Args[0].Op != OpgenericConst {
				goto end4e7a4384306ce9cc450308e276bd9553
			}
			c := v.Args[0].AuxInt
			if v.Args[1].Op != OpgenericConst {
				goto end4e7a4384306ce9cc450308e276bd9553
			}
			d := v.Args[1].AuxInt
			v.Op = OpgenericConst
			v.AuxInt = 0
			v.Aux = nil
			v.resetArgs()
			v.Aux = c > d
			return true
		}
		goto end4e7a4384306ce9cc450308e276bd9553
	end4e7a4384306ce9cc450308e276bd9553:
		;
	case OpGreater64U:
		// match: (Greater64U (Const [0]) _)
		// cond:
		// result: (Const {false})
		{
			if v.Args[0].Op != OpgenericConst {
				goto end79a5dd353e994969769070fc1fbe1e48
			}
			if v.Args[0].AuxInt != 0 {
				goto end79a5dd353e994969769070fc1fbe1e48
			}
			v.Op = OpgenericConst
			v.AuxInt = 0
			v.Aux = nil
			v.resetArgs()
			v.Aux = false
			return true
		}
		goto end79a5dd353e994969769070fc1fbe1e48
	end79a5dd353e994969769070fc1fbe1e48:
		;
	case OpIsInBounds:
		// match: (IsInBounds (ConstPtr [c]) (ConstPtr [d]))
		// cond:
		// result: (ConstPtr {inBounds(c,d)})
		{
			if v.Args[0].Op != OpConstPtr {
				goto enddfd340bc7103ca323354aec96b113c23
			}
			c := v.Args[0].AuxInt
			if v.Args[1].Op != OpConstPtr {
				goto enddfd340bc7103ca323354aec96b113c23
			}
			d := v.Args[1].AuxInt
			v.Op = OpConstPtr
			v.AuxInt = 0
			v.Aux = nil
			v.resetArgs()
			v.Aux = inBounds(c, d)
			return true
		}
		goto enddfd340bc7103ca323354aec96b113c23
	enddfd340bc7103ca323354aec96b113c23:
		;
		// match: (IsInBounds (Const [c]) (Const [d]))
		// cond:
		// result: (Const {inBounds(c,d)})
		{
			if v.Args[0].Op != OpgenericConst {
				goto enda96ccac78df2d17ae96c8baf2af2e189
			}
			c := v.Args[0].AuxInt
			if v.Args[1].Op != OpgenericConst {
				goto enda96ccac78df2d17ae96c8baf2af2e189
			}
			d := v.Args[1].AuxInt
			v.Op = OpgenericConst
			v.AuxInt = 0
			v.Aux = nil
			v.resetArgs()
			v.Aux = inBounds(c, d)
			return true
		}
		goto enda96ccac78df2d17ae96c8baf2af2e189
	enda96ccac78df2d17ae96c8baf2af2e189:
		;
	case OpLeq64:
		// match: (Leq64 (Const [c]) (Const [d]))
		// cond:
		// result: (Const {c <= d})
		{
			if v.Args[0].Op != OpgenericConst {
				goto endc2eda1aff76c6f1e849b035579a62202
			}
			c := v.Args[0].AuxInt
			if v.Args[1].Op != OpgenericConst {
				goto endc2eda1aff76c6f1e849b035579a62202
			}
			d := v.Args[1].AuxInt
			v.Op = OpgenericConst
			v.AuxInt = 0
			v.Aux = nil
			v.resetArgs()
			v.Aux = c <= d
			return true
		}
		goto endc2eda1aff76c6f1e849b035579a62202
	endc2eda1aff76c6f1e849b035579a62202:
		;
	case OpLeq64U:
		// match: (Leq64U (Const [0]) _)
		// cond:
		// result: (Const {true})
		{
			if v.Args[0].Op != OpgenericConst {
				goto end4776f3b7c019f66c11f7462ab6221b30
			}
			if v.Args[0].AuxInt != 0 {
				goto end4776f3b7c019f66c11f7462ab6221b30
			}
			v.Op = OpgenericConst
			v.AuxInt = 0
			v.Aux = nil
			v.resetArgs()
			v.Aux = true
			return true
		}
		goto end4776f3b7c019f66c11f7462ab6221b30
	end4776f3b7c019f66c11f7462ab6221b30:
		;
	case OpLess64:
		// match: (Less64 (Const [c]) (Const [d]))
		// cond:
		// result: (Const {c < d})
		{
			if v.Args[0].Op != OpgenericConst {
				goto end8c3b7743c186860306d6bf83ba521bbb
			}
			c := v.Args[0].AuxInt
			if v.Args[1].Op != OpgenericConst {
				goto end8c3b7743c186860306d6bf83ba521bbb
			}
			d := v.Args[1].AuxInt
			v.Op = OpgenericConst
			v.AuxInt = 0
			v.Aux = nil
			v.resetArgs()
			v.Aux = c < d
			return true
		}
		goto end8c3b7743c186860306d6bf83ba521bbb
	end8c3b7743c186860306d6bf83ba521bbb:
		;
	case OpLess64U:
		// match: (Less64U _ (Const [0]))
		// cond:
		// result: (Const {false})
		{
			if v.Args[1].Op != OpgenericConst {
				goto end28e2ab1ad78249c49f7f2d43019775f7
			}
			if v.Args[1].AuxInt != 0 {
				goto end28e2ab1ad78249c49f7f2d43019775f7
			}
			v.Op = OpgenericConst
			v.AuxInt = 0
			v.Aux = nil
			v.resetArgs()
			v.Aux = false
			return true
		}
		goto end28e2ab1ad78249c49f7f2d43019775f7
	end28e2ab1ad78249c49f7f2d43019775f7:
		;
	case OpLoad:
		// match: (Load <t> ptr mem)
		// cond: t.IsString()
		// result: (StringMake (Load <TypeBytePtr> ptr mem) (Load <config.Uintptr> (OffPtr <TypeBytePtr> [config.PtrSize] ptr) mem))
		{
			t := v.Type
			ptr := v.Args[0]
			mem := v.Args[1]
			if !(t.IsString()) {
				goto endce3ba169a57b8a9f6b12751d49b4e23a
			}
			v.Op = OpStringMake
			v.AuxInt = 0
			v.Aux = nil
			v.resetArgs()
			v0 := v.Block.NewValue0(v.Line, OpLoad, TypeInvalid)
			v0.Type = TypeBytePtr
			v0.AddArg(ptr)
			v0.AddArg(mem)
			v.AddArg(v0)
			v1 := v.Block.NewValue0(v.Line, OpLoad, TypeInvalid)
			v1.Type = config.Uintptr
			v2 := v.Block.NewValue0(v.Line, OpOffPtr, TypeInvalid)
			v2.Type = TypeBytePtr
			v2.AuxInt = config.PtrSize
			v2.AddArg(ptr)
			v1.AddArg(v2)
			v1.AddArg(mem)
			v.AddArg(v1)
			return true
		}
		goto endce3ba169a57b8a9f6b12751d49b4e23a
	endce3ba169a57b8a9f6b12751d49b4e23a:
		;
	case OpLsh64:
		// match: (Lsh64 _ (Const [c]))
		// cond: c >= 64
		// result: (Const [0])
		{
			if v.Args[1].Op != OpgenericConst {
				goto end5ebe9483b713bc0b7ac6c527ddba6cf1
			}
			c := v.Args[1].AuxInt
			if !(c >= 64) {
				goto end5ebe9483b713bc0b7ac6c527ddba6cf1
			}
			v.Op = OpgenericConst
			v.AuxInt = 0
			v.Aux = nil
			v.resetArgs()
			v.AuxInt = 0
			return true
		}
		goto end5ebe9483b713bc0b7ac6c527ddba6cf1
	end5ebe9483b713bc0b7ac6c527ddba6cf1:
		;
		// match: (Lsh64 (Const [c]) (Const [d]))
		// cond: d >= 0
		// result: (Const [c<<uint(d)])
		{
			if v.Args[0].Op != OpgenericConst {
				goto end4ecda125b062159deb198f69922f5f82
			}
			c := v.Args[0].AuxInt
			if v.Args[1].Op != OpgenericConst {
				goto end4ecda125b062159deb198f69922f5f82
			}
			d := v.Args[1].AuxInt
			if !(d >= 0) {
				goto end4ecda125b062159deb198f69922f5f82
			}
			v.Op = OpgenericConst
			v.AuxInt = 0
			v.Aux = nil
			v.resetArgs()
			v.AuxInt = c << uint(d)
			return true
		}
		goto end4ecda125b062159deb198f69922f5f82
	end4ecda125b062159deb198f69922f5f82:
		;
	case OpMul64:
		// match: (Mul64 (Const [c]) (Const [d]))
		// cond:
		// result: (Const [c*d])
		{
			if v.Args[0].Op != OpgenericConst {
				goto endf4ba5346dc8a624781afaa68a8096a9a
			}
			c := v.Args[0].AuxInt
			if v.Args[1].Op != OpgenericConst {
				goto endf4ba5346dc8a624781afaa68a8096a9a
			}
			d := v.Args[1].AuxInt
			v.Op = OpgenericConst
			v.AuxInt = 0
			v.Aux = nil
			v.resetArgs()
			v.AuxInt = c * d
			return true
		}
		goto endf4ba5346dc8a624781afaa68a8096a9a
	endf4ba5346dc8a624781afaa68a8096a9a:
		;
	case OpgenericMul64U:
		// match: (Mul64U (Const [c]) (Const [d]))
		// cond:
		// result: (Const [c*d])
		{
			if v.Args[0].Op != OpgenericConst {
				goto end88b6638d23b281a90172e80ab26549cb
			}
			c := v.Args[0].AuxInt
			if v.Args[1].Op != OpgenericConst {
				goto end88b6638d23b281a90172e80ab26549cb
			}
			d := v.Args[1].AuxInt
			v.Op = OpgenericConst
			v.AuxInt = 0
			v.Aux = nil
			v.resetArgs()
			v.AuxInt = c * d
			return true
		}
		goto end88b6638d23b281a90172e80ab26549cb
	end88b6638d23b281a90172e80ab26549cb:
		;
	case OpMulPtr:
		// match: (MulPtr (Const [c]) (Const [d]))
		// cond:
		// result: (Const [c*d])
		{
			if v.Args[0].Op != OpgenericConst {
				goto end10541de7ea2bce703c1e372ac9a271e7
			}
			c := v.Args[0].AuxInt
			if v.Args[1].Op != OpgenericConst {
				goto end10541de7ea2bce703c1e372ac9a271e7
			}
			d := v.Args[1].AuxInt
			v.Op = OpgenericConst
			v.AuxInt = 0
			v.Aux = nil
			v.resetArgs()
			v.AuxInt = c * d
			return true
		}
		goto end10541de7ea2bce703c1e372ac9a271e7
	end10541de7ea2bce703c1e372ac9a271e7:
		;
	case OpNeq64:
		// match: (Neq64 (Const [c]) (Const [d]))
		// cond:
		// result: (Const {c != d})
		{
			if v.Args[0].Op != OpgenericConst {
				goto end2bd4317082749fedd01a7a0ff38e0b04
			}
			c := v.Args[0].AuxInt
			if v.Args[1].Op != OpgenericConst {
				goto end2bd4317082749fedd01a7a0ff38e0b04
			}
			d := v.Args[1].AuxInt
			v.Op = OpgenericConst
			v.AuxInt = 0
			v.Aux = nil
			v.resetArgs()
			v.Aux = c != d
			return true
		}
		goto end2bd4317082749fedd01a7a0ff38e0b04
	end2bd4317082749fedd01a7a0ff38e0b04:
		;
		// match: (Neq64 x y)
		// cond: x == y
		// result: (Const {false})
		{
			x := v.Args[0]
			y := v.Args[1]
			if !(x == y) {
				goto endec383439bf5f686d61d4e94fc1793d5c
			}
			v.Op = OpgenericConst
			v.AuxInt = 0
			v.Aux = nil
			v.resetArgs()
			v.Aux = false
			return true
		}
		goto endec383439bf5f686d61d4e94fc1793d5c
	endec383439bf5f686d61d4e94fc1793d5c:
		;
	case OpNeqFat:
		// match: (NeqFat x y)
		// cond: x.Op == OpConstNil && y.Op != OpConstNil
		// result: (NeqFat y x)
		{
			x := v.Args[0]
			y := v.Args[1]
			if !(x.Op == OpConstNil && y.Op != OpConstNil) {
				goto end94c68f7dc30c66ed42e507e01c4e5dc7
			}
			v.Op = OpNeqFat
			v.AuxInt = 0
			v.Aux = nil
			v.resetArgs()
			v.AddArg(y)
			v.AddArg(x)
			return true
		}
		goto end94c68f7dc30c66ed42e507e01c4e5dc7
	end94c68f7dc30c66ed42e507e01c4e5dc7:
		;
		// match: (NeqFat (Load ptr mem) (ConstNil))
		// cond:
		// result: (NeqPtr (Load <config.Uintptr> ptr mem) (ConstPtr <config.Uintptr> [0]))
		{
			if v.Args[0].Op != OpLoad {
				goto end03a0fc8dde062c55439174f70c19e6ce
			}
			ptr := v.Args[0].Args[0]
			mem := v.Args[0].Args[1]
			if v.Args[1].Op != OpConstNil {
				goto end03a0fc8dde062c55439174f70c19e6ce
			}
			v.Op = OpNeqPtr
			v.AuxInt = 0
			v.Aux = nil
			v.resetArgs()
			v0 := v.Block.NewValue0(v.Line, OpLoad, TypeInvalid)
			v0.Type = config.Uintptr
			v0.AddArg(ptr)
			v0.AddArg(mem)
			v.AddArg(v0)
			v1 := v.Block.NewValue0(v.Line, OpConstPtr, TypeInvalid)
			v1.Type = config.Uintptr
			v1.AuxInt = 0
			v.AddArg(v1)
			return true
		}
		goto end03a0fc8dde062c55439174f70c19e6ce
	end03a0fc8dde062c55439174f70c19e6ce:
		;
	case OpPtrIndex:
		// match: (PtrIndex <t> ptr idx)
		// cond:
		// result: (AddPtr ptr (MulPtr <config.Uintptr> idx (ConstPtr <config.Uintptr> [t.Elem().Size()])))
		{
			t := v.Type
			ptr := v.Args[0]
			idx := v.Args[1]
			v.Op = OpAddPtr
			v.AuxInt = 0
			v.Aux = nil
			v.resetArgs()
			v.AddArg(ptr)
			v0 := v.Block.NewValue0(v.Line, OpMulPtr, TypeInvalid)
			v0.Type = config.Uintptr
			v0.AddArg(idx)
			v1 := v.Block.NewValue0(v.Line, OpConstPtr, TypeInvalid)
			v1.Type = config.Uintptr
			v1.AuxInt = t.Elem().Size()
			v0.AddArg(v1)
			v.AddArg(v0)
			return true
		}
		goto endfb3e605edaa4c3c0684c4fa9c8f150ee
	endfb3e605edaa4c3c0684c4fa9c8f150ee:
		;
	case OpRsh64:
		// match: (Rsh64 (Const [c]) (Const [d]))
		// cond:
		// result: (Const [c>>uint(d)])
		{
			if v.Args[0].Op != OpgenericConst {
				goto endb8dd52de57df7d377c69e31024ef29a4
			}
			c := v.Args[0].AuxInt
			if v.Args[1].Op != OpgenericConst {
				goto endb8dd52de57df7d377c69e31024ef29a4
			}
			d := v.Args[1].AuxInt
			v.Op = OpgenericConst
			v.AuxInt = 0
			v.Aux = nil
			v.resetArgs()
			v.AuxInt = c >> uint(d)
			return true
		}
		goto endb8dd52de57df7d377c69e31024ef29a4
	endb8dd52de57df7d377c69e31024ef29a4:
		;
	case OpRsh64U:
		// match: (Rsh64U _ (Const [c]))
		// cond: c >= 64
		// result: (Const [0])
		{
			if v.Args[1].Op != OpgenericConst {
				goto end242300bc7a087296b80e4832932cfa6f
			}
			c := v.Args[1].AuxInt
			if !(c >= 64) {
				goto end242300bc7a087296b80e4832932cfa6f
			}
			v.Op = OpgenericConst
			v.AuxInt = 0
			v.Aux = nil
			v.resetArgs()
			v.AuxInt = 0
			return true
		}
		goto end242300bc7a087296b80e4832932cfa6f
	end242300bc7a087296b80e4832932cfa6f:
		;
		// match: (Rsh64U (Const [c]) (Const [d]))
		// cond:
		// result: (Const [c>>uint(d)])
		{
			if v.Args[0].Op != OpgenericConst {
				goto end88db42283d5ece4eef762cdfd9cf1516
			}
			c := v.Args[0].AuxInt
			if v.Args[1].Op != OpgenericConst {
				goto end88db42283d5ece4eef762cdfd9cf1516
			}
			d := v.Args[1].AuxInt
			v.Op = OpgenericConst
			v.AuxInt = 0
			v.Aux = nil
			v.resetArgs()
			v.AuxInt = c >> uint(d)
			return true
		}
		goto end88db42283d5ece4eef762cdfd9cf1516
	end88db42283d5ece4eef762cdfd9cf1516:
		;
	case OpSliceCap:
		// match: (SliceCap (Load ptr mem))
		// cond:
		// result: (Load (AddPtr <ptr.Type> ptr (ConstPtr <config.Uintptr> [config.PtrSize*2])) mem)
		{
			if v.Args[0].Op != OpLoad {
				goto end18c7acae3d96b30b9e5699194df4a687
			}
			ptr := v.Args[0].Args[0]
			mem := v.Args[0].Args[1]
			v.Op = OpLoad
			v.AuxInt = 0
			v.Aux = nil
			v.resetArgs()
			v0 := v.Block.NewValue0(v.Line, OpAddPtr, TypeInvalid)
			v0.Type = ptr.Type
			v0.AddArg(ptr)
			v1 := v.Block.NewValue0(v.Line, OpConstPtr, TypeInvalid)
			v1.Type = config.Uintptr
			v1.AuxInt = config.PtrSize * 2
			v0.AddArg(v1)
			v.AddArg(v0)
			v.AddArg(mem)
			return true
		}
		goto end18c7acae3d96b30b9e5699194df4a687
	end18c7acae3d96b30b9e5699194df4a687:
		;
	case OpSliceLen:
		// match: (SliceLen (Load ptr mem))
		// cond:
		// result: (Load (AddPtr <ptr.Type> ptr (ConstPtr <config.Uintptr> [config.PtrSize])) mem)
		{
			if v.Args[0].Op != OpLoad {
				goto end2dc65aee31bb0d91847032be777777d2
			}
			ptr := v.Args[0].Args[0]
			mem := v.Args[0].Args[1]
			v.Op = OpLoad
			v.AuxInt = 0
			v.Aux = nil
			v.resetArgs()
			v0 := v.Block.NewValue0(v.Line, OpAddPtr, TypeInvalid)
			v0.Type = ptr.Type
			v0.AddArg(ptr)
			v1 := v.Block.NewValue0(v.Line, OpConstPtr, TypeInvalid)
			v1.Type = config.Uintptr
			v1.AuxInt = config.PtrSize
			v0.AddArg(v1)
			v.AddArg(v0)
			v.AddArg(mem)
			return true
		}
		goto end2dc65aee31bb0d91847032be777777d2
	end2dc65aee31bb0d91847032be777777d2:
		;
	case OpSlicePtr:
		// match: (SlicePtr (Load ptr mem))
		// cond:
		// result: (Load ptr mem)
		{
			if v.Args[0].Op != OpLoad {
				goto end459613b83f95b65729d45c2ed663a153
			}
			ptr := v.Args[0].Args[0]
			mem := v.Args[0].Args[1]
			v.Op = OpLoad
			v.AuxInt = 0
			v.Aux = nil
			v.resetArgs()
			v.AddArg(ptr)
			v.AddArg(mem)
			return true
		}
		goto end459613b83f95b65729d45c2ed663a153
	end459613b83f95b65729d45c2ed663a153:
		;
	case OpStore:
		// match: (Store dst (Load <t> src mem) mem)
		// cond: t.Size() > 8
		// result: (Move [t.Size()] dst src mem)
		{
			dst := v.Args[0]
			if v.Args[1].Op != OpLoad {
				goto end324ffb6d2771808da4267f62c854e9c8
			}
			t := v.Args[1].Type
			src := v.Args[1].Args[0]
			mem := v.Args[1].Args[1]
			if v.Args[2] != v.Args[1].Args[1] {
				goto end324ffb6d2771808da4267f62c854e9c8
			}
			if !(t.Size() > 8) {
				goto end324ffb6d2771808da4267f62c854e9c8
			}
			v.Op = OpMove
			v.AuxInt = 0
			v.Aux = nil
			v.resetArgs()
			v.AuxInt = t.Size()
			v.AddArg(dst)
			v.AddArg(src)
			v.AddArg(mem)
			return true
		}
		goto end324ffb6d2771808da4267f62c854e9c8
	end324ffb6d2771808da4267f62c854e9c8:
		;
		// match: (Store dst str mem)
		// cond: str.Type.IsString()
		// result: (Store (OffPtr <TypeBytePtr> [config.PtrSize] dst) (StringLen <config.Uintptr> str) (Store <TypeMem> dst (StringPtr <TypeBytePtr> str) mem))
		{
			dst := v.Args[0]
			str := v.Args[1]
			mem := v.Args[2]
			if !(str.Type.IsString()) {
				goto endb47e037c1e5ac54c3a41d53163d8aef6
			}
			v.Op = OpStore
			v.AuxInt = 0
			v.Aux = nil
			v.resetArgs()
			v0 := v.Block.NewValue0(v.Line, OpOffPtr, TypeInvalid)
			v0.Type = TypeBytePtr
			v0.AuxInt = config.PtrSize
			v0.AddArg(dst)
			v.AddArg(v0)
			v1 := v.Block.NewValue0(v.Line, OpStringLen, TypeInvalid)
			v1.Type = config.Uintptr
			v1.AddArg(str)
			v.AddArg(v1)
			v2 := v.Block.NewValue0(v.Line, OpStore, TypeInvalid)
			v2.Type = TypeMem
			v2.AddArg(dst)
			v3 := v.Block.NewValue0(v.Line, OpStringPtr, TypeInvalid)
			v3.Type = TypeBytePtr
			v3.AddArg(str)
			v2.AddArg(v3)
			v2.AddArg(mem)
			v.AddArg(v2)
			return true
		}
		goto endb47e037c1e5ac54c3a41d53163d8aef6
	endb47e037c1e5ac54c3a41d53163d8aef6:
		;
	case OpStringLen:
		// match: (StringLen (StringMake _ len))
		// cond:
		// result: len
		{
			if v.Args[0].Op != OpStringMake {
				goto end0d922460b7e5ca88324034f4bd6c027c
			}
			len := v.Args[0].Args[1]
			v.Op = len.Op
			v.AuxInt = len.AuxInt
			v.Aux = len.Aux
			v.resetArgs()
			v.AddArgs(len.Args...)
			return true
		}
		goto end0d922460b7e5ca88324034f4bd6c027c
	end0d922460b7e5ca88324034f4bd6c027c:
		;
	case OpStringPtr:
		// match: (StringPtr (StringMake ptr _))
		// cond:
		// result: ptr
		{
			if v.Args[0].Op != OpStringMake {
				goto end061edc5d85c73ad909089af2556d9380
			}
			ptr := v.Args[0].Args[0]
			v.Op = ptr.Op
			v.AuxInt = ptr.AuxInt
			v.Aux = ptr.Aux
			v.resetArgs()
			v.AddArgs(ptr.Args...)
			return true
		}
		goto end061edc5d85c73ad909089af2556d9380
	end061edc5d85c73ad909089af2556d9380:
		;
	case OpStructSelect:
		// match: (StructSelect [idx] (Load ptr mem))
		// cond:
		// result: (Load (OffPtr <v.Type.PtrTo()> [idx] ptr) mem)
		{
			idx := v.AuxInt
			if v.Args[0].Op != OpLoad {
				goto end16fdb45e1dd08feb36e3cc3fb5ed8935
			}
			ptr := v.Args[0].Args[0]
			mem := v.Args[0].Args[1]
			v.Op = OpLoad
			v.AuxInt = 0
			v.Aux = nil
			v.resetArgs()
			v0 := v.Block.NewValue0(v.Line, OpOffPtr, TypeInvalid)
			v0.Type = v.Type.PtrTo()
			v0.AuxInt = idx
			v0.AddArg(ptr)
			v.AddArg(v0)
			v.AddArg(mem)
			return true
		}
		goto end16fdb45e1dd08feb36e3cc3fb5ed8935
	end16fdb45e1dd08feb36e3cc3fb5ed8935:
		;
	case OpSub64:
		// match: (Sub64 x y)
		// cond: x == y
		// result: (Const [0])
		{
			x := v.Args[0]
			y := v.Args[1]
			if !(x == y) {
				goto end3a322a1a44d570374c29f2aec6f8998a
			}
			v.Op = OpgenericConst
			v.AuxInt = 0
			v.Aux = nil
			v.resetArgs()
			v.AuxInt = 0
			return true
		}
		goto end3a322a1a44d570374c29f2aec6f8998a
	end3a322a1a44d570374c29f2aec6f8998a:
		;
	case OpgenericSub64U:
		// match: (Sub64U x y)
		// cond: x == y
		// result: (Const [0])
		{
			x := v.Args[0]
			y := v.Args[1]
			if !(x == y) {
				goto endffc883c936f435f1f47a0fcf4df21865
			}
			v.Op = OpgenericConst
			v.AuxInt = 0
			v.Aux = nil
			v.resetArgs()
			v.AuxInt = 0
			return true
		}
		goto endffc883c936f435f1f47a0fcf4df21865
	endffc883c936f435f1f47a0fcf4df21865:
	}
	return false
}
func rewriteBlockgeneric(b *Block) bool {
	switch b.Kind {
	case BlockIf:
		// match: (If (Not cond) yes no)
		// cond:
		// result: (If cond no yes)
		{
			v := b.Control
			if v.Op != OpNot {
				goto endebe19c1c3c3bec068cdb2dd29ef57f96
			}
			cond := v.Args[0]
			yes := b.Succs[0]
			no := b.Succs[1]
			b.Kind = BlockIf
			b.Control = cond
			b.Succs[0] = no
			b.Succs[1] = yes
			return true
		}
		goto endebe19c1c3c3bec068cdb2dd29ef57f96
	endebe19c1c3c3bec068cdb2dd29ef57f96:
		;
		// match: (If (ConstBool {c}) yes no)
		// cond: c.(bool)
		// result: (Plain nil yes)
		{
			v := b.Control
			if v.Op != OpConstBool {
				goto end9ff0273f9b1657f4afc287562ca889f0
			}
			c := v.Aux
			yes := b.Succs[0]
			no := b.Succs[1]
			if !(c.(bool)) {
				goto end9ff0273f9b1657f4afc287562ca889f0
			}
			v.Block.Func.removePredecessor(b, no)
			b.Kind = BlockPlain
			b.Control = nil
			b.Succs = b.Succs[:1]
			b.Succs[0] = yes
			return true
		}
		goto end9ff0273f9b1657f4afc287562ca889f0
	end9ff0273f9b1657f4afc287562ca889f0:
		;
		// match: (If (ConstBool {c}) yes no)
		// cond: !c.(bool)
		// result: (Plain nil no)
		{
			v := b.Control
			if v.Op != OpConstBool {
				goto endf401a4553c3c7c6bed64801da7bba076
			}
			c := v.Aux
			yes := b.Succs[0]
			no := b.Succs[1]
			if !(!c.(bool)) {
				goto endf401a4553c3c7c6bed64801da7bba076
			}
			v.Block.Func.removePredecessor(b, yes)
			b.Kind = BlockPlain
			b.Control = nil
			b.Succs = b.Succs[:1]
			b.Succs[0] = no
			return true
		}
		goto endf401a4553c3c7c6bed64801da7bba076
	endf401a4553c3c7c6bed64801da7bba076:
	}
	return false
}
