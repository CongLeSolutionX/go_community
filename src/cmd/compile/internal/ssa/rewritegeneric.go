// autogenerated from gen/generic.rules: do not edit!
// generated with: cd gen; go run *.go
package ssa

import "math"

var _ = math.MinInt8 // in case not otherwise used
func rewriteValuegeneric(v *Value, config *Config) bool {
	switch v.Op {
	case OpAdd16:
		return rewriteValuegeneric_OpAdd16(v, config)
	case OpAdd32:
		return rewriteValuegeneric_OpAdd32(v, config)
	case OpAdd64:
		return rewriteValuegeneric_OpAdd64(v, config)
	case OpAdd8:
		return rewriteValuegeneric_OpAdd8(v, config)
	case OpAnd16:
		return rewriteValuegeneric_OpAnd16(v, config)
	case OpAnd32:
		return rewriteValuegeneric_OpAnd32(v, config)
	case OpAnd64:
		return rewriteValuegeneric_OpAnd64(v, config)
	case OpAnd8:
		return rewriteValuegeneric_OpAnd8(v, config)
	case OpArg:
		return rewriteValuegeneric_OpArg(v, config)
	case OpArrayIndex:
		return rewriteValuegeneric_OpArrayIndex(v, config)
	case OpCom16:
		return rewriteValuegeneric_OpCom16(v, config)
	case OpCom32:
		return rewriteValuegeneric_OpCom32(v, config)
	case OpCom64:
		return rewriteValuegeneric_OpCom64(v, config)
	case OpCom8:
		return rewriteValuegeneric_OpCom8(v, config)
	case OpComplexImag:
		return rewriteValuegeneric_OpComplexImag(v, config)
	case OpComplexReal:
		return rewriteValuegeneric_OpComplexReal(v, config)
	case OpConstInterface:
		return rewriteValuegeneric_OpConstInterface(v, config)
	case OpConstSlice:
		return rewriteValuegeneric_OpConstSlice(v, config)
	case OpConstString:
		return rewriteValuegeneric_OpConstString(v, config)
	case OpConvert:
		return rewriteValuegeneric_OpConvert(v, config)
	case OpEq16:
		return rewriteValuegeneric_OpEq16(v, config)
	case OpEq32:
		return rewriteValuegeneric_OpEq32(v, config)
	case OpEq64:
		return rewriteValuegeneric_OpEq64(v, config)
	case OpEq8:
		return rewriteValuegeneric_OpEq8(v, config)
	case OpEqInter:
		return rewriteValuegeneric_OpEqInter(v, config)
	case OpEqPtr:
		return rewriteValuegeneric_OpEqPtr(v, config)
	case OpEqSlice:
		return rewriteValuegeneric_OpEqSlice(v, config)
	case OpGeq16:
		return rewriteValuegeneric_OpGeq16(v, config)
	case OpGeq16U:
		return rewriteValuegeneric_OpGeq16U(v, config)
	case OpGeq32:
		return rewriteValuegeneric_OpGeq32(v, config)
	case OpGeq32U:
		return rewriteValuegeneric_OpGeq32U(v, config)
	case OpGeq64:
		return rewriteValuegeneric_OpGeq64(v, config)
	case OpGeq64U:
		return rewriteValuegeneric_OpGeq64U(v, config)
	case OpGeq8:
		return rewriteValuegeneric_OpGeq8(v, config)
	case OpGeq8U:
		return rewriteValuegeneric_OpGeq8U(v, config)
	case OpGreater16:
		return rewriteValuegeneric_OpGreater16(v, config)
	case OpGreater16U:
		return rewriteValuegeneric_OpGreater16U(v, config)
	case OpGreater32:
		return rewriteValuegeneric_OpGreater32(v, config)
	case OpGreater32U:
		return rewriteValuegeneric_OpGreater32U(v, config)
	case OpGreater64:
		return rewriteValuegeneric_OpGreater64(v, config)
	case OpGreater64U:
		return rewriteValuegeneric_OpGreater64U(v, config)
	case OpGreater8:
		return rewriteValuegeneric_OpGreater8(v, config)
	case OpGreater8U:
		return rewriteValuegeneric_OpGreater8U(v, config)
	case OpIData:
		return rewriteValuegeneric_OpIData(v, config)
	case OpITab:
		return rewriteValuegeneric_OpITab(v, config)
	case OpIsInBounds:
		return rewriteValuegeneric_OpIsInBounds(v, config)
	case OpIsSliceInBounds:
		return rewriteValuegeneric_OpIsSliceInBounds(v, config)
	case OpLeq16:
		return rewriteValuegeneric_OpLeq16(v, config)
	case OpLeq16U:
		return rewriteValuegeneric_OpLeq16U(v, config)
	case OpLeq32:
		return rewriteValuegeneric_OpLeq32(v, config)
	case OpLeq32U:
		return rewriteValuegeneric_OpLeq32U(v, config)
	case OpLeq64:
		return rewriteValuegeneric_OpLeq64(v, config)
	case OpLeq64U:
		return rewriteValuegeneric_OpLeq64U(v, config)
	case OpLeq8:
		return rewriteValuegeneric_OpLeq8(v, config)
	case OpLeq8U:
		return rewriteValuegeneric_OpLeq8U(v, config)
	case OpLess16:
		return rewriteValuegeneric_OpLess16(v, config)
	case OpLess16U:
		return rewriteValuegeneric_OpLess16U(v, config)
	case OpLess32:
		return rewriteValuegeneric_OpLess32(v, config)
	case OpLess32U:
		return rewriteValuegeneric_OpLess32U(v, config)
	case OpLess64:
		return rewriteValuegeneric_OpLess64(v, config)
	case OpLess64U:
		return rewriteValuegeneric_OpLess64U(v, config)
	case OpLess8:
		return rewriteValuegeneric_OpLess8(v, config)
	case OpLess8U:
		return rewriteValuegeneric_OpLess8U(v, config)
	case OpLoad:
		return rewriteValuegeneric_OpLoad(v, config)
	case OpLsh16x16:
		return rewriteValuegeneric_OpLsh16x16(v, config)
	case OpLsh16x32:
		return rewriteValuegeneric_OpLsh16x32(v, config)
	case OpLsh16x64:
		return rewriteValuegeneric_OpLsh16x64(v, config)
	case OpLsh16x8:
		return rewriteValuegeneric_OpLsh16x8(v, config)
	case OpLsh32x16:
		return rewriteValuegeneric_OpLsh32x16(v, config)
	case OpLsh32x32:
		return rewriteValuegeneric_OpLsh32x32(v, config)
	case OpLsh32x64:
		return rewriteValuegeneric_OpLsh32x64(v, config)
	case OpLsh32x8:
		return rewriteValuegeneric_OpLsh32x8(v, config)
	case OpLsh64x16:
		return rewriteValuegeneric_OpLsh64x16(v, config)
	case OpLsh64x32:
		return rewriteValuegeneric_OpLsh64x32(v, config)
	case OpLsh64x64:
		return rewriteValuegeneric_OpLsh64x64(v, config)
	case OpLsh64x8:
		return rewriteValuegeneric_OpLsh64x8(v, config)
	case OpLsh8x16:
		return rewriteValuegeneric_OpLsh8x16(v, config)
	case OpLsh8x32:
		return rewriteValuegeneric_OpLsh8x32(v, config)
	case OpLsh8x64:
		return rewriteValuegeneric_OpLsh8x64(v, config)
	case OpLsh8x8:
		return rewriteValuegeneric_OpLsh8x8(v, config)
	case OpMul16:
		return rewriteValuegeneric_OpMul16(v, config)
	case OpMul32:
		return rewriteValuegeneric_OpMul32(v, config)
	case OpMul64:
		return rewriteValuegeneric_OpMul64(v, config)
	case OpMul8:
		return rewriteValuegeneric_OpMul8(v, config)
	case OpNeq16:
		return rewriteValuegeneric_OpNeq16(v, config)
	case OpNeq32:
		return rewriteValuegeneric_OpNeq32(v, config)
	case OpNeq64:
		return rewriteValuegeneric_OpNeq64(v, config)
	case OpNeq8:
		return rewriteValuegeneric_OpNeq8(v, config)
	case OpNeqInter:
		return rewriteValuegeneric_OpNeqInter(v, config)
	case OpNeqPtr:
		return rewriteValuegeneric_OpNeqPtr(v, config)
	case OpNeqSlice:
		return rewriteValuegeneric_OpNeqSlice(v, config)
	case OpOr16:
		return rewriteValuegeneric_OpOr16(v, config)
	case OpOr32:
		return rewriteValuegeneric_OpOr32(v, config)
	case OpOr64:
		return rewriteValuegeneric_OpOr64(v, config)
	case OpOr8:
		return rewriteValuegeneric_OpOr8(v, config)
	case OpPtrIndex:
		return rewriteValuegeneric_OpPtrIndex(v, config)
	case OpRsh16Ux16:
		return rewriteValuegeneric_OpRsh16Ux16(v, config)
	case OpRsh16Ux32:
		return rewriteValuegeneric_OpRsh16Ux32(v, config)
	case OpRsh16Ux64:
		return rewriteValuegeneric_OpRsh16Ux64(v, config)
	case OpRsh16Ux8:
		return rewriteValuegeneric_OpRsh16Ux8(v, config)
	case OpRsh16x16:
		return rewriteValuegeneric_OpRsh16x16(v, config)
	case OpRsh16x32:
		return rewriteValuegeneric_OpRsh16x32(v, config)
	case OpRsh16x64:
		return rewriteValuegeneric_OpRsh16x64(v, config)
	case OpRsh16x8:
		return rewriteValuegeneric_OpRsh16x8(v, config)
	case OpRsh32Ux16:
		return rewriteValuegeneric_OpRsh32Ux16(v, config)
	case OpRsh32Ux32:
		return rewriteValuegeneric_OpRsh32Ux32(v, config)
	case OpRsh32Ux64:
		return rewriteValuegeneric_OpRsh32Ux64(v, config)
	case OpRsh32Ux8:
		return rewriteValuegeneric_OpRsh32Ux8(v, config)
	case OpRsh32x16:
		return rewriteValuegeneric_OpRsh32x16(v, config)
	case OpRsh32x32:
		return rewriteValuegeneric_OpRsh32x32(v, config)
	case OpRsh32x64:
		return rewriteValuegeneric_OpRsh32x64(v, config)
	case OpRsh32x8:
		return rewriteValuegeneric_OpRsh32x8(v, config)
	case OpRsh64Ux16:
		return rewriteValuegeneric_OpRsh64Ux16(v, config)
	case OpRsh64Ux32:
		return rewriteValuegeneric_OpRsh64Ux32(v, config)
	case OpRsh64Ux64:
		return rewriteValuegeneric_OpRsh64Ux64(v, config)
	case OpRsh64Ux8:
		return rewriteValuegeneric_OpRsh64Ux8(v, config)
	case OpRsh64x16:
		return rewriteValuegeneric_OpRsh64x16(v, config)
	case OpRsh64x32:
		return rewriteValuegeneric_OpRsh64x32(v, config)
	case OpRsh64x64:
		return rewriteValuegeneric_OpRsh64x64(v, config)
	case OpRsh64x8:
		return rewriteValuegeneric_OpRsh64x8(v, config)
	case OpRsh8Ux16:
		return rewriteValuegeneric_OpRsh8Ux16(v, config)
	case OpRsh8Ux32:
		return rewriteValuegeneric_OpRsh8Ux32(v, config)
	case OpRsh8Ux64:
		return rewriteValuegeneric_OpRsh8Ux64(v, config)
	case OpRsh8Ux8:
		return rewriteValuegeneric_OpRsh8Ux8(v, config)
	case OpRsh8x16:
		return rewriteValuegeneric_OpRsh8x16(v, config)
	case OpRsh8x32:
		return rewriteValuegeneric_OpRsh8x32(v, config)
	case OpRsh8x64:
		return rewriteValuegeneric_OpRsh8x64(v, config)
	case OpRsh8x8:
		return rewriteValuegeneric_OpRsh8x8(v, config)
	case OpSliceCap:
		return rewriteValuegeneric_OpSliceCap(v, config)
	case OpSliceLen:
		return rewriteValuegeneric_OpSliceLen(v, config)
	case OpSlicePtr:
		return rewriteValuegeneric_OpSlicePtr(v, config)
	case OpStore:
		return rewriteValuegeneric_OpStore(v, config)
	case OpStringLen:
		return rewriteValuegeneric_OpStringLen(v, config)
	case OpStringPtr:
		return rewriteValuegeneric_OpStringPtr(v, config)
	case OpStructSelect:
		return rewriteValuegeneric_OpStructSelect(v, config)
	case OpSub16:
		return rewriteValuegeneric_OpSub16(v, config)
	case OpSub32:
		return rewriteValuegeneric_OpSub32(v, config)
	case OpSub64:
		return rewriteValuegeneric_OpSub64(v, config)
	case OpSub8:
		return rewriteValuegeneric_OpSub8(v, config)
	case OpXor16:
		return rewriteValuegeneric_OpXor16(v, config)
	case OpXor32:
		return rewriteValuegeneric_OpXor32(v, config)
	case OpXor64:
		return rewriteValuegeneric_OpXor64(v, config)
	case OpXor8:
		return rewriteValuegeneric_OpXor8(v, config)
	}
	return false
}
func rewriteValuegeneric_OpAdd16(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Add16 (Const16 [c]) (Const16 [d]))
	// cond:
	// result: (Const16 [c+d])
	{
		if v.Args[0].Op != OpConst16 {
			goto end359c546ef662b7990116329cb30d6892
		}
		c := v.Args[0].AuxInt
		if v.Args[1].Op != OpConst16 {
			goto end359c546ef662b7990116329cb30d6892
		}
		d := v.Args[1].AuxInt
		v.Op = OpConst16
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = c + d
		return true
	}
	goto end359c546ef662b7990116329cb30d6892
end359c546ef662b7990116329cb30d6892:
	;
	return false
}
func rewriteValuegeneric_OpAdd32(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Add32 (Const32 [c]) (Const32 [d]))
	// cond:
	// result: (Const32 [c+d])
	{
		if v.Args[0].Op != OpConst32 {
			goto enda3edaa9a512bd1d7a95f002c890bfb88
		}
		c := v.Args[0].AuxInt
		if v.Args[1].Op != OpConst32 {
			goto enda3edaa9a512bd1d7a95f002c890bfb88
		}
		d := v.Args[1].AuxInt
		v.Op = OpConst32
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = c + d
		return true
	}
	goto enda3edaa9a512bd1d7a95f002c890bfb88
enda3edaa9a512bd1d7a95f002c890bfb88:
	;
	return false
}
func rewriteValuegeneric_OpAdd64(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Add64 (Const64 [c]) (Const64 [d]))
	// cond:
	// result: (Const64 [c+d])
	{
		if v.Args[0].Op != OpConst64 {
			goto end8c46df6f85a11cb1d594076b0e467908
		}
		c := v.Args[0].AuxInt
		if v.Args[1].Op != OpConst64 {
			goto end8c46df6f85a11cb1d594076b0e467908
		}
		d := v.Args[1].AuxInt
		v.Op = OpConst64
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = c + d
		return true
	}
	goto end8c46df6f85a11cb1d594076b0e467908
end8c46df6f85a11cb1d594076b0e467908:
	;
	return false
}
func rewriteValuegeneric_OpAdd8(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Add8 (Const8 [c]) (Const8 [d]))
	// cond:
	// result: (Const8 [c+d])
	{
		if v.Args[0].Op != OpConst8 {
			goto end60c66721511a442aade8e4da2fb326bd
		}
		c := v.Args[0].AuxInt
		if v.Args[1].Op != OpConst8 {
			goto end60c66721511a442aade8e4da2fb326bd
		}
		d := v.Args[1].AuxInt
		v.Op = OpConst8
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = c + d
		return true
	}
	goto end60c66721511a442aade8e4da2fb326bd
end60c66721511a442aade8e4da2fb326bd:
	;
	return false
}
func rewriteValuegeneric_OpAnd16(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (And16 x x)
	// cond:
	// result: x
	{
		x := v.Args[0]
		if v.Args[1] != x {
			goto end69ed6ee2a4fb0491b56c17f3c1926b10
		}
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = x.Type
		v.AddArg(x)
		return true
	}
	goto end69ed6ee2a4fb0491b56c17f3c1926b10
end69ed6ee2a4fb0491b56c17f3c1926b10:
	;
	return false
}
func rewriteValuegeneric_OpAnd32(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (And32 x x)
	// cond:
	// result: x
	{
		x := v.Args[0]
		if v.Args[1] != x {
			goto endbbe8c3c5b2ca8f013aa178d856f3a99c
		}
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = x.Type
		v.AddArg(x)
		return true
	}
	goto endbbe8c3c5b2ca8f013aa178d856f3a99c
endbbe8c3c5b2ca8f013aa178d856f3a99c:
	;
	return false
}
func rewriteValuegeneric_OpAnd64(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (And64 x x)
	// cond:
	// result: x
	{
		x := v.Args[0]
		if v.Args[1] != x {
			goto endc9736bf24d2e5cd8d662e1bcf3164640
		}
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = x.Type
		v.AddArg(x)
		return true
	}
	goto endc9736bf24d2e5cd8d662e1bcf3164640
endc9736bf24d2e5cd8d662e1bcf3164640:
	;
	return false
}
func rewriteValuegeneric_OpAnd8(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (And8 x x)
	// cond:
	// result: x
	{
		x := v.Args[0]
		if v.Args[1] != x {
			goto endeaf127389bd0d4b0e0e297830f8f463b
		}
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = x.Type
		v.AddArg(x)
		return true
	}
	goto endeaf127389bd0d4b0e0e297830f8f463b
endeaf127389bd0d4b0e0e297830f8f463b:
	;
	return false
}
func rewriteValuegeneric_OpArg(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Arg {n} [off])
	// cond: v.Type.IsString()
	// result: (StringMake     (Arg <config.fe.TypeBytePtr()> {n} [off])     (Arg <config.fe.TypeInt()> {n} [off+config.PtrSize]))
	{
		n := v.Aux
		off := v.AuxInt
		if !(v.Type.IsString()) {
			goto end939d3f946bf61eb85b46b374e7afa9e9
		}
		v.Op = OpStringMake
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v0 := b.NewValue0(v.Line, OpArg, TypeInvalid)
		v0.Type = config.fe.TypeBytePtr()
		v0.Aux = n
		v0.AuxInt = off
		v.AddArg(v0)
		v1 := b.NewValue0(v.Line, OpArg, TypeInvalid)
		v1.Type = config.fe.TypeInt()
		v1.Aux = n
		v1.AuxInt = off + config.PtrSize
		v.AddArg(v1)
		return true
	}
	goto end939d3f946bf61eb85b46b374e7afa9e9
end939d3f946bf61eb85b46b374e7afa9e9:
	;
	// match: (Arg {n} [off])
	// cond: v.Type.IsSlice()
	// result: (SliceMake     (Arg <config.fe.TypeBytePtr()> {n} [off])     (Arg <config.fe.TypeInt()> {n} [off+config.PtrSize])     (Arg <config.fe.TypeInt()> {n} [off+2*config.PtrSize]))
	{
		n := v.Aux
		off := v.AuxInt
		if !(v.Type.IsSlice()) {
			goto endab4b93ad3b1cf55e5bf25d1fd9cd498e
		}
		v.Op = OpSliceMake
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v0 := b.NewValue0(v.Line, OpArg, TypeInvalid)
		v0.Type = config.fe.TypeBytePtr()
		v0.Aux = n
		v0.AuxInt = off
		v.AddArg(v0)
		v1 := b.NewValue0(v.Line, OpArg, TypeInvalid)
		v1.Type = config.fe.TypeInt()
		v1.Aux = n
		v1.AuxInt = off + config.PtrSize
		v.AddArg(v1)
		v2 := b.NewValue0(v.Line, OpArg, TypeInvalid)
		v2.Type = config.fe.TypeInt()
		v2.Aux = n
		v2.AuxInt = off + 2*config.PtrSize
		v.AddArg(v2)
		return true
	}
	goto endab4b93ad3b1cf55e5bf25d1fd9cd498e
endab4b93ad3b1cf55e5bf25d1fd9cd498e:
	;
	// match: (Arg {n} [off])
	// cond: v.Type.IsInterface()
	// result: (IMake     (Arg <config.fe.TypeBytePtr()> {n} [off])     (Arg <config.fe.TypeBytePtr()> {n} [off+config.PtrSize]))
	{
		n := v.Aux
		off := v.AuxInt
		if !(v.Type.IsInterface()) {
			goto end851de8e588a39e81b4e2aef06566bf3e
		}
		v.Op = OpIMake
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v0 := b.NewValue0(v.Line, OpArg, TypeInvalid)
		v0.Type = config.fe.TypeBytePtr()
		v0.Aux = n
		v0.AuxInt = off
		v.AddArg(v0)
		v1 := b.NewValue0(v.Line, OpArg, TypeInvalid)
		v1.Type = config.fe.TypeBytePtr()
		v1.Aux = n
		v1.AuxInt = off + config.PtrSize
		v.AddArg(v1)
		return true
	}
	goto end851de8e588a39e81b4e2aef06566bf3e
end851de8e588a39e81b4e2aef06566bf3e:
	;
	// match: (Arg {n} [off])
	// cond: v.Type.IsComplex() && v.Type.Size() == 16
	// result: (ComplexMake     (Arg <config.fe.TypeFloat64()> {n} [off])     (Arg <config.fe.TypeFloat64()> {n} [off+8]))
	{
		n := v.Aux
		off := v.AuxInt
		if !(v.Type.IsComplex() && v.Type.Size() == 16) {
			goto end0988fc6a62c810b2f4976cb6cf44387f
		}
		v.Op = OpComplexMake
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v0 := b.NewValue0(v.Line, OpArg, TypeInvalid)
		v0.Type = config.fe.TypeFloat64()
		v0.Aux = n
		v0.AuxInt = off
		v.AddArg(v0)
		v1 := b.NewValue0(v.Line, OpArg, TypeInvalid)
		v1.Type = config.fe.TypeFloat64()
		v1.Aux = n
		v1.AuxInt = off + 8
		v.AddArg(v1)
		return true
	}
	goto end0988fc6a62c810b2f4976cb6cf44387f
end0988fc6a62c810b2f4976cb6cf44387f:
	;
	// match: (Arg {n} [off])
	// cond: v.Type.IsComplex() && v.Type.Size() == 8
	// result: (ComplexMake     (Arg <config.fe.TypeFloat32()> {n} [off])     (Arg <config.fe.TypeFloat32()> {n} [off+4]))
	{
		n := v.Aux
		off := v.AuxInt
		if !(v.Type.IsComplex() && v.Type.Size() == 8) {
			goto enda348e93e0036873dd7089a2939c22e3e
		}
		v.Op = OpComplexMake
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v0 := b.NewValue0(v.Line, OpArg, TypeInvalid)
		v0.Type = config.fe.TypeFloat32()
		v0.Aux = n
		v0.AuxInt = off
		v.AddArg(v0)
		v1 := b.NewValue0(v.Line, OpArg, TypeInvalid)
		v1.Type = config.fe.TypeFloat32()
		v1.Aux = n
		v1.AuxInt = off + 4
		v.AddArg(v1)
		return true
	}
	goto enda348e93e0036873dd7089a2939c22e3e
enda348e93e0036873dd7089a2939c22e3e:
	;
	// match: (Arg <t>)
	// cond: t.IsStruct() && t.NumFields() == 0 && config.fe.CanSSA(t)
	// result: (StructMake0)
	{
		t := v.Type
		if !(t.IsStruct() && t.NumFields() == 0 && config.fe.CanSSA(t)) {
			goto ende233eeefa826638b0e541bcca531d701
		}
		v.Op = OpStructMake0
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		return true
	}
	goto ende233eeefa826638b0e541bcca531d701
ende233eeefa826638b0e541bcca531d701:
	;
	// match: (Arg <t> {n} [off])
	// cond: t.IsStruct() && t.NumFields() == 1 && config.fe.CanSSA(t)
	// result: (StructMake1     (Arg <t.FieldType(0)> {n} [off+t.FieldOff(0)]))
	{
		t := v.Type
		n := v.Aux
		off := v.AuxInt
		if !(t.IsStruct() && t.NumFields() == 1 && config.fe.CanSSA(t)) {
			goto ende953e77a0617051dd3f7ad4d58c9ab37
		}
		v.Op = OpStructMake1
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v0 := b.NewValue0(v.Line, OpArg, TypeInvalid)
		v0.Type = t.FieldType(0)
		v0.Aux = n
		v0.AuxInt = off + t.FieldOff(0)
		v.AddArg(v0)
		return true
	}
	goto ende953e77a0617051dd3f7ad4d58c9ab37
ende953e77a0617051dd3f7ad4d58c9ab37:
	;
	// match: (Arg <t> {n} [off])
	// cond: t.IsStruct() && t.NumFields() == 2 && config.fe.CanSSA(t)
	// result: (StructMake2     (Arg <t.FieldType(0)> {n} [off+t.FieldOff(0)])     (Arg <t.FieldType(1)> {n} [off+t.FieldOff(1)]))
	{
		t := v.Type
		n := v.Aux
		off := v.AuxInt
		if !(t.IsStruct() && t.NumFields() == 2 && config.fe.CanSSA(t)) {
			goto end9a008048978aabad9de0723212e60631
		}
		v.Op = OpStructMake2
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v0 := b.NewValue0(v.Line, OpArg, TypeInvalid)
		v0.Type = t.FieldType(0)
		v0.Aux = n
		v0.AuxInt = off + t.FieldOff(0)
		v.AddArg(v0)
		v1 := b.NewValue0(v.Line, OpArg, TypeInvalid)
		v1.Type = t.FieldType(1)
		v1.Aux = n
		v1.AuxInt = off + t.FieldOff(1)
		v.AddArg(v1)
		return true
	}
	goto end9a008048978aabad9de0723212e60631
end9a008048978aabad9de0723212e60631:
	;
	// match: (Arg <t> {n} [off])
	// cond: t.IsStruct() && t.NumFields() == 3 && config.fe.CanSSA(t)
	// result: (StructMake3     (Arg <t.FieldType(0)> {n} [off+t.FieldOff(0)])     (Arg <t.FieldType(1)> {n} [off+t.FieldOff(1)])     (Arg <t.FieldType(2)> {n} [off+t.FieldOff(2)]))
	{
		t := v.Type
		n := v.Aux
		off := v.AuxInt
		if !(t.IsStruct() && t.NumFields() == 3 && config.fe.CanSSA(t)) {
			goto end0196e61dbeebc6402f3aa1e9a182210b
		}
		v.Op = OpStructMake3
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v0 := b.NewValue0(v.Line, OpArg, TypeInvalid)
		v0.Type = t.FieldType(0)
		v0.Aux = n
		v0.AuxInt = off + t.FieldOff(0)
		v.AddArg(v0)
		v1 := b.NewValue0(v.Line, OpArg, TypeInvalid)
		v1.Type = t.FieldType(1)
		v1.Aux = n
		v1.AuxInt = off + t.FieldOff(1)
		v.AddArg(v1)
		v2 := b.NewValue0(v.Line, OpArg, TypeInvalid)
		v2.Type = t.FieldType(2)
		v2.Aux = n
		v2.AuxInt = off + t.FieldOff(2)
		v.AddArg(v2)
		return true
	}
	goto end0196e61dbeebc6402f3aa1e9a182210b
end0196e61dbeebc6402f3aa1e9a182210b:
	;
	// match: (Arg <t> {n} [off])
	// cond: t.IsStruct() && t.NumFields() == 4 && config.fe.CanSSA(t)
	// result: (StructMake4     (Arg <t.FieldType(0)> {n} [off+t.FieldOff(0)])     (Arg <t.FieldType(1)> {n} [off+t.FieldOff(1)])     (Arg <t.FieldType(2)> {n} [off+t.FieldOff(2)])     (Arg <t.FieldType(3)> {n} [off+t.FieldOff(3)]))
	{
		t := v.Type
		n := v.Aux
		off := v.AuxInt
		if !(t.IsStruct() && t.NumFields() == 4 && config.fe.CanSSA(t)) {
			goto end6bc133c93e50cb14c2e6cc9401850738
		}
		v.Op = OpStructMake4
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v0 := b.NewValue0(v.Line, OpArg, TypeInvalid)
		v0.Type = t.FieldType(0)
		v0.Aux = n
		v0.AuxInt = off + t.FieldOff(0)
		v.AddArg(v0)
		v1 := b.NewValue0(v.Line, OpArg, TypeInvalid)
		v1.Type = t.FieldType(1)
		v1.Aux = n
		v1.AuxInt = off + t.FieldOff(1)
		v.AddArg(v1)
		v2 := b.NewValue0(v.Line, OpArg, TypeInvalid)
		v2.Type = t.FieldType(2)
		v2.Aux = n
		v2.AuxInt = off + t.FieldOff(2)
		v.AddArg(v2)
		v3 := b.NewValue0(v.Line, OpArg, TypeInvalid)
		v3.Type = t.FieldType(3)
		v3.Aux = n
		v3.AuxInt = off + t.FieldOff(3)
		v.AddArg(v3)
		return true
	}
	goto end6bc133c93e50cb14c2e6cc9401850738
end6bc133c93e50cb14c2e6cc9401850738:
	;
	return false
}
func rewriteValuegeneric_OpArrayIndex(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (ArrayIndex (Load ptr mem) idx)
	// cond: b == v.Args[0].Block
	// result: (Load (PtrIndex <v.Type.PtrTo()> ptr idx) mem)
	{
		if v.Args[0].Op != OpLoad {
			goto end68b373270d9d605c420497edefaa71df
		}
		ptr := v.Args[0].Args[0]
		mem := v.Args[0].Args[1]
		idx := v.Args[1]
		if !(b == v.Args[0].Block) {
			goto end68b373270d9d605c420497edefaa71df
		}
		v.Op = OpLoad
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v0 := b.NewValue0(v.Line, OpPtrIndex, TypeInvalid)
		v0.Type = v.Type.PtrTo()
		v0.AddArg(ptr)
		v0.AddArg(idx)
		v.AddArg(v0)
		v.AddArg(mem)
		return true
	}
	goto end68b373270d9d605c420497edefaa71df
end68b373270d9d605c420497edefaa71df:
	;
	return false
}
func rewriteValuegeneric_OpCom16(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Com16 (Com16 x))
	// cond:
	// result: x
	{
		if v.Args[0].Op != OpCom16 {
			goto end1ea17710dd4dd7ba4e710e0e4c7b5a56
		}
		x := v.Args[0].Args[0]
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = x.Type
		v.AddArg(x)
		return true
	}
	goto end1ea17710dd4dd7ba4e710e0e4c7b5a56
end1ea17710dd4dd7ba4e710e0e4c7b5a56:
	;
	return false
}
func rewriteValuegeneric_OpCom32(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Com32 (Com32 x))
	// cond:
	// result: x
	{
		if v.Args[0].Op != OpCom32 {
			goto end9a04ed536496e292c27bef4414128cbf
		}
		x := v.Args[0].Args[0]
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = x.Type
		v.AddArg(x)
		return true
	}
	goto end9a04ed536496e292c27bef4414128cbf
end9a04ed536496e292c27bef4414128cbf:
	;
	return false
}
func rewriteValuegeneric_OpCom64(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Com64 (Com64 x))
	// cond:
	// result: x
	{
		if v.Args[0].Op != OpCom64 {
			goto ended44e29d5968f0f7b86972b7bf417ab3
		}
		x := v.Args[0].Args[0]
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = x.Type
		v.AddArg(x)
		return true
	}
	goto ended44e29d5968f0f7b86972b7bf417ab3
ended44e29d5968f0f7b86972b7bf417ab3:
	;
	return false
}
func rewriteValuegeneric_OpCom8(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Com8 (Com8 x))
	// cond:
	// result: x
	{
		if v.Args[0].Op != OpCom8 {
			goto end4d92ff3ba567d9afd38fc9ca113602ad
		}
		x := v.Args[0].Args[0]
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = x.Type
		v.AddArg(x)
		return true
	}
	goto end4d92ff3ba567d9afd38fc9ca113602ad
end4d92ff3ba567d9afd38fc9ca113602ad:
	;
	return false
}
func rewriteValuegeneric_OpComplexImag(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (ComplexImag (ComplexMake _ imag ))
	// cond:
	// result: imag
	{
		if v.Args[0].Op != OpComplexMake {
			goto endec3009fd8727d03002021997936e091f
		}
		imag := v.Args[0].Args[1]
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = imag.Type
		v.AddArg(imag)
		return true
	}
	goto endec3009fd8727d03002021997936e091f
endec3009fd8727d03002021997936e091f:
	;
	return false
}
func rewriteValuegeneric_OpComplexReal(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (ComplexReal (ComplexMake real _  ))
	// cond:
	// result: real
	{
		if v.Args[0].Op != OpComplexMake {
			goto end8db3e16bd59af1adaa4b734c8adcc71d
		}
		real := v.Args[0].Args[0]
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = real.Type
		v.AddArg(real)
		return true
	}
	goto end8db3e16bd59af1adaa4b734c8adcc71d
end8db3e16bd59af1adaa4b734c8adcc71d:
	;
	return false
}
func rewriteValuegeneric_OpConstInterface(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (ConstInterface)
	// cond:
	// result: (IMake     (ConstNil <config.fe.TypeBytePtr()>)     (ConstNil <config.fe.TypeBytePtr()>))
	{
		v.Op = OpIMake
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v0 := b.NewValue0(v.Line, OpConstNil, TypeInvalid)
		v0.Type = config.fe.TypeBytePtr()
		v.AddArg(v0)
		v1 := b.NewValue0(v.Line, OpConstNil, TypeInvalid)
		v1.Type = config.fe.TypeBytePtr()
		v.AddArg(v1)
		return true
	}
	goto end0367bd8f20a320cc41568f2b28657f6b
end0367bd8f20a320cc41568f2b28657f6b:
	;
	return false
}
func rewriteValuegeneric_OpConstSlice(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (ConstSlice)
	// cond: config.PtrSize == 4
	// result: (SliceMake     (ConstNil <config.fe.TypeBytePtr()>)     (Const32 <config.fe.TypeInt()> [0])     (Const32 <config.fe.TypeInt()> [0]))
	{
		if !(config.PtrSize == 4) {
			goto end9ba6baf9c7247b1f5ba4099c0c3910ce
		}
		v.Op = OpSliceMake
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v0 := b.NewValue0(v.Line, OpConstNil, TypeInvalid)
		v0.Type = config.fe.TypeBytePtr()
		v.AddArg(v0)
		v1 := b.NewValue0(v.Line, OpConst32, TypeInvalid)
		v1.Type = config.fe.TypeInt()
		v1.AuxInt = 0
		v.AddArg(v1)
		v2 := b.NewValue0(v.Line, OpConst32, TypeInvalid)
		v2.Type = config.fe.TypeInt()
		v2.AuxInt = 0
		v.AddArg(v2)
		return true
	}
	goto end9ba6baf9c7247b1f5ba4099c0c3910ce
end9ba6baf9c7247b1f5ba4099c0c3910ce:
	;
	// match: (ConstSlice)
	// cond: config.PtrSize == 8
	// result: (SliceMake     (ConstNil <config.fe.TypeBytePtr()>)     (Const64 <config.fe.TypeInt()> [0])     (Const64 <config.fe.TypeInt()> [0]))
	{
		if !(config.PtrSize == 8) {
			goto endabee2aa6bd3e3261628f677221ad2640
		}
		v.Op = OpSliceMake
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v0 := b.NewValue0(v.Line, OpConstNil, TypeInvalid)
		v0.Type = config.fe.TypeBytePtr()
		v.AddArg(v0)
		v1 := b.NewValue0(v.Line, OpConst64, TypeInvalid)
		v1.Type = config.fe.TypeInt()
		v1.AuxInt = 0
		v.AddArg(v1)
		v2 := b.NewValue0(v.Line, OpConst64, TypeInvalid)
		v2.Type = config.fe.TypeInt()
		v2.AuxInt = 0
		v.AddArg(v2)
		return true
	}
	goto endabee2aa6bd3e3261628f677221ad2640
endabee2aa6bd3e3261628f677221ad2640:
	;
	return false
}
func rewriteValuegeneric_OpConstString(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (ConstString {s})
	// cond: config.PtrSize == 4 && s.(string) == ""
	// result: (StringMake (ConstNil) (Const32 <config.fe.TypeInt()> [0]))
	{
		s := v.Aux
		if !(config.PtrSize == 4 && s.(string) == "") {
			goto end85d5f388ba947643af63cdc68c1155a5
		}
		v.Op = OpStringMake
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v0 := b.NewValue0(v.Line, OpConstNil, TypeInvalid)
		v0.Type = config.fe.TypeBytePtr()
		v.AddArg(v0)
		v1 := b.NewValue0(v.Line, OpConst32, TypeInvalid)
		v1.Type = config.fe.TypeInt()
		v1.AuxInt = 0
		v.AddArg(v1)
		return true
	}
	goto end85d5f388ba947643af63cdc68c1155a5
end85d5f388ba947643af63cdc68c1155a5:
	;
	// match: (ConstString {s})
	// cond: config.PtrSize == 8 && s.(string) == ""
	// result: (StringMake (ConstNil) (Const64 <config.fe.TypeInt()> [0]))
	{
		s := v.Aux
		if !(config.PtrSize == 8 && s.(string) == "") {
			goto endc807259a5ed2760fbbd3dc7386641343
		}
		v.Op = OpStringMake
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v0 := b.NewValue0(v.Line, OpConstNil, TypeInvalid)
		v0.Type = config.fe.TypeBytePtr()
		v.AddArg(v0)
		v1 := b.NewValue0(v.Line, OpConst64, TypeInvalid)
		v1.Type = config.fe.TypeInt()
		v1.AuxInt = 0
		v.AddArg(v1)
		return true
	}
	goto endc807259a5ed2760fbbd3dc7386641343
endc807259a5ed2760fbbd3dc7386641343:
	;
	// match: (ConstString {s})
	// cond: config.PtrSize == 4 && s.(string) != ""
	// result: (StringMake     (Addr <config.fe.TypeBytePtr()> {config.fe.StringData(s.(string))}       (SB))     (Const32 <config.fe.TypeInt()> [int64(len(s.(string)))]))
	{
		s := v.Aux
		if !(config.PtrSize == 4 && s.(string) != "") {
			goto end107a700a4519d18f418602421444ddb6
		}
		v.Op = OpStringMake
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v0 := b.NewValue0(v.Line, OpAddr, TypeInvalid)
		v0.Type = config.fe.TypeBytePtr()
		v0.Aux = config.fe.StringData(s.(string))
		v1 := b.NewValue0(v.Line, OpSB, TypeInvalid)
		v1.Type = config.fe.TypeUintptr()
		v0.AddArg(v1)
		v.AddArg(v0)
		v2 := b.NewValue0(v.Line, OpConst32, TypeInvalid)
		v2.Type = config.fe.TypeInt()
		v2.AuxInt = int64(len(s.(string)))
		v.AddArg(v2)
		return true
	}
	goto end107a700a4519d18f418602421444ddb6
end107a700a4519d18f418602421444ddb6:
	;
	// match: (ConstString {s})
	// cond: config.PtrSize == 8 && s.(string) != ""
	// result: (StringMake     (Addr <config.fe.TypeBytePtr()> {config.fe.StringData(s.(string))}       (SB))     (Const64 <config.fe.TypeInt()> [int64(len(s.(string)))]))
	{
		s := v.Aux
		if !(config.PtrSize == 8 && s.(string) != "") {
			goto end7ce9db29d17866f26d21e6e12f442e54
		}
		v.Op = OpStringMake
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v0 := b.NewValue0(v.Line, OpAddr, TypeInvalid)
		v0.Type = config.fe.TypeBytePtr()
		v0.Aux = config.fe.StringData(s.(string))
		v1 := b.NewValue0(v.Line, OpSB, TypeInvalid)
		v1.Type = config.fe.TypeUintptr()
		v0.AddArg(v1)
		v.AddArg(v0)
		v2 := b.NewValue0(v.Line, OpConst64, TypeInvalid)
		v2.Type = config.fe.TypeInt()
		v2.AuxInt = int64(len(s.(string)))
		v.AddArg(v2)
		return true
	}
	goto end7ce9db29d17866f26d21e6e12f442e54
end7ce9db29d17866f26d21e6e12f442e54:
	;
	return false
}
func rewriteValuegeneric_OpConvert(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Convert (Add64 (Convert ptr mem) off) mem)
	// cond:
	// result: (Add64 ptr off)
	{
		if v.Args[0].Op != OpAdd64 {
			goto endbbc9f1666b4d39a130e1b86f109e7c1b
		}
		if v.Args[0].Args[0].Op != OpConvert {
			goto endbbc9f1666b4d39a130e1b86f109e7c1b
		}
		ptr := v.Args[0].Args[0].Args[0]
		mem := v.Args[0].Args[0].Args[1]
		off := v.Args[0].Args[1]
		if v.Args[1] != mem {
			goto endbbc9f1666b4d39a130e1b86f109e7c1b
		}
		v.Op = OpAdd64
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(ptr)
		v.AddArg(off)
		return true
	}
	goto endbbc9f1666b4d39a130e1b86f109e7c1b
endbbc9f1666b4d39a130e1b86f109e7c1b:
	;
	// match: (Convert (Convert ptr mem) mem)
	// cond:
	// result: ptr
	{
		if v.Args[0].Op != OpConvert {
			goto end98c5e0ca257eb216989171786f91b42d
		}
		ptr := v.Args[0].Args[0]
		mem := v.Args[0].Args[1]
		if v.Args[1] != mem {
			goto end98c5e0ca257eb216989171786f91b42d
		}
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = ptr.Type
		v.AddArg(ptr)
		return true
	}
	goto end98c5e0ca257eb216989171786f91b42d
end98c5e0ca257eb216989171786f91b42d:
	;
	return false
}
func rewriteValuegeneric_OpEq16(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Eq16 x x)
	// cond:
	// result: (ConstBool [1])
	{
		x := v.Args[0]
		if v.Args[1] != x {
			goto end0c0fe5fdfba3821add3448fd3f1fc6b7
		}
		v.Op = OpConstBool
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = 1
		return true
	}
	goto end0c0fe5fdfba3821add3448fd3f1fc6b7
end0c0fe5fdfba3821add3448fd3f1fc6b7:
	;
	// match: (Eq16 (Const16 [c]) (Const16 [d]))
	// cond:
	// result: (ConstBool [b2i(int16(c) == int16(d))])
	{
		if v.Args[0].Op != OpConst16 {
			goto end4532e1d01c10d8906fe1da14f9dfaa88
		}
		c := v.Args[0].AuxInt
		if v.Args[1].Op != OpConst16 {
			goto end4532e1d01c10d8906fe1da14f9dfaa88
		}
		d := v.Args[1].AuxInt
		v.Op = OpConstBool
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = b2i(int16(c) == int16(d))
		return true
	}
	goto end4532e1d01c10d8906fe1da14f9dfaa88
end4532e1d01c10d8906fe1da14f9dfaa88:
	;
	return false
}
func rewriteValuegeneric_OpEq32(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Eq32 x x)
	// cond:
	// result: (ConstBool [1])
	{
		x := v.Args[0]
		if v.Args[1] != x {
			goto end6da547ec4ee93d787434f3bda873e4a0
		}
		v.Op = OpConstBool
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = 1
		return true
	}
	goto end6da547ec4ee93d787434f3bda873e4a0
end6da547ec4ee93d787434f3bda873e4a0:
	;
	// match: (Eq32 (Const32 [c]) (Const32 [d]))
	// cond:
	// result: (ConstBool [b2i(int32(c) == int32(d))])
	{
		if v.Args[0].Op != OpConst32 {
			goto end00a2464e02c9ca00e8d0077acacbb5ad
		}
		c := v.Args[0].AuxInt
		if v.Args[1].Op != OpConst32 {
			goto end00a2464e02c9ca00e8d0077acacbb5ad
		}
		d := v.Args[1].AuxInt
		v.Op = OpConstBool
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = b2i(int32(c) == int32(d))
		return true
	}
	goto end00a2464e02c9ca00e8d0077acacbb5ad
end00a2464e02c9ca00e8d0077acacbb5ad:
	;
	return false
}
func rewriteValuegeneric_OpEq64(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Eq64 x x)
	// cond:
	// result: (ConstBool [1])
	{
		x := v.Args[0]
		if v.Args[1] != x {
			goto endb1d471cc503ba8bb05440f01dbf33d81
		}
		v.Op = OpConstBool
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = 1
		return true
	}
	goto endb1d471cc503ba8bb05440f01dbf33d81
endb1d471cc503ba8bb05440f01dbf33d81:
	;
	// match: (Eq64 (Const64 [c]) (Const64 [d]))
	// cond:
	// result: (ConstBool [b2i(int64(c) == int64(d))])
	{
		if v.Args[0].Op != OpConst64 {
			goto end405568a707dbbc86432e91f4ce7d97d7
		}
		c := v.Args[0].AuxInt
		if v.Args[1].Op != OpConst64 {
			goto end405568a707dbbc86432e91f4ce7d97d7
		}
		d := v.Args[1].AuxInt
		v.Op = OpConstBool
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = b2i(int64(c) == int64(d))
		return true
	}
	goto end405568a707dbbc86432e91f4ce7d97d7
end405568a707dbbc86432e91f4ce7d97d7:
	;
	return false
}
func rewriteValuegeneric_OpEq8(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Eq8 x x)
	// cond:
	// result: (ConstBool [1])
	{
		x := v.Args[0]
		if v.Args[1] != x {
			goto enda66da0d3e7e51624ee46527727c48a9a
		}
		v.Op = OpConstBool
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = 1
		return true
	}
	goto enda66da0d3e7e51624ee46527727c48a9a
enda66da0d3e7e51624ee46527727c48a9a:
	;
	// match: (Eq8  (Const8  [c]) (Const8  [d]))
	// cond:
	// result: (ConstBool [b2i(int8(c)  == int8(d))])
	{
		if v.Args[0].Op != OpConst8 {
			goto endd49f3700ba2d1e500d3ab4fa34fd090d
		}
		c := v.Args[0].AuxInt
		if v.Args[1].Op != OpConst8 {
			goto endd49f3700ba2d1e500d3ab4fa34fd090d
		}
		d := v.Args[1].AuxInt
		v.Op = OpConstBool
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = b2i(int8(c) == int8(d))
		return true
	}
	goto endd49f3700ba2d1e500d3ab4fa34fd090d
endd49f3700ba2d1e500d3ab4fa34fd090d:
	;
	return false
}
func rewriteValuegeneric_OpEqInter(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (EqInter x y)
	// cond:
	// result: (EqPtr  (ITab x) (ITab y))
	{
		x := v.Args[0]
		y := v.Args[1]
		v.Op = OpEqPtr
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v0 := b.NewValue0(v.Line, OpITab, TypeInvalid)
		v0.AddArg(x)
		v0.Type = config.fe.TypeBytePtr()
		v.AddArg(v0)
		v1 := b.NewValue0(v.Line, OpITab, TypeInvalid)
		v1.AddArg(y)
		v1.Type = config.fe.TypeBytePtr()
		v.AddArg(v1)
		return true
	}
	goto end1cc40483caab33ece971ab7e6c8fdfca
end1cc40483caab33ece971ab7e6c8fdfca:
	;
	return false
}
func rewriteValuegeneric_OpEqPtr(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (EqPtr p (ConstNil))
	// cond:
	// result: (Not (IsNonNil p))
	{
		p := v.Args[0]
		if v.Args[1].Op != OpConstNil {
			goto ende701cdb6a2c1fff4d4b283b7f8f6178b
		}
		v.Op = OpNot
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v0 := b.NewValue0(v.Line, OpIsNonNil, TypeInvalid)
		v0.AddArg(p)
		v0.Type = config.fe.TypeBool()
		v.AddArg(v0)
		return true
	}
	goto ende701cdb6a2c1fff4d4b283b7f8f6178b
ende701cdb6a2c1fff4d4b283b7f8f6178b:
	;
	// match: (EqPtr (ConstNil) p)
	// cond:
	// result: (Not (IsNonNil p))
	{
		if v.Args[0].Op != OpConstNil {
			goto end7cdc0d5c38fbffe6287c8928803b038e
		}
		p := v.Args[1]
		v.Op = OpNot
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v0 := b.NewValue0(v.Line, OpIsNonNil, TypeInvalid)
		v0.AddArg(p)
		v0.Type = config.fe.TypeBool()
		v.AddArg(v0)
		return true
	}
	goto end7cdc0d5c38fbffe6287c8928803b038e
end7cdc0d5c38fbffe6287c8928803b038e:
	;
	return false
}
func rewriteValuegeneric_OpEqSlice(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (EqSlice x y)
	// cond:
	// result: (EqPtr  (SlicePtr x) (SlicePtr y))
	{
		x := v.Args[0]
		y := v.Args[1]
		v.Op = OpEqPtr
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v0 := b.NewValue0(v.Line, OpSlicePtr, TypeInvalid)
		v0.AddArg(x)
		v0.Type = config.fe.TypeBytePtr()
		v.AddArg(v0)
		v1 := b.NewValue0(v.Line, OpSlicePtr, TypeInvalid)
		v1.AddArg(y)
		v1.Type = config.fe.TypeBytePtr()
		v.AddArg(v1)
		return true
	}
	goto end9cd53ca57ee90aa09c54f8071c8e8769
end9cd53ca57ee90aa09c54f8071c8e8769:
	;
	return false
}
func rewriteValuegeneric_OpGeq16(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Geq16 (Const16 [c]) (Const16 [d]))
	// cond:
	// result: (ConstBool [b2i(int16(c) >= int16(d))])
	{
		if v.Args[0].Op != OpConst16 {
			goto endbac100e9f1065e7d2ff863951f686f4b
		}
		c := v.Args[0].AuxInt
		if v.Args[1].Op != OpConst16 {
			goto endbac100e9f1065e7d2ff863951f686f4b
		}
		d := v.Args[1].AuxInt
		v.Op = OpConstBool
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = b2i(int16(c) >= int16(d))
		return true
	}
	goto endbac100e9f1065e7d2ff863951f686f4b
endbac100e9f1065e7d2ff863951f686f4b:
	;
	return false
}
func rewriteValuegeneric_OpGeq16U(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Geq16U (Const16 [c]) (Const16 [d]))
	// cond:
	// result: (ConstBool [b2i(uint16(c) >= uint16(d))])
	{
		if v.Args[0].Op != OpConst16 {
			goto end11c6acbc5827fc9508424b0ffcf98b34
		}
		c := v.Args[0].AuxInt
		if v.Args[1].Op != OpConst16 {
			goto end11c6acbc5827fc9508424b0ffcf98b34
		}
		d := v.Args[1].AuxInt
		v.Op = OpConstBool
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = b2i(uint16(c) >= uint16(d))
		return true
	}
	goto end11c6acbc5827fc9508424b0ffcf98b34
end11c6acbc5827fc9508424b0ffcf98b34:
	;
	return false
}
func rewriteValuegeneric_OpGeq32(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Geq32 (Const32 [c]) (Const32 [d]))
	// cond:
	// result: (ConstBool [b2i(int32(c) >= int32(d))])
	{
		if v.Args[0].Op != OpConst32 {
			goto end89ced97524ac75045911ca7cf6d44b28
		}
		c := v.Args[0].AuxInt
		if v.Args[1].Op != OpConst32 {
			goto end89ced97524ac75045911ca7cf6d44b28
		}
		d := v.Args[1].AuxInt
		v.Op = OpConstBool
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = b2i(int32(c) >= int32(d))
		return true
	}
	goto end89ced97524ac75045911ca7cf6d44b28
end89ced97524ac75045911ca7cf6d44b28:
	;
	return false
}
func rewriteValuegeneric_OpGeq32U(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Geq32U (Const32 [c]) (Const32 [d]))
	// cond:
	// result: (ConstBool [b2i(uint32(c) >= uint32(d))])
	{
		if v.Args[0].Op != OpConst32 {
			goto end92fbe85c7bbbf0db287932822bdde991
		}
		c := v.Args[0].AuxInt
		if v.Args[1].Op != OpConst32 {
			goto end92fbe85c7bbbf0db287932822bdde991
		}
		d := v.Args[1].AuxInt
		v.Op = OpConstBool
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = b2i(uint32(c) >= uint32(d))
		return true
	}
	goto end92fbe85c7bbbf0db287932822bdde991
end92fbe85c7bbbf0db287932822bdde991:
	;
	return false
}
func rewriteValuegeneric_OpGeq64(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Geq64 (Const64 [c]) (Const64 [d]))
	// cond:
	// result: (ConstBool [b2i(int64(c) >= int64(d))])
	{
		if v.Args[0].Op != OpConst64 {
			goto end08a5a4bff12a346befe05ad561b080ac
		}
		c := v.Args[0].AuxInt
		if v.Args[1].Op != OpConst64 {
			goto end08a5a4bff12a346befe05ad561b080ac
		}
		d := v.Args[1].AuxInt
		v.Op = OpConstBool
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = b2i(int64(c) >= int64(d))
		return true
	}
	goto end08a5a4bff12a346befe05ad561b080ac
end08a5a4bff12a346befe05ad561b080ac:
	;
	return false
}
func rewriteValuegeneric_OpGeq64U(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Geq64U (Const64 [c]) (Const64 [d]))
	// cond:
	// result: (ConstBool [b2i(uint64(c) >= uint64(d))])
	{
		if v.Args[0].Op != OpConst64 {
			goto endd72c497b6cc2b01d43a39ec12d5010b3
		}
		c := v.Args[0].AuxInt
		if v.Args[1].Op != OpConst64 {
			goto endd72c497b6cc2b01d43a39ec12d5010b3
		}
		d := v.Args[1].AuxInt
		v.Op = OpConstBool
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = b2i(uint64(c) >= uint64(d))
		return true
	}
	goto endd72c497b6cc2b01d43a39ec12d5010b3
endd72c497b6cc2b01d43a39ec12d5010b3:
	;
	return false
}
func rewriteValuegeneric_OpGeq8(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Geq8  (Const8  [c]) (Const8  [d]))
	// cond:
	// result: (ConstBool [b2i(int8(c)  >= int8(d))])
	{
		if v.Args[0].Op != OpConst8 {
			goto endea141068e84038c63cbdd87a8cb227d7
		}
		c := v.Args[0].AuxInt
		if v.Args[1].Op != OpConst8 {
			goto endea141068e84038c63cbdd87a8cb227d7
		}
		d := v.Args[1].AuxInt
		v.Op = OpConstBool
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = b2i(int8(c) >= int8(d))
		return true
	}
	goto endea141068e84038c63cbdd87a8cb227d7
endea141068e84038c63cbdd87a8cb227d7:
	;
	return false
}
func rewriteValuegeneric_OpGeq8U(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Geq8U  (Const8  [c]) (Const8  [d]))
	// cond:
	// result: (ConstBool [b2i(uint8(c)  >= uint8(d))])
	{
		if v.Args[0].Op != OpConst8 {
			goto end47c128ccdc54151a243c5856b0c52ef1
		}
		c := v.Args[0].AuxInt
		if v.Args[1].Op != OpConst8 {
			goto end47c128ccdc54151a243c5856b0c52ef1
		}
		d := v.Args[1].AuxInt
		v.Op = OpConstBool
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = b2i(uint8(c) >= uint8(d))
		return true
	}
	goto end47c128ccdc54151a243c5856b0c52ef1
end47c128ccdc54151a243c5856b0c52ef1:
	;
	return false
}
func rewriteValuegeneric_OpGreater16(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Greater16 (Const16 [c]) (Const16 [d]))
	// cond:
	// result: (ConstBool [b2i(int16(c) > int16(d))])
	{
		if v.Args[0].Op != OpConst16 {
			goto end390bae49463ace4d703dd24e18920f66
		}
		c := v.Args[0].AuxInt
		if v.Args[1].Op != OpConst16 {
			goto end390bae49463ace4d703dd24e18920f66
		}
		d := v.Args[1].AuxInt
		v.Op = OpConstBool
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = b2i(int16(c) > int16(d))
		return true
	}
	goto end390bae49463ace4d703dd24e18920f66
end390bae49463ace4d703dd24e18920f66:
	;
	return false
}
func rewriteValuegeneric_OpGreater16U(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Greater16U (Const16 [c]) (Const16 [d]))
	// cond:
	// result: (ConstBool [b2i(uint16(c) > uint16(d))])
	{
		if v.Args[0].Op != OpConst16 {
			goto end89ba3caf5c156fa6d908ac04c058187b
		}
		c := v.Args[0].AuxInt
		if v.Args[1].Op != OpConst16 {
			goto end89ba3caf5c156fa6d908ac04c058187b
		}
		d := v.Args[1].AuxInt
		v.Op = OpConstBool
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = b2i(uint16(c) > uint16(d))
		return true
	}
	goto end89ba3caf5c156fa6d908ac04c058187b
end89ba3caf5c156fa6d908ac04c058187b:
	;
	return false
}
func rewriteValuegeneric_OpGreater32(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Greater32 (Const32 [c]) (Const32 [d]))
	// cond:
	// result: (ConstBool [b2i(int32(c) > int32(d))])
	{
		if v.Args[0].Op != OpConst32 {
			goto end86482a9dc6439e8470da5352dd74d68d
		}
		c := v.Args[0].AuxInt
		if v.Args[1].Op != OpConst32 {
			goto end86482a9dc6439e8470da5352dd74d68d
		}
		d := v.Args[1].AuxInt
		v.Op = OpConstBool
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = b2i(int32(c) > int32(d))
		return true
	}
	goto end86482a9dc6439e8470da5352dd74d68d
end86482a9dc6439e8470da5352dd74d68d:
	;
	return false
}
func rewriteValuegeneric_OpGreater32U(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Greater32U (Const32 [c]) (Const32 [d]))
	// cond:
	// result: (ConstBool [b2i(uint32(c) > uint32(d))])
	{
		if v.Args[0].Op != OpConst32 {
			goto end1bf3f05c1e3599a969b8be1f5f6949e4
		}
		c := v.Args[0].AuxInt
		if v.Args[1].Op != OpConst32 {
			goto end1bf3f05c1e3599a969b8be1f5f6949e4
		}
		d := v.Args[1].AuxInt
		v.Op = OpConstBool
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = b2i(uint32(c) > uint32(d))
		return true
	}
	goto end1bf3f05c1e3599a969b8be1f5f6949e4
end1bf3f05c1e3599a969b8be1f5f6949e4:
	;
	return false
}
func rewriteValuegeneric_OpGreater64(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Greater64 (Const64 [c]) (Const64 [d]))
	// cond:
	// result: (ConstBool [b2i(int64(c) > int64(d))])
	{
		if v.Args[0].Op != OpConst64 {
			goto end96a82e893fda4882f23b6bab5f7fbff7
		}
		c := v.Args[0].AuxInt
		if v.Args[1].Op != OpConst64 {
			goto end96a82e893fda4882f23b6bab5f7fbff7
		}
		d := v.Args[1].AuxInt
		v.Op = OpConstBool
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = b2i(int64(c) > int64(d))
		return true
	}
	goto end96a82e893fda4882f23b6bab5f7fbff7
end96a82e893fda4882f23b6bab5f7fbff7:
	;
	return false
}
func rewriteValuegeneric_OpGreater64U(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Greater64U (Const64 [c]) (Const64 [d]))
	// cond:
	// result: (ConstBool [b2i(uint64(c) > uint64(d))])
	{
		if v.Args[0].Op != OpConst64 {
			goto end2d8f5ad85fbffeb92af985a888f6fa69
		}
		c := v.Args[0].AuxInt
		if v.Args[1].Op != OpConst64 {
			goto end2d8f5ad85fbffeb92af985a888f6fa69
		}
		d := v.Args[1].AuxInt
		v.Op = OpConstBool
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = b2i(uint64(c) > uint64(d))
		return true
	}
	goto end2d8f5ad85fbffeb92af985a888f6fa69
end2d8f5ad85fbffeb92af985a888f6fa69:
	;
	return false
}
func rewriteValuegeneric_OpGreater8(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Greater8  (Const8  [c]) (Const8  [d]))
	// cond:
	// result: (ConstBool [b2i(int8(c)  > int8(d))])
	{
		if v.Args[0].Op != OpConst8 {
			goto ende221967c7516b7749109cf8343fe9c83
		}
		c := v.Args[0].AuxInt
		if v.Args[1].Op != OpConst8 {
			goto ende221967c7516b7749109cf8343fe9c83
		}
		d := v.Args[1].AuxInt
		v.Op = OpConstBool
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = b2i(int8(c) > int8(d))
		return true
	}
	goto ende221967c7516b7749109cf8343fe9c83
ende221967c7516b7749109cf8343fe9c83:
	;
	return false
}
func rewriteValuegeneric_OpGreater8U(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Greater8U  (Const8  [c]) (Const8  [d]))
	// cond:
	// result: (ConstBool [b2i(uint8(c)  > uint8(d))])
	{
		if v.Args[0].Op != OpConst8 {
			goto enda9398c8188156dd46689fa2939147525
		}
		c := v.Args[0].AuxInt
		if v.Args[1].Op != OpConst8 {
			goto enda9398c8188156dd46689fa2939147525
		}
		d := v.Args[1].AuxInt
		v.Op = OpConstBool
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = b2i(uint8(c) > uint8(d))
		return true
	}
	goto enda9398c8188156dd46689fa2939147525
enda9398c8188156dd46689fa2939147525:
	;
	return false
}
func rewriteValuegeneric_OpIData(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (IData (IMake _ data))
	// cond:
	// result: data
	{
		if v.Args[0].Op != OpIMake {
			goto endbfa1bb944cdc07933effb16a35152e12
		}
		data := v.Args[0].Args[1]
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = data.Type
		v.AddArg(data)
		return true
	}
	goto endbfa1bb944cdc07933effb16a35152e12
endbfa1bb944cdc07933effb16a35152e12:
	;
	return false
}
func rewriteValuegeneric_OpITab(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (ITab (IMake itab _))
	// cond:
	// result: itab
	{
		if v.Args[0].Op != OpIMake {
			goto endfcbb9414a776ff9c8512da3e0f4d8fbd
		}
		itab := v.Args[0].Args[0]
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = itab.Type
		v.AddArg(itab)
		return true
	}
	goto endfcbb9414a776ff9c8512da3e0f4d8fbd
endfcbb9414a776ff9c8512da3e0f4d8fbd:
	;
	return false
}
func rewriteValuegeneric_OpIsInBounds(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (IsInBounds (Const32 [c]) (Const32 [d]))
	// cond:
	// result: (ConstBool [b2i(inBounds32(c,d))])
	{
		if v.Args[0].Op != OpConst32 {
			goto endf0a2ecfe84b293de6ff0919e45d19d9d
		}
		c := v.Args[0].AuxInt
		if v.Args[1].Op != OpConst32 {
			goto endf0a2ecfe84b293de6ff0919e45d19d9d
		}
		d := v.Args[1].AuxInt
		v.Op = OpConstBool
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = b2i(inBounds32(c, d))
		return true
	}
	goto endf0a2ecfe84b293de6ff0919e45d19d9d
endf0a2ecfe84b293de6ff0919e45d19d9d:
	;
	// match: (IsInBounds (Const64 [c]) (Const64 [d]))
	// cond:
	// result: (ConstBool [b2i(inBounds64(c,d))])
	{
		if v.Args[0].Op != OpConst64 {
			goto end4b406f402c135f50f71effcc904ecb2b
		}
		c := v.Args[0].AuxInt
		if v.Args[1].Op != OpConst64 {
			goto end4b406f402c135f50f71effcc904ecb2b
		}
		d := v.Args[1].AuxInt
		v.Op = OpConstBool
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = b2i(inBounds64(c, d))
		return true
	}
	goto end4b406f402c135f50f71effcc904ecb2b
end4b406f402c135f50f71effcc904ecb2b:
	;
	return false
}
func rewriteValuegeneric_OpIsSliceInBounds(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (IsSliceInBounds (Const32 [c]) (Const32 [d]))
	// cond:
	// result: (ConstBool [b2i(sliceInBounds32(c,d))])
	{
		if v.Args[0].Op != OpConst32 {
			goto end5e84a230c28cac987437cfed8f432cc3
		}
		c := v.Args[0].AuxInt
		if v.Args[1].Op != OpConst32 {
			goto end5e84a230c28cac987437cfed8f432cc3
		}
		d := v.Args[1].AuxInt
		v.Op = OpConstBool
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = b2i(sliceInBounds32(c, d))
		return true
	}
	goto end5e84a230c28cac987437cfed8f432cc3
end5e84a230c28cac987437cfed8f432cc3:
	;
	// match: (IsSliceInBounds (Const64 [c]) (Const64 [d]))
	// cond:
	// result: (ConstBool [b2i(sliceInBounds64(c,d))])
	{
		if v.Args[0].Op != OpConst64 {
			goto end3880a6fe20ad4152e98f76d84da233a7
		}
		c := v.Args[0].AuxInt
		if v.Args[1].Op != OpConst64 {
			goto end3880a6fe20ad4152e98f76d84da233a7
		}
		d := v.Args[1].AuxInt
		v.Op = OpConstBool
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = b2i(sliceInBounds64(c, d))
		return true
	}
	goto end3880a6fe20ad4152e98f76d84da233a7
end3880a6fe20ad4152e98f76d84da233a7:
	;
	return false
}
func rewriteValuegeneric_OpLeq16(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Leq16 (Const16 [c]) (Const16 [d]))
	// cond:
	// result: (ConstBool [b2i(int16(c) <= int16(d))])
	{
		if v.Args[0].Op != OpConst16 {
			goto end76b1c51f9b7cd7ee2f75b9f7057569de
		}
		c := v.Args[0].AuxInt
		if v.Args[1].Op != OpConst16 {
			goto end76b1c51f9b7cd7ee2f75b9f7057569de
		}
		d := v.Args[1].AuxInt
		v.Op = OpConstBool
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = b2i(int16(c) <= int16(d))
		return true
	}
	goto end76b1c51f9b7cd7ee2f75b9f7057569de
end76b1c51f9b7cd7ee2f75b9f7057569de:
	;
	return false
}
func rewriteValuegeneric_OpLeq16U(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Leq16U (Const16 [c]) (Const16 [d]))
	// cond:
	// result: (ConstBool [b2i(uint16(c) <= uint16(d))])
	{
		if v.Args[0].Op != OpConst16 {
			goto endf010fdf7f2c438ec18c33f493dd062aa
		}
		c := v.Args[0].AuxInt
		if v.Args[1].Op != OpConst16 {
			goto endf010fdf7f2c438ec18c33f493dd062aa
		}
		d := v.Args[1].AuxInt
		v.Op = OpConstBool
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = b2i(uint16(c) <= uint16(d))
		return true
	}
	goto endf010fdf7f2c438ec18c33f493dd062aa
endf010fdf7f2c438ec18c33f493dd062aa:
	;
	return false
}
func rewriteValuegeneric_OpLeq32(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Leq32 (Const32 [c]) (Const32 [d]))
	// cond:
	// result: (ConstBool [b2i(int32(c) <= int32(d))])
	{
		if v.Args[0].Op != OpConst32 {
			goto end6c7d61cfd188680bea8a5e23f08ca1de
		}
		c := v.Args[0].AuxInt
		if v.Args[1].Op != OpConst32 {
			goto end6c7d61cfd188680bea8a5e23f08ca1de
		}
		d := v.Args[1].AuxInt
		v.Op = OpConstBool
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = b2i(int32(c) <= int32(d))
		return true
	}
	goto end6c7d61cfd188680bea8a5e23f08ca1de
end6c7d61cfd188680bea8a5e23f08ca1de:
	;
	return false
}
func rewriteValuegeneric_OpLeq32U(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Leq32U (Const32 [c]) (Const32 [d]))
	// cond:
	// result: (ConstBool [b2i(uint32(c) <= uint32(d))])
	{
		if v.Args[0].Op != OpConst32 {
			goto end4363555333511ee9b649b36f1a0ba34e
		}
		c := v.Args[0].AuxInt
		if v.Args[1].Op != OpConst32 {
			goto end4363555333511ee9b649b36f1a0ba34e
		}
		d := v.Args[1].AuxInt
		v.Op = OpConstBool
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = b2i(uint32(c) <= uint32(d))
		return true
	}
	goto end4363555333511ee9b649b36f1a0ba34e
end4363555333511ee9b649b36f1a0ba34e:
	;
	return false
}
func rewriteValuegeneric_OpLeq64(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Leq64 (Const64 [c]) (Const64 [d]))
	// cond:
	// result: (ConstBool [b2i(int64(c) <= int64(d))])
	{
		if v.Args[0].Op != OpConst64 {
			goto enddc865cd7ac2093abc7617bedbf371c22
		}
		c := v.Args[0].AuxInt
		if v.Args[1].Op != OpConst64 {
			goto enddc865cd7ac2093abc7617bedbf371c22
		}
		d := v.Args[1].AuxInt
		v.Op = OpConstBool
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = b2i(int64(c) <= int64(d))
		return true
	}
	goto enddc865cd7ac2093abc7617bedbf371c22
enddc865cd7ac2093abc7617bedbf371c22:
	;
	return false
}
func rewriteValuegeneric_OpLeq64U(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Leq64U (Const64 [c]) (Const64 [d]))
	// cond:
	// result: (ConstBool [b2i(uint64(c) <= uint64(d))])
	{
		if v.Args[0].Op != OpConst64 {
			goto end412eadb168738ba92f3f0705d4495305
		}
		c := v.Args[0].AuxInt
		if v.Args[1].Op != OpConst64 {
			goto end412eadb168738ba92f3f0705d4495305
		}
		d := v.Args[1].AuxInt
		v.Op = OpConstBool
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = b2i(uint64(c) <= uint64(d))
		return true
	}
	goto end412eadb168738ba92f3f0705d4495305
end412eadb168738ba92f3f0705d4495305:
	;
	return false
}
func rewriteValuegeneric_OpLeq8(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Leq8  (Const8  [c]) (Const8  [d]))
	// cond:
	// result: (ConstBool [b2i(int8(c)  <= int8(d))])
	{
		if v.Args[0].Op != OpConst8 {
			goto endb5a459da8e18c40abc0c7a20e71d0187
		}
		c := v.Args[0].AuxInt
		if v.Args[1].Op != OpConst8 {
			goto endb5a459da8e18c40abc0c7a20e71d0187
		}
		d := v.Args[1].AuxInt
		v.Op = OpConstBool
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = b2i(int8(c) <= int8(d))
		return true
	}
	goto endb5a459da8e18c40abc0c7a20e71d0187
endb5a459da8e18c40abc0c7a20e71d0187:
	;
	return false
}
func rewriteValuegeneric_OpLeq8U(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Leq8U  (Const8  [c]) (Const8  [d]))
	// cond:
	// result: (ConstBool [b2i(uint8(c)  <= uint8(d))])
	{
		if v.Args[0].Op != OpConst8 {
			goto endd6622d55fcdf3fa7b08e7511cd3b7d85
		}
		c := v.Args[0].AuxInt
		if v.Args[1].Op != OpConst8 {
			goto endd6622d55fcdf3fa7b08e7511cd3b7d85
		}
		d := v.Args[1].AuxInt
		v.Op = OpConstBool
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = b2i(uint8(c) <= uint8(d))
		return true
	}
	goto endd6622d55fcdf3fa7b08e7511cd3b7d85
endd6622d55fcdf3fa7b08e7511cd3b7d85:
	;
	return false
}
func rewriteValuegeneric_OpLess16(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Less16 (Const16 [c]) (Const16 [d]))
	// cond:
	// result: (ConstBool [b2i(int16(c) < int16(d))])
	{
		if v.Args[0].Op != OpConst16 {
			goto end0dc915d089f05e79589ebb5c498cc360
		}
		c := v.Args[0].AuxInt
		if v.Args[1].Op != OpConst16 {
			goto end0dc915d089f05e79589ebb5c498cc360
		}
		d := v.Args[1].AuxInt
		v.Op = OpConstBool
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = b2i(int16(c) < int16(d))
		return true
	}
	goto end0dc915d089f05e79589ebb5c498cc360
end0dc915d089f05e79589ebb5c498cc360:
	;
	return false
}
func rewriteValuegeneric_OpLess16U(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Less16U (Const16 [c]) (Const16 [d]))
	// cond:
	// result: (ConstBool [b2i(uint16(c) < uint16(d))])
	{
		if v.Args[0].Op != OpConst16 {
			goto endd2bb8249443788690946fc184631a00a
		}
		c := v.Args[0].AuxInt
		if v.Args[1].Op != OpConst16 {
			goto endd2bb8249443788690946fc184631a00a
		}
		d := v.Args[1].AuxInt
		v.Op = OpConstBool
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = b2i(uint16(c) < uint16(d))
		return true
	}
	goto endd2bb8249443788690946fc184631a00a
endd2bb8249443788690946fc184631a00a:
	;
	return false
}
func rewriteValuegeneric_OpLess32(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Less32 (Const32 [c]) (Const32 [d]))
	// cond:
	// result: (ConstBool [b2i(int32(c) < int32(d))])
	{
		if v.Args[0].Op != OpConst32 {
			goto endc86f65e499688809d414f03539bec5bf
		}
		c := v.Args[0].AuxInt
		if v.Args[1].Op != OpConst32 {
			goto endc86f65e499688809d414f03539bec5bf
		}
		d := v.Args[1].AuxInt
		v.Op = OpConstBool
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = b2i(int32(c) < int32(d))
		return true
	}
	goto endc86f65e499688809d414f03539bec5bf
endc86f65e499688809d414f03539bec5bf:
	;
	return false
}
func rewriteValuegeneric_OpLess32U(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Less32U (Const32 [c]) (Const32 [d]))
	// cond:
	// result: (ConstBool [b2i(uint32(c) < uint32(d))])
	{
		if v.Args[0].Op != OpConst32 {
			goto end2cc68b5247b1afb90a9d3923b28ff247
		}
		c := v.Args[0].AuxInt
		if v.Args[1].Op != OpConst32 {
			goto end2cc68b5247b1afb90a9d3923b28ff247
		}
		d := v.Args[1].AuxInt
		v.Op = OpConstBool
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = b2i(uint32(c) < uint32(d))
		return true
	}
	goto end2cc68b5247b1afb90a9d3923b28ff247
end2cc68b5247b1afb90a9d3923b28ff247:
	;
	return false
}
func rewriteValuegeneric_OpLess64(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Less64 (Const64 [c]) (Const64 [d]))
	// cond:
	// result: (ConstBool [b2i(int64(c) < int64(d))])
	{
		if v.Args[0].Op != OpConst64 {
			goto end505de73cd15125dbb59b05d8975d3128
		}
		c := v.Args[0].AuxInt
		if v.Args[1].Op != OpConst64 {
			goto end505de73cd15125dbb59b05d8975d3128
		}
		d := v.Args[1].AuxInt
		v.Op = OpConstBool
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = b2i(int64(c) < int64(d))
		return true
	}
	goto end505de73cd15125dbb59b05d8975d3128
end505de73cd15125dbb59b05d8975d3128:
	;
	return false
}
func rewriteValuegeneric_OpLess64U(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Less64U (Const64 [c]) (Const64 [d]))
	// cond:
	// result: (ConstBool [b2i(uint64(c) < uint64(d))])
	{
		if v.Args[0].Op != OpConst64 {
			goto endeb249ef36416cd1abf4f807026c059cd
		}
		c := v.Args[0].AuxInt
		if v.Args[1].Op != OpConst64 {
			goto endeb249ef36416cd1abf4f807026c059cd
		}
		d := v.Args[1].AuxInt
		v.Op = OpConstBool
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = b2i(uint64(c) < uint64(d))
		return true
	}
	goto endeb249ef36416cd1abf4f807026c059cd
endeb249ef36416cd1abf4f807026c059cd:
	;
	return false
}
func rewriteValuegeneric_OpLess8(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Less8  (Const8  [c]) (Const8  [d]))
	// cond:
	// result: (ConstBool [b2i(int8(c)  < int8(d))])
	{
		if v.Args[0].Op != OpConst8 {
			goto endef134de03bc8537ac1f38d5eccff7673
		}
		c := v.Args[0].AuxInt
		if v.Args[1].Op != OpConst8 {
			goto endef134de03bc8537ac1f38d5eccff7673
		}
		d := v.Args[1].AuxInt
		v.Op = OpConstBool
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = b2i(int8(c) < int8(d))
		return true
	}
	goto endef134de03bc8537ac1f38d5eccff7673
endef134de03bc8537ac1f38d5eccff7673:
	;
	return false
}
func rewriteValuegeneric_OpLess8U(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Less8U  (Const8  [c]) (Const8  [d]))
	// cond:
	// result: (ConstBool [b2i(uint8(c)  < uint8(d))])
	{
		if v.Args[0].Op != OpConst8 {
			goto end263ecdc279924bff8771dd1ac3f42222
		}
		c := v.Args[0].AuxInt
		if v.Args[1].Op != OpConst8 {
			goto end263ecdc279924bff8771dd1ac3f42222
		}
		d := v.Args[1].AuxInt
		v.Op = OpConstBool
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = b2i(uint8(c) < uint8(d))
		return true
	}
	goto end263ecdc279924bff8771dd1ac3f42222
end263ecdc279924bff8771dd1ac3f42222:
	;
	return false
}
func rewriteValuegeneric_OpLoad(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Load <t> _ _)
	// cond: t.IsStruct() && t.NumFields() == 0 && config.fe.CanSSA(t)
	// result: (StructMake0)
	{
		t := v.Type
		if !(t.IsStruct() && t.NumFields() == 0 && config.fe.CanSSA(t)) {
			goto end8d25f5c949948132921b6be29ede6bde
		}
		v.Op = OpStructMake0
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		return true
	}
	goto end8d25f5c949948132921b6be29ede6bde
end8d25f5c949948132921b6be29ede6bde:
	;
	// match: (Load <t> ptr mem)
	// cond: t.IsStruct() && t.NumFields() == 1 && config.fe.CanSSA(t)
	// result: (StructMake1     (Load <t.FieldType(0)> ptr mem))
	{
		t := v.Type
		ptr := v.Args[0]
		mem := v.Args[1]
		if !(t.IsStruct() && t.NumFields() == 1 && config.fe.CanSSA(t)) {
			goto endfe908e5a8617dd39df2f9b2b92e93ae5
		}
		v.Op = OpStructMake1
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v0 := b.NewValue0(v.Line, OpLoad, TypeInvalid)
		v0.Type = t.FieldType(0)
		v0.AddArg(ptr)
		v0.AddArg(mem)
		v.AddArg(v0)
		return true
	}
	goto endfe908e5a8617dd39df2f9b2b92e93ae5
endfe908e5a8617dd39df2f9b2b92e93ae5:
	;
	// match: (Load <t> ptr mem)
	// cond: t.IsStruct() && t.NumFields() == 2 && config.fe.CanSSA(t)
	// result: (StructMake2     (Load <t.FieldType(0)> ptr mem)     (Load <t.FieldType(1)> (OffPtr <t.FieldType(1).PtrTo()> [t.FieldOff(1)] ptr) mem))
	{
		t := v.Type
		ptr := v.Args[0]
		mem := v.Args[1]
		if !(t.IsStruct() && t.NumFields() == 2 && config.fe.CanSSA(t)) {
			goto end20e20e64004b765012cfb80c575ef27b
		}
		v.Op = OpStructMake2
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v0 := b.NewValue0(v.Line, OpLoad, TypeInvalid)
		v0.Type = t.FieldType(0)
		v0.AddArg(ptr)
		v0.AddArg(mem)
		v.AddArg(v0)
		v1 := b.NewValue0(v.Line, OpLoad, TypeInvalid)
		v1.Type = t.FieldType(1)
		v2 := b.NewValue0(v.Line, OpOffPtr, TypeInvalid)
		v2.Type = t.FieldType(1).PtrTo()
		v2.AuxInt = t.FieldOff(1)
		v2.AddArg(ptr)
		v1.AddArg(v2)
		v1.AddArg(mem)
		v.AddArg(v1)
		return true
	}
	goto end20e20e64004b765012cfb80c575ef27b
end20e20e64004b765012cfb80c575ef27b:
	;
	// match: (Load <t> ptr mem)
	// cond: t.IsStruct() && t.NumFields() == 3 && config.fe.CanSSA(t)
	// result: (StructMake3     (Load <t.FieldType(0)> ptr mem)     (Load <t.FieldType(1)> (OffPtr <t.FieldType(1).PtrTo()> [t.FieldOff(1)] ptr) mem)     (Load <t.FieldType(2)> (OffPtr <t.FieldType(2).PtrTo()> [t.FieldOff(2)] ptr) mem))
	{
		t := v.Type
		ptr := v.Args[0]
		mem := v.Args[1]
		if !(t.IsStruct() && t.NumFields() == 3 && config.fe.CanSSA(t)) {
			goto ende612bf71067ed67541735cdc8b5a3288
		}
		v.Op = OpStructMake3
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v0 := b.NewValue0(v.Line, OpLoad, TypeInvalid)
		v0.Type = t.FieldType(0)
		v0.AddArg(ptr)
		v0.AddArg(mem)
		v.AddArg(v0)
		v1 := b.NewValue0(v.Line, OpLoad, TypeInvalid)
		v1.Type = t.FieldType(1)
		v2 := b.NewValue0(v.Line, OpOffPtr, TypeInvalid)
		v2.Type = t.FieldType(1).PtrTo()
		v2.AuxInt = t.FieldOff(1)
		v2.AddArg(ptr)
		v1.AddArg(v2)
		v1.AddArg(mem)
		v.AddArg(v1)
		v3 := b.NewValue0(v.Line, OpLoad, TypeInvalid)
		v3.Type = t.FieldType(2)
		v4 := b.NewValue0(v.Line, OpOffPtr, TypeInvalid)
		v4.Type = t.FieldType(2).PtrTo()
		v4.AuxInt = t.FieldOff(2)
		v4.AddArg(ptr)
		v3.AddArg(v4)
		v3.AddArg(mem)
		v.AddArg(v3)
		return true
	}
	goto ende612bf71067ed67541735cdc8b5a3288
ende612bf71067ed67541735cdc8b5a3288:
	;
	// match: (Load <t> ptr mem)
	// cond: t.IsStruct() && t.NumFields() == 4 && config.fe.CanSSA(t)
	// result: (StructMake4     (Load <t.FieldType(0)> ptr mem)     (Load <t.FieldType(1)> (OffPtr <t.FieldType(1).PtrTo()> [t.FieldOff(1)] ptr) mem)     (Load <t.FieldType(2)> (OffPtr <t.FieldType(2).PtrTo()> [t.FieldOff(2)] ptr) mem)     (Load <t.FieldType(3)> (OffPtr <t.FieldType(3).PtrTo()> [t.FieldOff(3)] ptr) mem))
	{
		t := v.Type
		ptr := v.Args[0]
		mem := v.Args[1]
		if !(t.IsStruct() && t.NumFields() == 4 && config.fe.CanSSA(t)) {
			goto end46c66c64d9030f2cc9a7a767f67953d1
		}
		v.Op = OpStructMake4
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v0 := b.NewValue0(v.Line, OpLoad, TypeInvalid)
		v0.Type = t.FieldType(0)
		v0.AddArg(ptr)
		v0.AddArg(mem)
		v.AddArg(v0)
		v1 := b.NewValue0(v.Line, OpLoad, TypeInvalid)
		v1.Type = t.FieldType(1)
		v2 := b.NewValue0(v.Line, OpOffPtr, TypeInvalid)
		v2.Type = t.FieldType(1).PtrTo()
		v2.AuxInt = t.FieldOff(1)
		v2.AddArg(ptr)
		v1.AddArg(v2)
		v1.AddArg(mem)
		v.AddArg(v1)
		v3 := b.NewValue0(v.Line, OpLoad, TypeInvalid)
		v3.Type = t.FieldType(2)
		v4 := b.NewValue0(v.Line, OpOffPtr, TypeInvalid)
		v4.Type = t.FieldType(2).PtrTo()
		v4.AuxInt = t.FieldOff(2)
		v4.AddArg(ptr)
		v3.AddArg(v4)
		v3.AddArg(mem)
		v.AddArg(v3)
		v5 := b.NewValue0(v.Line, OpLoad, TypeInvalid)
		v5.Type = t.FieldType(3)
		v6 := b.NewValue0(v.Line, OpOffPtr, TypeInvalid)
		v6.Type = t.FieldType(3).PtrTo()
		v6.AuxInt = t.FieldOff(3)
		v6.AddArg(ptr)
		v5.AddArg(v6)
		v5.AddArg(mem)
		v.AddArg(v5)
		return true
	}
	goto end46c66c64d9030f2cc9a7a767f67953d1
end46c66c64d9030f2cc9a7a767f67953d1:
	;
	// match: (Load <t> ptr mem)
	// cond: t.IsComplex() && t.Size() == 8
	// result: (ComplexMake     (Load <config.fe.TypeFloat32()> ptr mem)     (Load <config.fe.TypeFloat32()>       (OffPtr <config.fe.TypeFloat32().PtrTo()> [4] ptr)       mem)     )
	{
		t := v.Type
		ptr := v.Args[0]
		mem := v.Args[1]
		if !(t.IsComplex() && t.Size() == 8) {
			goto end665854b31b828893d90b36bb462ff381
		}
		v.Op = OpComplexMake
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v0 := b.NewValue0(v.Line, OpLoad, TypeInvalid)
		v0.Type = config.fe.TypeFloat32()
		v0.AddArg(ptr)
		v0.AddArg(mem)
		v.AddArg(v0)
		v1 := b.NewValue0(v.Line, OpLoad, TypeInvalid)
		v1.Type = config.fe.TypeFloat32()
		v2 := b.NewValue0(v.Line, OpOffPtr, TypeInvalid)
		v2.Type = config.fe.TypeFloat32().PtrTo()
		v2.AuxInt = 4
		v2.AddArg(ptr)
		v1.AddArg(v2)
		v1.AddArg(mem)
		v.AddArg(v1)
		return true
	}
	goto end665854b31b828893d90b36bb462ff381
end665854b31b828893d90b36bb462ff381:
	;
	// match: (Load <t> ptr mem)
	// cond: t.IsComplex() && t.Size() == 16
	// result: (ComplexMake     (Load <config.fe.TypeFloat64()> ptr mem)     (Load <config.fe.TypeFloat64()>       (OffPtr <config.fe.TypeFloat64().PtrTo()> [8] ptr)       mem)     )
	{
		t := v.Type
		ptr := v.Args[0]
		mem := v.Args[1]
		if !(t.IsComplex() && t.Size() == 16) {
			goto end1b106f89e0e3e26c613b957a7c98d8ad
		}
		v.Op = OpComplexMake
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v0 := b.NewValue0(v.Line, OpLoad, TypeInvalid)
		v0.Type = config.fe.TypeFloat64()
		v0.AddArg(ptr)
		v0.AddArg(mem)
		v.AddArg(v0)
		v1 := b.NewValue0(v.Line, OpLoad, TypeInvalid)
		v1.Type = config.fe.TypeFloat64()
		v2 := b.NewValue0(v.Line, OpOffPtr, TypeInvalid)
		v2.Type = config.fe.TypeFloat64().PtrTo()
		v2.AuxInt = 8
		v2.AddArg(ptr)
		v1.AddArg(v2)
		v1.AddArg(mem)
		v.AddArg(v1)
		return true
	}
	goto end1b106f89e0e3e26c613b957a7c98d8ad
end1b106f89e0e3e26c613b957a7c98d8ad:
	;
	// match: (Load <t> ptr mem)
	// cond: t.IsString()
	// result: (StringMake     (Load <config.fe.TypeBytePtr()> ptr mem)     (Load <config.fe.TypeInt()>       (OffPtr <config.fe.TypeInt().PtrTo()> [config.PtrSize] ptr)       mem))
	{
		t := v.Type
		ptr := v.Args[0]
		mem := v.Args[1]
		if !(t.IsString()) {
			goto enddd15a6f3d53a6ce7a19d4e181dd1c13a
		}
		v.Op = OpStringMake
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v0 := b.NewValue0(v.Line, OpLoad, TypeInvalid)
		v0.Type = config.fe.TypeBytePtr()
		v0.AddArg(ptr)
		v0.AddArg(mem)
		v.AddArg(v0)
		v1 := b.NewValue0(v.Line, OpLoad, TypeInvalid)
		v1.Type = config.fe.TypeInt()
		v2 := b.NewValue0(v.Line, OpOffPtr, TypeInvalid)
		v2.Type = config.fe.TypeInt().PtrTo()
		v2.AuxInt = config.PtrSize
		v2.AddArg(ptr)
		v1.AddArg(v2)
		v1.AddArg(mem)
		v.AddArg(v1)
		return true
	}
	goto enddd15a6f3d53a6ce7a19d4e181dd1c13a
enddd15a6f3d53a6ce7a19d4e181dd1c13a:
	;
	// match: (Load <t> ptr mem)
	// cond: t.IsSlice()
	// result: (SliceMake     (Load <config.fe.TypeBytePtr()> ptr mem)     (Load <config.fe.TypeInt()>       (OffPtr <config.fe.TypeInt().PtrTo()> [config.PtrSize] ptr)       mem)     (Load <config.fe.TypeInt()>       (OffPtr <config.fe.TypeInt().PtrTo()> [2*config.PtrSize] ptr)       mem))
	{
		t := v.Type
		ptr := v.Args[0]
		mem := v.Args[1]
		if !(t.IsSlice()) {
			goto end65e8b0055aa7491b9b6066d9fe1b2c13
		}
		v.Op = OpSliceMake
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v0 := b.NewValue0(v.Line, OpLoad, TypeInvalid)
		v0.Type = config.fe.TypeBytePtr()
		v0.AddArg(ptr)
		v0.AddArg(mem)
		v.AddArg(v0)
		v1 := b.NewValue0(v.Line, OpLoad, TypeInvalid)
		v1.Type = config.fe.TypeInt()
		v2 := b.NewValue0(v.Line, OpOffPtr, TypeInvalid)
		v2.Type = config.fe.TypeInt().PtrTo()
		v2.AuxInt = config.PtrSize
		v2.AddArg(ptr)
		v1.AddArg(v2)
		v1.AddArg(mem)
		v.AddArg(v1)
		v3 := b.NewValue0(v.Line, OpLoad, TypeInvalid)
		v3.Type = config.fe.TypeInt()
		v4 := b.NewValue0(v.Line, OpOffPtr, TypeInvalid)
		v4.Type = config.fe.TypeInt().PtrTo()
		v4.AuxInt = 2 * config.PtrSize
		v4.AddArg(ptr)
		v3.AddArg(v4)
		v3.AddArg(mem)
		v.AddArg(v3)
		return true
	}
	goto end65e8b0055aa7491b9b6066d9fe1b2c13
end65e8b0055aa7491b9b6066d9fe1b2c13:
	;
	// match: (Load <t> ptr mem)
	// cond: t.IsInterface()
	// result: (IMake     (Load <config.fe.TypeBytePtr()> ptr mem)     (Load <config.fe.TypeBytePtr()>       (OffPtr <config.fe.TypeBytePtr().PtrTo()> [config.PtrSize] ptr)       mem))
	{
		t := v.Type
		ptr := v.Args[0]
		mem := v.Args[1]
		if !(t.IsInterface()) {
			goto end12671c83ebe3ccbc8e53383765ee7675
		}
		v.Op = OpIMake
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v0 := b.NewValue0(v.Line, OpLoad, TypeInvalid)
		v0.Type = config.fe.TypeBytePtr()
		v0.AddArg(ptr)
		v0.AddArg(mem)
		v.AddArg(v0)
		v1 := b.NewValue0(v.Line, OpLoad, TypeInvalid)
		v1.Type = config.fe.TypeBytePtr()
		v2 := b.NewValue0(v.Line, OpOffPtr, TypeInvalid)
		v2.Type = config.fe.TypeBytePtr().PtrTo()
		v2.AuxInt = config.PtrSize
		v2.AddArg(ptr)
		v1.AddArg(v2)
		v1.AddArg(mem)
		v.AddArg(v1)
		return true
	}
	goto end12671c83ebe3ccbc8e53383765ee7675
end12671c83ebe3ccbc8e53383765ee7675:
	;
	return false
}
func rewriteValuegeneric_OpLsh16x16(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Lsh16x16 _ (Const16 [c]))
	// cond: c >= 16
	// result: (Const64 [0])
	{
		if v.Args[1].Op != OpConst16 {
			goto end44cc9da6b6fc78ce71620d18c6cb984e
		}
		c := v.Args[1].AuxInt
		if !(c >= 16) {
			goto end44cc9da6b6fc78ce71620d18c6cb984e
		}
		v.Op = OpConst64
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = 0
		return true
	}
	goto end44cc9da6b6fc78ce71620d18c6cb984e
end44cc9da6b6fc78ce71620d18c6cb984e:
	;
	// match: (Lsh16x16 x (Const16 [c]))
	// cond: c == 0
	// result: x
	{
		x := v.Args[0]
		if v.Args[1].Op != OpConst16 {
			goto end018a9a2a3aeb7436042bc5fe6ebd3e3b
		}
		c := v.Args[1].AuxInt
		if !(c == 0) {
			goto end018a9a2a3aeb7436042bc5fe6ebd3e3b
		}
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = x.Type
		v.AddArg(x)
		return true
	}
	goto end018a9a2a3aeb7436042bc5fe6ebd3e3b
end018a9a2a3aeb7436042bc5fe6ebd3e3b:
	;
	// match: (Lsh16x16 <t> (Lsh16x64 x (Const64 [c])) (Const16 [d]))
	// cond:
	// result: (Lsh16x16 x  (Const16 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpLsh16x64 {
			goto end4308da8aacb5df10a05e914d6ad02953
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst64 {
			goto end4308da8aacb5df10a05e914d6ad02953
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst16 {
			goto end4308da8aacb5df10a05e914d6ad02953
		}
		d := v.Args[1].AuxInt
		v.Op = OpLsh16x16
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst16, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end4308da8aacb5df10a05e914d6ad02953
end4308da8aacb5df10a05e914d6ad02953:
	;
	// match: (Lsh16x16 <t> (Lsh16x32 x (Const32 [c])) (Const16 [d]))
	// cond:
	// result: (Lsh16x16 x  (Const16 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpLsh16x32 {
			goto endca0a100f26fd624b908c35d65737fcce
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst32 {
			goto endca0a100f26fd624b908c35d65737fcce
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst16 {
			goto endca0a100f26fd624b908c35d65737fcce
		}
		d := v.Args[1].AuxInt
		v.Op = OpLsh16x16
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst16, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto endca0a100f26fd624b908c35d65737fcce
endca0a100f26fd624b908c35d65737fcce:
	;
	// match: (Lsh16x16 <t> (Lsh16x16 x (Const16 [c])) (Const16 [d]))
	// cond:
	// result: (Lsh16x16 x  (Const16 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpLsh16x16 {
			goto end15974c534ee63cf3468eece56c296ff0
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst16 {
			goto end15974c534ee63cf3468eece56c296ff0
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst16 {
			goto end15974c534ee63cf3468eece56c296ff0
		}
		d := v.Args[1].AuxInt
		v.Op = OpLsh16x16
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst16, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end15974c534ee63cf3468eece56c296ff0
end15974c534ee63cf3468eece56c296ff0:
	;
	// match: (Lsh16x16 <t> (Lsh16x8 x (Const8 [c])) (Const16 [d]))
	// cond:
	// result: (Lsh16x16 x  (Const16 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpLsh16x8 {
			goto end86b01be106960470f8b6156b84927d10
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst8 {
			goto end86b01be106960470f8b6156b84927d10
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst16 {
			goto end86b01be106960470f8b6156b84927d10
		}
		d := v.Args[1].AuxInt
		v.Op = OpLsh16x16
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst16, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end86b01be106960470f8b6156b84927d10
end86b01be106960470f8b6156b84927d10:
	;
	return false
}
func rewriteValuegeneric_OpLsh16x32(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Lsh16x32 _ (Const32 [c]))
	// cond: c >= 16
	// result: (Const64 [0])
	{
		if v.Args[1].Op != OpConst32 {
			goto end431c23ff31894f53660aeba1469dbe9a
		}
		c := v.Args[1].AuxInt
		if !(c >= 16) {
			goto end431c23ff31894f53660aeba1469dbe9a
		}
		v.Op = OpConst64
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = 0
		return true
	}
	goto end431c23ff31894f53660aeba1469dbe9a
end431c23ff31894f53660aeba1469dbe9a:
	;
	// match: (Lsh16x32 x (Const32 [c]))
	// cond: c == 0
	// result: x
	{
		x := v.Args[0]
		if v.Args[1].Op != OpConst32 {
			goto end19cd9bd6ca0f2120515e6d9052139b2a
		}
		c := v.Args[1].AuxInt
		if !(c == 0) {
			goto end19cd9bd6ca0f2120515e6d9052139b2a
		}
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = x.Type
		v.AddArg(x)
		return true
	}
	goto end19cd9bd6ca0f2120515e6d9052139b2a
end19cd9bd6ca0f2120515e6d9052139b2a:
	;
	// match: (Lsh16x32 <t> (Lsh16x64 x (Const64 [c])) (Const32 [d]))
	// cond:
	// result: (Lsh16x32 x  (Const32 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpLsh16x64 {
			goto end7df4f18fe88049ecb54820288e636d31
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst64 {
			goto end7df4f18fe88049ecb54820288e636d31
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst32 {
			goto end7df4f18fe88049ecb54820288e636d31
		}
		d := v.Args[1].AuxInt
		v.Op = OpLsh16x32
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst32, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end7df4f18fe88049ecb54820288e636d31
end7df4f18fe88049ecb54820288e636d31:
	;
	// match: (Lsh16x32 <t> (Lsh16x32 x (Const32 [c])) (Const32 [d]))
	// cond:
	// result: (Lsh16x32 x  (Const32 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpLsh16x32 {
			goto end180f79d5de45e428ce36f9182f192201
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst32 {
			goto end180f79d5de45e428ce36f9182f192201
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst32 {
			goto end180f79d5de45e428ce36f9182f192201
		}
		d := v.Args[1].AuxInt
		v.Op = OpLsh16x32
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst32, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end180f79d5de45e428ce36f9182f192201
end180f79d5de45e428ce36f9182f192201:
	;
	// match: (Lsh16x32 <t> (Lsh16x16 x (Const16 [c])) (Const32 [d]))
	// cond:
	// result: (Lsh16x32 x  (Const32 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpLsh16x16 {
			goto endd3fe2858ccfa291924db4bdea4f580ce
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst16 {
			goto endd3fe2858ccfa291924db4bdea4f580ce
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst32 {
			goto endd3fe2858ccfa291924db4bdea4f580ce
		}
		d := v.Args[1].AuxInt
		v.Op = OpLsh16x32
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst32, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto endd3fe2858ccfa291924db4bdea4f580ce
endd3fe2858ccfa291924db4bdea4f580ce:
	;
	// match: (Lsh16x32 <t> (Lsh16x8 x (Const8 [c])) (Const32 [d]))
	// cond:
	// result: (Lsh16x32 x  (Const32 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpLsh16x8 {
			goto endaba624c104db680fdf8941c139b28391
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst8 {
			goto endaba624c104db680fdf8941c139b28391
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst32 {
			goto endaba624c104db680fdf8941c139b28391
		}
		d := v.Args[1].AuxInt
		v.Op = OpLsh16x32
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst32, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto endaba624c104db680fdf8941c139b28391
endaba624c104db680fdf8941c139b28391:
	;
	return false
}
func rewriteValuegeneric_OpLsh16x64(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Lsh16x64 _ (Const64 [c]))
	// cond: c >= 16
	// result: (Const64 [0])
	{
		if v.Args[1].Op != OpConst64 {
			goto endb1e683c348892211583957d2bc49eb09
		}
		c := v.Args[1].AuxInt
		if !(c >= 16) {
			goto endb1e683c348892211583957d2bc49eb09
		}
		v.Op = OpConst64
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = 0
		return true
	}
	goto endb1e683c348892211583957d2bc49eb09
endb1e683c348892211583957d2bc49eb09:
	;
	// match: (Lsh16x64 x (Const64 [0]))
	// cond:
	// result: x
	{
		x := v.Args[0]
		if v.Args[1].Op != OpConst64 {
			goto endffb8684eaef3f765d6160cee3e1f7691
		}
		if v.Args[1].AuxInt != 0 {
			goto endffb8684eaef3f765d6160cee3e1f7691
		}
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = x.Type
		v.AddArg(x)
		return true
	}
	goto endffb8684eaef3f765d6160cee3e1f7691
endffb8684eaef3f765d6160cee3e1f7691:
	;
	// match: (Lsh16x64 <t> (Lsh16x64 x (Const64 [c])) (Const64 [d]))
	// cond:
	// result: (Lsh16x64 x  (Const64 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpLsh16x64 {
			goto endfeb58e6857ca335f3611291256ccb7e1
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst64 {
			goto endfeb58e6857ca335f3611291256ccb7e1
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst64 {
			goto endfeb58e6857ca335f3611291256ccb7e1
		}
		d := v.Args[1].AuxInt
		v.Op = OpLsh16x64
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst64, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto endfeb58e6857ca335f3611291256ccb7e1
endfeb58e6857ca335f3611291256ccb7e1:
	;
	// match: (Lsh16x64 <t> (Lsh16x32 x (Const32 [c])) (Const64 [d]))
	// cond:
	// result: (Lsh16x64 x  (Const64 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpLsh16x32 {
			goto end40ce68c96f26f43795a9846e079e5dee
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst32 {
			goto end40ce68c96f26f43795a9846e079e5dee
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst64 {
			goto end40ce68c96f26f43795a9846e079e5dee
		}
		d := v.Args[1].AuxInt
		v.Op = OpLsh16x64
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst64, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end40ce68c96f26f43795a9846e079e5dee
end40ce68c96f26f43795a9846e079e5dee:
	;
	// match: (Lsh16x64 <t> (Lsh16x16 x (Const16 [c])) (Const64 [d]))
	// cond:
	// result: (Lsh16x64 x  (Const64 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpLsh16x16 {
			goto ende24b4a020322b587380a0949b3c125e7
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst16 {
			goto ende24b4a020322b587380a0949b3c125e7
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst64 {
			goto ende24b4a020322b587380a0949b3c125e7
		}
		d := v.Args[1].AuxInt
		v.Op = OpLsh16x64
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst64, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto ende24b4a020322b587380a0949b3c125e7
ende24b4a020322b587380a0949b3c125e7:
	;
	// match: (Lsh16x64 <t> (Lsh16x8 x (Const8 [c])) (Const64 [d]))
	// cond:
	// result: (Lsh16x64 x  (Const64 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpLsh16x8 {
			goto end043e0730e7eb83ee8dcff2dc6d5feda7
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst8 {
			goto end043e0730e7eb83ee8dcff2dc6d5feda7
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst64 {
			goto end043e0730e7eb83ee8dcff2dc6d5feda7
		}
		d := v.Args[1].AuxInt
		v.Op = OpLsh16x64
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst64, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end043e0730e7eb83ee8dcff2dc6d5feda7
end043e0730e7eb83ee8dcff2dc6d5feda7:
	;
	return false
}
func rewriteValuegeneric_OpLsh16x8(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Lsh16x8 x (Const8 [c]))
	// cond: c == 0
	// result: x
	{
		x := v.Args[0]
		if v.Args[1].Op != OpConst8 {
			goto end43abf65be561311ff2ed12aa347c0058
		}
		c := v.Args[1].AuxInt
		if !(c == 0) {
			goto end43abf65be561311ff2ed12aa347c0058
		}
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = x.Type
		v.AddArg(x)
		return true
	}
	goto end43abf65be561311ff2ed12aa347c0058
end43abf65be561311ff2ed12aa347c0058:
	;
	// match: (Lsh16x8 <t> (Lsh16x64 x (Const64 [c])) (Const8 [d]))
	// cond:
	// result: (Lsh16x8 x  (Const8 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpLsh16x64 {
			goto end8ce742349802e474363424998e0146cc
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst64 {
			goto end8ce742349802e474363424998e0146cc
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst8 {
			goto end8ce742349802e474363424998e0146cc
		}
		d := v.Args[1].AuxInt
		v.Op = OpLsh16x8
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst8, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end8ce742349802e474363424998e0146cc
end8ce742349802e474363424998e0146cc:
	;
	// match: (Lsh16x8 <t> (Lsh16x32 x (Const32 [c])) (Const8 [d]))
	// cond:
	// result: (Lsh16x8 x  (Const8 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpLsh16x32 {
			goto ende48d6e0522ec9beb1db18ff0be7111cf
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst32 {
			goto ende48d6e0522ec9beb1db18ff0be7111cf
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst8 {
			goto ende48d6e0522ec9beb1db18ff0be7111cf
		}
		d := v.Args[1].AuxInt
		v.Op = OpLsh16x8
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst8, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto ende48d6e0522ec9beb1db18ff0be7111cf
ende48d6e0522ec9beb1db18ff0be7111cf:
	;
	// match: (Lsh16x8 <t> (Lsh16x16 x (Const16 [c])) (Const8 [d]))
	// cond:
	// result: (Lsh16x8 x  (Const8 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpLsh16x16 {
			goto end18a42646787d807a53556d0f3ea2252f
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst16 {
			goto end18a42646787d807a53556d0f3ea2252f
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst8 {
			goto end18a42646787d807a53556d0f3ea2252f
		}
		d := v.Args[1].AuxInt
		v.Op = OpLsh16x8
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst8, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end18a42646787d807a53556d0f3ea2252f
end18a42646787d807a53556d0f3ea2252f:
	;
	// match: (Lsh16x8 <t> (Lsh16x8 x (Const8 [c])) (Const8 [d]))
	// cond:
	// result: (Lsh16x8 x  (Const8 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpLsh16x8 {
			goto end2facbe5ffa04868aa6f5528d9aeb4f0c
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst8 {
			goto end2facbe5ffa04868aa6f5528d9aeb4f0c
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst8 {
			goto end2facbe5ffa04868aa6f5528d9aeb4f0c
		}
		d := v.Args[1].AuxInt
		v.Op = OpLsh16x8
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst8, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end2facbe5ffa04868aa6f5528d9aeb4f0c
end2facbe5ffa04868aa6f5528d9aeb4f0c:
	;
	return false
}
func rewriteValuegeneric_OpLsh32x16(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Lsh32x16 x (Const16 [c]))
	// cond: c == 0
	// result: x
	{
		x := v.Args[0]
		if v.Args[1].Op != OpConst16 {
			goto end346e92c791eb3173c6ddcf0031489c06
		}
		c := v.Args[1].AuxInt
		if !(c == 0) {
			goto end346e92c791eb3173c6ddcf0031489c06
		}
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = x.Type
		v.AddArg(x)
		return true
	}
	goto end346e92c791eb3173c6ddcf0031489c06
end346e92c791eb3173c6ddcf0031489c06:
	;
	// match: (Lsh32x16 <t> (Lsh32x64 x (Const64 [c])) (Const16 [d]))
	// cond:
	// result: (Lsh32x16 x  (Const16 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpLsh32x64 {
			goto endb6d6dfba204551beb6bea32ee7a26ba4
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst64 {
			goto endb6d6dfba204551beb6bea32ee7a26ba4
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst16 {
			goto endb6d6dfba204551beb6bea32ee7a26ba4
		}
		d := v.Args[1].AuxInt
		v.Op = OpLsh32x16
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst16, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto endb6d6dfba204551beb6bea32ee7a26ba4
endb6d6dfba204551beb6bea32ee7a26ba4:
	;
	// match: (Lsh32x16 <t> (Lsh32x32 x (Const32 [c])) (Const16 [d]))
	// cond:
	// result: (Lsh32x16 x  (Const16 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpLsh32x32 {
			goto end54801b9ac0b9cc3722c13fe45038d130
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst32 {
			goto end54801b9ac0b9cc3722c13fe45038d130
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst16 {
			goto end54801b9ac0b9cc3722c13fe45038d130
		}
		d := v.Args[1].AuxInt
		v.Op = OpLsh32x16
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst16, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end54801b9ac0b9cc3722c13fe45038d130
end54801b9ac0b9cc3722c13fe45038d130:
	;
	// match: (Lsh32x16 <t> (Lsh32x16 x (Const16 [c])) (Const16 [d]))
	// cond:
	// result: (Lsh32x16 x  (Const16 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpLsh32x16 {
			goto endfb9e14b1dee4adda0f3dab595911b0a3
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst16 {
			goto endfb9e14b1dee4adda0f3dab595911b0a3
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst16 {
			goto endfb9e14b1dee4adda0f3dab595911b0a3
		}
		d := v.Args[1].AuxInt
		v.Op = OpLsh32x16
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst16, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto endfb9e14b1dee4adda0f3dab595911b0a3
endfb9e14b1dee4adda0f3dab595911b0a3:
	;
	// match: (Lsh32x16 <t> (Lsh32x8 x (Const8 [c])) (Const16 [d]))
	// cond:
	// result: (Lsh32x16 x  (Const16 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpLsh32x8 {
			goto end6ed26c41d0745af316bfccfeff88cf6d
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst8 {
			goto end6ed26c41d0745af316bfccfeff88cf6d
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst16 {
			goto end6ed26c41d0745af316bfccfeff88cf6d
		}
		d := v.Args[1].AuxInt
		v.Op = OpLsh32x16
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst16, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end6ed26c41d0745af316bfccfeff88cf6d
end6ed26c41d0745af316bfccfeff88cf6d:
	;
	return false
}
func rewriteValuegeneric_OpLsh32x32(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Lsh32x32 _ (Const32 [c]))
	// cond: c >= 32
	// result: (Const64 [0])
	{
		if v.Args[1].Op != OpConst32 {
			goto end8efaaf8d92a1ac47da14ba76806e819e
		}
		c := v.Args[1].AuxInt
		if !(c >= 32) {
			goto end8efaaf8d92a1ac47da14ba76806e819e
		}
		v.Op = OpConst64
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = 0
		return true
	}
	goto end8efaaf8d92a1ac47da14ba76806e819e
end8efaaf8d92a1ac47da14ba76806e819e:
	;
	// match: (Lsh32x32 x (Const32 [c]))
	// cond: c == 0
	// result: x
	{
		x := v.Args[0]
		if v.Args[1].Op != OpConst32 {
			goto endc989ff2d57fedb8c41e444cfe8b1e615
		}
		c := v.Args[1].AuxInt
		if !(c == 0) {
			goto endc989ff2d57fedb8c41e444cfe8b1e615
		}
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = x.Type
		v.AddArg(x)
		return true
	}
	goto endc989ff2d57fedb8c41e444cfe8b1e615
endc989ff2d57fedb8c41e444cfe8b1e615:
	;
	// match: (Lsh32x32 <t> (Lsh32x64 x (Const64 [c])) (Const32 [d]))
	// cond:
	// result: (Lsh32x32 x  (Const32 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpLsh32x64 {
			goto end7917cedd11d6439c08a5c4f936d4821d
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst64 {
			goto end7917cedd11d6439c08a5c4f936d4821d
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst32 {
			goto end7917cedd11d6439c08a5c4f936d4821d
		}
		d := v.Args[1].AuxInt
		v.Op = OpLsh32x32
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst32, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end7917cedd11d6439c08a5c4f936d4821d
end7917cedd11d6439c08a5c4f936d4821d:
	;
	// match: (Lsh32x32 <t> (Lsh32x32 x (Const32 [c])) (Const32 [d]))
	// cond:
	// result: (Lsh32x32 x  (Const32 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpLsh32x32 {
			goto end3e1c6119aa4db55f715af8022115a9ae
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst32 {
			goto end3e1c6119aa4db55f715af8022115a9ae
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst32 {
			goto end3e1c6119aa4db55f715af8022115a9ae
		}
		d := v.Args[1].AuxInt
		v.Op = OpLsh32x32
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst32, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end3e1c6119aa4db55f715af8022115a9ae
end3e1c6119aa4db55f715af8022115a9ae:
	;
	// match: (Lsh32x32 <t> (Lsh32x16 x (Const16 [c])) (Const32 [d]))
	// cond:
	// result: (Lsh32x32 x  (Const32 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpLsh32x16 {
			goto end8e73ee954ace06726f3c0b9b773cf210
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst16 {
			goto end8e73ee954ace06726f3c0b9b773cf210
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst32 {
			goto end8e73ee954ace06726f3c0b9b773cf210
		}
		d := v.Args[1].AuxInt
		v.Op = OpLsh32x32
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst32, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end8e73ee954ace06726f3c0b9b773cf210
end8e73ee954ace06726f3c0b9b773cf210:
	;
	// match: (Lsh32x32 <t> (Lsh32x8 x (Const8 [c])) (Const32 [d]))
	// cond:
	// result: (Lsh32x32 x  (Const32 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpLsh32x8 {
			goto end338cc1e619fe870f012369f6806c60c4
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst8 {
			goto end338cc1e619fe870f012369f6806c60c4
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst32 {
			goto end338cc1e619fe870f012369f6806c60c4
		}
		d := v.Args[1].AuxInt
		v.Op = OpLsh32x32
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst32, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end338cc1e619fe870f012369f6806c60c4
end338cc1e619fe870f012369f6806c60c4:
	;
	return false
}
func rewriteValuegeneric_OpLsh32x64(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Lsh32x64 _ (Const64 [c]))
	// cond: c >= 32
	// result: (Const64 [0])
	{
		if v.Args[1].Op != OpConst64 {
			goto enddd26f6acd3ae425d739aa4bff26a93a4
		}
		c := v.Args[1].AuxInt
		if !(c >= 32) {
			goto enddd26f6acd3ae425d739aa4bff26a93a4
		}
		v.Op = OpConst64
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = 0
		return true
	}
	goto enddd26f6acd3ae425d739aa4bff26a93a4
enddd26f6acd3ae425d739aa4bff26a93a4:
	;
	// match: (Lsh32x64 x (Const64 [0]))
	// cond:
	// result: x
	{
		x := v.Args[0]
		if v.Args[1].Op != OpConst64 {
			goto end41ac15cd8bba1ea213fc76368075739e
		}
		if v.Args[1].AuxInt != 0 {
			goto end41ac15cd8bba1ea213fc76368075739e
		}
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = x.Type
		v.AddArg(x)
		return true
	}
	goto end41ac15cd8bba1ea213fc76368075739e
end41ac15cd8bba1ea213fc76368075739e:
	;
	// match: (Lsh32x64 <t> (Lsh32x64 x (Const64 [c])) (Const64 [d]))
	// cond:
	// result: (Lsh32x64 x  (Const64 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpLsh32x64 {
			goto end928a47694cdba85279de26c31fb8b651
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst64 {
			goto end928a47694cdba85279de26c31fb8b651
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst64 {
			goto end928a47694cdba85279de26c31fb8b651
		}
		d := v.Args[1].AuxInt
		v.Op = OpLsh32x64
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst64, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end928a47694cdba85279de26c31fb8b651
end928a47694cdba85279de26c31fb8b651:
	;
	// match: (Lsh32x64 <t> (Lsh32x32 x (Const32 [c])) (Const64 [d]))
	// cond:
	// result: (Lsh32x64 x  (Const64 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpLsh32x32 {
			goto end75baf40f7936657fd642b97dcee64d14
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst32 {
			goto end75baf40f7936657fd642b97dcee64d14
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst64 {
			goto end75baf40f7936657fd642b97dcee64d14
		}
		d := v.Args[1].AuxInt
		v.Op = OpLsh32x64
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst64, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end75baf40f7936657fd642b97dcee64d14
end75baf40f7936657fd642b97dcee64d14:
	;
	// match: (Lsh32x64 <t> (Lsh32x16 x (Const16 [c])) (Const64 [d]))
	// cond:
	// result: (Lsh32x64 x  (Const64 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpLsh32x16 {
			goto end7f5e04f950621dae4f1a2d8cf2e678b6
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst16 {
			goto end7f5e04f950621dae4f1a2d8cf2e678b6
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst64 {
			goto end7f5e04f950621dae4f1a2d8cf2e678b6
		}
		d := v.Args[1].AuxInt
		v.Op = OpLsh32x64
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst64, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end7f5e04f950621dae4f1a2d8cf2e678b6
end7f5e04f950621dae4f1a2d8cf2e678b6:
	;
	// match: (Lsh32x64 <t> (Lsh32x8 x (Const8 [c])) (Const64 [d]))
	// cond:
	// result: (Lsh32x64 x  (Const64 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpLsh32x8 {
			goto end299e668636f53783e4afc91ab7a49b24
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst8 {
			goto end299e668636f53783e4afc91ab7a49b24
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst64 {
			goto end299e668636f53783e4afc91ab7a49b24
		}
		d := v.Args[1].AuxInt
		v.Op = OpLsh32x64
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst64, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end299e668636f53783e4afc91ab7a49b24
end299e668636f53783e4afc91ab7a49b24:
	;
	return false
}
func rewriteValuegeneric_OpLsh32x8(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Lsh32x8 x (Const8 [c]))
	// cond: c == 0
	// result: x
	{
		x := v.Args[0]
		if v.Args[1].Op != OpConst8 {
			goto end9294bc7d4b77404aaae05f431351c936
		}
		c := v.Args[1].AuxInt
		if !(c == 0) {
			goto end9294bc7d4b77404aaae05f431351c936
		}
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = x.Type
		v.AddArg(x)
		return true
	}
	goto end9294bc7d4b77404aaae05f431351c936
end9294bc7d4b77404aaae05f431351c936:
	;
	// match: (Lsh32x8 <t> (Lsh32x64 x (Const64 [c])) (Const8 [d]))
	// cond:
	// result: (Lsh32x8 x  (Const8 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpLsh32x64 {
			goto end24a01eb63ea769aa3adcb738325c920a
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst64 {
			goto end24a01eb63ea769aa3adcb738325c920a
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst8 {
			goto end24a01eb63ea769aa3adcb738325c920a
		}
		d := v.Args[1].AuxInt
		v.Op = OpLsh32x8
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst8, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end24a01eb63ea769aa3adcb738325c920a
end24a01eb63ea769aa3adcb738325c920a:
	;
	// match: (Lsh32x8 <t> (Lsh32x32 x (Const32 [c])) (Const8 [d]))
	// cond:
	// result: (Lsh32x8 x  (Const8 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpLsh32x32 {
			goto end94b56fca12afbbf8dcf26a30314c1d61
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst32 {
			goto end94b56fca12afbbf8dcf26a30314c1d61
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst8 {
			goto end94b56fca12afbbf8dcf26a30314c1d61
		}
		d := v.Args[1].AuxInt
		v.Op = OpLsh32x8
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst8, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end94b56fca12afbbf8dcf26a30314c1d61
end94b56fca12afbbf8dcf26a30314c1d61:
	;
	// match: (Lsh32x8 <t> (Lsh32x16 x (Const16 [c])) (Const8 [d]))
	// cond:
	// result: (Lsh32x8 x  (Const8 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpLsh32x16 {
			goto end50648d05651066f307298bebd88308cf
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst16 {
			goto end50648d05651066f307298bebd88308cf
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst8 {
			goto end50648d05651066f307298bebd88308cf
		}
		d := v.Args[1].AuxInt
		v.Op = OpLsh32x8
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst8, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end50648d05651066f307298bebd88308cf
end50648d05651066f307298bebd88308cf:
	;
	// match: (Lsh32x8 <t> (Lsh32x8 x (Const8 [c])) (Const8 [d]))
	// cond:
	// result: (Lsh32x8 x  (Const8 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpLsh32x8 {
			goto end8e895dd2343564d26f0bb2b3d685b984
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst8 {
			goto end8e895dd2343564d26f0bb2b3d685b984
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst8 {
			goto end8e895dd2343564d26f0bb2b3d685b984
		}
		d := v.Args[1].AuxInt
		v.Op = OpLsh32x8
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst8, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end8e895dd2343564d26f0bb2b3d685b984
end8e895dd2343564d26f0bb2b3d685b984:
	;
	return false
}
func rewriteValuegeneric_OpLsh64x16(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Lsh64x16 x (Const16 [c]))
	// cond: c == 0
	// result: x
	{
		x := v.Args[0]
		if v.Args[1].Op != OpConst16 {
			goto end552e38924cde9020d33e0ef4db787456
		}
		c := v.Args[1].AuxInt
		if !(c == 0) {
			goto end552e38924cde9020d33e0ef4db787456
		}
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = x.Type
		v.AddArg(x)
		return true
	}
	goto end552e38924cde9020d33e0ef4db787456
end552e38924cde9020d33e0ef4db787456:
	;
	// match: (Lsh64x16 <t> (Lsh64x64 x (Const64 [c])) (Const16 [d]))
	// cond:
	// result: (Lsh64x16 x  (Const16 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpLsh64x64 {
			goto end8400ca64de32eca9aa6b123ba75eaadb
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst64 {
			goto end8400ca64de32eca9aa6b123ba75eaadb
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst16 {
			goto end8400ca64de32eca9aa6b123ba75eaadb
		}
		d := v.Args[1].AuxInt
		v.Op = OpLsh64x16
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst16, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end8400ca64de32eca9aa6b123ba75eaadb
end8400ca64de32eca9aa6b123ba75eaadb:
	;
	// match: (Lsh64x16 <t> (Lsh64x32 x (Const32 [c])) (Const16 [d]))
	// cond:
	// result: (Lsh64x16 x  (Const16 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpLsh64x32 {
			goto endd1707c683707727adf3f5de6e15dd371
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst32 {
			goto endd1707c683707727adf3f5de6e15dd371
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst16 {
			goto endd1707c683707727adf3f5de6e15dd371
		}
		d := v.Args[1].AuxInt
		v.Op = OpLsh64x16
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst16, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto endd1707c683707727adf3f5de6e15dd371
endd1707c683707727adf3f5de6e15dd371:
	;
	// match: (Lsh64x16 <t> (Lsh64x16 x (Const16 [c])) (Const16 [d]))
	// cond:
	// result: (Lsh64x16 x  (Const16 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpLsh64x16 {
			goto end7e585e03850820fe090c705e7cf11ac8
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst16 {
			goto end7e585e03850820fe090c705e7cf11ac8
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst16 {
			goto end7e585e03850820fe090c705e7cf11ac8
		}
		d := v.Args[1].AuxInt
		v.Op = OpLsh64x16
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst16, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end7e585e03850820fe090c705e7cf11ac8
end7e585e03850820fe090c705e7cf11ac8:
	;
	// match: (Lsh64x16 <t> (Lsh64x8 x (Const8 [c])) (Const16 [d]))
	// cond:
	// result: (Lsh64x16 x  (Const16 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpLsh64x8 {
			goto end3da83bf02cefacaa64c0b0fc9228a401
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst8 {
			goto end3da83bf02cefacaa64c0b0fc9228a401
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst16 {
			goto end3da83bf02cefacaa64c0b0fc9228a401
		}
		d := v.Args[1].AuxInt
		v.Op = OpLsh64x16
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst16, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end3da83bf02cefacaa64c0b0fc9228a401
end3da83bf02cefacaa64c0b0fc9228a401:
	;
	return false
}
func rewriteValuegeneric_OpLsh64x32(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Lsh64x32 x (Const32 [c]))
	// cond: c == 0
	// result: x
	{
		x := v.Args[0]
		if v.Args[1].Op != OpConst32 {
			goto end8ba68539859d9cf16ec8a67ac36a9a10
		}
		c := v.Args[1].AuxInt
		if !(c == 0) {
			goto end8ba68539859d9cf16ec8a67ac36a9a10
		}
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = x.Type
		v.AddArg(x)
		return true
	}
	goto end8ba68539859d9cf16ec8a67ac36a9a10
end8ba68539859d9cf16ec8a67ac36a9a10:
	;
	// match: (Lsh64x32 <t> (Lsh64x64 x (Const64 [c])) (Const32 [d]))
	// cond:
	// result: (Lsh64x32 x  (Const32 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpLsh64x64 {
			goto endb81f2790e5638d451dee7322b5b13dc0
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst64 {
			goto endb81f2790e5638d451dee7322b5b13dc0
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst32 {
			goto endb81f2790e5638d451dee7322b5b13dc0
		}
		d := v.Args[1].AuxInt
		v.Op = OpLsh64x32
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst32, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto endb81f2790e5638d451dee7322b5b13dc0
endb81f2790e5638d451dee7322b5b13dc0:
	;
	// match: (Lsh64x32 <t> (Lsh64x32 x (Const32 [c])) (Const32 [d]))
	// cond:
	// result: (Lsh64x32 x  (Const32 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpLsh64x32 {
			goto end3819f6a6c9b4e102d877c44991a8e2c5
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst32 {
			goto end3819f6a6c9b4e102d877c44991a8e2c5
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst32 {
			goto end3819f6a6c9b4e102d877c44991a8e2c5
		}
		d := v.Args[1].AuxInt
		v.Op = OpLsh64x32
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst32, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end3819f6a6c9b4e102d877c44991a8e2c5
end3819f6a6c9b4e102d877c44991a8e2c5:
	;
	// match: (Lsh64x32 <t> (Lsh64x16 x (Const16 [c])) (Const32 [d]))
	// cond:
	// result: (Lsh64x32 x  (Const32 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpLsh64x16 {
			goto end2ad429fa2a186f94a207b2f06d56c5bd
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst16 {
			goto end2ad429fa2a186f94a207b2f06d56c5bd
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst32 {
			goto end2ad429fa2a186f94a207b2f06d56c5bd
		}
		d := v.Args[1].AuxInt
		v.Op = OpLsh64x32
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst32, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end2ad429fa2a186f94a207b2f06d56c5bd
end2ad429fa2a186f94a207b2f06d56c5bd:
	;
	// match: (Lsh64x32 <t> (Lsh64x8 x (Const8 [c])) (Const32 [d]))
	// cond:
	// result: (Lsh64x32 x  (Const32 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpLsh64x8 {
			goto endefa5a2fc03da047f72da41148612ac5a
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst8 {
			goto endefa5a2fc03da047f72da41148612ac5a
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst32 {
			goto endefa5a2fc03da047f72da41148612ac5a
		}
		d := v.Args[1].AuxInt
		v.Op = OpLsh64x32
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst32, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto endefa5a2fc03da047f72da41148612ac5a
endefa5a2fc03da047f72da41148612ac5a:
	;
	return false
}
func rewriteValuegeneric_OpLsh64x64(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Lsh64x64 _ (Const64 [c]))
	// cond: c >= 64
	// result: (Const64 [0])
	{
		if v.Args[1].Op != OpConst64 {
			goto end66324a83748acd05484762f9e3fbc2ae
		}
		c := v.Args[1].AuxInt
		if !(c >= 64) {
			goto end66324a83748acd05484762f9e3fbc2ae
		}
		v.Op = OpConst64
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = 0
		return true
	}
	goto end66324a83748acd05484762f9e3fbc2ae
end66324a83748acd05484762f9e3fbc2ae:
	;
	// match: (Lsh64x64 x (Const64 [0]))
	// cond:
	// result: x
	{
		x := v.Args[0]
		if v.Args[1].Op != OpConst64 {
			goto endc439b72d14756dbe54fe664f42a74091
		}
		if v.Args[1].AuxInt != 0 {
			goto endc439b72d14756dbe54fe664f42a74091
		}
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = x.Type
		v.AddArg(x)
		return true
	}
	goto endc439b72d14756dbe54fe664f42a74091
endc439b72d14756dbe54fe664f42a74091:
	;
	// match: (Lsh64x64 <t> (Lsh64x64 x (Const64 [c])) (Const64 [d]))
	// cond:
	// result: (Lsh64x64 x  (Const64 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpLsh64x64 {
			goto endd3557def0ed5c35f7fddef823b429563
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst64 {
			goto endd3557def0ed5c35f7fddef823b429563
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst64 {
			goto endd3557def0ed5c35f7fddef823b429563
		}
		d := v.Args[1].AuxInt
		v.Op = OpLsh64x64
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst64, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto endd3557def0ed5c35f7fddef823b429563
endd3557def0ed5c35f7fddef823b429563:
	;
	// match: (Lsh64x64 <t> (Lsh64x32 x (Const32 [c])) (Const64 [d]))
	// cond:
	// result: (Lsh64x64 x  (Const64 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpLsh64x32 {
			goto end7153266d34a0f392acda89af91cdf24d
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst32 {
			goto end7153266d34a0f392acda89af91cdf24d
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst64 {
			goto end7153266d34a0f392acda89af91cdf24d
		}
		d := v.Args[1].AuxInt
		v.Op = OpLsh64x64
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst64, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end7153266d34a0f392acda89af91cdf24d
end7153266d34a0f392acda89af91cdf24d:
	;
	// match: (Lsh64x64 <t> (Lsh64x16 x (Const16 [c])) (Const64 [d]))
	// cond:
	// result: (Lsh64x64 x  (Const64 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpLsh64x16 {
			goto endced3faafec03558d62633e8fcabbe99c
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst16 {
			goto endced3faafec03558d62633e8fcabbe99c
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst64 {
			goto endced3faafec03558d62633e8fcabbe99c
		}
		d := v.Args[1].AuxInt
		v.Op = OpLsh64x64
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst64, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto endced3faafec03558d62633e8fcabbe99c
endced3faafec03558d62633e8fcabbe99c:
	;
	// match: (Lsh64x64 <t> (Lsh64x8 x (Const8 [c])) (Const64 [d]))
	// cond:
	// result: (Lsh64x64 x  (Const64 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpLsh64x8 {
			goto endbda2f930b27ac12fcc68aaaf1760315f
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst8 {
			goto endbda2f930b27ac12fcc68aaaf1760315f
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst64 {
			goto endbda2f930b27ac12fcc68aaaf1760315f
		}
		d := v.Args[1].AuxInt
		v.Op = OpLsh64x64
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst64, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto endbda2f930b27ac12fcc68aaaf1760315f
endbda2f930b27ac12fcc68aaaf1760315f:
	;
	return false
}
func rewriteValuegeneric_OpLsh64x8(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Lsh64x8 x (Const8 [c]))
	// cond: c == 0
	// result: x
	{
		x := v.Args[0]
		if v.Args[1].Op != OpConst8 {
			goto end4f593492b213dc298033e2c37d65457c
		}
		c := v.Args[1].AuxInt
		if !(c == 0) {
			goto end4f593492b213dc298033e2c37d65457c
		}
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = x.Type
		v.AddArg(x)
		return true
	}
	goto end4f593492b213dc298033e2c37d65457c
end4f593492b213dc298033e2c37d65457c:
	;
	// match: (Lsh64x8 <t> (Lsh64x64 x (Const64 [c])) (Const8 [d]))
	// cond:
	// result: (Lsh64x8 x  (Const8 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpLsh64x64 {
			goto end7ef4a25ed1da581fdf28248a1a92561a
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst64 {
			goto end7ef4a25ed1da581fdf28248a1a92561a
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst8 {
			goto end7ef4a25ed1da581fdf28248a1a92561a
		}
		d := v.Args[1].AuxInt
		v.Op = OpLsh64x8
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst8, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end7ef4a25ed1da581fdf28248a1a92561a
end7ef4a25ed1da581fdf28248a1a92561a:
	;
	// match: (Lsh64x8 <t> (Lsh64x32 x (Const32 [c])) (Const8 [d]))
	// cond:
	// result: (Lsh64x8 x  (Const8 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpLsh64x32 {
			goto endaa9588cc71f5df3036e14811d92823ac
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst32 {
			goto endaa9588cc71f5df3036e14811d92823ac
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst8 {
			goto endaa9588cc71f5df3036e14811d92823ac
		}
		d := v.Args[1].AuxInt
		v.Op = OpLsh64x8
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst8, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto endaa9588cc71f5df3036e14811d92823ac
endaa9588cc71f5df3036e14811d92823ac:
	;
	// match: (Lsh64x8 <t> (Lsh64x16 x (Const16 [c])) (Const8 [d]))
	// cond:
	// result: (Lsh64x8 x  (Const8 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpLsh64x16 {
			goto end9aea6b9a03f579b6614b20818a16e7d1
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst16 {
			goto end9aea6b9a03f579b6614b20818a16e7d1
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst8 {
			goto end9aea6b9a03f579b6614b20818a16e7d1
		}
		d := v.Args[1].AuxInt
		v.Op = OpLsh64x8
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst8, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end9aea6b9a03f579b6614b20818a16e7d1
end9aea6b9a03f579b6614b20818a16e7d1:
	;
	// match: (Lsh64x8 <t> (Lsh64x8 x (Const8 [c])) (Const8 [d]))
	// cond:
	// result: (Lsh64x8 x  (Const8 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpLsh64x8 {
			goto endd780c64d60db53358d0e4663fe2b2c0e
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst8 {
			goto endd780c64d60db53358d0e4663fe2b2c0e
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst8 {
			goto endd780c64d60db53358d0e4663fe2b2c0e
		}
		d := v.Args[1].AuxInt
		v.Op = OpLsh64x8
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst8, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto endd780c64d60db53358d0e4663fe2b2c0e
endd780c64d60db53358d0e4663fe2b2c0e:
	;
	return false
}
func rewriteValuegeneric_OpLsh8x16(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Lsh8x16 _ (Const16 [c]))
	// cond: c >= 8
	// result: (Const64 [0])
	{
		if v.Args[1].Op != OpConst16 {
			goto endfbd911c431380918850c381f9d20fb8e
		}
		c := v.Args[1].AuxInt
		if !(c >= 8) {
			goto endfbd911c431380918850c381f9d20fb8e
		}
		v.Op = OpConst64
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = 0
		return true
	}
	goto endfbd911c431380918850c381f9d20fb8e
endfbd911c431380918850c381f9d20fb8e:
	;
	// match: (Lsh8x16 x (Const16 [c]))
	// cond: c == 0
	// result: x
	{
		x := v.Args[0]
		if v.Args[1].Op != OpConst16 {
			goto end4040bf6e34ca0fb9e7acf05346c7f650
		}
		c := v.Args[1].AuxInt
		if !(c == 0) {
			goto end4040bf6e34ca0fb9e7acf05346c7f650
		}
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = x.Type
		v.AddArg(x)
		return true
	}
	goto end4040bf6e34ca0fb9e7acf05346c7f650
end4040bf6e34ca0fb9e7acf05346c7f650:
	;
	// match: (Lsh8x16 <t> (Lsh8x64 x (Const64 [c])) (Const16 [d]))
	// cond:
	// result: (Lsh8x16 x  (Const16 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpLsh8x64 {
			goto endc2056676dbe364ca3d8aa7d470b1a342
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst64 {
			goto endc2056676dbe364ca3d8aa7d470b1a342
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst16 {
			goto endc2056676dbe364ca3d8aa7d470b1a342
		}
		d := v.Args[1].AuxInt
		v.Op = OpLsh8x16
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst16, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto endc2056676dbe364ca3d8aa7d470b1a342
endc2056676dbe364ca3d8aa7d470b1a342:
	;
	// match: (Lsh8x16 <t> (Lsh8x32 x (Const32 [c])) (Const16 [d]))
	// cond:
	// result: (Lsh8x16 x  (Const16 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpLsh8x32 {
			goto end4315264b9891e15a433e3d94fe1d9590
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst32 {
			goto end4315264b9891e15a433e3d94fe1d9590
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst16 {
			goto end4315264b9891e15a433e3d94fe1d9590
		}
		d := v.Args[1].AuxInt
		v.Op = OpLsh8x16
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst16, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end4315264b9891e15a433e3d94fe1d9590
end4315264b9891e15a433e3d94fe1d9590:
	;
	// match: (Lsh8x16 <t> (Lsh8x16 x (Const16 [c])) (Const16 [d]))
	// cond:
	// result: (Lsh8x16 x  (Const16 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpLsh8x16 {
			goto end5367721b6b79774cd61f2d041e5d62c4
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst16 {
			goto end5367721b6b79774cd61f2d041e5d62c4
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst16 {
			goto end5367721b6b79774cd61f2d041e5d62c4
		}
		d := v.Args[1].AuxInt
		v.Op = OpLsh8x16
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst16, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end5367721b6b79774cd61f2d041e5d62c4
end5367721b6b79774cd61f2d041e5d62c4:
	;
	// match: (Lsh8x16 <t> (Lsh8x8 x (Const8 [c])) (Const16 [d]))
	// cond:
	// result: (Lsh8x16 x  (Const16 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpLsh8x8 {
			goto endee3c5b0c2214015b70834264fce946ca
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst8 {
			goto endee3c5b0c2214015b70834264fce946ca
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst16 {
			goto endee3c5b0c2214015b70834264fce946ca
		}
		d := v.Args[1].AuxInt
		v.Op = OpLsh8x16
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst16, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto endee3c5b0c2214015b70834264fce946ca
endee3c5b0c2214015b70834264fce946ca:
	;
	return false
}
func rewriteValuegeneric_OpLsh8x32(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Lsh8x32 _ (Const32 [c]))
	// cond: c >= 8
	// result: (Const64 [0])
	{
		if v.Args[1].Op != OpConst32 {
			goto end441ac3614c817559612d5c7b8fa8bdfe
		}
		c := v.Args[1].AuxInt
		if !(c >= 8) {
			goto end441ac3614c817559612d5c7b8fa8bdfe
		}
		v.Op = OpConst64
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = 0
		return true
	}
	goto end441ac3614c817559612d5c7b8fa8bdfe
end441ac3614c817559612d5c7b8fa8bdfe:
	;
	// match: (Lsh8x32 x (Const32 [c]))
	// cond: c == 0
	// result: x
	{
		x := v.Args[0]
		if v.Args[1].Op != OpConst32 {
			goto enda0e20f70338110c5c6d77839ee6cb1e0
		}
		c := v.Args[1].AuxInt
		if !(c == 0) {
			goto enda0e20f70338110c5c6d77839ee6cb1e0
		}
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = x.Type
		v.AddArg(x)
		return true
	}
	goto enda0e20f70338110c5c6d77839ee6cb1e0
enda0e20f70338110c5c6d77839ee6cb1e0:
	;
	// match: (Lsh8x32 <t> (Lsh8x64 x (Const64 [c])) (Const32 [d]))
	// cond:
	// result: (Lsh8x32 x  (Const32 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpLsh8x64 {
			goto end46cb9289c641ae35587a7d788e2802d2
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst64 {
			goto end46cb9289c641ae35587a7d788e2802d2
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst32 {
			goto end46cb9289c641ae35587a7d788e2802d2
		}
		d := v.Args[1].AuxInt
		v.Op = OpLsh8x32
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst32, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end46cb9289c641ae35587a7d788e2802d2
end46cb9289c641ae35587a7d788e2802d2:
	;
	// match: (Lsh8x32 <t> (Lsh8x32 x (Const32 [c])) (Const32 [d]))
	// cond:
	// result: (Lsh8x32 x  (Const32 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpLsh8x32 {
			goto end82ca8abc40d867a00eddeaedba2d93f7
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst32 {
			goto end82ca8abc40d867a00eddeaedba2d93f7
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst32 {
			goto end82ca8abc40d867a00eddeaedba2d93f7
		}
		d := v.Args[1].AuxInt
		v.Op = OpLsh8x32
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst32, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end82ca8abc40d867a00eddeaedba2d93f7
end82ca8abc40d867a00eddeaedba2d93f7:
	;
	// match: (Lsh8x32 <t> (Lsh8x16 x (Const16 [c])) (Const32 [d]))
	// cond:
	// result: (Lsh8x32 x  (Const32 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpLsh8x16 {
			goto end1f68ca7f0cc68e0c16ce44e0892ef2b9
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst16 {
			goto end1f68ca7f0cc68e0c16ce44e0892ef2b9
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst32 {
			goto end1f68ca7f0cc68e0c16ce44e0892ef2b9
		}
		d := v.Args[1].AuxInt
		v.Op = OpLsh8x32
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst32, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end1f68ca7f0cc68e0c16ce44e0892ef2b9
end1f68ca7f0cc68e0c16ce44e0892ef2b9:
	;
	// match: (Lsh8x32 <t> (Lsh8x8 x (Const8 [c])) (Const32 [d]))
	// cond:
	// result: (Lsh8x32 x  (Const32 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpLsh8x8 {
			goto ende71d076e3ae9fdefdc200390a4815f02
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst8 {
			goto ende71d076e3ae9fdefdc200390a4815f02
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst32 {
			goto ende71d076e3ae9fdefdc200390a4815f02
		}
		d := v.Args[1].AuxInt
		v.Op = OpLsh8x32
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst32, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto ende71d076e3ae9fdefdc200390a4815f02
ende71d076e3ae9fdefdc200390a4815f02:
	;
	return false
}
func rewriteValuegeneric_OpLsh8x64(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Lsh8x64 _ (Const64 [c]))
	// cond: c >= 8
	// result: (Const64 [0])
	{
		if v.Args[1].Op != OpConst64 {
			goto end7ab29df9d5bc9e0dc4ea20e6208ace01
		}
		c := v.Args[1].AuxInt
		if !(c >= 8) {
			goto end7ab29df9d5bc9e0dc4ea20e6208ace01
		}
		v.Op = OpConst64
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = 0
		return true
	}
	goto end7ab29df9d5bc9e0dc4ea20e6208ace01
end7ab29df9d5bc9e0dc4ea20e6208ace01:
	;
	// match: (Lsh8x64 x (Const64 [0]))
	// cond:
	// result: x
	{
		x := v.Args[0]
		if v.Args[1].Op != OpConst64 {
			goto enddc7613ba1c19780d028ddbda80f907ff
		}
		if v.Args[1].AuxInt != 0 {
			goto enddc7613ba1c19780d028ddbda80f907ff
		}
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = x.Type
		v.AddArg(x)
		return true
	}
	goto enddc7613ba1c19780d028ddbda80f907ff
enddc7613ba1c19780d028ddbda80f907ff:
	;
	// match: (Lsh8x64 <t> (Lsh8x64 x (Const64 [c])) (Const64 [d]))
	// cond:
	// result: (Lsh8x64 x  (Const64 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpLsh8x64 {
			goto endec91c3df2438ed898b72ccc706dd1ce5
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst64 {
			goto endec91c3df2438ed898b72ccc706dd1ce5
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst64 {
			goto endec91c3df2438ed898b72ccc706dd1ce5
		}
		d := v.Args[1].AuxInt
		v.Op = OpLsh8x64
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst64, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto endec91c3df2438ed898b72ccc706dd1ce5
endec91c3df2438ed898b72ccc706dd1ce5:
	;
	// match: (Lsh8x64 <t> (Lsh8x32 x (Const32 [c])) (Const64 [d]))
	// cond:
	// result: (Lsh8x64 x  (Const64 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpLsh8x32 {
			goto end96154d9addd0573e30e752fb2b2d8516
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst32 {
			goto end96154d9addd0573e30e752fb2b2d8516
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst64 {
			goto end96154d9addd0573e30e752fb2b2d8516
		}
		d := v.Args[1].AuxInt
		v.Op = OpLsh8x64
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst64, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end96154d9addd0573e30e752fb2b2d8516
end96154d9addd0573e30e752fb2b2d8516:
	;
	// match: (Lsh8x64 <t> (Lsh8x16 x (Const16 [c])) (Const64 [d]))
	// cond:
	// result: (Lsh8x64 x  (Const64 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpLsh8x16 {
			goto end90475c8b8bd7fcbcaee38149352b6d03
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst16 {
			goto end90475c8b8bd7fcbcaee38149352b6d03
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst64 {
			goto end90475c8b8bd7fcbcaee38149352b6d03
		}
		d := v.Args[1].AuxInt
		v.Op = OpLsh8x64
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst64, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end90475c8b8bd7fcbcaee38149352b6d03
end90475c8b8bd7fcbcaee38149352b6d03:
	;
	// match: (Lsh8x64 <t> (Lsh8x8 x (Const8 [c])) (Const64 [d]))
	// cond:
	// result: (Lsh8x64 x  (Const64 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpLsh8x8 {
			goto end4c73361fc74d7f48e1ce07d523cac0be
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst8 {
			goto end4c73361fc74d7f48e1ce07d523cac0be
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst64 {
			goto end4c73361fc74d7f48e1ce07d523cac0be
		}
		d := v.Args[1].AuxInt
		v.Op = OpLsh8x64
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst64, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end4c73361fc74d7f48e1ce07d523cac0be
end4c73361fc74d7f48e1ce07d523cac0be:
	;
	return false
}
func rewriteValuegeneric_OpLsh8x8(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Lsh8x8 _ (Const8 [c]))
	// cond: c >= 8
	// result: (Const64 [0])
	{
		if v.Args[1].Op != OpConst8 {
			goto end516c37c933608588eb815b87fbad940f
		}
		c := v.Args[1].AuxInt
		if !(c >= 8) {
			goto end516c37c933608588eb815b87fbad940f
		}
		v.Op = OpConst64
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = 0
		return true
	}
	goto end516c37c933608588eb815b87fbad940f
end516c37c933608588eb815b87fbad940f:
	;
	// match: (Lsh8x8 x (Const8 [c]))
	// cond: c == 0
	// result: x
	{
		x := v.Args[0]
		if v.Args[1].Op != OpConst8 {
			goto end1887bc1909de7ca5d7a95df012de4eaf
		}
		c := v.Args[1].AuxInt
		if !(c == 0) {
			goto end1887bc1909de7ca5d7a95df012de4eaf
		}
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = x.Type
		v.AddArg(x)
		return true
	}
	goto end1887bc1909de7ca5d7a95df012de4eaf
end1887bc1909de7ca5d7a95df012de4eaf:
	;
	// match: (Lsh8x8 <t> (Lsh8x64 x (Const64 [c])) (Const8 [d]))
	// cond:
	// result: (Lsh8x8 x  (Const8 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpLsh8x64 {
			goto end86ef4c1605a75402bd083506d24c8cc2
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst64 {
			goto end86ef4c1605a75402bd083506d24c8cc2
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst8 {
			goto end86ef4c1605a75402bd083506d24c8cc2
		}
		d := v.Args[1].AuxInt
		v.Op = OpLsh8x8
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst8, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end86ef4c1605a75402bd083506d24c8cc2
end86ef4c1605a75402bd083506d24c8cc2:
	;
	// match: (Lsh8x8 <t> (Lsh8x32 x (Const32 [c])) (Const8 [d]))
	// cond:
	// result: (Lsh8x8 x  (Const8 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpLsh8x32 {
			goto end79f28bfb2f7c8aabd8791b0fcdf39e90
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst32 {
			goto end79f28bfb2f7c8aabd8791b0fcdf39e90
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst8 {
			goto end79f28bfb2f7c8aabd8791b0fcdf39e90
		}
		d := v.Args[1].AuxInt
		v.Op = OpLsh8x8
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst8, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end79f28bfb2f7c8aabd8791b0fcdf39e90
end79f28bfb2f7c8aabd8791b0fcdf39e90:
	;
	// match: (Lsh8x8 <t> (Lsh8x16 x (Const16 [c])) (Const8 [d]))
	// cond:
	// result: (Lsh8x8 x  (Const8 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpLsh8x16 {
			goto end8a21acfa8d864a56bd249d786213985c
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst16 {
			goto end8a21acfa8d864a56bd249d786213985c
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst8 {
			goto end8a21acfa8d864a56bd249d786213985c
		}
		d := v.Args[1].AuxInt
		v.Op = OpLsh8x8
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst8, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end8a21acfa8d864a56bd249d786213985c
end8a21acfa8d864a56bd249d786213985c:
	;
	// match: (Lsh8x8 <t> (Lsh8x8 x (Const8 [c])) (Const8 [d]))
	// cond:
	// result: (Lsh8x8 x  (Const8 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpLsh8x8 {
			goto end142d20db0fd309a886119371d246ee6c
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst8 {
			goto end142d20db0fd309a886119371d246ee6c
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst8 {
			goto end142d20db0fd309a886119371d246ee6c
		}
		d := v.Args[1].AuxInt
		v.Op = OpLsh8x8
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst8, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end142d20db0fd309a886119371d246ee6c
end142d20db0fd309a886119371d246ee6c:
	;
	return false
}
func rewriteValuegeneric_OpMul16(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Mul16 (Const16 [c]) (Const16 [d]))
	// cond:
	// result: (Const16 [c*d])
	{
		if v.Args[0].Op != OpConst16 {
			goto ende8dd468add3015aea24531cf3c89ccb7
		}
		c := v.Args[0].AuxInt
		if v.Args[1].Op != OpConst16 {
			goto ende8dd468add3015aea24531cf3c89ccb7
		}
		d := v.Args[1].AuxInt
		v.Op = OpConst16
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = c * d
		return true
	}
	goto ende8dd468add3015aea24531cf3c89ccb7
ende8dd468add3015aea24531cf3c89ccb7:
	;
	return false
}
func rewriteValuegeneric_OpMul32(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Mul32 (Const32 [c]) (Const32 [d]))
	// cond:
	// result: (Const32 [c*d])
	{
		if v.Args[0].Op != OpConst32 {
			goto end60b4523099fa7b55e2e872e05bd497a7
		}
		c := v.Args[0].AuxInt
		if v.Args[1].Op != OpConst32 {
			goto end60b4523099fa7b55e2e872e05bd497a7
		}
		d := v.Args[1].AuxInt
		v.Op = OpConst32
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = c * d
		return true
	}
	goto end60b4523099fa7b55e2e872e05bd497a7
end60b4523099fa7b55e2e872e05bd497a7:
	;
	return false
}
func rewriteValuegeneric_OpMul64(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Mul64 (Const64 [c]) (Const64 [d]))
	// cond:
	// result: (Const64 [c*d])
	{
		if v.Args[0].Op != OpConst64 {
			goto end7aea1048b5d1230974b97f17238380ae
		}
		c := v.Args[0].AuxInt
		if v.Args[1].Op != OpConst64 {
			goto end7aea1048b5d1230974b97f17238380ae
		}
		d := v.Args[1].AuxInt
		v.Op = OpConst64
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = c * d
		return true
	}
	goto end7aea1048b5d1230974b97f17238380ae
end7aea1048b5d1230974b97f17238380ae:
	;
	return false
}
func rewriteValuegeneric_OpMul8(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Mul8 (Const8 [c]) (Const8 [d]))
	// cond:
	// result: (Const8 [c*d])
	{
		if v.Args[0].Op != OpConst8 {
			goto end2f1952fd654c4a62ff00511041728809
		}
		c := v.Args[0].AuxInt
		if v.Args[1].Op != OpConst8 {
			goto end2f1952fd654c4a62ff00511041728809
		}
		d := v.Args[1].AuxInt
		v.Op = OpConst8
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = c * d
		return true
	}
	goto end2f1952fd654c4a62ff00511041728809
end2f1952fd654c4a62ff00511041728809:
	;
	return false
}
func rewriteValuegeneric_OpNeq16(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Neq16 x x)
	// cond:
	// result: (ConstBool [0])
	{
		x := v.Args[0]
		if v.Args[1] != x {
			goto ende76a50b524aeb16c7aeccf5f5cc60c06
		}
		v.Op = OpConstBool
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = 0
		return true
	}
	goto ende76a50b524aeb16c7aeccf5f5cc60c06
ende76a50b524aeb16c7aeccf5f5cc60c06:
	;
	// match: (Neq16 (Const16 [c]) (Const16 [d]))
	// cond:
	// result: (ConstBool [b2i(int16(c) != int16(d))])
	{
		if v.Args[0].Op != OpConst16 {
			goto end6302c9b645bb191982d28c2f846904d6
		}
		c := v.Args[0].AuxInt
		if v.Args[1].Op != OpConst16 {
			goto end6302c9b645bb191982d28c2f846904d6
		}
		d := v.Args[1].AuxInt
		v.Op = OpConstBool
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = b2i(int16(c) != int16(d))
		return true
	}
	goto end6302c9b645bb191982d28c2f846904d6
end6302c9b645bb191982d28c2f846904d6:
	;
	return false
}
func rewriteValuegeneric_OpNeq32(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Neq32 x x)
	// cond:
	// result: (ConstBool [0])
	{
		x := v.Args[0]
		if v.Args[1] != x {
			goto end3713a608cffd29b40ff7c3b3f2585cbb
		}
		v.Op = OpConstBool
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = 0
		return true
	}
	goto end3713a608cffd29b40ff7c3b3f2585cbb
end3713a608cffd29b40ff7c3b3f2585cbb:
	;
	// match: (Neq32 (Const32 [c]) (Const32 [d]))
	// cond:
	// result: (ConstBool [b2i(int32(c) != int32(d))])
	{
		if v.Args[0].Op != OpConst32 {
			goto endf9f3d0814854d2d0879d331e9bdfcae2
		}
		c := v.Args[0].AuxInt
		if v.Args[1].Op != OpConst32 {
			goto endf9f3d0814854d2d0879d331e9bdfcae2
		}
		d := v.Args[1].AuxInt
		v.Op = OpConstBool
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = b2i(int32(c) != int32(d))
		return true
	}
	goto endf9f3d0814854d2d0879d331e9bdfcae2
endf9f3d0814854d2d0879d331e9bdfcae2:
	;
	return false
}
func rewriteValuegeneric_OpNeq64(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Neq64 x x)
	// cond:
	// result: (ConstBool [0])
	{
		x := v.Args[0]
		if v.Args[1] != x {
			goto end3601ad382705ea12b79d2008c1e5725c
		}
		v.Op = OpConstBool
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = 0
		return true
	}
	goto end3601ad382705ea12b79d2008c1e5725c
end3601ad382705ea12b79d2008c1e5725c:
	;
	// match: (Neq64 (Const64 [c]) (Const64 [d]))
	// cond:
	// result: (ConstBool [b2i(int64(c) != int64(d))])
	{
		if v.Args[0].Op != OpConst64 {
			goto endf07433ecd3c150b1b75e943aa44a7203
		}
		c := v.Args[0].AuxInt
		if v.Args[1].Op != OpConst64 {
			goto endf07433ecd3c150b1b75e943aa44a7203
		}
		d := v.Args[1].AuxInt
		v.Op = OpConstBool
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = b2i(int64(c) != int64(d))
		return true
	}
	goto endf07433ecd3c150b1b75e943aa44a7203
endf07433ecd3c150b1b75e943aa44a7203:
	;
	return false
}
func rewriteValuegeneric_OpNeq8(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Neq8 x x)
	// cond:
	// result: (ConstBool [0])
	{
		x := v.Args[0]
		if v.Args[1] != x {
			goto end09a0deaf3c42627d0d2d3efa96e30745
		}
		v.Op = OpConstBool
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = 0
		return true
	}
	goto end09a0deaf3c42627d0d2d3efa96e30745
end09a0deaf3c42627d0d2d3efa96e30745:
	;
	// match: (Neq8  (Const8  [c]) (Const8  [d]))
	// cond:
	// result: (ConstBool [b2i(int8(c)  != int8(d))])
	{
		if v.Args[0].Op != OpConst8 {
			goto end72ebdaf2de9b3aa57cf0cb8e068b5f9c
		}
		c := v.Args[0].AuxInt
		if v.Args[1].Op != OpConst8 {
			goto end72ebdaf2de9b3aa57cf0cb8e068b5f9c
		}
		d := v.Args[1].AuxInt
		v.Op = OpConstBool
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = b2i(int8(c) != int8(d))
		return true
	}
	goto end72ebdaf2de9b3aa57cf0cb8e068b5f9c
end72ebdaf2de9b3aa57cf0cb8e068b5f9c:
	;
	return false
}
func rewriteValuegeneric_OpNeqInter(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (NeqInter x y)
	// cond:
	// result: (NeqPtr (ITab x) (ITab y))
	{
		x := v.Args[0]
		y := v.Args[1]
		v.Op = OpNeqPtr
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v0 := b.NewValue0(v.Line, OpITab, TypeInvalid)
		v0.AddArg(x)
		v0.Type = config.fe.TypeBytePtr()
		v.AddArg(v0)
		v1 := b.NewValue0(v.Line, OpITab, TypeInvalid)
		v1.AddArg(y)
		v1.Type = config.fe.TypeBytePtr()
		v.AddArg(v1)
		return true
	}
	goto end17b2333bf57e9fe81a671be02f9c4c14
end17b2333bf57e9fe81a671be02f9c4c14:
	;
	return false
}
func rewriteValuegeneric_OpNeqPtr(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (NeqPtr p (ConstNil))
	// cond:
	// result: (IsNonNil p)
	{
		p := v.Args[0]
		if v.Args[1].Op != OpConstNil {
			goto endba798520b4d41172b110347158c44791
		}
		v.Op = OpIsNonNil
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(p)
		return true
	}
	goto endba798520b4d41172b110347158c44791
endba798520b4d41172b110347158c44791:
	;
	// match: (NeqPtr (ConstNil) p)
	// cond:
	// result: (IsNonNil p)
	{
		if v.Args[0].Op != OpConstNil {
			goto enddd95e9c3606d9fd48034f1a703561e45
		}
		p := v.Args[1]
		v.Op = OpIsNonNil
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(p)
		return true
	}
	goto enddd95e9c3606d9fd48034f1a703561e45
enddd95e9c3606d9fd48034f1a703561e45:
	;
	return false
}
func rewriteValuegeneric_OpNeqSlice(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (NeqSlice x y)
	// cond:
	// result: (NeqPtr (SlicePtr x) (SlicePtr y))
	{
		x := v.Args[0]
		y := v.Args[1]
		v.Op = OpNeqPtr
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v0 := b.NewValue0(v.Line, OpSlicePtr, TypeInvalid)
		v0.AddArg(x)
		v0.Type = config.fe.TypeBytePtr()
		v.AddArg(v0)
		v1 := b.NewValue0(v.Line, OpSlicePtr, TypeInvalid)
		v1.AddArg(y)
		v1.Type = config.fe.TypeBytePtr()
		v.AddArg(v1)
		return true
	}
	goto endc6bc83c506e491236ca66ea1081231a2
endc6bc83c506e491236ca66ea1081231a2:
	;
	return false
}
func rewriteValuegeneric_OpOr16(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Or16 x x)
	// cond:
	// result: x
	{
		x := v.Args[0]
		if v.Args[1] != x {
			goto end47a2f25fd31a76807aced3e2b126acdc
		}
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = x.Type
		v.AddArg(x)
		return true
	}
	goto end47a2f25fd31a76807aced3e2b126acdc
end47a2f25fd31a76807aced3e2b126acdc:
	;
	return false
}
func rewriteValuegeneric_OpOr32(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Or32 x x)
	// cond:
	// result: x
	{
		x := v.Args[0]
		if v.Args[1] != x {
			goto end231e283e568e90bd9a3e6a4fa328c8a4
		}
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = x.Type
		v.AddArg(x)
		return true
	}
	goto end231e283e568e90bd9a3e6a4fa328c8a4
end231e283e568e90bd9a3e6a4fa328c8a4:
	;
	return false
}
func rewriteValuegeneric_OpOr64(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Or64 x x)
	// cond:
	// result: x
	{
		x := v.Args[0]
		if v.Args[1] != x {
			goto end6b0efc212016dc97d0e3939db04c81d9
		}
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = x.Type
		v.AddArg(x)
		return true
	}
	goto end6b0efc212016dc97d0e3939db04c81d9
end6b0efc212016dc97d0e3939db04c81d9:
	;
	return false
}
func rewriteValuegeneric_OpOr8(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Or8 x x)
	// cond:
	// result: x
	{
		x := v.Args[0]
		if v.Args[1] != x {
			goto end05295dbfafd6869af79b4daee9fda000
		}
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = x.Type
		v.AddArg(x)
		return true
	}
	goto end05295dbfafd6869af79b4daee9fda000
end05295dbfafd6869af79b4daee9fda000:
	;
	return false
}
func rewriteValuegeneric_OpPtrIndex(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (PtrIndex <t> ptr idx)
	// cond: config.PtrSize == 4
	// result: (AddPtr ptr (Mul32 <config.fe.TypeInt()> idx (Const32 <config.fe.TypeInt()> [t.Elem().Size()])))
	{
		t := v.Type
		ptr := v.Args[0]
		idx := v.Args[1]
		if !(config.PtrSize == 4) {
			goto endd902622aaa1e7545b5a2a0c08b47d287
		}
		v.Op = OpAddPtr
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(ptr)
		v0 := b.NewValue0(v.Line, OpMul32, TypeInvalid)
		v0.Type = config.fe.TypeInt()
		v0.AddArg(idx)
		v1 := b.NewValue0(v.Line, OpConst32, TypeInvalid)
		v1.Type = config.fe.TypeInt()
		v1.AuxInt = t.Elem().Size()
		v0.AddArg(v1)
		v.AddArg(v0)
		return true
	}
	goto endd902622aaa1e7545b5a2a0c08b47d287
endd902622aaa1e7545b5a2a0c08b47d287:
	;
	// match: (PtrIndex <t> ptr idx)
	// cond: config.PtrSize == 8
	// result: (AddPtr ptr (Mul64 <config.fe.TypeInt()> idx (Const64 <config.fe.TypeInt()> [t.Elem().Size()])))
	{
		t := v.Type
		ptr := v.Args[0]
		idx := v.Args[1]
		if !(config.PtrSize == 8) {
			goto end47a5f1d1b158914fa383de024bbe3b08
		}
		v.Op = OpAddPtr
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(ptr)
		v0 := b.NewValue0(v.Line, OpMul64, TypeInvalid)
		v0.Type = config.fe.TypeInt()
		v0.AddArg(idx)
		v1 := b.NewValue0(v.Line, OpConst64, TypeInvalid)
		v1.Type = config.fe.TypeInt()
		v1.AuxInt = t.Elem().Size()
		v0.AddArg(v1)
		v.AddArg(v0)
		return true
	}
	goto end47a5f1d1b158914fa383de024bbe3b08
end47a5f1d1b158914fa383de024bbe3b08:
	;
	return false
}
func rewriteValuegeneric_OpRsh16Ux16(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Rsh16Ux16 _ (Const16 [c]))
	// cond: c >= 16
	// result: (Const64 [0])
	{
		if v.Args[1].Op != OpConst16 {
			goto endc319923f905607959fe277cb3a3942d6
		}
		c := v.Args[1].AuxInt
		if !(c >= 16) {
			goto endc319923f905607959fe277cb3a3942d6
		}
		v.Op = OpConst64
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = 0
		return true
	}
	goto endc319923f905607959fe277cb3a3942d6
endc319923f905607959fe277cb3a3942d6:
	;
	// match: (Rsh16Ux16 x (Const16 [c]))
	// cond: c == 0
	// result: x
	{
		x := v.Args[0]
		if v.Args[1].Op != OpConst16 {
			goto end0964cc831586d85d56ef3507bbeb86cf
		}
		c := v.Args[1].AuxInt
		if !(c == 0) {
			goto end0964cc831586d85d56ef3507bbeb86cf
		}
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = x.Type
		v.AddArg(x)
		return true
	}
	goto end0964cc831586d85d56ef3507bbeb86cf
end0964cc831586d85d56ef3507bbeb86cf:
	;
	// match: (Rsh16Ux16 <t> (Rsh16Ux64 x (Const64 [c])) (Const16 [d]))
	// cond:
	// result: (Rsh16Ux16 x  (Const16 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh16Ux64 {
			goto endffb6782e3464b01aac31173834a6ff60
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst64 {
			goto endffb6782e3464b01aac31173834a6ff60
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst16 {
			goto endffb6782e3464b01aac31173834a6ff60
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh16Ux16
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst16, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto endffb6782e3464b01aac31173834a6ff60
endffb6782e3464b01aac31173834a6ff60:
	;
	// match: (Rsh16Ux16 <t> (Rsh16Ux32 x (Const32 [c])) (Const16 [d]))
	// cond:
	// result: (Rsh16Ux16 x  (Const16 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh16Ux32 {
			goto end33fc35382014a0d024b363c6668b88e1
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst32 {
			goto end33fc35382014a0d024b363c6668b88e1
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst16 {
			goto end33fc35382014a0d024b363c6668b88e1
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh16Ux16
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst16, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end33fc35382014a0d024b363c6668b88e1
end33fc35382014a0d024b363c6668b88e1:
	;
	// match: (Rsh16Ux16 <t> (Rsh16Ux16 x (Const16 [c])) (Const16 [d]))
	// cond:
	// result: (Rsh16Ux16 x  (Const16 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh16Ux16 {
			goto end1b5e7cf4a6ccea372848b613fabc635e
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst16 {
			goto end1b5e7cf4a6ccea372848b613fabc635e
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst16 {
			goto end1b5e7cf4a6ccea372848b613fabc635e
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh16Ux16
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst16, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end1b5e7cf4a6ccea372848b613fabc635e
end1b5e7cf4a6ccea372848b613fabc635e:
	;
	// match: (Rsh16Ux16 <t> (Rsh16Ux8 x (Const8 [c])) (Const16 [d]))
	// cond:
	// result: (Rsh16Ux16 x  (Const16 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh16Ux8 {
			goto end4aac1a49348de1895309d935630d2e77
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst8 {
			goto end4aac1a49348de1895309d935630d2e77
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst16 {
			goto end4aac1a49348de1895309d935630d2e77
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh16Ux16
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst16, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end4aac1a49348de1895309d935630d2e77
end4aac1a49348de1895309d935630d2e77:
	;
	return false
}
func rewriteValuegeneric_OpRsh16Ux32(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Rsh16Ux32 _ (Const32 [c]))
	// cond: c >= 16
	// result: (Const64 [0])
	{
		if v.Args[1].Op != OpConst32 {
			goto end48aee05b87c41289bd387dd2e1b75b33
		}
		c := v.Args[1].AuxInt
		if !(c >= 16) {
			goto end48aee05b87c41289bd387dd2e1b75b33
		}
		v.Op = OpConst64
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = 0
		return true
	}
	goto end48aee05b87c41289bd387dd2e1b75b33
end48aee05b87c41289bd387dd2e1b75b33:
	;
	// match: (Rsh16Ux32 x (Const32 [c]))
	// cond: c == 0
	// result: x
	{
		x := v.Args[0]
		if v.Args[1].Op != OpConst32 {
			goto enda5a4b1258a6b254a1c84f249be98ff99
		}
		c := v.Args[1].AuxInt
		if !(c == 0) {
			goto enda5a4b1258a6b254a1c84f249be98ff99
		}
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = x.Type
		v.AddArg(x)
		return true
	}
	goto enda5a4b1258a6b254a1c84f249be98ff99
enda5a4b1258a6b254a1c84f249be98ff99:
	;
	// match: (Rsh16Ux32 <t> (Rsh16Ux64 x (Const64 [c])) (Const32 [d]))
	// cond:
	// result: (Rsh16Ux32 x  (Const32 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh16Ux64 {
			goto endf58ffd94c0b0bb01e7c3095b0b7d0d1e
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst64 {
			goto endf58ffd94c0b0bb01e7c3095b0b7d0d1e
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst32 {
			goto endf58ffd94c0b0bb01e7c3095b0b7d0d1e
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh16Ux32
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst32, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto endf58ffd94c0b0bb01e7c3095b0b7d0d1e
endf58ffd94c0b0bb01e7c3095b0b7d0d1e:
	;
	// match: (Rsh16Ux32 <t> (Rsh16Ux32 x (Const32 [c])) (Const32 [d]))
	// cond:
	// result: (Rsh16Ux32 x  (Const32 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh16Ux32 {
			goto end8c3c326afdd6bb266e3165d17893a860
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst32 {
			goto end8c3c326afdd6bb266e3165d17893a860
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst32 {
			goto end8c3c326afdd6bb266e3165d17893a860
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh16Ux32
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst32, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end8c3c326afdd6bb266e3165d17893a860
end8c3c326afdd6bb266e3165d17893a860:
	;
	// match: (Rsh16Ux32 <t> (Rsh16Ux16 x (Const16 [c])) (Const32 [d]))
	// cond:
	// result: (Rsh16Ux32 x  (Const32 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh16Ux16 {
			goto endd1ac657ed5a1aabb74508bbd904a22d9
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst16 {
			goto endd1ac657ed5a1aabb74508bbd904a22d9
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst32 {
			goto endd1ac657ed5a1aabb74508bbd904a22d9
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh16Ux32
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst32, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto endd1ac657ed5a1aabb74508bbd904a22d9
endd1ac657ed5a1aabb74508bbd904a22d9:
	;
	// match: (Rsh16Ux32 <t> (Rsh16Ux8 x (Const8 [c])) (Const32 [d]))
	// cond:
	// result: (Rsh16Ux32 x  (Const32 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh16Ux8 {
			goto end93d0ec2bbd34dcc1b0a27fc9482ec67b
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst8 {
			goto end93d0ec2bbd34dcc1b0a27fc9482ec67b
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst32 {
			goto end93d0ec2bbd34dcc1b0a27fc9482ec67b
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh16Ux32
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst32, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end93d0ec2bbd34dcc1b0a27fc9482ec67b
end93d0ec2bbd34dcc1b0a27fc9482ec67b:
	;
	return false
}
func rewriteValuegeneric_OpRsh16Ux64(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Rsh16Ux64 _ (Const64 [c]))
	// cond: c >= 16
	// result: (Const64 [0])
	{
		if v.Args[1].Op != OpConst64 {
			goto enda662d03ba70df0e54e8af001a657d643
		}
		c := v.Args[1].AuxInt
		if !(c >= 16) {
			goto enda662d03ba70df0e54e8af001a657d643
		}
		v.Op = OpConst64
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = 0
		return true
	}
	goto enda662d03ba70df0e54e8af001a657d643
enda662d03ba70df0e54e8af001a657d643:
	;
	// match: (Rsh16Ux64 x (Const64 [0]))
	// cond:
	// result: x
	{
		x := v.Args[0]
		if v.Args[1].Op != OpConst64 {
			goto end752d1b5a60f87afa7e40febbf1bce309
		}
		if v.Args[1].AuxInt != 0 {
			goto end752d1b5a60f87afa7e40febbf1bce309
		}
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = x.Type
		v.AddArg(x)
		return true
	}
	goto end752d1b5a60f87afa7e40febbf1bce309
end752d1b5a60f87afa7e40febbf1bce309:
	;
	// match: (Rsh16Ux64 <t> (Rsh16Ux64 x (Const64 [c])) (Const64 [d]))
	// cond:
	// result: (Rsh16Ux64 x  (Const64 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh16Ux64 {
			goto enda20b7cb52afa499d87e618b455b1cb6b
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst64 {
			goto enda20b7cb52afa499d87e618b455b1cb6b
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst64 {
			goto enda20b7cb52afa499d87e618b455b1cb6b
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh16Ux64
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst64, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto enda20b7cb52afa499d87e618b455b1cb6b
enda20b7cb52afa499d87e618b455b1cb6b:
	;
	// match: (Rsh16Ux64 <t> (Rsh16Ux32 x (Const32 [c])) (Const64 [d]))
	// cond:
	// result: (Rsh16Ux64 x  (Const64 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh16Ux32 {
			goto endebe89dd8d8994aee2ba32f7cbce8e702
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst32 {
			goto endebe89dd8d8994aee2ba32f7cbce8e702
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst64 {
			goto endebe89dd8d8994aee2ba32f7cbce8e702
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh16Ux64
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst64, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto endebe89dd8d8994aee2ba32f7cbce8e702
endebe89dd8d8994aee2ba32f7cbce8e702:
	;
	// match: (Rsh16Ux64 <t> (Rsh16Ux16 x (Const16 [c])) (Const64 [d]))
	// cond:
	// result: (Rsh16Ux64 x  (Const64 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh16Ux16 {
			goto end1ac584e5fd7dc7c72267155c08ff75c1
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst16 {
			goto end1ac584e5fd7dc7c72267155c08ff75c1
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst64 {
			goto end1ac584e5fd7dc7c72267155c08ff75c1
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh16Ux64
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst64, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end1ac584e5fd7dc7c72267155c08ff75c1
end1ac584e5fd7dc7c72267155c08ff75c1:
	;
	// match: (Rsh16Ux64 <t> (Rsh16Ux8 x (Const8 [c])) (Const64 [d]))
	// cond:
	// result: (Rsh16Ux64 x  (Const64 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh16Ux8 {
			goto endb3f194421844d6f0894c2cabd1963b08
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst8 {
			goto endb3f194421844d6f0894c2cabd1963b08
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst64 {
			goto endb3f194421844d6f0894c2cabd1963b08
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh16Ux64
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst64, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto endb3f194421844d6f0894c2cabd1963b08
endb3f194421844d6f0894c2cabd1963b08:
	;
	return false
}
func rewriteValuegeneric_OpRsh16Ux8(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Rsh16Ux8 x (Const8 [c]))
	// cond: c == 0
	// result: x
	{
		x := v.Args[0]
		if v.Args[1].Op != OpConst8 {
			goto end038492720d4979ff501493df6648e6e8
		}
		c := v.Args[1].AuxInt
		if !(c == 0) {
			goto end038492720d4979ff501493df6648e6e8
		}
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = x.Type
		v.AddArg(x)
		return true
	}
	goto end038492720d4979ff501493df6648e6e8
end038492720d4979ff501493df6648e6e8:
	;
	// match: (Rsh16Ux8 <t> (Rsh16Ux64 x (Const64 [c])) (Const8 [d]))
	// cond:
	// result: (Rsh16Ux8 x  (Const8 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh16Ux64 {
			goto end6eb3e1040dbc9913c54373437a3ebace
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst64 {
			goto end6eb3e1040dbc9913c54373437a3ebace
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst8 {
			goto end6eb3e1040dbc9913c54373437a3ebace
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh16Ux8
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst8, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end6eb3e1040dbc9913c54373437a3ebace
end6eb3e1040dbc9913c54373437a3ebace:
	;
	// match: (Rsh16Ux8 <t> (Rsh16Ux32 x (Const32 [c])) (Const8 [d]))
	// cond:
	// result: (Rsh16Ux8 x  (Const8 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh16Ux32 {
			goto end13f0bb02cd1430b3942f0d05e68e3b82
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst32 {
			goto end13f0bb02cd1430b3942f0d05e68e3b82
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst8 {
			goto end13f0bb02cd1430b3942f0d05e68e3b82
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh16Ux8
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst8, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end13f0bb02cd1430b3942f0d05e68e3b82
end13f0bb02cd1430b3942f0d05e68e3b82:
	;
	// match: (Rsh16Ux8 <t> (Rsh16Ux16 x (Const16 [c])) (Const8 [d]))
	// cond:
	// result: (Rsh16Ux8 x  (Const8 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh16Ux16 {
			goto end22b240ea9f4aec4c4c8b640692858a0f
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst16 {
			goto end22b240ea9f4aec4c4c8b640692858a0f
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst8 {
			goto end22b240ea9f4aec4c4c8b640692858a0f
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh16Ux8
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst8, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end22b240ea9f4aec4c4c8b640692858a0f
end22b240ea9f4aec4c4c8b640692858a0f:
	;
	// match: (Rsh16Ux8 <t> (Rsh16Ux8 x (Const8 [c])) (Const8 [d]))
	// cond:
	// result: (Rsh16Ux8 x  (Const8 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh16Ux8 {
			goto endd0507dfc4b68fc13fe2cfac5ffb0b628
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst8 {
			goto endd0507dfc4b68fc13fe2cfac5ffb0b628
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst8 {
			goto endd0507dfc4b68fc13fe2cfac5ffb0b628
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh16Ux8
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst8, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto endd0507dfc4b68fc13fe2cfac5ffb0b628
endd0507dfc4b68fc13fe2cfac5ffb0b628:
	;
	return false
}
func rewriteValuegeneric_OpRsh16x16(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Rsh16x16 _ (Const16 [c]))
	// cond: c >= 16
	// result: (Const64 [0])
	{
		if v.Args[1].Op != OpConst16 {
			goto end386826fd84deaae9ac23c50272969718
		}
		c := v.Args[1].AuxInt
		if !(c >= 16) {
			goto end386826fd84deaae9ac23c50272969718
		}
		v.Op = OpConst64
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = 0
		return true
	}
	goto end386826fd84deaae9ac23c50272969718
end386826fd84deaae9ac23c50272969718:
	;
	// match: (Rsh16x16 x (Const16 [c]))
	// cond: c == 0
	// result: x
	{
		x := v.Args[0]
		if v.Args[1].Op != OpConst16 {
			goto end162cfa24c77669765b148575f063908f
		}
		c := v.Args[1].AuxInt
		if !(c == 0) {
			goto end162cfa24c77669765b148575f063908f
		}
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = x.Type
		v.AddArg(x)
		return true
	}
	goto end162cfa24c77669765b148575f063908f
end162cfa24c77669765b148575f063908f:
	;
	// match: (Rsh16x16 <t> (Rsh16x64 x (Const64 [c])) (Const16 [d]))
	// cond:
	// result: (Rsh16x16 x  (Const16 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh16x64 {
			goto end4081957f0b54bfbef220f61595a6bd41
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst64 {
			goto end4081957f0b54bfbef220f61595a6bd41
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst16 {
			goto end4081957f0b54bfbef220f61595a6bd41
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh16x16
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst16, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end4081957f0b54bfbef220f61595a6bd41
end4081957f0b54bfbef220f61595a6bd41:
	;
	// match: (Rsh16x16 <t> (Rsh16x32 x (Const32 [c])) (Const16 [d]))
	// cond:
	// result: (Rsh16x16 x  (Const16 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh16x32 {
			goto endba327c23e1f09d3a20591c8bb901de61
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst32 {
			goto endba327c23e1f09d3a20591c8bb901de61
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst16 {
			goto endba327c23e1f09d3a20591c8bb901de61
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh16x16
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst16, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto endba327c23e1f09d3a20591c8bb901de61
endba327c23e1f09d3a20591c8bb901de61:
	;
	// match: (Rsh16x16 <t> (Rsh16x16 x (Const16 [c])) (Const16 [d]))
	// cond:
	// result: (Rsh16x16 x  (Const16 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh16x16 {
			goto end5455cd713a07277e7dddaefdf29ec7f3
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst16 {
			goto end5455cd713a07277e7dddaefdf29ec7f3
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst16 {
			goto end5455cd713a07277e7dddaefdf29ec7f3
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh16x16
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst16, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end5455cd713a07277e7dddaefdf29ec7f3
end5455cd713a07277e7dddaefdf29ec7f3:
	;
	// match: (Rsh16x16 <t> (Rsh16x8 x (Const8 [c])) (Const16 [d]))
	// cond:
	// result: (Rsh16x16 x  (Const16 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh16x8 {
			goto enda2a30008764a727747c4424150588886
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst8 {
			goto enda2a30008764a727747c4424150588886
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst16 {
			goto enda2a30008764a727747c4424150588886
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh16x16
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst16, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto enda2a30008764a727747c4424150588886
enda2a30008764a727747c4424150588886:
	;
	return false
}
func rewriteValuegeneric_OpRsh16x32(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Rsh16x32 _ (Const32 [c]))
	// cond: c >= 16
	// result: (Const64 [0])
	{
		if v.Args[1].Op != OpConst32 {
			goto end4e03b7cd0dafe79e9d2e7ef9dc6849ee
		}
		c := v.Args[1].AuxInt
		if !(c >= 16) {
			goto end4e03b7cd0dafe79e9d2e7ef9dc6849ee
		}
		v.Op = OpConst64
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = 0
		return true
	}
	goto end4e03b7cd0dafe79e9d2e7ef9dc6849ee
end4e03b7cd0dafe79e9d2e7ef9dc6849ee:
	;
	// match: (Rsh16x32 x (Const32 [c]))
	// cond: c == 0
	// result: x
	{
		x := v.Args[0]
		if v.Args[1].Op != OpConst32 {
			goto end691c588a134cc152d7a2683ab288d29c
		}
		c := v.Args[1].AuxInt
		if !(c == 0) {
			goto end691c588a134cc152d7a2683ab288d29c
		}
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = x.Type
		v.AddArg(x)
		return true
	}
	goto end691c588a134cc152d7a2683ab288d29c
end691c588a134cc152d7a2683ab288d29c:
	;
	// match: (Rsh16x32 <t> (Rsh16x64 x (Const64 [c])) (Const32 [d]))
	// cond:
	// result: (Rsh16x32 x  (Const32 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh16x64 {
			goto end737171a48af0dc7b3438fb431fcea50a
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst64 {
			goto end737171a48af0dc7b3438fb431fcea50a
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst32 {
			goto end737171a48af0dc7b3438fb431fcea50a
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh16x32
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst32, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end737171a48af0dc7b3438fb431fcea50a
end737171a48af0dc7b3438fb431fcea50a:
	;
	// match: (Rsh16x32 <t> (Rsh16x32 x (Const32 [c])) (Const32 [d]))
	// cond:
	// result: (Rsh16x32 x  (Const32 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh16x32 {
			goto end1ee5946263c853935ffb24cfd2f9dc4c
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst32 {
			goto end1ee5946263c853935ffb24cfd2f9dc4c
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst32 {
			goto end1ee5946263c853935ffb24cfd2f9dc4c
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh16x32
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst32, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end1ee5946263c853935ffb24cfd2f9dc4c
end1ee5946263c853935ffb24cfd2f9dc4c:
	;
	// match: (Rsh16x32 <t> (Rsh16x16 x (Const16 [c])) (Const32 [d]))
	// cond:
	// result: (Rsh16x32 x  (Const32 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh16x16 {
			goto enda6b6fe215bd5c059b5d60f30e3455bc6
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst16 {
			goto enda6b6fe215bd5c059b5d60f30e3455bc6
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst32 {
			goto enda6b6fe215bd5c059b5d60f30e3455bc6
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh16x32
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst32, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto enda6b6fe215bd5c059b5d60f30e3455bc6
enda6b6fe215bd5c059b5d60f30e3455bc6:
	;
	// match: (Rsh16x32 <t> (Rsh16x8 x (Const8 [c])) (Const32 [d]))
	// cond:
	// result: (Rsh16x32 x  (Const32 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh16x8 {
			goto endbe58f051449069c74dda0690c99dcb23
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst8 {
			goto endbe58f051449069c74dda0690c99dcb23
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst32 {
			goto endbe58f051449069c74dda0690c99dcb23
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh16x32
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst32, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto endbe58f051449069c74dda0690c99dcb23
endbe58f051449069c74dda0690c99dcb23:
	;
	return false
}
func rewriteValuegeneric_OpRsh16x64(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Rsh16x64 _ (Const64 [c]))
	// cond: c >= 16
	// result: (Const64 [0])
	{
		if v.Args[1].Op != OpConst64 {
			goto end9d7fa5b167c5c5ad7be984f835fb49dd
		}
		c := v.Args[1].AuxInt
		if !(c >= 16) {
			goto end9d7fa5b167c5c5ad7be984f835fb49dd
		}
		v.Op = OpConst64
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = 0
		return true
	}
	goto end9d7fa5b167c5c5ad7be984f835fb49dd
end9d7fa5b167c5c5ad7be984f835fb49dd:
	;
	// match: (Rsh16x64 x (Const64 [0]))
	// cond:
	// result: x
	{
		x := v.Args[0]
		if v.Args[1].Op != OpConst64 {
			goto end4b0ee43fcf54da5195e05c8cee0bf14e
		}
		if v.Args[1].AuxInt != 0 {
			goto end4b0ee43fcf54da5195e05c8cee0bf14e
		}
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = x.Type
		v.AddArg(x)
		return true
	}
	goto end4b0ee43fcf54da5195e05c8cee0bf14e
end4b0ee43fcf54da5195e05c8cee0bf14e:
	;
	// match: (Rsh16x64 <t> (Rsh16x64 x (Const64 [c])) (Const64 [d]))
	// cond:
	// result: (Rsh16x64 x  (Const64 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh16x64 {
			goto enddcbfc0466130ffcb63a97c87f95bb2fa
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst64 {
			goto enddcbfc0466130ffcb63a97c87f95bb2fa
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst64 {
			goto enddcbfc0466130ffcb63a97c87f95bb2fa
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh16x64
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst64, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto enddcbfc0466130ffcb63a97c87f95bb2fa
enddcbfc0466130ffcb63a97c87f95bb2fa:
	;
	// match: (Rsh16x64 <t> (Rsh16x32 x (Const32 [c])) (Const64 [d]))
	// cond:
	// result: (Rsh16x64 x  (Const64 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh16x32 {
			goto end0df7fe690e73e34ba537225dfa81edc0
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst32 {
			goto end0df7fe690e73e34ba537225dfa81edc0
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst64 {
			goto end0df7fe690e73e34ba537225dfa81edc0
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh16x64
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst64, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end0df7fe690e73e34ba537225dfa81edc0
end0df7fe690e73e34ba537225dfa81edc0:
	;
	// match: (Rsh16x64 <t> (Rsh16x16 x (Const16 [c])) (Const64 [d]))
	// cond:
	// result: (Rsh16x64 x  (Const64 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh16x16 {
			goto enda43345f55e471b477ec083e0710e494b
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst16 {
			goto enda43345f55e471b477ec083e0710e494b
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst64 {
			goto enda43345f55e471b477ec083e0710e494b
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh16x64
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst64, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto enda43345f55e471b477ec083e0710e494b
enda43345f55e471b477ec083e0710e494b:
	;
	// match: (Rsh16x64 <t> (Rsh16x8 x (Const8 [c])) (Const64 [d]))
	// cond:
	// result: (Rsh16x64 x  (Const64 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh16x8 {
			goto endacdad696f4a71018b02ae9c7cb56f4c7
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst8 {
			goto endacdad696f4a71018b02ae9c7cb56f4c7
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst64 {
			goto endacdad696f4a71018b02ae9c7cb56f4c7
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh16x64
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst64, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto endacdad696f4a71018b02ae9c7cb56f4c7
endacdad696f4a71018b02ae9c7cb56f4c7:
	;
	return false
}
func rewriteValuegeneric_OpRsh16x8(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Rsh16x8 x (Const8 [c]))
	// cond: c == 0
	// result: x
	{
		x := v.Args[0]
		if v.Args[1].Op != OpConst8 {
			goto endfe0515204d88469d6a3c43cf1a23458c
		}
		c := v.Args[1].AuxInt
		if !(c == 0) {
			goto endfe0515204d88469d6a3c43cf1a23458c
		}
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = x.Type
		v.AddArg(x)
		return true
	}
	goto endfe0515204d88469d6a3c43cf1a23458c
endfe0515204d88469d6a3c43cf1a23458c:
	;
	// match: (Rsh16x8 <t> (Rsh16x64 x (Const64 [c])) (Const8 [d]))
	// cond:
	// result: (Rsh16x8 x  (Const8 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh16x64 {
			goto end9ff0818e5dbe6531a6ca81d94f674a4f
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst64 {
			goto end9ff0818e5dbe6531a6ca81d94f674a4f
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst8 {
			goto end9ff0818e5dbe6531a6ca81d94f674a4f
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh16x8
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst8, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end9ff0818e5dbe6531a6ca81d94f674a4f
end9ff0818e5dbe6531a6ca81d94f674a4f:
	;
	// match: (Rsh16x8 <t> (Rsh16x32 x (Const32 [c])) (Const8 [d]))
	// cond:
	// result: (Rsh16x8 x  (Const8 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh16x32 {
			goto endd781deeead5119ec74f046ebc71f0e6f
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst32 {
			goto endd781deeead5119ec74f046ebc71f0e6f
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst8 {
			goto endd781deeead5119ec74f046ebc71f0e6f
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh16x8
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst8, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto endd781deeead5119ec74f046ebc71f0e6f
endd781deeead5119ec74f046ebc71f0e6f:
	;
	// match: (Rsh16x8 <t> (Rsh16x16 x (Const16 [c])) (Const8 [d]))
	// cond:
	// result: (Rsh16x8 x  (Const8 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh16x16 {
			goto enddb5553e81bf11b1641b4ba76e7a21122
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst16 {
			goto enddb5553e81bf11b1641b4ba76e7a21122
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst8 {
			goto enddb5553e81bf11b1641b4ba76e7a21122
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh16x8
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst8, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto enddb5553e81bf11b1641b4ba76e7a21122
enddb5553e81bf11b1641b4ba76e7a21122:
	;
	// match: (Rsh16x8 <t> (Rsh16x8 x (Const8 [c])) (Const8 [d]))
	// cond:
	// result: (Rsh16x8 x  (Const8 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh16x8 {
			goto end66a880421a437ac833d2037f2f2c7e4a
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst8 {
			goto end66a880421a437ac833d2037f2f2c7e4a
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst8 {
			goto end66a880421a437ac833d2037f2f2c7e4a
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh16x8
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst8, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end66a880421a437ac833d2037f2f2c7e4a
end66a880421a437ac833d2037f2f2c7e4a:
	;
	return false
}
func rewriteValuegeneric_OpRsh32Ux16(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Rsh32Ux16 x (Const16 [c]))
	// cond: c == 0
	// result: x
	{
		x := v.Args[0]
		if v.Args[1].Op != OpConst16 {
			goto end2720a6d49eb6178bc04ce5029ee3ac94
		}
		c := v.Args[1].AuxInt
		if !(c == 0) {
			goto end2720a6d49eb6178bc04ce5029ee3ac94
		}
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = x.Type
		v.AddArg(x)
		return true
	}
	goto end2720a6d49eb6178bc04ce5029ee3ac94
end2720a6d49eb6178bc04ce5029ee3ac94:
	;
	// match: (Rsh32Ux16 <t> (Rsh32Ux64 x (Const64 [c])) (Const16 [d]))
	// cond:
	// result: (Rsh32Ux16 x  (Const16 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh32Ux64 {
			goto endefbf237283d43c8b8520f7495143c521
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst64 {
			goto endefbf237283d43c8b8520f7495143c521
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst16 {
			goto endefbf237283d43c8b8520f7495143c521
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh32Ux16
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst16, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto endefbf237283d43c8b8520f7495143c521
endefbf237283d43c8b8520f7495143c521:
	;
	// match: (Rsh32Ux16 <t> (Rsh32Ux32 x (Const32 [c])) (Const16 [d]))
	// cond:
	// result: (Rsh32Ux16 x  (Const16 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh32Ux32 {
			goto end9dec9654402b47af5ab4b5ef96e272bf
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst32 {
			goto end9dec9654402b47af5ab4b5ef96e272bf
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst16 {
			goto end9dec9654402b47af5ab4b5ef96e272bf
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh32Ux16
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst16, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end9dec9654402b47af5ab4b5ef96e272bf
end9dec9654402b47af5ab4b5ef96e272bf:
	;
	// match: (Rsh32Ux16 <t> (Rsh32Ux16 x (Const16 [c])) (Const16 [d]))
	// cond:
	// result: (Rsh32Ux16 x  (Const16 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh32Ux16 {
			goto endcaf5345d6268de583ca2dd0b495c5910
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst16 {
			goto endcaf5345d6268de583ca2dd0b495c5910
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst16 {
			goto endcaf5345d6268de583ca2dd0b495c5910
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh32Ux16
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst16, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto endcaf5345d6268de583ca2dd0b495c5910
endcaf5345d6268de583ca2dd0b495c5910:
	;
	// match: (Rsh32Ux16 <t> (Rsh32Ux8 x (Const8 [c])) (Const16 [d]))
	// cond:
	// result: (Rsh32Ux16 x  (Const16 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh32Ux8 {
			goto ende21fcc3efa5c295a8b9201599f5b1892
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst8 {
			goto ende21fcc3efa5c295a8b9201599f5b1892
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst16 {
			goto ende21fcc3efa5c295a8b9201599f5b1892
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh32Ux16
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst16, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto ende21fcc3efa5c295a8b9201599f5b1892
ende21fcc3efa5c295a8b9201599f5b1892:
	;
	return false
}
func rewriteValuegeneric_OpRsh32Ux32(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Rsh32Ux32 _ (Const32 [c]))
	// cond: c >= 32
	// result: (Const64 [0])
	{
		if v.Args[1].Op != OpConst32 {
			goto end70e91e49a7bbf5f1184932f866714ed4
		}
		c := v.Args[1].AuxInt
		if !(c >= 32) {
			goto end70e91e49a7bbf5f1184932f866714ed4
		}
		v.Op = OpConst64
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = 0
		return true
	}
	goto end70e91e49a7bbf5f1184932f866714ed4
end70e91e49a7bbf5f1184932f866714ed4:
	;
	// match: (Rsh32Ux32 x (Const32 [c]))
	// cond: c == 0
	// result: x
	{
		x := v.Args[0]
		if v.Args[1].Op != OpConst32 {
			goto end4d7cbc444bfb9644a524c9d29b5ab85d
		}
		c := v.Args[1].AuxInt
		if !(c == 0) {
			goto end4d7cbc444bfb9644a524c9d29b5ab85d
		}
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = x.Type
		v.AddArg(x)
		return true
	}
	goto end4d7cbc444bfb9644a524c9d29b5ab85d
end4d7cbc444bfb9644a524c9d29b5ab85d:
	;
	// match: (Rsh32Ux32 <t> (Rsh32Ux64 x (Const64 [c])) (Const32 [d]))
	// cond:
	// result: (Rsh32Ux32 x  (Const32 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh32Ux64 {
			goto endd8da9bc7061f80f9a3f95489ee825417
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst64 {
			goto endd8da9bc7061f80f9a3f95489ee825417
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst32 {
			goto endd8da9bc7061f80f9a3f95489ee825417
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh32Ux32
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst32, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto endd8da9bc7061f80f9a3f95489ee825417
endd8da9bc7061f80f9a3f95489ee825417:
	;
	// match: (Rsh32Ux32 <t> (Rsh32Ux32 x (Const32 [c])) (Const32 [d]))
	// cond:
	// result: (Rsh32Ux32 x  (Const32 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh32Ux32 {
			goto end9c3fb2d2dac9dd4cdde4a39ee7b513bb
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst32 {
			goto end9c3fb2d2dac9dd4cdde4a39ee7b513bb
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst32 {
			goto end9c3fb2d2dac9dd4cdde4a39ee7b513bb
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh32Ux32
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst32, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end9c3fb2d2dac9dd4cdde4a39ee7b513bb
end9c3fb2d2dac9dd4cdde4a39ee7b513bb:
	;
	// match: (Rsh32Ux32 <t> (Rsh32Ux16 x (Const16 [c])) (Const32 [d]))
	// cond:
	// result: (Rsh32Ux32 x  (Const32 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh32Ux16 {
			goto end8673f19b877861306a53dbcbddd3b82e
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst16 {
			goto end8673f19b877861306a53dbcbddd3b82e
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst32 {
			goto end8673f19b877861306a53dbcbddd3b82e
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh32Ux32
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst32, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end8673f19b877861306a53dbcbddd3b82e
end8673f19b877861306a53dbcbddd3b82e:
	;
	// match: (Rsh32Ux32 <t> (Rsh32Ux8 x (Const8 [c])) (Const32 [d]))
	// cond:
	// result: (Rsh32Ux32 x  (Const32 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh32Ux8 {
			goto end636cf4cede809a9f51dbacf98b463378
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst8 {
			goto end636cf4cede809a9f51dbacf98b463378
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst32 {
			goto end636cf4cede809a9f51dbacf98b463378
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh32Ux32
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst32, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end636cf4cede809a9f51dbacf98b463378
end636cf4cede809a9f51dbacf98b463378:
	;
	return false
}
func rewriteValuegeneric_OpRsh32Ux64(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Rsh32Ux64 _ (Const64 [c]))
	// cond: c >= 32
	// result: (Const64 [0])
	{
		if v.Args[1].Op != OpConst64 {
			goto end54a298f7e6a63275f8e8e9d677b2de6b
		}
		c := v.Args[1].AuxInt
		if !(c >= 32) {
			goto end54a298f7e6a63275f8e8e9d677b2de6b
		}
		v.Op = OpConst64
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = 0
		return true
	}
	goto end54a298f7e6a63275f8e8e9d677b2de6b
end54a298f7e6a63275f8e8e9d677b2de6b:
	;
	// match: (Rsh32Ux64 x (Const64 [0]))
	// cond:
	// result: x
	{
		x := v.Args[0]
		if v.Args[1].Op != OpConst64 {
			goto end162e4e182a665d4e6f0d85fe131e7288
		}
		if v.Args[1].AuxInt != 0 {
			goto end162e4e182a665d4e6f0d85fe131e7288
		}
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = x.Type
		v.AddArg(x)
		return true
	}
	goto end162e4e182a665d4e6f0d85fe131e7288
end162e4e182a665d4e6f0d85fe131e7288:
	;
	// match: (Rsh32Ux64 <t> (Rsh32Ux64 x (Const64 [c])) (Const64 [d]))
	// cond:
	// result: (Rsh32Ux64 x  (Const64 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh32Ux64 {
			goto enda9ced650ecdcaf629d3d04ef8bf91261
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst64 {
			goto enda9ced650ecdcaf629d3d04ef8bf91261
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst64 {
			goto enda9ced650ecdcaf629d3d04ef8bf91261
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh32Ux64
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst64, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto enda9ced650ecdcaf629d3d04ef8bf91261
enda9ced650ecdcaf629d3d04ef8bf91261:
	;
	// match: (Rsh32Ux64 <t> (Rsh32Ux32 x (Const32 [c])) (Const64 [d]))
	// cond:
	// result: (Rsh32Ux64 x  (Const64 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh32Ux32 {
			goto end2e19dc114c0a8eedcc323f984fda94cd
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst32 {
			goto end2e19dc114c0a8eedcc323f984fda94cd
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst64 {
			goto end2e19dc114c0a8eedcc323f984fda94cd
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh32Ux64
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst64, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end2e19dc114c0a8eedcc323f984fda94cd
end2e19dc114c0a8eedcc323f984fda94cd:
	;
	// match: (Rsh32Ux64 <t> (Rsh32Ux16 x (Const16 [c])) (Const64 [d]))
	// cond:
	// result: (Rsh32Ux64 x  (Const64 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh32Ux16 {
			goto end2cc76f57383b4cce78c6138c67665e2d
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst16 {
			goto end2cc76f57383b4cce78c6138c67665e2d
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst64 {
			goto end2cc76f57383b4cce78c6138c67665e2d
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh32Ux64
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst64, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end2cc76f57383b4cce78c6138c67665e2d
end2cc76f57383b4cce78c6138c67665e2d:
	;
	// match: (Rsh32Ux64 <t> (Rsh32Ux8 x (Const8 [c])) (Const64 [d]))
	// cond:
	// result: (Rsh32Ux64 x  (Const64 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh32Ux8 {
			goto enda10c76968ba3ac7cf9fab5375d2170b5
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst8 {
			goto enda10c76968ba3ac7cf9fab5375d2170b5
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst64 {
			goto enda10c76968ba3ac7cf9fab5375d2170b5
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh32Ux64
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst64, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto enda10c76968ba3ac7cf9fab5375d2170b5
enda10c76968ba3ac7cf9fab5375d2170b5:
	;
	return false
}
func rewriteValuegeneric_OpRsh32Ux8(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Rsh32Ux8 x (Const8 [c]))
	// cond: c == 0
	// result: x
	{
		x := v.Args[0]
		if v.Args[1].Op != OpConst8 {
			goto end60d8f240a69e42ba9f5ad98c1d69d23a
		}
		c := v.Args[1].AuxInt
		if !(c == 0) {
			goto end60d8f240a69e42ba9f5ad98c1d69d23a
		}
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = x.Type
		v.AddArg(x)
		return true
	}
	goto end60d8f240a69e42ba9f5ad98c1d69d23a
end60d8f240a69e42ba9f5ad98c1d69d23a:
	;
	// match: (Rsh32Ux8 <t> (Rsh32Ux64 x (Const64 [c])) (Const8 [d]))
	// cond:
	// result: (Rsh32Ux8 x  (Const8 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh32Ux64 {
			goto end94ecbad5f2a53dcfbefa1f2df5bd3a4a
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst64 {
			goto end94ecbad5f2a53dcfbefa1f2df5bd3a4a
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst8 {
			goto end94ecbad5f2a53dcfbefa1f2df5bd3a4a
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh32Ux8
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst8, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end94ecbad5f2a53dcfbefa1f2df5bd3a4a
end94ecbad5f2a53dcfbefa1f2df5bd3a4a:
	;
	// match: (Rsh32Ux8 <t> (Rsh32Ux32 x (Const32 [c])) (Const8 [d]))
	// cond:
	// result: (Rsh32Ux8 x  (Const8 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh32Ux32 {
			goto end375f7b606af1982e7efb729e3de2ba04
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst32 {
			goto end375f7b606af1982e7efb729e3de2ba04
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst8 {
			goto end375f7b606af1982e7efb729e3de2ba04
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh32Ux8
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst8, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end375f7b606af1982e7efb729e3de2ba04
end375f7b606af1982e7efb729e3de2ba04:
	;
	// match: (Rsh32Ux8 <t> (Rsh32Ux16 x (Const16 [c])) (Const8 [d]))
	// cond:
	// result: (Rsh32Ux8 x  (Const8 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh32Ux16 {
			goto enddb0e790d580a4c631f8186630e71cfce
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst16 {
			goto enddb0e790d580a4c631f8186630e71cfce
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst8 {
			goto enddb0e790d580a4c631f8186630e71cfce
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh32Ux8
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst8, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto enddb0e790d580a4c631f8186630e71cfce
enddb0e790d580a4c631f8186630e71cfce:
	;
	// match: (Rsh32Ux8 <t> (Rsh32Ux8 x (Const8 [c])) (Const8 [d]))
	// cond:
	// result: (Rsh32Ux8 x  (Const8 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh32Ux8 {
			goto end71723359f26b8bbddae19ee93fcb00b9
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst8 {
			goto end71723359f26b8bbddae19ee93fcb00b9
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst8 {
			goto end71723359f26b8bbddae19ee93fcb00b9
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh32Ux8
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst8, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end71723359f26b8bbddae19ee93fcb00b9
end71723359f26b8bbddae19ee93fcb00b9:
	;
	return false
}
func rewriteValuegeneric_OpRsh32x16(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Rsh32x16 x (Const16 [c]))
	// cond: c == 0
	// result: x
	{
		x := v.Args[0]
		if v.Args[1].Op != OpConst16 {
			goto end642b11a481c2cf68c70a3cada99da56f
		}
		c := v.Args[1].AuxInt
		if !(c == 0) {
			goto end642b11a481c2cf68c70a3cada99da56f
		}
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = x.Type
		v.AddArg(x)
		return true
	}
	goto end642b11a481c2cf68c70a3cada99da56f
end642b11a481c2cf68c70a3cada99da56f:
	;
	// match: (Rsh32x16 <t> (Rsh32x64 x (Const64 [c])) (Const16 [d]))
	// cond:
	// result: (Rsh32x16 x  (Const16 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh32x64 {
			goto endce2b3eed5742d74db358a5b38dd1d931
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst64 {
			goto endce2b3eed5742d74db358a5b38dd1d931
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst16 {
			goto endce2b3eed5742d74db358a5b38dd1d931
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh32x16
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst16, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto endce2b3eed5742d74db358a5b38dd1d931
endce2b3eed5742d74db358a5b38dd1d931:
	;
	// match: (Rsh32x16 <t> (Rsh32x32 x (Const32 [c])) (Const16 [d]))
	// cond:
	// result: (Rsh32x16 x  (Const16 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh32x32 {
			goto end0d6e96f4bbe9c6a82caf0ea111a85af1
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst32 {
			goto end0d6e96f4bbe9c6a82caf0ea111a85af1
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst16 {
			goto end0d6e96f4bbe9c6a82caf0ea111a85af1
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh32x16
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst16, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end0d6e96f4bbe9c6a82caf0ea111a85af1
end0d6e96f4bbe9c6a82caf0ea111a85af1:
	;
	// match: (Rsh32x16 <t> (Rsh32x16 x (Const16 [c])) (Const16 [d]))
	// cond:
	// result: (Rsh32x16 x  (Const16 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh32x16 {
			goto end00c8162f3829fd63f40c1b743c0a06d9
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst16 {
			goto end00c8162f3829fd63f40c1b743c0a06d9
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst16 {
			goto end00c8162f3829fd63f40c1b743c0a06d9
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh32x16
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst16, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end00c8162f3829fd63f40c1b743c0a06d9
end00c8162f3829fd63f40c1b743c0a06d9:
	;
	// match: (Rsh32x16 <t> (Rsh32x8 x (Const8 [c])) (Const16 [d]))
	// cond:
	// result: (Rsh32x16 x  (Const16 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh32x8 {
			goto endba1293f13cee5b9a38248cc3a3be4735
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst8 {
			goto endba1293f13cee5b9a38248cc3a3be4735
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst16 {
			goto endba1293f13cee5b9a38248cc3a3be4735
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh32x16
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst16, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto endba1293f13cee5b9a38248cc3a3be4735
endba1293f13cee5b9a38248cc3a3be4735:
	;
	return false
}
func rewriteValuegeneric_OpRsh32x32(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Rsh32x32 _ (Const32 [c]))
	// cond: c >= 32
	// result: (Const64 [0])
	{
		if v.Args[1].Op != OpConst32 {
			goto end4a2df02837e1be2c12525cd695bbcf50
		}
		c := v.Args[1].AuxInt
		if !(c >= 32) {
			goto end4a2df02837e1be2c12525cd695bbcf50
		}
		v.Op = OpConst64
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = 0
		return true
	}
	goto end4a2df02837e1be2c12525cd695bbcf50
end4a2df02837e1be2c12525cd695bbcf50:
	;
	// match: (Rsh32x32 x (Const32 [c]))
	// cond: c == 0
	// result: x
	{
		x := v.Args[0]
		if v.Args[1].Op != OpConst32 {
			goto endb268432127e673fdcebd87dc16f47a5c
		}
		c := v.Args[1].AuxInt
		if !(c == 0) {
			goto endb268432127e673fdcebd87dc16f47a5c
		}
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = x.Type
		v.AddArg(x)
		return true
	}
	goto endb268432127e673fdcebd87dc16f47a5c
endb268432127e673fdcebd87dc16f47a5c:
	;
	// match: (Rsh32x32 <t> (Rsh32x64 x (Const64 [c])) (Const32 [d]))
	// cond:
	// result: (Rsh32x32 x  (Const32 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh32x64 {
			goto end229035615c72944c5dee07b8b348b006
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst64 {
			goto end229035615c72944c5dee07b8b348b006
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst32 {
			goto end229035615c72944c5dee07b8b348b006
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh32x32
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst32, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end229035615c72944c5dee07b8b348b006
end229035615c72944c5dee07b8b348b006:
	;
	// match: (Rsh32x32 <t> (Rsh32x32 x (Const32 [c])) (Const32 [d]))
	// cond:
	// result: (Rsh32x32 x  (Const32 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh32x32 {
			goto end5f3bc0a477988f32106728f80b41cde6
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst32 {
			goto end5f3bc0a477988f32106728f80b41cde6
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst32 {
			goto end5f3bc0a477988f32106728f80b41cde6
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh32x32
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst32, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end5f3bc0a477988f32106728f80b41cde6
end5f3bc0a477988f32106728f80b41cde6:
	;
	// match: (Rsh32x32 <t> (Rsh32x16 x (Const16 [c])) (Const32 [d]))
	// cond:
	// result: (Rsh32x32 x  (Const32 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh32x16 {
			goto endaf6c22ad958f268f7ecbc49c3fabc7b5
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst16 {
			goto endaf6c22ad958f268f7ecbc49c3fabc7b5
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst32 {
			goto endaf6c22ad958f268f7ecbc49c3fabc7b5
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh32x32
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst32, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto endaf6c22ad958f268f7ecbc49c3fabc7b5
endaf6c22ad958f268f7ecbc49c3fabc7b5:
	;
	// match: (Rsh32x32 <t> (Rsh32x8 x (Const8 [c])) (Const32 [d]))
	// cond:
	// result: (Rsh32x32 x  (Const32 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh32x8 {
			goto end2d6d60c333cc23a3fab3f0786d2173f9
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst8 {
			goto end2d6d60c333cc23a3fab3f0786d2173f9
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst32 {
			goto end2d6d60c333cc23a3fab3f0786d2173f9
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh32x32
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst32, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end2d6d60c333cc23a3fab3f0786d2173f9
end2d6d60c333cc23a3fab3f0786d2173f9:
	;
	return false
}
func rewriteValuegeneric_OpRsh32x64(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Rsh32x64 _ (Const64 [c]))
	// cond: c >= 32
	// result: (Const64 [0])
	{
		if v.Args[1].Op != OpConst64 {
			goto end8bf0e30447eed39bb89a23e19ed9b4f1
		}
		c := v.Args[1].AuxInt
		if !(c >= 32) {
			goto end8bf0e30447eed39bb89a23e19ed9b4f1
		}
		v.Op = OpConst64
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = 0
		return true
	}
	goto end8bf0e30447eed39bb89a23e19ed9b4f1
end8bf0e30447eed39bb89a23e19ed9b4f1:
	;
	// match: (Rsh32x64 x (Const64 [0]))
	// cond:
	// result: x
	{
		x := v.Args[0]
		if v.Args[1].Op != OpConst64 {
			goto endae5d1e90966d47f3df4d74c01bb28974
		}
		if v.Args[1].AuxInt != 0 {
			goto endae5d1e90966d47f3df4d74c01bb28974
		}
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = x.Type
		v.AddArg(x)
		return true
	}
	goto endae5d1e90966d47f3df4d74c01bb28974
endae5d1e90966d47f3df4d74c01bb28974:
	;
	// match: (Rsh32x64 <t> (Rsh32x64 x (Const64 [c])) (Const64 [d]))
	// cond:
	// result: (Rsh32x64 x  (Const64 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh32x64 {
			goto end7b79fc8d7e7b8ae35d8c401d3f25bf2c
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst64 {
			goto end7b79fc8d7e7b8ae35d8c401d3f25bf2c
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst64 {
			goto end7b79fc8d7e7b8ae35d8c401d3f25bf2c
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh32x64
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst64, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end7b79fc8d7e7b8ae35d8c401d3f25bf2c
end7b79fc8d7e7b8ae35d8c401d3f25bf2c:
	;
	// match: (Rsh32x64 <t> (Rsh32x32 x (Const32 [c])) (Const64 [d]))
	// cond:
	// result: (Rsh32x64 x  (Const64 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh32x32 {
			goto endaad4935ac37da4d6e27d6bed4897b6c4
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst32 {
			goto endaad4935ac37da4d6e27d6bed4897b6c4
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst64 {
			goto endaad4935ac37da4d6e27d6bed4897b6c4
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh32x64
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst64, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto endaad4935ac37da4d6e27d6bed4897b6c4
endaad4935ac37da4d6e27d6bed4897b6c4:
	;
	// match: (Rsh32x64 <t> (Rsh32x16 x (Const16 [c])) (Const64 [d]))
	// cond:
	// result: (Rsh32x64 x  (Const64 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh32x16 {
			goto end97cfda717496687dcf4f6334915ebb34
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst16 {
			goto end97cfda717496687dcf4f6334915ebb34
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst64 {
			goto end97cfda717496687dcf4f6334915ebb34
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh32x64
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst64, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end97cfda717496687dcf4f6334915ebb34
end97cfda717496687dcf4f6334915ebb34:
	;
	// match: (Rsh32x64 <t> (Rsh32x8 x (Const8 [c])) (Const64 [d]))
	// cond:
	// result: (Rsh32x64 x  (Const64 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh32x8 {
			goto endf80e16c046eab4a9e7c7659e476b36fa
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst8 {
			goto endf80e16c046eab4a9e7c7659e476b36fa
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst64 {
			goto endf80e16c046eab4a9e7c7659e476b36fa
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh32x64
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst64, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto endf80e16c046eab4a9e7c7659e476b36fa
endf80e16c046eab4a9e7c7659e476b36fa:
	;
	return false
}
func rewriteValuegeneric_OpRsh32x8(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Rsh32x8 x (Const8 [c]))
	// cond: c == 0
	// result: x
	{
		x := v.Args[0]
		if v.Args[1].Op != OpConst8 {
			goto end005d877a02f1f22eee16d9b3dc427151
		}
		c := v.Args[1].AuxInt
		if !(c == 0) {
			goto end005d877a02f1f22eee16d9b3dc427151
		}
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = x.Type
		v.AddArg(x)
		return true
	}
	goto end005d877a02f1f22eee16d9b3dc427151
end005d877a02f1f22eee16d9b3dc427151:
	;
	// match: (Rsh32x8 <t> (Rsh32x64 x (Const64 [c])) (Const8 [d]))
	// cond:
	// result: (Rsh32x8 x  (Const8 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh32x64 {
			goto end8be1fa17a7df16c9921783ed4ab53303
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst64 {
			goto end8be1fa17a7df16c9921783ed4ab53303
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst8 {
			goto end8be1fa17a7df16c9921783ed4ab53303
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh32x8
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst8, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end8be1fa17a7df16c9921783ed4ab53303
end8be1fa17a7df16c9921783ed4ab53303:
	;
	// match: (Rsh32x8 <t> (Rsh32x32 x (Const32 [c])) (Const8 [d]))
	// cond:
	// result: (Rsh32x8 x  (Const8 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh32x32 {
			goto end544b2f84f0510a725afc916d23203da3
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst32 {
			goto end544b2f84f0510a725afc916d23203da3
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst8 {
			goto end544b2f84f0510a725afc916d23203da3
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh32x8
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst8, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end544b2f84f0510a725afc916d23203da3
end544b2f84f0510a725afc916d23203da3:
	;
	// match: (Rsh32x8 <t> (Rsh32x16 x (Const16 [c])) (Const8 [d]))
	// cond:
	// result: (Rsh32x8 x  (Const8 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh32x16 {
			goto end118f461e222bccbf9750cfcd11bdd50f
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst16 {
			goto end118f461e222bccbf9750cfcd11bdd50f
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst8 {
			goto end118f461e222bccbf9750cfcd11bdd50f
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh32x8
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst8, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end118f461e222bccbf9750cfcd11bdd50f
end118f461e222bccbf9750cfcd11bdd50f:
	;
	// match: (Rsh32x8 <t> (Rsh32x8 x (Const8 [c])) (Const8 [d]))
	// cond:
	// result: (Rsh32x8 x  (Const8 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh32x8 {
			goto ende3616191596dac62440594942bb4947e
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst8 {
			goto ende3616191596dac62440594942bb4947e
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst8 {
			goto ende3616191596dac62440594942bb4947e
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh32x8
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst8, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto ende3616191596dac62440594942bb4947e
ende3616191596dac62440594942bb4947e:
	;
	return false
}
func rewriteValuegeneric_OpRsh64Ux16(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Rsh64Ux16 x (Const16 [c]))
	// cond: c == 0
	// result: x
	{
		x := v.Args[0]
		if v.Args[1].Op != OpConst16 {
			goto end6554a08521fe874e7b50c41a172f4fb9
		}
		c := v.Args[1].AuxInt
		if !(c == 0) {
			goto end6554a08521fe874e7b50c41a172f4fb9
		}
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = x.Type
		v.AddArg(x)
		return true
	}
	goto end6554a08521fe874e7b50c41a172f4fb9
end6554a08521fe874e7b50c41a172f4fb9:
	;
	// match: (Rsh64Ux16 <t> (Rsh64Ux64 x (Const64 [c])) (Const16 [d]))
	// cond:
	// result: (Rsh64Ux16 x  (Const16 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh64Ux64 {
			goto endc2e0a386446e9dd089c3464f243fccef
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst64 {
			goto endc2e0a386446e9dd089c3464f243fccef
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst16 {
			goto endc2e0a386446e9dd089c3464f243fccef
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh64Ux16
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst16, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto endc2e0a386446e9dd089c3464f243fccef
endc2e0a386446e9dd089c3464f243fccef:
	;
	// match: (Rsh64Ux16 <t> (Rsh64Ux32 x (Const32 [c])) (Const16 [d]))
	// cond:
	// result: (Rsh64Ux16 x  (Const16 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh64Ux32 {
			goto endad622af457c04c6b305b087edbc068df
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst32 {
			goto endad622af457c04c6b305b087edbc068df
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst16 {
			goto endad622af457c04c6b305b087edbc068df
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh64Ux16
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst16, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto endad622af457c04c6b305b087edbc068df
endad622af457c04c6b305b087edbc068df:
	;
	// match: (Rsh64Ux16 <t> (Rsh64Ux16 x (Const16 [c])) (Const16 [d]))
	// cond:
	// result: (Rsh64Ux16 x  (Const16 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh64Ux16 {
			goto end70e5e551b5ba1ac229e050a09ea49143
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst16 {
			goto end70e5e551b5ba1ac229e050a09ea49143
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst16 {
			goto end70e5e551b5ba1ac229e050a09ea49143
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh64Ux16
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst16, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end70e5e551b5ba1ac229e050a09ea49143
end70e5e551b5ba1ac229e050a09ea49143:
	;
	// match: (Rsh64Ux16 <t> (Rsh64Ux8 x (Const8 [c])) (Const16 [d]))
	// cond:
	// result: (Rsh64Ux16 x  (Const16 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh64Ux8 {
			goto end4c38bbf9dda12120238142f734331974
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst8 {
			goto end4c38bbf9dda12120238142f734331974
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst16 {
			goto end4c38bbf9dda12120238142f734331974
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh64Ux16
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst16, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end4c38bbf9dda12120238142f734331974
end4c38bbf9dda12120238142f734331974:
	;
	return false
}
func rewriteValuegeneric_OpRsh64Ux32(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Rsh64Ux32 x (Const32 [c]))
	// cond: c == 0
	// result: x
	{
		x := v.Args[0]
		if v.Args[1].Op != OpConst32 {
			goto end535378df1ab3f1c185e99fa17bfc1e2a
		}
		c := v.Args[1].AuxInt
		if !(c == 0) {
			goto end535378df1ab3f1c185e99fa17bfc1e2a
		}
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = x.Type
		v.AddArg(x)
		return true
	}
	goto end535378df1ab3f1c185e99fa17bfc1e2a
end535378df1ab3f1c185e99fa17bfc1e2a:
	;
	// match: (Rsh64Ux32 <t> (Rsh64Ux64 x (Const64 [c])) (Const32 [d]))
	// cond:
	// result: (Rsh64Ux32 x  (Const32 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh64Ux64 {
			goto end42eeea29ed782eac0d54dbf6cc9d8994
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst64 {
			goto end42eeea29ed782eac0d54dbf6cc9d8994
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst32 {
			goto end42eeea29ed782eac0d54dbf6cc9d8994
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh64Ux32
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst32, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end42eeea29ed782eac0d54dbf6cc9d8994
end42eeea29ed782eac0d54dbf6cc9d8994:
	;
	// match: (Rsh64Ux32 <t> (Rsh64Ux32 x (Const32 [c])) (Const32 [d]))
	// cond:
	// result: (Rsh64Ux32 x  (Const32 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh64Ux32 {
			goto enda2f5f5c757637604f3cdece0d0716d05
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst32 {
			goto enda2f5f5c757637604f3cdece0d0716d05
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst32 {
			goto enda2f5f5c757637604f3cdece0d0716d05
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh64Ux32
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst32, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto enda2f5f5c757637604f3cdece0d0716d05
enda2f5f5c757637604f3cdece0d0716d05:
	;
	// match: (Rsh64Ux32 <t> (Rsh64Ux16 x (Const16 [c])) (Const32 [d]))
	// cond:
	// result: (Rsh64Ux32 x  (Const32 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh64Ux16 {
			goto end765f9b43222865134f5e54e451158426
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst16 {
			goto end765f9b43222865134f5e54e451158426
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst32 {
			goto end765f9b43222865134f5e54e451158426
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh64Ux32
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst32, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end765f9b43222865134f5e54e451158426
end765f9b43222865134f5e54e451158426:
	;
	// match: (Rsh64Ux32 <t> (Rsh64Ux8 x (Const8 [c])) (Const32 [d]))
	// cond:
	// result: (Rsh64Ux32 x  (Const32 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh64Ux8 {
			goto end633cfdb6338c8652862292afb3fefc46
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst8 {
			goto end633cfdb6338c8652862292afb3fefc46
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst32 {
			goto end633cfdb6338c8652862292afb3fefc46
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh64Ux32
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst32, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end633cfdb6338c8652862292afb3fefc46
end633cfdb6338c8652862292afb3fefc46:
	;
	return false
}
func rewriteValuegeneric_OpRsh64Ux64(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Rsh64Ux64 _ (Const64 [c]))
	// cond: c >= 64
	// result: (Const64 [0])
	{
		if v.Args[1].Op != OpConst64 {
			goto endd4e333950f7c819e295d78c2924d459f
		}
		c := v.Args[1].AuxInt
		if !(c >= 64) {
			goto endd4e333950f7c819e295d78c2924d459f
		}
		v.Op = OpConst64
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = 0
		return true
	}
	goto endd4e333950f7c819e295d78c2924d459f
endd4e333950f7c819e295d78c2924d459f:
	;
	// match: (Rsh64Ux64 x (Const64 [0]))
	// cond:
	// result: x
	{
		x := v.Args[0]
		if v.Args[1].Op != OpConst64 {
			goto end5ad037b910698f2847df90177c23a6ac
		}
		if v.Args[1].AuxInt != 0 {
			goto end5ad037b910698f2847df90177c23a6ac
		}
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = x.Type
		v.AddArg(x)
		return true
	}
	goto end5ad037b910698f2847df90177c23a6ac
end5ad037b910698f2847df90177c23a6ac:
	;
	// match: (Rsh64Ux64 <t> (Rsh64Ux64 x (Const64 [c])) (Const64 [d]))
	// cond:
	// result: (Rsh64Ux64 x  (Const64 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh64Ux64 {
			goto enda2a046e4d21bc7e79ce52eb2dd7e5f2f
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst64 {
			goto enda2a046e4d21bc7e79ce52eb2dd7e5f2f
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst64 {
			goto enda2a046e4d21bc7e79ce52eb2dd7e5f2f
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh64Ux64
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst64, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto enda2a046e4d21bc7e79ce52eb2dd7e5f2f
enda2a046e4d21bc7e79ce52eb2dd7e5f2f:
	;
	// match: (Rsh64Ux64 <t> (Rsh64Ux32 x (Const32 [c])) (Const64 [d]))
	// cond:
	// result: (Rsh64Ux64 x  (Const64 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh64Ux32 {
			goto end7262961242445e087e0892f5de3f1991
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst32 {
			goto end7262961242445e087e0892f5de3f1991
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst64 {
			goto end7262961242445e087e0892f5de3f1991
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh64Ux64
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst64, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end7262961242445e087e0892f5de3f1991
end7262961242445e087e0892f5de3f1991:
	;
	// match: (Rsh64Ux64 <t> (Rsh64Ux16 x (Const16 [c])) (Const64 [d]))
	// cond:
	// result: (Rsh64Ux64 x  (Const64 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh64Ux16 {
			goto end2820c4344bac78dc2c6bc0ccd62b69d4
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst16 {
			goto end2820c4344bac78dc2c6bc0ccd62b69d4
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst64 {
			goto end2820c4344bac78dc2c6bc0ccd62b69d4
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh64Ux64
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst64, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end2820c4344bac78dc2c6bc0ccd62b69d4
end2820c4344bac78dc2c6bc0ccd62b69d4:
	;
	// match: (Rsh64Ux64 <t> (Rsh64Ux8 x (Const8 [c])) (Const64 [d]))
	// cond:
	// result: (Rsh64Ux64 x  (Const64 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh64Ux8 {
			goto end58a96c8e79c8aa211c225a41cb841d69
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst8 {
			goto end58a96c8e79c8aa211c225a41cb841d69
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst64 {
			goto end58a96c8e79c8aa211c225a41cb841d69
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh64Ux64
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst64, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end58a96c8e79c8aa211c225a41cb841d69
end58a96c8e79c8aa211c225a41cb841d69:
	;
	return false
}
func rewriteValuegeneric_OpRsh64Ux8(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Rsh64Ux8 x (Const8 [c]))
	// cond: c == 0
	// result: x
	{
		x := v.Args[0]
		if v.Args[1].Op != OpConst8 {
			goto enda1f1e7cbfe5530d0b71ccfc8bdc740e0
		}
		c := v.Args[1].AuxInt
		if !(c == 0) {
			goto enda1f1e7cbfe5530d0b71ccfc8bdc740e0
		}
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = x.Type
		v.AddArg(x)
		return true
	}
	goto enda1f1e7cbfe5530d0b71ccfc8bdc740e0
enda1f1e7cbfe5530d0b71ccfc8bdc740e0:
	;
	// match: (Rsh64Ux8 <t> (Rsh64Ux64 x (Const64 [c])) (Const8 [d]))
	// cond:
	// result: (Rsh64Ux8 x  (Const8 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh64Ux64 {
			goto endc77db6cf3079c4d034b6fdc1864169a2
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst64 {
			goto endc77db6cf3079c4d034b6fdc1864169a2
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst8 {
			goto endc77db6cf3079c4d034b6fdc1864169a2
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh64Ux8
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst8, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto endc77db6cf3079c4d034b6fdc1864169a2
endc77db6cf3079c4d034b6fdc1864169a2:
	;
	// match: (Rsh64Ux8 <t> (Rsh64Ux32 x (Const32 [c])) (Const8 [d]))
	// cond:
	// result: (Rsh64Ux8 x  (Const8 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh64Ux32 {
			goto end4e1149b4c7e109bd5f49f7767d513fa1
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst32 {
			goto end4e1149b4c7e109bd5f49f7767d513fa1
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst8 {
			goto end4e1149b4c7e109bd5f49f7767d513fa1
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh64Ux8
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst8, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end4e1149b4c7e109bd5f49f7767d513fa1
end4e1149b4c7e109bd5f49f7767d513fa1:
	;
	// match: (Rsh64Ux8 <t> (Rsh64Ux16 x (Const16 [c])) (Const8 [d]))
	// cond:
	// result: (Rsh64Ux8 x  (Const8 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh64Ux16 {
			goto end7f50d3fe80bf5529467da000e1147bfc
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst16 {
			goto end7f50d3fe80bf5529467da000e1147bfc
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst8 {
			goto end7f50d3fe80bf5529467da000e1147bfc
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh64Ux8
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst8, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end7f50d3fe80bf5529467da000e1147bfc
end7f50d3fe80bf5529467da000e1147bfc:
	;
	// match: (Rsh64Ux8 <t> (Rsh64Ux8 x (Const8 [c])) (Const8 [d]))
	// cond:
	// result: (Rsh64Ux8 x  (Const8 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh64Ux8 {
			goto endb7db5b44d1f19037dbcfe1f6764263e3
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst8 {
			goto endb7db5b44d1f19037dbcfe1f6764263e3
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst8 {
			goto endb7db5b44d1f19037dbcfe1f6764263e3
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh64Ux8
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst8, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto endb7db5b44d1f19037dbcfe1f6764263e3
endb7db5b44d1f19037dbcfe1f6764263e3:
	;
	return false
}
func rewriteValuegeneric_OpRsh64x16(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Rsh64x16 x (Const16 [c]))
	// cond: c == 0
	// result: x
	{
		x := v.Args[0]
		if v.Args[1].Op != OpConst16 {
			goto end5f666c0bf98638636d716e2762aaf5cf
		}
		c := v.Args[1].AuxInt
		if !(c == 0) {
			goto end5f666c0bf98638636d716e2762aaf5cf
		}
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = x.Type
		v.AddArg(x)
		return true
	}
	goto end5f666c0bf98638636d716e2762aaf5cf
end5f666c0bf98638636d716e2762aaf5cf:
	;
	// match: (Rsh64x16 <t> (Rsh64x64 x (Const64 [c])) (Const16 [d]))
	// cond:
	// result: (Rsh64x16 x  (Const16 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh64x64 {
			goto end4eee8777cc23b0597c3cc174c13502b9
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst64 {
			goto end4eee8777cc23b0597c3cc174c13502b9
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst16 {
			goto end4eee8777cc23b0597c3cc174c13502b9
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh64x16
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst16, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end4eee8777cc23b0597c3cc174c13502b9
end4eee8777cc23b0597c3cc174c13502b9:
	;
	// match: (Rsh64x16 <t> (Rsh64x32 x (Const32 [c])) (Const16 [d]))
	// cond:
	// result: (Rsh64x16 x  (Const16 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh64x32 {
			goto end07802bfc419783713144b798fe470d36
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst32 {
			goto end07802bfc419783713144b798fe470d36
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst16 {
			goto end07802bfc419783713144b798fe470d36
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh64x16
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst16, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end07802bfc419783713144b798fe470d36
end07802bfc419783713144b798fe470d36:
	;
	// match: (Rsh64x16 <t> (Rsh64x16 x (Const16 [c])) (Const16 [d]))
	// cond:
	// result: (Rsh64x16 x  (Const16 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh64x16 {
			goto end5526928b82c5fa66220bac7b708c9bb7
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst16 {
			goto end5526928b82c5fa66220bac7b708c9bb7
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst16 {
			goto end5526928b82c5fa66220bac7b708c9bb7
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh64x16
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst16, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end5526928b82c5fa66220bac7b708c9bb7
end5526928b82c5fa66220bac7b708c9bb7:
	;
	// match: (Rsh64x16 <t> (Rsh64x8 x (Const8 [c])) (Const16 [d]))
	// cond:
	// result: (Rsh64x16 x  (Const16 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh64x8 {
			goto endb399281bde3cc496f6e0ab945426df90
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst8 {
			goto endb399281bde3cc496f6e0ab945426df90
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst16 {
			goto endb399281bde3cc496f6e0ab945426df90
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh64x16
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst16, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto endb399281bde3cc496f6e0ab945426df90
endb399281bde3cc496f6e0ab945426df90:
	;
	return false
}
func rewriteValuegeneric_OpRsh64x32(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Rsh64x32 x (Const32 [c]))
	// cond: c == 0
	// result: x
	{
		x := v.Args[0]
		if v.Args[1].Op != OpConst32 {
			goto endb19e5c675969e0b79c5f4e78eb56c140
		}
		c := v.Args[1].AuxInt
		if !(c == 0) {
			goto endb19e5c675969e0b79c5f4e78eb56c140
		}
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = x.Type
		v.AddArg(x)
		return true
	}
	goto endb19e5c675969e0b79c5f4e78eb56c140
endb19e5c675969e0b79c5f4e78eb56c140:
	;
	// match: (Rsh64x32 <t> (Rsh64x64 x (Const64 [c])) (Const32 [d]))
	// cond:
	// result: (Rsh64x32 x  (Const32 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh64x64 {
			goto ende0d377f73e94d85327397bcb0e4be8c7
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst64 {
			goto ende0d377f73e94d85327397bcb0e4be8c7
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst32 {
			goto ende0d377f73e94d85327397bcb0e4be8c7
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh64x32
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst32, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto ende0d377f73e94d85327397bcb0e4be8c7
ende0d377f73e94d85327397bcb0e4be8c7:
	;
	// match: (Rsh64x32 <t> (Rsh64x32 x (Const32 [c])) (Const32 [d]))
	// cond:
	// result: (Rsh64x32 x  (Const32 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh64x32 {
			goto end6e47bad4f755d14c6887312a744a5355
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst32 {
			goto end6e47bad4f755d14c6887312a744a5355
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst32 {
			goto end6e47bad4f755d14c6887312a744a5355
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh64x32
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst32, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end6e47bad4f755d14c6887312a744a5355
end6e47bad4f755d14c6887312a744a5355:
	;
	// match: (Rsh64x32 <t> (Rsh64x16 x (Const16 [c])) (Const32 [d]))
	// cond:
	// result: (Rsh64x32 x  (Const32 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh64x16 {
			goto end9515d8604ddb720236314781ff1a6f51
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst16 {
			goto end9515d8604ddb720236314781ff1a6f51
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst32 {
			goto end9515d8604ddb720236314781ff1a6f51
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh64x32
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst32, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end9515d8604ddb720236314781ff1a6f51
end9515d8604ddb720236314781ff1a6f51:
	;
	// match: (Rsh64x32 <t> (Rsh64x8 x (Const8 [c])) (Const32 [d]))
	// cond:
	// result: (Rsh64x32 x  (Const32 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh64x8 {
			goto endaf5f1e04abdbbccef4e9802a562f7354
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst8 {
			goto endaf5f1e04abdbbccef4e9802a562f7354
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst32 {
			goto endaf5f1e04abdbbccef4e9802a562f7354
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh64x32
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst32, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto endaf5f1e04abdbbccef4e9802a562f7354
endaf5f1e04abdbbccef4e9802a562f7354:
	;
	return false
}
func rewriteValuegeneric_OpRsh64x64(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Rsh64x64 _ (Const64 [c]))
	// cond: c >= 64
	// result: (Const64 [0])
	{
		if v.Args[1].Op != OpConst64 {
			goto enda1d4a9fded24a5c1d6ec2e04f1cf4c33
		}
		c := v.Args[1].AuxInt
		if !(c >= 64) {
			goto enda1d4a9fded24a5c1d6ec2e04f1cf4c33
		}
		v.Op = OpConst64
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = 0
		return true
	}
	goto enda1d4a9fded24a5c1d6ec2e04f1cf4c33
enda1d4a9fded24a5c1d6ec2e04f1cf4c33:
	;
	// match: (Rsh64x64 x (Const64 [0]))
	// cond:
	// result: x
	{
		x := v.Args[0]
		if v.Args[1].Op != OpConst64 {
			goto end66068d0e267616b1943c03f7230fbedc
		}
		if v.Args[1].AuxInt != 0 {
			goto end66068d0e267616b1943c03f7230fbedc
		}
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = x.Type
		v.AddArg(x)
		return true
	}
	goto end66068d0e267616b1943c03f7230fbedc
end66068d0e267616b1943c03f7230fbedc:
	;
	// match: (Rsh64x64 <t> (Rsh64x64 x (Const64 [c])) (Const64 [d]))
	// cond:
	// result: (Rsh64x64 x  (Const64 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh64x64 {
			goto end13bba976e6f5eecf9e561f6e1ff1ea3d
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst64 {
			goto end13bba976e6f5eecf9e561f6e1ff1ea3d
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst64 {
			goto end13bba976e6f5eecf9e561f6e1ff1ea3d
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh64x64
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst64, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end13bba976e6f5eecf9e561f6e1ff1ea3d
end13bba976e6f5eecf9e561f6e1ff1ea3d:
	;
	// match: (Rsh64x64 <t> (Rsh64x32 x (Const32 [c])) (Const64 [d]))
	// cond:
	// result: (Rsh64x64 x  (Const64 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh64x32 {
			goto endebbe25307695512ff54a8f6301f49507
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst32 {
			goto endebbe25307695512ff54a8f6301f49507
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst64 {
			goto endebbe25307695512ff54a8f6301f49507
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh64x64
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst64, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto endebbe25307695512ff54a8f6301f49507
endebbe25307695512ff54a8f6301f49507:
	;
	// match: (Rsh64x64 <t> (Rsh64x16 x (Const16 [c])) (Const64 [d]))
	// cond:
	// result: (Rsh64x64 x  (Const64 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh64x16 {
			goto enda0f1c23dc86f5c05e8c55ff26b81aa7f
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst16 {
			goto enda0f1c23dc86f5c05e8c55ff26b81aa7f
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst64 {
			goto enda0f1c23dc86f5c05e8c55ff26b81aa7f
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh64x64
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst64, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto enda0f1c23dc86f5c05e8c55ff26b81aa7f
enda0f1c23dc86f5c05e8c55ff26b81aa7f:
	;
	// match: (Rsh64x64 <t> (Rsh64x8 x (Const8 [c])) (Const64 [d]))
	// cond:
	// result: (Rsh64x64 x  (Const64 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh64x8 {
			goto end72cc92e1a359bdcc1f55a269400b5637
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst8 {
			goto end72cc92e1a359bdcc1f55a269400b5637
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst64 {
			goto end72cc92e1a359bdcc1f55a269400b5637
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh64x64
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst64, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end72cc92e1a359bdcc1f55a269400b5637
end72cc92e1a359bdcc1f55a269400b5637:
	;
	return false
}
func rewriteValuegeneric_OpRsh64x8(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Rsh64x8 x (Const8 [c]))
	// cond: c == 0
	// result: x
	{
		x := v.Args[0]
		if v.Args[1].Op != OpConst8 {
			goto end6d2649d553d4f4c7424a176e4c068edc
		}
		c := v.Args[1].AuxInt
		if !(c == 0) {
			goto end6d2649d553d4f4c7424a176e4c068edc
		}
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = x.Type
		v.AddArg(x)
		return true
	}
	goto end6d2649d553d4f4c7424a176e4c068edc
end6d2649d553d4f4c7424a176e4c068edc:
	;
	// match: (Rsh64x8 <t> (Rsh64x64 x (Const64 [c])) (Const8 [d]))
	// cond:
	// result: (Rsh64x8 x  (Const8 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh64x64 {
			goto end7801209b86d2665435f167eae975684d
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst64 {
			goto end7801209b86d2665435f167eae975684d
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst8 {
			goto end7801209b86d2665435f167eae975684d
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh64x8
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst8, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end7801209b86d2665435f167eae975684d
end7801209b86d2665435f167eae975684d:
	;
	// match: (Rsh64x8 <t> (Rsh64x32 x (Const32 [c])) (Const8 [d]))
	// cond:
	// result: (Rsh64x8 x  (Const8 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh64x32 {
			goto end8c290d5d0102f4bb878abbfc8109d806
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst32 {
			goto end8c290d5d0102f4bb878abbfc8109d806
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst8 {
			goto end8c290d5d0102f4bb878abbfc8109d806
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh64x8
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst8, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end8c290d5d0102f4bb878abbfc8109d806
end8c290d5d0102f4bb878abbfc8109d806:
	;
	// match: (Rsh64x8 <t> (Rsh64x16 x (Const16 [c])) (Const8 [d]))
	// cond:
	// result: (Rsh64x8 x  (Const8 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh64x16 {
			goto endc435820a3199e68f8c56e07d10e35a0b
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst16 {
			goto endc435820a3199e68f8c56e07d10e35a0b
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst8 {
			goto endc435820a3199e68f8c56e07d10e35a0b
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh64x8
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst8, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto endc435820a3199e68f8c56e07d10e35a0b
endc435820a3199e68f8c56e07d10e35a0b:
	;
	// match: (Rsh64x8 <t> (Rsh64x8 x (Const8 [c])) (Const8 [d]))
	// cond:
	// result: (Rsh64x8 x  (Const8 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh64x8 {
			goto end8c44a435a493f10daaec1b1f38df4b37
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst8 {
			goto end8c44a435a493f10daaec1b1f38df4b37
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst8 {
			goto end8c44a435a493f10daaec1b1f38df4b37
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh64x8
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst8, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end8c44a435a493f10daaec1b1f38df4b37
end8c44a435a493f10daaec1b1f38df4b37:
	;
	return false
}
func rewriteValuegeneric_OpRsh8Ux16(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Rsh8Ux16 _ (Const16 [c]))
	// cond: c >= 8
	// result: (Const64 [0])
	{
		if v.Args[1].Op != OpConst16 {
			goto endfe6cf2a493545fc652cd462d22c2c3c5
		}
		c := v.Args[1].AuxInt
		if !(c >= 8) {
			goto endfe6cf2a493545fc652cd462d22c2c3c5
		}
		v.Op = OpConst64
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = 0
		return true
	}
	goto endfe6cf2a493545fc652cd462d22c2c3c5
endfe6cf2a493545fc652cd462d22c2c3c5:
	;
	// match: (Rsh8Ux16 x (Const16 [c]))
	// cond: c == 0
	// result: x
	{
		x := v.Args[0]
		if v.Args[1].Op != OpConst16 {
			goto end5ef5d609125136dd80019b384c232702
		}
		c := v.Args[1].AuxInt
		if !(c == 0) {
			goto end5ef5d609125136dd80019b384c232702
		}
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = x.Type
		v.AddArg(x)
		return true
	}
	goto end5ef5d609125136dd80019b384c232702
end5ef5d609125136dd80019b384c232702:
	;
	// match: (Rsh8Ux16 <t> (Rsh8Ux64 x (Const64 [c])) (Const16 [d]))
	// cond:
	// result: (Rsh8Ux16 x  (Const16 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh8Ux64 {
			goto end5708c002b83a74f9b17b04fa7a8041b2
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst64 {
			goto end5708c002b83a74f9b17b04fa7a8041b2
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst16 {
			goto end5708c002b83a74f9b17b04fa7a8041b2
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh8Ux16
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst16, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end5708c002b83a74f9b17b04fa7a8041b2
end5708c002b83a74f9b17b04fa7a8041b2:
	;
	// match: (Rsh8Ux16 <t> (Rsh8Ux32 x (Const32 [c])) (Const16 [d]))
	// cond:
	// result: (Rsh8Ux16 x  (Const16 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh8Ux32 {
			goto endc85ce963ecb8a9a75b66aa497bcf7ecc
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst32 {
			goto endc85ce963ecb8a9a75b66aa497bcf7ecc
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst16 {
			goto endc85ce963ecb8a9a75b66aa497bcf7ecc
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh8Ux16
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst16, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto endc85ce963ecb8a9a75b66aa497bcf7ecc
endc85ce963ecb8a9a75b66aa497bcf7ecc:
	;
	// match: (Rsh8Ux16 <t> (Rsh8Ux16 x (Const16 [c])) (Const16 [d]))
	// cond:
	// result: (Rsh8Ux16 x  (Const16 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh8Ux16 {
			goto endaa86bbe24ad74d9d88c856c2c5aeb70e
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst16 {
			goto endaa86bbe24ad74d9d88c856c2c5aeb70e
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst16 {
			goto endaa86bbe24ad74d9d88c856c2c5aeb70e
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh8Ux16
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst16, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto endaa86bbe24ad74d9d88c856c2c5aeb70e
endaa86bbe24ad74d9d88c856c2c5aeb70e:
	;
	// match: (Rsh8Ux16 <t> (Rsh8Ux8 x (Const8 [c])) (Const16 [d]))
	// cond:
	// result: (Rsh8Ux16 x  (Const16 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh8Ux8 {
			goto end80201dc3774dbea302b6c47b3c6c9819
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst8 {
			goto end80201dc3774dbea302b6c47b3c6c9819
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst16 {
			goto end80201dc3774dbea302b6c47b3c6c9819
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh8Ux16
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst16, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end80201dc3774dbea302b6c47b3c6c9819
end80201dc3774dbea302b6c47b3c6c9819:
	;
	return false
}
func rewriteValuegeneric_OpRsh8Ux32(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Rsh8Ux32 _ (Const32 [c]))
	// cond: c >= 8
	// result: (Const64 [0])
	{
		if v.Args[1].Op != OpConst32 {
			goto endf9c476ce63f89cc923d7f7e0999784c9
		}
		c := v.Args[1].AuxInt
		if !(c >= 8) {
			goto endf9c476ce63f89cc923d7f7e0999784c9
		}
		v.Op = OpConst64
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = 0
		return true
	}
	goto endf9c476ce63f89cc923d7f7e0999784c9
endf9c476ce63f89cc923d7f7e0999784c9:
	;
	// match: (Rsh8Ux32 x (Const32 [c]))
	// cond: c == 0
	// result: x
	{
		x := v.Args[0]
		if v.Args[1].Op != OpConst32 {
			goto end56331ab61610d98b50b305848d8957a7
		}
		c := v.Args[1].AuxInt
		if !(c == 0) {
			goto end56331ab61610d98b50b305848d8957a7
		}
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = x.Type
		v.AddArg(x)
		return true
	}
	goto end56331ab61610d98b50b305848d8957a7
end56331ab61610d98b50b305848d8957a7:
	;
	// match: (Rsh8Ux32 <t> (Rsh8Ux64 x (Const64 [c])) (Const32 [d]))
	// cond:
	// result: (Rsh8Ux32 x  (Const32 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh8Ux64 {
			goto end360dfad12b511b5ab0aed2d064c5107b
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst64 {
			goto end360dfad12b511b5ab0aed2d064c5107b
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst32 {
			goto end360dfad12b511b5ab0aed2d064c5107b
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh8Ux32
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst32, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end360dfad12b511b5ab0aed2d064c5107b
end360dfad12b511b5ab0aed2d064c5107b:
	;
	// match: (Rsh8Ux32 <t> (Rsh8Ux32 x (Const32 [c])) (Const32 [d]))
	// cond:
	// result: (Rsh8Ux32 x  (Const32 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh8Ux32 {
			goto end469d07b2523bf8832f4e06a8eea0e0e2
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst32 {
			goto end469d07b2523bf8832f4e06a8eea0e0e2
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst32 {
			goto end469d07b2523bf8832f4e06a8eea0e0e2
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh8Ux32
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst32, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end469d07b2523bf8832f4e06a8eea0e0e2
end469d07b2523bf8832f4e06a8eea0e0e2:
	;
	// match: (Rsh8Ux32 <t> (Rsh8Ux16 x (Const16 [c])) (Const32 [d]))
	// cond:
	// result: (Rsh8Ux32 x  (Const32 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh8Ux16 {
			goto ended9d958b3026907d4e5f568d906f1133
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst16 {
			goto ended9d958b3026907d4e5f568d906f1133
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst32 {
			goto ended9d958b3026907d4e5f568d906f1133
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh8Ux32
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst32, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto ended9d958b3026907d4e5f568d906f1133
ended9d958b3026907d4e5f568d906f1133:
	;
	// match: (Rsh8Ux32 <t> (Rsh8Ux8 x (Const8 [c])) (Const32 [d]))
	// cond:
	// result: (Rsh8Ux32 x  (Const32 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh8Ux8 {
			goto endbbc284620256fab025a2abdb8a2c4431
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst8 {
			goto endbbc284620256fab025a2abdb8a2c4431
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst32 {
			goto endbbc284620256fab025a2abdb8a2c4431
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh8Ux32
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst32, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto endbbc284620256fab025a2abdb8a2c4431
endbbc284620256fab025a2abdb8a2c4431:
	;
	return false
}
func rewriteValuegeneric_OpRsh8Ux64(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Rsh8Ux64 _ (Const64 [c]))
	// cond: c >= 8
	// result: (Const64 [0])
	{
		if v.Args[1].Op != OpConst64 {
			goto end539bca692433100693345f051780ffb0
		}
		c := v.Args[1].AuxInt
		if !(c >= 8) {
			goto end539bca692433100693345f051780ffb0
		}
		v.Op = OpConst64
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = 0
		return true
	}
	goto end539bca692433100693345f051780ffb0
end539bca692433100693345f051780ffb0:
	;
	// match: (Rsh8Ux64 x (Const64 [0]))
	// cond:
	// result: x
	{
		x := v.Args[0]
		if v.Args[1].Op != OpConst64 {
			goto endef1a0695dbc4d7d559b3e79b65bf7e25
		}
		if v.Args[1].AuxInt != 0 {
			goto endef1a0695dbc4d7d559b3e79b65bf7e25
		}
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = x.Type
		v.AddArg(x)
		return true
	}
	goto endef1a0695dbc4d7d559b3e79b65bf7e25
endef1a0695dbc4d7d559b3e79b65bf7e25:
	;
	// match: (Rsh8Ux64 <t> (Rsh8Ux64 x (Const64 [c])) (Const64 [d]))
	// cond:
	// result: (Rsh8Ux64 x  (Const64 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh8Ux64 {
			goto endfdd2d3b8dc8665ba3f159b397013d45a
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst64 {
			goto endfdd2d3b8dc8665ba3f159b397013d45a
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst64 {
			goto endfdd2d3b8dc8665ba3f159b397013d45a
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh8Ux64
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst64, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto endfdd2d3b8dc8665ba3f159b397013d45a
endfdd2d3b8dc8665ba3f159b397013d45a:
	;
	// match: (Rsh8Ux64 <t> (Rsh8Ux32 x (Const32 [c])) (Const64 [d]))
	// cond:
	// result: (Rsh8Ux64 x  (Const64 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh8Ux32 {
			goto endbd00a7a9c9c9457f54a6468b3417a168
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst32 {
			goto endbd00a7a9c9c9457f54a6468b3417a168
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst64 {
			goto endbd00a7a9c9c9457f54a6468b3417a168
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh8Ux64
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst64, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto endbd00a7a9c9c9457f54a6468b3417a168
endbd00a7a9c9c9457f54a6468b3417a168:
	;
	// match: (Rsh8Ux64 <t> (Rsh8Ux16 x (Const16 [c])) (Const64 [d]))
	// cond:
	// result: (Rsh8Ux64 x  (Const64 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh8Ux16 {
			goto end8a45e300dfcfd840b5199e8185b21f42
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst16 {
			goto end8a45e300dfcfd840b5199e8185b21f42
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst64 {
			goto end8a45e300dfcfd840b5199e8185b21f42
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh8Ux64
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst64, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end8a45e300dfcfd840b5199e8185b21f42
end8a45e300dfcfd840b5199e8185b21f42:
	;
	// match: (Rsh8Ux64 <t> (Rsh8Ux8 x (Const8 [c])) (Const64 [d]))
	// cond:
	// result: (Rsh8Ux64 x  (Const64 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh8Ux8 {
			goto end240959dd2c52d68e993f7792264f04d3
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst8 {
			goto end240959dd2c52d68e993f7792264f04d3
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst64 {
			goto end240959dd2c52d68e993f7792264f04d3
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh8Ux64
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst64, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end240959dd2c52d68e993f7792264f04d3
end240959dd2c52d68e993f7792264f04d3:
	;
	return false
}
func rewriteValuegeneric_OpRsh8Ux8(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Rsh8Ux8 _ (Const8 [c]))
	// cond: c >= 8
	// result: (Const64 [0])
	{
		if v.Args[1].Op != OpConst8 {
			goto end5ecc7fce5d8a48e84735db9ae24ad145
		}
		c := v.Args[1].AuxInt
		if !(c >= 8) {
			goto end5ecc7fce5d8a48e84735db9ae24ad145
		}
		v.Op = OpConst64
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = 0
		return true
	}
	goto end5ecc7fce5d8a48e84735db9ae24ad145
end5ecc7fce5d8a48e84735db9ae24ad145:
	;
	// match: (Rsh8Ux8 x (Const8 [c]))
	// cond: c == 0
	// result: x
	{
		x := v.Args[0]
		if v.Args[1].Op != OpConst8 {
			goto end6e2f0e7a14dd4efaa38369fa26b5c0b3
		}
		c := v.Args[1].AuxInt
		if !(c == 0) {
			goto end6e2f0e7a14dd4efaa38369fa26b5c0b3
		}
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = x.Type
		v.AddArg(x)
		return true
	}
	goto end6e2f0e7a14dd4efaa38369fa26b5c0b3
end6e2f0e7a14dd4efaa38369fa26b5c0b3:
	;
	// match: (Rsh8Ux8 <t> (Rsh8Ux64 x (Const64 [c])) (Const8 [d]))
	// cond:
	// result: (Rsh8Ux8 x  (Const8 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh8Ux64 {
			goto end3aa184ed896c8ab6b769ede871fc4ead
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst64 {
			goto end3aa184ed896c8ab6b769ede871fc4ead
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst8 {
			goto end3aa184ed896c8ab6b769ede871fc4ead
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh8Ux8
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst8, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end3aa184ed896c8ab6b769ede871fc4ead
end3aa184ed896c8ab6b769ede871fc4ead:
	;
	// match: (Rsh8Ux8 <t> (Rsh8Ux32 x (Const32 [c])) (Const8 [d]))
	// cond:
	// result: (Rsh8Ux8 x  (Const8 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh8Ux32 {
			goto end4ca21da3e5a9b914849574384e44fa75
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst32 {
			goto end4ca21da3e5a9b914849574384e44fa75
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst8 {
			goto end4ca21da3e5a9b914849574384e44fa75
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh8Ux8
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst8, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end4ca21da3e5a9b914849574384e44fa75
end4ca21da3e5a9b914849574384e44fa75:
	;
	// match: (Rsh8Ux8 <t> (Rsh8Ux16 x (Const16 [c])) (Const8 [d]))
	// cond:
	// result: (Rsh8Ux8 x  (Const8 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh8Ux16 {
			goto end413eaed9edd071ea8eae156821b63ca0
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst16 {
			goto end413eaed9edd071ea8eae156821b63ca0
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst8 {
			goto end413eaed9edd071ea8eae156821b63ca0
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh8Ux8
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst8, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end413eaed9edd071ea8eae156821b63ca0
end413eaed9edd071ea8eae156821b63ca0:
	;
	// match: (Rsh8Ux8 <t> (Rsh8Ux8 x (Const8 [c])) (Const8 [d]))
	// cond:
	// result: (Rsh8Ux8 x  (Const8 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh8Ux8 {
			goto end1a172b0970b259b8d3667c69b3c7b9e2
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst8 {
			goto end1a172b0970b259b8d3667c69b3c7b9e2
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst8 {
			goto end1a172b0970b259b8d3667c69b3c7b9e2
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh8Ux8
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst8, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end1a172b0970b259b8d3667c69b3c7b9e2
end1a172b0970b259b8d3667c69b3c7b9e2:
	;
	return false
}
func rewriteValuegeneric_OpRsh8x16(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Rsh8x16 _ (Const16 [c]))
	// cond: c >= 8
	// result: (Const64 [0])
	{
		if v.Args[1].Op != OpConst16 {
			goto end13cc236266a36c0eeb2b197a695a7565
		}
		c := v.Args[1].AuxInt
		if !(c >= 8) {
			goto end13cc236266a36c0eeb2b197a695a7565
		}
		v.Op = OpConst64
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = 0
		return true
	}
	goto end13cc236266a36c0eeb2b197a695a7565
end13cc236266a36c0eeb2b197a695a7565:
	;
	// match: (Rsh8x16 x (Const16 [c]))
	// cond: c == 0
	// result: x
	{
		x := v.Args[0]
		if v.Args[1].Op != OpConst16 {
			goto end1967b0732301307f762ab3f27bd4d217
		}
		c := v.Args[1].AuxInt
		if !(c == 0) {
			goto end1967b0732301307f762ab3f27bd4d217
		}
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = x.Type
		v.AddArg(x)
		return true
	}
	goto end1967b0732301307f762ab3f27bd4d217
end1967b0732301307f762ab3f27bd4d217:
	;
	// match: (Rsh8x16 <t> (Rsh8x64 x (Const64 [c])) (Const16 [d]))
	// cond:
	// result: (Rsh8x16 x  (Const16 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh8x64 {
			goto end687bb2396b1b6328ade87d93178cf811
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst64 {
			goto end687bb2396b1b6328ade87d93178cf811
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst16 {
			goto end687bb2396b1b6328ade87d93178cf811
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh8x16
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst16, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end687bb2396b1b6328ade87d93178cf811
end687bb2396b1b6328ade87d93178cf811:
	;
	// match: (Rsh8x16 <t> (Rsh8x32 x (Const32 [c])) (Const16 [d]))
	// cond:
	// result: (Rsh8x16 x  (Const16 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh8x32 {
			goto end7ae35c2db7897edc212e3244bb626123
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst32 {
			goto end7ae35c2db7897edc212e3244bb626123
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst16 {
			goto end7ae35c2db7897edc212e3244bb626123
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh8x16
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst16, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end7ae35c2db7897edc212e3244bb626123
end7ae35c2db7897edc212e3244bb626123:
	;
	// match: (Rsh8x16 <t> (Rsh8x16 x (Const16 [c])) (Const16 [d]))
	// cond:
	// result: (Rsh8x16 x  (Const16 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh8x16 {
			goto end6b3326bda5a209ea877cbdd7e5db891f
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst16 {
			goto end6b3326bda5a209ea877cbdd7e5db891f
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst16 {
			goto end6b3326bda5a209ea877cbdd7e5db891f
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh8x16
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst16, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end6b3326bda5a209ea877cbdd7e5db891f
end6b3326bda5a209ea877cbdd7e5db891f:
	;
	// match: (Rsh8x16 <t> (Rsh8x8 x (Const8 [c])) (Const16 [d]))
	// cond:
	// result: (Rsh8x16 x  (Const16 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh8x8 {
			goto end632a9b11274611a67b29c373ffa53c0c
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst8 {
			goto end632a9b11274611a67b29c373ffa53c0c
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst16 {
			goto end632a9b11274611a67b29c373ffa53c0c
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh8x16
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst16, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end632a9b11274611a67b29c373ffa53c0c
end632a9b11274611a67b29c373ffa53c0c:
	;
	return false
}
func rewriteValuegeneric_OpRsh8x32(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Rsh8x32 _ (Const32 [c]))
	// cond: c >= 8
	// result: (Const64 [0])
	{
		if v.Args[1].Op != OpConst32 {
			goto end0804c13a728cb5fcf4f46511629c5610
		}
		c := v.Args[1].AuxInt
		if !(c >= 8) {
			goto end0804c13a728cb5fcf4f46511629c5610
		}
		v.Op = OpConst64
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = 0
		return true
	}
	goto end0804c13a728cb5fcf4f46511629c5610
end0804c13a728cb5fcf4f46511629c5610:
	;
	// match: (Rsh8x32 x (Const32 [c]))
	// cond: c == 0
	// result: x
	{
		x := v.Args[0]
		if v.Args[1].Op != OpConst32 {
			goto endbfbb63207a3bfd5ca85ae995ecd2bea0
		}
		c := v.Args[1].AuxInt
		if !(c == 0) {
			goto endbfbb63207a3bfd5ca85ae995ecd2bea0
		}
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = x.Type
		v.AddArg(x)
		return true
	}
	goto endbfbb63207a3bfd5ca85ae995ecd2bea0
endbfbb63207a3bfd5ca85ae995ecd2bea0:
	;
	// match: (Rsh8x32 <t> (Rsh8x64 x (Const64 [c])) (Const32 [d]))
	// cond:
	// result: (Rsh8x32 x  (Const32 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh8x64 {
			goto end76372105f10c50921a4ea2a16302a878
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst64 {
			goto end76372105f10c50921a4ea2a16302a878
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst32 {
			goto end76372105f10c50921a4ea2a16302a878
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh8x32
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst32, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end76372105f10c50921a4ea2a16302a878
end76372105f10c50921a4ea2a16302a878:
	;
	// match: (Rsh8x32 <t> (Rsh8x32 x (Const32 [c])) (Const32 [d]))
	// cond:
	// result: (Rsh8x32 x  (Const32 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh8x32 {
			goto endebb6686109e786f37ac3268fac799ec2
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst32 {
			goto endebb6686109e786f37ac3268fac799ec2
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst32 {
			goto endebb6686109e786f37ac3268fac799ec2
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh8x32
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst32, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto endebb6686109e786f37ac3268fac799ec2
endebb6686109e786f37ac3268fac799ec2:
	;
	// match: (Rsh8x32 <t> (Rsh8x16 x (Const16 [c])) (Const32 [d]))
	// cond:
	// result: (Rsh8x32 x  (Const32 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh8x16 {
			goto end12258ab0973b0760c29b6c8d5e7f0df4
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst16 {
			goto end12258ab0973b0760c29b6c8d5e7f0df4
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst32 {
			goto end12258ab0973b0760c29b6c8d5e7f0df4
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh8x32
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst32, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end12258ab0973b0760c29b6c8d5e7f0df4
end12258ab0973b0760c29b6c8d5e7f0df4:
	;
	// match: (Rsh8x32 <t> (Rsh8x8 x (Const8 [c])) (Const32 [d]))
	// cond:
	// result: (Rsh8x32 x  (Const32 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh8x8 {
			goto ende01b0ccd43b94879038a7124a6f92026
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst8 {
			goto ende01b0ccd43b94879038a7124a6f92026
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst32 {
			goto ende01b0ccd43b94879038a7124a6f92026
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh8x32
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst32, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto ende01b0ccd43b94879038a7124a6f92026
ende01b0ccd43b94879038a7124a6f92026:
	;
	return false
}
func rewriteValuegeneric_OpRsh8x64(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Rsh8x64 _ (Const64 [c]))
	// cond: c >= 8
	// result: (Const64 [0])
	{
		if v.Args[1].Op != OpConst64 {
			goto endbbfe62e0eb0e69a1970baf8ad2e4078a
		}
		c := v.Args[1].AuxInt
		if !(c >= 8) {
			goto endbbfe62e0eb0e69a1970baf8ad2e4078a
		}
		v.Op = OpConst64
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = 0
		return true
	}
	goto endbbfe62e0eb0e69a1970baf8ad2e4078a
endbbfe62e0eb0e69a1970baf8ad2e4078a:
	;
	// match: (Rsh8x64 x (Const64 [0]))
	// cond:
	// result: x
	{
		x := v.Args[0]
		if v.Args[1].Op != OpConst64 {
			goto endbdbaae4c9630a3dacf78152e67914907
		}
		if v.Args[1].AuxInt != 0 {
			goto endbdbaae4c9630a3dacf78152e67914907
		}
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = x.Type
		v.AddArg(x)
		return true
	}
	goto endbdbaae4c9630a3dacf78152e67914907
endbdbaae4c9630a3dacf78152e67914907:
	;
	// match: (Rsh8x64 <t> (Rsh8x64 x (Const64 [c])) (Const64 [d]))
	// cond:
	// result: (Rsh8x64 x  (Const64 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh8x64 {
			goto end913f013689c34f79d7732b75506ecf6c
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst64 {
			goto end913f013689c34f79d7732b75506ecf6c
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst64 {
			goto end913f013689c34f79d7732b75506ecf6c
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh8x64
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst64, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end913f013689c34f79d7732b75506ecf6c
end913f013689c34f79d7732b75506ecf6c:
	;
	// match: (Rsh8x64 <t> (Rsh8x32 x (Const32 [c])) (Const64 [d]))
	// cond:
	// result: (Rsh8x64 x  (Const64 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh8x32 {
			goto end79cbe5fb36c72bb1f8a2a1ce25ebe93c
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst32 {
			goto end79cbe5fb36c72bb1f8a2a1ce25ebe93c
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst64 {
			goto end79cbe5fb36c72bb1f8a2a1ce25ebe93c
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh8x64
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst64, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end79cbe5fb36c72bb1f8a2a1ce25ebe93c
end79cbe5fb36c72bb1f8a2a1ce25ebe93c:
	;
	// match: (Rsh8x64 <t> (Rsh8x16 x (Const16 [c])) (Const64 [d]))
	// cond:
	// result: (Rsh8x64 x  (Const64 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh8x16 {
			goto endeaafc39ab7cc2bde933118eec532cba1
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst16 {
			goto endeaafc39ab7cc2bde933118eec532cba1
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst64 {
			goto endeaafc39ab7cc2bde933118eec532cba1
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh8x64
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst64, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto endeaafc39ab7cc2bde933118eec532cba1
endeaafc39ab7cc2bde933118eec532cba1:
	;
	// match: (Rsh8x64 <t> (Rsh8x8 x (Const8 [c])) (Const64 [d]))
	// cond:
	// result: (Rsh8x64 x  (Const64 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh8x8 {
			goto end44ad8c2463f388e8e53cc0f4e7748e7b
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst8 {
			goto end44ad8c2463f388e8e53cc0f4e7748e7b
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst64 {
			goto end44ad8c2463f388e8e53cc0f4e7748e7b
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh8x64
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst64, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end44ad8c2463f388e8e53cc0f4e7748e7b
end44ad8c2463f388e8e53cc0f4e7748e7b:
	;
	return false
}
func rewriteValuegeneric_OpRsh8x8(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Rsh8x8 _ (Const8 [c]))
	// cond: c >= 8
	// result: (Const64 [0])
	{
		if v.Args[1].Op != OpConst8 {
			goto end171a866c55caad677d62d47fa33cb212
		}
		c := v.Args[1].AuxInt
		if !(c >= 8) {
			goto end171a866c55caad677d62d47fa33cb212
		}
		v.Op = OpConst64
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = 0
		return true
	}
	goto end171a866c55caad677d62d47fa33cb212
end171a866c55caad677d62d47fa33cb212:
	;
	// match: (Rsh8x8 x (Const8 [c]))
	// cond: c == 0
	// result: x
	{
		x := v.Args[0]
		if v.Args[1].Op != OpConst8 {
			goto end2b6779eda96c58ca42e46d70c4d96f06
		}
		c := v.Args[1].AuxInt
		if !(c == 0) {
			goto end2b6779eda96c58ca42e46d70c4d96f06
		}
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = x.Type
		v.AddArg(x)
		return true
	}
	goto end2b6779eda96c58ca42e46d70c4d96f06
end2b6779eda96c58ca42e46d70c4d96f06:
	;
	// match: (Rsh8x8 <t> (Rsh8x64 x (Const64 [c])) (Const8 [d]))
	// cond:
	// result: (Rsh8x8 x  (Const8 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh8x64 {
			goto end160a6084656e664bf511a20102d09e33
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst64 {
			goto end160a6084656e664bf511a20102d09e33
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst8 {
			goto end160a6084656e664bf511a20102d09e33
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh8x8
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst8, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end160a6084656e664bf511a20102d09e33
end160a6084656e664bf511a20102d09e33:
	;
	// match: (Rsh8x8 <t> (Rsh8x32 x (Const32 [c])) (Const8 [d]))
	// cond:
	// result: (Rsh8x8 x  (Const8 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh8x32 {
			goto ended95b1c64fbe6d22bcb74f6445bda89b
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst32 {
			goto ended95b1c64fbe6d22bcb74f6445bda89b
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst8 {
			goto ended95b1c64fbe6d22bcb74f6445bda89b
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh8x8
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst8, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto ended95b1c64fbe6d22bcb74f6445bda89b
ended95b1c64fbe6d22bcb74f6445bda89b:
	;
	// match: (Rsh8x8 <t> (Rsh8x16 x (Const16 [c])) (Const8 [d]))
	// cond:
	// result: (Rsh8x8 x  (Const8 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh8x16 {
			goto end3406a54345dcb4d964be9fa1e26d113c
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst16 {
			goto end3406a54345dcb4d964be9fa1e26d113c
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst8 {
			goto end3406a54345dcb4d964be9fa1e26d113c
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh8x8
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst8, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end3406a54345dcb4d964be9fa1e26d113c
end3406a54345dcb4d964be9fa1e26d113c:
	;
	// match: (Rsh8x8 <t> (Rsh8x8 x (Const8 [c])) (Const8 [d]))
	// cond:
	// result: (Rsh8x8 x  (Const8 <t> [c+d]))
	{
		t := v.Type
		if v.Args[0].Op != OpRsh8x8 {
			goto end71c06ff3ce3cf91c0d1bb510edac8673
		}
		x := v.Args[0].Args[0]
		if v.Args[0].Args[1].Op != OpConst8 {
			goto end71c06ff3ce3cf91c0d1bb510edac8673
		}
		c := v.Args[0].Args[1].AuxInt
		if v.Args[1].Op != OpConst8 {
			goto end71c06ff3ce3cf91c0d1bb510edac8673
		}
		d := v.Args[1].AuxInt
		v.Op = OpRsh8x8
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpConst8, TypeInvalid)
		v0.Type = t
		v0.AuxInt = c + d
		v.AddArg(v0)
		return true
	}
	goto end71c06ff3ce3cf91c0d1bb510edac8673
end71c06ff3ce3cf91c0d1bb510edac8673:
	;
	return false
}
func rewriteValuegeneric_OpSliceCap(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (SliceCap (SliceMake _ _ cap))
	// cond:
	// result: cap
	{
		if v.Args[0].Op != OpSliceMake {
			goto end1bd11616743632b33b410964667fb3c6
		}
		cap := v.Args[0].Args[2]
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = cap.Type
		v.AddArg(cap)
		return true
	}
	goto end1bd11616743632b33b410964667fb3c6
end1bd11616743632b33b410964667fb3c6:
	;
	return false
}
func rewriteValuegeneric_OpSliceLen(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (SliceLen (SliceMake _ len _))
	// cond:
	// result: len
	{
		if v.Args[0].Op != OpSliceMake {
			goto endebb2090199d13e4c2ae52fb3e778f7fd
		}
		len := v.Args[0].Args[1]
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = len.Type
		v.AddArg(len)
		return true
	}
	goto endebb2090199d13e4c2ae52fb3e778f7fd
endebb2090199d13e4c2ae52fb3e778f7fd:
	;
	return false
}
func rewriteValuegeneric_OpSlicePtr(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (SlicePtr (SliceMake ptr _ _ ))
	// cond:
	// result: ptr
	{
		if v.Args[0].Op != OpSliceMake {
			goto end526acc0a705137a5d25577499206720b
		}
		ptr := v.Args[0].Args[0]
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = ptr.Type
		v.AddArg(ptr)
		return true
	}
	goto end526acc0a705137a5d25577499206720b
end526acc0a705137a5d25577499206720b:
	;
	return false
}
func rewriteValuegeneric_OpStore(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Store _ (StructMake0) mem)
	// cond:
	// result: mem
	{
		if v.Args[1].Op != OpStructMake0 {
			goto endd4f364b0adfc229d8c200af183d4c808
		}
		mem := v.Args[2]
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = mem.Type
		v.AddArg(mem)
		return true
	}
	goto endd4f364b0adfc229d8c200af183d4c808
endd4f364b0adfc229d8c200af183d4c808:
	;
	// match: (Store dst (StructMake1 <t> f0) mem)
	// cond:
	// result: (Store [t.FieldType(0).Size()] dst f0 mem)
	{
		dst := v.Args[0]
		if v.Args[1].Op != OpStructMake1 {
			goto end2cff6d06f4440132f48ca374b6b1e9d8
		}
		t := v.Args[1].Type
		f0 := v.Args[1].Args[0]
		mem := v.Args[2]
		v.Op = OpStore
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = t.FieldType(0).Size()
		v.AddArg(dst)
		v.AddArg(f0)
		v.AddArg(mem)
		return true
	}
	goto end2cff6d06f4440132f48ca374b6b1e9d8
end2cff6d06f4440132f48ca374b6b1e9d8:
	;
	// match: (Store dst (StructMake2 <t> f0 f1) mem)
	// cond:
	// result: (Store [t.FieldType(1).Size()]     (OffPtr <t.FieldType(1).PtrTo()> [t.FieldOff(1)] dst)     f1     (Store [t.FieldType(0).Size()] dst f0 mem))
	{
		dst := v.Args[0]
		if v.Args[1].Op != OpStructMake2 {
			goto end4e8ede6cc575a287795971da6b637973
		}
		t := v.Args[1].Type
		f0 := v.Args[1].Args[0]
		f1 := v.Args[1].Args[1]
		mem := v.Args[2]
		v.Op = OpStore
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = t.FieldType(1).Size()
		v0 := b.NewValue0(v.Line, OpOffPtr, TypeInvalid)
		v0.Type = t.FieldType(1).PtrTo()
		v0.AuxInt = t.FieldOff(1)
		v0.AddArg(dst)
		v.AddArg(v0)
		v.AddArg(f1)
		v1 := b.NewValue0(v.Line, OpStore, TypeInvalid)
		v1.AuxInt = t.FieldType(0).Size()
		v1.AddArg(dst)
		v1.AddArg(f0)
		v1.AddArg(mem)
		v1.Type = TypeMem
		v.AddArg(v1)
		return true
	}
	goto end4e8ede6cc575a287795971da6b637973
end4e8ede6cc575a287795971da6b637973:
	;
	// match: (Store dst (StructMake3 <t> f0 f1 f2) mem)
	// cond:
	// result: (Store [t.FieldType(2).Size()]     (OffPtr <t.FieldType(2).PtrTo()> [t.FieldOff(2)] dst)     f2     (Store [t.FieldType(1).Size()]       (OffPtr <t.FieldType(1).PtrTo()> [t.FieldOff(1)] dst)       f1       (Store [t.FieldType(0).Size()] dst f0 mem)))
	{
		dst := v.Args[0]
		if v.Args[1].Op != OpStructMake3 {
			goto end6ad675267724a87c8f852dd1e185e911
		}
		t := v.Args[1].Type
		f0 := v.Args[1].Args[0]
		f1 := v.Args[1].Args[1]
		f2 := v.Args[1].Args[2]
		mem := v.Args[2]
		v.Op = OpStore
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = t.FieldType(2).Size()
		v0 := b.NewValue0(v.Line, OpOffPtr, TypeInvalid)
		v0.Type = t.FieldType(2).PtrTo()
		v0.AuxInt = t.FieldOff(2)
		v0.AddArg(dst)
		v.AddArg(v0)
		v.AddArg(f2)
		v1 := b.NewValue0(v.Line, OpStore, TypeInvalid)
		v1.AuxInt = t.FieldType(1).Size()
		v2 := b.NewValue0(v.Line, OpOffPtr, TypeInvalid)
		v2.Type = t.FieldType(1).PtrTo()
		v2.AuxInt = t.FieldOff(1)
		v2.AddArg(dst)
		v1.AddArg(v2)
		v1.AddArg(f1)
		v3 := b.NewValue0(v.Line, OpStore, TypeInvalid)
		v3.AuxInt = t.FieldType(0).Size()
		v3.AddArg(dst)
		v3.AddArg(f0)
		v3.AddArg(mem)
		v3.Type = TypeMem
		v1.AddArg(v3)
		v1.Type = TypeMem
		v.AddArg(v1)
		return true
	}
	goto end6ad675267724a87c8f852dd1e185e911
end6ad675267724a87c8f852dd1e185e911:
	;
	// match: (Store dst (StructMake4 <t> f0 f1 f2 f3) mem)
	// cond:
	// result: (Store [t.FieldType(3).Size()]     (OffPtr <t.FieldType(3).PtrTo()> [t.FieldOff(3)] dst)     f3     (Store [t.FieldType(2).Size()]       (OffPtr <t.FieldType(2).PtrTo()> [t.FieldOff(2)] dst)       f2       (Store [t.FieldType(1).Size()]         (OffPtr <t.FieldType(1).PtrTo()> [t.FieldOff(1)] dst)         f1         (Store [t.FieldType(0).Size()] dst f0 mem))))
	{
		dst := v.Args[0]
		if v.Args[1].Op != OpStructMake4 {
			goto end7ea91abd44794f7653374502a5a405ea
		}
		t := v.Args[1].Type
		f0 := v.Args[1].Args[0]
		f1 := v.Args[1].Args[1]
		f2 := v.Args[1].Args[2]
		f3 := v.Args[1].Args[3]
		mem := v.Args[2]
		v.Op = OpStore
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = t.FieldType(3).Size()
		v0 := b.NewValue0(v.Line, OpOffPtr, TypeInvalid)
		v0.Type = t.FieldType(3).PtrTo()
		v0.AuxInt = t.FieldOff(3)
		v0.AddArg(dst)
		v.AddArg(v0)
		v.AddArg(f3)
		v1 := b.NewValue0(v.Line, OpStore, TypeInvalid)
		v1.AuxInt = t.FieldType(2).Size()
		v2 := b.NewValue0(v.Line, OpOffPtr, TypeInvalid)
		v2.Type = t.FieldType(2).PtrTo()
		v2.AuxInt = t.FieldOff(2)
		v2.AddArg(dst)
		v1.AddArg(v2)
		v1.AddArg(f2)
		v3 := b.NewValue0(v.Line, OpStore, TypeInvalid)
		v3.AuxInt = t.FieldType(1).Size()
		v4 := b.NewValue0(v.Line, OpOffPtr, TypeInvalid)
		v4.Type = t.FieldType(1).PtrTo()
		v4.AuxInt = t.FieldOff(1)
		v4.AddArg(dst)
		v3.AddArg(v4)
		v3.AddArg(f1)
		v5 := b.NewValue0(v.Line, OpStore, TypeInvalid)
		v5.AuxInt = t.FieldType(0).Size()
		v5.AddArg(dst)
		v5.AddArg(f0)
		v5.AddArg(mem)
		v5.Type = TypeMem
		v3.AddArg(v5)
		v3.Type = TypeMem
		v1.AddArg(v3)
		v1.Type = TypeMem
		v.AddArg(v1)
		return true
	}
	goto end7ea91abd44794f7653374502a5a405ea
end7ea91abd44794f7653374502a5a405ea:
	;
	// match: (Store [8] dst (ComplexMake real imag) mem)
	// cond:
	// result: (Store [4]     (OffPtr <config.fe.TypeFloat32().PtrTo()> [4] dst)     imag     (Store [4] dst real mem))
	{
		if v.AuxInt != 8 {
			goto endced898cb0a165662afe48ea44ad3318a
		}
		dst := v.Args[0]
		if v.Args[1].Op != OpComplexMake {
			goto endced898cb0a165662afe48ea44ad3318a
		}
		real := v.Args[1].Args[0]
		imag := v.Args[1].Args[1]
		mem := v.Args[2]
		v.Op = OpStore
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = 4
		v0 := b.NewValue0(v.Line, OpOffPtr, TypeInvalid)
		v0.Type = config.fe.TypeFloat32().PtrTo()
		v0.AuxInt = 4
		v0.AddArg(dst)
		v.AddArg(v0)
		v.AddArg(imag)
		v1 := b.NewValue0(v.Line, OpStore, TypeInvalid)
		v1.AuxInt = 4
		v1.AddArg(dst)
		v1.AddArg(real)
		v1.AddArg(mem)
		v1.Type = TypeMem
		v.AddArg(v1)
		return true
	}
	goto endced898cb0a165662afe48ea44ad3318a
endced898cb0a165662afe48ea44ad3318a:
	;
	// match: (Store [16] dst (ComplexMake real imag) mem)
	// cond:
	// result: (Store [8]     (OffPtr <config.fe.TypeFloat64().PtrTo()> [8] dst)     imag     (Store [8] dst real mem))
	{
		if v.AuxInt != 16 {
			goto end3851a482d7bd37a93c4d81581e85b3ab
		}
		dst := v.Args[0]
		if v.Args[1].Op != OpComplexMake {
			goto end3851a482d7bd37a93c4d81581e85b3ab
		}
		real := v.Args[1].Args[0]
		imag := v.Args[1].Args[1]
		mem := v.Args[2]
		v.Op = OpStore
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = 8
		v0 := b.NewValue0(v.Line, OpOffPtr, TypeInvalid)
		v0.Type = config.fe.TypeFloat64().PtrTo()
		v0.AuxInt = 8
		v0.AddArg(dst)
		v.AddArg(v0)
		v.AddArg(imag)
		v1 := b.NewValue0(v.Line, OpStore, TypeInvalid)
		v1.AuxInt = 8
		v1.AddArg(dst)
		v1.AddArg(real)
		v1.AddArg(mem)
		v1.Type = TypeMem
		v.AddArg(v1)
		return true
	}
	goto end3851a482d7bd37a93c4d81581e85b3ab
end3851a482d7bd37a93c4d81581e85b3ab:
	;
	// match: (Store [2*config.PtrSize] dst (StringMake ptr len) mem)
	// cond:
	// result: (Store [config.PtrSize]     (OffPtr <config.fe.TypeInt().PtrTo()> [config.PtrSize] dst)     len     (Store [config.PtrSize] dst ptr mem))
	{
		if v.AuxInt != 2*config.PtrSize {
			goto endd3a6ecebdad5899570a79fe5c62f34f1
		}
		dst := v.Args[0]
		if v.Args[1].Op != OpStringMake {
			goto endd3a6ecebdad5899570a79fe5c62f34f1
		}
		ptr := v.Args[1].Args[0]
		len := v.Args[1].Args[1]
		mem := v.Args[2]
		v.Op = OpStore
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = config.PtrSize
		v0 := b.NewValue0(v.Line, OpOffPtr, TypeInvalid)
		v0.Type = config.fe.TypeInt().PtrTo()
		v0.AuxInt = config.PtrSize
		v0.AddArg(dst)
		v.AddArg(v0)
		v.AddArg(len)
		v1 := b.NewValue0(v.Line, OpStore, TypeInvalid)
		v1.AuxInt = config.PtrSize
		v1.AddArg(dst)
		v1.AddArg(ptr)
		v1.AddArg(mem)
		v1.Type = TypeMem
		v.AddArg(v1)
		return true
	}
	goto endd3a6ecebdad5899570a79fe5c62f34f1
endd3a6ecebdad5899570a79fe5c62f34f1:
	;
	// match: (Store [3*config.PtrSize] dst (SliceMake ptr len cap) mem)
	// cond:
	// result: (Store [config.PtrSize]     (OffPtr <config.fe.TypeInt().PtrTo()> [2*config.PtrSize] dst)     cap     (Store [config.PtrSize]       (OffPtr <config.fe.TypeInt().PtrTo()> [config.PtrSize] dst)       len       (Store [config.PtrSize] dst ptr mem)))
	{
		if v.AuxInt != 3*config.PtrSize {
			goto endd5cc8c3dad7d24c845b0b88fc51487ae
		}
		dst := v.Args[0]
		if v.Args[1].Op != OpSliceMake {
			goto endd5cc8c3dad7d24c845b0b88fc51487ae
		}
		ptr := v.Args[1].Args[0]
		len := v.Args[1].Args[1]
		cap := v.Args[1].Args[2]
		mem := v.Args[2]
		v.Op = OpStore
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = config.PtrSize
		v0 := b.NewValue0(v.Line, OpOffPtr, TypeInvalid)
		v0.Type = config.fe.TypeInt().PtrTo()
		v0.AuxInt = 2 * config.PtrSize
		v0.AddArg(dst)
		v.AddArg(v0)
		v.AddArg(cap)
		v1 := b.NewValue0(v.Line, OpStore, TypeInvalid)
		v1.AuxInt = config.PtrSize
		v2 := b.NewValue0(v.Line, OpOffPtr, TypeInvalid)
		v2.Type = config.fe.TypeInt().PtrTo()
		v2.AuxInt = config.PtrSize
		v2.AddArg(dst)
		v1.AddArg(v2)
		v1.AddArg(len)
		v3 := b.NewValue0(v.Line, OpStore, TypeInvalid)
		v3.AuxInt = config.PtrSize
		v3.AddArg(dst)
		v3.AddArg(ptr)
		v3.AddArg(mem)
		v3.Type = TypeMem
		v1.AddArg(v3)
		v1.Type = TypeMem
		v.AddArg(v1)
		return true
	}
	goto endd5cc8c3dad7d24c845b0b88fc51487ae
endd5cc8c3dad7d24c845b0b88fc51487ae:
	;
	// match: (Store [2*config.PtrSize] dst (IMake itab data) mem)
	// cond:
	// result: (Store [config.PtrSize]     (OffPtr <config.fe.TypeBytePtr().PtrTo()> [config.PtrSize] dst)     data     (Store [config.PtrSize] dst itab mem))
	{
		if v.AuxInt != 2*config.PtrSize {
			goto endaa801a871178ae3256b3f6f5d9f13514
		}
		dst := v.Args[0]
		if v.Args[1].Op != OpIMake {
			goto endaa801a871178ae3256b3f6f5d9f13514
		}
		itab := v.Args[1].Args[0]
		data := v.Args[1].Args[1]
		mem := v.Args[2]
		v.Op = OpStore
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = config.PtrSize
		v0 := b.NewValue0(v.Line, OpOffPtr, TypeInvalid)
		v0.Type = config.fe.TypeBytePtr().PtrTo()
		v0.AuxInt = config.PtrSize
		v0.AddArg(dst)
		v.AddArg(v0)
		v.AddArg(data)
		v1 := b.NewValue0(v.Line, OpStore, TypeInvalid)
		v1.AuxInt = config.PtrSize
		v1.AddArg(dst)
		v1.AddArg(itab)
		v1.AddArg(mem)
		v1.Type = TypeMem
		v.AddArg(v1)
		return true
	}
	goto endaa801a871178ae3256b3f6f5d9f13514
endaa801a871178ae3256b3f6f5d9f13514:
	;
	// match: (Store [size] dst (Load <t> src mem) mem)
	// cond: !config.fe.CanSSA(t)
	// result: (Move [size] dst src mem)
	{
		size := v.AuxInt
		dst := v.Args[0]
		if v.Args[1].Op != OpLoad {
			goto end45295326269ba18413dceb7b608a0b9d
		}
		t := v.Args[1].Type
		src := v.Args[1].Args[0]
		mem := v.Args[1].Args[1]
		if v.Args[2] != mem {
			goto end45295326269ba18413dceb7b608a0b9d
		}
		if !(!config.fe.CanSSA(t)) {
			goto end45295326269ba18413dceb7b608a0b9d
		}
		v.Op = OpMove
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = size
		v.AddArg(dst)
		v.AddArg(src)
		v.AddArg(mem)
		return true
	}
	goto end45295326269ba18413dceb7b608a0b9d
end45295326269ba18413dceb7b608a0b9d:
	;
	// match: (Store [size] dst (Load <t> src mem) (VarDef {x} mem))
	// cond: !config.fe.CanSSA(t)
	// result: (Move [size] dst src (VarDef {x} mem))
	{
		size := v.AuxInt
		dst := v.Args[0]
		if v.Args[1].Op != OpLoad {
			goto end7f3cc0baffb82ba3ee879599b189a512
		}
		t := v.Args[1].Type
		src := v.Args[1].Args[0]
		mem := v.Args[1].Args[1]
		if v.Args[2].Op != OpVarDef {
			goto end7f3cc0baffb82ba3ee879599b189a512
		}
		x := v.Args[2].Aux
		if v.Args[2].Args[0] != mem {
			goto end7f3cc0baffb82ba3ee879599b189a512
		}
		if !(!config.fe.CanSSA(t)) {
			goto end7f3cc0baffb82ba3ee879599b189a512
		}
		v.Op = OpMove
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = size
		v.AddArg(dst)
		v.AddArg(src)
		v0 := b.NewValue0(v.Line, OpVarDef, TypeInvalid)
		v0.Aux = x
		v0.AddArg(mem)
		v0.Type = TypeMem
		v.AddArg(v0)
		return true
	}
	goto end7f3cc0baffb82ba3ee879599b189a512
end7f3cc0baffb82ba3ee879599b189a512:
	;
	return false
}
func rewriteValuegeneric_OpStringLen(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (StringLen (StringMake _ len))
	// cond:
	// result: len
	{
		if v.Args[0].Op != OpStringMake {
			goto end0d922460b7e5ca88324034f4bd6c027c
		}
		len := v.Args[0].Args[1]
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = len.Type
		v.AddArg(len)
		return true
	}
	goto end0d922460b7e5ca88324034f4bd6c027c
end0d922460b7e5ca88324034f4bd6c027c:
	;
	return false
}
func rewriteValuegeneric_OpStringPtr(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (StringPtr (StringMake ptr _))
	// cond:
	// result: ptr
	{
		if v.Args[0].Op != OpStringMake {
			goto end061edc5d85c73ad909089af2556d9380
		}
		ptr := v.Args[0].Args[0]
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = ptr.Type
		v.AddArg(ptr)
		return true
	}
	goto end061edc5d85c73ad909089af2556d9380
end061edc5d85c73ad909089af2556d9380:
	;
	return false
}
func rewriteValuegeneric_OpStructSelect(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (StructSelect (StructMake1 x))
	// cond:
	// result: x
	{
		if v.Args[0].Op != OpStructMake1 {
			goto end17af582e7eba5216b4a51fe6c9206d3c
		}
		x := v.Args[0].Args[0]
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = x.Type
		v.AddArg(x)
		return true
	}
	goto end17af582e7eba5216b4a51fe6c9206d3c
end17af582e7eba5216b4a51fe6c9206d3c:
	;
	// match: (StructSelect [0] (StructMake2 x _))
	// cond:
	// result: x
	{
		if v.AuxInt != 0 {
			goto end355cfff99c8e9af975c3ae450d49b7f9
		}
		if v.Args[0].Op != OpStructMake2 {
			goto end355cfff99c8e9af975c3ae450d49b7f9
		}
		x := v.Args[0].Args[0]
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = x.Type
		v.AddArg(x)
		return true
	}
	goto end355cfff99c8e9af975c3ae450d49b7f9
end355cfff99c8e9af975c3ae450d49b7f9:
	;
	// match: (StructSelect [1] (StructMake2 _ x))
	// cond:
	// result: x
	{
		if v.AuxInt != 1 {
			goto end69baa65e494ef9ae154e0943b53734f9
		}
		if v.Args[0].Op != OpStructMake2 {
			goto end69baa65e494ef9ae154e0943b53734f9
		}
		x := v.Args[0].Args[1]
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = x.Type
		v.AddArg(x)
		return true
	}
	goto end69baa65e494ef9ae154e0943b53734f9
end69baa65e494ef9ae154e0943b53734f9:
	;
	// match: (StructSelect [0] (StructMake3 x _ _))
	// cond:
	// result: x
	{
		if v.AuxInt != 0 {
			goto endb0d98e2c46bb51c9abd4c3543392e0ec
		}
		if v.Args[0].Op != OpStructMake3 {
			goto endb0d98e2c46bb51c9abd4c3543392e0ec
		}
		x := v.Args[0].Args[0]
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = x.Type
		v.AddArg(x)
		return true
	}
	goto endb0d98e2c46bb51c9abd4c3543392e0ec
endb0d98e2c46bb51c9abd4c3543392e0ec:
	;
	// match: (StructSelect [1] (StructMake3 _ x _))
	// cond:
	// result: x
	{
		if v.AuxInt != 1 {
			goto end2e40457286d26c2f14ad4fd127946773
		}
		if v.Args[0].Op != OpStructMake3 {
			goto end2e40457286d26c2f14ad4fd127946773
		}
		x := v.Args[0].Args[1]
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = x.Type
		v.AddArg(x)
		return true
	}
	goto end2e40457286d26c2f14ad4fd127946773
end2e40457286d26c2f14ad4fd127946773:
	;
	// match: (StructSelect [2] (StructMake3 _ _ x))
	// cond:
	// result: x
	{
		if v.AuxInt != 2 {
			goto end3e3b96ad431206175d002ece87aa1409
		}
		if v.Args[0].Op != OpStructMake3 {
			goto end3e3b96ad431206175d002ece87aa1409
		}
		x := v.Args[0].Args[2]
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = x.Type
		v.AddArg(x)
		return true
	}
	goto end3e3b96ad431206175d002ece87aa1409
end3e3b96ad431206175d002ece87aa1409:
	;
	// match: (StructSelect [0] (StructMake4 x _ _ _))
	// cond:
	// result: x
	{
		if v.AuxInt != 0 {
			goto end09f8a1ffa3d8c3124bc6d4083b941108
		}
		if v.Args[0].Op != OpStructMake4 {
			goto end09f8a1ffa3d8c3124bc6d4083b941108
		}
		x := v.Args[0].Args[0]
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = x.Type
		v.AddArg(x)
		return true
	}
	goto end09f8a1ffa3d8c3124bc6d4083b941108
end09f8a1ffa3d8c3124bc6d4083b941108:
	;
	// match: (StructSelect [1] (StructMake4 _ x _ _))
	// cond:
	// result: x
	{
		if v.AuxInt != 1 {
			goto endd3ef25e605a927e9251be6d9221f4acf
		}
		if v.Args[0].Op != OpStructMake4 {
			goto endd3ef25e605a927e9251be6d9221f4acf
		}
		x := v.Args[0].Args[1]
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = x.Type
		v.AddArg(x)
		return true
	}
	goto endd3ef25e605a927e9251be6d9221f4acf
endd3ef25e605a927e9251be6d9221f4acf:
	;
	// match: (StructSelect [2] (StructMake4 _ _ x _))
	// cond:
	// result: x
	{
		if v.AuxInt != 2 {
			goto end0438e22cc8f41123fa42009a81ee723a
		}
		if v.Args[0].Op != OpStructMake4 {
			goto end0438e22cc8f41123fa42009a81ee723a
		}
		x := v.Args[0].Args[2]
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = x.Type
		v.AddArg(x)
		return true
	}
	goto end0438e22cc8f41123fa42009a81ee723a
end0438e22cc8f41123fa42009a81ee723a:
	;
	// match: (StructSelect [3] (StructMake4 _ _ _ x))
	// cond:
	// result: x
	{
		if v.AuxInt != 3 {
			goto end56a7c7781fee35eeff0a3652dc206012
		}
		if v.Args[0].Op != OpStructMake4 {
			goto end56a7c7781fee35eeff0a3652dc206012
		}
		x := v.Args[0].Args[3]
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = x.Type
		v.AddArg(x)
		return true
	}
	goto end56a7c7781fee35eeff0a3652dc206012
end56a7c7781fee35eeff0a3652dc206012:
	;
	// match: (StructSelect [i] (Load <t> ptr mem))
	// cond: !config.fe.CanSSA(t)
	// result: @v.Args[0].Block (Load <v.Type> (OffPtr <v.Type.PtrTo()> [t.FieldOff(i)] ptr) mem)
	{
		i := v.AuxInt
		if v.Args[0].Op != OpLoad {
			goto end2afd47b4fcaaab7a73325bd8a75e3e8e
		}
		t := v.Args[0].Type
		ptr := v.Args[0].Args[0]
		mem := v.Args[0].Args[1]
		if !(!config.fe.CanSSA(t)) {
			goto end2afd47b4fcaaab7a73325bd8a75e3e8e
		}
		v0 := v.Args[0].Block.NewValue0(v.Line, OpLoad, TypeInvalid)
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AddArg(v0)
		v0.Type = v.Type
		v1 := v.Args[0].Block.NewValue0(v.Line, OpOffPtr, TypeInvalid)
		v1.Type = v.Type.PtrTo()
		v1.AuxInt = t.FieldOff(i)
		v1.AddArg(ptr)
		v0.AddArg(v1)
		v0.AddArg(mem)
		return true
	}
	goto end2afd47b4fcaaab7a73325bd8a75e3e8e
end2afd47b4fcaaab7a73325bd8a75e3e8e:
	;
	return false
}
func rewriteValuegeneric_OpSub16(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Sub16 (Const16 [c]) (Const16 [d]))
	// cond:
	// result: (Const16 [c-d])
	{
		if v.Args[0].Op != OpConst16 {
			goto end5c6fab95c9dbeff5973119096bfd4e78
		}
		c := v.Args[0].AuxInt
		if v.Args[1].Op != OpConst16 {
			goto end5c6fab95c9dbeff5973119096bfd4e78
		}
		d := v.Args[1].AuxInt
		v.Op = OpConst16
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = c - d
		return true
	}
	goto end5c6fab95c9dbeff5973119096bfd4e78
end5c6fab95c9dbeff5973119096bfd4e78:
	;
	// match: (Sub16 x x)
	// cond:
	// result: (Const16 [0])
	{
		x := v.Args[0]
		if v.Args[1] != x {
			goto end83da541391be564f2a08464e674a49e7
		}
		v.Op = OpConst16
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = 0
		return true
	}
	goto end83da541391be564f2a08464e674a49e7
end83da541391be564f2a08464e674a49e7:
	;
	// match: (Sub16 (Add16 x y) x)
	// cond:
	// result: y
	{
		if v.Args[0].Op != OpAdd16 {
			goto end0dd8f250c457b9c005ecbed59fc2e758
		}
		x := v.Args[0].Args[0]
		y := v.Args[0].Args[1]
		if v.Args[1] != x {
			goto end0dd8f250c457b9c005ecbed59fc2e758
		}
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = y.Type
		v.AddArg(y)
		return true
	}
	goto end0dd8f250c457b9c005ecbed59fc2e758
end0dd8f250c457b9c005ecbed59fc2e758:
	;
	// match: (Sub16 (Add16 x y) y)
	// cond:
	// result: x
	{
		if v.Args[0].Op != OpAdd16 {
			goto end01c8db2e0bce69e048cf79f3bdc82b9b
		}
		x := v.Args[0].Args[0]
		y := v.Args[0].Args[1]
		if v.Args[1] != y {
			goto end01c8db2e0bce69e048cf79f3bdc82b9b
		}
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = x.Type
		v.AddArg(x)
		return true
	}
	goto end01c8db2e0bce69e048cf79f3bdc82b9b
end01c8db2e0bce69e048cf79f3bdc82b9b:
	;
	return false
}
func rewriteValuegeneric_OpSub32(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Sub32 (Const32 [c]) (Const32 [d]))
	// cond:
	// result: (Const32 [c-d])
	{
		if v.Args[0].Op != OpConst32 {
			goto end7623799db780e1bcc42c6ea0df9c49d3
		}
		c := v.Args[0].AuxInt
		if v.Args[1].Op != OpConst32 {
			goto end7623799db780e1bcc42c6ea0df9c49d3
		}
		d := v.Args[1].AuxInt
		v.Op = OpConst32
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = c - d
		return true
	}
	goto end7623799db780e1bcc42c6ea0df9c49d3
end7623799db780e1bcc42c6ea0df9c49d3:
	;
	// match: (Sub32 x x)
	// cond:
	// result: (Const32 [0])
	{
		x := v.Args[0]
		if v.Args[1] != x {
			goto enda747581e798f199e07f4ad69747cd069
		}
		v.Op = OpConst32
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = 0
		return true
	}
	goto enda747581e798f199e07f4ad69747cd069
enda747581e798f199e07f4ad69747cd069:
	;
	// match: (Sub32 (Add32 x y) x)
	// cond:
	// result: y
	{
		if v.Args[0].Op != OpAdd32 {
			goto end70c1e60e58a6c106d060f10cd3f179ea
		}
		x := v.Args[0].Args[0]
		y := v.Args[0].Args[1]
		if v.Args[1] != x {
			goto end70c1e60e58a6c106d060f10cd3f179ea
		}
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = y.Type
		v.AddArg(y)
		return true
	}
	goto end70c1e60e58a6c106d060f10cd3f179ea
end70c1e60e58a6c106d060f10cd3f179ea:
	;
	// match: (Sub32 (Add32 x y) y)
	// cond:
	// result: x
	{
		if v.Args[0].Op != OpAdd32 {
			goto end20e42db178ec4f423cc56a991863a4a2
		}
		x := v.Args[0].Args[0]
		y := v.Args[0].Args[1]
		if v.Args[1] != y {
			goto end20e42db178ec4f423cc56a991863a4a2
		}
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = x.Type
		v.AddArg(x)
		return true
	}
	goto end20e42db178ec4f423cc56a991863a4a2
end20e42db178ec4f423cc56a991863a4a2:
	;
	return false
}
func rewriteValuegeneric_OpSub64(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Sub64 (Const64 [c]) (Const64 [d]))
	// cond:
	// result: (Const64 [c-d])
	{
		if v.Args[0].Op != OpConst64 {
			goto end5a84a285ff0ff48b8ad3c64b15e3459f
		}
		c := v.Args[0].AuxInt
		if v.Args[1].Op != OpConst64 {
			goto end5a84a285ff0ff48b8ad3c64b15e3459f
		}
		d := v.Args[1].AuxInt
		v.Op = OpConst64
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = c - d
		return true
	}
	goto end5a84a285ff0ff48b8ad3c64b15e3459f
end5a84a285ff0ff48b8ad3c64b15e3459f:
	;
	// match: (Sub64 x x)
	// cond:
	// result: (Const64 [0])
	{
		x := v.Args[0]
		if v.Args[1] != x {
			goto end0387dc2b7bbe57d4aa54eab5d959da4b
		}
		v.Op = OpConst64
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = 0
		return true
	}
	goto end0387dc2b7bbe57d4aa54eab5d959da4b
end0387dc2b7bbe57d4aa54eab5d959da4b:
	;
	// match: (Sub64 (Add64 x y) x)
	// cond:
	// result: y
	{
		if v.Args[0].Op != OpAdd64 {
			goto end7d177451cf8959cb781f52d5ded46fff
		}
		x := v.Args[0].Args[0]
		y := v.Args[0].Args[1]
		if v.Args[1] != x {
			goto end7d177451cf8959cb781f52d5ded46fff
		}
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = y.Type
		v.AddArg(y)
		return true
	}
	goto end7d177451cf8959cb781f52d5ded46fff
end7d177451cf8959cb781f52d5ded46fff:
	;
	// match: (Sub64 (Add64 x y) y)
	// cond:
	// result: x
	{
		if v.Args[0].Op != OpAdd64 {
			goto end6ea8172b21100cfe3dc86b7a850fbe97
		}
		x := v.Args[0].Args[0]
		y := v.Args[0].Args[1]
		if v.Args[1] != y {
			goto end6ea8172b21100cfe3dc86b7a850fbe97
		}
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = x.Type
		v.AddArg(x)
		return true
	}
	goto end6ea8172b21100cfe3dc86b7a850fbe97
end6ea8172b21100cfe3dc86b7a850fbe97:
	;
	return false
}
func rewriteValuegeneric_OpSub8(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Sub8 (Const8 [c]) (Const8 [d]))
	// cond:
	// result: (Const8 [c-d])
	{
		if v.Args[0].Op != OpConst8 {
			goto endc00ea11c7535529e211710574f5cff24
		}
		c := v.Args[0].AuxInt
		if v.Args[1].Op != OpConst8 {
			goto endc00ea11c7535529e211710574f5cff24
		}
		d := v.Args[1].AuxInt
		v.Op = OpConst8
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = c - d
		return true
	}
	goto endc00ea11c7535529e211710574f5cff24
endc00ea11c7535529e211710574f5cff24:
	;
	// match: (Sub8 x x)
	// cond:
	// result: (Const8 [0])
	{
		x := v.Args[0]
		if v.Args[1] != x {
			goto end4e2ee15ef17611919a1a6b5f80bbfe18
		}
		v.Op = OpConst8
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = 0
		return true
	}
	goto end4e2ee15ef17611919a1a6b5f80bbfe18
end4e2ee15ef17611919a1a6b5f80bbfe18:
	;
	// match: (Sub8 (Add8 x y) x)
	// cond:
	// result: y
	{
		if v.Args[0].Op != OpAdd8 {
			goto endd79d561e14dc3d11da4c3bb20270b541
		}
		x := v.Args[0].Args[0]
		y := v.Args[0].Args[1]
		if v.Args[1] != x {
			goto endd79d561e14dc3d11da4c3bb20270b541
		}
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = y.Type
		v.AddArg(y)
		return true
	}
	goto endd79d561e14dc3d11da4c3bb20270b541
endd79d561e14dc3d11da4c3bb20270b541:
	;
	// match: (Sub8 (Add8 x y) y)
	// cond:
	// result: x
	{
		if v.Args[0].Op != OpAdd8 {
			goto endcb7111b11d6d068c97026a97ecff8248
		}
		x := v.Args[0].Args[0]
		y := v.Args[0].Args[1]
		if v.Args[1] != y {
			goto endcb7111b11d6d068c97026a97ecff8248
		}
		v.Op = OpCopy
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.Type = x.Type
		v.AddArg(x)
		return true
	}
	goto endcb7111b11d6d068c97026a97ecff8248
endcb7111b11d6d068c97026a97ecff8248:
	;
	return false
}
func rewriteValuegeneric_OpXor16(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Xor16 x x)
	// cond:
	// result: (Const16 [0])
	{
		x := v.Args[0]
		if v.Args[1] != x {
			goto end5733ceb1903b8140248d8e2cac02fefe
		}
		v.Op = OpConst16
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = 0
		return true
	}
	goto end5733ceb1903b8140248d8e2cac02fefe
end5733ceb1903b8140248d8e2cac02fefe:
	;
	return false
}
func rewriteValuegeneric_OpXor32(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Xor32 x x)
	// cond:
	// result: (Const32 [0])
	{
		x := v.Args[0]
		if v.Args[1] != x {
			goto end268ca02df6515d648e0bfb4e90981d25
		}
		v.Op = OpConst32
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = 0
		return true
	}
	goto end268ca02df6515d648e0bfb4e90981d25
end268ca02df6515d648e0bfb4e90981d25:
	;
	return false
}
func rewriteValuegeneric_OpXor64(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Xor64 x x)
	// cond:
	// result: (Const64 [0])
	{
		x := v.Args[0]
		if v.Args[1] != x {
			goto endaf44e7f9fc58af30df69070953fb45ce
		}
		v.Op = OpConst64
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = 0
		return true
	}
	goto endaf44e7f9fc58af30df69070953fb45ce
endaf44e7f9fc58af30df69070953fb45ce:
	;
	return false
}
func rewriteValuegeneric_OpXor8(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Xor8 x x)
	// cond:
	// result: (Const8 [0])
	{
		x := v.Args[0]
		if v.Args[1] != x {
			goto end949b3a60b7d181688e6f79f93c782fc8
		}
		v.Op = OpConst8
		v.AuxInt = 0
		v.Aux = nil
		v.resetArgs()
		v.AuxInt = 0
		return true
	}
	goto end949b3a60b7d181688e6f79f93c782fc8
end949b3a60b7d181688e6f79f93c782fc8:
	;
	return false
}
func rewriteBlockgeneric(b *Block) bool {
	switch b.Kind {
	case BlockCheck:
		// match: (Check (NilCheck (GetG _) _) next)
		// cond:
		// result: (Plain nil next)
		{
			v := b.Control
			if v.Op != OpNilCheck {
				goto end6e20d932d6961903b0dcf16eac513826
			}
			if v.Args[0].Op != OpGetG {
				goto end6e20d932d6961903b0dcf16eac513826
			}
			next := b.Succs[0]
			b.Kind = BlockPlain
			b.Control = nil
			b.Succs[0] = next
			b.Likely = BranchUnknown
			return true
		}
		goto end6e20d932d6961903b0dcf16eac513826
	end6e20d932d6961903b0dcf16eac513826:
		;
	case BlockIf:
		// match: (If (Not cond) yes no)
		// cond:
		// result: (If cond no yes)
		{
			v := b.Control
			if v.Op != OpNot {
				goto endebe19c1c3c3bec068cdb2dd29ef57f96
			}
			cond := v.Args[0]
			yes := b.Succs[0]
			no := b.Succs[1]
			b.Kind = BlockIf
			b.Control = cond
			b.Succs[0] = no
			b.Succs[1] = yes
			b.Likely *= -1
			return true
		}
		goto endebe19c1c3c3bec068cdb2dd29ef57f96
	endebe19c1c3c3bec068cdb2dd29ef57f96:
		;
		// match: (If (ConstBool [c]) yes no)
		// cond: c == 1
		// result: (First nil yes no)
		{
			v := b.Control
			if v.Op != OpConstBool {
				goto endc58ecbb85af78c0d58bb232ca86b67a4
			}
			c := v.AuxInt
			yes := b.Succs[0]
			no := b.Succs[1]
			if !(c == 1) {
				goto endc58ecbb85af78c0d58bb232ca86b67a4
			}
			b.Kind = BlockFirst
			b.Control = nil
			b.Succs[0] = yes
			b.Succs[1] = no
			return true
		}
		goto endc58ecbb85af78c0d58bb232ca86b67a4
	endc58ecbb85af78c0d58bb232ca86b67a4:
		;
		// match: (If (ConstBool [c]) yes no)
		// cond: c == 0
		// result: (First nil no yes)
		{
			v := b.Control
			if v.Op != OpConstBool {
				goto end4c3e297e275dd7e2e67f8ccd348c4bb5
			}
			c := v.AuxInt
			yes := b.Succs[0]
			no := b.Succs[1]
			if !(c == 0) {
				goto end4c3e297e275dd7e2e67f8ccd348c4bb5
			}
			b.Kind = BlockFirst
			b.Control = nil
			b.Succs[0] = no
			b.Succs[1] = yes
			b.Likely *= -1
			return true
		}
		goto end4c3e297e275dd7e2e67f8ccd348c4bb5
	end4c3e297e275dd7e2e67f8ccd348c4bb5:
	}
	return false
}
