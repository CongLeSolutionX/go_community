// Copyright 2010 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Example-based syntax error messages.
// See bisonerrors, Makefile, go.y.

static struct {
	int yystate;
	int yychar;
	char *msg;
} yymsg[] = {
	// Each line of the form % token list
	// is converted by bisonerrors into the yystate and yychar caused
	// by that token list.

	% loadcore loadmaps loadwb loadsched loadchannels loadhash loadprintf loadstrings loadifacestuff loadseq loaddefers loadruntime package LIMPORT '(' LLITERAL import_package import_there ','
	"unexpected comma during import block",

	% loadcore loadmaps loadwb loadsched loadchannels loadhash loadprintf loadstrings loadifacestuff loadseq loaddefers loadruntime package LIMPORT LNAME ';'
	"missing import path; require quoted string",

	% loadcore loadmaps loadwb loadsched loadchannels loadhash loadprintf loadstrings loadifacestuff loadseq loaddefers loadruntime package imports LFUNC LNAME '(' ')' '{' LIF if_header ';'
	"missing { after if clause",

	% loadcore loadmaps loadwb loadsched loadchannels loadhash loadprintf loadstrings loadifacestuff loadseq loaddefers loadruntime package imports LFUNC LNAME '(' ')' '{' LSWITCH if_header ';'
	"missing { after switch clause",

	% loadcore loadmaps loadwb loadsched loadchannels loadhash loadprintf loadstrings loadifacestuff loadseq loaddefers loadruntime package imports LFUNC LNAME '(' ')' '{' LFOR for_header ';'
	"missing { after for clause",

	% loadcore loadmaps loadwb loadsched loadchannels loadhash loadprintf loadstrings loadifacestuff loadseq loaddefers loadruntime package imports LFUNC LNAME '(' ')' '{' LFOR ';' LBODY
	"missing { after for clause",

	% loadcore loadmaps loadwb loadsched loadchannels loadhash loadprintf loadstrings loadifacestuff loadseq loaddefers loadruntime package imports LFUNC LNAME '(' ')' ';' '{'
	"unexpected semicolon or newline before {",

	% loadcore loadmaps loadwb loadsched loadchannels loadhash loadprintf loadstrings loadifacestuff loadseq loaddefers loadruntime package imports LTYPE LNAME ';'
	"unexpected semicolon or newline in type declaration",

	% loadcore loadmaps loadwb loadsched loadchannels loadhash loadprintf loadstrings loadifacestuff loadseq loaddefers loadruntime package imports LCHAN '}'
	"unexpected } in channel type",
	
	% loadcore loadmaps loadwb loadsched loadchannels loadhash loadprintf loadstrings loadifacestuff loadseq loaddefers loadruntime package imports LCHAN ')'
	"unexpected ) in channel type",
	
	% loadcore loadmaps loadwb loadsched loadchannels loadhash loadprintf loadstrings loadifacestuff loadseq loaddefers loadruntime package imports LCHAN ','
	"unexpected comma in channel type",

	% loadcore loadmaps loadwb loadsched loadchannels loadhash loadprintf loadstrings loadifacestuff loadseq loaddefers loadruntime package imports LFUNC LNAME '(' ')' '{' if_stmt ';' LELSE
	"unexpected semicolon or newline before else",

	% loadcore loadmaps loadwb loadsched loadchannels loadhash loadprintf loadstrings loadifacestuff loadseq loaddefers loadruntime package imports LTYPE LNAME LINTERFACE '{' LNAME ',' LNAME
	"name list not allowed in interface type",

	% loadcore loadmaps loadwb loadsched loadchannels loadhash loadprintf loadstrings loadifacestuff loadseq loaddefers loadruntime package imports LFUNC LNAME '(' ')' '{' LFOR LVAR LNAME '=' LNAME
	"var declaration not allowed in for initializer",

	% loadcore loadmaps loadwb loadsched loadchannels loadhash loadprintf loadstrings loadifacestuff loadseq loaddefers loadruntime package imports LVAR LNAME '[' ']' LNAME '{'
	"unexpected { at end of statement",

	% loadcore loadmaps loadwb loadsched loadchannels loadhash loadprintf loadstrings loadifacestuff loadseq loaddefers loadruntime package imports LFUNC LNAME '(' ')' '{' LVAR LNAME '[' ']' LNAME '{'
	"unexpected { at end of statement",
	
	% loadcore loadmaps loadwb loadsched loadchannels loadhash loadprintf loadstrings loadifacestuff loadseq loaddefers loadruntime package imports LFUNC LNAME '(' ')' '{' LDEFER LNAME ';'
	"argument to go/defer must be function call",
	
	% loadcore loadmaps loadwb loadsched loadchannels loadhash loadprintf loadstrings loadifacestuff loadseq loaddefers loadruntime package imports LVAR LNAME '=' LNAME '{' LNAME ';'
	"need trailing comma before newline in composite literal",
	
	% loadcore loadmaps loadwb loadsched loadchannels loadhash loadprintf loadstrings loadifacestuff loadseq loaddefers loadruntime package imports LVAR LNAME '=' comptype '{' LNAME ';'
	"need trailing comma before newline in composite literal",
	
	% loadcore loadmaps loadwb loadsched loadchannels loadhash loadprintf loadstrings loadifacestuff loadseq loaddefers loadruntime package imports LFUNC LNAME '(' ')' '{' LFUNC LNAME
	"nested func not allowed",

	% loadcore loadmaps loadwb loadsched loadchannels loadhash loadprintf loadstrings loadifacestuff loadseq loaddefers loadruntime package imports LFUNC LNAME '(' ')' '{' LIF if_header loop_body LELSE ';'
	"else must be followed by if or statement block"
};
