# example.net/pkgremoved@v0.1.0 refers to a package.
go get -d example.net/pkgremoved@v0.1.0

go list example.net/pkgremoved
stdout '^example.net/pkgremoved'

# When we resolve a new dependency on example.net/other,
# it will change the meaning of the path "example.net/pkgremoved"
# from a package (at v0.1.0) to only a module (at v0.2.0).
#
# If we simultaneously 'get' that module at the query "patch", the module should
# be upgraded to its patch release (v0.2.1) even though it no longer matches a
# package.

go get -d example.net/pkgremoved@patch example.net/other@v0.1.0

! go list example.net/pkgremoved

go list -m example.net/pkgremoved
stdout '^example.net/pkgremoved v0.2.1$'


-- go.mod --
module example

go 1.16

replace (
	example.net/other v0.1.0 => ./other
)
-- other/go.mod --
module example.net/other

go 1.16

require example.net/pkgremoved v0.2.0
-- other/other.go --
package other
