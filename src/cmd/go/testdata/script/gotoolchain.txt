[!GOOS:windows] [!exec:/bin/sh] skip
[!GOOS:windows] chmod 0755 $WORK/bin/go1.999testpath
[!GOOS:plan9] env PATH=$WORK/bin${:}$PATH
[GOOS:plan9] env path=$WORK/bin${:}$path
[GOOS:plan9] replace /bin/sh /bin/rc $WORK/bin/go1.999testpath

# Plain go version
go version
! stdout go1\.999

# GOTOOLCHAIN from PATH
env GOTOOLCHAIN=go1.999testpath
go version
[!GOOS:windows] stdout 'go1.999testpath here!'
[GOOS:windows] stdout 'pretend we ran .*go1.999testpath'

# GOTOOLCHAIN from PATH, with forced subprocess
env GOTOOLCHAIN=go1.999testpath
env GODEBUG=gotoolchainexec=0
go version
[!GOOS:windows] stdout 'go1.999testpath here!'
[GOOS:windows] stdout 'pretend we ran .*go1.999testpath'
env GODEBUG=

# GOTOOLCHAIN from network
env GOTOOLCHAIN=go1.999testmod
go version
stderr 'go: downloading go1.999testmod \(.*/.*\)'
[!GOOS:windows] stdout 'go1.999testmod here!'
[GOOS:windows] stdout 'pretend we ran .*go1.999testmod.*\\bin\\go'

# GOTOOLCHAIN from network, does not exist
env GOTOOLCHAIN=go1.9999x
! go version
stderr 'go: download go1.9999x for .*: toolchain not available'

# GOTOOLCHAIN=auto
env GOTOOLCHAIN=auto
env TESTGO_VERSION=go1.100 # set TESTGO_VERSION because devel is newer than everything

# toolchain line in go.mod
cp go119toolchain1999 go.mod
go version
stdout go1.999

# toolchain line in go.work
cp empty go.mod
cp go119toolchain1999 go.work
go version
stdout go1.999
rm go.work

# go version in go.mod
cp go1999 go.mod
go version
stdout go1.999

# go version in go.work
cp empty go.mod
cp go1999 go.work
go version
stdout go1.999
rm go.work

# GOTOOLCHAIN=auto falls back to local toolchain if newer than go line
env TESTGO_VERSION=go1.1000

# toolchain line in go.mod
cp go119toolchain1999 go.mod
go version
stdout go1.999

# toolchain line in go.work
cp empty go.mod
cp go119toolchain1999 go.work
go version
stdout go1.999
rm go.work

# go version in go.mod
cp go1999 go.mod
go version
! stdout go1.999

# go version in go.work
cp empty go.mod
cp go1999 go.work
go version
! stdout go1.999
rm go.work

# GOTOOLCHAIN=auto+go1.1000 falls back to go1.1000 if newer than go line
env TESTGO_VERSION=go1.1
env GOTOOLCHAIN=auto+go1.1000

# toolchain line in go.mod
cp go119toolchain1999 go.mod
go version
stdout go1.999

# toolchain line in go.work
cp empty go.mod
cp go119toolchain1999 go.work
go version
stdout go1.999
rm go.work

# go version in go.mod
cp go1999 go.mod
! go version
stderr go1.1000

# go version in go.work
cp empty go.mod
cp go1999 go.work
! go version
stderr go1.1000
rm go.work

# GOTOOLCHAIN=path refuses to download
env GOTOOLCHAIN=path
env TESTGO_VERSION=go1.19

cp go1999 go.mod
go version
stdout go1.999

cp go1999mod go.mod
! go version
stderr '^go: cannot find "go1.999mod" in PATH$'


-- empty --

-- go1999 --
go 1.999testpath

-- go1999mod --
go 1.999mod

-- go119 ---
go 1.19

-- go119toolchain1999 --
go 1.19
toolchain go1.999testpath

-- go1999toolchain119 --
go 1.999testpath
toolchain go1.19

-- $WORK/bin/go1.999testpath --
#!/bin/sh
echo go1.999testpath here!
-- $WORK/bin/go1.999testpath.bat --
This should say:
	@echo go1.999testpath here!
but exec.Command does not directly support batch files.
execGoToolchain in cmd/go/toolchain.go picks off versions
named go1.999test and instead of running them just runs
cmd /c "echo pretend we ran <file>".

Since the real toolchain will have an exe file and cmd is an
exe file, this seems like a good enough test.
Changing execGoToolchain to use cmd /c to run the batch file
hangs for unknown reasons.

