# Tests Issue #10500

[!race] skip
[short] skip  # Builds and runs a binary.


# Build and install binaries relevant to the test.
go install mtime sametime cmd/cgo


# Get the mtime of cmd/cgo. We just installed it, so we know that it is not
# stale and its mtime should not change even if other concurrent tests also
# reinstall it.
go tool -n cgo
cp stdout cgopath.txt
exec $GOPATH/bin/mtime cgopath.txt # get the mtime of the file whose name is in cgopath.txt
cp stdout cgotime_install1.txt


# As a baseline, ensure that 'go install cmd/cgo' is a no-op when it is not stale.
 # 'go test -i' should be equivalent to 'go install' on the dependencies,
 # so it should be a no-op only if 'go install' is itself a no-op.
go get cmd/cgo
exec $GOPATH/bin/mtime cgopath.txt # get the mtime of the file whose name is in cgopath.txt
cp stdout cgotime_install2.txt
exec $GOPATH/bin/sametime cgotime_install1.txt cgotime_install2.txt


# Now run 'go test -race -i' on an arbitrary package that uses cgo.
# It should not overwrite cmd/cgo.
 # For this test, we don't actually care whether 'go test -race -i' succeeds.
 # It may fail if GOROOT is read-only (perhaps it was installed as root).
 # We only care that it does not overwrite cmd/cgo regardless.
? go test -race -i runtime/race

exec $GOPATH/bin/mtime cgopath.txt # get the mtime of the file whose name is in cgopath.txt
cp stdout cgotime_after.txt
exec $GOPATH/bin/sametime cgotime_install1.txt cgotime_after.txt


-- mtime/mtime.go --
package main

import (
	"io/ioutil"
	"encoding/json"
	"fmt"
	"os"
	"strings"
)

func main() {
	b, err := ioutil.ReadFile(os.Args[1])
	if err != nil {
		fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
	}
	filename := strings.TrimSpace(string(b))
	info, err := os.Stat(filename)
	if err != nil {
		fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
	}
	if err := json.NewEncoder(os.Stdout).Encode(info.ModTime()); err != nil {
		fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
	}
}
-- sametime/sametime.go --
package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"os"
	"time"
)


func main() {
	var t1 time.Time
	b1, err := ioutil.ReadFile(os.Args[1])
	if err != nil {
		fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
	}
	if err := json.Unmarshal(b1, &t1); err != nil  {
		fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
	}

	var t2 time.Time
	b2, err := ioutil.ReadFile(os.Args[2])
	if err != nil {
		fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
	}
	if err := json.Unmarshal(b2, &t2); err != nil  {
		fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
	}

	if !t1.Equal(t2) {
		fmt.Fprintf(os.Stderr, "time in %v (%v) is not the same as time in %v (%v)", os.Args[1], t1, os.Args[2], t2)
		os.Exit(1)
	}
}
