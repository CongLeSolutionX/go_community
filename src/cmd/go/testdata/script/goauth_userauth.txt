# This test covers the HTTP authentication mechanism over GOAUTH by using a custom authenticator.
# See golang.org/issue/26232

[short] skip

env GOPROXY=direct
env GOSUMDB=off

# Use a custom authenticator to provide custom credentials
mkdir $WORK/bin
env PATH=$WORK/bin${:}$PATH
cd auth
go build -o $WORK/bin/my-auth$GOEXE .
cd ..

# With credentials from the my-auth binary, it should succeed.
env GOAUTH='my-auth'
cp go.mod.orig go.mod
go mod tidy
go list all
stdout vcs-test.golang.org/auth/or401
stdout vcs-test.golang.org/auth/or404

# Without credentials, downloading a module from a path that requires HTTPS
# basic auth should fail.
env GOAUTH='off'
cp go.mod.orig go.mod
! go mod tidy
stderr '^\tserver response: ACCESS DENIED, buddy$'
stderr '^\tserver response: File\? What file\?$'

# With credentials from the my-auth binary, it should succeed again.
env GOAUTH='my-auth'
cp go.mod.orig go.mod
go mod tidy
go list all
stdout vcs-test.golang.org/auth/or401
stdout vcs-test.golang.org/auth/or404

-- auth/main.go --
package main

import "fmt"

func main() {
        fmt.Println("https://vcs-test.golang.org")
        fmt.Println()
        fmt.Println("Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l")
        fmt.Println()
}

-- auth/go.mod --
module my-auth
-- go.mod.orig --
module private.example.com
-- main.go --
package useprivate

import (
	_ "vcs-test.golang.org/auth/or401"
	_ "vcs-test.golang.org/auth/or404"
)