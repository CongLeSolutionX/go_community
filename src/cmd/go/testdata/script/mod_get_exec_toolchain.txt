env TESTGO_VERSION=go1.1
env TESTGO_VERSION_SWITCH=1

# GOTOOLCHAIN=auto should run the newer toolchain
env GOTOOLCHAIN=auto
cp go.mod.new go.mod
go get rsc.io/needgo121 rsc.io/needgo122 rsc.io/needgo123 rsc.io/needall
stderr '^go: switching to go1.23.0$'
stderr '^go: added rsc.io/needall v0.0.1'
! stderr 'requires go >= 1.23'
grep 'go 1.23.0' go.mod

# GOTOOLCHAIN=min+auto should run the newer toolchain
env GOTOOLCHAIN=go1.21+auto
cp go.mod.new go.mod
go get rsc.io/needgo121 rsc.io/needgo122 rsc.io/needgo123 rsc.io/needall
stderr '^go: switching to go1.23.0$'
stderr '^go: added rsc.io/needall v0.0.1'
! stderr 'requires go >= 1.23'
grep 'go 1.23.0' go.mod

# GOTOOLCHAIN=go1.21 should NOT run the newer toolchain
env GOTOOLCHAIN=go1.21
cp go.mod.new go.mod
! go get rsc.io/needgo121 rsc.io/needgo122 rsc.io/needgo123 rsc.io/needall
! stderr '^go: switching to go1.23.10$'
stderr 'rsc.io/needgo122@v0.0.1 requires go >= 1.22'
stderr 'rsc.io/needgo123@v0.0.1 requires go >= 1.23'
stderr 'rsc.io/needall@v0.0.1 requires go >= 1.23'
stderr 'requires go >= 1.23'
! stderr 'requires go >= 1.21' # that's us!
cmp go.mod go.mod.new

# GOTOOLCHAIN=local should NOT run the newer toolchain
env TESTGO_VERSION=go1.21
env GOTOOLCHAIN=local
cp go.mod.new go.mod
! go get rsc.io/needgo121 rsc.io/needgo122 rsc.io/needgo123 rsc.io/needall
! stderr '^go: switching to go1.23.10$'
stderr 'rsc.io/needgo122@v0.0.1 requires go >= 1.22'
stderr 'rsc.io/needgo123@v0.0.1 requires go >= 1.23'
stderr 'rsc.io/needall@v0.0.1 requires go >= 1.23'
stderr 'requires go >= 1.23'
! stderr 'requires go >= 1.21' # that's us!
cmp go.mod go.mod.new

# Pretend to be an auto-updating version of Go 1.1.
# Unrealistic but lets us test how Go versions earlier than Go 1.21 are handled.

env TESTGO_VERSION=go1.1

# go@1.18 should resolve to 1.18 (1.18 is a release version / language version hybrid)
env GOTOOLCHAIN=auto
cp go.mod.new go.mod
go list -json -m -versions -mod=mod go@1.18
stdout '"Version": "1.18"'

# go get needgo118 should use 1.18
env GOTOOLCHAIN=local
cp go.mod.new go.mod
! go get rsc.io/needgo118
stderr 'go: rsc.io/needgo118@v0.0.1 requires go >= 1.18 \(running go 1.1; GOTOOLCHAIN=local\)'

env GOTOOLCHAIN=auto
cp go.mod.new go.mod
go get rsc.io/needgo118
stderr '^go: switching to go1.18$'

# go get go@1.18 should use 1.18
env GOTOOLCHAIN=local
cp go.mod.new go.mod
! go get go@1.18
stderr '^go: updating go.mod requires go >= 1.18 \(running go 1.1; GOTOOLCHAIN=local\)'

env GOTOOLCHAIN=auto
cp go.mod.new go.mod
go get go@1.18
stderr '^go: switching to go1.18$'

# go get go@1.18.1 should use 1.18.1 exactly, not a later release.
env GOTOOLCHAIN=local
cp go.mod.new go.mod
! go get go@1.18.1
stderr '^go: updating go.mod requires go >= 1.18.1 \(running go 1.1; GOTOOLCHAIN=local\)'

env GOTOOLCHAIN=auto
cp go.mod.new go.mod
go get go@1.18.1
stderr '^go: switching to go1.18.1$'

# go get needgo118 (says 'go 1.18') should use go 1.18 exactly, since that's a release.
env GOTOOLCHAIN=local
cp go.mod.new go.mod
! go get rsc.io/needgo118
stderr '^go: rsc.io/needgo118@v0.0.1 requires go >= 1.18 \(running go 1.1; GOTOOLCHAIN=local\)'

env GOTOOLCHAIN=auto
cp go.mod.new go.mod
go get rsc.io/needgo118
stderr '^go: switching to go1.18$'

# go get needgo118_3 (says 'go 1.18.3') should use go 1.18.3 exactly
env GOTOOLCHAIN=local
cp go.mod.new go.mod
! go get rsc.io/needgo1183
stderr '^go: rsc.io/needgo1183@v0.0.1 requires go >= 1.18.3 \(running go 1.1; GOTOOLCHAIN=local\)'

env GOTOOLCHAIN=auto
cp go.mod.new go.mod
? go get rsc.io/needgo1183
stderr '^go: switching to go1.18.3'

# Test language-only versions like Go 1.22.

# go get go@1.22 should resolve to the latest 1.22
env GOTOOLCHAIN=local
cp go.mod.new go.mod
! go get go@1.22
stderr '^go: updating go.mod requires go >= 1.22.9 \(running go 1.1; GOTOOLCHAIN=local\)'

env GOTOOLCHAIN=auto
cp go.mod.new go.mod
go get go@1.22
stderr '^go: switching to go1.22.9$'

# go get go@1.22rc1 should use 1.22rc1 exactly, not a later release.
env GOTOOLCHAIN=local
cp go.mod.new go.mod
! go get go@1.22rc1
stderr '^go: updating go.mod requires go >= 1.22rc1 \(running go 1.1; GOTOOLCHAIN=local\)'

env GOTOOLCHAIN=auto
cp go.mod.new go.mod
? go get go@1.22rc1
stderr '^go: switching to go1.22rc1$'

# go get go@1.22.1 should use 1.22.1 exactly, not a later release.
env GOTOOLCHAIN=local
cp go.mod.new go.mod
! go get go@1.22.1
stderr '^go: updating go.mod requires go >= 1.22.1 \(running go 1.1; GOTOOLCHAIN=local\)'

env GOTOOLCHAIN=auto
cp go.mod.new go.mod
? go get go@1.22.1
stderr '^go: switching to go1.22.1$'

# go get needgo122 (says 'go 1.22') should use 1.22.0, the earliest release we have available
# (ignoring prereleases).
env GOTOOLCHAIN=local
cp go.mod.new go.mod
! go get rsc.io/needgo122
stderr '^go: rsc.io/needgo122@v0.0.1 requires go >= 1.22 \(running go 1.1; GOTOOLCHAIN=local\)'

env GOTOOLCHAIN=auto
cp go.mod.new go.mod
? go get rsc.io/needgo122
stderr '^go: switching to go1.22.0$'

# go get needgo1223 (says 'go 1.22.3') should use go 1.22.3
env GOTOOLCHAIN=local
cp go.mod.new go.mod
! go get rsc.io/needgo1223
stderr '^go: rsc.io/needgo1223@v0.0.1 requires go >= 1.22.3 \(running go 1.1; GOTOOLCHAIN=local\)'

env GOTOOLCHAIN=auto
cp go.mod.new go.mod
? go get rsc.io/needgo1223
stderr '^go: switching to go1.22.3'

# go get needgo124 (says 'go 1.24') should use go 1.24rc1, the only version available
env GOTOOLCHAIN=local
cp go.mod.new go.mod
! go get rsc.io/needgo124
stderr '^go: rsc.io/needgo124@v0.0.1 requires go >= 1.24 \(running go 1.1; GOTOOLCHAIN=local\)'

env GOTOOLCHAIN=auto
cp go.mod.new go.mod
? go get rsc.io/needgo124
stderr '^go: switching to go1.24rc1'

-- go.mod.new --
module m

-- p.go --
package p
