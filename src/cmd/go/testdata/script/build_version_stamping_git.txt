# Test that the version of a binary is stamped using git tag information.
# See https://go.dev/issue/50603

[short] skip 'constructs a local git repo'
[!git] skip
[!net:github.com] skip 'does not actually use github.com because of insteadOf, but silence network check just in case'

# Redirect git to a test-specific .gitconfig.
# GIT_CONFIG_GLOBAL suffices for git 2.32.0 and newer.
# For older git versions we also set $HOME.
env GIT_CONFIG_GLOBAL=$WORK${/}home${/}gopher${/}.gitconfig
env HOME=$WORK${/}home${/}gopher
exec git config --global --show-origin user.name
stdout 'Go Gopher'

# Inject a local repo in place of a remote one, so that we can
# add commits to the repo partway through the test.
env GIT_ALLOW_PROTOCOL=file
env GOPRIVATE=github.com/golang/example

[!GOOS:windows] exec git config --global 'url.file://'$WORK'/repo.insteadOf' 'https://github.com/golang/example'
[GOOS:windows]  exec git config --global 'url.file:///'$WORK'/repo.insteadOf' 'https://github.com/golang/example'

cd $WORK/repo

# Use devel when git information is missing.
go build
go version -m example$GOEXE
stdout '\s+mod\s+github.com/golang/example\s+\(devel\)'
rm example

env GIT_AUTHOR_NAME='Go Gopher'
env GIT_AUTHOR_EMAIL='gopher@golang.org'
env GIT_COMMITTER_NAME=$GIT_AUTHOR_NAME
env GIT_COMMITTER_EMAIL=$GIT_AUTHOR_EMAIL

exec git init

env GIT_COMMITTER_DATE=2022-07-19T11:07:00-04:00
env GIT_AUTHOR_DATE=2022-07-19T11:07:00-04:00
exec git add .
exec git commit -m 'initial commit'
exec git branch -m main

# Use the pseudo version when no tags are present.
go build
go version -m example$GOEXE
stdout '\s+mod\s+github.com/golang/example\s+v0.0.0-20220719150700-35f8093c7081\s+'
rm example

# Use a pseudo version if the current tag is not a valid semantic version.
exec git tag 1.0.1
go build
go version -m example$GOEXE
stdout '\s+mod\s+github.com/golang/example\s+v0.0.0-20220719150700-35f8093c7081\s+'
rm example

# Use the current tag to stamp the version.
exec git tag v1.0.1
go build
go version -m example$GOEXE
stdout '\s+mod\s+github.com/golang/example\s+v1.0.1\s+'
rm example

# Use tag+dirty when there are uncomitted changes present.
cp $WORK/copy/README $WORK/repo/README
go build
go version -m example$GOEXE
stdout '\s+mod\s+github.com/golang/example\s+v1.0.1\+dirty'
rm example

env GIT_COMMITTER_DATE=2022-07-19T11:07:01-04:00
env GIT_AUTHOR_DATE=2022-07-19T11:07:01-04:00
exec git add .
exec git commit -m 'commit 2'

# Use the updated tag to stamp the version.
exec git tag v1.0.2
go build
go version -m example$GOEXE
stdout '\s+mod\s+github.com/golang/example\s+v1.0.2\s+'
rm example

env GIT_COMMITTER_DATE=2022-07-19T11:07:02-04:00
env GIT_AUTHOR_DATE=2022-07-19T11:07:02-04:00
mv README README2
exec git add .
exec git commit -m 'commit 3'

# Use a pseudo version when current commit doesn't match a tagged version.
go build
go version -m example$GOEXE
stdout '\s+mod\s+github.com/golang/example\s+v1.0.3-0.20220719150702-1f3fed7f4695\s+'
rm example

# Use pseudo+dirty when uncomitted changes are present.
mv README2 README3
go build
go version -m example$GOEXE
stdout '\s+mod\s+github.com/golang/example\s+v1.0.3-0.20220719150702-1f3fed7f4695\+dirty'
rm example

# Make sure we always use the previously tagged version at a untagged revision.
env GIT_COMMITTER_DATE=2022-07-19T11:07:03-04:00
env GIT_AUTHOR_DATE=2022-07-19T11:07:03-04:00
exec git add .
exec git commit -m 'commit 4'

mv README3 README4
env GIT_COMMITTER_DATE=2022-07-19T11:07:04-04:00
env GIT_AUTHOR_DATE=2022-07-19T11:07:04-04:00
exec git add .
exec git commit -m 'commit 5'
exec git tag v1.0.4
# Jump back to commit 4 which is untagged.
exec git checkout 9017a616f16218cb7b239561fdba7c163c4fdfaa
go build
go version -m example$GOEXE
stdout '\s+mod\s+github.com/golang/example\s+v1.0.3-0.20220719150703-9017a616f162\s+'
rm example

-- $WORK/repo/go.mod --
module github.com/golang/example

go 1.18
-- $WORK/repo/main.go --
package main

func main() {
}
-- $WORK/copy/README --
hello

-- $WORK/home/gopher/.gitconfig --
[user]
	name = Go Gopher
	email = gopher@golang.org

[remote "origin"]
    url = https://github.com/golang/example
    fetch = +refs/heads/*:refs/remotes/origin/*
