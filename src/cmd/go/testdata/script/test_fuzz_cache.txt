[short] skip

# Fuzz cache should not exist initially.
! exists $GOFUZZCACHE

# Fuzzing should work when cache is disabled.
env old=$GOFUZZCACHE
env GOFUZZCACHE=off
go test .
go test -timeout=100ms -parallel=1 -fuzz=FuzzY .
env GOFUZZCACHE=$old
! exists $GOFUZZCACHE

# Testing corpus and seed values should not write the cache.
go test .
! exists $GOFUZZCACHE

# Fuzzing should write interesting values to the cache.
go test -timeout=100ms -parallel=1 -fuzz=FuzzY .
go run contains_files.go $GOFUZZCACHE/example.com/y/FuzzY

# 'go clean -fuzzcache' should delete the cache.
go clean -fuzzcache
! exists $GOFUZZCACHE

-- go.mod --
module example.com/y

go 1.16
-- y_test.go --
package y

import "testing"

func FuzzY(f *testing.F) {
	f.Add([]byte("y"))
	f.Fuzz(func(t *testing.T, b []byte) {})
}
-- contains_files.go --
// +build ignore

package main

import (
	"fmt"
	"path/filepath"
	"io/ioutil"
	"os"
)

func main() {
	infos, err := ioutil.ReadDir(filepath.Clean(os.Args[1]))
	if err != nil {
		fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
	}
	if len(infos) == 0 {
		os.Exit(1)
	}
}
