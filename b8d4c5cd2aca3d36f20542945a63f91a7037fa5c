{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "eb484deb_bd95fead",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 14665
      },
      "writtenOn": "2022-05-03T13:41:09Z",
      "side": 1,
      "message": "Hi Matthew, a gentle ping ðŸ˜Š",
      "revId": "b8d4c5cd2aca3d36f20542945a63f91a7037fa5c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c37c7683_4744833e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-05-03T13:42:11Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003db8d4c5cd",
      "tag": "autogenerated:trybots~beginning",
      "revId": "b8d4c5cd2aca3d36f20542945a63f91a7037fa5c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "385b0e25_8dc9e259",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-05-03T13:53:43Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "c37c7683_4744833e",
      "tag": "autogenerated:trybots~happy",
      "revId": "b8d4c5cd2aca3d36f20542945a63f91a7037fa5c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6422a7e6_f167247a",
        "filename": "src/cmd/compile/internal/typecheck/typecheck.go",
        "patchSetId": 5
      },
      "lineNbr": 917,
      "author": {
        "id": 5440
      },
      "writtenOn": "2022-05-05T19:43:41Z",
      "side": 1,
      "message": "I don\u0027t think we want to do this. ir.Visit will recursively walk all underlying expressions too, which isn\u0027t what callers will expect. It also seems like unnecessary work.\n\nCan we do simply:\n\n```\nnp :\u003d \u0026n.X\nif dot, ok :\u003d (*np).(*ir.SelectorExpr); ok \u0026\u0026 (dot.Op() \u003d\u003d ir.ODOTMETH || dot.Op() \u003d\u003d ir.ODOTINTER) {\n  np \u003d \u0026dot.X // peel away method selector\n}\nif !anyCallOrChan(*np) {\n  return // callee expression (or receiver argument) has no side effects\n}\n\n// [replace *np with the spilled temp]\n```",
      "range": {
        "startLine": 900,
        "startChar": 0,
        "endLine": 917,
        "endChar": 3
      },
      "revId": "b8d4c5cd2aca3d36f20542945a63f91a7037fa5c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}