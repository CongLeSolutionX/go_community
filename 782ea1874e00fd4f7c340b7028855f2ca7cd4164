{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "450cb9c1_5537984f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-08-05T21:17:20Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003d782ea187",
      "tag": "autogenerated:trybots~beginning",
      "revId": "782ea1874e00fd4f7c340b7028855f2ca7cd4164",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "075217c5_763feb3a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-08-05T21:39:11Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "450cb9c1_5537984f",
      "tag": "autogenerated:trybots~happy",
      "revId": "782ea1874e00fd4f7c340b7028855f2ca7cd4164",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ef9fb334_f898079e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 28783
      },
      "writtenOn": "2021-08-06T18:03:22Z",
      "side": 1,
      "message": "Looks good!  (Pending review of previous CL in stack.)\n",
      "revId": "782ea1874e00fd4f7c340b7028855f2ca7cd4164",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fc387c68_c6a69e12",
        "filename": "src/cmd/compile/internal/ir/node.go",
        "patchSetId": 5
      },
      "lineNbr": 262,
      "author": {
        "id": 28783
      },
      "writtenOn": "2021-08-06T18:03:22Z",
      "side": 1,
      "message": "Maybe update while you\u0027re here:  change Rlist to Var (see ir.CaseClause)",
      "revId": "782ea1874e00fd4f7c340b7028855f2ca7cd4164",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a9bbfb91_1d27ce5e",
        "filename": "src/cmd/compile/internal/ir/node.go",
        "patchSetId": 5
      },
      "lineNbr": 262,
      "author": {
        "id": 5200
      },
      "writtenOn": "2021-08-09T16:19:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fc387c68_c6a69e12",
      "revId": "782ea1874e00fd4f7c340b7028855f2ca7cd4164",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1a685886_c5e6d02a",
        "filename": "src/cmd/compile/internal/noder/stencil.go",
        "patchSetId": 5
      },
      "lineNbr": 1167,
      "author": {
        "id": 28783
      },
      "writtenOn": "2021-08-06T18:03:22Z",
      "side": 1,
      "message": "Replace two lines with typed(m.List[i].Type(), dt)",
      "revId": "782ea1874e00fd4f7c340b7028855f2ca7cd4164",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5d9a7130_12953ade",
        "filename": "src/cmd/compile/internal/noder/stencil.go",
        "patchSetId": 5
      },
      "lineNbr": 1167,
      "author": {
        "id": 5200
      },
      "writtenOn": "2021-08-09T16:19:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1a685886_c5e6d02a",
      "revId": "782ea1874e00fd4f7c340b7028855f2ca7cd4164",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a1d65261_843f5d58",
        "filename": "src/cmd/compile/internal/noder/stencil.go",
        "patchSetId": 5
      },
      "lineNbr": 1689,
      "author": {
        "id": 28783
      },
      "writtenOn": "2021-08-09T04:27:30Z",
      "side": 1,
      "message": "Actually, unless I\u0027m missing something, it\u0027s not clear that c.Type() is not an interface.  It\u0027s an unusual case we can punt on for now, but a type arg can be an interface, which means c.Type() could be an interface.  I think at line 1153, you need to look at the substitute type, and not use itabs in that case (using a type assert, as I did found the bound calls at line 984.",
      "revId": "782ea1874e00fd4f7c340b7028855f2ca7cd4164",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d0dc3dea_82aac3a5",
        "filename": "src/cmd/compile/internal/typecheck/stmt.go",
        "patchSetId": 5
      },
      "lineNbr": 178,
      "author": {
        "id": 28783
      },
      "writtenOn": "2021-08-06T18:03:22Z",
      "side": 1,
      "message": "Add a similar case in transform.go: transformAssign() (see assignOK loop), for symmetry at least.  I think it may be needed if we could not transform something inside the expression being type asserted.",
      "revId": "782ea1874e00fd4f7c340b7028855f2ca7cd4164",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6b4e6f1d_d8bd689f",
        "filename": "src/cmd/compile/internal/typecheck/stmt.go",
        "patchSetId": 5
      },
      "lineNbr": 178,
      "author": {
        "id": 5200
      },
      "writtenOn": "2021-08-09T16:19:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d0dc3dea_82aac3a5",
      "revId": "782ea1874e00fd4f7c340b7028855f2ca7cd4164",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d02acade_dfd8f3fe",
        "filename": "src/cmd/compile/internal/walk/switch.go",
        "patchSetId": 5
      },
      "lineNbr": 384,
      "author": {
        "id": 28783
      },
      "writtenOn": "2021-08-06T18:03:22Z",
      "side": 1,
      "message": "Not sure if you need this TODO comment?  You already have documented in definition of DynamicTypeAssertExpr() what the meaning of T is, and when it is a itab (non-empty interface -\u003e non-interface case), and have code in SSA that uses it.  So, confusing that you mention it here.",
      "revId": "782ea1874e00fd4f7c340b7028855f2ca7cd4164",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "37eae864_44942363",
        "filename": "src/cmd/compile/internal/walk/switch.go",
        "patchSetId": 5
      },
      "lineNbr": 384,
      "author": {
        "id": 5200
      },
      "writtenOn": "2021-08-09T16:19:39Z",
      "side": 1,
      "message": "I was just thinking that having the T field be sometimes a *runtime._type and sometimes a *runtime.itab is confusing. It might be better to have the T field always be a *runtime._type and have a separate ITab field for the itab, if it is needed (as I did for ir.DynamicType).",
      "parentUuid": "d02acade_dfd8f3fe",
      "revId": "782ea1874e00fd4f7c340b7028855f2ca7cd4164",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "403d83af_ddec58d2",
        "filename": "test/typeparam/typeswitch1.go",
        "patchSetId": 5
      },
      "lineNbr": 9,
      "author": {
        "id": 28783
      },
      "writtenOn": "2021-08-06T18:03:22Z",
      "side": 1,
      "message": "This test seems to be a perfect subset of typeswitch2.go - maybe remove this one?",
      "revId": "782ea1874e00fd4f7c340b7028855f2ca7cd4164",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0f77f7ef_99dc6320",
        "filename": "test/typeparam/typeswitch1.go",
        "patchSetId": 5
      },
      "lineNbr": 9,
      "author": {
        "id": 5200
      },
      "writtenOn": "2021-08-09T16:19:39Z",
      "side": 1,
      "message": "One is a switch with a target variable, one is a switch without. I\u0027d rather leave both - they exercise some different code paths.",
      "parentUuid": "403d83af_ddec58d2",
      "revId": "782ea1874e00fd4f7c340b7028855f2ca7cd4164",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}