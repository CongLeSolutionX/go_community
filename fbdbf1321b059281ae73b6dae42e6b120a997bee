{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "b5e3b19d_e3ee6189",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-09-05T17:13:42Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003dfbdbf132\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "fbdbf1321b059281ae73b6dae42e6b120a997bee",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d17b56c6_c7fd8fff",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-09-05T17:26:05Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "b5e3b19d_e3ee6189",
      "tag": "autogenerated:trybots~happy",
      "revId": "fbdbf1321b059281ae73b6dae42e6b120a997bee",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f9b840f3_1705066e",
        "filename": "src/os/readfrom_linux.go",
        "patchSetId": 1
      },
      "lineNbr": 41,
      "author": {
        "id": 5206
      },
      "writtenOn": "2022-09-05T20:50:27Z",
      "side": 1,
      "message": "It seems to me that this case is already handled correctly, because internal/poll.CopyFileRange will check for EINVAL and do the right thing.  Given that this is going to be a very rare case, almost certainly a programmer error, is it really worth adding a check here?",
      "revId": "fbdbf1321b059281ae73b6dae42e6b120a997bee",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9bf00fff_bf04302b",
        "filename": "src/os/readfrom_linux.go",
        "patchSetId": 1
      },
      "lineNbr": 41,
      "author": {
        "id": 34725
      },
      "writtenOn": "2022-09-06T01:15:44Z",
      "side": 1,
      "message": "Yes, this case is already handled by internal/poll.CopyFileRange, which costs a system call, and this system call can be eliminated just as we check for O_APPEND of dst rather than calling copy_file_range(2) and catching the EBADF error.\n\nBesides, it\u0027s hard to say this kind of case is done by accident or on purpose, since io.Copy and File.ReadFrom currently allow this behavior and return the expected result instead of an error. Therefore, this could be an optimization here, IMO.",
      "parentUuid": "f9b840f3_1705066e",
      "revId": "fbdbf1321b059281ae73b6dae42e6b120a997bee",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "78dd9968_d26cf5a3",
        "filename": "src/os/readfrom_linux.go",
        "patchSetId": 1
      },
      "lineNbr": 41,
      "author": {
        "id": 5206
      },
      "writtenOn": "2022-09-07T01:54:13Z",
      "side": 1,
      "message": "I don\u0027t see any reason to add more code to handle a very unusual case that is already handled correctly.  Adding more code to optimize the rare case slows down (slightly) the common case.",
      "parentUuid": "9bf00fff_bf04302b",
      "revId": "fbdbf1321b059281ae73b6dae42e6b120a997bee",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3e6ec577_fa8466cc",
        "filename": "src/os/readfrom_linux.go",
        "patchSetId": 1
      },
      "lineNbr": 41,
      "author": {
        "id": 34725
      },
      "writtenOn": "2022-09-07T14:57:39Z",
      "side": 1,
      "message": "Fair enough, then we just add a new test case for it to prevent some future changes from breaking this current behavior, according to the guarantee of Go 1 backward compatibility.",
      "parentUuid": "78dd9968_d26cf5a3",
      "revId": "fbdbf1321b059281ae73b6dae42e6b120a997bee",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}