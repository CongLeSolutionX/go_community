{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "7175abba_90a28ab0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 13315
      },
      "writtenOn": "2021-09-29T15:20:35Z",
      "side": 1,
      "message": "Maybe: \"cmd/compile: combine RORW with logical ops on arm64\".",
      "revId": "5df4f83dc884a51f8153350710a6daa5fdd4bc2f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b74bf627_679e32d4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-09-29T06:02:04Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003d5df4f83d",
      "tag": "autogenerated:trybots~beginning",
      "revId": "5df4f83dc884a51f8153350710a6daa5fdd4bc2f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5342cfe8_86a92e9c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-09-29T06:13:10Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "b74bf627_679e32d4",
      "tag": "autogenerated:trybots~happy",
      "revId": "5df4f83dc884a51f8153350710a6daa5fdd4bc2f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d23fef6d_617b409c",
        "filename": "src/cmd/compile/internal/ssa/gen/ARM64.rules",
        "patchSetId": 1
      },
      "lineNbr": 1605,
      "author": {
        "id": 13315
      },
      "writtenOn": "2021-09-29T15:20:35Z",
      "side": 1,
      "message": "Some of those rules are only correct if it is producing a 32-bit (or smaller) value, as the LHS and the RHS produce different high bits. You probably need to check the value\u0027s type\u0027s size.",
      "revId": "5df4f83dc884a51f8153350710a6daa5fdd4bc2f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8488cceb_9d227171",
        "filename": "src/cmd/compile/internal/ssa/gen/ARM64.rules",
        "patchSetId": 1
      },
      "lineNbr": 1605,
      "author": {
        "id": 5200
      },
      "writtenOn": "2021-10-05T19:39:23Z",
      "side": 1,
      "message": "On a slight tangent, there\u0027s definitely something confusing about the availability of *W opcodes.\nFor instance, there\u0027s ADD but no ADDW. But there are both MUL and MULW. Are these actually distinctions in the instruction set? If the *W operations are real, what do they do the upper 32 bits of the destination?\n\nPossibly the answer here is to introduce ADDW opcodes, even if they are identical to ADD at the machine level. But maybe as Cherry said, relying on the width of the result type is enough.",
      "parentUuid": "d23fef6d_617b409c",
      "revId": "5df4f83dc884a51f8153350710a6daa5fdd4bc2f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1ffa5db2_5d965475",
        "filename": "src/cmd/compile/internal/ssa/gen/ARM64.rules",
        "patchSetId": 1
      },
      "lineNbr": 1605,
      "author": {
        "id": 13315
      },
      "writtenOn": "2021-10-05T19:47:03Z",
      "side": 1,
      "message": "I think the *W instructions always zero the upper 32 bits of the result.\n\nYes, we could add ADDW opcode if that helps. It could optimize int64(uint32(a+b))  to one instruction. (The cost is probably adding a bunch of rules like constant folding of ADDW.)",
      "parentUuid": "8488cceb_9d227171",
      "revId": "5df4f83dc884a51f8153350710a6daa5fdd4bc2f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9346074c_5de88923",
        "filename": "test/codegen/rotate.go",
        "patchSetId": 1
      },
      "lineNbr": 268,
      "author": {
        "id": 13315
      },
      "writtenOn": "2021-09-29T15:20:35Z",
      "side": 1,
      "message": "Put these in a new function.",
      "range": {
        "startLine": 251,
        "startChar": 0,
        "endLine": 268,
        "endChar": 2
      },
      "revId": "5df4f83dc884a51f8153350710a6daa5fdd4bc2f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}