{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "5f9bf001_371f036f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-08-24T13:04:36Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003d553b7a4c\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "553b7a4cac146f1da24b0391f66eb5e6e5a20aeb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eb97e927_029241b7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-08-24T13:17:41Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "5f9bf001_371f036f",
      "tag": "autogenerated:trybots~happy",
      "revId": "553b7a4cac146f1da24b0391f66eb5e6e5a20aeb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "34c84326_b4fa6c1e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5206
      },
      "writtenOn": "2023-08-24T17:56:30Z",
      "side": 1,
      "message": "Is there a way to write a test case for this?  If one of the later CLs includes a test for this, please mention that in the CL description.  Thanks.",
      "revId": "553b7a4cac146f1da24b0391f66eb5e6e5a20aeb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e73bca13_1e205080",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 65064
      },
      "writtenOn": "2023-08-25T13:44:04Z",
      "side": 1,
      "message": "Ifacemethod6 in https://go-review.googlesource.com/c/go/+/522438/2?usp\u003drelated-change fails because StructOf.func{1,2,3,4} are flagged as ReflectMethods.\n\nAdded a test for StructOf() itself and reworded the commit message. I hope things are more clear now.",
      "parentUuid": "34c84326_b4fa6c1e",
      "revId": "553b7a4cac146f1da24b0391f66eb5e6e5a20aeb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d0509213_698af761",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 13315
      },
      "writtenOn": "2023-08-25T15:15:27Z",
      "side": 1,
      "message": "I\u0027d suggest adding a deadcode test that explicitly uses StructOf. The tests in CL 522438 doesn\u0027t use it directly. (The reflect package using StructOf internally is an implementation detail and may change.)",
      "parentUuid": "e73bca13_1e205080",
      "revId": "553b7a4cac146f1da24b0391f66eb5e6e5a20aeb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dc3c9cd7_39fff26b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 65064
      },
      "writtenOn": "2023-08-25T19:29:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d0509213_698af761",
      "revId": "553b7a4cac146f1da24b0391f66eb5e6e5a20aeb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ca520471_e74d9d10",
        "filename": "src/cmd/compile/internal/walk/expr.go",
        "patchSetId": 2
      },
      "lineNbr": 960,
      "author": {
        "id": 13315
      },
      "writtenOn": "2023-08-24T20:09:23Z",
      "side": 1,
      "message": "Would be good to have a comment here.\n\nAlso, the use of Type.Method in StrucOf is only used when embedding an interface. But I don\u0027t think that code actually works? Maybe we could just delete that code instead?",
      "revId": "553b7a4cac146f1da24b0391f66eb5e6e5a20aeb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "19a819f4_e6a27e4c",
        "filename": "src/cmd/compile/internal/walk/expr.go",
        "patchSetId": 2
      },
      "lineNbr": 960,
      "author": {
        "id": 65064
      },
      "writtenOn": "2023-08-25T13:44:04Z",
      "side": 1,
      "message": "Added a comment.\n\nThe code in StructOf() does work. The following constructs closures StructOf.func3() and StructOf.func4():\n\n```\ntype I interface {\n        F()\n}\n\nfunc main() {\n        var i I\n        _ \u003d reflect.StructOf([]reflect.StructField{\n                {\n                        Anonymous: true,\n                        Name:      \"I\",\n                        Type:      reflect.TypeOf(\u0026i).Elem(),\n                },\n        })\n}\n```",
      "parentUuid": "ca520471_e74d9d10",
      "revId": "553b7a4cac146f1da24b0391f66eb5e6e5a20aeb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8da66e59_1b082d02",
        "filename": "src/cmd/compile/internal/walk/expr.go",
        "patchSetId": 2
      },
      "lineNbr": 960,
      "author": {
        "id": 13315
      },
      "writtenOn": "2023-08-25T15:15:27Z",
      "side": 1,
      "message": "By not working I meant the methods constructed by those closures on the newly-created struct don\u0027t actually do what it is expected. E.g. https://go.dev/play/p/ylJQTYY3DRM this results in a fatal error.",
      "parentUuid": "19a819f4_e6a27e4c",
      "revId": "553b7a4cac146f1da24b0391f66eb5e6e5a20aeb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f5433069_3dbef487",
        "filename": "src/cmd/compile/internal/walk/expr.go",
        "patchSetId": 2
      },
      "lineNbr": 960,
      "author": {
        "id": 65064
      },
      "writtenOn": "2023-08-25T19:29:35Z",
      "side": 1,
      "message": "Wow. It seems it was broken for a long time, and no one complained. Definitely a good candidate for removal. What do owners of reflect tell about that? Do they believe that StructOf needs a fix, or it needs unused parts removed?\n\nAnyway, let us not grow the scope of this patch series.",
      "parentUuid": "8da66e59_1b082d02",
      "revId": "553b7a4cac146f1da24b0391f66eb5e6e5a20aeb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cbded6bd_cf2e5a8d",
        "filename": "src/cmd/compile/internal/walk/expr.go",
        "patchSetId": 2
      },
      "lineNbr": 960,
      "author": {
        "id": 13315
      },
      "writtenOn": "2023-08-25T21:32:10Z",
      "side": 1,
      "message": "I looked at that code. Besides the obvious mistakes, it is non-trivial to make it possibly work. The main issue is that the main problem is that the method wrappers created by `reflect.MakeFunc` expects to be called with a closure calling convention, with a closure context passed in the context register. But methods are called with a different calling convention, without setting the closure register, because (besides this case) all methods are top level functions. So there is no way to pass that makefunc closure context.\n\nWe could perhaps use a global registry. Pre-define (say) 1000 unique PCs as entry points for the wrappers, and each time StructOf is called with an embedded interface method, we give it a unique PC and associate the PC with the closure context. But I don\u0027t really like that idea.\n\nAgreed that this doesn\u0027t need to be addressed in this CL.",
      "parentUuid": "f5433069_3dbef487",
      "revId": "553b7a4cac146f1da24b0391f66eb5e6e5a20aeb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}