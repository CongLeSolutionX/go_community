{
  "comments": [
    {
      "key": {
        "uuid": "aac5aa25_f43ff07f",
        "filename": "src/text/template/exec.go",
        "patchSetId": 2
      },
      "lineNbr": 833,
      "author": {
        "id": 5010
      },
      "writtenOn": "2015-10-14T03:38:46Z",
      "side": 1,
      "message": "What about this sentence? This change doesn\u0027t honor that intent.\nI don\u0027t think this fix is correct.",
      "revId": "2ca7d535dc36fd38fc48af4c3e8836f475131746",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "df39c202_6a47688f",
        "filename": "src/text/template/exec.go",
        "patchSetId": 2
      },
      "lineNbr": 833,
      "author": {
        "id": 7877
      },
      "writtenOn": "2015-10-14T03:42:01Z",
      "side": 1,
      "message": "Doesn\u0027t the underlying implementation of an interface (v.Elem()) contain all the interface methods?",
      "parentUuid": "aac5aa25_f43ff07f",
      "revId": "2ca7d535dc36fd38fc48af4c3e8836f475131746",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "df39c202_ea5a5864",
        "filename": "src/text/template/exec.go",
        "patchSetId": 2
      },
      "lineNbr": 833,
      "author": {
        "id": 7877
      },
      "writtenOn": "2015-10-14T03:44:11Z",
      "side": 1,
      "message": "On the other hand, if we have a pointer to struct T, where *T implements an interface, the loop will dereference to T which doesn\u0027t contain interface methods.\n\nI will think about it.",
      "parentUuid": "df39c202_6a47688f",
      "revId": "2ca7d535dc36fd38fc48af4c3e8836f475131746",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "aac5aa25_f4693077",
        "filename": "src/text/template/exec.go",
        "patchSetId": 2
      },
      "lineNbr": 833,
      "author": {
        "id": 5010
      },
      "writtenOn": "2015-10-14T04:19:40Z",
      "side": 1,
      "message": "Yeah, the *T T thing is what I was thinking of.\nI don\u0027t think modifying the indirect function itself will be a silver bullet here.",
      "parentUuid": "df39c202_ea5a5864",
      "revId": "2ca7d535dc36fd38fc48af4c3e8836f475131746",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "df39c202_ea6ff8e5",
        "filename": "src/text/template/exec.go",
        "patchSetId": 2
      },
      "lineNbr": 833,
      "author": {
        "id": 7877
      },
      "writtenOn": "2015-10-14T05:20:38Z",
      "side": 1,
      "message": "I\u0027ve analyzed all usages of indirect. As a result found new bugs (https://github.com/golang/go/issues/12924#issuecomment-147934612)\nadded new tests\n\nAll new use cases need a fix, so indirect is right place for the fix.\n\nApparently, it is safe to derefence *T to T, even if T doesn\u0027t implement an interface, because code that resolves a method calls reflect.Value.MethodByName on a pointer to the indirected value https://github.com/golang/go/blob/master/src/text/template/exec.go#L529-L535\n\nSo I think the fix is correct.",
      "parentUuid": "aac5aa25_f4693077",
      "revId": "2ca7d535dc36fd38fc48af4c3e8836f475131746",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "aac5aa25_94f1cc56",
        "filename": "src/text/template/exec.go",
        "patchSetId": 2
      },
      "lineNbr": 839,
      "author": {
        "id": 5010
      },
      "writtenOn": "2015-10-14T03:38:46Z",
      "side": 1,
      "message": "elem :\u003d v.Elem()\nif elem \u003d\u003d v {\n  break\n}\nv \u003d elem",
      "revId": "2ca7d535dc36fd38fc48af4c3e8836f475131746",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}