{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "e5587b71_201c83d5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 28783
      },
      "writtenOn": "2020-10-30T17:03:58Z",
      "side": 1,
      "message": "Looks great.  Thanks for creating this simpler version (and realizing that inlining would just work). \n Probably still want to wait for Keith to take a look, I think?\n",
      "revId": "fc2839a39e9ff4c5128d3db24c23f2e9dc558666",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "907a0728_74e37634",
        "filename": "src/cmd/compile/internal/gc/iexport.go",
        "patchSetId": 3
      },
      "lineNbr": 1180,
      "author": {
        "id": 5200
      },
      "writtenOn": "2020-11-05T23:40:37Z",
      "side": 1,
      "message": "It would be nice if this was documented at the OCASE enum entry in syntax.go.",
      "range": {
        "startLine": 1180,
        "startChar": 15,
        "endLine": 1180,
        "endChar": 24
      },
      "revId": "fc2839a39e9ff4c5128d3db24c23f2e9dc558666",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6e9561f6_372ec101",
        "filename": "src/cmd/compile/internal/gc/iexport.go",
        "patchSetId": 3
      },
      "lineNbr": 1180,
      "author": {
        "id": 5200
      },
      "writtenOn": "2020-11-05T23:40:37Z",
      "side": 1,
      "message": "This will break importers built at old CLs, right? Do we need to update users of the gcimporter?\nA similar thing came up in https://go-review.googlesource.com/c/go/+/259300 . Maybe not relevant here as we\u0027re not backporting this. Just curious how exactly we deal with versioning of .o files. See Cherry\u0027s Oct 9 comments on that CL.",
      "range": {
        "startLine": 1180,
        "startChar": 27,
        "endLine": 1180,
        "endChar": 33
      },
      "revId": "fc2839a39e9ff4c5128d3db24c23f2e9dc558666",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ba499f99_0bdb455e",
        "filename": "src/cmd/compile/internal/gc/iexport.go",
        "patchSetId": 3
      },
      "lineNbr": 1180,
      "author": {
        "id": 5440
      },
      "writtenOn": "2020-11-06T20:22:36Z",
      "side": 1,
      "message": "Dan documented that in golang.org/cl/266437.",
      "parentUuid": "907a0728_74e37634",
      "range": {
        "startLine": 1180,
        "startChar": 15,
        "endLine": 1180,
        "endChar": 24
      },
      "revId": "fc2839a39e9ff4c5128d3db24c23f2e9dc558666",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b8779784_f7f3494a",
        "filename": "src/cmd/compile/internal/gc/iexport.go",
        "patchSetId": 3
      },
      "lineNbr": 1180,
      "author": {
        "id": 5440
      },
      "writtenOn": "2020-11-06T20:22:36Z",
      "side": 1,
      "message": "\u003e This will break importers built at old CLs, right? Do we need to update users of the gcimporter?\n\nNo, inline bodies are part of the compiler-only extension data, not part of the ABI that gcimporter relies on. (Similar to how typeExt/methExt aren\u0027t visible to gcimporter.)\n\n\u003e Just curious how exactly we deal with versioning of .o files.\n\nThe export data has \"iexportVersion\" for versioning the export data that gcimporter depends on, but there\u0027s also compiler-specific data that only cmd/compile itself processes. The compiler-specific data is versioned via the compiler version number encoded in the .o file, and we require using the exact same compiler version for all compilation units.\n\nSee also \"Compiler-specific details\" at the top of iexport.go.",
      "parentUuid": "6e9561f6_372ec101",
      "range": {
        "startLine": 1180,
        "startChar": 27,
        "endLine": 1180,
        "endChar": 33
      },
      "revId": "fc2839a39e9ff4c5128d3db24c23f2e9dc558666",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5a0806d4_b0b54a9c",
        "filename": "test/fixedbugs/issue37837.dir/b.go",
        "patchSetId": 3
      },
      "lineNbr": 17,
      "author": {
        "id": 28783
      },
      "writtenOn": "2020-10-30T17:03:58Z",
      "side": 1,
      "message": "shart -\u003e short ? \n\nI\u0027m not sure what short variable is, I guess you mean the top-level pseudo variable?",
      "revId": "fc2839a39e9ff4c5128d3db24c23f2e9dc558666",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "28fbc11b_6d441171",
        "filename": "test/fixedbugs/issue37837.dir/b.go",
        "patchSetId": 3
      },
      "lineNbr": 17,
      "author": {
        "id": 5200
      },
      "writtenOn": "2020-11-05T23:40:37Z",
      "side": 1,
      "message": "I think he means unnamed arguments and/or return values.",
      "parentUuid": "5a0806d4_b0b54a9c",
      "revId": "fc2839a39e9ff4c5128d3db24c23f2e9dc558666",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8d3e6d7c_92ba7200",
        "filename": "test/fixedbugs/issue37837.dir/b.go",
        "patchSetId": 3
      },
      "lineNbr": 17,
      "author": {
        "id": 5440
      },
      "writtenOn": "2020-11-06T20:22:36Z",
      "side": 1,
      "message": "Oops, fixed.\n\n\"Short variable declaration\" is the Go spec\u0027s term for \":\u003d\". (As opposed to using \"var\" and \"\u003d\", which is just a \"variable declaration.\")",
      "parentUuid": "5a0806d4_b0b54a9c",
      "revId": "fc2839a39e9ff4c5128d3db24c23f2e9dc558666",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}