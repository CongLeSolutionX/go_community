{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "07cdf3b7_e0a7460b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-10-29T06:42:44Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003de8ce197f\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "e8ce197f39ca23ac915df14d8ebc5d5c2ed7feca",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "07f6dd7e_2982d1ad",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-10-29T06:56:09Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "07cdf3b7_e0a7460b",
      "tag": "autogenerated:trybots~happy",
      "revId": "e8ce197f39ca23ac915df14d8ebc5d5c2ed7feca",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a3fd9ab4_43923468",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 7392
      },
      "writtenOn": "2022-11-01T16:37:37Z",
      "side": 1,
      "message": "I\u0027d like to see more evidence that math.Log2 is the problem here. You could replace it with a table lookup and you should use a more comprehensive benchmark. But I think there\u0027s more low-hanging fruit in this conversion code (such as handling short numbers more efficiently).",
      "revId": "e8ce197f39ca23ac915df14d8ebc5d5c2ed7feca",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8e5c75a2_3901b404",
        "filename": "src/math/big/natconv.go",
        "patchSetId": 2
      },
      "lineNbr": 274,
      "author": {
        "id": 7392
      },
      "writtenOn": "2022-11-01T16:37:37Z",
      "side": 1,
      "message": "This is not correct: math.Log2 returns a value with a fractional part (it\u0027s a float64), so the result of the division will be smaller in some cases than with bits.Len.\n\nThus, using bits.Len will lead to a larger conversion buffer in some cases. That\u0027s not incorrect (the algorithm will work), but it\u0027s more conservative which means that there\u0027s more allocation in some cases, at least in theory.\n\nAlso, I doubt that math.Log2 is dominating the overall computation here - there\u0027s a lot of work needed to convert a larger number.\n\nIf math.Log2 truly is the bottleneck, since there\u0027s only 24 or so possible bases, the thing to do would be to replace the math.Log2 computation with a table lookup. But again, I am not (yet) convinced that this is the actual problem here.",
      "revId": "e8ce197f39ca23ac915df14d8ebc5d5c2ed7feca",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "436b4d86_a17e61ea",
        "filename": "src/math/big/natconv_test.go",
        "patchSetId": 2
      },
      "lineNbr": 468,
      "author": {
        "id": 7392
      },
      "writtenOn": "2022-11-01T16:37:37Z",
      "side": 1,
      "message": "This is a) not a very large number, and b) the conversion is always in the same base - there\u0027s not enough variety here for this benchmark to be in any way representative. I suspect the improvements seen are an artifact specific to this number and conversion.",
      "revId": "e8ce197f39ca23ac915df14d8ebc5d5c2ed7feca",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}