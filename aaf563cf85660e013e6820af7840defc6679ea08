{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "d6e094af_e827d1db",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 30
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-05-12T20:20:53Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003daaf563cf",
      "tag": "autogenerated:trybots~beginning",
      "revId": "aaf563cf85660e013e6820af7840defc6679ea08",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1cc91d0b_d4e8b9a9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 30
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-05-12T20:35:36Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "d6e094af_e827d1db",
      "tag": "autogenerated:trybots~happy",
      "revId": "aaf563cf85660e013e6820af7840defc6679ea08",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6de284b2_f321ed14",
        "filename": "src/cmd/go/internal/modindex/index_format.txt",
        "patchSetId": 30
      },
      "lineNbr": 12,
      "author": {
        "id": 6365
      },
      "writtenOn": "2022-05-13T22:01:20Z",
      "side": 1,
      "message": "s/directory/package/ throughout, to match the terminology in the implementation?",
      "range": {
        "startLine": 12,
        "startChar": 21,
        "endLine": 12,
        "endChar": 32
      },
      "revId": "aaf563cf85660e013e6820af7840defc6679ea08",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "853663e5_5c88291f",
        "filename": "src/cmd/go/internal/modindex/index_format.txt",
        "patchSetId": 30
      },
      "lineNbr": 18,
      "author": {
        "id": 6365
      },
      "writtenOn": "2022-05-13T22:01:20Z",
      "side": 1,
      "message": "Do we need to resolve this TODO before we commit the index format, or at least before we turn on indexing by default? üòÖ",
      "range": {
        "startLine": 18,
        "startChar": 35,
        "endLine": 18,
        "endChar": 77
      },
      "revId": "aaf563cf85660e013e6820af7840defc6679ea08",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c5c0d7b6_92695294",
        "filename": "src/cmd/go/internal/modindex/index_format.txt",
        "patchSetId": 30
      },
      "lineNbr": 19,
      "author": {
        "id": 6365
      },
      "writtenOn": "2022-05-13T22:01:20Z",
      "side": 1,
      "message": "(nit) weird mix of tabs and spaces in this file",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 19,
        "endChar": 3
      },
      "revId": "aaf563cf85660e013e6820af7840defc6679ea08",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f53bb9ed_4f1b7a77",
        "filename": "src/cmd/go/internal/modindex/index_format.txt",
        "patchSetId": 30
      },
      "lineNbr": 29,
      "author": {
        "id": 6365
      },
      "writtenOn": "2022-05-13T22:01:20Z",
      "side": 1,
      "message": "I\u0027m curious ‚Äî why do we use uint32s for these? (We could pack the bits into a single uint8, or use two uint8s.)\n\n(Is this to avoid unaligned reads in mmapped files?)",
      "range": {
        "startLine": 28,
        "startChar": 0,
        "endLine": 29,
        "endChar": 24
      },
      "revId": "aaf563cf85660e013e6820af7840defc6679ea08",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6de18bae_1199c1cc",
        "filename": "src/cmd/go/internal/modindex/write.go",
        "patchSetId": 30
      },
      "lineNbr": 107,
      "author": {
        "id": 6365
      },
      "writtenOn": "2022-05-13T22:01:20Z",
      "side": 1,
      "message": "On 64-bit platforms there is a possibility that some of these `uint32` conversions could overflow, which could bury a problem that surfaces much later as some really weird behavior that looks like data corruption.\n\nI\u0027d be more comfortable with a conversion function that either returns an explicit error or calls base.Fatalf on overflow.",
      "revId": "aaf563cf85660e013e6820af7840defc6679ea08",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "485565ee_d7989a66",
        "filename": "src/cmd/go/internal/modindex/write.go",
        "patchSetId": 30
      },
      "lineNbr": 135,
      "author": {
        "id": 6365
      },
      "writtenOn": "2022-05-13T22:01:20Z",
      "side": 1,
      "message": "Should we verify that `s` doesn\u0027t contain any NUL-bytes?\n\n(The compiler ‚Äúmay disallow the NUL character‚Äù, but not every package that `cmd/go` processes will necessarily compile successfully, and we probably don\u0027t want corrupted behavior when we\u0027re processing a package would otherwise fail with a clear error message later.)",
      "range": {
        "startLine": 135,
        "startChar": 39,
        "endLine": 135,
        "endChar": 40
      },
      "revId": "aaf563cf85660e013e6820af7840defc6679ea08",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ad107217_1c2eb484",
        "filename": "src/cmd/go/internal/modindex/write.go",
        "patchSetId": 30
      },
      "lineNbr": 150,
      "author": {
        "id": 6365
      },
      "writtenOn": "2022-05-13T22:01:20Z",
      "side": 1,
      "message": "FWIW, I think the main alternatives would be to marshal into either an `io.WriteSeeker` or `io.WriterAt`.\n\nUnfortunately, I don\u0027t see any appropriate implementations of either of those in the standard library. üòû\n\n`*os.File` implements `io.WriteSeeker`, but it doesn\u0027t have great buffering behavior, and it doesn\u0027t look like either of `bufio.Writer` or `bytes.Buffer` supports `Seek` or `WriteAt`.\n\n(My `morebytes.File` does implement `io.WriteSeeker`, but I don\u0027t think we can vendor that in to `cmd`, and there\u0027s no way we can get it through the proposal process for 1.19. üòÖ)",
      "revId": "aaf563cf85660e013e6820af7840defc6679ea08",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}