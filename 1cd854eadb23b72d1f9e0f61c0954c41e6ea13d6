{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "cfd27f70_cb55c87b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-11-15T20:24:28Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003d1cd854ea\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "1cd854eadb23b72d1f9e0f61c0954c41e6ea13d6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a13fcd46_88dd77f9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-11-15T20:24:28Z",
      "side": 1,
      "message": "Superseded.",
      "parentUuid": "96675b41_80c8e3fc",
      "tag": "autogenerated:trybots~beginning",
      "revId": "1cd854eadb23b72d1f9e0f61c0954c41e6ea13d6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a259813e_c0845cfc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-11-15T20:39:00Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "cfd27f70_cb55c87b",
      "tag": "autogenerated:trybots~happy",
      "revId": "1cd854eadb23b72d1f9e0f61c0954c41e6ea13d6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d2a77fa4_affe68ad",
        "filename": "src/cmd/compile/internal/inline/inl.go",
        "patchSetId": 2
      },
      "lineNbr": 87,
      "author": {
        "id": 5167
      },
      "writtenOn": "2022-11-16T17:42:13Z",
      "side": 1,
      "message": "I\u0027m not sure what our convention is for debug flags, but does it make sense to fail rather than silently ignore if it\u0027s malformed?",
      "range": {
        "startLine": 87,
        "startChar": 72,
        "endLine": 87,
        "endChar": 104
      },
      "revId": "1cd854eadb23b72d1f9e0f61c0954c41e6ea13d6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0c7a1d0d_46e00470",
        "filename": "src/cmd/compile/internal/inline/inl.go",
        "patchSetId": 2
      },
      "lineNbr": 87,
      "author": {
        "id": 13315
      },
      "writtenOn": "2022-11-17T00:19:31Z",
      "side": 1,
      "message": "I\u0027m not sure either. For most debug flags I think we don\u0027t report errors. But it may be a good idea to do so. Done.",
      "parentUuid": "d2a77fa4_affe68ad",
      "range": {
        "startLine": 87,
        "startChar": 72,
        "endLine": 87,
        "endChar": 104
      },
      "revId": "1cd854eadb23b72d1f9e0f61c0954c41e6ea13d6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b789be59_100f7aff",
        "filename": "src/cmd/compile/internal/inline/inl.go",
        "patchSetId": 2
      },
      "lineNbr": 108,
      "author": {
        "id": 5167
      },
      "writtenOn": "2022-11-16T17:42:13Z",
      "side": 1,
      "message": "Simpler to just do candHotEdgeMap[csi] \u003d struct{}{} without the presence check?",
      "revId": "1cd854eadb23b72d1f9e0f61c0954c41e6ea13d6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fc983e0e_50696b24",
        "filename": "src/cmd/compile/internal/inline/inl.go",
        "patchSetId": 2
      },
      "lineNbr": 108,
      "author": {
        "id": 13315
      },
      "writtenOn": "2022-11-17T00:19:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b789be59_100f7aff",
      "revId": "1cd854eadb23b72d1f9e0f61c0954c41e6ea13d6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "442dab13_fa29d63b",
        "filename": "src/cmd/compile/internal/inline/inl.go",
        "patchSetId": 2
      },
      "lineNbr": 121,
      "author": {
        "id": 5167
      },
      "writtenOn": "2022-11-16T17:42:13Z",
      "side": 1,
      "message": "\"as a percent\"",
      "range": {
        "startLine": 121,
        "startChar": 53,
        "endLine": 121,
        "endChar": 62
      },
      "revId": "1cd854eadb23b72d1f9e0f61c0954c41e6ea13d6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4fb57b24_4347cbda",
        "filename": "src/cmd/compile/internal/inline/inl.go",
        "patchSetId": 2
      },
      "lineNbr": 121,
      "author": {
        "id": 13315
      },
      "writtenOn": "2022-11-17T00:19:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "442dab13_fa29d63b",
      "range": {
        "startLine": 121,
        "startChar": 53,
        "endLine": 121,
        "endChar": 62
      },
      "revId": "1cd854eadb23b72d1f9e0f61c0954c41e6ea13d6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0aae4395_17dc869f",
        "filename": "src/cmd/compile/internal/inline/inl.go",
        "patchSetId": 2
      },
      "lineNbr": 149,
      "author": {
        "id": 5167
      },
      "writtenOn": "2022-11-16T17:42:13Z",
      "side": 1,
      "message": "Leave a comment explaining the i+1 (basically what you said in the commit message)",
      "revId": "1cd854eadb23b72d1f9e0f61c0954c41e6ea13d6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dfeaa103_631f3836",
        "filename": "src/cmd/compile/internal/inline/inl.go",
        "patchSetId": 2
      },
      "lineNbr": 149,
      "author": {
        "id": 13315
      },
      "writtenOn": "2022-11-17T00:19:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0aae4395_17dc869f",
      "revId": "1cd854eadb23b72d1f9e0f61c0954c41e6ea13d6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a3ffea1e_ed072aaf",
        "filename": "src/cmd/compile/internal/inline/inl.go",
        "patchSetId": 2
      },
      "lineNbr": 152,
      "author": {
        "id": 5167
      },
      "writtenOn": "2022-11-16T17:42:13Z",
      "side": 1,
      "message": "I\u0027m not sure I understand this line. It seems like you\u0027d either want to return 0, nil or 100, nodes. I would think you\u0027d want 100, nodes. If inlineCDFHotCallSiteThresholdPercent is set really low, like 0 (or negative, though we catch that above), then the first iteration of the loop will exceed it and return, so you won\u0027t reach here. If inlineCDFHotCallSiteThresholdPercent is set high, like 100 (or higher) and perhaps floating point error means the final cumulative weight isn\u0027t quite 100, then you\u0027d fall through the loop to here and you\u0027d want to return everything, which is 100, nodes.",
      "revId": "1cd854eadb23b72d1f9e0f61c0954c41e6ea13d6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0662c194_5f139f92",
        "filename": "src/cmd/compile/internal/inline/inl.go",
        "patchSetId": 2
      },
      "lineNbr": 152,
      "author": {
        "id": 13315
      },
      "writtenOn": "2022-11-17T00:19:31Z",
      "side": 1,
      "message": "The threshold this function returns is a lower bound for edge weight percentage. If an edge has higher weight, it will be counted as hot. So (0, nodes) means \"all are hot\".\n\nWith this CL the threshold returned here isn\u0027t really used for comparing with the weights anymore. It doesn\u0027t really matter now. (Currently it only appears in a debug print. Maybe we should not return it.)",
      "parentUuid": "a3ffea1e_ed072aaf",
      "revId": "1cd854eadb23b72d1f9e0f61c0954c41e6ea13d6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "46057df4_034d4b25",
        "filename": "src/cmd/compile/internal/inline/inl.go",
        "patchSetId": 2
      },
      "lineNbr": 152,
      "author": {
        "id": 5167
      },
      "writtenOn": "2022-11-17T02:37:40Z",
      "side": 1,
      "message": "Oh I see...\n\nThat threshold is kind of weird. The set of edges with EWeight/TotalEdgeWeight * 100 \u003e\u003d threshold isn\u0027t necessarily the same as nodes[:i+1]. For example, if two edges have the same weight, and the first one we process above pushes us over, we\u0027ll return just the first one, but if we later look back by the threshold, it will include both.\n\nSince it\u0027s just for debugging, maybe it doesn\u0027t matter, though you don\u0027t want debugging info to be misleading either.\n\nI would at least leave a warning about this in the doc comment. Maybe in a follow-up, we can make PrintWeightedCallGraphDOT directly use the set of hot nodes.",
      "parentUuid": "0662c194_5f139f92",
      "revId": "1cd854eadb23b72d1f9e0f61c0954c41e6ea13d6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}