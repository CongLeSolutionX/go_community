{
  "comments": [
    {
      "key": {
        "uuid": "4817b7d7_be281a01",
        "filename": "src/cmd/go2go/testdata/go2path/src/maps/maps.go2",
        "patchSetId": 12
      },
      "lineNbr": 83,
      "author": {
        "id": 14570
      },
      "writtenOn": "2020-03-13T15:37:51Z",
      "side": 1,
      "message": "nit: I never liked this word because its connotations are ambiguous. (In English we would say \"filter out the junk\", but `Filter(m, IsJunk)` would do the opposite.)\n\nMaybe \"Keep\"?\n\nIn Common Lisp (admittedly a much more verbose language), this would be called DeleteIfNot.",
      "range": {
        "startLine": 83,
        "startChar": 5,
        "endLine": 83,
        "endChar": 11
      },
      "revId": "3625f63e729747200ccb8c5e301e1725ab42dc70",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "68fa8a9d_dfe55697",
        "filename": "src/cmd/go2go/testdata/go2path/src/maps/maps.go2",
        "patchSetId": 12
      },
      "lineNbr": 83,
      "author": {
        "id": 5206
      },
      "writtenOn": "2020-03-13T22:56:06Z",
      "side": 1,
      "message": "The names used here are the names used in Python.  E.g., https://docs.python.org/3/library/functions.html#filter.  See also std::ranges::views::filter in C++ (https://en.cppreference.com/w/cpp/ranges/filter_view).  Though of course C++ also has `std::copy_if`.  Javascript also has map, reduce, and filter.",
      "parentUuid": "4817b7d7_be281a01",
      "range": {
        "startLine": 83,
        "startChar": 5,
        "endLine": 83,
        "endChar": 11
      },
      "revId": "3625f63e729747200ccb8c5e301e1725ab42dc70",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "03435809_21877582",
        "filename": "src/go/go2go/go2go.go",
        "patchSetId": 12
      },
      "lineNbr": 82,
      "author": {
        "id": 30903
      },
      "writtenOn": "2020-03-15T20:15:07Z",
      "side": 1,
      "message": "The following code throw the above error:\n\nfunc Max(type T Comparable)(v0 T, vn ...T) T {\n\tswitch l :\u003d len(vn); {\n\tcase l \u003d\u003d 0:\n\t\treturn v0\n\tcase l \u003d\u003d 1:\n\t\tif v0 \u003e vn[0] { return v0 }\n\t\treturn vn[0]\n\tcase l \u003e 1:\n\t\treturn Max(vn[0], vn[1:]...)\n\t}\n}",
      "range": {
        "startLine": 82,
        "startChar": 0,
        "endLine": 82,
        "endChar": 71
      },
      "revId": "3625f63e729747200ccb8c5e301e1725ab42dc70",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c6759473_699197c5",
        "filename": "src/go/go2go/go2go.go",
        "patchSetId": 12
      },
      "lineNbr": 82,
      "author": {
        "id": 5210
      },
      "writtenOn": "2020-03-15T21:48:42Z",
      "side": 1,
      "message": "Thanks. I will look into this. It\u0027s a type inference issue.",
      "parentUuid": "03435809_21877582",
      "range": {
        "startLine": 82,
        "startChar": 0,
        "endLine": 82,
        "endChar": 71
      },
      "revId": "3625f63e729747200ccb8c5e301e1725ab42dc70",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5e23071c_44041bab",
        "filename": "src/go/go2go/go2go.go",
        "patchSetId": 12
      },
      "lineNbr": 82,
      "author": {
        "id": 30903
      },
      "writtenOn": "2020-03-15T22:48:36Z",
      "side": 1,
      "message": "Thanks. Note that the code example in case l \u003e 1 suppose to be \n\nvv :\u003d Max(vn[0], vn[1:]...)\nif v0 \u003e vv { return v0 }\nreturn vv\n\nwhich was an incorrect implementation, although it is irrelevant to type checking. \nSorry about that...",
      "parentUuid": "c6759473_699197c5",
      "range": {
        "startLine": 82,
        "startChar": 0,
        "endLine": 82,
        "endChar": 71
      },
      "revId": "3625f63e729747200ccb8c5e301e1725ab42dc70",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "73f34a7b_c0526d8d",
        "filename": "src/go/go2go/go2go.go",
        "patchSetId": 12
      },
      "lineNbr": 82,
      "author": {
        "id": 5210
      },
      "writtenOn": "2020-03-15T23:36:24Z",
      "side": 1,
      "message": "Sure. As an aside, I would write this function like this:\n\nfunc Max(type T Comparable)(x ...T) T {\n       var x0 T\n       if len(x) \u003e 0 {\n               x0 \u003d x[0]\n       }\n       if len(x) \u003e 1 {\n               if x1 :\u003d Max(x[1:]...); x1 \u003e x0 {\n                       return x1\n               }\n       }\n       return x0\n}\n\nI have fixed this in the type-checker. If you want to, you can apply manually the 2 changes in go/types/predicates.go, method Checker.identical0:\n\n1) Instead of (in the beginning):\n\nif x \u003d\u003d y {\n       return true\n}\n\nit should be:\n\nif tparams \u003d\u003d nil \u0026\u0026 x \u003d\u003d y {\n       return true\n}\n\n2) And if the *TypeParam case, instead of:\n\nif x :\u003d tparams[x.index]; x !\u003d nil {\n       return check.identical0(x, y, cmpTags, p, tparams)\n}\n\nit should be:\n\nif x :\u003d tparams[x.index]; x !\u003d nil {\n       if x \u003d\u003d y {\n              return true\n       }\n       return check.identical0(x, y, cmpTags, p, tparams)\n}",
      "parentUuid": "5e23071c_44041bab",
      "range": {
        "startLine": 82,
        "startChar": 0,
        "endLine": 82,
        "endChar": 71
      },
      "revId": "3625f63e729747200ccb8c5e301e1725ab42dc70",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f60c6a8d_740f3708",
        "filename": "src/go/go2go/go2go.go",
        "patchSetId": 12
      },
      "lineNbr": 82,
      "author": {
        "id": 30903
      },
      "writtenOn": "2020-03-15T23:43:56Z",
      "side": 1,
      "message": "Thanks for such a quick fix. Now it falls into the \"unimplemented Expr\" case.",
      "parentUuid": "73f34a7b_c0526d8d",
      "range": {
        "startLine": 82,
        "startChar": 0,
        "endLine": 82,
        "endChar": 71
      },
      "revId": "3625f63e729747200ccb8c5e301e1725ab42dc70",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c109fd7e_6b37dff0",
        "filename": "src/go/go2go/importer.go",
        "patchSetId": 12
      },
      "lineNbr": 88,
      "author": {
        "id": 30903
      },
      "writtenOn": "2020-03-13T14:15:56Z",
      "side": 1,
      "message": "I tried out this prototype, and I could not import my .go2 package.\nIt seems that imp.packages does not handle GO2PATH\u0027s import path properly. \n\nFor instance, I created a module called github.com/changkun/go2demo in the GO2PATH, which is $GO2PATH/src/github.com/changkun/go2demo, and there is a package inside this module called `contracts` which is in $GO2PATH/src/github.com/changkun/go2demo. When I try to import the contracts package in another package, say `algo` in $GO2PATH/src/github.com/changkun/go2demo/algo, then use `go2go test` and a circular import arises.\n\nMy first impression is the go/parser is buggy for import path (haven\u0027t looked into it yet), this comment is just an experience report for you, nothing serious since it is clear prototype is buggy of course.",
      "range": {
        "startLine": 88,
        "startChar": 0,
        "endLine": 88,
        "endChar": 75
      },
      "revId": "3625f63e729747200ccb8c5e301e1725ab42dc70",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2cc745b1_c552b1d1",
        "filename": "src/go/go2go/importer.go",
        "patchSetId": 12
      },
      "lineNbr": 88,
      "author": {
        "id": 5206
      },
      "writtenOn": "2020-03-13T22:49:47Z",
      "side": 1,
      "message": "I don\u0027t know if this is the problem, but note that the go2go tool doesn\u0027t support modules at all.  There is no plan to support modules.\n\nAlso, when looking at a specific package, both package level import and test imports are handled together.  An x_test package that imports y that imports x will work for the normal Go tool, but won\u0027t work for go2go.\n\nIf that doesn\u0027t help, send a tar file or something to iant@golang.org, and tell me exactly what commands you run, and I\u0027ll take a look.",
      "parentUuid": "c109fd7e_6b37dff0",
      "range": {
        "startLine": 88,
        "startChar": 0,
        "endLine": 88,
        "endChar": 75
      },
      "revId": "3625f63e729747200ccb8c5e301e1725ab42dc70",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f11bd131_ade26347",
        "filename": "src/go/go2go/importer.go",
        "patchSetId": 12
      },
      "lineNbr": 88,
      "author": {
        "id": 30903
      },
      "writtenOn": "2020-03-15T20:15:07Z",
      "side": 1,
      "message": "Thanks and the email was sent.",
      "parentUuid": "2cc745b1_c552b1d1",
      "range": {
        "startLine": 88,
        "startChar": 0,
        "endLine": 88,
        "endChar": 75
      },
      "revId": "3625f63e729747200ccb8c5e301e1725ab42dc70",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "77eb7fda_1e1c94fc",
        "filename": "src/go/go2go/instantiate.go",
        "patchSetId": 12
      },
      "lineNbr": 683,
      "author": {
        "id": 30903
      },
      "writtenOn": "2020-03-15T20:15:07Z",
      "side": 1,
      "message": "The following example throw the above error:\n\nfunc Max(type T Comparable)(s ...T) T {\n\tif len(s) \u003d\u003d 0 {\n\t\tpanic(\"Min of no elements\")\n\t}\n\tr :\u003d s[0]\n\tfor _, v :\u003d range s[1:] {\n\t\tif v \u003e r {\n\t\t\tr \u003d v\n\t\t}\n\t}\n\treturn r\n}",
      "revId": "3625f63e729747200ccb8c5e301e1725ab42dc70",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c9394bd3_b3e9e94e",
        "filename": "src/go/go2go/instantiate.go",
        "patchSetId": 12
      },
      "lineNbr": 683,
      "author": {
        "id": 5206
      },
      "writtenOn": "2020-03-17T06:09:23Z",
      "side": 1,
      "message": "Thanks for the report.  I fixed this in the internal tree.  It will be in the next push.",
      "parentUuid": "77eb7fda_1e1c94fc",
      "revId": "3625f63e729747200ccb8c5e301e1725ab42dc70",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "af2c02ee_fb87f330",
        "filename": "src/go/go2go/instantiate.go",
        "patchSetId": 12
      },
      "lineNbr": 683,
      "author": {
        "id": 30903
      },
      "writtenOn": "2020-03-17T20:07:41Z",
      "side": 1,
      "message": "Thanks for the confirmation. The reason matches what I suspect and I just found a fix.",
      "parentUuid": "c9394bd3_b3e9e94e",
      "revId": "3625f63e729747200ccb8c5e301e1725ab42dc70",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "50e279fc_2ce3676f",
        "filename": "src/go/parser/testdata/metrics.go2",
        "patchSetId": 12
      },
      "lineNbr": 60,
      "author": {
        "id": 30903
      },
      "writtenOn": "2020-03-13T15:13:44Z",
      "side": 1,
      "message": "The variadic type parameters is missing in the current design. An add-on design that follows the current contracts design could be:\n\ncontract Comparables(Ts...) {\n\tif  len(Ts) \u003e 0 {\n\t\tcontracts.Comparables(Ts[1:]...)\n\t} else {\n\t\tcontracts.Comparable(Ts[0])\n\t}\n}\n\ncontract Comparable(T) {\n\tT int, int8, int16, int32, int64,\n\t\tuint, uint8, uint16, uint32, uint64, uintptr,\n\t\tfloat32, float64,\n\t\tstring\n}\n\ntype Keys(type Ts ...Comparables) struct {\n    fs ...Ts\n}\n\ntype Metric(type Ts ...contracts.Comparables) struct {\n\tmu sync.Mutex\n\tm  map[Keys(Ts...)]int\n}\n\nfunc (m *Metric(Ts...)) Add(vs ...Ts) {\n\tm.mu.Lock()\n\tdefer m.mu.Unlock()\n\tif m.m \u003d\u003d nil {\n\t\tm.m \u003d make(map[Keys(Ts...))]int)\n\t}\n\tm[Keys(Ts...){vs...}]++\n}\n\n\n// To use the metric\n\nm :\u003d Metric(int, float64, string){m: make(map[Keys(int, float64, string)]int}\nm.Add(1, 2.0, \"variadic\")",
      "revId": "3625f63e729747200ccb8c5e301e1725ab42dc70",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "621df9a9_ffb3fca0",
        "filename": "src/go/parser/testdata/metrics.go2",
        "patchSetId": 12
      },
      "lineNbr": 60,
      "author": {
        "id": 30903
      },
      "writtenOn": "2020-03-13T17:21:33Z",
      "side": 1,
      "message": "the `contracts.` in this example should be deleted. sorry for the confusion",
      "parentUuid": "50e279fc_2ce3676f",
      "revId": "3625f63e729747200ccb8c5e301e1725ab42dc70",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4181b338_fcd5d205",
        "filename": "src/go/parser/testdata/metrics.go2",
        "patchSetId": 12
      },
      "lineNbr": 60,
      "author": {
        "id": 5206
      },
      "writtenOn": "2020-03-13T22:44:25Z",
      "side": 1,
      "message": "This CL is not a good place to discuss changes to the design draft.",
      "parentUuid": "621df9a9_ffb3fca0",
      "revId": "3625f63e729747200ccb8c5e301e1725ab42dc70",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "77ec9291_7a3d3078",
        "filename": "src/go/types/typexpr.go",
        "patchSetId": 12
      },
      "lineNbr": 144,
      "author": {
        "id": 30903
      },
      "writtenOn": "2020-03-18T09:27:56Z",
      "side": 1,
      "message": "Sorry for my spams, just found another type checking glitch:\n\ntype P(type T1, T2) struct {\n\tK T1\n\tV T2\n}\ntype Q(type T1, T2) struct {\n\ts []P(T1, T2)\n}\n\nfunc F1(type T1, T2) () Q(T1, T2) {\n\tvar s []P(T1, T2)            // OK\n\t// s :\u003d []P(T1, T2){}        // FAIL\n\t// s :\u003d *new([]P(T1, T2))    // FAIL\n\t// s :\u003d make([]P(T1, T2), 0) // FAIL\n\treturn Q(T1, T2){s}\n}",
      "revId": "3625f63e729747200ccb8c5e301e1725ab42dc70",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "21822002_3d5fe99d",
        "filename": "src/go/types/typexpr.go",
        "patchSetId": 12
      },
      "lineNbr": 144,
      "author": {
        "id": 5210
      },
      "writtenOn": "2020-03-18T22:53:43Z",
      "side": 1,
      "message": "Thanks. I will look at is ASAP.",
      "parentUuid": "77ec9291_7a3d3078",
      "revId": "3625f63e729747200ccb8c5e301e1725ab42dc70",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f4b5b839_debb7cb6",
        "filename": "src/go/types/typexpr.go",
        "patchSetId": 12
      },
      "lineNbr": 144,
      "author": {
        "id": 5210
      },
      "writtenOn": "2020-03-18T23:34:08Z",
      "side": 1,
      "message": "This is actually working as intended (or at least as best as it can):\n\nLet\u0027s consider the simplified case\n\n   type T(type P) struct{}\n\n   func _() {\n\t_ \u003d []T(int){}\n   }\n\nThe problem is that the parser doesn\u0027t know if this is ([]T)(int) or [](T(int)) (followed by {} in both cases), so it assumes the former ([]T) which fails. If you put parentheses there so it reads\n\n        _ \u003d [](T(int)){}\n\nit works. Same for your examples. I believe this is documented in the draft design.\n\nThe reason why the parentheses are not needed in your first case is that there we are in \"type context\"; i.e., the parser expects a type, not a conversion, and thus when seeing the \"(\" of \"(T1, T2)\" it can safely assume it is the instantiation of P. If we are not in type context, the parser cannot in general assume that a \"(\" is part of the type as that would be backward-incompatible. That is why []P(T) must be parsed as ([]P)(T). A concrete example would be: []byte(s). We want this to be a conversion of the string s to a []byte; not a slice of \"bytes instantiated with s\".\n\nIn the case of a {} following, one could argue that the parser should be smart enough to know that we have a type literal. But consider this case:\n\n   if T(P) { ...\n\nwhich is already problematic in regular Go. That said, perhaps ([]T(P){...}) should be ok and not require ([](T(P)){}). I\u0027ll look into this, but that\u0027s not urgent.\n\nFinally, for the built-in calls new and make, we do know that the first argument is a type, and thus we are in a type context. But the parser cannot know (somebody may declare a function new, or make). Only a type-checking time we can know. Thus, the parentheses are required as well.\n\n(It may be possible to have the type-checker \"re-associate\" the AST when type-checking, but I am not sure we want to go there quite yet.)",
      "parentUuid": "21822002_3d5fe99d",
      "revId": "3625f63e729747200ccb8c5e301e1725ab42dc70",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4aaee4e8_884d2ac3",
        "filename": "src/go/types/typexpr.go",
        "patchSetId": 12
      },
      "lineNbr": 144,
      "author": {
        "id": 30903
      },
      "writtenOn": "2020-03-19T07:38:31Z",
      "side": 1,
      "message": "Very interesting. Actually, I read the proposal and thought this could (at least) be avoid if we have two types because parentheses is only for type casting and cannot be applied to two or more type literals. Thank you for the thoughtful explanation, and looking forward to the future updates.",
      "parentUuid": "f4b5b839_debb7cb6",
      "revId": "3625f63e729747200ccb8c5e301e1725ab42dc70",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d9f26735_9d549990",
        "filename": "src/go/types/typexpr.go",
        "patchSetId": 12
      },
      "lineNbr": 144,
      "author": {
        "id": 5210
      },
      "writtenOn": "2020-03-19T20:03:50Z",
      "side": 1,
      "message": "I\u0027m not sure what you mean by \"having two types\".\n\nEither way, I have revisited the parser code, and I believe it\u0027s doing the right thing for now. But the question is if something like\n\ntype a(type T) []T\n\nfunc _() {\n    _ \u003d []a(int){}   // 1) this is not ok\n    _ \u003d [](a(int)){} // 2) this is ok\n}\n\nshould work because the only interpretation for 1) is that we have a composite literal. We can probably make it work by having the parser automatically re-associate ([]a)(int) to [](a(int)) if a { is following and we\u0027re not in a control flow header (such as an \u0027if\u0027 statement). But this is not urgent. It may also be difficult to understand which rules are applied when. But perhaps, if done well, it just feels \"right\" when writing code. I\u0027ll add it to my TODOs.",
      "parentUuid": "4aaee4e8_884d2ac3",
      "revId": "3625f63e729747200ccb8c5e301e1725ab42dc70",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "349de829_8af8a750",
        "filename": "src/go/types/typexpr.go",
        "patchSetId": 12
      },
      "lineNbr": 144,
      "author": {
        "id": 30903
      },
      "writtenOn": "2020-03-19T20:08:45Z",
      "side": 1,
      "message": "\"having two types\" \u003d\u003d\u003e \"have two type parameters\":\n\n    s :\u003d []P(T1, T2){}        // FAIL\n    s :\u003d *new([]P(T1, T2))    // FAIL\n    s :\u003d make([]P(T1, T2), 0) // FAIL\n\nTherefore I mean I can\u0027t imagine why []P(T1, T2) is a type casting.\n\nAnyway, glad to hear a TODO 😉",
      "parentUuid": "d9f26735_9d549990",
      "revId": "3625f63e729747200ccb8c5e301e1725ab42dc70",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f11d6c1f_fffe8d70",
        "filename": "src/go/types/typexpr.go",
        "patchSetId": 12
      },
      "lineNbr": 144,
      "author": {
        "id": 5210
      },
      "writtenOn": "2020-03-19T20:49:45Z",
      "side": 1,
      "message": "Ah, yes. Same issue: How smart should we be when parsing such expressions? We will have to write down the rules in the spec as well. We\u0027ll have to see if this is worth the complexity.",
      "parentUuid": "349de829_8af8a750",
      "revId": "3625f63e729747200ccb8c5e301e1725ab42dc70",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}