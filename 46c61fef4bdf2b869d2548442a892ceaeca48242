{
  "comments": [
    {
      "key": {
        "uuid": "0d91d04b_5994c9e8",
        "filename": "src/cmd/compile/README.md",
        "patchSetId": 1
      },
      "lineNbr": 1,
      "author": {
        "id": 5143
      },
      "writtenOn": "2018-04-03T16:03:51Z",
      "side": 1,
      "message": "This isn\u0027t quite true. Some important compiler-y packages live in cmd/internal, such as cmd/internal/src and cmd/internal/obj.",
      "revId": "46c61fef4bdf2b869d2548442a892ceaeca48242",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "41214473_daa8e97e",
        "filename": "src/cmd/compile/README.md",
        "patchSetId": 1
      },
      "lineNbr": 2,
      "author": {
        "id": 5143
      },
      "writtenOn": "2018-04-03T16:03:51Z",
      "side": 1,
      "message": "This is a bit simplistic. I\u0027d say it can currently be split into several parts:\n\n1. lexer and parser\n2. typechecking and front-end optimization, including escape analysis, inlining, lowering (e.g. of switch and range statements), and expression evaluation ordering\n3. SSA backend, including SSA analysis, generic optimizations, architecture-specific optimizations, and liveness analysis\n4. lower to machine code, emit object files, reflect data, export data\n\nCurrently, 1 happens in the new AST. It is translated into an old AST for step 2. That is translated into SSA form for step 3, which outputs obj.Progs. Step 4 works on those progs as well as lots of other artifacts from other steps.\n\nThe long term plan is to eliminate the old (middle-stage) AST. The work done with it will move into some combination of the new AST, the AST-to-SSA translation, and the SSA backend. This will take a long time.",
      "revId": "46c61fef4bdf2b869d2548442a892ceaeca48242",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "396dc207_a21ad1b9",
        "filename": "src/cmd/compile/README.md",
        "patchSetId": 1
      },
      "lineNbr": 2,
      "author": {
        "id": 5440
      },
      "writtenOn": "2018-04-03T17:17:40Z",
      "side": 1,
      "message": "I\u0027d just say \"is\". \"may be\" suggests to me that we might split it like this in the future, but I think it\u0027s fair to say it\u0027s split this way already.",
      "range": {
        "startLine": 2,
        "startChar": 0,
        "endLine": 2,
        "endChar": 6
      },
      "revId": "46c61fef4bdf2b869d2548442a892ceaeca48242",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "78688091_cc65bf23",
        "filename": "src/cmd/compile/README.md",
        "patchSetId": 1
      },
      "lineNbr": 6,
      "author": {
        "id": 5143
      },
      "writtenOn": "2018-04-03T16:03:51Z",
      "side": 1,
      "message": "This discussion of the middle-end should probably be eliminated in favor of more detail (above).",
      "revId": "46c61fef4bdf2b869d2548442a892ceaeca48242",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "39b1b16b_0fa491a0",
        "filename": "src/cmd/compile/README.md",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 24037
      },
      "writtenOn": "2018-04-03T06:11:07Z",
      "side": 1,
      "message": "Maybe this README, or one at cmd/compile/internal/gc (if it will get one in future), can tell that \"gc\" is a compiler name? Perhaps it\u0027s only my problem with \"gc\" being a compiler name (always wandered why it\u0027s not goc, as famous letter proposed \"goc\" as a compiler tool name; I mean, we don\u0027t have problems with names like javac or rustc, they are natural).\n\nI also believe several sources treat \"gc\" as a C compiler era of Go, like new compiler don\u0027t have a name. That is very awkward, sometimes I find saying \"6g\" more convenient (if x86_64 context is OK).",
      "revId": "46c61fef4bdf2b869d2548442a892ceaeca48242",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9915550f_fb6680c7",
        "filename": "src/cmd/compile/README.md",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 13550
      },
      "writtenOn": "2018-04-03T10:34:05Z",
      "side": 1,
      "message": "I\u0027m not sure what you want to add here. What I can do is add a historical note at the bottom, saying \"gc stands for \u0027go compiler\u0027, and here is why you\u0027ll see people talk about names like 6g\".",
      "parentUuid": "39b1b16b_0fa491a0",
      "revId": "46c61fef4bdf2b869d2548442a892ceaeca48242",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ebcc4e44_8642cfd7",
        "filename": "src/cmd/compile/README.md",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 24037
      },
      "writtenOn": "2018-04-03T06:11:07Z",
      "side": 1,
      "message": "I think \"cmd/compile/internal/types\" should be mentioned in this README, too.\nAnd it\u0027s used by both frontend and backend.",
      "range": {
        "startLine": 22,
        "startChar": 0,
        "endLine": 24,
        "endChar": 21
      },
      "revId": "46c61fef4bdf2b869d2548442a892ceaeca48242",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b52417e6_b32240dc",
        "filename": "src/cmd/compile/README.md",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 13550
      },
      "writtenOn": "2018-04-03T10:34:05Z",
      "side": 1,
      "message": "I thought about it, and wasn\u0027t sure - decided to leave it out since it doesn\u0027t take a major part. Will try to include it and see how it turns out, thanks.",
      "parentUuid": "ebcc4e44_8642cfd7",
      "range": {
        "startLine": 22,
        "startChar": 0,
        "endLine": 24,
        "endChar": 21
      },
      "revId": "46c61fef4bdf2b869d2548442a892ceaeca48242",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d3792df2_ef775bef",
        "filename": "src/cmd/compile/README.md",
        "patchSetId": 1
      },
      "lineNbr": 27,
      "author": {
        "id": 5440
      },
      "writtenOn": "2018-04-03T17:17:40Z",
      "side": 1,
      "message": "nit: Generally anything that falls under the category of making sure code is Go spec compliant is \"type checking\", which includes both of these specific checks.\n\nThe \"declared and not used\" case is interesting though, because it\u0027s actually done during walk, which (as I argue below) is part of the backend. This is a historical detail though, and we\u0027re trying to move all type checking into the frontend.",
      "range": {
        "startLine": 26,
        "startChar": 0,
        "endLine": 27,
        "endChar": 70
      },
      "revId": "46c61fef4bdf2b869d2548442a892ceaeca48242",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d34fe091_d974488a",
        "filename": "src/cmd/compile/README.md",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 5143
      },
      "writtenOn": "2018-04-03T16:03:51Z",
      "side": 1,
      "message": "I\u0027d call this \"refined based on type information\" instead of \"clarified\".",
      "revId": "46c61fef4bdf2b869d2548442a892ceaeca48242",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5aa1e0d7_bc555a27",
        "filename": "src/cmd/compile/README.md",
        "patchSetId": 1
      },
      "lineNbr": 31,
      "author": {
        "id": 5143
      },
      "writtenOn": "2018-04-03T16:03:51Z",
      "side": 1,
      "message": "I\u0027d call this \"lowering\".",
      "revId": "46c61fef4bdf2b869d2548442a892ceaeca48242",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "73403fd7_c8aa2292",
        "filename": "src/cmd/compile/README.md",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 24037
      },
      "writtenOn": "2018-04-03T06:11:07Z",
      "side": 1,
      "message": "IRC, there was `opt.go` file that was removed from the frontend at some point.\nIf it\u0027s undesirable to add more optimizations to the frontend, we could mention that.\n\nPersonally, I think important historical changes are also worth being mentioned, but this may lead to hard to read \"mix of facts from different time\" file.",
      "revId": "46c61fef4bdf2b869d2548442a892ceaeca48242",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eca30e61_f32fc03e",
        "filename": "src/cmd/compile/README.md",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 13550
      },
      "writtenOn": "2018-04-03T10:34:05Z",
      "side": 1,
      "message": "\u003e If it\u0027s undesirable to add more optimizations to the frontend, we could mention that.\n\nI don\u0027t know the answer to that question - I\u0027m sure someone else in this thread knows.\n\nAs for historical facts, they\u0027re at the bottom of the frontend section. Is there anything you find missing (besides the gc/6g stuff mentioned above)?",
      "parentUuid": "73403fd7_c8aa2292",
      "revId": "46c61fef4bdf2b869d2548442a892ceaeca48242",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "be6b45af_a5541d9e",
        "filename": "src/cmd/compile/README.md",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 5440
      },
      "writtenOn": "2018-04-03T17:17:40Z",
      "side": 1,
      "message": "Yeah, I\u0027d focus on historical facts that are still relevant today. I don\u0027t remember opt.go, for example, so I don\u0027t think it\u0027s worthwhile mentioning.",
      "parentUuid": "eca30e61_f32fc03e",
      "revId": "46c61fef4bdf2b869d2548442a892ceaeca48242",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "578afadd_b793d449",
        "filename": "src/cmd/compile/README.md",
        "patchSetId": 1
      },
      "lineNbr": 39,
      "author": {
        "id": 5440
      },
      "writtenOn": "2018-04-03T17:17:40Z",
      "side": 1,
      "message": "nit: I\u0027d probably put these warnings much higher up in the document. This is a really common source of confusion for new compiler devs, and it\u0027s not really front-end specific.\n\nI\u0027d probably also say \"mostly historical.\" There are technical advantages to having our own internal AST.",
      "revId": "46c61fef4bdf2b869d2548442a892ceaeca48242",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b620e221_3a68ee6d",
        "filename": "src/cmd/compile/README.md",
        "patchSetId": 1
      },
      "lineNbr": 50,
      "author": {
        "id": 5440
      },
      "writtenOn": "2018-04-03T17:17:40Z",
      "side": 1,
      "message": "For what it\u0027s worth, I generally think of everything that happens within \"funccompile\" and \"dumpLinkerObj\" as the \"backend\".\n\nSo I\u0027d argue that the backend begins with order and walk, which desugar the high-level AST constructs into lower-level ones. But over time, we expect to move more and more of these transformations into buildssa.",
      "revId": "46c61fef4bdf2b869d2548442a892ceaeca48242",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b5d875f0_3479b0a4",
        "filename": "src/cmd/compile/README.md",
        "patchSetId": 1
      },
      "lineNbr": 56,
      "author": {
        "id": 5143
      },
      "writtenOn": "2018-04-03T16:03:51Z",
      "side": 1,
      "message": "I usually use \"middle-end\" to refer to the order/walk/inl stuff. I\u0027d call this \"generic\" or \"architecture-independent\" optimization.",
      "revId": "46c61fef4bdf2b869d2548442a892ceaeca48242",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8ad1716e_f0db4c5f",
        "filename": "src/cmd/compile/README.md",
        "patchSetId": 1
      },
      "lineNbr": 56,
      "author": {
        "id": 5440
      },
      "writtenOn": "2018-04-03T17:17:40Z",
      "side": 1,
      "message": "I\u0027m not sure I\u0027ve ever heard the SSA passes referred to as the \"middle-end\". If anything, I think of inlining and escape analysis as the middle-end.",
      "range": {
        "startLine": 56,
        "startChar": 22,
        "endLine": 56,
        "endChar": 28
      },
      "revId": "46c61fef4bdf2b869d2548442a892ceaeca48242",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "90e22293_c2c27337",
        "filename": "src/cmd/compile/README.md",
        "patchSetId": 1
      },
      "lineNbr": 66,
      "author": {
        "id": 24037
      },
      "writtenOn": "2018-04-03T06:11:07Z",
      "side": 1,
      "message": "On amd64, memory operands are possible, so many load-store operations are combined. Those memory operations are usually suffixed with \"mem\" (ADDQmem, XORQmem, etc.).\n\nExample of machine-specific lowering:\nMost stores translated to one or more move instructions, or a duff copy.\nFor example, on amd64 8-byte store can be a MOVQ, 7-byte store requires a couple of MOVL.",
      "range": {
        "startLine": 66,
        "startChar": 0,
        "endLine": 66,
        "endChar": 34
      },
      "revId": "46c61fef4bdf2b869d2548442a892ceaeca48242",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "18ee95f2_0f08e93a",
        "filename": "src/cmd/compile/README.md",
        "patchSetId": 1
      },
      "lineNbr": 66,
      "author": {
        "id": 13550
      },
      "writtenOn": "2018-04-03T10:34:05Z",
      "side": 1,
      "message": "Thanks, this is very helpful.",
      "parentUuid": "90e22293_c2c27337",
      "range": {
        "startLine": 66,
        "startChar": 0,
        "endLine": 66,
        "endChar": 34
      },
      "revId": "46c61fef4bdf2b869d2548442a892ceaeca48242",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "992aca13_d629329b",
        "filename": "src/cmd/compile/README.md",
        "patchSetId": 1
      },
      "lineNbr": 69,
      "author": {
        "id": 24037
      },
      "writtenOn": "2018-04-03T06:11:07Z",
      "side": 1,
      "message": "They have some optimizations that are very ISA-specific.\nI think if there are too generic optimizations at lowered rule level that are duplicated\non each machine-dependent level, they should be refactored to generic level.\n\nThere are some interesting cases, like multiplication optimizations.\nMost simple rewrites are done at generic level and multi-instructions rewrite\nare performed at lowered level. For example, it\u0027s possible to use LEA on x86 to do some multiplication.",
      "range": {
        "startLine": 68,
        "startChar": 0,
        "endLine": 69,
        "endChar": 18
      },
      "revId": "46c61fef4bdf2b869d2548442a892ceaeca48242",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7ebcc5ca_0a2c8191",
        "filename": "src/cmd/compile/README.md",
        "patchSetId": 1
      },
      "lineNbr": 69,
      "author": {
        "id": 13550
      },
      "writtenOn": "2018-04-03T10:34:05Z",
      "side": 1,
      "message": "I\u0027m not sure how to amend the existing paragraphs, then. Perhaps it\u0027s going to be easier for me to understand if I ask specific question:\n\nDoes \"lower\" just replace generic ops with machine-specific ops, or does it also perform optimizations?\n\nWhen exactly are the generic and machine-specific rewrite rules applied? I assume that the generic ones run in the \"opt\" SSA pass, and that the machine-specific ones run as part of \"lower\".",
      "parentUuid": "992aca13_d629329b",
      "range": {
        "startLine": 68,
        "startChar": 0,
        "endLine": 69,
        "endChar": 18
      },
      "revId": "46c61fef4bdf2b869d2548442a892ceaeca48242",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "69039a7f_c1bc72ba",
        "filename": "src/cmd/compile/README.md",
        "patchSetId": 1
      },
      "lineNbr": 69,
      "author": {
        "id": 24037
      },
      "writtenOn": "2018-04-03T10:46:06Z",
      "side": 1,
      "message": "The rules that are being applied during \"lower\" are both lowering and\noptimizations.\n\nSome files (or maybe all, but I know that amd64 does for sure) mention something like:\n TODO: separate required lowering and optimization rules?\n\n\u003e When exactly are the generic and machine-specific rewrite rules applied? I assume that the generic ones run in the \"opt\" SSA pass, and that the machine-specific ones run as part of \"lower\".\n\nYour assumption is correct.\nIt\u0027s just \"lower\" does both lowering and optimizations.",
      "parentUuid": "7ebcc5ca_0a2c8191",
      "range": {
        "startLine": 68,
        "startChar": 0,
        "endLine": 69,
        "endChar": 18
      },
      "revId": "46c61fef4bdf2b869d2548442a892ceaeca48242",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1eaf1d3d_28ac3b6a",
        "filename": "src/cmd/compile/README.md",
        "patchSetId": 1
      },
      "lineNbr": 77,
      "author": {
        "id": 5440
      },
      "writtenOn": "2018-04-03T17:17:40Z",
      "side": 1,
      "message": "It\u0027s worth mentioning that before code generation, we also perform stack frame layout (i.e., deciding which variables go where on the stack) and creating pointer liveness maps (i.e., computing which on-stack pointers are live at each GC safe point).\n\nPerhaps also mention that generating actual machine code is handled by cmd/internal/obj (formerly known as \"liblink\").\n\nMaybe mention that somewhere in here we also generate DWARF debugging information. (I forget where exactly; it\u0027s changed over time, and I\u0027ve not done a great job keeping up with its evolution.)",
      "revId": "46c61fef4bdf2b869d2548442a892ceaeca48242",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cb66ddc8_28828ec4",
        "filename": "src/cmd/compile/README.md",
        "patchSetId": 1
      },
      "lineNbr": 79,
      "author": {
        "id": 5440
      },
      "writtenOn": "2018-04-03T17:17:40Z",
      "side": 1,
      "message": "Compiler intrinsics are recognized during buildssa.",
      "revId": "46c61fef4bdf2b869d2548442a892ceaeca48242",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    }
  ]
}