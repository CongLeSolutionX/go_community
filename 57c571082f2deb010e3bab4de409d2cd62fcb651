{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "50e6a69c_2a61a626",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 11500
      },
      "writtenOn": "2023-02-10T13:04:01Z",
      "side": 1,
      "message": "Proposal accepted. Updated the CL with the latest changes, and removed the DO NOT SUBMIT.",
      "revId": "57c571082f2deb010e3bab4de409d2cd62fcb651",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "89da1b02_ac640eb7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-02-10T15:30:06Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003d57c57108\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "57c571082f2deb010e3bab4de409d2cd62fcb651",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "16e6bc50_048f88f6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-02-10T15:41:19Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "89da1b02_ac640eb7",
      "tag": "autogenerated:trybots~happy",
      "revId": "57c571082f2deb010e3bab4de409d2cd62fcb651",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "542cab37_521f9756",
        "filename": "src/context/context.go",
        "patchSetId": 8
      },
      "lineNbr": 599,
      "author": {
        "id": 6400
      },
      "writtenOn": "2023-02-10T16:04:14Z",
      "side": 1,
      "message": "A couple of comments:\n\nI want to fixate on the verb \"may\".  May implies permission and conditionality.  Which one is intended?  I wonder if there is a better choice.\n\nIs this something we would want to guarantee?  Even though without this API change, it has been possible to obtain values from expired contexts, it seems like this also implies that the value also remains valid.  I\u0027m not sure we\u0027d want to advertise that implication.",
      "range": {
        "startLine": 597,
        "startChar": 0,
        "endLine": 599,
        "endChar": 44
      },
      "revId": "57c571082f2deb010e3bab4de409d2cd62fcb651",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8b1388b1_aad7b27d",
        "filename": "src/context/context.go",
        "patchSetId": 8
      },
      "lineNbr": 599,
      "author": {
        "id": 11500
      },
      "writtenOn": "2023-02-11T00:59:29Z",
      "side": 1,
      "message": "\u003e May implies permission and conditionality. Which one is intended? \n\nMy intent, if I understand the two options, was \"permission\". Should I change to \"can\"?\n\n\u003e Is this something we would want to guarantee? Even though without this API change, it has been possible to obtain values from expired contexts, it seems like this also implies that the value also remains valid. I\u0027m not sure we\u0027d want to advertise that implication.\n\nThis was discussed in the proposal. It is implicitly implied (pun not intended) by the fact that we already explicitly state that context and its values can be used by multiple goroutines, and by the fact there is no way to \"atomically use a value only if the context has not been canceled yet\", i.e. it is inherently racy, and therefore it falls on the values to guarantee that they can be safely used after the context is canceled. The example given in the proposal was that of a logger attached to the context: if the context is canceled and it was not safe to use the logger after this, there would be no non-racy way to use the logger because the context could be canceled between the time we check if the context is canceled, and the time the logger is used.\n\nWe are clarifying this by writing it out explicitly because 1) it may not be immediately evident to inexperienced users and 2) because the proposal potentially makes the probability of data races even higher in case of misuse of Context.",
      "parentUuid": "542cab37_521f9756",
      "range": {
        "startLine": 597,
        "startChar": 0,
        "endLine": 599,
        "endChar": 44
      },
      "revId": "57c571082f2deb010e3bab4de409d2cd62fcb651",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b569f991_1c940378",
        "filename": "src/context/context.go",
        "patchSetId": 8
      },
      "lineNbr": 599,
      "author": {
        "id": 6400
      },
      "writtenOn": "2023-02-11T06:23:45Z",
      "side": 1,
      "message": "That makes sense.  A couple of small comments:\n\n1. How about replacing \"still make\" with \"still have the possibility to make.\" That conveys both permission and conditionality.  I think also conveying conditionality is key to getting this right.\n\n2. Because a key-value pair\u0027s lifetime could be coupled to the context and no longer be usable (literally or meaningfully) after cancellation, I might add a second sentence to the effect of: \"Whether the key-value pairs remain usable is dependent on their implementation.\"",
      "parentUuid": "8b1388b1_aad7b27d",
      "range": {
        "startLine": 597,
        "startChar": 0,
        "endLine": 599,
        "endChar": 44
      },
      "revId": "57c571082f2deb010e3bab4de409d2cd62fcb651",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "24dd8074_a68c062a",
        "filename": "src/context/context.go",
        "patchSetId": 8
      },
      "lineNbr": 599,
      "author": {
        "id": 11500
      },
      "writtenOn": "2023-02-12T06:36:33Z",
      "side": 1,
      "message": "I am not sure I can appreciate the difference in meaning between the two, but it seems to me that \"Users of the returned context may still have the possibility to make use of value val after the context expires or is canceled.\" is a bit hard to read.\n\nAs for the second point, I would suggest avoiding \"usable\" as to my non-native ear that could suggest that the value \"can not be used\". Not sure what to replace it with though. \"Functional\"? \"Useful\"?",
      "parentUuid": "b569f991_1c940378",
      "range": {
        "startLine": 597,
        "startChar": 0,
        "endLine": 599,
        "endChar": 44
      },
      "revId": "57c571082f2deb010e3bab4de409d2cd62fcb651",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9382299b_6272be6a",
        "filename": "src/context/context.go",
        "patchSetId": 8
      },
      "lineNbr": 599,
      "author": {
        "id": 5265
      },
      "writtenOn": "2023-02-24T14:21:02Z",
      "side": 1,
      "message": "I would state this as:\n// Context cancellation does not affect the behavior of Value(key).\n\nWe shouldn\u0027t say anything about whether the values themselves are affected by cancellation. That is outside the control of this package; people can do whatever they want with their values.",
      "parentUuid": "24dd8074_a68c062a",
      "range": {
        "startLine": 597,
        "startChar": 0,
        "endLine": 599,
        "endChar": 44
      },
      "revId": "57c571082f2deb010e3bab4de409d2cd62fcb651",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c405f667_b21324e3",
        "filename": "src/context/context.go",
        "patchSetId": 8
      },
      "lineNbr": 599,
      "author": {
        "id": 11500
      },
      "writtenOn": "2023-02-27T00:50:13Z",
      "side": 1,
      "message": "I would really prefer positive guidance that explicitly states the point discussed above instead of negative one that requires the user to infer the implication that values must necessarily be still \"valid\" (even if not \"functional\") even after cancellation. The current documentation already implies this, the point here was to try to make it explicit.",
      "parentUuid": "9382299b_6272be6a",
      "range": {
        "startLine": 597,
        "startChar": 0,
        "endLine": 599,
        "endChar": 44
      },
      "revId": "57c571082f2deb010e3bab4de409d2cd62fcb651",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4a3b3085_4a9eb29f",
        "filename": "src/context/context.go",
        "patchSetId": 8
      },
      "lineNbr": 599,
      "author": {
        "id": 5265
      },
      "writtenOn": "2023-02-27T18:28:49Z",
      "side": 1,
      "message": "What does \"valid\" mean? All we can say is that Value(key) returns the same value before and after cancellation. This is already documented on Value as \"Successive calls to Value with the same key returns the same result\", so my inclination is not to add anything here. It seems like you want to document the interaction between cancellation and values, but this package does not specify that interaction at all, and I don\u0027t think it should.",
      "parentUuid": "c405f667_b21324e3",
      "range": {
        "startLine": 597,
        "startChar": 0,
        "endLine": 599,
        "endChar": 44
      },
      "revId": "57c571082f2deb010e3bab4de409d2cd62fcb651",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6a4efadd_d3eefd07",
        "filename": "src/context/context.go",
        "patchSetId": 8
      },
      "lineNbr": 647,
      "author": {
        "id": 6400
      },
      "writtenOn": "2023-02-10T16:04:14Z",
      "side": 1,
      "message": "Replace \"/\" with \"or\"",
      "range": {
        "startLine": 647,
        "startChar": 53,
        "endLine": 647,
        "endChar": 54
      },
      "revId": "57c571082f2deb010e3bab4de409d2cd62fcb651",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d286063f_b2a122a6",
        "filename": "src/context/context.go",
        "patchSetId": 8
      },
      "lineNbr": 647,
      "author": {
        "id": 6400
      },
      "writtenOn": "2023-02-10T16:04:14Z",
      "side": 1,
      "message": "Throughout this paragraph, I think you will need to substitute \"ctx\" with \"parent.\"",
      "range": {
        "startLine": 647,
        "startChar": 6,
        "endLine": 647,
        "endChar": 9
      },
      "revId": "57c571082f2deb010e3bab4de409d2cd62fcb651",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "463ad817_41b88dc8",
        "filename": "src/context/context.go",
        "patchSetId": 8
      },
      "lineNbr": 647,
      "author": {
        "id": 11500
      },
      "writtenOn": "2023-02-11T00:59:29Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "6a4efadd_d3eefd07",
      "range": {
        "startLine": 647,
        "startChar": 53,
        "endLine": 647,
        "endChar": 54
      },
      "revId": "57c571082f2deb010e3bab4de409d2cd62fcb651",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d759dd9a_681ae355",
        "filename": "src/context/context.go",
        "patchSetId": 8
      },
      "lineNbr": 647,
      "author": {
        "id": 11500
      },
      "writtenOn": "2023-02-11T00:59:29Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "d286063f_b2a122a6",
      "range": {
        "startLine": 647,
        "startChar": 6,
        "endLine": 647,
        "endChar": 9
      },
      "revId": "57c571082f2deb010e3bab4de409d2cd62fcb651",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7a1796b5_ad296c03",
        "filename": "src/context/context.go",
        "patchSetId": 8
      },
      "lineNbr": 662,
      "author": {
        "id": 6400
      },
      "writtenOn": "2023-02-10T16:04:14Z",
      "side": 1,
      "message": "Should we drop the receivers for those methods that don\u0027t use them?",
      "range": {
        "startLine": 662,
        "startChar": 6,
        "endLine": 662,
        "endChar": 8
      },
      "revId": "57c571082f2deb010e3bab4de409d2cd62fcb651",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9f7a233e_3590c3bc",
        "filename": "src/context/context.go",
        "patchSetId": 8
      },
      "lineNbr": 662,
      "author": {
        "id": 11500
      },
      "writtenOn": "2023-02-11T00:59:29Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "7a1796b5_ad296c03",
      "range": {
        "startLine": 662,
        "startChar": 6,
        "endLine": 662,
        "endChar": 8
      },
      "revId": "57c571082f2deb010e3bab4de409d2cd62fcb651",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}