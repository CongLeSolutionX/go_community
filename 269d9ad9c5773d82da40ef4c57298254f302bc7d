{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "eaab67af_2e8152f7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-01-30T00:25:53Z",
      "side": 1,
      "message": "Superseded.",
      "parentUuid": "8d55171d_462e023e",
      "tag": "autogenerated:trybots~beginning",
      "revId": "269d9ad9c5773d82da40ef4c57298254f302bc7d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "49212097_d674f76c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-01-30T00:25:53Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003d269d9ad9",
      "tag": "autogenerated:trybots~beginning",
      "revId": "269d9ad9c5773d82da40ef4c57298254f302bc7d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8716b9d0_31f0eca9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-01-30T00:38:21Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "49212097_d674f76c",
      "tag": "autogenerated:trybots~happy",
      "revId": "269d9ad9c5773d82da40ef4c57298254f302bc7d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b2fc1791_2552af67",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 5440
      },
      "writtenOn": "2022-01-31T17:32:53Z",
      "side": 1,
      "message": "Thanks, seems like a worthwhile optimization. Two initial comments though:\n\n1. Quickly skimming the new code, I don\u0027t immediately understand the approach. E.g., what does \"caseMap\" represent, why are we looking for the default case, etc. A comment or two explaining the overall idea would be helpful.\n\n2. I\u0027m thinking we can generalize the algorithm further to benefit some more cases:\n\nIf a switch statement has a const tag value, then look at all const case conditions and simply remove any const/non-equal cases. E.g., rewrite\n\n      switch 3 {\n      case 2, 3, 4, x:\n        foo()\n      }\n      \ninto:\n      \n      switch 3 {\n      case 3, x:\n        foo()\n      }\n\nIf all of a case\u0027s values are constant and non-equal (and thus would all be removed), then we can remove the CaseClause node entirely. (Need to be mindful about OFALL nodes, of course.)",
      "revId": "269d9ad9c5773d82da40ef4c57298254f302bc7d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}