{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "6d577537_721931b9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 9210
      },
      "writtenOn": "2022-04-05T23:16:47Z",
      "side": 1,
      "message": "Thank you for the review!",
      "revId": "bbdef02a3ffaa61b3eb3bb944ccaeafa70d4f003",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "094be0db_8155f2e3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-04-05T23:17:37Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003dbbdef02a",
      "tag": "autogenerated:trybots~beginning",
      "revId": "bbdef02a3ffaa61b3eb3bb944ccaeafa70d4f003",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4b498be3_69ecc874",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-04-05T23:30:28Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "094be0db_8155f2e3",
      "tag": "autogenerated:trybots~happy",
      "revId": "bbdef02a3ffaa61b3eb3bb944ccaeafa70d4f003",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fbfc0f9f_3441bcf2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 25391
      },
      "writtenOn": "2022-04-19T17:08:49Z",
      "side": 1,
      "message": "looks good overall!",
      "revId": "bbdef02a3ffaa61b3eb3bb944ccaeafa70d4f003",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2eb152dd_2f0db7a4",
        "filename": "src/runtime/mprof.go",
        "patchSetId": 5
      },
      "lineNbr": 769,
      "author": {
        "id": 25391
      },
      "writtenOn": "2022-04-19T17:08:49Z",
      "side": 1,
      "message": "nit: atomic.Int64?",
      "range": {
        "startLine": 769,
        "startChar": 9,
        "endLine": 769,
        "endChar": 14
      },
      "revId": "bbdef02a3ffaa61b3eb3bb944ccaeafa70d4f003",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2d1a8048_e206d28a",
        "filename": "src/runtime/mprof.go",
        "patchSetId": 5
      },
      "lineNbr": 769,
      "author": {
        "id": 9210
      },
      "writtenOn": "2022-04-19T19:21:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2eb152dd_2f0db7a4",
      "range": {
        "startLine": 769,
        "startChar": 9,
        "endLine": 769,
        "endChar": 14
      },
      "revId": "bbdef02a3ffaa61b3eb3bb944ccaeafa70d4f003",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "84881140_80cc344b",
        "filename": "src/runtime/mprof.go",
        "patchSetId": 5
      },
      "lineNbr": 777,
      "author": {
        "id": 25391
      },
      "writtenOn": "2022-04-19T17:08:49Z",
      "side": 1,
      "message": "nit: use iota and omit the latter numbers",
      "range": {
        "startLine": 777,
        "startChar": 30,
        "endLine": 777,
        "endChar": 31
      },
      "revId": "bbdef02a3ffaa61b3eb3bb944ccaeafa70d4f003",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c2c103da_558946d7",
        "filename": "src/runtime/mprof.go",
        "patchSetId": 5
      },
      "lineNbr": 777,
      "author": {
        "id": 9210
      },
      "writtenOn": "2022-04-19T19:21:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "84881140_80cc344b",
      "range": {
        "startLine": 777,
        "startChar": 30,
        "endLine": 777,
        "endChar": 31
      },
      "revId": "bbdef02a3ffaa61b3eb3bb944ccaeafa70d4f003",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ed882c36_fb4cbac0",
        "filename": "src/runtime/mprof.go",
        "patchSetId": 5
      },
      "lineNbr": 779,
      "author": {
        "id": 25391
      },
      "writtenOn": "2022-04-19T17:08:49Z",
      "side": 1,
      "message": "some more documentation on each of these, even just a line, would be nice.\n\neither that, or give this a specific type and document that type.",
      "range": {
        "startLine": 777,
        "startChar": 0,
        "endLine": 779,
        "endChar": 31
      },
      "revId": "bbdef02a3ffaa61b3eb3bb944ccaeafa70d4f003",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "098cb24f_cf2ee9a2",
        "filename": "src/runtime/mprof.go",
        "patchSetId": 5
      },
      "lineNbr": 779,
      "author": {
        "id": 9210
      },
      "writtenOn": "2022-04-19T19:21:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ed882c36_fb4cbac0",
      "range": {
        "startLine": 777,
        "startChar": 0,
        "endLine": 779,
        "endChar": 31
      },
      "revId": "bbdef02a3ffaa61b3eb3bb944ccaeafa70d4f003",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d7149afa_5cad6766",
        "filename": "src/runtime/mprof.go",
        "patchSetId": 5
      },
      "lineNbr": 787,
      "author": {
        "id": 25391
      },
      "writtenOn": "2022-04-19T17:08:49Z",
      "side": 1,
      "message": "I know this isn\u0027t currently documented for the sync version, but a comment here would help (I don\u0027t see what this is trying to do, is it just defensive?)",
      "range": {
        "startLine": 785,
        "startChar": 1,
        "endLine": 787,
        "endChar": 2
      },
      "revId": "bbdef02a3ffaa61b3eb3bb944ccaeafa70d4f003",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "733c969a_bb458797",
        "filename": "src/runtime/mprof.go",
        "patchSetId": 5
      },
      "lineNbr": 787,
      "author": {
        "id": 9210
      },
      "writtenOn": "2022-04-19T19:21:49Z",
      "side": 1,
      "message": "Done\n\nYes, being defensive. I had moved this code far away from the comment announcing the requirement. I\u0027ve rejoined them.",
      "parentUuid": "d7149afa_5cad6766",
      "range": {
        "startLine": 785,
        "startChar": 1,
        "endLine": 787,
        "endChar": 2
      },
      "revId": "bbdef02a3ffaa61b3eb3bb944ccaeafa70d4f003",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a5eb581f_ff8b2f78",
        "filename": "src/runtime/mprof.go",
        "patchSetId": 5
      },
      "lineNbr": 806,
      "author": {
        "id": 25391
      },
      "writtenOn": "2022-04-19T17:08:49Z",
      "side": 1,
      "message": "what does this case mean?",
      "range": {
        "startLine": 804,
        "startChar": 0,
        "endLine": 806,
        "endChar": 17
      },
      "revId": "bbdef02a3ffaa61b3eb3bb944ccaeafa70d4f003",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e71fd3d9_8eea32fb",
        "filename": "src/runtime/mprof.go",
        "patchSetId": 5
      },
      "lineNbr": 806,
      "author": {
        "id": 9210
      },
      "writtenOn": "2022-04-19T19:21:49Z",
      "side": 1,
      "message": "From runtime.GoroutineProfile, \"If len(p) \u003c n, GoroutineProfile does not change p and returns n, false.\". I\u0027ve added a comment .. it\u0027s a long and windy path back to where this function gets called.",
      "parentUuid": "a5eb581f_ff8b2f78",
      "range": {
        "startLine": 804,
        "startChar": 0,
        "endLine": 806,
        "endChar": 17
      },
      "revId": "bbdef02a3ffaa61b3eb3bb944ccaeafa70d4f003",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1c0ffcae_6c8a2756",
        "filename": "src/runtime/mprof.go",
        "patchSetId": 5
      },
      "lineNbr": 852,
      "author": {
        "id": 25391
      },
      "writtenOn": "2022-04-19T17:08:49Z",
      "side": 1,
      "message": "the world is stopped anyway so it doesn\u0027t matter much, but for slightly better code readability you could do this as an atomic swap.",
      "range": {
        "startLine": 851,
        "startChar": 1,
        "endLine": 852,
        "endChar": 47
      },
      "revId": "bbdef02a3ffaa61b3eb3bb944ccaeafa70d4f003",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b2f57db7_653bc4e9",
        "filename": "src/runtime/mprof.go",
        "patchSetId": 5
      },
      "lineNbr": 852,
      "author": {
        "id": 9210
      },
      "writtenOn": "2022-04-19T19:21:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1c0ffcae_6c8a2756",
      "range": {
        "startLine": 851,
        "startChar": 1,
        "endLine": 852,
        "endChar": 47
      },
      "revId": "bbdef02a3ffaa61b3eb3bb944ccaeafa70d4f003",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d4d12152_ef308fed",
        "filename": "src/runtime/mprof.go",
        "patchSetId": 5
      },
      "lineNbr": 883,
      "author": {
        "id": 25391
      },
      "writtenOn": "2022-04-19T17:08:49Z",
      "side": 1,
      "message": "nit: p.ptr() \u003d\u003d nil",
      "range": {
        "startLine": 883,
        "startChar": 13,
        "endLine": 883,
        "endChar": 19
      },
      "revId": "bbdef02a3ffaa61b3eb3bb944ccaeafa70d4f003",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c770ab45_2abac52e",
        "filename": "src/runtime/mprof.go",
        "patchSetId": 5
      },
      "lineNbr": 883,
      "author": {
        "id": 9210
      },
      "writtenOn": "2022-04-19T19:21:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d4d12152_ef308fed",
      "range": {
        "startLine": 883,
        "startChar": 13,
        "endLine": 883,
        "endChar": 19
      },
      "revId": "bbdef02a3ffaa61b3eb3bb944ccaeafa70d4f003",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2a240991_e7c5a127",
        "filename": "src/runtime/mprof.go",
        "patchSetId": 5
      },
      "lineNbr": 916,
      "author": {
        "id": 25391
      },
      "writtenOn": "2022-04-19T17:08:49Z",
      "side": 1,
      "message": "the osyield here is somewhat unfortunate. it seems to me like at least goroutineProfileWithLabelsConcurrent could use Gosched here, but other callers (like in execute) cannot.\n\nmaybe there\u0027s nothing to be done about this, because adding an argument to this function isn\u0027t really feasible. and it probably doesn\u0027t make a huge difference in the long run.",
      "range": {
        "startLine": 916,
        "startChar": 3,
        "endLine": 916,
        "endChar": 12
      },
      "revId": "bbdef02a3ffaa61b3eb3bb944ccaeafa70d4f003",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9f5f01d7_8782d88d",
        "filename": "src/runtime/mprof.go",
        "patchSetId": 5
      },
      "lineNbr": 916,
      "author": {
        "id": 9210
      },
      "writtenOn": "2022-04-19T19:21:49Z",
      "side": 1,
      "message": "I don\u0027t see the problem with adding an argument, and using a closure for forEachGRace. I\u0027ve tried it out (with Gosched for forEachGRace and osyield for the execute/exitsyscall calls).",
      "parentUuid": "2a240991_e7c5a127",
      "range": {
        "startLine": 916,
        "startChar": 3,
        "endLine": 916,
        "endChar": 12
      },
      "revId": "bbdef02a3ffaa61b3eb3bb944ccaeafa70d4f003",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ad255500_385fca84",
        "filename": "src/runtime/runtime2.go",
        "patchSetId": 5
      },
      "lineNbr": 491,
      "author": {
        "id": 25391
      },
      "writtenOn": "2022-04-19T17:08:49Z",
      "side": 1,
      "message": "this reads a bit like this is a boolean. maybe \"goroutineProfiled is the state of the goroutine with respect to a goroutine profile\"?",
      "range": {
        "startLine": 490,
        "startChar": 1,
        "endLine": 491,
        "endChar": 22
      },
      "revId": "bbdef02a3ffaa61b3eb3bb944ccaeafa70d4f003",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a92bbc0b_041a5230",
        "filename": "src/runtime/runtime2.go",
        "patchSetId": 5
      },
      "lineNbr": 491,
      "author": {
        "id": 9210
      },
      "writtenOn": "2022-04-19T19:21:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ad255500_385fca84",
      "range": {
        "startLine": 490,
        "startChar": 1,
        "endLine": 491,
        "endChar": 22
      },
      "revId": "bbdef02a3ffaa61b3eb3bb944ccaeafa70d4f003",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7cec1ec0_8eff9146",
        "filename": "src/runtime/runtime2.go",
        "patchSetId": 5
      },
      "lineNbr": 493,
      "author": {
        "id": 25391
      },
      "writtenOn": "2022-04-19T17:08:49Z",
      "side": 1,
      "message": "just curious, in case you didn\u0027t check, is there any \"free\" padding you can sneak this into to avoid a size increase for the struct?",
      "range": {
        "startLine": 490,
        "startChar": 1,
        "endLine": 493,
        "endChar": 0
      },
      "revId": "bbdef02a3ffaa61b3eb3bb944ccaeafa70d4f003",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6c93c19b_042d5a6a",
        "filename": "src/runtime/runtime2.go",
        "patchSetId": 5
      },
      "lineNbr": 493,
      "author": {
        "id": 9210
      },
      "writtenOn": "2022-04-19T19:21:49Z",
      "side": 1,
      "message": "I checked by hand, not with a tool. Looking again with `golang.org/x/tools/go/analysis/passes/fieldalignment/cmd/fieldalignment`, the message I get with linux/amd64 is \"src/runtime/runtime2.go:405:8: struct with 376 pointer bytes could be 144\", which I take to mean that moving all the pointers to the front would mean less scan work for the GC. (I\u0027m not planning to change the whole struct here.) I get a similar message for linux/386.\n\nWhen I mess up the alignment on purpose, I see \"struct of size 400 could be 392\".",
      "parentUuid": "7cec1ec0_8eff9146",
      "range": {
        "startLine": 490,
        "startChar": 1,
        "endLine": 493,
        "endChar": 0
      },
      "revId": "bbdef02a3ffaa61b3eb3bb944ccaeafa70d4f003",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1b20d9e2_5b42296c",
        "filename": "src/runtime/runtime2.go",
        "patchSetId": 5
      },
      "lineNbr": 493,
      "author": {
        "id": 25391
      },
      "writtenOn": "2022-04-19T19:55:33Z",
      "side": 1,
      "message": "thanks for checking. yeah I certainly don\u0027t expect you to reorder the struct. :) some of it is not easily reordered anyway because the offsets are hard-coded in runtime assembly.\n\nif this were an atomic.Uint8 would there be any space for it in some padding? sorry to focus on this so much, just want to make sure we explored every avenue to keep the g struct as small as possible, to keep the base goroutine overhead small.",
      "parentUuid": "6c93c19b_042d5a6a",
      "range": {
        "startLine": 490,
        "startChar": 1,
        "endLine": 493,
        "endChar": 0
      },
      "revId": "bbdef02a3ffaa61b3eb3bb944ccaeafa70d4f003",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1113d562_3b0e2c39",
        "filename": "src/runtime/runtime2.go",
        "patchSetId": 5
      },
      "lineNbr": 493,
      "author": {
        "id": 9210
      },
      "writtenOn": "2022-04-19T20:43:48Z",
      "side": 1,
      "message": "If atomic.Uint8 is what it appears (mergeable Or operations, and a Load that considers all \"previous\" Or ops ... I\u0027m not familiar with the underlying instructions), then I may be able to make that work. There are only two possible readers/writers: the profile coordinator, and the goroutine itself. And it\u0027s clear which one should win if they both indicate they\u0027d like to own the work (the goroutine should collect its own stack, and the coordinator should do something else), so we don\u0027t really need a direct CAS.\n\nI do see room for a free byte in runtime.g (two of them, in fact). I\u0027ll give it a shot. Are there well-known state machines for this (I don\u0027t know where to start looking) or is this the week I learn TLA+? Thank you!",
      "parentUuid": "1b20d9e2_5b42296c",
      "range": {
        "startLine": 490,
        "startChar": 1,
        "endLine": 493,
        "endChar": 0
      },
      "revId": "bbdef02a3ffaa61b3eb3bb944ccaeafa70d4f003",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d8f4789a_fdd855b1",
        "filename": "src/runtime/runtime2.go",
        "patchSetId": 5
      },
      "lineNbr": 493,
      "author": {
        "id": 25391
      },
      "writtenOn": "2022-04-19T21:12:01Z",
      "side": 1,
      "message": "*facepalm* wow, I totally missed that we\u0027re missing a CAS for uint8. I guess that\u0027s just not a widely-supported operation.\n\nyou certainly don\u0027t have to go through all the trouble of trying to make it work for that, very sorry about that. the Uint32 is fine. it\u0027s not *that* dire that we save 4 more bytes. :)",
      "parentUuid": "1113d562_3b0e2c39",
      "range": {
        "startLine": 490,
        "startChar": 1,
        "endLine": 493,
        "endChar": 0
      },
      "revId": "bbdef02a3ffaa61b3eb3bb944ccaeafa70d4f003",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3883c327_5cd786ab",
        "filename": "src/runtime/runtime2.go",
        "patchSetId": 5
      },
      "lineNbr": 493,
      "author": {
        "id": 9210
      },
      "writtenOn": "2022-04-20T17:53:02Z",
      "side": 1,
      "message": "I tried anyway, in CL 401336. Maybe there\u0027s a way to improve that code, but I don\u0027t like it as-is. I\u0027ll keep the uint32 with CAS.",
      "parentUuid": "d8f4789a_fdd855b1",
      "range": {
        "startLine": 490,
        "startChar": 1,
        "endLine": 493,
        "endChar": 0
      },
      "revId": "bbdef02a3ffaa61b3eb3bb944ccaeafa70d4f003",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}