{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "51678518_0ceea008",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 5206
      },
      "writtenOn": "2024-09-15T02:04:05Z",
      "side": 1,
      "message": "Adding Cherry for the cmd/link change.  I\u0027m not clear on why we have a condition that checks beforehand whether a relocation is unhandled, and then assumes that we do in fact handle the relocation.  Why not report an error if the relocation really is unhandled?  I\u0027m sure it\u0027s fine but would appreciate a look.  Thanks.",
      "revId": "d771f8e26735c4eb13f68ea8fa8c0294ca3a84ba",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6e196e34_9117bc90",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 13315
      },
      "writtenOn": "2024-09-17T15:34:35Z",
      "side": 1,
      "message": "I think that code is to catch unhandled SDYNIMPORT relocations which should have been rewritten in an early stage (dynrelocsym). The ones allowed here should be handled in the switch statement below, or the architecture-specific code called from it.\n\nI agree that this looks confusing. It may be better to just remove this and check for the unhandled SDYNIMPORT relocations in the cases below. For now, the change here is okay (assuming we actually want to do it this way).",
      "parentUuid": "51678518_0ceea008",
      "revId": "d771f8e26735c4eb13f68ea8fa8c0294ca3a84ba",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f2847e64_6645f916",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 3617945
      },
      "writtenOn": "2024-09-20T02:36:17Z",
      "side": 1,
      "message": "Abandoned\n\nAbandoning in favor of CL 614277.",
      "revId": "d771f8e26735c4eb13f68ea8fa8c0294ca3a84ba",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2f9dae37_ae4d2cb0",
        "filename": "src/internal/syscall/unix/version_android.go",
        "patchSetId": 7
      },
      "lineNbr": 49,
      "author": {
        "id": 13315
      },
      "writtenOn": "2024-09-17T15:34:35Z",
      "side": 1,
      "message": "I\u0027m concerned with calling libc functions this way. If libc is used one place in the program, it essentially requires using libc in a variety of places. The pure Go implementation may not work reliably anymore. (It might happen to work in some cases, but I don\u0027t think that\u0027s a good approach.)\n\nUsually Go binaries on Android are cgo binaries anyway, so it should be fine. But that is probably not the case for all binaries, e.g. some bootstrap binaries may be pure Go.\n\nCan we may this just a regular cgo call, which will be used when the binary is indeed a cgo binary? That should cover the majority of cases. For pure Go binaries we could just assume pidfd doesn\u0027t work.",
      "range": {
        "startLine": 46,
        "startChar": 0,
        "endLine": 49,
        "endChar": 82
      },
      "revId": "d771f8e26735c4eb13f68ea8fa8c0294ca3a84ba",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "00b7f0e6_6d1002fd",
        "filename": "src/internal/syscall/unix/version_android.go",
        "patchSetId": 7
      },
      "lineNbr": 49,
      "author": {
        "id": 3617945
      },
      "writtenOn": "2024-09-18T10:50:54Z",
      "side": 1,
      "message": "I chose this approach because I want it to work even if cgo is disabled, and it seems that the cgo-based approach doesn\u0027t work for the Go toolchain itself.\n\nI understand that this adds a dependency on libc.so, but since Android mandates PIE, we depend on the dynamic linker anyway. So depending also on libc.so is not a big problem, I think.",
      "parentUuid": "2f9dae37_ae4d2cb0",
      "range": {
        "startLine": 46,
        "startChar": 0,
        "endLine": 49,
        "endChar": 82
      },
      "revId": "d771f8e26735c4eb13f68ea8fa8c0294ca3a84ba",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f37c1da6_53e8d7e8",
        "filename": "src/internal/syscall/unix/version_android.go",
        "patchSetId": 7
      },
      "lineNbr": 49,
      "author": {
        "id": 13315
      },
      "writtenOn": "2024-09-18T15:56:30Z",
      "side": 1,
      "message": "It\u0027s not just the dependency of libc.so. Once libc is involved, it may affect things like thread-local storage, thread creation, signals, etc. On other platforms, e.g. Darwin, we use libc for not just syscalls, but also thread creation, managing TLS, etc.. I don\u0027t say this couldn\u0027t work, but it is certainly an unexplored territory.\n\nI think it is okay to say for pure-Go binaries like the toolchain, just don\u0027t use pidfd. And we only consider this for the cgo case.\n\nOr, is there any other way to check the version? Like, parsing auxv or some sysctl?\n\nAlso, does CL 592078 or something along the line help? We can test if pidfd actually works before using it.",
      "parentUuid": "00b7f0e6_6d1002fd",
      "range": {
        "startLine": 46,
        "startChar": 0,
        "endLine": 49,
        "endChar": 82
      },
      "revId": "d771f8e26735c4eb13f68ea8fa8c0294ca3a84ba",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5fd90722_8d7e70c2",
        "filename": "src/internal/syscall/unix/version_android.go",
        "patchSetId": 7
      },
      "lineNbr": 49,
      "author": {
        "id": 5206
      },
      "writtenOn": "2024-09-18T16:13:31Z",
      "side": 1,
      "message": "Testing pidfd is annoying, because on old versions Android calling the pidfd system call causes the process to get a SIGSYS signal.  That said, perhaps we could find out what happens if we explicitly ignore SIGSYS and then call pidfd.  Would it return ENOSYS in that case?  That might be a simpler fix, and wouldn\u0027t require knowing the android version.",
      "parentUuid": "f37c1da6_53e8d7e8",
      "range": {
        "startLine": 46,
        "startChar": 0,
        "endLine": 49,
        "endChar": 82
      },
      "revId": "d771f8e26735c4eb13f68ea8fa8c0294ca3a84ba",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "655c5f26_b85d6f3c",
        "filename": "src/internal/syscall/unix/version_android.go",
        "patchSetId": 7
      },
      "lineNbr": 49,
      "author": {
        "id": 3617945
      },
      "writtenOn": "2024-09-20T02:36:17Z",
      "side": 1,
      "message": "I thought ignoring signal would need more effort as Go has no functionality to ignore signals temporarily.\nAfter reading your comment, I found that it can be implemented easily by modifying sighandler. Thanks.",
      "parentUuid": "5fd90722_8d7e70c2",
      "range": {
        "startLine": 46,
        "startChar": 0,
        "endLine": 49,
        "endChar": 82
      },
      "revId": "d771f8e26735c4eb13f68ea8fa8c0294ca3a84ba",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one Code-Review+2 is required. Self review is not allowed."
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Code-Review=MAX,user=non_uploader"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "d771f8e26735c4eb13f68ea8fa8c0294ca3a84ba",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Do-Not-Review",
        "description": {
          "value": "Changes that have DO NOT REVIEW in their commit message are not submittable."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (R|r)(E|e)(V|v)(I|i)(E|e)(W|w).*\""
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:false"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (R|r)(E|e)(V|v)(I|i)(E|e)(W|w).*\""},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (R|r)(E|e)(V|v)(I|i)(E|e)(W|w).*\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "d771f8e26735c4eb13f68ea8fa8c0294ca3a84ba",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Do-Not-Submit",
        "description": {
          "value": "Changes that have DO NOT SUBMIT in their commit message are not submittable."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:false"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "d771f8e26735c4eb13f68ea8fa8c0294ca3a84ba",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Legacy-TryBots-Pass",
        "description": {
          "value": "Legacy TryBots must pass if requested, unless TryBot-Bypass+1 is set."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "label:Run-TryBot\u003dMAX"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:TryBot-Result\u003dMAX"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:TryBot-Bypass\u003dMAX"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Run-TryBot=MAX"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Run-TryBot=MAX"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:TryBot-Result=MAX"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:TryBot-Bypass=MAX"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "patchSetCommitId": "d771f8e26735c4eb13f68ea8fa8c0294ca3a84ba",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Matching-Subject-Prefix",
        "description": {
          "value": "Changes on release branches must have a matching [release-branch.go1.nn] subject prefix."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "branch:\"^refs/heads/release-branch.+\" -prefixsubject:\"[release-branch\""
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:false"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"branch:\"^refs/heads/release-branch.+\" -prefixsubject:\"[release-branch\""},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:\"^refs/heads/release-branch.+\"","prefixsubject:\"[release-branch\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "d771f8e26735c4eb13f68ea8fa8c0294ca3a84ba",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "No-Holds",
        "description": {
          "value": "Changes with a Hold+1 vote are not submittable."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "label:Hold\u003d1"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:false"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Hold=1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Hold=1"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "d771f8e26735c4eb13f68ea8fa8c0294ca3a84ba",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "No-Signed-off-by-Footer",
        "description": {
          "value": "Changes with a Signed-off-by footer are not submittable. See https://go.dev/wiki/CommitMessage."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "hasfooter:Signed-off-by"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:false"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"hasfooter:Signed-off-by"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["hasfooter:Signed-off-by"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "d771f8e26735c4eb13f68ea8fa8c0294ca3a84ba",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "No-Unresolved-Comments",
        "description": {
          "value": "Changes that have unresolved comments are not submittable, unless overriden by adding the hashtag allow-unresolved-comments."
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "-has:unresolved"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "hashtag:allow-unresolved-comments"
          }
        },
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-has:unresolved"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":["has:unresolved"],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"hashtag:allow-unresolved-comments"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["hashtag:allow-unresolved-comments"]}
      },
      "patchSetCommitId": "d771f8e26735c4eb13f68ea8fa8c0294ca3a84ba",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "No-Wait-Release",
        "description": {
          "value": "Changes with the hashtag wait-release cannot be submitted."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "hashtag:wait-release"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:false"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"hashtag:wait-release"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["hashtag:wait-release"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "d771f8e26735c4eb13f68ea8fa8c0294ca3a84ba",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval. Using a trusted device is required, see go/gerrit-onboarding#review-enforcement."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "d771f8e26735c4eb13f68ea8fa8c0294ca3a84ba",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "TryBots-Pass",
        "description": {
          "value": "Changes must pass LUCI TryBots unless TryBot-Bypass+1 is set. Vote Commit-Queue+1 to trigger TryBots."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:LUCI-TryBot-Result\u003dMAX"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:TryBot-Bypass\u003dMAX"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:LUCI-TryBot-Result=MAX"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:LUCI-TryBot-Result=MAX"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:TryBot-Bypass=MAX"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:TryBot-Bypass=MAX"]}
      },
      "patchSetCommitId": "d771f8e26735c4eb13f68ea8fa8c0294ca3a84ba",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}