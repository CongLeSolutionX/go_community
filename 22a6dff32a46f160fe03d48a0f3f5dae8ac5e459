{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "5bfffc57_2df7dde2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-07-31T17:46:43Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003d22a6dff3\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "22a6dff32a46f160fe03d48a0f3f5dae8ac5e459",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "04fe6678_eb09beb8",
        "filename": "src/sync/pool.go",
        "patchSetId": 2
      },
      "lineNbr": 200,
      "author": {
        "id": 5167
      },
      "writtenOn": "2023-07-31T17:59:00Z",
      "side": 1,
      "message": "I\u0027m surprised by this. For one, I would have thought the `p.localSize` below would trigger the nil panic in Pool.pin before calling runtime_LoadAcquintptr, which would be treated as a normal nil panic. But also, runtime_LoadAcquintptr is an intrinsic, so we don\u0027t actually go into the runtime at all.",
      "revId": "22a6dff32a46f160fe03d48a0f3f5dae8ac5e459",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2a697874_b7fefa48",
        "filename": "src/sync/pool.go",
        "patchSetId": 2
      },
      "lineNbr": 206,
      "author": {
        "id": 5167
      },
      "writtenOn": "2023-07-31T17:59:00Z",
      "side": 1,
      "message": "This seems like potentially a bigger problem. Even if the nil became a panic instead of a throw below, if user code recovers the panic, it\u0027ll leave this P in a pinned state.",
      "revId": "22a6dff32a46f160fe03d48a0f3f5dae8ac5e459",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}