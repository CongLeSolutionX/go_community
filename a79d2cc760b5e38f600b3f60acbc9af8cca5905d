{
  "comments": [
    {
      "key": {
        "uuid": "f2d46190_5ccbd257",
        "filename": "src/go/doc/reader.go",
        "patchSetId": 2
      },
      "lineNbr": 408,
      "author": {
        "id": 5210
      },
      "writtenOn": "2018-10-15T22:02:54Z",
      "side": 1,
      "message": "this comment also needs adjustment - actually you could just delete it",
      "range": {
        "startLine": 408,
        "startChar": 6,
        "endLine": 408,
        "endChar": 13
      },
      "revId": "a79d2cc760b5e38f600b3f60acbc9af8cca5905d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4d6c647c_7332d8b9",
        "filename": "src/go/doc/reader.go",
        "patchSetId": 2
      },
      "lineNbr": 408,
      "author": {
        "id": 24096
      },
      "writtenOn": "2018-10-16T10:04:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f2d46190_5ccbd257",
      "range": {
        "startLine": 408,
        "startChar": 6,
        "endLine": 408,
        "endChar": 13
      },
      "revId": "a79d2cc760b5e38f600b3f60acbc9af8cca5905d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7b2381c2_e2fbee2a",
        "filename": "src/go/doc/reader.go",
        "patchSetId": 2
      },
      "lineNbr": 418,
      "author": {
        "id": 5210
      },
      "writtenOn": "2018-10-15T22:02:54Z",
      "side": 1,
      "message": "A couple of issues with this comment, and the code:\n\n1) There\u0027s no struct handling here - this code is general (it just so happens that the example uses a struct, but it could be any other type).\n\n2) Why should this behavior be restricted to the first result? What if we have three results, two of which have types  declared externally, and one, say the middle one, is declared locally and named \u0027uint\u0027? There should be a clearer heuristic here.",
      "range": {
        "startLine": 418,
        "startChar": 18,
        "endLine": 418,
        "endChar": 26
      },
      "revId": "a79d2cc760b5e38f600b3f60acbc9af8cca5905d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d1b00263_6054e701",
        "filename": "src/go/doc/reader.go",
        "patchSetId": 2
      },
      "lineNbr": 418,
      "author": {
        "id": 24096
      },
      "writtenOn": "2018-10-16T10:04:03Z",
      "side": 1,
      "message": "\u003e 1) There\u0027s no struct handling here - this code is general (it just so happens that the example uses a struct, but it could be any other type).\n\nThat\u0027s true. Will it be fine if I do that in a separate CL ? Struct handling was never there and I would like to keep this CL just to tune the existing logic.\n\n\u003e  What if we have three results, two of which have types  declared externally, and one, say the middle one, is declared locally and named \u0027uint\u0027?\n\nRight, that breaks. Is there a way to know if a type has been declared locally or not ? \n\nTo just wrap up the context here:\n- Initially we just associated with the first visible return type.\n- Then, we wanted to disassociate if there were more than one local return types.\n- But then, we did not handle the case if those return types were predeclared types, in which case we want to ignore them.\n- But there can be a corner case, where a struct is redeclared as a predeclared type.\n\nSo I think in simple terms, the heuristic should be:\n- Iterate the result list,\n- Update the typ variable to point to the type as long as it is a local type (predeclared or not, doesn\u0027t matter).\n- The moment we have another local type, break loop, set some flag.\n- At end of loop, check if flag is not set, if yes then associate, else do not associate.\n\nDoes that sound okay ? This avoids the predeclared business altogether and still keeps all the logic intact. The only issue is how do we know whether something is a local type ? `lookupType` will always add the type if it does not exist in the map. So even types like string and uint get inserted. If we know that then we can easily distinguish cases where uint is declared locally and where uint is a normal predeclared type.",
      "parentUuid": "7b2381c2_e2fbee2a",
      "range": {
        "startLine": 418,
        "startChar": 18,
        "endLine": 418,
        "endChar": 26
      },
      "revId": "a79d2cc760b5e38f600b3f60acbc9af8cca5905d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "563f50d7_ba0d1978",
        "filename": "src/go/doc/reader.go",
        "patchSetId": 2
      },
      "lineNbr": 421,
      "author": {
        "id": 5210
      },
      "writtenOn": "2018-10-15T22:02:54Z",
      "side": 1,
      "message": "I\u0027m not sure this is needed after all. If you count the predeclared types separately, wouldn\u0027t it just work?",
      "range": {
        "startLine": 421,
        "startChar": 16,
        "endLine": 421,
        "endChar": 32
      },
      "revId": "a79d2cc760b5e38f600b3f60acbc9af8cca5905d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "954e8ce6_9fb82a9d",
        "filename": "src/go/doc/reader.go",
        "patchSetId": 2
      },
      "lineNbr": 421,
      "author": {
        "id": 24096
      },
      "writtenOn": "2018-10-16T10:04:03Z",
      "side": 1,
      "message": "This is needed to keep `typ` point to the correct type. Otherwise in a case like (T1, string), typ will always point to the last type, which is string, and then not get associated with T1.\n\nBut see my comment above, we actually don\u0027t need it as long as we know if something is a local type.",
      "parentUuid": "563f50d7_ba0d1978",
      "range": {
        "startLine": 421,
        "startChar": 16,
        "endLine": 421,
        "endChar": 32
      },
      "revId": "a79d2cc760b5e38f600b3f60acbc9af8cca5905d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7b58b2e1_7b5a59e4",
        "filename": "src/go/doc/reader.go",
        "patchSetId": 2
      },
      "lineNbr": 425,
      "author": {
        "id": 5210
      },
      "writtenOn": "2018-10-15T22:02:54Z",
      "side": 1,
      "message": "I\u0027d move this below numResultTypes++, this is secondary.",
      "range": {
        "startLine": 425,
        "startChar": 8,
        "endLine": 425,
        "endChar": 24
      },
      "revId": "a79d2cc760b5e38f600b3f60acbc9af8cca5905d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0011f2c6_9254395e",
        "filename": "src/go/doc/reader.go",
        "patchSetId": 2
      },
      "lineNbr": 425,
      "author": {
        "id": 24096
      },
      "writtenOn": "2018-10-16T10:04:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7b58b2e1_7b5a59e4",
      "range": {
        "startLine": 425,
        "startChar": 8,
        "endLine": 425,
        "endChar": 24
      },
      "revId": "a79d2cc760b5e38f600b3f60acbc9af8cca5905d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d8798789_0be9da66",
        "filename": "src/go/doc/reader.go",
        "patchSetId": 2
      },
      "lineNbr": 433,
      "author": {
        "id": 5210
      },
      "writtenOn": "2018-10-15T22:02:54Z",
      "side": 1,
      "message": "adjust comment again, as needed\n\n(also, make sure you use \u0027predeclared\u0027 not \u0027pre-declared\u0027 everywhere)",
      "range": {
        "startLine": 433,
        "startChar": 64,
        "endLine": 433,
        "endChar": 72
      },
      "revId": "a79d2cc760b5e38f600b3f60acbc9af8cca5905d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "42655ca6_0fae4238",
        "filename": "src/go/doc/reader.go",
        "patchSetId": 2
      },
      "lineNbr": 433,
      "author": {
        "id": 24096
      },
      "writtenOn": "2018-10-16T10:04:03Z",
      "side": 1,
      "message": "I think this comment is correct. It describes accurately what the code is doing. Perhaps I have missed something ?\n\nFixed the \"pre-declared\"",
      "parentUuid": "d8798789_0be9da66",
      "range": {
        "startLine": 433,
        "startChar": 64,
        "endLine": 433,
        "endChar": 72
      },
      "revId": "a79d2cc760b5e38f600b3f60acbc9af8cca5905d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    }
  ]
}