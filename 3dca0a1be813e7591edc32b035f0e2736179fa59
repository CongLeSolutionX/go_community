{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "1e728c5d_77242883",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-07-25T15:56:06Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003d3dca0a1b\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "3dca0a1be813e7591edc32b035f0e2736179fa59",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "93b84869_66c9e229",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-07-25T16:03:20Z",
      "side": 1,
      "message": "Build is still in progress... Status page: https://farmer.golang.org/try?commit\u003d3dca0a1b\nFailed on linux-386: https://storage.googleapis.com/go-build-log/3dca0a1b/linux-386_e3c1b6b3.log\nOther builds still in progress; subsequent failure notices suppressed until final report.\n\nConsult https://build.golang.org/ to see whether they are new failures. Keep in mind that TryBots currently test *exactly* your git commit, without rebasing. If your commit\u0027s git parent is old, the failure might\u0027ve already been fixed.\n",
      "parentUuid": "1e728c5d_77242883",
      "tag": "autogenerated:trybots~progress",
      "revId": "3dca0a1be813e7591edc32b035f0e2736179fa59",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0482e288_5e538b85",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 13315
      },
      "writtenOn": "2022-07-25T16:06:58Z",
      "side": 1,
      "message": "If the idea is okay I\u0027ll do it for other architectures. Thanks.\n",
      "revId": "3dca0a1be813e7591edc32b035f0e2736179fa59",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0747c91d_cbb9e330",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-07-25T16:10:07Z",
      "side": 1,
      "message": "3 of 29 TryBots failed.\nFailed on linux-386: https://storage.googleapis.com/go-build-log/3dca0a1b/linux-386_e3c1b6b3.log\nFailed on linux-arm64-aws: https://storage.googleapis.com/go-build-log/3dca0a1b/linux-arm64-aws_d6bf2ff6.log\nFailed on linux-arm-aws: https://storage.googleapis.com/go-build-log/3dca0a1b/linux-arm-aws_11b8f87c.log\n\nConsult https://build.golang.org/ to see whether they are new failures. Keep in mind that TryBots currently test *exactly* your git commit, without rebasing. If your commit\u0027s git parent is old, the failure might\u0027ve already been fixed.\n\n",
      "parentUuid": "1e728c5d_77242883",
      "tag": "autogenerated:trybots~failed",
      "revId": "3dca0a1be813e7591edc32b035f0e2736179fa59",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "af7a8156_8f93a6dc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5167
      },
      "writtenOn": "2022-07-25T17:05:55Z",
      "side": 1,
      "message": "Seems like a good approach.",
      "revId": "3dca0a1be813e7591edc32b035f0e2736179fa59",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "950d56dd_62745012",
        "filename": "src/runtime/asm_amd64.s",
        "patchSetId": 1
      },
      "lineNbr": 524,
      "author": {
        "id": 5167
      },
      "writtenOn": "2022-07-25T17:05:55Z",
      "side": 1,
      "message": "Inconsistent tab",
      "range": {
        "startLine": 524,
        "startChar": 9,
        "endLine": 524,
        "endChar": 10
      },
      "revId": "3dca0a1be813e7591edc32b035f0e2736179fa59",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "71443358_6522232d",
        "filename": "src/runtime/asm_amd64.s",
        "patchSetId": 1
      },
      "lineNbr": 524,
      "author": {
        "id": 13315
      },
      "writtenOn": "2023-08-28T19:05:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "950d56dd_62745012",
      "range": {
        "startLine": 524,
        "startChar": 9,
        "endLine": 524,
        "endChar": 10
      },
      "revId": "3dca0a1be813e7591edc32b035f0e2736179fa59",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "93df9648_6875e50a",
        "filename": "src/runtime/asm_amd64.s",
        "patchSetId": 1
      },
      "lineNbr": 530,
      "author": {
        "id": 5167
      },
      "writtenOn": "2022-07-25T17:05:55Z",
      "side": 1,
      "message": "Can we get this out of gcrash.stack instead?",
      "revId": "3dca0a1be813e7591edc32b035f0e2736179fa59",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7fe62b8b_009d7263",
        "filename": "src/runtime/asm_amd64.s",
        "patchSetId": 1
      },
      "lineNbr": 530,
      "author": {
        "id": 13315
      },
      "writtenOn": "2023-08-28T19:05:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "93df9648_6875e50a",
      "revId": "3dca0a1be813e7591edc32b035f0e2736179fa59",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0ded720a_5826960b",
        "filename": "src/runtime/proc.go",
        "patchSetId": 1
      },
      "lineNbr": 554,
      "author": {
        "id": 5167
      },
      "writtenOn": "2022-07-25T17:05:55Z",
      "side": 1,
      "message": "This is a bit tricky... I wouldn\u0027t think 10000 is actually enough for a non-trivial stack trace, though maybe we usually only need a few frames. Do you think it would be too unsafe to usleep here?",
      "range": {
        "startLine": 554,
        "startChar": 17,
        "endLine": 554,
        "endChar": 22
      },
      "revId": "3dca0a1be813e7591edc32b035f0e2736179fa59",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4dacebfd_489f80b7",
        "filename": "src/runtime/proc.go",
        "patchSetId": 1
      },
      "lineNbr": 554,
      "author": {
        "id": 13315
      },
      "writtenOn": "2023-09-29T01:07:19Z",
      "side": 1,
      "message": "Changed to usleep_no_g. Looks fine to me.",
      "parentUuid": "0ded720a_5826960b",
      "range": {
        "startLine": 554,
        "startChar": 17,
        "endLine": 554,
        "endChar": 22
      },
      "revId": "3dca0a1be813e7591edc32b035f0e2736179fa59",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d1c9cd56_1615c040",
        "filename": "src/runtime/proc.go",
        "patchSetId": 1
      },
      "lineNbr": 554,
      "author": {
        "id": 13315
      },
      "writtenOn": "2023-10-03T16:54:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4dacebfd_489f80b7",
      "range": {
        "startLine": 554,
        "startChar": 17,
        "endLine": 554,
        "endChar": 22
      },
      "revId": "3dca0a1be813e7591edc32b035f0e2736179fa59",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1d9ee8b5_e1f2ca25",
        "filename": "src/runtime/runtime2.go",
        "patchSetId": 1
      },
      "lineNbr": 1022,
      "author": {
        "id": 5167
      },
      "writtenOn": "2022-07-25T17:05:55Z",
      "side": 1,
      "message": "I wasn\u0027t sure what this meant until I looked at the implementation. Maybe \"traceback through one bad morestack or systemstack call\"?",
      "range": {
        "startLine": 1022,
        "startChar": 81,
        "endLine": 1022,
        "endChar": 85
      },
      "revId": "3dca0a1be813e7591edc32b035f0e2736179fa59",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ef9ea279_0447fd59",
        "filename": "src/runtime/runtime2.go",
        "patchSetId": 1
      },
      "lineNbr": 1022,
      "author": {
        "id": 13315
      },
      "writtenOn": "2023-09-29T01:07:19Z",
      "side": 1,
      "message": "Acknowledged. The code is rewritten and we don\u0027t need this now.",
      "parentUuid": "1d9ee8b5_e1f2ca25",
      "range": {
        "startLine": 1022,
        "startChar": 81,
        "endLine": 1022,
        "endChar": 85
      },
      "revId": "3dca0a1be813e7591edc32b035f0e2736179fa59",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "14124c08_4f7d816a",
        "filename": "src/runtime/traceback.go",
        "patchSetId": 1
      },
      "lineNbr": 202,
      "author": {
        "id": 5167
      },
      "writtenOn": "2022-07-25T17:05:55Z",
      "side": 1,
      "message": "Hmm. Does this work because we haven\u0027t actually done the SP write yet when things go bad?\n\nI\u0027ve wondered a few times now if SPWRITE shouldn\u0027t be a function flag, but should instead be in the spdelta table (say, a -1 spdelta). We have several cases above where we have subtle reasoning about clearing the SPWRITE flag that I think would just go away.",
      "range": {
        "startLine": 202,
        "startChar": 72,
        "endLine": 202,
        "endChar": 97
      },
      "revId": "3dca0a1be813e7591edc32b035f0e2736179fa59",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "900674d6_0ad94612",
        "filename": "src/runtime/traceback.go",
        "patchSetId": 1
      },
      "lineNbr": 202,
      "author": {
        "id": 13315
      },
      "writtenOn": "2023-08-28T19:05:14Z",
      "side": 1,
      "message": "Yes, I think that is true. We could unwind to the caller of morestack because the SP isn\u0027t written yet. And yes, I think it make more sense to have SPWRITE be a per-PC property. This is on my plan but I haven\u0027t got to do that.\n\nThere might be a use case for force unwinding through a (true) SPWRITE, e.g. to debug the function that writes the SP.",
      "parentUuid": "14124c08_4f7d816a",
      "range": {
        "startLine": 202,
        "startChar": 72,
        "endLine": 202,
        "endChar": 97
      },
      "revId": "3dca0a1be813e7591edc32b035f0e2736179fa59",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "075f147f_b44187ac",
        "filename": "src/runtime/traceback.go",
        "patchSetId": 1
      },
      "lineNbr": 202,
      "author": {
        "id": 13315
      },
      "writtenOn": "2023-09-29T01:07:19Z",
      "side": 1,
      "message": "The code is rewritten and we don\u0027t need this change now. (It is still a good idea to do per-PC SPWRITE. I\u0027ll do it when I get a chance.)",
      "parentUuid": "900674d6_0ad94612",
      "range": {
        "startLine": 202,
        "startChar": 72,
        "endLine": 202,
        "endChar": 97
      },
      "revId": "3dca0a1be813e7591edc32b035f0e2736179fa59",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}