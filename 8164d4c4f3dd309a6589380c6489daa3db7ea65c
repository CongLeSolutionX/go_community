{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "5678ebb3_d9b4328e",
        "filename": "src/time/format.go",
        "patchSetId": 2
      },
      "lineNbr": 1300,
      "author": {
        "id": 6365
      },
      "writtenOn": "2022-11-16T21:04:18Z",
      "side": 1,
      "message": "It seems like the root of the problem here is that this code is sloppy about the postconditions of the `switch` statement: in some of the cases the `value` variable is always updated to the next chunk of the value to be parsed (even if an earlier chunk is invalid), and in other cases it is preserved as-is.\n\nThis would probably end up a lot clearer if we could fix that postcondition.\n\nEspecially given the length of the `switch` statement, perhaps it would make sense to factor it out into a standalone function? That would make it much easier to keep track of exactly when and under what conditions the `value` variable is updated.",
      "range": {
        "startLine": 1298,
        "startChar": 0,
        "endLine": 1300,
        "endChar": 4
      },
      "revId": "8164d4c4f3dd309a6589380c6489daa3db7ea65c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "93df576b_2d6e9e65",
        "filename": "src/time/format.go",
        "patchSetId": 2
      },
      "lineNbr": 1300,
      "author": {
        "id": 52385
      },
      "writtenOn": "2022-11-17T12:39:13Z",
      "side": 1,
      "message": "Thanks for the review!!!\n\nYou\u0027re totally correct about the root cause of the issue. I have found two more issues that are not related to the `p` variable:\n\n\ttime.Parse(\"2006-01-02T15:04:05Z07:00\", \"0000-01-01T00:00:00+00:+0\")\n\t// error before: cannot parse \"\" as \"Z07:00\"\n\t// error after:  cannot parse \"+00:+0\" as \"Z07:00\"\n\n\ttime.Parse(\"Mon Jan _2 15:04:05.000 2006\", \"Thu Feb  4 23:00:59x01 2010\")\n\t// error before: cannot parse \"2010\" as \".000\"\n\t// error after:  cannot parse \"x01 2010\" as \".000\"\n\n\u003e perhaps it would make sense to factor it out into a standalone function?\n\nThe `switch` statement could change any one of the following variables. If we factor it out into a standalone function, I think we should create a struct with these fields and parse a pointer to this struct to the new function. It will result in many git differences. So I borrow the idea from CL 160338 to hold the original `value` and use it if there is a parse error. Please let me know if I\u0027m wrong. Thank you!\n\n\tvar (\n\t\tyear       int\n\t\tmonth      int \u003d -1\n\t\tday        int \u003d -1\n\t\tyday       int \u003d -1\n\t\thour       int\n\t\tmin        int\n\t\tsec        int\n\t\tnsec       int\n\t\tz          *Location\n\t\tzoneOffset int \u003d -1\n\t\tzoneName   string\n\t)",
      "parentUuid": "5678ebb3_d9b4328e",
      "range": {
        "startLine": 1298,
        "startChar": 0,
        "endLine": 1300,
        "endChar": 4
      },
      "revId": "8164d4c4f3dd309a6589380c6489daa3db7ea65c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "45c0ef41_9e0aaf8b",
        "filename": "src/time/format.go",
        "patchSetId": 2
      },
      "lineNbr": 1300,
      "author": {
        "id": 6365
      },
      "writtenOn": "2022-11-17T15:26:05Z",
      "side": 1,
      "message": "\u003e The `switch` statement could change any one of the following variables. If we factor it out into a standalone function, I think we should create a struct with these fields and parse a pointer to this struct to the new function. It will result in many git differences. So I borrow the idea from CL 160338 to hold the original `value` and use it if there is a parse error. Please let me know if I\u0027m wrong.\n\nThat seems perfect, and it\u0027s a delightfully small patch. Thanks!",
      "parentUuid": "93df576b_2d6e9e65",
      "range": {
        "startLine": 1298,
        "startChar": 0,
        "endLine": 1300,
        "endChar": 4
      },
      "revId": "8164d4c4f3dd309a6589380c6489daa3db7ea65c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}