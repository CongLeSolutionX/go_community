{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "f5f3eb9e_4ef752d8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 13015
      },
      "writtenOn": "2020-11-19T14:42:04Z",
      "side": 1,
      "message": "I think you meant \u0027bclrl\u0027 here (conditional, not unconditional branch).",
      "revId": "d7cc6ec40a6975e2f530266cae4807315a7ea806",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "41dd7cea_9d8c37ec",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 36863
      },
      "writtenOn": "2020-11-19T18:17:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f5f3eb9e_4ef752d8",
      "revId": "d7cc6ec40a6975e2f530266cae4807315a7ea806",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "def843aa_d7ec61a5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 13315
      },
      "writtenOn": "2020-11-18T23:11:07Z",
      "side": 1,
      "message": "Sorry, I\u0027m not sure I understand this.\n\n\u003e The default expected behavior is a conditional return from a subroutine.\n\nWhat is the actual behavior? How do they differ?",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 13,
        "endChar": 11
      },
      "revId": "d7cc6ec40a6975e2f530266cae4807315a7ea806",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "318abe7b_abc4c19f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 36863
      },
      "writtenOn": "2020-11-18T23:40:55Z",
      "side": 1,
      "message": "Historically, the bclr form is used as a conditional function return. Oddly, this assumption also holds for the bclrl form.  It is preferable to use bcctrl when calling a function pointer, but hints can be provided for more obscure usage.\n\nIn essence, The predictor stacks lr values when calling most branch + link instructions (excepting bclr) to pair with the return (blr or bclr).  The current usage ensures we thoroughly confuse the predictor.\n\nNotably, the ISA specifically states not to use bclrl in this manner.  However based on the numbers, the BH hint seems to be honored on power9 (I need to test power8 to confirm).",
      "parentUuid": "def843aa_d7ec61a5",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 13,
        "endChar": 11
      },
      "revId": "d7cc6ec40a6975e2f530266cae4807315a7ea806",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5a4d62f5_e971a255",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 13315
      },
      "writtenOn": "2020-11-19T00:00:04Z",
      "side": 1,
      "message": "Thanks. I think I get it now. It is that we use LR as the target register for function pointer call, but the branch predictor thinks we are doing a conditional function return (as you mentioned, a bit odd). Adding the hint mitigate the mis-prediction. Is that right?\n\nMaybe mention \"function pointer call\" in the CL description. That would help make things clear.\n\nAlternatively, we could change to use CTR. Because async preemption clobbers CTR, we\u0027ll need to mark OpPPC64CALLclosure and OpPPC64CALLinter as unsafe points, and that is probably fine.",
      "parentUuid": "318abe7b_abc4c19f",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 13,
        "endChar": 11
      },
      "revId": "d7cc6ec40a6975e2f530266cae4807315a7ea806",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7170d066_ecbc119f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 36863
      },
      "writtenOn": "2020-11-19T15:38:53Z",
      "side": 1,
      "message": "We may want to consider switching to ctr in the future.  Are there any notable penalties for marking sequences as unsafe (i.e binary size, cost of checking, etc)? ctr is used infrequently today, so I think it\u0027s ok to leave as is for now.",
      "parentUuid": "5a4d62f5_e971a255",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 13,
        "endChar": 11
      },
      "revId": "d7cc6ec40a6975e2f530266cae4807315a7ea806",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2ac9e54d_8e0ec9bf",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 13315
      },
      "writtenOn": "2020-11-19T15:56:10Z",
      "side": 1,
      "message": "Mostly no. It just makes the code not async-preemptible. Since this is a call, which will likely be able to preempt itself when necessary, I think that is fine.\n\nIf LR+hint works nicely, we don\u0027t have to change that.",
      "parentUuid": "7170d066_ecbc119f",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 13,
        "endChar": 11
      },
      "revId": "d7cc6ec40a6975e2f530266cae4807315a7ea806",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7551dba4_82904146",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 13315
      },
      "writtenOn": "2020-11-18T23:11:07Z",
      "side": 1,
      "message": "Thanks for the CL. We\u0027re in the release freeze. This will wait for the next release.\n\nR\u003dgo1.17",
      "revId": "d7cc6ec40a6975e2f530266cae4807315a7ea806",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0ac79372_5f18c005",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 13015
      },
      "writtenOn": "2020-11-19T14:42:04Z",
      "side": 1,
      "message": "This is a bug fix. I think it\u0027s fine for this release (see Ian\u0027s comment in the issue).",
      "parentUuid": "7551dba4_82904146",
      "revId": "d7cc6ec40a6975e2f530266cae4807315a7ea806",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "752a34e5_0f867934",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 13015
      },
      "writtenOn": "2020-11-19T14:42:47Z",
      "side": 1,
      "message": "TRY\u003dppc64,ppc64le",
      "revId": "d7cc6ec40a6975e2f530266cae4807315a7ea806",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "790ef3f8_239a816d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 13315
      },
      "writtenOn": "2020-11-19T14:46:37Z",
      "side": 1,
      "message": "Yeah, as I understand it now, I think it\u0027s okay for Go 1.16. Thanks.",
      "parentUuid": "0ac79372_5f18c005",
      "revId": "d7cc6ec40a6975e2f530266cae4807315a7ea806",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "df3549f1_59fa4862",
        "filename": "src/cmd/internal/obj/ppc64/asm9.go",
        "patchSetId": 1
      },
      "lineNbr": 2871,
      "author": {
        "id": 13315
      },
      "writtenOn": "2020-11-18T23:11:07Z",
      "side": 1,
      "message": "Can you use GetFrom3 here?",
      "range": {
        "startLine": 2871,
        "startChar": 2,
        "endLine": 2871,
        "endChar": 22
      },
      "revId": "d7cc6ec40a6975e2f530266cae4807315a7ea806",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b52f0312_1736ca73",
        "filename": "src/cmd/internal/obj/ppc64/asm9.go",
        "patchSetId": 1
      },
      "lineNbr": 2871,
      "author": {
        "id": 36863
      },
      "writtenOn": "2020-11-18T23:40:55Z",
      "side": 1,
      "message": "Yes",
      "parentUuid": "df3549f1_59fa4862",
      "range": {
        "startLine": 2871,
        "startChar": 2,
        "endLine": 2871,
        "endChar": 22
      },
      "revId": "d7cc6ec40a6975e2f530266cae4807315a7ea806",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7fa9fd41_00044a1a",
        "filename": "src/cmd/internal/obj/ppc64/asm9.go",
        "patchSetId": 1
      },
      "lineNbr": 2871,
      "author": {
        "id": 13315
      },
      "writtenOn": "2020-11-19T00:00:04Z",
      "side": 1,
      "message": "Yeah, let\u0027s use GetFrom3. Thanks.",
      "parentUuid": "b52f0312_1736ca73",
      "range": {
        "startLine": 2871,
        "startChar": 2,
        "endLine": 2871,
        "endChar": 22
      },
      "revId": "d7cc6ec40a6975e2f530266cae4807315a7ea806",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bfb57ac9_4e732bfa",
        "filename": "src/cmd/internal/obj/ppc64/asm9.go",
        "patchSetId": 1
      },
      "lineNbr": 2871,
      "author": {
        "id": 36863
      },
      "writtenOn": "2020-11-19T18:17:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7fa9fd41_00044a1a",
      "range": {
        "startLine": 2871,
        "startChar": 2,
        "endLine": 2871,
        "endChar": 22
      },
      "revId": "d7cc6ec40a6975e2f530266cae4807315a7ea806",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}