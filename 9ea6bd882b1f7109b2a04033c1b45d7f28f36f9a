{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "2e61ad66_0487b7f4",
        "filename": "src/cmd/go/testdata/script/cover_statements.txt",
        "patchSetId": 2
      },
      "lineNbr": 4,
      "author": {
        "id": 6365
      },
      "writtenOn": "2023-11-27T21:11:16Z",
      "side": 1,
      "message": "I agree that this might make the observed symptoms go away, but I don\u0027t think there ought to be anything wrong with using the shared build cache here either: the cache uses the mtime of cached files to decide when to trim them, so the files shouldn\u0027t just be randomly disappearing out from underneath us.\n\nI think at the very least the comment here should treat this as a temporary workaround for a suspected bug, rather than a test that intrinsically requires isolation.",
      "range": {
        "startLine": 3,
        "startChar": 0,
        "endLine": 4,
        "endChar": 23
      },
      "revId": "9ea6bd882b1f7109b2a04033c1b45d7f28f36f9a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "390dd7cb_afcaede0",
        "filename": "src/cmd/go/testdata/script/cover_statements.txt",
        "patchSetId": 2
      },
      "lineNbr": 4,
      "author": {
        "id": 14020
      },
      "writtenOn": "2023-11-28T14:05:31Z",
      "side": 1,
      "message": "I\u0027ll update the comments. \n\nI agree that it seems like things should \"just work\" in this case, but evidently there is a problem lurking. \n\nI\u0027ll spend a little more time poking at the caching code to see if I can learn more (not super optimistic at my prospects, but I suppose it is worth a shot).",
      "parentUuid": "2e61ad66_0487b7f4",
      "range": {
        "startLine": 3,
        "startChar": 0,
        "endLine": 4,
        "endChar": 23
      },
      "revId": "9ea6bd882b1f7109b2a04033c1b45d7f28f36f9a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0b2d5ae8_cae0cddd",
        "filename": "src/cmd/go/testdata/script/cover_statements.txt",
        "patchSetId": 2
      },
      "lineNbr": 4,
      "author": {
        "id": 14020
      },
      "writtenOn": "2023-11-28T14:46:18Z",
      "side": 1,
      "message": "OK, as an experiment I reran my repro script using a Go command instrumented to record all cache trim operations (see this CL: https://go-review.googlesource.com/c/go/+/545455). The cover_statements test still fails, but none of the trim operations recorded are against the default cache, they are only to test-local GOCACHE dirs set up by specific unit tests. So at least from my perspective this rules out cache trimming as a source for the problem.\n\nLooking at the caching code, I see a number of other places where it tries to detect when things go wrong (e.g. two go commands racing to write the same file). I\u0027ll try recording those as well to see what turns up.",
      "parentUuid": "390dd7cb_afcaede0",
      "range": {
        "startLine": 3,
        "startChar": 0,
        "endLine": 4,
        "endChar": 23
      },
      "revId": "9ea6bd882b1f7109b2a04033c1b45d7f28f36f9a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f14aaf60_ed0d6f30",
        "filename": "src/cmd/go/testdata/script/cover_statements.txt",
        "patchSetId": 2
      },
      "lineNbr": 4,
      "author": {
        "id": 14020
      },
      "writtenOn": "2023-11-28T15:17:20Z",
      "side": 1,
      "message": "... and I updated my debugging CL to record write errors, however running my repro script still fails even though apparently no write errors were triggered. Possible that I didn\u0027t catch all the error paths? but at this point I am out of ideas.",
      "parentUuid": "0b2d5ae8_cae0cddd",
      "range": {
        "startLine": 3,
        "startChar": 0,
        "endLine": 4,
        "endChar": 23
      },
      "revId": "9ea6bd882b1f7109b2a04033c1b45d7f28f36f9a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}