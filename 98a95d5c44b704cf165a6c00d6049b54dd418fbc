{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "3d4e944e_0b7ba2bd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5015
      },
      "writtenOn": "2022-10-29T00:12:47Z",
      "side": 1,
      "message": "Looks reasonable. My only real question is whether setting the flag should cause doc to print _only_ the examples. It seems that\u0027s likelier to be what you want. You find the thing you\u0027re looking for doing a bunch of runs of the form\n\ngo doc foo\n\nand then when you find the right one, you want to see how to use it, so you do\n\ngo doc -ex fooIWant\n\nIn other words, when you run with this flag, is it likely you\u0027ve already seen the other documentation?\n\nGenuinely a question. It\u0027s of course unknown without experience.",
      "revId": "98a95d5c44b704cf165a6c00d6049b54dd418fbc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "14c3b8f1_37e92f23",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 59330
      },
      "writtenOn": "2022-11-01T00:13:00Z",
      "side": 1,
      "message": "Good question. I asked for feedback on what the best interface would be at the github issue: https://github.com/golang/go/issues/26715#issuecomment-1282134694 though with a different question, of whether it would make sense to just always show examples. There wasn\u0027t much feedback, but what there was rejected that suggestion. They did however mention that it would be handy to at least print that there were x number of examples for the symbol requested. Given that plenty of symbols don\u0027t have any examples, I think that\u0027s valuable, and would work reasonably with your above suggestion to show only the examples with -ex. So the workflow could be:\n\n  go doc foo\n  go doc fooIWant\n  [output including at the bottom something like \"There are 2 examples for fooIWant, use \u0027go doc -ex fooIWant\u0027 to see them\"]\n  go doc -ex fooIWant\n\nSeems reasonable to me, and I could rework this change to make it work that way. But it would be good to hear the opinions of others.",
      "parentUuid": "3d4e944e_0b7ba2bd",
      "revId": "98a95d5c44b704cf165a6c00d6049b54dd418fbc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ddd43752_ed74822a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5015
      },
      "writtenOn": "2022-11-01T05:08:23Z",
      "side": 1,
      "message": "I dislike that kind of output. I know some folks want it, but computers making suggestions anthropomorphizes them in a way that disturbs me. Also, in this situation the context for the command to run could be tricky. Unlike with most go subcommands, doc has a lot of context in its argument handling. Also also, you don\u0027t want every run of the go doc command to add a tutorial about a flag; that gets old fast.\n\nHow about if -ex is _not_ given::\n- If there are no examples, do nothing.\n- If there are examples, just add, indented, after the docs,\n   There are example for \u003csymbol\u003e\n  \n\npackage fmt // import \".\"\n\nfunc Printf(format string, a ...any) (n int, err error)\n    Printf formats according to a format specifier and writes to standard\n    output. It returns the number of bytes written and any write error\n    encountered.\n    \n    There are examples for Printf.",
      "parentUuid": "14c3b8f1_37e92f23",
      "revId": "98a95d5c44b704cf165a6c00d6049b54dd418fbc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}