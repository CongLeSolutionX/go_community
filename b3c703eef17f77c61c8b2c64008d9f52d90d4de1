{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "cf018f16_aeed2a26",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-10-01T12:15:02Z",
      "side": 1,
      "message": "Hello qiulaidongfeng, I\u0027ve spotted some possible problems.\n\nThese findings are based on simple heuristics. If a finding appears wrong, briefly reply here saying so. Otherwise, please address any problems and update the GitHub PR. When complete, mark this comment as \u0027Done\u0027 and click the [blue \u0027Reply\u0027 button](https://github.com/golang/go/wiki/GerritBot#i-left-a-reply-to-a-comment-in-gerrit-but-no-one-but-me-can-see-it) above.\n\nPossible problems detected:\n  1. The commit message body is missing. That can be OK if the change is trivial like correcting spelling or fixing a broken link, but usually the description should provide context for the change and explain what it does in complete sentences.\n  2. You usually need to reference a bug number for all but trivial or cosmetic fixes. For this repo, the format is usually \u0027Fixes #12345\u0027 or \u0027Updates #12345\u0027 at the end of the commit message. Should you have a bug reference?\n\nTo edit the commit message, see instructions [here](https://github.com/golang/go/wiki/GerritBot/#how-does-gerritbot-determine-the-final-commit-message). For guidelines on commit messages for the Go project, see [here](https://go.dev/doc/contribute#commit_messages).\n\n\n(In general for Gerrit code reviews, the CL author is expected to close out each piece of feedback by marking it as \u0027Done\u0027 if implemented as suggested or otherwise reply to each review comment. See the [Review](https://go.dev/doc/contribute#review) section of the Contributing Guide for details.)",
      "revId": "b3c703eef17f77c61c8b2c64008d9f52d90d4de1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6e7542a7_77468f26",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 64033
      },
      "writtenOn": "2023-10-01T12:16:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cf018f16_aeed2a26",
      "revId": "b3c703eef17f77c61c8b2c64008d9f52d90d4de1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0c185712_2e6ba20d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-10-01T16:24:29Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003db3c703ee\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "b3c703eef17f77c61c8b2c64008d9f52d90d4de1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "63d7ec6a_63690ed1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-10-01T16:36:27Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "0c185712_2e6ba20d",
      "tag": "autogenerated:trybots~happy",
      "revId": "b3c703eef17f77c61c8b2c64008d9f52d90d4de1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4014daa2_4beafe59",
        "filename": "src/runtime/export_test.go",
        "patchSetId": 1
      },
      "lineNbr": 802,
      "author": {
        "id": 5200
      },
      "writtenOn": "2023-10-02T17:27:56Z",
      "side": 1,
      "message": "I\u0027m not a huge fan of capitalizing local variables to avoid name collisions.\nUsually in the runtime we add a leading or trailing underscore (e.g. runtime._type).\n\nThat said, my opinion about it isn\u0027t super strong.",
      "range": {
        "startLine": 802,
        "startChar": 12,
        "endLine": 802,
        "endChar": 15
      },
      "revId": "b3c703eef17f77c61c8b2c64008d9f52d90d4de1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "62827510_44d9634a",
        "filename": "src/runtime/mpagealloc.go",
        "patchSetId": 1
      },
      "lineNbr": 1059,
      "author": {
        "id": 5200
      },
      "writtenOn": "2023-10-02T17:27:56Z",
      "side": 1,
      "message": "I know max is symmetric, but it would be nice if when we\u0027re updating a variable we put the old value in a consistent place, probably on the left. That is\n\nx \u003d max(x, y)\n\nnot \n\nx \u003d max(y, x)\n\nAt least when there are 2 updates in a row it would make it clearer to be consistent. Maybe it would help to be consistent everywhere.",
      "range": {
        "startLine": 1059,
        "startChar": 12,
        "endLine": 1059,
        "endChar": 19
      },
      "revId": "b3c703eef17f77c61c8b2c64008d9f52d90d4de1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}