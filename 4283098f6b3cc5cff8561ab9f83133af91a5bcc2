{
  "comments": [
    {
      "key": {
        "uuid": "99c60b39_6c820f9c",
        "filename": "src/runtime/memmove_test.go",
        "patchSetId": 2
      },
      "lineNbr": 213,
      "author": {
        "id": 5167
      },
      "writtenOn": "2020-01-02T16:47:47Z",
      "side": 1,
      "message": "It would be good to also test the backwards case. That would require a somewhat different structure than this test... Each slot in the array would have to be a different pointer value so the test could distinguish a partial word copy.",
      "revId": "4283098f6b3cc5cff8561ab9f83133af91a5bcc2",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8e616ba5_9b70c06d",
        "filename": "src/runtime/memmove_test.go",
        "patchSetId": 2
      },
      "lineNbr": 213,
      "author": {
        "id": 13315
      },
      "writtenOn": "2020-01-02T21:43:30Z",
      "side": 1,
      "message": "Will do.",
      "parentUuid": "99c60b39_6c820f9c",
      "revId": "4283098f6b3cc5cff8561ab9f83133af91a5bcc2",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "43a58bb2_73c56514",
        "filename": "src/runtime/memmove_test.go",
        "patchSetId": 2
      },
      "lineNbr": 213,
      "author": {
        "id": 13315
      },
      "writtenOn": "2020-01-03T21:33:13Z",
      "side": 1,
      "message": "Added tests for forward/backward copies. Skipped small (1 or 2 pointers) cases though (I can add them back in if desired).",
      "parentUuid": "8e616ba5_9b70c06d",
      "revId": "4283098f6b3cc5cff8561ab9f83133af91a5bcc2",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "881f1247_39fdad1d",
        "filename": "src/runtime/memmove_test.go",
        "patchSetId": 2
      },
      "lineNbr": 228,
      "author": {
        "id": 5167
      },
      "writtenOn": "2020-01-02T16:47:47Z",
      "side": 1,
      "message": "Is there any way we could test also having a sub-pointer-sized tail in the copy? It\u0027s tricky because it will definitely create bad pointer values... Maybe if s0 was a struct with both a pointer array and 7 scalar bytes and you copied from the middle of it, always starting at a pointer, but pulling in different amounts of the scalar tail?",
      "revId": "4283098f6b3cc5cff8561ab9f83133af91a5bcc2",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6159edfc_5cf5c83d",
        "filename": "src/runtime/memmove_test.go",
        "patchSetId": 2
      },
      "lineNbr": 228,
      "author": {
        "id": 13315
      },
      "writtenOn": "2020-01-02T21:43:30Z",
      "side": 1,
      "message": "I attempted to do this (see PS1 of this CL), but it doesn\u0027t seem to work. I think we round up type size to its alignment, so a type that contains pointers is always copied as a size of a multiple of PtrSize.",
      "parentUuid": "881f1247_39fdad1d",
      "revId": "4283098f6b3cc5cff8561ab9f83133af91a5bcc2",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ce0e8e8e_e45056a5",
        "filename": "src/runtime/memmove_test.go",
        "patchSetId": 2
      },
      "lineNbr": 228,
      "author": {
        "id": 5167
      },
      "writtenOn": "2020-01-02T22:05:37Z",
      "side": 1,
      "message": "Oh, I see... What didn\u0027t work about that? Though if we always round up like that, then I suppose testing that case doesn\u0027t actually matter.",
      "parentUuid": "6159edfc_5cf5c83d",
      "revId": "4283098f6b3cc5cff8561ab9f83133af91a5bcc2",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c86107fa_8184721f",
        "filename": "src/runtime/memmove_test.go",
        "patchSetId": 2
      },
      "lineNbr": 228,
      "author": {
        "id": 13315
      },
      "writtenOn": "2020-01-02T22:51:03Z",
      "side": 1,
      "message": "The test doesn\u0027t pass. See the trybot failures of PS1. If the size is not a multiple of PtrSize, we sometimes do overlapping stores, which is not always at a PtrSize boundary. For example, https://go.googlesource.com/go/+/refs/heads/master/src/runtime/memmove_amd64.s#184",
      "parentUuid": "ce0e8e8e_e45056a5",
      "revId": "4283098f6b3cc5cff8561ab9f83133af91a5bcc2",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2e92a08f_d122dbc7",
        "filename": "src/runtime/memmove_test.go",
        "patchSetId": 2
      },
      "lineNbr": 239,
      "author": {
        "id": 5167
      },
      "writtenOn": "2020-01-02T16:47:47Z",
      "side": 1,
      "message": "This should wait for the goroutine to clean up either using a sync.WaitGroup, or this could set ready to, say 2 when the loop exits and the loop below could run until ready is 2 (I like that latter, since it gets the most out of the test without depending on the loops running at the same rate).",
      "revId": "4283098f6b3cc5cff8561ab9f83133af91a5bcc2",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "66f9a943_0a507bac",
        "filename": "src/runtime/memmove_test.go",
        "patchSetId": 2
      },
      "lineNbr": 239,
      "author": {
        "id": 13315
      },
      "writtenOn": "2020-01-02T21:43:30Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2e92a08f_d122dbc7",
      "revId": "4283098f6b3cc5cff8561ab9f83133af91a5bcc2",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}