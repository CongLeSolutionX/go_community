{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "121e6f52_8d0bf143",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-05-05T18:45:56Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003d39d5ae64\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "39d5ae64111500f4846404157c0ed7494a7f233c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9376dfc1_f38f2604",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-05-05T18:56:22Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "121e6f52_8d0bf143",
      "tag": "autogenerated:trybots~happy",
      "revId": "39d5ae64111500f4846404157c0ed7494a7f233c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bd4070a2_dc0a86fd",
        "filename": "src/cmd/compile/internal/types2/infer.go",
        "patchSetId": 3
      },
      "lineNbr": 283,
      "author": {
        "id": 31647
      },
      "writtenOn": "2023-05-08T22:06:16Z",
      "side": 1,
      "message": "I wonder if it\u0027s worth noting that untyped constants can only occur as basic literal arguments, not in any other literal, and may only be assignable to basic types, therefore it suffices consider parameters whose type is a type parameter.\n\nIn other words: this is an exhaustive of treatment of untyped constant relationships, but that may not be obvious to the reader.",
      "range": {
        "startLine": 283,
        "startChar": 2,
        "endLine": 283,
        "endChar": 68
      },
      "revId": "39d5ae64111500f4846404157c0ed7494a7f233c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "52d98bd6_eabb2532",
        "filename": "src/cmd/compile/internal/types2/infer.go",
        "patchSetId": 3
      },
      "lineNbr": 283,
      "author": {
        "id": 7392
      },
      "writtenOn": "2023-05-08T22:21:43Z",
      "side": 1,
      "message": "It\u0027s worth noting and it\u0027s noted on line 167ff.\nI hope the comment on line 286: \"by construction\" also helps as an additional hint.",
      "parentUuid": "bd4070a2_dc0a86fd",
      "range": {
        "startLine": 283,
        "startChar": 2,
        "endLine": 283,
        "endChar": 68
      },
      "revId": "39d5ae64111500f4846404157c0ed7494a7f233c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e3e835dc_8e054cb8",
        "filename": "src/internal/types/testdata/fixedbugs/issue58671.go",
        "patchSetId": 3
      },
      "lineNbr": 15,
      "author": {
        "id": 31647
      },
      "writtenOn": "2023-05-08T22:06:16Z",
      "side": 1,
      "message": "! this code is at least a little surprising.\n\nBut this is still better than not making this change.",
      "range": {
        "startLine": 15,
        "startChar": 19,
        "endLine": 15,
        "endChar": 30
      },
      "revId": "39d5ae64111500f4846404157c0ed7494a7f233c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "234b3a2d_ebb4034f",
        "filename": "src/internal/types/testdata/fixedbugs/issue58671.go",
        "patchSetId": 3
      },
      "lineNbr": 15,
      "author": {
        "id": 7392
      },
      "writtenOn": "2023-05-08T22:21:43Z",
      "side": 1,
      "message": "Agreed but it follows from the spec-defined order in which untyped kinds are chosen: integer, rune, floating-point, complex.\n\nEven in non-generic code we can have surprising behavior: for i + r, where i is an untyped int and r an untyped rune, the result is an untyped rune. If i + r overflows (e.g., i is simply bigger than 32 bits), this untyped operation overflows when given the rune default type: https://go.dev/play/p/8HGrhO1K_b1",
      "parentUuid": "e3e835dc_8e054cb8",
      "range": {
        "startLine": 15,
        "startChar": 19,
        "endLine": 15,
        "endChar": 30
      },
      "revId": "39d5ae64111500f4846404157c0ed7494a7f233c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}