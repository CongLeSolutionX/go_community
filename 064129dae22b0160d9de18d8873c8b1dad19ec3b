{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "e5e08dfa_bc9b478b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-05-25T16:59:18Z",
      "side": 1,
      "message": "SlowBots beginning. Status page: https://farmer.golang.org/try?commit\u003d064129da\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "064129dae22b0160d9de18d8873c8b1dad19ec3b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8ba1c856_d9577e46",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-05-25T17:14:32Z",
      "side": 1,
      "message": "SlowBots are happy.\n\nSlowBot builds that ran:\n* linux-amd64-longtest\n* windows-amd64-longtest\n",
      "parentUuid": "e5e08dfa_bc9b478b",
      "tag": "autogenerated:trybots~happy",
      "revId": "064129dae22b0160d9de18d8873c8b1dad19ec3b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f31391bb_c6929e3b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 6365
      },
      "writtenOn": "2023-05-25T18:34:23Z",
      "side": 1,
      "message": "(Still reviewing the tests.)",
      "revId": "064129dae22b0160d9de18d8873c8b1dad19ec3b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2ba0eb0c_1f4d1ad7",
        "filename": "src/cmd/go/internal/gover/gover.go",
        "patchSetId": 4
      },
      "lineNbr": 132,
      "author": {
        "id": 6365
      },
      "writtenOn": "2023-05-25T18:34:23Z",
      "side": 1,
      "message": "A comment for the `v.minor` condition here would be really helpful. ðŸ˜…\n\nOn https://go.dev/dl/ I see `go1`, `go1.2.2`, and `go1.3`, but not `go1.1` or `go1.2`. Do we also need special cases for `1` and `1.1`? (If not, why not?)",
      "range": {
        "startLine": 132,
        "startChar": 31,
        "endLine": 132,
        "endChar": 48
      },
      "revId": "064129dae22b0160d9de18d8873c8b1dad19ec3b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1bcdd156_809df60c",
        "filename": "src/cmd/go/internal/toolchain/toolchain_stub.go",
        "patchSetId": 4
      },
      "lineNbr": 12,
      "author": {
        "id": 6365
      },
      "writtenOn": "2023-05-25T18:34:23Z",
      "side": 1,
      "message": "I think `Switch` itself is now portable? (Only `SwitchTo` calls `execGoToolchain`.)",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 12,
        "endChar": 0
      },
      "revId": "064129dae22b0160d9de18d8873c8b1dad19ec3b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0c57911f_d855c484",
        "filename": "src/cmd/go/internal/toolchain/toolchain_stub.go",
        "patchSetId": 4
      },
      "lineNbr": 13,
      "author": {
        "id": 6365
      },
      "writtenOn": "2023-05-25T18:34:23Z",
      "side": 1,
      "message": "(nit) For consistency, I think this `SwitchTo` should call `base.Fatalf`. That maintains the invariant that a call to `SwitchTo` never returns.",
      "revId": "064129dae22b0160d9de18d8873c8b1dad19ec3b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e7583f68_e0717700",
        "filename": "src/cmd/go/internal/toolchain/version.go",
        "patchSetId": 4
      },
      "lineNbr": 55,
      "author": {
        "id": 6365
      },
      "writtenOn": "2023-05-25T18:34:23Z",
      "side": 1,
      "message": "(incomplete comment)",
      "revId": "064129dae22b0160d9de18d8873c8b1dad19ec3b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aefcd551_7d3ca5aa",
        "filename": "src/cmd/go/internal/toolchain/version.go",
        "patchSetId": 4
      },
      "lineNbr": 57,
      "author": {
        "id": 6365
      },
      "writtenOn": "2023-05-25T18:34:23Z",
      "side": 1,
      "message": "A comment for this mutation would be helpful â€” I\u0027m not quite sure what it\u0027s doing.\n\nIt seems to be assuming that `TryVersion` is a `go get` command? But that\u0027s kind of a layering violation, and (more importantly) will prevent the reinvoked command from upgrading to an even higher `go` version if that is needed to resolve a (possibly transitive) dependency encountered after making further edits to the module graph.",
      "revId": "064129dae22b0160d9de18d8873c8b1dad19ec3b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0a186b21_c20e55de",
        "filename": "src/cmd/go/internal/toolchain/version.go",
        "patchSetId": 4
      },
      "lineNbr": 58,
      "author": {
        "id": 6365
      },
      "writtenOn": "2023-05-25T18:34:23Z",
      "side": 1,
      "message": "I\u0027m surprised to see a calls to `base.Errorf` preceding calls to `SwitchTo` here: if `SwitchTo` is changed to call `base.ExitIfErrors` at any point this will cause the program to fail, and if `SwitchTo` itself fails it should already set the exit status appropriately.\n\nCan these be `fmt.Sprintf(os.Stderr, â€¦)` instead?",
      "revId": "064129dae22b0160d9de18d8873c8b1dad19ec3b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ed8c3a14_de7138a2",
        "filename": "src/cmd/go/testdata/script/mod_get_exec.txt",
        "patchSetId": 4
      },
      "lineNbr": 22,
      "author": {
        "id": 6365
      },
      "writtenOn": "2023-05-25T19:19:58Z",
      "side": 1,
      "message": "Can we use `GOPROXY\u003ddirect` with a `vcs-test.golang.org` repo (`src/cmd/go/testdata/vcstest`) instead of an `rsc.io` repo here?\n\nI\u0027ve been trying to make the tests more self-contained, and contributor CLs for bug fixes necessarily can\u0027t include updates to real `rsc.io` modules.",
      "revId": "064129dae22b0160d9de18d8873c8b1dad19ec3b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}