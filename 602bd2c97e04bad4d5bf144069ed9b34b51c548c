{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "04aed9d7_15126594",
        "filename": "src/runtime/asan_ppc64le.s",
        "patchSetId": 2
      },
      "lineNbr": 64,
      "author": {
        "id": 36863
      },
      "writtenOn": "2022-05-27T15:21:52Z",
      "side": 1,
      "message": "Since you are using a branch+link instruction, the assembler will insert a prologue to save LR and create a stack frame. Explicitly saving and restoring LR is not needed. You can verify with objdump).",
      "range": {
        "startLine": 64,
        "startChar": 1,
        "endLine": 64,
        "endChar": 5
      },
      "revId": "602bd2c97e04bad4d5bf144069ed9b34b51c548c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a82a4181_1a468194",
        "filename": "src/runtime/asan_ppc64le.s",
        "patchSetId": 2
      },
      "lineNbr": 64,
      "author": {
        "id": 53859
      },
      "writtenOn": "2022-05-30T09:35:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "04aed9d7_15126594",
      "range": {
        "startLine": 64,
        "startChar": 1,
        "endLine": 64,
        "endChar": 5
      },
      "revId": "602bd2c97e04bad4d5bf144069ed9b34b51c548c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cbdbd853_ef1aa547",
        "filename": "src/runtime/asan_ppc64le.s",
        "patchSetId": 2
      },
      "lineNbr": 64,
      "author": {
        "id": 6320
      },
      "writtenOn": "2022-06-09T12:19:06Z",
      "side": 1,
      "message": "I think this still needs to set the LR in the spot where the C code expects it. So maybe it could avoid setting it at 0(R1) but I believe it still needs to set it at 16(R1). And you are correct, no need to restore it explicitly in the asm code, that should be done by the epilog code that gets automatically added. This was taken from the tsan code so this has me wondering if that should be changed as well.",
      "parentUuid": "04aed9d7_15126594",
      "range": {
        "startLine": 64,
        "startChar": 1,
        "endLine": 64,
        "endChar": 5
      },
      "revId": "602bd2c97e04bad4d5bf144069ed9b34b51c548c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ca26664b_8a988189",
        "filename": "src/runtime/asan_ppc64le.s",
        "patchSetId": 2
      },
      "lineNbr": 64,
      "author": {
        "id": 36863
      },
      "writtenOn": "2022-06-09T13:56:22Z",
      "side": 1,
      "message": "I don\u0027t think Go needs to store the LR twice entering C ABI. We do need to ensure 24B in the caller\u0027s stack frame is available (C callees will store LR into the caller\u0027s frame), and it is 16B aligned.\n\nSimilarly, it might be good practice to clear the back chain slot when transitioning into C abi.",
      "parentUuid": "cbdbd853_ef1aa547",
      "range": {
        "startLine": 64,
        "startChar": 1,
        "endLine": 64,
        "endChar": 5
      },
      "revId": "602bd2c97e04bad4d5bf144069ed9b34b51c548c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e45456e_096535b0",
        "filename": "src/runtime/asan_ppc64le.s",
        "patchSetId": 2
      },
      "lineNbr": 64,
      "author": {
        "id": 6320
      },
      "writtenOn": "2022-06-09T16:48:11Z",
      "side": 1,
      "message": "I think this should follow what is done in asmcgocall. So that increases the size by 32B and aligns R1 to 16. Also clears the backchain at 0(R1).\n\nI agree that you don\u0027t need the code to explicitly save the LR because that gets done implicitly (you have to check the objdump after it is built to see that code).",
      "parentUuid": "ca26664b_8a988189",
      "range": {
        "startLine": 64,
        "startChar": 1,
        "endLine": 64,
        "endChar": 5
      },
      "revId": "602bd2c97e04bad4d5bf144069ed9b34b51c548c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d74ea07e_c191126d",
        "filename": "src/runtime/asan_ppc64le.s",
        "patchSetId": 2
      },
      "lineNbr": 64,
      "author": {
        "id": 53859
      },
      "writtenOn": "2022-06-10T15:49:19Z",
      "side": 1,
      "message": "Code for increasing size by 32B and alignment exists already. added code to clear backchain at 0(R1)",
      "parentUuid": "1e45456e_096535b0",
      "range": {
        "startLine": 64,
        "startChar": 1,
        "endLine": 64,
        "endChar": 5
      },
      "revId": "602bd2c97e04bad4d5bf144069ed9b34b51c548c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "19b861d3_2ede10b0",
        "filename": "src/runtime/asan_ppc64le.s",
        "patchSetId": 2
      },
      "lineNbr": 83,
      "author": {
        "id": 36863
      },
      "writtenOn": "2022-05-27T15:21:52Z",
      "side": 1,
      "message": "I think MOVD $0, R0 should work now (in the past it assembled wrongly to `mr r0, r0`), and maybe more preferable on new PPC cores.",
      "range": {
        "startLine": 83,
        "startChar": 1,
        "endLine": 83,
        "endChar": 11
      },
      "revId": "602bd2c97e04bad4d5bf144069ed9b34b51c548c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a57d83ef_8ce5655d",
        "filename": "src/runtime/asan_ppc64le.s",
        "patchSetId": 2
      },
      "lineNbr": 83,
      "author": {
        "id": 53859
      },
      "writtenOn": "2022-05-30T09:35:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "19b861d3_2ede10b0",
      "range": {
        "startLine": 83,
        "startChar": 1,
        "endLine": 83,
        "endChar": 11
      },
      "revId": "602bd2c97e04bad4d5bf144069ed9b34b51c548c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}