{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "44dc97e5_dfb8c7a2",
        "filename": "src/cmd/compile/internal/inline/inlheur/analyze.go",
        "patchSetId": 1
      },
      "lineNbr": 240,
      "author": {
        "id": 5440
      },
      "writtenOn": "2023-11-15T00:02:38Z",
      "side": 1,
      "message": "typo: scores",
      "range": {
        "startLine": 240,
        "startChar": 53,
        "endLine": 240,
        "endChar": 59
      },
      "revId": "1458f18c18900495c181497a1418eccd43d0d56f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "999d4eb8_12cf3800",
        "filename": "src/cmd/compile/internal/inline/inlheur/analyze.go",
        "patchSetId": 1
      },
      "lineNbr": 240,
      "author": {
        "id": 14020
      },
      "writtenOn": "2023-11-15T00:15:26Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "44dc97e5_dfb8c7a2",
      "range": {
        "startLine": 240,
        "startChar": 53,
        "endLine": 240,
        "endChar": 59
      },
      "revId": "1458f18c18900495c181497a1418eccd43d0d56f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4a489024_7df43443",
        "filename": "src/cmd/compile/internal/inline/inlheur/scoring.go",
        "patchSetId": 1
      },
      "lineNbr": 346,
      "author": {
        "id": 5440
      },
      "writtenOn": "2023-11-15T00:02:38Z",
      "side": 1,
      "message": "FWIW, I think we should write new code with concurrency in mind, and it\u0027s not obvious to me how these variables can be made to be safe for concurrent access.\n\nNot a pressing issue, since the overall inliner is currently sequential, but I think it\u0027s better to not be limited to that forever.",
      "range": {
        "startLine": 336,
        "startChar": 0,
        "endLine": 346,
        "endChar": 39
      },
      "revId": "1458f18c18900495c181497a1418eccd43d0d56f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a4fb75d6_ac6d945b",
        "filename": "src/cmd/compile/internal/inline/inlheur/scoring.go",
        "patchSetId": 1
      },
      "lineNbr": 346,
      "author": {
        "id": 14020
      },
      "writtenOn": "2023-11-15T00:15:26Z",
      "side": 1,
      "message": "Agreed, this has an inherent assumption that functions will be processed one at a time in a single-threaded way. I\u0027ll add a comment noting this as a potential problem if the inliner becomes more parallel.",
      "parentUuid": "4a489024_7df43443",
      "range": {
        "startLine": 336,
        "startChar": 0,
        "endLine": 346,
        "endChar": 39
      },
      "revId": "1458f18c18900495c181497a1418eccd43d0d56f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d83a3956_3893f7f9",
        "filename": "src/cmd/compile/internal/inline/inlheur/scoring.go",
        "patchSetId": 1
      },
      "lineNbr": 372,
      "author": {
        "id": 5440
      },
      "writtenOn": "2023-11-15T00:02:38Z",
      "side": 1,
      "message": "Does this need to be disabled again? The old code had \"defer disableDebugTrace()\".\n\naside: When moving code like this, I\u0027d suggest doing a no-change \"move\" CL where there\u0027s no functional changes, and then a followup \"edit\" CL that makes changes. That makes it easier to review the change in Gerrit, because then the diff view can take care of highlighting the differences.",
      "revId": "1458f18c18900495c181497a1418eccd43d0d56f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}