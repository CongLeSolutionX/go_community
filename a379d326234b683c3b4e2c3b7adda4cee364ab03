{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "7dc50872_8a0dab6b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 20,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-01-14T18:01:34Z",
      "side": 1,
      "message": "(not sure)\n\nIs it feasible to add a regression test for this behavior? (Could we perhaps probe for Rosetta support and then execute `go build` with a chain of processes of appropriate architectures, or set some kind of environment variable to fake an architecture-swap?)",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 20,
        "endChar": 13
      },
      "revId": "a379d326234b683c3b4e2c3b7adda4cee364ab03",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ea3bcee5_12cef8de",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 20,
      "author": {
        "id": 13315
      },
      "writtenOn": "2021-01-14T19:23:15Z",
      "side": 1,
      "message": "Added a test that checks we pass the flags.\n\nIf we actually want to run the program, it might be too complicated, because of the various environments (ARM64 vs. x86, has Rosetta installed or not, etc). Let me know if a more complex test is preferred.",
      "parentUuid": "7dc50872_8a0dab6b",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 20,
        "endChar": 13
      },
      "revId": "a379d326234b683c3b4e2c3b7adda4cee364ab03",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "523159b8_4a483773",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 20,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-01-14T21:35:07Z",
      "side": 1,
      "message": "I always prefer a complete integration test, but this one will suffice. Thanks!",
      "parentUuid": "ea3bcee5_12cef8de",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 20,
        "endChar": 13
      },
      "revId": "a379d326234b683c3b4e2c3b7adda4cee364ab03",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e78fc377_1313a216",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 13315
      },
      "writtenOn": "2021-01-14T17:36:11Z",
      "side": 1,
      "message": "TRY\u003ddarwin,darwin-arm64\n",
      "revId": "a379d326234b683c3b4e2c3b7adda4cee364ab03",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4101cb72_752d59dc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5206
      },
      "writtenOn": "2021-01-14T18:01:44Z",
      "side": 1,
      "message": "This seems similar to the hostlinkArchArgs in cmd/link/internal/ld/lib.go and (*Builder).gccArchArgs in cmd/go/internal/work/exec.go and (*Package).gccMachine in cmd/cgo/gcc.go.  Should we just add some cases there?",
      "revId": "a379d326234b683c3b4e2c3b7adda4cee364ab03",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "922d0342_74ea7693",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5056
      },
      "writtenOn": "2021-01-14T18:05:54Z",
      "side": 1,
      "message": "Agree about the comment (add the commit message text) but otherwise it seems OK.\nDoes this handle the linker too?\n",
      "revId": "a379d326234b683c3b4e2c3b7adda4cee364ab03",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2b6dd4cb_cdb0b4a3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 13315
      },
      "writtenOn": "2021-01-14T19:23:15Z",
      "side": 1,
      "message": "I\u0027m not really sure where is the best place to do this. I\u0027ll look into these places. If we could do it in one place, it might be better than doing it in many places, though.\n\nAlso, I think we may not want to pass the flags if user uses a custom C compiler (e.g. have CC set).",
      "parentUuid": "4101cb72_752d59dc",
      "revId": "a379d326234b683c3b4e2c3b7adda4cee364ab03",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a5f57d26_2e1e702b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 13315
      },
      "writtenOn": "2021-01-14T19:23:15Z",
      "side": 1,
      "message": "Yes, it does work for the linker (the ld method in cmd/go/internal/work/gc.go passes it as extldflags).",
      "parentUuid": "922d0342_74ea7693",
      "revId": "a379d326234b683c3b4e2c3b7adda4cee364ab03",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6e7f0998_57f1bf12",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 13315
      },
      "writtenOn": "2021-01-14T19:46:04Z",
      "side": 1,
      "message": "These places seem reasonable to me as well. Let me know if you think that is better. I can make the change.",
      "parentUuid": "2b6dd4cb_cdb0b4a3",
      "revId": "a379d326234b683c3b4e2c3b7adda4cee364ab03",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "228e07d2_906efc00",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5206
      },
      "writtenOn": "2021-01-14T20:03:04Z",
      "side": 1,
      "message": "I do think it\u0027s a bit better since I think that is an existing mechanism, albeit an awkward one.  I\u0027m less comfortable adding a new approach at this stage of the release cycle.  Assuming that using the existing mechanism works, of course.",
      "parentUuid": "6e7f0998_57f1bf12",
      "revId": "a379d326234b683c3b4e2c3b7adda4cee364ab03",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d26215fa_45af9b99",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 13315
      },
      "writtenOn": "2021-01-14T20:53:15Z",
      "side": 1,
      "message": "Done. PTAL. Thanks.",
      "parentUuid": "228e07d2_906efc00",
      "revId": "a379d326234b683c3b4e2c3b7adda4cee364ab03",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "87f92088_2ff135cb",
        "filename": "src/cmd/dist/build.go",
        "patchSetId": 1
      },
      "lineNbr": 292,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-01-14T18:01:34Z",
      "side": 1,
      "message": "Are these flags guaranteed to be supported on all supported versions of C compilers on these platforms?\n\nA comment here would be helpful.",
      "range": {
        "startLine": 287,
        "startChar": 0,
        "endLine": 292,
        "endChar": 2
      },
      "revId": "a379d326234b683c3b4e2c3b7adda4cee364ab03",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3de3f3f4_bfd3b8d9",
        "filename": "src/cmd/dist/build.go",
        "patchSetId": 1
      },
      "lineNbr": 292,
      "author": {
        "id": 13315
      },
      "writtenOn": "2021-01-14T19:23:15Z",
      "side": 1,
      "message": "Yes, it is supported for all supported versions of the system C compiler. (If the user use a custom C compiler or build a custom clang from source, there is nothing we could do.)\n\nAdded comment.",
      "parentUuid": "87f92088_2ff135cb",
      "range": {
        "startLine": 287,
        "startChar": 0,
        "endLine": 292,
        "endChar": 2
      },
      "revId": "a379d326234b683c3b4e2c3b7adda4cee364ab03",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}