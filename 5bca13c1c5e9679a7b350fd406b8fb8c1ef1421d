{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "205597da_a4759f0a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 9,
      "author": {
        "id": 21345
      },
      "writtenOn": "2024-03-18T08:41:55Z",
      "side": 1,
      "message": "Remove",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 9,
        "endChar": 8
      },
      "revId": "5bca13c1c5e9679a7b350fd406b8fb8c1ef1421d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2f8c3622_f4f4de8b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 49133
      },
      "writtenOn": "2024-03-12T22:22:42Z",
      "side": 1,
      "message": "@cherryyz@google.com Could you, please, take a look at this? Thanks!",
      "revId": "5bca13c1c5e9679a7b350fd406b8fb8c1ef1421d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9ed14fcb_baa1b06d",
        "filename": "src/cmd/internal/testdir/testdir_test.go",
        "patchSetId": 3
      },
      "lineNbr": 1461,
      "author": {
        "id": 63983
      },
      "writtenOn": "2024-03-07T15:14:13Z",
      "side": 1,
      "message": "Would you mind adding to the comment here an example input and the regex match? I think that would help to clarify things a bit.",
      "revId": "5bca13c1c5e9679a7b350fd406b8fb8c1ef1421d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9c074b50_02fb3b84",
        "filename": "src/cmd/internal/testdir/testdir_test.go",
        "patchSetId": 3
      },
      "lineNbr": 1461,
      "author": {
        "id": 49133
      },
      "writtenOn": "2024-03-12T22:21:03Z",
      "side": 1,
      "message": "TBH, this is completely orthogonal to my patch.\n\nWhile your suggestion might make sense in general, I don\u0027t think it\u0027s a good idea to fix two distinct problems in a single patch.",
      "parentUuid": "9ed14fcb_baa1b06d",
      "revId": "5bca13c1c5e9679a7b350fd406b8fb8c1ef1421d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "895fb4b1_2ecdfffb",
        "filename": "src/cmd/internal/testdir/testdir_test.go",
        "patchSetId": 3
      },
      "lineNbr": 1474,
      "author": {
        "id": 21345
      },
      "writtenOn": "2024-03-11T05:34:15Z",
      "side": 1,
      "message": "Add \"v8.0, lse\" test?",
      "range": {
        "startLine": 1474,
        "startChar": 13,
        "endLine": 1474,
        "endChar": 41
      },
      "revId": "5bca13c1c5e9679a7b350fd406b8fb8c1ef1421d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c4e4259d_735c4096",
        "filename": "src/cmd/internal/testdir/testdir_test.go",
        "patchSetId": 3
      },
      "lineNbr": 1474,
      "author": {
        "id": 49133
      },
      "writtenOn": "2024-03-12T22:21:03Z",
      "side": 1,
      "message": "It\u0027s not possible to test \"v8.0,lse\" in tests handled by this test driver, as \",\" is used to create a list of architectures (see test/codegen/README.md:66).\n\nAlso, it\u0027s not necessary -- as my test (test/codegen/atomics.go) checks generation of proper instructions in lse/non-lse modes; testing that \"v8.0,lse\" enables LSE is already done in src/internal/buildcfg/cfg_test.go:55.\n\nNote that while \"arm\" line above contains \"7,softfloat\" variant, there are actually no tests that use this architecture variant. It\u0027s impossible to add them.",
      "parentUuid": "895fb4b1_2ecdfffb",
      "range": {
        "startLine": 1474,
        "startChar": 13,
        "endLine": 1474,
        "endChar": 41
      },
      "revId": "5bca13c1c5e9679a7b350fd406b8fb8c1ef1421d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0da84ef7_3e110874",
        "filename": "src/runtime/internal/atomic/atomic_arm64.s",
        "patchSetId": 3
      },
      "lineNbr": 138,
      "author": {
        "id": 21345
      },
      "writtenOn": "2024-03-11T05:34:15Z",
      "side": 1,
      "message": "Is this necessary?",
      "range": {
        "startLine": 138,
        "startChar": 0,
        "endLine": 138,
        "endChar": 19
      },
      "revId": "5bca13c1c5e9679a7b350fd406b8fb8c1ef1421d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0eed0875_fc1d4318",
        "filename": "src/runtime/internal/atomic/atomic_arm64.s",
        "patchSetId": 3
      },
      "lineNbr": 138,
      "author": {
        "id": 49133
      },
      "writtenOn": "2024-03-12T22:21:03Z",
      "side": 1,
      "message": "This saves us from generating dead code for LSE-enabled architectures -- as a minimum, this reduces i-cache pressure and confusion for disassembler readers.",
      "parentUuid": "0da84ef7_3e110874",
      "range": {
        "startLine": 138,
        "startChar": 0,
        "endLine": 138,
        "endChar": 19
      },
      "revId": "5bca13c1c5e9679a7b350fd406b8fb8c1ef1421d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}