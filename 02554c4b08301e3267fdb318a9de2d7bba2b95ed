{
  "comments": [
    {
      "key": {
        "uuid": "51d1e6ba_662898d2",
        "filename": "src/cmd/compile/internal/gc/racewalk.go",
        "patchSetId": 5
      },
      "lineNbr": 13,
      "author": {
        "id": 5167
      },
      "writtenOn": "2018-04-03T02:36:27Z",
      "side": 1,
      "message": "Update this comment to say what\u0027s done here vs in SSA?",
      "revId": "02554c4b08301e3267fdb318a9de2d7bba2b95ed",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "55a92ed8_fabe295c",
        "filename": "src/cmd/compile/internal/gc/racewalk.go",
        "patchSetId": 5
      },
      "lineNbr": 81,
      "author": {
        "id": 5400
      },
      "writtenOn": "2018-04-03T13:24:14Z",
      "side": 1,
      "message": "This will probably be mildly interesting now. And fn.Nbody has not changed at all. But I don\u0027t have any suggestions, I guess we still want to keep this for consistency?",
      "revId": "02554c4b08301e3267fdb318a9de2d7bba2b95ed",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1c792ff9_49cdfd7f",
        "filename": "src/cmd/compile/internal/gc/racewalk.go",
        "patchSetId": 5
      },
      "lineNbr": 87,
      "author": {
        "id": 13315
      },
      "writtenOn": "2018-04-03T15:09:52Z",
      "side": 1,
      "message": "This does not apply now.",
      "range": {
        "startLine": 80,
        "startChar": 0,
        "endLine": 87,
        "endChar": 2
      },
      "revId": "02554c4b08301e3267fdb318a9de2d7bba2b95ed",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aeb3e454_876ff1bd",
        "filename": "src/cmd/compile/internal/gc/ssa.go",
        "patchSetId": 5
      },
      "lineNbr": 3700,
      "author": {
        "id": 5400
      },
      "writtenOn": "2018-04-03T13:24:14Z",
      "side": 1,
      "message": "What are \"false dependencies\"? Dependencies between what and what? And why are they false?\nI am asking because TSAN did caught serious bugs in GCC and LLVM when they incorrectly widened memory accesses which lead to actual memory corruptions, but was caught by TSAN as it runs after the widening pass and was able to see these real wide accesses.",
      "revId": "02554c4b08301e3267fdb318a9de2d7bba2b95ed",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9920e3c5_15bede0c",
        "filename": "src/cmd/compile/internal/gc/ssa.go",
        "patchSetId": 5
      },
      "lineNbr": 3700,
      "author": {
        "id": 13315
      },
      "writtenOn": "2018-04-03T15:09:52Z",
      "side": 1,
      "message": "I think this is from that a load of x.f is compiled to (w/o instrumentation)\n  v1 \u003d Load \u003cStructType\u003e x mem\n  v2 \u003d StructSelect \u003cFieldType\u003e [FieldIndex] v1\nwhich will later be rewritten to just Load a field.\nIf the load is instrumented, it will appear to be a load of the full struct.\n\nWould it make sense then to do it after expanding StructSelect etc.? I think the current approach is fine, doing it later could also be an option.\n\nWould this problem also apply to slice, string, and interface?",
      "parentUuid": "aeb3e454_876ff1bd",
      "revId": "02554c4b08301e3267fdb318a9de2d7bba2b95ed",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "48d916a0_749be81b",
        "filename": "src/cmd/compile/internal/gc/ssa.go",
        "patchSetId": 5
      },
      "lineNbr": 3700,
      "author": {
        "id": 5440
      },
      "writtenOn": "2018-04-03T17:42:58Z",
      "side": 1,
      "message": "Without this, TestNoRaceFinGlobal fails with the race below.\n\nThe problem is that\n\n    finVar.Lock()\n    finVar.cnt++\n    finVar.Unlock()\n\ngets compiled to:\n\n    finVar.Lock()\n    racereadrange(\u0026finVar, 16)\n    x :\u003d finVar.cnt\n    racewrite(\u0026finVar.cnt)\n    finVar.cnt \u003d x + 1\n    finVar.Unlock()\n\nI tried just disabling the wide-load optimization at line 2093, but that caused other failures.\n\nI\u0027d be interested in details of the GCC/LLVM issues that TSAN found. It seems possible they\u0027re present in the Go compiler too.\n\n\n\u003d\u003d\u003d RUN   TestNoRaceFinGlobal\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\nWARNING: DATA RACE\nWrite at 0x0000006b20d0 by goroutine 6:\n  sync/atomic.CompareAndSwapInt32()\n      /home/mdempsky/wd/go/src/runtime/race_amd64.s:293 +0xb\n  sync.(*Mutex).Lock()\n      /home/mdempsky/wd/go/src/sync/mutex.go:74 +0x4d\n  command-line-arguments_test.TestNoRaceFinGlobal()\n      /home/mdempsky/wd/go/src/runtime/race/testdata/finalizer_test.go:48 +0xa2\n  testing.tRunner()\n      /home/mdempsky/wd/go/src/testing/testing.go:788 +0x166\n\nPrevious read at 0x0000006b20d0 by goroutine 5:\n  command-line-arguments_test.TestNoRaceFinGlobal.func1.1()\n      /home/mdempsky/wd/go/src/runtime/race/testdata/finalizer_test.go:40 +0x57\n\nGoroutine 6 (running) created at:\n  testing.(*T).Run()\n      /home/mdempsky/wd/go/src/testing/testing.go:835 +0x568\n  testing.runTests.func1()\n      /home/mdempsky/wd/go/src/testing/testing.go:1078 +0x94\n  testing.tRunner()\n      /home/mdempsky/wd/go/src/testing/testing.go:788 +0x166\n  testing.runTests()\n      /home/mdempsky/wd/go/src/testing/testing.go:1076 +0x4f0\n  testing.(*M).Run()\n      /home/mdempsky/wd/go/src/testing/testing.go:993 +0x2ee\n  main.main()\n      _testmain.go:46 +0x221\n\nGoroutine 5 (running) created at:\n  runtime.createfing()\n      /home/mdempsky/wd/go/src/runtime/mfinal.go:156 +0x60\n  os.NewFile()\n      /home/mdempsky/wd/go/src/os/file_unix.go:79 +0x55\n  os.init()\n      /home/mdempsky/wd/go/src/os/file.go:59 +0x41f\n  main.init()\n      \u003cautogenerated\u003e:1 +0x92\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n--- FAIL: TestNoRaceFinGlobal (0.10s)",
      "parentUuid": "9920e3c5_15bede0c",
      "revId": "02554c4b08301e3267fdb318a9de2d7bba2b95ed",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "78f40a1c_2bfc780f",
        "filename": "src/cmd/compile/internal/gc/ssa.go",
        "patchSetId": 5
      },
      "lineNbr": 3700,
      "author": {
        "id": 5400
      },
      "writtenOn": "2018-04-03T18:13:50Z",
      "side": 1,
      "message": "\u003e I\u0027d be interested in details of the GCC/LLVM issues that TSAN found. It seems possible they\u0027re present in the Go compiler too.\n\nThis was back in 2012, what I can find now is only our internal bug 7051647.",
      "parentUuid": "48d916a0_749be81b",
      "revId": "02554c4b08301e3267fdb318a9de2d7bba2b95ed",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9751d749_4f238f54",
        "filename": "src/cmd/compile/internal/gc/ssa.go",
        "patchSetId": 5
      },
      "lineNbr": 3700,
      "author": {
        "id": 5440
      },
      "writtenOn": "2018-04-03T20:07:36Z",
      "side": 1,
      "message": "Thanks. That bug looks to be due store-widening, which I don\u0027t think we do.\n\nI think we only do load-widening, which I\u0027d expect is always safe? I.e., spurious loads of memory are harmless?",
      "parentUuid": "78f40a1c_2bfc780f",
      "revId": "02554c4b08301e3267fdb318a9de2d7bba2b95ed",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1cda36aa_9811a53b",
        "filename": "src/cmd/compile/internal/gc/ssa.go",
        "patchSetId": 5
      },
      "lineNbr": 3700,
      "author": {
        "id": 13315
      },
      "writtenOn": "2018-04-03T20:12:50Z",
      "side": 1,
      "message": "Do we do load widening? (I\u0027m not aware of.)",
      "parentUuid": "9751d749_4f238f54",
      "revId": "02554c4b08301e3267fdb318a9de2d7bba2b95ed",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4ef1aedb_da0724a9",
        "filename": "src/cmd/compile/internal/gc/ssa.go",
        "patchSetId": 5
      },
      "lineNbr": 3700,
      "author": {
        "id": 5440
      },
      "writtenOn": "2018-04-03T20:20:42Z",
      "side": 1,
      "message": "Sort of.\n\nIn (*state).expr\u0027s handling of ODOT. If x has an SSA-able struct type, then \"x.f\" is handled as an OpLoad of x, then an OpStructSelect of f.\n\nI\u0027m not sure why though. I thought maybe for CSE, but it looks like they get narrowed during the \"opt\" pass anyway, which happens before CSE.",
      "parentUuid": "1cda36aa_9811a53b",
      "revId": "02554c4b08301e3267fdb318a9de2d7bba2b95ed",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c16c4cf8_de052ee2",
        "filename": "src/cmd/compile/internal/gc/ssa.go",
        "patchSetId": 5
      },
      "lineNbr": 3858,
      "author": {
        "id": 13315
      },
      "writtenOn": "2018-04-03T15:09:52Z",
      "side": 1,
      "message": "Should we honor skip here? I.e. only instrument stores to fields we actually store?",
      "revId": "02554c4b08301e3267fdb318a9de2d7bba2b95ed",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9dcf6571_d74efcbd",
        "filename": "src/cmd/compile/internal/gc/ssa.go",
        "patchSetId": 5
      },
      "lineNbr": 3858,
      "author": {
        "id": 5440
      },
      "writtenOn": "2018-04-03T17:42:58Z",
      "side": 1,
      "message": "I\u0027m inclined to say we should not. Strings/slices/interfaces are logically a single value, even if we\u0027re able to optimize away stores to some of their subcomponents.",
      "parentUuid": "c16c4cf8_de052ee2",
      "revId": "02554c4b08301e3267fdb318a9de2d7bba2b95ed",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5594616c_a4bb053b",
        "filename": "src/cmd/compile/internal/gc/syntax.go",
        "patchSetId": 5
      },
      "lineNbr": 528,
      "author": {
        "id": 5167
      },
      "writtenOn": "2018-04-03T02:36:27Z",
      "side": 1,
      "message": "Doc comment",
      "revId": "02554c4b08301e3267fdb318a9de2d7bba2b95ed",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "73ade6dd_4557fa81",
        "filename": "src/cmd/compile/internal/ssa/writebarrier.go",
        "patchSetId": 5
      },
      "lineNbr": 353,
      "author": {
        "id": 5167
      },
      "writtenOn": "2018-04-03T02:36:27Z",
      "side": 1,
      "message": "\"Safe\" in what sense? Perhaps the name should be more specific.",
      "revId": "02554c4b08301e3267fdb318a9de2d7bba2b95ed",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "96c2b2db_5af61062",
        "filename": "src/cmd/compile/internal/ssa/writebarrier.go",
        "patchSetId": 5
      },
      "lineNbr": 353,
      "author": {
        "id": 13315
      },
      "writtenOn": "2018-04-03T15:09:52Z",
      "side": 1,
      "message": "I agree with Austin -- \"Safe\" isn\u0027t very clear here.\n\nAlso it seems this function is here simply because it is adjacent to IsStackAddr, but this has nothing to do with write barrier, so maybe consider placing it somewhere else. gc/ssa.go could be an option, as the ssa package doesn\u0027t use it. But it operates on SSA values, and moving to gc package would rewrite all the OpXXX to ssa.OpXXX... I\u0027m not sure.",
      "parentUuid": "73ade6dd_4557fa81",
      "revId": "02554c4b08301e3267fdb318a9de2d7bba2b95ed",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    }
  ]
}