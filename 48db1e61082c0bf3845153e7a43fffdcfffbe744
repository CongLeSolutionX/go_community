{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "72bbecfe_22a10570",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 25391
      },
      "writtenOn": "2024-01-09T18:01:44Z",
      "side": 1,
      "message": "what did you benchmark for this?\n\nFWIW, I have found that madvise(MADV_DONTNEED)+mprotect was about this much faster compared to mmap in isolation when checking it out for the arena implementation via sysFault; I just never got around to using it because it\u0027s an experiment anyway. that\u0027s maybe the one place where I think this change makes a lot of sense.\n\nfor normal heap mappings, I wouldn\u0027t expect to see a similar improvement. the number of mmaps for the heap is basically finite in the lifetime of a program, because the runtime never unmaps heap memory. as a result, the performance of it doesn\u0027t matter much.",
      "range": {
        "startLine": 10,
        "startChar": 15,
        "endLine": 10,
        "endChar": 54
      },
      "revId": "48db1e61082c0bf3845153e7a43fffdcfffbe744",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d627e917_457cc80f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 25,
      "author": {
        "id": 12120
      },
      "writtenOn": "2024-01-09T13:57:12Z",
      "side": 1,
      "message": "The description above is a nice explanation of mmap_lock, but it doesn\u0027t explain why mprotect is lower latency. In fact, it implies that they should be the same (they both take mmap_lock).",
      "revId": "48db1e61082c0bf3845153e7a43fffdcfffbe744",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3d5bee73_9cacefcc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2024-01-09T13:41:13Z",
      "side": 1,
      "message": "I spotted some possible problems.\n\nThese findings are based on simple heuristics. If a finding appears wrong, briefly reply here saying so. Otherwise, please address any problems and update the GitHub PR. When complete, mark this comment as \u0027Done\u0027 and click the [blue \u0027Reply\u0027 button](https://go.dev/wiki/GerritBot#i-left-a-reply-to-a-comment-in-gerrit-but-no-one-but-me-can-see-it) above.\n\nPossible problems detected:\n  1. Lines in the commit message should be wrapped at ~76 characters unless needed for things like URLs or tables. You have a 84 character line.\n  2. You usually need to reference a bug number for all but trivial or cosmetic fixes. For this repo, the format is usually \u0027Fixes #12345\u0027 or \u0027Updates #12345\u0027 at the end of the commit message. Should you have a bug reference?\n\nThe commit title and commit message body come from the GitHub PR title and description, and must be edited in the GitHub web interface (not via git). For instructions, see [here](https://go.dev/wiki/GerritBot/#how-does-gerritbot-determine-the-final-commit-message). For guidelines on commit messages for the Go project, see [here](https://go.dev/doc/contribute#commit_messages).\n\n\n(In general for Gerrit code reviews, the change author is expected to [log in to Gerrit](https://go-review.googlesource.com/login/) with a Gmail or other Google account and then close out each piece of feedback by marking it as \u0027Done\u0027 if implemented as suggested or otherwise reply to each review comment. See the [Review](https://go.dev/doc/contribute#review) section of the Contributing Guide for details.)",
      "revId": "48db1e61082c0bf3845153e7a43fffdcfffbe744",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "36361248_dfcc90fb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 62423
      },
      "writtenOn": "2024-01-09T13:46:03Z",
      "side": 1,
      "message": "Hi @mknyszek@google.com\nLong time no see :-p",
      "revId": "48db1e61082c0bf3845153e7a43fffdcfffbe744",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "87dbbe0f_9b04ad65",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 62423
      },
      "writtenOn": "2024-01-09T13:46:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3d5bee73_9cacefcc",
      "revId": "48db1e61082c0bf3845153e7a43fffdcfffbe744",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4c3ac34d_5cccffd1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 25391
      },
      "writtenOn": "2024-01-09T18:01:44Z",
      "side": 1,
      "message": "thanks for your change! I think that adding the ability to call mprotect from the runtime is general positive since we\u0027ve wanted to try something out with it on a whim before, but such whims have generally been discarded when we realize we\u0027d have to add the assembly for it. :P\n\nas I mention in another comment, I think targeting sysFault here with the goal of improving the arena implementation is probably the best reason IMO to keep mprotect.",
      "revId": "48db1e61082c0bf3845153e7a43fffdcfffbe744",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2b02e656_85f01e08",
        "filename": "src/runtime/mem_linux.go",
        "patchSetId": 1
      },
      "lineNbr": 164,
      "author": {
        "id": 12120
      },
      "writtenOn": "2024-01-09T13:57:12Z",
      "side": 1,
      "message": "This, combined with the sysFaultOS change above, is a change in semantics. Previously `sysMapOS` -\u003e `sysFaultOS` -\u003e `sysMapOS` would zero the pages, now it will not.\n\nIt is not documented at the top of mem.go, but I\u0027m almost certain that we require `sysMapOS` to return zeroed memory.",
      "revId": "48db1e61082c0bf3845153e7a43fffdcfffbe744",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6735b66c_f930378c",
        "filename": "src/runtime/mem_linux.go",
        "patchSetId": 1
      },
      "lineNbr": 164,
      "author": {
        "id": 25391
      },
      "writtenOn": "2024-01-09T18:01:44Z",
      "side": 1,
      "message": "yeah it\u0027s not documented here but it\u0027s kinda documented in mem.go: https://cs.opensource.google/go/go/+/master:src/runtime/mem.go;l\u003d123;bpv\u003d1;bpt\u003d1?q\u003dmem.go\u0026ss\u003dgo%2Fgo\n\nthe arena implementation cares about this specifically (though the mem.go docs are wrong, and say it\u0027s only used for debugging).",
      "parentUuid": "2b02e656_85f01e08",
      "revId": "48db1e61082c0bf3845153e7a43fffdcfffbe744",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}