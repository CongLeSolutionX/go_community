{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "3b8edcf2_52a4a704",
        "filename": "src/cmd/internal/test2json/test2json.go",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 57259
      },
      "writtenOn": "2024-08-06T20:19:20Z",
      "side": 1,
      "message": "This change should be reflected in the public documentation at src/cmd/test2json/main.go; it should describe the values of OutputType and their significance.",
      "revId": "169e94d759b9aed7fd200e97de8e6bbadc99eba3",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bade15b5_e03451e4",
        "filename": "src/cmd/internal/test2json/test2json.go",
        "patchSetId": 2
      },
      "lineNbr": 62,
      "author": {
        "id": 57259
      },
      "writtenOn": "2024-08-06T20:19:20Z",
      "side": 1,
      "message": "markFraming",
      "range": {
        "startLine": 62,
        "startChar": 34,
        "endLine": 62,
        "endChar": 43
      },
      "revId": "169e94d759b9aed7fd200e97de8e6bbadc99eba3",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f7ccfa4a_2ea35bf9",
        "filename": "src/cmd/internal/test2json/test2json.go",
        "patchSetId": 2
      },
      "lineNbr": 63,
      "author": {
        "id": 57259
      },
      "writtenOn": "2024-08-06T20:19:20Z",
      "side": 1,
      "message": "markErrEnd",
      "range": {
        "startLine": 63,
        "startChar": 51,
        "endLine": 63,
        "endChar": 60
      },
      "revId": "169e94d759b9aed7fd200e97de8e6bbadc99eba3",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cf044200_9fffc393",
        "filename": "src/cmd/internal/test2json/test2json.go",
        "patchSetId": 2
      },
      "lineNbr": 146,
      "author": {
        "id": 57259
      },
      "writtenOn": "2024-08-06T20:19:20Z",
      "side": 1,
      "message": "Use const ( ... ) so that they line up neatly.\n\n\nIf you like, you can compute the codes without arbitrary numbers:\n```\nconst ( \n    markFraming  byte \u003d \u0027V\u0027 \u0026^ \u0027@\u0027 // ^V: framing\n    markErrBegin byte \u003d \u0027N\u0027 \u0026^ \u0027@\u0027 // ^N: start of error\n    markErrEnd   byte \u003d \u0027O\u0027 \u0026^ \u0027@\u0027 // ^O: end of error\n)\n```",
      "revId": "169e94d759b9aed7fd200e97de8e6bbadc99eba3",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a0e45777_a645fff7",
        "filename": "src/cmd/internal/test2json/test2json.go",
        "patchSetId": 2
      },
      "lineNbr": 355,
      "author": {
        "id": 52633
      },
      "writtenOn": "2024-07-27T01:28:10Z",
      "side": 1,
      "message": "This is a gross way of \u0027passing\u0027 data through the line buffer to `writeOutputEvent` but it seems in line with what\u0027s already happening (e.g. c.testName) and actually passing the data through would involve significant modifications to the line buffer and code that uses it.",
      "revId": "169e94d759b9aed7fd200e97de8e6bbadc99eba3",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "53f6e2bc_afac2de7",
        "filename": "src/testing/sub_test.go",
        "patchSetId": 2
      },
      "lineNbr": 735,
      "author": {
        "id": 57259
      },
      "writtenOn": "2024-08-06T20:19:20Z",
      "side": 1,
      "message": "// makeRegexp transforms a line in the text notation to a pattern.",
      "revId": "169e94d759b9aed7fd200e97de8e6bbadc99eba3",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}