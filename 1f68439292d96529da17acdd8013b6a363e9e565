{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "32c65d27_eb9cb8e2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-05-22T17:54:18Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003d1f684392\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "1f68439292d96529da17acdd8013b6a363e9e565",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "631960df_761663d9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-05-22T17:54:18Z",
      "side": 1,
      "message": "Superseded.",
      "parentUuid": "890714a9_21cd5b13",
      "tag": "autogenerated:trybots~beginning",
      "revId": "1f68439292d96529da17acdd8013b6a363e9e565",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ec740f4a_daaeaa6b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-05-22T18:05:31Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "32c65d27_eb9cb8e2",
      "tag": "autogenerated:trybots~happy",
      "revId": "1f68439292d96529da17acdd8013b6a363e9e565",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "61d60bfb_ec81dea4",
        "filename": "src/crypto/tls/ticket.go",
        "patchSetId": 3
      },
      "lineNbr": 303,
      "author": {
        "id": 28787
      },
      "writtenOn": "2023-05-23T07:45:02Z",
      "side": 1,
      "message": "It\u0027s not clear what to do when this errors.\n\nTo save the QUIC transport parameters alongside the ticket, a QUIC stack would wrap a ClientSessionCache that was provided by the implementation. This is how such a wrapping function could look like:\n```\nfunc (c clientSessionCache) Get(key string) (*tls.ClientSessionState, bool) {\n\tcs, ok :\u003d c.wrapped.Get(key)\n\tif !ok || cs \u003d\u003d nil {\n\t\treturn cs, ok\n\t}\n\tticket, state, err :\u003d cs.ResumptionState()\n\tif err !\u003d nil {\n\t\t// It\u0027s not clear why this would error.\n\t\t// Do we need to remove the ticket from the session cache,\n\t\t// so we don\u0027t run into this error over and over again?\n\t\treturn nil, false\n\t}\n\tif state.EarlyData {\n\t\t// restore QUIC transport parameters stored in state.Extra\n\t}\n\tsession, err :\u003d tls.NewResumptionState(ticket, state)\n\tif err !\u003d nil {\n\t\t// It\u0027s not clear why this would error.\n\t\t// Do we need to remove the ticket from the session cache,\n\t\t// so we don\u0027t run into this error over and over again?\n\t\tc.wrapped.Put(key, cs)\n\t\treturn nil, false\n\t}\n\treturn session, true\n}\n```",
      "revId": "1f68439292d96529da17acdd8013b6a363e9e565",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}