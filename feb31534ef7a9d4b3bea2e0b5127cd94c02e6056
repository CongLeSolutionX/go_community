{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "02c37c26_b40e8d93",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-11-17T00:22:40Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003dfeb31534\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "feb31534ef7a9d4b3bea2e0b5127cd94c02e6056",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7a2cc89e_b1c7d2b1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-11-17T00:36:02Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "02c37c26_b40e8d93",
      "tag": "autogenerated:trybots~happy",
      "revId": "feb31534ef7a9d4b3bea2e0b5127cd94c02e6056",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cdc3a1b9_682c4647",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5440
      },
      "writtenOn": "2022-11-17T01:40:41Z",
      "side": 1,
      "message": "FWIW, I\u0027m not yet convinced this is a real issue meriting a backwards-incompatible language change. I think it should be discussed further on the issue first.",
      "revId": "feb31534ef7a9d4b3bea2e0b5127cd94c02e6056",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fe4fede3_fc17e167",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 7392
      },
      "writtenOn": "2022-11-17T04:11:27Z",
      "side": 1,
      "message": "Understood. Hence the flag to disable the code quickly.\n\nOne of the invariants I believe we should not break is that it should be possible to write any code that works with type inference also without type inference. That ensures that type inference is simply a convenience, and not a fundamentally new capability. As is, this is clearly not the case.\n\nI believe this is a bug that we need to fix.",
      "parentUuid": "cdc3a1b9_682c4647",
      "revId": "feb31534ef7a9d4b3bea2e0b5127cd94c02e6056",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e2f3ad9d_425453d5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 26814
      },
      "writtenOn": "2022-11-17T07:41:12Z",
      "side": 1,
      "message": "Will this code - https://go.dev/play/p/s-ucinhGsVC continue to work with this change? \"none\" there is a private type, but it\u0027s hidden behind type alias which is exported.",
      "revId": "feb31534ef7a9d4b3bea2e0b5127cd94c02e6056",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9786fcfb_88a7000b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 7392
      },
      "writtenOn": "2022-11-17T18:30:08Z",
      "side": 1,
      "message": "No, this won\u0027t work because none is not exported (also there\u0027s an alias but it\u0027s for ExportedInt).\n\nHow important is this kind of pattern?",
      "parentUuid": "e2f3ad9d_425453d5",
      "revId": "feb31534ef7a9d4b3bea2e0b5127cd94c02e6056",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b19f7319_e5ddbf53",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 31647
      },
      "writtenOn": "2022-11-17T19:01:13Z",
      "side": 1,
      "message": "Change LGTM, but I will defer to others for deciding whether this is something we want to fix.",
      "revId": "feb31534ef7a9d4b3bea2e0b5127cd94c02e6056",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c698fc56_50ff7518",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 31647
      },
      "writtenOn": "2022-11-17T19:01:13Z",
      "side": 1,
      "message": "FWIW, I find Robert\u0027s argument to be convincing. My expectation is that type inference is a convenience, and should not affect the type of code that can be written.",
      "parentUuid": "fe4fede3_fc17e167",
      "revId": "feb31534ef7a9d4b3bea2e0b5127cd94c02e6056",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "44fb8aeb_26693a11",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 26814
      },
      "writtenOn": "2022-11-17T19:36:34Z",
      "side": 1,
      "message": "For completeness sake I don\u0027t like the fact that we can iterate using CountSetOfInts but with this change can\u0027t with Count[]. In practice a lot of code in protobuf modules uses type aliases, but I can\u0027t name anything particular ATM which does use private and exported types at the same composite type.\n\nAlso this change doesn\u0027t take type aliases into account when it does type inference. Aka https://go.dev/play/p/0uWYrbtezew will stop working, but it is correct code.",
      "parentUuid": "9786fcfb_88a7000b",
      "revId": "feb31534ef7a9d4b3bea2e0b5127cd94c02e6056",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c67c4e44_54017d0f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 31647
      },
      "writtenOn": "2022-11-17T19:43:28Z",
      "side": 1,
      "message": "The point about aliases is a good one.\n\nUnfortunately, I think this means we can\u0027t make this change, because the type-checker lacks information about aliases.",
      "parentUuid": "44fb8aeb_26693a11",
      "revId": "feb31534ef7a9d4b3bea2e0b5127cd94c02e6056",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7ad287f6_279f62ab",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 7392
      },
      "writtenOn": "2022-11-17T21:40:01Z",
      "side": 1,
      "message": "The lack of information about aliases is a separate issue that we should address separately.\n\nThe point I am trying to make here is very simple: if the code cannot be written without type inference, we shouldn\u0027t be able to call type inference to the rescue. We should write the code so that it works w/o type inference. Note that type inference is strictly a convenience feature. This was clearly the intent early on an expressed explicitly in the type parameters design doc ( https://go.googlesource.com/proposal/+/HEAD/design/43651-type-parameters.md#type-inference ).",
      "parentUuid": "c67c4e44_54017d0f",
      "revId": "feb31534ef7a9d4b3bea2e0b5127cd94c02e6056",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ba2bccd0_8ea02d77",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 31647
      },
      "writtenOn": "2022-11-17T21:51:16Z",
      "side": 1,
      "message": "Right but per Dmitry\u0027s point, with type aliases this change would mean that valid type inference would fail (meaning type inference that IS possible to replace with explicit type arguments.\n\nPut differently, suppose I am using lib, and have func F[T any](T). Suppose somewhere I have var x lib.X and call F(x).\n\nNow suppose someone is refactoring lib, and does `type X \u003d internalX`. This is a non-breaking change, but would break users of lib!\n\nTherefore we can\u0027t do this, with the current compiler, because of the lack of alias information.",
      "parentUuid": "7ad287f6_279f62ab",
      "revId": "feb31534ef7a9d4b3bea2e0b5127cd94c02e6056",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "acab5b1e_ed5ef4ae",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 31647
      },
      "writtenOn": "2022-11-17T21:54:41Z",
      "side": 1,
      "message": "Duh, sorry for the poor formatting.\n\nThis is what I mean:\nhttps://go.dev/play/p/cRDfDVtTBAZ\n\nIn that example, the calling program would break when the library author changes Y to be an alias for an unexported type. We can\u0027t do this.",
      "parentUuid": "ba2bccd0_8ea02d77",
      "revId": "feb31534ef7a9d4b3bea2e0b5127cd94c02e6056",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bfd15280_5b29b867",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 7392
      },
      "writtenOn": "2022-11-21T21:11:57Z",
      "side": 1,
      "message": "On hold for now.",
      "revId": "feb31534ef7a9d4b3bea2e0b5127cd94c02e6056",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "493b1f6b_a7904eb9",
        "filename": "src/cmd/compile/internal/types2/infer.go",
        "patchSetId": 2
      },
      "lineNbr": 73,
      "author": {
        "id": 31647
      },
      "writtenOn": "2022-11-17T00:42:19Z",
      "side": 1,
      "message": "Why are we formatting the position here?",
      "range": {
        "startLine": 73,
        "startChar": 84,
        "endLine": 73,
        "endChar": 89
      },
      "revId": "feb31534ef7a9d4b3bea2e0b5127cd94c02e6056",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5086993b_b8b19188",
        "filename": "src/cmd/compile/internal/types2/infer.go",
        "patchSetId": 2
      },
      "lineNbr": 73,
      "author": {
        "id": 7392
      },
      "writtenOn": "2022-11-17T04:11:27Z",
      "side": 1,
      "message": "Because we want to identify the type parameter in question (they frequently have similar names). See line 345 for another example.",
      "parentUuid": "493b1f6b_a7904eb9",
      "range": {
        "startLine": 73,
        "startChar": 84,
        "endLine": 73,
        "endChar": 89
      },
      "revId": "feb31534ef7a9d4b3bea2e0b5127cd94c02e6056",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "063540a9_164491c8",
        "filename": "src/cmd/compile/internal/types2/infer.go",
        "patchSetId": 2
      },
      "lineNbr": 73,
      "author": {
        "id": 31647
      },
      "writtenOn": "2022-11-17T19:01:13Z",
      "side": 1,
      "message": "Ack.",
      "parentUuid": "5086993b_b8b19188",
      "range": {
        "startLine": 73,
        "startChar": 84,
        "endLine": 73,
        "endChar": 89
      },
      "revId": "feb31534ef7a9d4b3bea2e0b5127cd94c02e6056",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}