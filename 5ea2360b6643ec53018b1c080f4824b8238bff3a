{
  "comments": [
    {
      "key": {
        "uuid": "aad9383a_3e96ce3d",
        "filename": "src/net/http/httputil/reverseproxy.go",
        "patchSetId": 8
      },
      "lineNbr": 194,
      "author": {
        "id": 5056
      },
      "writtenOn": "2017-12-06T01:11:01Z",
      "side": 1,
      "message": "This CL claims to be ensuring that p.ModifyResponse has a chance to modify error responses sent because RoundTrip has failed. But this CL also changes the condition here from err !\u003d nil to res \u003d\u003d nil. Are you sure that\u0027s right?\n\nRoundTrippers that used to return non-nil res with non-nil err (incorrectly, but still) were handled correctly here by assuming the err was what mattered. But now the response from RoundTrip (which might well be garbage) is being processed and sent back. I am not convinced that\u0027s desirable.",
      "revId": "5ea2360b6643ec53018b1c080f4824b8238bff3a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "104e96da_472e1b80",
        "filename": "src/net/http/httputil/reverseproxy.go",
        "patchSetId": 8
      },
      "lineNbr": 194,
      "author": {
        "id": 17921
      },
      "writtenOn": "2017-12-06T03:21:09Z",
      "side": 1,
      "message": "I incorrectly assumed that RoundTrippers would return a nil res with a non-nil err. I believe the correct behavior here would be to construct the fake response when err !\u003d nil. This would be valid since previously the response was not passed to ModifyResponse on error anyways.\n\nAs to why we construct a fake response in the first place, it is to ensure that the res is mutable via the ModifyResponse function. The disadvantage is that ModifyResponse can\u0027t act based on the error value unless it was sent via a header/type assertion or something. For that behavior, golang.org/issue/22700 would be a better solution.",
      "parentUuid": "aad9383a_3e96ce3d",
      "revId": "5ea2360b6643ec53018b1c080f4824b8238bff3a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    }
  ]
}