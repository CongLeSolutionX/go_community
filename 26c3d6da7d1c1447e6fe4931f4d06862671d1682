{
  "comments": [
    {
      "key": {
        "uuid": "96812928_a4ca1510",
        "filename": "src/cmd/compile/internal/ssa/gen/ARM64.rules",
        "patchSetId": 2
      },
      "lineNbr": 605,
      "author": {
        "id": 13315
      },
      "writtenOn": "2018-08-13T14:38:19Z",
      "side": 1,
      "message": "Are these really a win? It is two instructions before and after.",
      "range": {
        "startLine": 597,
        "startChar": 0,
        "endLine": 605,
        "endChar": 0
      },
      "revId": "26c3d6da7d1c1447e6fe4931f4d06862671d1682",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8e8d4380_bb3a9010",
        "filename": "src/cmd/compile/internal/ssa/gen/ARM64.rules",
        "patchSetId": 2
      },
      "lineNbr": 605,
      "author": {
        "id": 16935
      },
      "writtenOn": "2018-08-14T01:30:36Z",
      "side": 1,
      "message": "The go1 test case JSONDecode-4 will get 6% performance drop without those rules.",
      "parentUuid": "96812928_a4ca1510",
      "range": {
        "startLine": 597,
        "startChar": 0,
        "endLine": 605,
        "endChar": 0
      },
      "revId": "26c3d6da7d1c1447e6fe4931f4d06862671d1682",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bec73a68_fc5dcb4a",
        "filename": "src/cmd/compile/internal/ssa/gen/ARM64.rules",
        "patchSetId": 2
      },
      "lineNbr": 605,
      "author": {
        "id": 16935
      },
      "writtenOn": "2018-08-27T08:47:13Z",
      "side": 1,
      "message": "Actually current form is the best that I can tune. Some specific cases get improved while others are not impacted.",
      "parentUuid": "8e8d4380_bb3a9010",
      "range": {
        "startLine": 597,
        "startChar": 0,
        "endLine": 605,
        "endChar": 0
      },
      "revId": "26c3d6da7d1c1447e6fe4931f4d06862671d1682",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c251edbf_935d452b",
        "filename": "src/cmd/compile/internal/ssa/gen/ARM64.rules",
        "patchSetId": 2
      },
      "lineNbr": 1060,
      "author": {
        "id": 13315
      },
      "writtenOn": "2018-08-27T15:39:53Z",
      "side": 1,
      "message": "I\u0027m not sure this is correct. If a is 64-bit, the ADD will preserve the high bits of a. But MADDW will do a 32-bit a+x*y, which will not.\n\nMaybe this is very unlikely to happen because type-checked program don\u0027t mix 32-bit and 64-bit operations. But if we recognize the result of MULW doesn\u0027t need zero extension, we may possibly end up here.\n\nMaybe only rewrite when ADD\u0027s result is 32-bit (or below).",
      "range": {
        "startLine": 1060,
        "startChar": 0,
        "endLine": 1060,
        "endChar": 143
      },
      "revId": "26c3d6da7d1c1447e6fe4931f4d06862671d1682",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    }
  ]
}