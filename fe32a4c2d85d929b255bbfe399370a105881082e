{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "fda6cb03_2c3a3a30",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 17092
      },
      "writtenOn": "2021-04-05T16:04:42Z",
      "side": 1,
      "message": "TRY\u003dlinux-amd64-longtest,windows-amd64-longtest",
      "revId": "fe32a4c2d85d929b255bbfe399370a105881082e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1a4a3988_30d05435",
        "filename": "src/cmd/go/testdata/script/test_fuzz_fuzztime.txt",
        "patchSetId": 3
      },
      "lineNbr": 20,
      "author": {
        "id": 28759
      },
      "writtenOn": "2021-04-06T18:24:32Z",
      "side": 1,
      "message": "\"...with a unique corpus entry on each...\" ?",
      "range": {
        "startLine": 20,
        "startChar": 49,
        "endLine": 20,
        "endChar": 50
      },
      "revId": "fe32a4c2d85d929b255bbfe399370a105881082e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "488ced3e_6ff1ea1c",
        "filename": "src/cmd/go/testdata/script/test_fuzz_fuzztime.txt",
        "patchSetId": 3
      },
      "lineNbr": 20,
      "author": {
        "id": 17092
      },
      "writtenOn": "2021-04-07T22:37:49Z",
      "side": 1,
      "message": "A unique file name.\n\nI was basically looking for an easy way to count how many times the fuzzing function ran. It needs some global side effect, ideally without synchronizing an unknown number of processes. Creating files seemed like a convenient way to accomplish that.",
      "parentUuid": "1a4a3988_30d05435",
      "range": {
        "startLine": 20,
        "startChar": 49,
        "endLine": 20,
        "endChar": 50
      },
      "revId": "fe32a4c2d85d929b255bbfe399370a105881082e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bb49256b_6e1d976c",
        "filename": "src/cmd/go/testdata/script/test_fuzz_fuzztime.txt",
        "patchSetId": 3
      },
      "lineNbr": 25,
      "author": {
        "id": 28759
      },
      "writtenOn": "2021-04-06T18:24:32Z",
      "side": 1,
      "message": "I guess we assume that the randomness isn\u0027t going to create the same entry more than once in 1000 runs?",
      "range": {
        "startLine": 25,
        "startChar": 8,
        "endLine": 25,
        "endChar": 14
      },
      "revId": "fe32a4c2d85d929b255bbfe399370a105881082e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "37c018ff_8cf1d183",
        "filename": "src/cmd/go/testdata/script/test_fuzz_fuzztime.txt",
        "patchSetId": 3
      },
      "lineNbr": 25,
      "author": {
        "id": 17092
      },
      "writtenOn": "2021-04-07T22:37:49Z",
      "side": 1,
      "message": "No randomness: each run should create a new file without taking the input value into account.",
      "parentUuid": "bb49256b_6e1d976c",
      "range": {
        "startLine": 25,
        "startChar": 8,
        "endLine": 25,
        "endChar": 14
      },
      "revId": "fe32a4c2d85d929b255bbfe399370a105881082e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "371a20fc_27d68914",
        "filename": "src/cmd/go/testdata/script/test_fuzz_fuzztime.txt",
        "patchSetId": 3
      },
      "lineNbr": 25,
      "author": {
        "id": 28759
      },
      "writtenOn": "2021-04-09T14:33:36Z",
      "side": 1,
      "message": "Ah I see. Gotcha üëç",
      "parentUuid": "37c018ff_8cf1d183",
      "range": {
        "startLine": 25,
        "startChar": 8,
        "endLine": 25,
        "endChar": 14
      },
      "revId": "fe32a4c2d85d929b255bbfe399370a105881082e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8efb7ec9_a2edcaf2",
        "filename": "src/internal/fuzz/fuzz.go",
        "patchSetId": 3
      },
      "lineNbr": 64,
      "author": {
        "id": 28759
      },
      "writtenOn": "2021-04-06T18:24:32Z",
      "side": 1,
      "message": "// Don\u0027t start more workers than we need\n\n?",
      "range": {
        "startLine": 64,
        "startChar": 2,
        "endLine": 64,
        "endChar": 23
      },
      "revId": "fe32a4c2d85d929b255bbfe399370a105881082e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d22f3d9f_4bd68100",
        "filename": "src/internal/fuzz/fuzz.go",
        "patchSetId": 3
      },
      "lineNbr": 64,
      "author": {
        "id": 17092
      },
      "writtenOn": "2021-04-07T22:37:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8efb7ec9_a2edcaf2",
      "range": {
        "startLine": 64,
        "startChar": 2,
        "endLine": 64,
        "endChar": 23
      },
      "revId": "fe32a4c2d85d929b255bbfe399370a105881082e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "64c7cbca_028aa6e2",
        "filename": "src/internal/fuzz/fuzz.go",
        "patchSetId": 3
      },
      "lineNbr": 207,
      "author": {
        "id": 28759
      },
      "writtenOn": "2021-04-06T18:24:32Z",
      "side": 1,
      "message": "It took me a little while to realize that workers get new inputs in the main loop b/c of these few lines, ie. because input is set at line 208 and then read at line 221. The comment almost makes this sound like these lines are a safeguard against something, whereas it\u0027s actually the core part of the functionality for non-failing mutations IIUC. Maybe just update the comment to something like \"The worker responded with success, so re-enable inputC and load the next input.\"",
      "range": {
        "startLine": 207,
        "startChar": 4,
        "endLine": 207,
        "endChar": 73
      },
      "revId": "fe32a4c2d85d929b255bbfe399370a105881082e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b37ea3d3_6d9d156f",
        "filename": "src/internal/fuzz/fuzz.go",
        "patchSetId": 3
      },
      "lineNbr": 207,
      "author": {
        "id": 17092
      },
      "writtenOn": "2021-04-07T22:37:49Z",
      "side": 1,
      "message": "Clarified.",
      "parentUuid": "64c7cbca_028aa6e2",
      "range": {
        "startLine": 207,
        "startChar": 4,
        "endLine": 207,
        "endChar": 73
      },
      "revId": "fe32a4c2d85d929b255bbfe399370a105881082e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4ef98ebd_87be8963",
        "filename": "src/internal/fuzz/fuzz.go",
        "patchSetId": 3
      },
      "lineNbr": 300,
      "author": {
        "id": 28759
      },
      "writtenOn": "2021-04-06T18:24:32Z",
      "side": 1,
      "message": "the",
      "range": {
        "startLine": 300,
        "startChar": 43,
        "endLine": 300,
        "endChar": 45
      },
      "revId": "fe32a4c2d85d929b255bbfe399370a105881082e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "907e04b8_080e929d",
        "filename": "src/internal/fuzz/fuzz.go",
        "patchSetId": 3
      },
      "lineNbr": 300,
      "author": {
        "id": 17092
      },
      "writtenOn": "2021-04-07T22:37:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4ef98ebd_87be8963",
      "range": {
        "startLine": 300,
        "startChar": 43,
        "endLine": 300,
        "endChar": 45
      },
      "revId": "fe32a4c2d85d929b255bbfe399370a105881082e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "150cbb8e_3492fd78",
        "filename": "src/internal/fuzz/fuzz.go",
        "patchSetId": 3
      },
      "lineNbr": 362,
      "author": {
        "id": 28759
      },
      "writtenOn": "2021-04-06T18:24:32Z",
      "side": 1,
      "message": "perhaps keep the comment:\n// Make sure all of the seed corpus has marshalled data.",
      "range": {
        "startLine": 358,
        "startChar": 2,
        "endLine": 362,
        "endChar": 2
      },
      "revId": "fe32a4c2d85d929b255bbfe399370a105881082e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d6afe178_d2cfdef7",
        "filename": "src/internal/fuzz/fuzz.go",
        "patchSetId": 3
      },
      "lineNbr": 362,
      "author": {
        "id": 17092
      },
      "writtenOn": "2021-04-07T22:37:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "150cbb8e_3492fd78",
      "range": {
        "startLine": 358,
        "startChar": 2,
        "endLine": 362,
        "endChar": 2
      },
      "revId": "fe32a4c2d85d929b255bbfe399370a105881082e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ca581e65_81d1695a",
        "filename": "src/internal/fuzz/fuzz.go",
        "patchSetId": 3
      },
      "lineNbr": 420,
      "author": {
        "id": 28759
      },
      "writtenOn": "2021-04-06T18:24:32Z",
      "side": 1,
      "message": "Maybe consider (with whatever variable name makes the most sense):\n\n\t\tmaxPerWorker :\u003d c.countRequested-c.count-c.countWaiting\n\t\tif n \u003e maxPerWorker {\n\t\t\tn \u003d maxPerWorker\n\t\t}",
      "range": {
        "startLine": 418,
        "startChar": 0,
        "endLine": 420,
        "endChar": 3
      },
      "revId": "fe32a4c2d85d929b255bbfe399370a105881082e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3ffe7843_c028d6ef",
        "filename": "src/internal/fuzz/fuzz.go",
        "patchSetId": 3
      },
      "lineNbr": 420,
      "author": {
        "id": 17092
      },
      "writtenOn": "2021-04-07T22:37:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ca581e65_81d1695a",
      "range": {
        "startLine": 418,
        "startChar": 0,
        "endLine": 420,
        "endChar": 3
      },
      "revId": "fe32a4c2d85d929b255bbfe399370a105881082e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0133433a_37d3923b",
        "filename": "src/internal/fuzz/fuzz.go",
        "patchSetId": 3
      },
      "lineNbr": 420,
      "author": {
        "id": 28759
      },
      "writtenOn": "2021-04-09T14:33:36Z",
      "side": 1,
      "message": "Ah I think naming it `n` was fine. I can clarify. I meant something like this: (of course still optional)\n\n\tvar n int64\n\tif c.countRequested \u003e 0 {\n\t\tn \u003d c.countRequested / int64(c.parallel)\n\t\tif c.countRequested%int64(c.parallel) \u003e 0 {\n\t\t\tn++\n\t\t}\n\t\tmaxPerWorker :\u003d c.countRequested-c.count-c.countWaiting\n\t\tif n \u003e maxPerWorker {\n\t\t\tn \u003d maxPerWorker\n\t\t}\n\t\tc.countWaiting +\u003d n\n\t}\n\treturn fuzzInput{entry: e, countRequested: n}, true",
      "parentUuid": "3ffe7843_c028d6ef",
      "range": {
        "startLine": 418,
        "startChar": 0,
        "endLine": 420,
        "endChar": 3
      },
      "revId": "fe32a4c2d85d929b255bbfe399370a105881082e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "454238a7_01f5e01b",
        "filename": "src/internal/fuzz/fuzz.go",
        "patchSetId": 3
      },
      "lineNbr": 420,
      "author": {
        "id": 17092
      },
      "writtenOn": "2021-04-09T18:16:18Z",
      "side": 1,
      "message": "Ah, I misunderstood. Seemed a little verbose :)\n\n`maxPerWorker` doesn\u0027t seem quite right though, since this isn\u0027t divided by the number of workers. I went with `remaining` instead.",
      "parentUuid": "0133433a_37d3923b",
      "range": {
        "startLine": 418,
        "startChar": 0,
        "endLine": 420,
        "endChar": 3
      },
      "revId": "fe32a4c2d85d929b255bbfe399370a105881082e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b2e463ce_509eb31e",
        "filename": "src/internal/fuzz/fuzz.go",
        "patchSetId": 3
      },
      "lineNbr": 420,
      "author": {
        "id": 28759
      },
      "writtenOn": "2021-04-09T19:18:56Z",
      "side": 1,
      "message": "SG!",
      "parentUuid": "454238a7_01f5e01b",
      "range": {
        "startLine": 418,
        "startChar": 0,
        "endLine": 420,
        "endChar": 3
      },
      "revId": "fe32a4c2d85d929b255bbfe399370a105881082e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "867698e2_ac2af4bd",
        "filename": "src/internal/fuzz/worker.go",
        "patchSetId": 3
      },
      "lineNbr": 175,
      "author": {
        "id": 28759
      },
      "writtenOn": "2021-04-06T18:24:32Z",
      "side": 1,
      "message": "When I was playing around with this before, I found that resp.Err might be empty. So L178 of fuzz/fuzz.go might not work in that case.\n\nie. for something like this:\n\n    func FuzzFoo(f *testing.F) {\n      f.Fuzz(func(t *testing.T, b []byte) {\n        t.Fail()\n      }\n    }\n\nMaybe just double check that the tests pass for that.",
      "range": {
        "startLine": 175,
        "startChar": 24,
        "endLine": 175,
        "endChar": 32
      },
      "revId": "fe32a4c2d85d929b255bbfe399370a105881082e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "75e4f223_20233198",
        "filename": "src/internal/fuzz/worker.go",
        "patchSetId": 3
      },
      "lineNbr": 175,
      "author": {
        "id": 17092
      },
      "writtenOn": "2021-04-07T22:37:49Z",
      "side": 1,
      "message": "Added a check in workerServer.fuzz that puts in a constant string if the error is empty.\n\nThe tests cover this, but not specifically, so I\u0027ll leave this unresolved. Will add something tomorrow.",
      "parentUuid": "867698e2_ac2af4bd",
      "range": {
        "startLine": 175,
        "startChar": 24,
        "endLine": 175,
        "endChar": 32
      },
      "revId": "fe32a4c2d85d929b255bbfe399370a105881082e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aa19d1c6_28140173",
        "filename": "src/internal/fuzz/worker.go",
        "patchSetId": 3
      },
      "lineNbr": 175,
      "author": {
        "id": 17092
      },
      "writtenOn": "2021-04-08T15:15:15Z",
      "side": 1,
      "message": "I couldn\u0027t actually find a path where resp.Err would be empty. Do you know what causes that? T.Fail() still shows some output (\"--- FAIL\" log lines).",
      "parentUuid": "75e4f223_20233198",
      "range": {
        "startLine": 175,
        "startChar": 24,
        "endLine": 175,
        "endChar": 32
      },
      "revId": "fe32a4c2d85d929b255bbfe399370a105881082e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f55fd856_d52f211e",
        "filename": "src/internal/fuzz/worker.go",
        "patchSetId": 3
      },
      "lineNbr": 175,
      "author": {
        "id": 28759
      },
      "writtenOn": "2021-04-09T14:33:36Z",
      "side": 1,
      "message": "This was probably before we had fixed the issue with the log messages being included in the error text. Sounds like that won\u0027t happen now that we\u0027ve fixed it. Probably still good to have the check though, like you did, just in case.",
      "parentUuid": "aa19d1c6_28140173",
      "range": {
        "startLine": 175,
        "startChar": 24,
        "endLine": 175,
        "endChar": 32
      },
      "revId": "fe32a4c2d85d929b255bbfe399370a105881082e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f3471ee5_d524fb1f",
        "filename": "src/internal/fuzz/worker.go",
        "patchSetId": 3
      },
      "lineNbr": 536,
      "author": {
        "id": 28759
      },
      "writtenOn": "2021-04-06T18:24:32Z",
      "side": 1,
      "message": "You can delete this one here, since it\u0027s just a placeholder above anyway (and we already set it above when we\u0027ve timed out). That way we\u0027re also testing more of the coordinator code :shrug:",
      "range": {
        "startLine": 534,
        "startChar": 0,
        "endLine": 536,
        "endChar": 27
      },
      "revId": "fe32a4c2d85d929b255bbfe399370a105881082e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5b3e680c_7110ed97",
        "filename": "src/internal/fuzz/worker.go",
        "patchSetId": 3
      },
      "lineNbr": 536,
      "author": {
        "id": 17092
      },
      "writtenOn": "2021-04-07T22:37:49Z",
      "side": 1,
      "message": "For now, test_fuzz_cache depends on this. It\u0027s hard to make that work without making the test time-dependent again. Once we have a real heuristic, it should be easy though.",
      "parentUuid": "f3471ee5_d524fb1f",
      "range": {
        "startLine": 534,
        "startChar": 0,
        "endLine": 536,
        "endChar": 27
      },
      "revId": "fe32a4c2d85d929b255bbfe399370a105881082e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}