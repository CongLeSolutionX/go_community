{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "8014448f_90369391",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-04-22T10:25:14Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003da69e35e0",
      "tag": "autogenerated:trybots~beginning",
      "revId": "a69e35e07efe576745afe89a7e0af9ab77add249",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bf0e25a4_ba752437",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-04-22T10:40:22Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "8014448f_90369391",
      "tag": "autogenerated:trybots~happy",
      "revId": "a69e35e07efe576745afe89a7e0af9ab77add249",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "25e7e169_97a19430",
        "filename": "src/cmd/compile/internal/inline/inl.go",
        "patchSetId": 2
      },
      "lineNbr": 1187,
      "author": {
        "id": 5440
      },
      "writtenOn": "2021-04-22T10:31:28Z",
      "side": 1,
      "message": "m.Defn is supposed to point to the existing statement that created the variable, but it seems like here it\u0027s going to point to a new, separate statement instead?",
      "revId": "a69e35e07efe576745afe89a7e0af9ab77add249",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3cba1401_a1eee493",
        "filename": "src/cmd/compile/internal/inline/inl.go",
        "patchSetId": 2
      },
      "lineNbr": 1187,
      "author": {
        "id": 14665
      },
      "writtenOn": "2021-04-22T11:32:28Z",
      "side": 1,
      "message": "Yes, it\u0027s the same manner that we are doing for any inlvar which is the Defn of an ONAME closure var. We have to re-written the statement, otherwise, for each level of closures, we will refer to wrong Defn.",
      "parentUuid": "25e7e169_97a19430",
      "revId": "a69e35e07efe576745afe89a7e0af9ab77add249",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fc260fd5_fe420c98",
        "filename": "src/cmd/compile/internal/inline/inl.go",
        "patchSetId": 2
      },
      "lineNbr": 1187,
      "author": {
        "id": 5440
      },
      "writtenOn": "2021-04-22T11:55:56Z",
      "side": 1,
      "message": "Sorry, what I mean is:\n\nSuppose in the original AST, we have ONAME n1, OAS2 a1, and n1.Defn \u003d\u003d a1.\n\nDuring inline cloning, we\u0027re going to create copies of n1 and a1. Call them n2 and a2, respectively.\n\nAt the end of inlining, we want to have n2.Defn \u003d\u003d a2.\n\nBut I think here we\u0027re actually creating *another* copy of a1 (call it a3), and will end up with n2.Defn \u003d\u003d a3 instead.\n\nAre you able to print the post-inlining ASTs for the test case with -d\u003ddumpptrs, and then pastebin them somewhere so I can take a look?",
      "parentUuid": "3cba1401_a1eee493",
      "revId": "a69e35e07efe576745afe89a7e0af9ab77add249",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0ea19164_4b2bbc29",
        "filename": "src/cmd/compile/internal/inline/inl.go",
        "patchSetId": 2
      },
      "lineNbr": 1187,
      "author": {
        "id": 14665
      },
      "writtenOn": "2021-04-22T12:08:30Z",
      "side": 1,
      "message": "Here\u0027s it: https://gist.github.com/cuonglm/8bf99c825c0bbf36037f9b345d667714\n\nI think on tip, n1.Defn and n2.Defn both point to a1, with this fix, n1.Defn \u003d\u003d a1 and n2.Defn \u003d\u003d a2.",
      "parentUuid": "fc260fd5_fe420c98",
      "revId": "a69e35e07efe576745afe89a7e0af9ab77add249",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bf711f35_175b2e0e",
        "filename": "src/cmd/compile/internal/inline/inl.go",
        "patchSetId": 2
      },
      "lineNbr": 1187,
      "author": {
        "id": 5440
      },
      "writtenOn": "2021-04-22T12:26:51Z",
      "side": 1,
      "message": "Thanks. Look at lines L147-L149:\n\n```\n.   AS2 p(0x1400040c1e0) tc(1) Def # t.go:7\n.   AS2-Lhs\n.   .   NAME-p.g p(0x140003fd790) defn(0x1400040c180) curfn(0x14000172b00) esc(no) tc(1) Class:PAUTO Offset:0 OnStack Used FUNC-func() # t.go:7\n```\n\ng.defn should be 0x1400040c1e0 (referring to the AS2 with \"p(0x1400040c1e0)\"), but instead it\u0027s 0x1400040c180, and there\u0027s not even a node in the AST with \"p(0x1400040c180)\".\n\nA similar (the same?) issue can be seen at lines L31-L33.",
      "parentUuid": "0ea19164_4b2bbc29",
      "revId": "a69e35e07efe576745afe89a7e0af9ab77add249",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f3df23b2_fba57086",
        "filename": "src/cmd/compile/internal/inline/inl.go",
        "patchSetId": 2
      },
      "lineNbr": 1187,
      "author": {
        "id": 14665
      },
      "writtenOn": "2021-04-22T12:50:41Z",
      "side": 1,
      "message": "I think it’s expected, since when new node Defn is a copy, not the same as old one. The copy never goes into the final AST, because it’s there so StaticValue can find the right inlined var node.\n\nWe cant use just one Defn, because at each level of closures, we use the same original ONAME, e.g:\n\n- We have 3 level of closures l1, l2, l3\n- At l1, we have variable g\n- At l2, subst.inlvars[g] returns g2, g2.Defn is g.Defn\n- At l3, subst.inlvars[g] returns g3, g3.Defn is g.Defn\n\nIf we do the substitution at each level, by looping through Defn.Lhs:\n\n- At l1, if lhs \u003d\u003d g, then Defn.Lhs[0] \u003d g2\n- At l2, if lhs \u003d\u003d g, now this condition is never happens, because lhs is now g2, not g (because above substitution, and we use the same Defn for 3 nodes: g, g2, g3)\n\nThat causes g3 never appears in the Defn, and StatucValue cant find it.",
      "parentUuid": "bf711f35_175b2e0e",
      "revId": "a69e35e07efe576745afe89a7e0af9ab77add249",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4486aa18_2649c23a",
        "filename": "src/cmd/compile/internal/inline/inl.go",
        "patchSetId": 2
      },
      "lineNbr": 1187,
      "author": {
        "id": 5440
      },
      "writtenOn": "2021-04-22T13:24:50Z",
      "side": 1,
      "message": "I\u0027ll have to look at this some more in the morning with fresh eyes.\n\nTo be clear though, I\u0027m not saying that NAME\u0027s Defn should point to the same AS2. I\u0027m saying that each NAME\u0027s Defn needs to point to the corresponding AS2 in that same function.\n\nFor example, the \"p.~R0\" variable declared at L6 has its Defn pointing to the AS2 on L7. That\u0027s good.\n\nHowever, the \"p.f\" variable declared at L139 (in \"x.func3\") has its Defn pointing to the AS from L65 (in \"x.func1.1\"). That\u0027s bad: Defn shouldn\u0027t point between functions. It should point to the AS at L140.\n\nFurther, the \"p.g\" variable declared at L146 has its Defn pointing to a node that doesn\u0027t appear anywhere. That\u0027s also bad. It should point to the AS at L147.\n\nI believe before this CL that L146\u0027s \"p.g\" was probably wrong the same way that L139\u0027s \"p.f\" was (i.e., its Defn was probably pointing into \"x.func3\"). So while this fixes CL the test case, it\u0027s still not fully correct.",
      "parentUuid": "f3df23b2_fba57086",
      "revId": "a69e35e07efe576745afe89a7e0af9ab77add249",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ffb6a067_da84dcd8",
        "filename": "src/cmd/compile/internal/inline/inl.go",
        "patchSetId": 2
      },
      "lineNbr": 1187,
      "author": {
        "id": 14665
      },
      "writtenOn": "2021-04-22T15:47:50Z",
      "side": 1,
      "message": "Ah, I got your point. New patch is coming.",
      "parentUuid": "4486aa18_2649c23a",
      "revId": "a69e35e07efe576745afe89a7e0af9ab77add249",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c05d79b1_81558e56",
        "filename": "src/cmd/compile/internal/inline/inl.go",
        "patchSetId": 2
      },
      "lineNbr": 1187,
      "author": {
        "id": 14665
      },
      "writtenOn": "2021-04-22T16:02:30Z",
      "side": 1,
      "message": "AST with patch 4, looks correctly for p.g, but still not for p.f: https://gist.github.com/cuonglm/fbcf25ad3c83d73178930d781ef723f8\n\nI think we should fix that in other CL?",
      "parentUuid": "ffb6a067_da84dcd8",
      "revId": "a69e35e07efe576745afe89a7e0af9ab77add249",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}