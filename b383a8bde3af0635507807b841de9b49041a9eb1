{
  "comments": [
    {
      "key": {
        "uuid": "b07ea891_82df4052",
        "filename": "src/cmd/compile/internal/syntax/scanner.go",
        "patchSetId": 3
      },
      "lineNbr": 11,
      "author": {
        "id": 5440
      },
      "writtenOn": "2020-03-05T00:34:00Z",
      "side": 1,
      "message": "nit: their",
      "range": {
        "startLine": 11,
        "startChar": 31,
        "endLine": 11,
        "endChar": 34
      },
      "revId": "b383a8bde3af0635507807b841de9b49041a9eb1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "144dee05_0df5dd17",
        "filename": "src/cmd/compile/internal/syntax/scanner.go",
        "patchSetId": 3
      },
      "lineNbr": 11,
      "author": {
        "id": 5210
      },
      "writtenOn": "2020-03-05T05:49:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b07ea891_82df4052",
      "range": {
        "startLine": 11,
        "startChar": 31,
        "endLine": 11,
        "endChar": 34
      },
      "revId": "b383a8bde3af0635507807b841de9b49041a9eb1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "618d37f9_85d3a75a",
        "filename": "src/cmd/compile/internal/syntax/scanner.go",
        "patchSetId": 3
      },
      "lineNbr": 390,
      "author": {
        "id": 5440
      },
      "writtenOn": "2020-03-05T00:34:00Z",
      "side": 1,
      "message": "Could remove this parameter since it\u0027s currently always \"s.ch\", and the errors below would be misreported if it wasn\u0027t.",
      "range": {
        "startLine": 390,
        "startChar": 30,
        "endLine": 390,
        "endChar": 37
      },
      "revId": "b383a8bde3af0635507807b841de9b49041a9eb1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b5de4a24_0cae8267",
        "filename": "src/cmd/compile/internal/syntax/scanner.go",
        "patchSetId": 3
      },
      "lineNbr": 390,
      "author": {
        "id": 5210
      },
      "writtenOn": "2020-03-05T05:49:28Z",
      "side": 1,
      "message": "Done and renamed isIdentRune to atIdentChar.",
      "parentUuid": "618d37f9_85d3a75a",
      "range": {
        "startLine": 390,
        "startChar": 30,
        "endLine": 390,
        "endChar": 37
      },
      "revId": "b383a8bde3af0635507807b841de9b49041a9eb1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b8206b31_427d44df",
        "filename": "src/cmd/compile/internal/syntax/scanner.go",
        "patchSetId": 3
      },
      "lineNbr": 426,
      "author": {
        "id": 5137
      },
      "writtenOn": "2020-03-05T04:00:33Z",
      "side": 1,
      "message": "Since these functions will be used a whole lot, I think we\nhave a license to micro-optimize ðŸ˜Š\n\nSo:\nI think an inclined comparison would be even simpler and perhaps faster\nthan lower(ch) which has a bit set, and despite getting inined, most def still\nincurs a register store for the value. Perhaps:\nfunc isLetter(ch rune) bool {\n   return â€˜aâ€™ \u003c\u003d ch \u0026\u0026 ch \u003c\u003d â€˜zâ€™ || â€˜Aâ€™ \u003c\u003d ch \u0026\u0026 ch \u003c\u003d â€˜Zâ€™ || ch \u003d\u003d â€˜_â€™\n}",
      "revId": "b383a8bde3af0635507807b841de9b49041a9eb1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "db404b26_5e0eba68",
        "filename": "src/cmd/compile/internal/syntax/scanner.go",
        "patchSetId": 3
      },
      "lineNbr": 426,
      "author": {
        "id": 5440
      },
      "writtenOn": "2020-03-05T04:26:28Z",
      "side": 1,
      "message": "The compiler *should* be able to optimize\n\n    \u0027a\u0027 \u003c\u003d lower(ch) \u0026\u0026 lower(ch) \u003c\u003d \u0027z\u0027\n\ninto just\n\n    uint32(((\u0027a\u0027 - \u0027A\u0027) | ch) - \u0027a\u0027) \u003c\u003d uint32(\u0027z\u0027 - \u0027a\u0027)\n\nwhich is two arithmetic operations and a single comparison.\n\nI\u0027m not sure if it\u0027s doing that currently though. I played with a simple example earlier, and it seems like the range comparison optimization is currently broken. :/",
      "parentUuid": "b8206b31_427d44df",
      "revId": "b383a8bde3af0635507807b841de9b49041a9eb1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b01ac26b_7a686451",
        "filename": "src/cmd/compile/internal/syntax/scanner.go",
        "patchSetId": 3
      },
      "lineNbr": 426,
      "author": {
        "id": 5137
      },
      "writtenOn": "2020-03-05T04:56:00Z",
      "side": 1,
      "message": "You are right, thanks Matthew! Robert, please disregard my suggestion :)",
      "parentUuid": "db404b26_5e0eba68",
      "revId": "b383a8bde3af0635507807b841de9b49041a9eb1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dfdb9b96_b4a44f23",
        "filename": "src/cmd/compile/internal/syntax/scanner.go",
        "patchSetId": 3
      },
      "lineNbr": 426,
      "author": {
        "id": 5210
      },
      "writtenOn": "2020-03-05T05:49:28Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "b01ac26b_7a686451",
      "revId": "b383a8bde3af0635507807b841de9b49041a9eb1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "97aac45c_459ce9fc",
        "filename": "src/cmd/compile/internal/syntax/scanner.go",
        "patchSetId": 3
      },
      "lineNbr": 428,
      "author": {
        "id": 5137
      },
      "writtenOn": "2020-03-05T04:00:33Z",
      "side": 1,
      "message": "Ditto for isHex",
      "revId": "b383a8bde3af0635507807b841de9b49041a9eb1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8f175196_224bb24e",
        "filename": "src/cmd/compile/internal/syntax/scanner.go",
        "patchSetId": 3
      },
      "lineNbr": 428,
      "author": {
        "id": 5210
      },
      "writtenOn": "2020-03-05T05:49:28Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "97aac45c_459ce9fc",
      "revId": "b383a8bde3af0635507807b841de9b49041a9eb1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "40228084_e91f99ec",
        "filename": "src/cmd/compile/internal/syntax/scanner.go",
        "patchSetId": 3
      },
      "lineNbr": 497,
      "author": {
        "id": 5440
      },
      "writtenOn": "2020-03-05T00:34:00Z",
      "side": 1,
      "message": "How does this work when scanning something like \"0.9\"?\n\nReading through the code, I\u0027d expect base would be set to 8 from line 487, and then the 9 would get rejected when scanning the fractional part at line 504. Am I misunderstanding something?",
      "revId": "b383a8bde3af0635507807b841de9b49041a9eb1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7c82539c_a521d800",
        "filename": "src/cmd/compile/internal/syntax/scanner.go",
        "patchSetId": 3
      },
      "lineNbr": 497,
      "author": {
        "id": 5210
      },
      "writtenOn": "2020-03-05T05:49:28Z",
      "side": 1,
      "message": "Interesting. It happens to work because s.digits continues to read digits (but records the index of \u00279\u0027 in *invalid). Since we switch to FloatLit on 503, there is no invalid character reported and it works.\n\nThis seems a bit confusing, I admit. The old code seems to have the same problem. If it wouldn\u0027t work, we would have seen this by now (it\u0027s been in use for 1 year).\n\nKeeping this unresolved for now. There ought to be a cleaner way to do this.",
      "parentUuid": "40228084_e91f99ec",
      "revId": "b383a8bde3af0635507807b841de9b49041a9eb1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "02fd7305_54378ef9",
        "filename": "src/cmd/compile/internal/syntax/scanner.go",
        "patchSetId": 3
      },
      "lineNbr": 805,
      "author": {
        "id": 5440
      },
      "writtenOn": "2020-03-05T00:34:00Z",
      "side": 1,
      "message": "It probably doesn\u0027t matter much, but if quote was at the beginning of the list, the compiler would be able to handle the string of constants as one big binary search. As-is, it has to do two separate binary searches, separated by the comparison with quote.",
      "range": {
        "startLine": 805,
        "startChar": 47,
        "endLine": 805,
        "endChar": 52
      },
      "revId": "b383a8bde3af0635507807b841de9b49041a9eb1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1a811090_d096bd2e",
        "filename": "src/cmd/compile/internal/syntax/scanner.go",
        "patchSetId": 3
      },
      "lineNbr": 805,
      "author": {
        "id": 5210
      },
      "writtenOn": "2020-03-05T05:49:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "02fd7305_54378ef9",
      "range": {
        "startLine": 805,
        "startChar": 47,
        "endLine": 805,
        "endChar": 52
      },
      "revId": "b383a8bde3af0635507807b841de9b49041a9eb1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a4b9947d_942c2c7b",
        "filename": "src/cmd/compile/internal/syntax/source.go",
        "patchSetId": 3
      },
      "lineNbr": 6,
      "author": {
        "id": 5440
      },
      "writtenOn": "2020-03-05T00:34:00Z",
      "side": 1,
      "message": "nit: can probably remove \"which is\".",
      "range": {
        "startLine": 6,
        "startChar": 3,
        "endLine": 6,
        "endChar": 11
      },
      "revId": "b383a8bde3af0635507807b841de9b49041a9eb1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f4f5ad9b_a4399f04",
        "filename": "src/cmd/compile/internal/syntax/source.go",
        "patchSetId": 3
      },
      "lineNbr": 6,
      "author": {
        "id": 5210
      },
      "writtenOn": "2020-03-05T05:49:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a4b9947d_942c2c7b",
      "range": {
        "startLine": 6,
        "startChar": 3,
        "endLine": 6,
        "endChar": 11
      },
      "revId": "b383a8bde3af0635507807b841de9b49041a9eb1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bc359cf6_95cf0bdc",
        "filename": "src/cmd/compile/internal/syntax/source.go",
        "patchSetId": 3
      },
      "lineNbr": 9,
      "author": {
        "id": 5440
      },
      "writtenOn": "2020-03-05T00:34:00Z",
      "side": 1,
      "message": "nit: \"are\"",
      "range": {
        "startLine": 9,
        "startChar": 32,
        "endLine": 9,
        "endChar": 34
      },
      "revId": "b383a8bde3af0635507807b841de9b49041a9eb1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8c2ae8b3_e06e626f",
        "filename": "src/cmd/compile/internal/syntax/source.go",
        "patchSetId": 3
      },
      "lineNbr": 9,
      "author": {
        "id": 5210
      },
      "writtenOn": "2020-03-05T05:49:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bc359cf6_95cf0bdc",
      "range": {
        "startLine": 9,
        "startChar": 32,
        "endLine": 9,
        "endChar": 34
      },
      "revId": "b383a8bde3af0635507807b841de9b49041a9eb1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4f245d66_bba08761",
        "filename": "src/cmd/compile/internal/syntax/source.go",
        "patchSetId": 3
      },
      "lineNbr": 20,
      "author": {
        "id": 5440
      },
      "writtenOn": "2020-03-05T00:34:00Z",
      "side": 1,
      "message": "This section separately explains b, r, and e, but the current structure makes it a little hard to quickly skim. (In particular, my eyes get a little dizzy with lines 24--28 all starting with \"the\".)\n\nMaybe organizing a list of invariants would make it easier to read?\n\n  The source buffer is accessed using three indices: b (begin), r (read), and e (end).\n  * If b \u003e\u003d 0, it points to ....\n  * r points to ...\n  * e points to ...",
      "range": {
        "startLine": 20,
        "startChar": 0,
        "endLine": 20,
        "endChar": 63
      },
      "revId": "b383a8bde3af0635507807b841de9b49041a9eb1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1d8b7bd1_242070a5",
        "filename": "src/cmd/compile/internal/syntax/source.go",
        "patchSetId": 3
      },
      "lineNbr": 20,
      "author": {
        "id": 5210
      },
      "writtenOn": "2020-03-05T05:49:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4f245d66_bba08761",
      "range": {
        "startLine": 20,
        "startChar": 0,
        "endLine": 20,
        "endChar": 63
      },
      "revId": "b383a8bde3af0635507807b841de9b49041a9eb1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a94fbdb1_3551e5ad",
        "filename": "src/cmd/compile/internal/syntax/source.go",
        "patchSetId": 3
      },
      "lineNbr": 90,
      "author": {
        "id": 5440
      },
      "writtenOn": "2020-03-05T00:34:00Z",
      "side": 1,
      "message": "nit: maybe \"clear\", \"end\", or \"stop\"?\n\nGoogle style guide advises to avoid \"kill\": https://developers.google.com/style/word-list#kill",
      "range": {
        "startLine": 90,
        "startChar": 17,
        "endLine": 90,
        "endChar": 21
      },
      "revId": "b383a8bde3af0635507807b841de9b49041a9eb1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e168e720_ac730d58",
        "filename": "src/cmd/compile/internal/syntax/source.go",
        "patchSetId": 3
      },
      "lineNbr": 90,
      "author": {
        "id": 5210
      },
      "writtenOn": "2020-03-05T05:49:28Z",
      "side": 1,
      "message": "Using \"stop\" here, and \"rewind\" below.",
      "parentUuid": "a94fbdb1_3551e5ad",
      "range": {
        "startLine": 90,
        "startChar": 17,
        "endLine": 90,
        "endChar": 21
      },
      "revId": "b383a8bde3af0635507807b841de9b49041a9eb1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a6c856e_b6206016",
        "filename": "src/cmd/compile/internal/syntax/source.go",
        "patchSetId": 3
      },
      "lineNbr": 94,
      "author": {
        "id": 5440
      },
      "writtenOn": "2020-03-05T00:34:00Z",
      "side": 1,
      "message": "I assume this means we reset to the same state as when we had called s.start()? That is, s.ch is the first character of the segment (as opposed to the character immediately before the segment)?\n\nIf so, why does scanner call s.nextch() a second time after calling s.reset()? Doesn\u0027t that mean \"x..f\" gets incorrectly scanned as \"x.f\" when it should report a syntax error?",
      "range": {
        "startLine": 94,
        "startChar": 10,
        "endLine": 94,
        "endChar": 47
      },
      "revId": "b383a8bde3af0635507807b841de9b49041a9eb1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a876978b_f2469784",
        "filename": "src/cmd/compile/internal/syntax/source.go",
        "patchSetId": 3
      },
      "lineNbr": 94,
      "author": {
        "id": 5210
      },
      "writtenOn": "2020-03-05T05:49:28Z",
      "side": 1,
      "message": "This is correct as is.\n\nYou are correct that reset (now: rewind) will rewind the scanner read position and s.ch to the state we had when start was called. So s.ch has already been read (one char look-ahead) and it\u0027s the first character in the active segment.\n\nIn the scanner, after rewind we want to be in the same position that we were in when we hit \"case \u0027.\u0027. The first thing we do in that case is consume that \u0027.\u0027 (and read the character following it into s.ch). So after rewind, we need to consume that \u0027.\u0027 again, i.e., read the character following it into s.ch (which in the case of \"..\" would be the 2nd \u0027.\u0027). The scanner reports a _Dot (first one), and in the subsequent next() call it sees \u0027.\u0027 in s.ch (the 2nd \u0027.\u0027) and reports another _Dot. Added a comment in the scanner and expanded TestSmoke to check.\n\nNote that \"..\" is not a syntax error, it\u0027s just _Dot, _Dot. We could make it an invalid token error, and then we wouldn\u0027t need rewind at all - and admittedly that would be simpler and probably wouldn\u0027t make a difference in practice (but for a different reported error). But it\u0027s a bit against the rules which say that the next token is the longest character sequence that makes up a valid token. (We do break that rule for literals because we believe we get less confusing error messages in those cases if there\u0027s an error. Maybe that would be true here as well. Could try, in a separate CL.)\n\nAs an aside, rewind must only be called if we have an active segment. Added a comment to that effect and test for it (rewind is basically never called).",
      "parentUuid": "3a6c856e_b6206016",
      "range": {
        "startLine": 94,
        "startChar": 10,
        "endLine": 94,
        "endChar": 47
      },
      "revId": "b383a8bde3af0635507807b841de9b49041a9eb1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2b3ccfb0_29df020d",
        "filename": "src/cmd/compile/internal/syntax/source.go",
        "patchSetId": 3
      },
      "lineNbr": 94,
      "author": {
        "id": 5440
      },
      "writtenOn": "2020-03-05T08:03:07Z",
      "side": 1,
      "message": "Thanks, that explanation makes sense.\n\nAt the time I left that comment, I think I was focused on source.go, so I didn\u0027t yet understand the pattern of calling nextch() in scanner.go.\n\nUnderstood about \"..\" scanning as _Dot, _Dot (I remember you explaining that before :)). When I said \"x..f\" should cause a syntax error, I was thinking parser error, not scanner error. Sorry for the confusion!",
      "parentUuid": "a876978b_f2469784",
      "range": {
        "startLine": 94,
        "startChar": 10,
        "endLine": 94,
        "endChar": 47
      },
      "revId": "b383a8bde3af0635507807b841de9b49041a9eb1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d3a8ffe1_2134a86d",
        "filename": "src/cmd/compile/internal/syntax/source.go",
        "patchSetId": 3
      },
      "lineNbr": 98,
      "author": {
        "id": 5440
      },
      "writtenOn": "2020-03-05T00:34:00Z",
      "side": 1,
      "message": "nit: maybe \"rewind\"?",
      "range": {
        "startLine": 98,
        "startChar": 17,
        "endLine": 98,
        "endChar": 22
      },
      "revId": "b383a8bde3af0635507807b841de9b49041a9eb1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "83c2e592_11392fdd",
        "filename": "src/cmd/compile/internal/syntax/source.go",
        "patchSetId": 3
      },
      "lineNbr": 98,
      "author": {
        "id": 5210
      },
      "writtenOn": "2020-03-05T05:49:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d3a8ffe1_2134a86d",
      "range": {
        "startLine": 98,
        "startChar": 17,
        "endLine": 98,
        "endChar": 22
      },
      "revId": "b383a8bde3af0635507807b841de9b49041a9eb1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "76ac8d89_bbf4d24b",
        "filename": "src/cmd/compile/internal/syntax/source.go",
        "patchSetId": 3
      },
      "lineNbr": 124,
      "author": {
        "id": 5440
      },
      "writtenOn": "2020-03-05T00:34:00Z",
      "side": 1,
      "message": "I think \"s.e - s.r \u003c utf8.UTFMax\" would be a little easier to understand, but don\u0027t feel strongly if you prefer as-is.",
      "range": {
        "startLine": 124,
        "startChar": 5,
        "endLine": 124,
        "endChar": 26
      },
      "revId": "b383a8bde3af0635507807b841de9b49041a9eb1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "095490e9_5b290678",
        "filename": "src/cmd/compile/internal/syntax/source.go",
        "patchSetId": 3
      },
      "lineNbr": 124,
      "author": {
        "id": 5210
      },
      "writtenOn": "2020-03-05T05:49:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "76ac8d89_bbf4d24b",
      "range": {
        "startLine": 124,
        "startChar": 5,
        "endLine": 124,
        "endChar": 26
      },
      "revId": "b383a8bde3af0635507807b841de9b49041a9eb1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d7678884_326b4186",
        "filename": "src/cmd/compile/internal/syntax/source.go",
        "patchSetId": 3
      },
      "lineNbr": 187,
      "author": {
        "id": 5440
      },
      "writtenOn": "2020-03-05T00:34:00Z",
      "side": 1,
      "message": "Could move these down into the if statement. Not important though; doesn\u0027t affect correctness.",
      "range": {
        "startLine": 186,
        "startChar": 0,
        "endLine": 187,
        "endChar": 23
      },
      "revId": "b383a8bde3af0635507807b841de9b49041a9eb1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cbb264c7_d8966038",
        "filename": "src/cmd/compile/internal/syntax/source.go",
        "patchSetId": 3
      },
      "lineNbr": 187,
      "author": {
        "id": 5210
      },
      "writtenOn": "2020-03-05T05:49:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d7678884_326b4186",
      "range": {
        "startLine": 186,
        "startChar": 0,
        "endLine": 187,
        "endChar": 23
      },
      "revId": "b383a8bde3af0635507807b841de9b49041a9eb1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}