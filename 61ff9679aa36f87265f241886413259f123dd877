{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "94e2dbb1_1da69852",
        "filename": "src/runtime/slice.go",
        "patchSetId": 3
      },
      "lineNbr": 373,
      "author": {
        "id": 13315
      },
      "writtenOn": "2023-12-21T17:27:55Z",
      "side": 1,
      "message": "Could we make bytealg_MakeNoZero just return a slice with cap rounded up to size class boundary? The caller can down-slice it if it needs to. Is there any problem with that?",
      "revId": "61ff9679aa36f87265f241886413259f123dd877",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4138ed5f_19af46a5",
        "filename": "src/runtime/slice.go",
        "patchSetId": 3
      },
      "lineNbr": 373,
      "author": {
        "id": 5200
      },
      "writtenOn": "2023-12-21T17:46:44Z",
      "side": 1,
      "message": "All the existing uses require n\u003d\u003dcap (or at least, they would require zeroing between n and cap), so we\u0027d have to 3-arg slice everything down or zero the tail. This new use is the oddball.\nThat said, having less API surface is nice. I could go either way.",
      "parentUuid": "94e2dbb1_1da69852",
      "revId": "61ff9679aa36f87265f241886413259f123dd877",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "73c71766_728694b5",
        "filename": "src/runtime/slice.go",
        "patchSetId": 3
      },
      "lineNbr": 373,
      "author": {
        "id": 55874
      },
      "writtenOn": "2023-12-21T18:43:59Z",
      "side": 1,
      "message": "I wonder whether we are fine with returning `len(s) !\u003d cap(s)` from all other functions that currently uses `MakeNoZero`",
      "parentUuid": "4138ed5f_19af46a5",
      "revId": "61ff9679aa36f87265f241886413259f123dd877",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "55d52467_6f5d496e",
        "filename": "src/runtime/slice.go",
        "patchSetId": 3
      },
      "lineNbr": 373,
      "author": {
        "id": 5200
      },
      "writtenOn": "2023-12-21T18:54:34Z",
      "side": 1,
      "message": "I think that would be ok, but we would need to zero that unwritten portion.",
      "parentUuid": "73c71766_728694b5",
      "revId": "61ff9679aa36f87265f241886413259f123dd877",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6afd1abf_4508f4f5",
        "filename": "src/runtime/slice.go",
        "patchSetId": 3
      },
      "lineNbr": 373,
      "author": {
        "id": 55874
      },
      "writtenOn": "2023-12-21T19:07:47Z",
      "side": 1,
      "message": "Sometimes we assume (because of `len(s) \u003d\u003d cap(s)`), that append would allocate a new backing array.\n```\nbuf :\u003d bytes.Join([][]byte{{1, 2, 3}, {1, 2, 3}}, []byte{\u0027,\u0027}) // len(buf) \u003d\u003d cap(buf)\n_ \u003d append(buf, 1) // always allocates a new slice\n```\n\nReturning `len(s) !\u003d cap(s)` will obviously break that.",
      "parentUuid": "55d52467_6f5d496e",
      "revId": "61ff9679aa36f87265f241886413259f123dd877",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8f53f355_6df0e24d",
        "filename": "src/runtime/slice.go",
        "patchSetId": 3
      },
      "lineNbr": 373,
      "author": {
        "id": 5200
      },
      "writtenOn": "2023-12-21T19:58:50Z",
      "side": 1,
      "message": "It is certainly possible that someone is relying on the result having len(s) \u003d\u003d cap(s). It just seems pretty unlikely to me, and we certainly don\u0027t guarantee that in the docs of the affected functions.\n\nAt the same time, though, it is probably not worth changing this behavior. These aren\u0027t performance-critical functions (anyone doing ToLower a lot probably wants to do it in place, not via a new allocation). And it\u0027s easier to do [:len(s):len(s)] than it is to do the extra zeroing.",
      "parentUuid": "6afd1abf_4508f4f5",
      "revId": "61ff9679aa36f87265f241886413259f123dd877",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6050ba0f_c9d1bd23",
        "filename": "src/runtime/slice.go",
        "patchSetId": 3
      },
      "lineNbr": 373,
      "author": {
        "id": 55874
      },
      "writtenOn": "2023-12-22T14:17:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8f53f355_6df0e24d",
      "revId": "61ff9679aa36f87265f241886413259f123dd877",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ce438c73_788db5f4",
        "filename": "src/strings/builder.go",
        "patchSetId": 3
      },
      "lineNbr": 18,
      "author": {
        "id": 5200
      },
      "writtenOn": "2023-12-26T20:51:17Z",
      "side": 1,
      "message": "This needs a strong comment that data between len and cap might be uninitialized and it is unsafe to provide any way for the user to see that data. This package is already unsafe in that way before this CL, but might as well add that warning now.\n\n(Just in case anyone in the future thinks of adding a Bytes method or something like that.)",
      "revId": "61ff9679aa36f87265f241886413259f123dd877",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "57f56040_ff432eff",
        "filename": "src/strings/builder.go",
        "patchSetId": 3
      },
      "lineNbr": 18,
      "author": {
        "id": 55874
      },
      "writtenOn": "2023-12-27T15:10:04Z",
      "side": 1,
      "message": "Done\n\nThe uninitialized bytes is not even the main reason not to export the []byte to external user. Added that also to the docs. See example in go.dev/issue/62209",
      "parentUuid": "ce438c73_788db5f4",
      "revId": "61ff9679aa36f87265f241886413259f123dd877",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}