{
  "comments": [
    {
      "key": {
        "uuid": "e822fc5e_8d54cf09",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 25
      },
      "lineNbr": 0,
      "author": {
        "id": 7061
      },
      "writtenOn": "2020-09-25T13:31:17Z",
      "side": 1,
      "message": "Do you have time for another look?",
      "revId": "850f65346eddd36062b504327e515ab18e13991f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "15b37e8a_3033bbde",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 25
      },
      "lineNbr": 0,
      "author": {
        "id": 7061
      },
      "writtenOn": "2020-09-25T20:33:53Z",
      "side": 1,
      "message": "next patch set coming after I finish the rebase...",
      "revId": "850f65346eddd36062b504327e515ab18e13991f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "964e7695_6ab14292",
        "filename": "src/cmd/compile/internal/ssa/expand_calls.go",
        "patchSetId": 25
      },
      "lineNbr": 30,
      "author": {
        "id": 13315
      },
      "writtenOn": "2020-09-25T15:43:52Z",
      "side": 1,
      "message": "Perhaps make it f.pass.debug .",
      "revId": "850f65346eddd36062b504327e515ab18e13991f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f2cffd39_6c61bcd9",
        "filename": "src/cmd/compile/internal/ssa/expand_calls.go",
        "patchSetId": 25
      },
      "lineNbr": 30,
      "author": {
        "id": 7061
      },
      "writtenOn": "2020-09-25T20:33:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "964e7695_6ab14292",
      "revId": "850f65346eddd36062b504327e515ab18e13991f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c5c28e46_889a0c4c",
        "filename": "src/cmd/compile/internal/ssa/expand_calls.go",
        "patchSetId": 25
      },
      "lineNbr": 72,
      "author": {
        "id": 13315
      },
      "writtenOn": "2020-09-25T15:43:52Z",
      "side": 1,
      "message": "Maybe add more comment about the parameters, especially the difference between v and sel, and what t is (type of v? type of sel? something else?).",
      "revId": "850f65346eddd36062b504327e515ab18e13991f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1c4e9852_31fd9186",
        "filename": "src/cmd/compile/internal/ssa/expand_calls.go",
        "patchSetId": 25
      },
      "lineNbr": 72,
      "author": {
        "id": 7061
      },
      "writtenOn": "2020-09-25T20:33:53Z",
      "side": 1,
      "message": "Should be better now.  The type parameter was pointless, as it happens.",
      "parentUuid": "c5c28e46_889a0c4c",
      "revId": "850f65346eddd36062b504327e515ab18e13991f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "47db8ad3_9e17e546",
        "filename": "src/cmd/compile/internal/ssa/expand_calls.go",
        "patchSetId": 25
      },
      "lineNbr": 73,
      "author": {
        "id": 13315
      },
      "writtenOn": "2020-09-25T15:43:52Z",
      "side": 1,
      "message": "It seems clearer for those helper functions (including storeArg, etc. below) be top level functions (less nested code, etc.). It seems they only close in configuration-like things like tHi, tLo, and SP. Maybe pass them as a separate \"config\" parameter?",
      "revId": "850f65346eddd36062b504327e515ab18e13991f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f5406e1e_9c5742da",
        "filename": "src/cmd/compile/internal/ssa/expand_calls.go",
        "patchSetId": 25
      },
      "lineNbr": 73,
      "author": {
        "id": 7061
      },
      "writtenOn": "2020-09-25T20:33:53Z",
      "side": 1,
      "message": "This might be better put off till a later CL, unless I want to flatten several CLs together because there\u0027s more changes coming to these functions (I\u0027ve been wondering if I should do that flattening).",
      "parentUuid": "47db8ad3_9e17e546",
      "revId": "850f65346eddd36062b504327e515ab18e13991f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cb8abdea_0dc1e79b",
        "filename": "src/cmd/compile/internal/ssa/expand_calls.go",
        "patchSetId": 25
      },
      "lineNbr": 190,
      "author": {
        "id": 13315
      },
      "writtenOn": "2020-09-25T15:43:52Z",
      "side": 1,
      "message": "return here? Doesn\u0027t seem you want to fall through to the default case below.",
      "revId": "850f65346eddd36062b504327e515ab18e13991f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bd692efb_b007f5ab",
        "filename": "src/cmd/compile/internal/ssa/expand_calls.go",
        "patchSetId": 25
      },
      "lineNbr": 190,
      "author": {
        "id": 7061
      },
      "writtenOn": "2020-09-25T20:33:53Z",
      "side": 1,
      "message": "That seems very likely, how did this ever work?",
      "parentUuid": "cb8abdea_0dc1e79b",
      "revId": "850f65346eddd36062b504327e515ab18e13991f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ed272845_38f63380",
        "filename": "src/cmd/compile/internal/ssa/expand_calls.go",
        "patchSetId": 25
      },
      "lineNbr": 193,
      "author": {
        "id": 13315
      },
      "writtenOn": "2020-09-25T15:43:52Z",
      "side": 1,
      "message": "I think we probably need to recursively decompose things like [1][1][1]int. Same for struct.",
      "revId": "850f65346eddd36062b504327e515ab18e13991f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4995f13e_e95a3126",
        "filename": "src/cmd/compile/internal/ssa/expand_calls.go",
        "patchSetId": 25
      },
      "lineNbr": 193,
      "author": {
        "id": 7061
      },
      "writtenOn": "2020-09-25T20:33:53Z",
      "side": 1,
      "message": "Done for the array case, cannot be done for the struct case.  The code to deal with immediate struct data in interface types is peculiar.  I added a comment explaining why, and made it target exactly the problematic case.  We have a rewrite rule for this also:\n\n  \"(StructSelect [0] (IData x)) \u003d\u003e (IData x)\" \n\nBy going straight to the code at the end, the size, type, and offset all work out correctly.",
      "parentUuid": "ed272845_38f63380",
      "revId": "850f65346eddd36062b504327e515ab18e13991f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "756a15a3_8d2b8c81",
        "filename": "src/cmd/compile/internal/ssa/expand_calls.go",
        "patchSetId": 25
      },
      "lineNbr": 229,
      "author": {
        "id": 13315
      },
      "writtenOn": "2020-09-25T15:43:52Z",
      "side": 1,
      "message": "Nit: v.MemoryArg() ?",
      "range": {
        "startLine": 229,
        "startChar": 10,
        "endLine": 229,
        "endChar": 31
      },
      "revId": "850f65346eddd36062b504327e515ab18e13991f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "08bfc727_ddf80c6a",
        "filename": "src/cmd/compile/internal/ssa/expand_calls.go",
        "patchSetId": 25
      },
      "lineNbr": 229,
      "author": {
        "id": 7061
      },
      "writtenOn": "2020-09-25T20:33:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "756a15a3_8d2b8c81",
      "range": {
        "startLine": 229,
        "startChar": 10,
        "endLine": 229,
        "endChar": 31
      },
      "revId": "850f65346eddd36062b504327e515ab18e13991f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8cf8d137_8f48fd4d",
        "filename": "src/cmd/compile/internal/ssa/expand_calls.go",
        "patchSetId": 25
      },
      "lineNbr": 248,
      "author": {
        "id": 13315
      },
      "writtenOn": "2020-09-25T15:43:52Z",
      "side": 1,
      "message": "What happens if OpDereference\u0027s memory and Call\u0027s memory are different?\n\nIt seems we are using the Call\u0027s memory (plus updates in this loop). Maybe the a.Uses\u003d\u003d1 condition above needs also a.MemoryArg()\u003d\u003dm0 or a.Block \u003d\u003d v.Block or something?",
      "range": {
        "startLine": 248,
        "startChar": 28,
        "endLine": 248,
        "endChar": 31
      },
      "revId": "850f65346eddd36062b504327e515ab18e13991f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "25a2654d_05dd62df",
        "filename": "src/cmd/compile/internal/ssa/expand_calls.go",
        "patchSetId": 25
      },
      "lineNbr": 248,
      "author": {
        "id": 7061
      },
      "writtenOn": "2020-09-25T20:33:53Z",
      "side": 1,
      "message": "Good question -- they shouldn\u0027t be different, given constraints on how the code is generated, but \"shouldn\u0027t\" is not really enough.  I think I should assert that they are the same, because given how the mem is threaded through the stores/moves, it\u0027s a problem if they\u0027re not.  It would have crashed by now if they weren\u0027t, however (I think).",
      "parentUuid": "8cf8d137_8f48fd4d",
      "range": {
        "startLine": 248,
        "startChar": 28,
        "endLine": 248,
        "endChar": 31
      },
      "revId": "850f65346eddd36062b504327e515ab18e13991f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "093bb0b0_074c4138",
        "filename": "src/cmd/compile/internal/ssa/expand_calls.go",
        "patchSetId": 25
      },
      "lineNbr": 279,
      "author": {
        "id": 13315
      },
      "writtenOn": "2020-09-25T15:43:52Z",
      "side": 1,
      "message": "Typo.",
      "range": {
        "startLine": 279,
        "startChar": 116,
        "endLine": 279,
        "endChar": 125
      },
      "revId": "850f65346eddd36062b504327e515ab18e13991f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "da208e65_b28e85e8",
        "filename": "src/cmd/compile/internal/ssa/expand_calls.go",
        "patchSetId": 25
      },
      "lineNbr": 279,
      "author": {
        "id": 7061
      },
      "writtenOn": "2020-09-25T20:33:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "093bb0b0_074c4138",
      "range": {
        "startLine": 279,
        "startChar": 116,
        "endLine": 279,
        "endChar": 125
      },
      "revId": "850f65346eddd36062b504327e515ab18e13991f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fe1de237_8bb3c27f",
        "filename": "src/cmd/compile/internal/ssa/expand_calls.go",
        "patchSetId": 25
      },
      "lineNbr": 343,
      "author": {
        "id": 13315
      },
      "writtenOn": "2020-09-25T15:43:52Z",
      "side": 1,
      "message": "Why not decrement if n\u003d\u003d1 ? If n\u003d\u003d1 it seems val2Preds[v] will stick at 1, and this cannot terminate. I probably missed something.",
      "revId": "850f65346eddd36062b504327e515ab18e13991f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c5485a25_11158df5",
        "filename": "src/cmd/compile/internal/ssa/expand_calls.go",
        "patchSetId": 25
      },
      "lineNbr": 343,
      "author": {
        "id": 7061
      },
      "writtenOn": "2020-09-25T20:33:53Z",
      "side": 1,
      "message": "If n is 1, then it goes around the loop, and \"delete(val2Preds, v)\".\nSetting the map entry to zero before deletion is an option, but it would just take time.\nProbably ought to mention that in a comment.",
      "parentUuid": "fe1de237_8bb3c27f",
      "revId": "850f65346eddd36062b504327e515ab18e13991f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}