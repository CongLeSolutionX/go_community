{
  "comments": [
    {
      "key": {
        "uuid": "1aab102b_38aadead",
        "filename": "src/cmd/link/internal/ld/lib.go",
        "patchSetId": 2
      },
      "lineNbr": 1488,
      "author": {
        "id": 30809
      },
      "writtenOn": "2020-05-23T17:29:51Z",
      "side": 1,
      "message": "Why bother checking for lld and falling back to gold? All recent NDKs have lld, and gold was hardcoded before CL 206840.",
      "revId": "2bb40e359b04bdeaa114091c3914719ed1a9a7f7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "33ee5622_13d3dff0",
        "filename": "src/cmd/link/internal/ld/lib.go",
        "patchSetId": 2
      },
      "lineNbr": 1488,
      "author": {
        "id": 36323
      },
      "writtenOn": "2020-05-24T10:02:32Z",
      "side": 1,
      "message": "The idea was that NDK 17, which is not even 2 years old, would otherwise error out with lld only. \n\nI guess we could instead error out if lld is not found and force the user to chose gold manually. Is there a good reason to break builds for those users when they upgrade their golang version?\n\nI mean, I don\u0027t think that golang should keep old compatibility cruft forever, but dropping support before NDK 16 and 17 are obsoleted seems rash.",
      "parentUuid": "1aab102b_38aadead",
      "revId": "2bb40e359b04bdeaa114091c3914719ed1a9a7f7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a88b51ea_bed5a024",
        "filename": "src/cmd/link/internal/ld/lib.go",
        "patchSetId": 2
      },
      "lineNbr": 1488,
      "author": {
        "id": 30809
      },
      "writtenOn": "2020-05-24T10:24:01Z",
      "side": 1,
      "message": "Are we going to support NDKs \u003c 18? I\u0027m certainly not. Go promises support for the two most recent releases of operating systems, so I don\u0027t see why we should do better for the NDK. I\u0027d go as far and say that only the most recent NDK should be supported, because it is much easier to upgrade than a user\u0027s OS.\n\nI suggest dropping even the check for lld and just assume it\u0027s present. That\u0027s simpler and avoids an exec.Command.",
      "parentUuid": "33ee5622_13d3dff0",
      "revId": "2bb40e359b04bdeaa114091c3914719ed1a9a7f7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "50b8f431_4cf29748",
        "filename": "src/cmd/link/internal/ld/lib.go",
        "patchSetId": 2
      },
      "lineNbr": 1488,
      "author": {
        "id": 36323
      },
      "writtenOn": "2020-05-24T11:22:01Z",
      "side": 1,
      "message": "Current Gradle default NDK is r20b IIRC, so supporting only the most recent NDK has a lot of breakage potential.\n\nI\u0027ll simplify the CL to unchecked lld. Cutting off non-lld builds should warrant a mention in the changelog though.",
      "parentUuid": "a88b51ea_bed5a024",
      "revId": "2bb40e359b04bdeaa114091c3914719ed1a9a7f7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    }
  ]
}