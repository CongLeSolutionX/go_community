{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "c9dc200e_24a2df17",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 7,
      "author": {
        "id": 57259
      },
      "writtenOn": "2024-09-28T13:08:40Z",
      "side": 1,
      "message": "Could you explain why and how we\u0027re changing the testing package? I realize that this information may be in the attached issue, but the CL description should by itself be enough to motivate the change and give a technical overview (if the comments in the code are not sufficient).",
      "revId": "ab77ecd085d5b6c7471317994119969e357cc068",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "12d78f13_d2ab68fa",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 7,
      "author": {
        "id": 52633
      },
      "writtenOn": "2024-10-02T23:56:35Z",
      "side": 1,
      "message": "I added motivation (largely copied from the issue) and a technical overview. To be clear, the motivation and design was established by the Go team and other contributors, not me. I\u0027m simply implementing their proposal since it aids my work.",
      "parentUuid": "c9dc200e_24a2df17",
      "revId": "ab77ecd085d5b6c7471317994119969e357cc068",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b363e8e0_915f7818",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 7,
      "author": {
        "id": 57259
      },
      "writtenOn": "2024-10-03T00:42:03Z",
      "side": 1,
      "message": "Thanks, understood.\n\n(I still see only patchset 6; did you mean to upload PS7?)",
      "parentUuid": "12d78f13_d2ab68fa",
      "revId": "ab77ecd085d5b6c7471317994119969e357cc068",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5927065e_8ae9adbe",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 7,
      "author": {
        "id": 52633
      },
      "writtenOn": "2024-10-03T05:21:11Z",
      "side": 1,
      "message": "I ran the wrong git command and didn\u0027t notice it failed... (yes)",
      "parentUuid": "b363e8e0_915f7818",
      "revId": "ab77ecd085d5b6c7471317994119969e357cc068",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1c3caf7d_7ddf5738",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 7,
      "author": {
        "id": 57259
      },
      "writtenOn": "2024-11-19T21:51:42Z",
      "side": 1,
      "message": "Thanks.",
      "parentUuid": "5927065e_8ae9adbe",
      "revId": "ab77ecd085d5b6c7471317994119969e357cc068",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fa4c1d53_33dcf84e",
        "filename": "src/testing/testing.go",
        "patchSetId": 6
      },
      "lineNbr": 527,
      "author": {
        "id": 57259
      },
      "writtenOn": "2024-09-28T13:08:40Z",
      "side": 1,
      "message": "Use same declaration as in test2json?\n\nMore importantly, we could use a comment somewhere that gives an overview of the framing strategy.",
      "revId": "ab77ecd085d5b6c7471317994119969e357cc068",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "64af48e2_ad6dfb4e",
        "filename": "src/testing/testing.go",
        "patchSetId": 6
      },
      "lineNbr": 527,
      "author": {
        "id": 52633
      },
      "writtenOn": "2024-10-02T23:56:35Z",
      "side": 1,
      "message": "It seems like it would be valuable to move at least the const declarations to a shared internal package to prevent issues with them getting out of sync, though maybe that should be in a different CL?\n\nAs far as a comment, I\u0027m not sure where that should live for visibility. Maybe part of the docs for `NewConverter`? WRT the content, as far as I can tell the framing strategy is basically \"Put special markers in the output stream so test2json can capture them\". It\u0027s not a design that appeals to me but I\u0027m just here to implement it.",
      "parentUuid": "fa4c1d53_33dcf84e",
      "revId": "ab77ecd085d5b6c7471317994119969e357cc068",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "975ec560_e4d79ef8",
        "filename": "src/testing/testing.go",
        "patchSetId": 6
      },
      "lineNbr": 527,
      "author": {
        "id": 57259
      },
      "writtenOn": "2024-10-03T00:42:03Z",
      "side": 1,
      "message": "By \"use same declaration\" I meant only using the same form of declaration in both places. Factoring the declarations is a reasonable approach, but equally so is  making both places reference a single comment that describes the encoding.\n\n\u003e the framing strategy is basically \"Put special markers in the output stream so test2json can capture them\".\n\nThat\u0027s fine, though I think you should spend a few more words elaborating what exactly that means. The code seems to assume that ^V,^N,^O won\u0027t appear in the output of the test, so these bytes may be used as quotation marks, but that\u0027s not true in general, and test2json should be general. So we will need to escape occurrences of these bytes when quoted, just as one escapes quotation marks within a string literal.\n\n\n\u003e I\u0027m just here to implement it.\n\nMany thanks for doing so.",
      "parentUuid": "64af48e2_ad6dfb4e",
      "revId": "ab77ecd085d5b6c7471317994119969e357cc068",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "07c5903f_0b34b55c",
        "filename": "src/testing/testing.go",
        "patchSetId": 6
      },
      "lineNbr": 527,
      "author": {
        "id": 52633
      },
      "writtenOn": "2024-10-04T02:23:58Z",
      "side": 1,
      "message": "I added a section to the `NewConverter` doc comment.",
      "parentUuid": "975ec560_e4d79ef8",
      "revId": "ab77ecd085d5b6c7471317994119969e357cc068",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a7a1dbdc_b949e8a5",
        "filename": "src/testing/testing.go",
        "patchSetId": 6
      },
      "lineNbr": 527,
      "author": {
        "id": 57259
      },
      "writtenOn": "2024-11-20T20:13:04Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "07c5903f_0b34b55c",
      "revId": "ab77ecd085d5b6c7471317994119969e357cc068",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bb3924af_15e717bf",
        "filename": "src/testing/testing.go",
        "patchSetId": 6
      },
      "lineNbr": 822,
      "author": {
        "id": 57259
      },
      "writtenOn": "2024-09-28T13:08:40Z",
      "side": 1,
      "message": "Don\u0027t we need to escape occurrences of ^O in the filename and in s (L832)? It would be good to add a test case that exercises an error message containing all ASCII values.",
      "range": {
        "startLine": 822,
        "startChar": 29,
        "endLine": 822,
        "endChar": 33
      },
      "revId": "ab77ecd085d5b6c7471317994119969e357cc068",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "746079e8_d9b0901c",
        "filename": "src/testing/testing.go",
        "patchSetId": 6
      },
      "lineNbr": 822,
      "author": {
        "id": 52633
      },
      "writtenOn": "2024-10-02T23:56:35Z",
      "side": 1,
      "message": "Testing all ASCII values via a script test is messy due to needing to \nescape quotes, regex metacharacters, etc. So instead I wrote a test that\n outputs every ASCII value up to 0x20, since that covers all the \nnon-printing characters other than 0x7f.\n\nAlso, the existing framing mechanism does not escape ^V. The following:\n\n```\nfunc TestASCII(t *T) {\n\tt.Log(\"\\x16\")\n}\n```\n\nproduces these outputs:\n\n```\n{...,\"Output\":\"\u003d\u003d\u003d RUN   TestFoo\\n\",\"OutputType\":\"frame\"}\n{...,\"Output\":\"    sub_test.go:25: \"}\n{...,\"Output\":\"\\n\"}\n{...,\"Output\":\"--- PASS: TestFoo (0.00s)\\n\",\"OutputType\":\"frame\"}\n```\n\n^V is elided from the output and also causes a pseudo line break in terms of how output is split between events. I am also escaping ^V, but only within errors so this bug still exists.",
      "parentUuid": "bb3924af_15e717bf",
      "range": {
        "startLine": 822,
        "startChar": 29,
        "endLine": 822,
        "endChar": 33
      },
      "revId": "ab77ecd085d5b6c7471317994119969e357cc068",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c2dd83b4_fa92717e",
        "filename": "src/testing/testing.go",
        "patchSetId": 6
      },
      "lineNbr": 822,
      "author": {
        "id": 57259
      },
      "writtenOn": "2024-10-03T00:42:03Z",
      "side": 1,
      "message": "What makes it messy? I am imagining a test along these lines:\n\nfunc Test(t *testing.T) { for b :\u003d range 0x7f { t.Log(string(b)) } }\n\n(Or whatever you did for 0x20 extended to 0x7f.)\n\n\u003e the existing framing mechanism does not escape ^V.\n\nI\u0027m not surprised that this was overlooked; this is a very common bug pattern, and relatively few tests emit non-ASCII output. So I think we should just fix the bug in passing.",
      "parentUuid": "746079e8_d9b0901c",
      "range": {
        "startLine": 822,
        "startChar": 29,
        "endLine": 822,
        "endChar": 33
      },
      "revId": "ab77ecd085d5b6c7471317994119969e357cc068",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9cd843a7_fa779dfd",
        "filename": "src/testing/testing.go",
        "patchSetId": 6
      },
      "lineNbr": 822,
      "author": {
        "id": 52633
      },
      "writtenOn": "2024-10-03T05:21:11Z",
      "side": 1,
      "message": "\u003e What makes it messy?\n\nThe `stdout \u0027...\u0027` pattern to match the output. The new test is src/cmd/go/testdata/script/test_json_ascii.txt. `stdout` parses its argument as a regex, so characters such as `.`, `*`, `+`, etc (plus quotes) have to be escaped.\n\n\u003e So I think we should just fix the bug in passing.\n\nIt probably won\u0027t be too hard to escape ^V in plain (non-error) output, I\u0027ll check on that tomorrow. However handing the escaping in test2json is not as easy. I\u0027m trying to keep this CL as non-invasive as I can, so (WRT test2json) I only made significant changes in one function, `writeOutputEvent`. But as I point out in the BUG comment I added, `indexEOL` cannot properly handle unescaping as it is currently and I\u0027m not sure whether I can fix it (and `lineBuffer.write`) without making more substantial changes.",
      "parentUuid": "c2dd83b4_fa92717e",
      "range": {
        "startLine": 822,
        "startChar": 29,
        "endLine": 822,
        "endChar": 33
      },
      "revId": "ab77ecd085d5b6c7471317994119969e357cc068",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0b53b38e_005aa98f",
        "filename": "src/testing/testing.go",
        "patchSetId": 6
      },
      "lineNbr": 822,
      "author": {
        "id": 52633
      },
      "writtenOn": "2024-10-04T02:23:58Z",
      "side": 1,
      "message": "I added a new mechanic to test2json\u0027s TestGolden: You can now specify a x.src file that is a test script that should be run and the output compared to x.test (with the appropriate -update behavior). This makes it much cleaner (IMO) to validate both the output of `go test -v\u003dtest2json` and test2json\u0027s conversion of that output to events. I updated test2json\u0027s frame escape test to include all ASCII characters from NUL to DEL.",
      "parentUuid": "9cd843a7_fa779dfd",
      "range": {
        "startLine": 822,
        "startChar": 29,
        "endLine": 822,
        "endChar": 33
      },
      "revId": "ab77ecd085d5b6c7471317994119969e357cc068",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ad82678b_2cebfc2f",
        "filename": "src/testing/testing.go",
        "patchSetId": 6
      },
      "lineNbr": 822,
      "author": {
        "id": 52633
      },
      "writtenOn": "2024-10-04T21:24:18Z",
      "side": 1,
      "message": "It was actually pretty easy to make `lineBuffer` handle escapes properly, so that bug is fixed. I also updated the framefail test to verify that `fmt.Print(\"foo\"); t.Error(\"bar\")` (an error that does not start on a new line) does not cause a failure.",
      "parentUuid": "0b53b38e_005aa98f",
      "range": {
        "startLine": 822,
        "startChar": 29,
        "endLine": 822,
        "endChar": 33
      },
      "revId": "ab77ecd085d5b6c7471317994119969e357cc068",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2639c2ff_6178eafe",
        "filename": "src/testing/testing.go",
        "patchSetId": 6
      },
      "lineNbr": 822,
      "author": {
        "id": 52633
      },
      "writtenOn": "2024-11-16T15:58:03Z",
      "side": 1,
      "message": "\u003e I added a new mechanic to test2json\u0027s TestGolden\n\nI moved this to CL 628615",
      "parentUuid": "ad82678b_2cebfc2f",
      "range": {
        "startLine": 822,
        "startChar": 29,
        "endLine": 822,
        "endChar": 33
      },
      "revId": "ab77ecd085d5b6c7471317994119969e357cc068",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "add20aac_3ad5344f",
        "filename": "src/testing/testing.go",
        "patchSetId": 6
      },
      "lineNbr": 822,
      "author": {
        "id": 57259
      },
      "writtenOn": "2024-11-20T20:13:04Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "2639c2ff_6178eafe",
      "range": {
        "startLine": 822,
        "startChar": 29,
        "endLine": 822,
        "endChar": 33
      },
      "revId": "ab77ecd085d5b6c7471317994119969e357cc068",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}