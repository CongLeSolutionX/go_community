{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "8129242d_6d40f31c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 62818
      },
      "writtenOn": "2023-05-13T00:33:59Z",
      "side": 1,
      "message": "Here\u0027s a playground showing behavior IRL: https://go.dev/play/p/NzJf-DA9DSa?v\u003dgotip\n\nSpecifically:\n```\nfmt.Printf(\"Str07\u003d%07s[EOL]\\n\", \"Hello\")\n//\u003d\u003e Str07\u003d00Hello[EOL]\n```\n\nFWIW, the actual behavior is what I want and what I intuitively expected, so I was surprised when I read the docs, but then pleasantly re-surprised to find the docs were wrong when I actually tried it.",
      "revId": "4be826b79b06d499a172922f83305cfe4d3cf112",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3f359fa1_953571a1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5015
      },
      "writtenOn": "2023-05-13T09:10:56Z",
      "side": 1,
      "message": "It\u0027s not that simple. See https://go.dev/play/p/_-73vYP6W4p for instance.\n\nThis is not the thing to fix. The documentation is correct at least some of the time and describes the intention. I believe it\u0027s just a bug that it\u0027s not all the time.",
      "parentUuid": "8129242d_6d40f31c",
      "revId": "4be826b79b06d499a172922f83305cfe4d3cf112",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ab92a4e3_94f55884",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 62818
      },
      "writtenOn": "2023-05-13T21:05:06Z",
      "side": 1,
      "message": "You\u0027re right, it is way more involved than the simple combos that I\u0027m used to using. It had not occurred to me to use a decimal point in a string verb, but I now see the remark earlier in the docs:\n\u003e \"For strings [...], precision limits the length of the input to be formatted.\"\n\nThe ambiguity between width/precision and the `0` flag is unfortunate, but I think the integer from your example is even weirder than the string (I\u0027m still having trouble puzzling out the logic for integers re: width/precision), so let\u0027s leave `%d` out of the discussion for now.\n\nSimplifying your example to make it easier to refer to:\n```\nfmt.Printf(\"%0.24s\\n\", \"Hello, 世界\")\n```\n\nJust from the output, it\u0027s impossible to say whether the `0` is interpreted as a flag or a width, because width defaults to 0, so there\u0027s no padding to be done anyway, because 0 is less than the runes in the string \"Hello, 世界\". All of `\"% 0.24s\"` / `\"%.24s\"` / `\"% .24s\"` have the same result, for the same reason. (And ofc 24 is greater than the number of runes in the string, so no truncation is applied.)\n\nAdd some actual padding though: `fmt.Printf(\"^%07.5s$\\n\", \"Hello, 世界\")`, and you get `^00Hello$`. Here the `0` is interpreted as a flag, because (AFAICT) it can be; i.e., greedily. Precision\u003d5 truncates string down to \"Hello\", Width\u003d7 necessitates padding, and `0` makes it pad with DIGIT ZERO instead of SPACE. See https://go.dev/play/p/IrGbSnommZu\n\nAm I misunderstanding something?",
      "parentUuid": "3f359fa1_953571a1",
      "revId": "4be826b79b06d499a172922f83305cfe4d3cf112",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b22139a4_2c9cf97c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5015
      },
      "writtenOn": "2023-05-14T23:23:01Z",
      "side": 1,
      "message": "As I said, it\u0027s a bug that should be fixed. The solution is not to change the documentation that states the desired, correct behavior, which is to ignore the zero flag.\n\nPlease drop this change.\n\nThe zero flag comes from C\u0027s printf, and yes it\u0027s confusing.",
      "parentUuid": "ab92a4e3_94f55884",
      "revId": "4be826b79b06d499a172922f83305cfe4d3cf112",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}