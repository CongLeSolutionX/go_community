{
  "comments": [
    {
      "key": {
        "uuid": "6f8d0283_1e4c943b",
        "filename": "src/reflect/all_test.go",
        "patchSetId": 4
      },
      "lineNbr": 1636,
      "author": {
        "id": 5167
      },
      "writtenOn": "2017-09-05T19:50:36Z",
      "side": 1,
      "message": "Hmm. This just repeats the code. Maybe\n\n// The two returned emptyStruct values will be the same because they both refer to zerobase.\n// This isn\u0027t strictly necessary, but checks that reflect isn\u0027t returning wild pointers for\n// empty objects.",
      "range": {
        "startLine": 1636,
        "startChar": 87,
        "endLine": 1636,
        "endChar": 135
      },
      "revId": "bede8aacf425b7baffc95802d08b3ace31a6b8b1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "47604482_f30fea41",
        "filename": "src/reflect/all_test.go",
        "patchSetId": 4
      },
      "lineNbr": 1636,
      "author": {
        "id": 13315
      },
      "writtenOn": "2017-09-05T20:45:23Z",
      "side": 1,
      "message": "Interface equality doesn\u0027t check their pointers (idata) are equal for empty object, though (https://play.golang.org/p/58v3d0MPFZ). If it did, it seems too strict in normal use case.\n\nMaybe it\u0027s not worth adding this test?\n\nMaybe we want to check the two Value are equal (including unexported fields)? Seems too strict (rule out other possible implementation), but it does ensure it doesn\u0027t return wild pointers.",
      "parentUuid": "6f8d0283_1e4c943b",
      "range": {
        "startLine": 1636,
        "startChar": 87,
        "endLine": 1636,
        "endChar": 135
      },
      "revId": "bede8aacf425b7baffc95802d08b3ace31a6b8b1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b9169fe7_aa955ff5",
        "filename": "src/reflect/all_test.go",
        "patchSetId": 4
      },
      "lineNbr": 1636,
      "author": {
        "id": 5167
      },
      "writtenOn": "2017-09-18T14:09:01Z",
      "side": 1,
      "message": "Hmm. We could test r[0].InterfaceData() \u003d\u003d r[2].InterfaceData() (assuming that works), along with a comment like the one I suggested, but perhaps being more explicit that this is not an implementation requirement.\n\nI\u0027d also be fine with just dropping this test.",
      "parentUuid": "47604482_f30fea41",
      "range": {
        "startLine": 1636,
        "startChar": 87,
        "endLine": 1636,
        "endChar": 135
      },
      "revId": "bede8aacf425b7baffc95802d08b3ace31a6b8b1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "92230514_d79fca71",
        "filename": "src/reflect/all_test.go",
        "patchSetId": 4
      },
      "lineNbr": 1636,
      "author": {
        "id": 13315
      },
      "writtenOn": "2017-09-19T13:33:08Z",
      "side": 1,
      "message": "This doesn\u0027t work because the underlying values of r[0] and r[2] are structs, not interfaces, so InterfaceData would panic.\n\nI\u0027ll drop this test.",
      "parentUuid": "b9169fe7_aa955ff5",
      "range": {
        "startLine": 1636,
        "startChar": 87,
        "endLine": 1636,
        "endChar": 135
      },
      "revId": "bede8aacf425b7baffc95802d08b3ace31a6b8b1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    }
  ]
}