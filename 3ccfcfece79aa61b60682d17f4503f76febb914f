{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "06680237_2a7a6e27",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-05-19T22:56:23Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003d3ccfcfec\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "3ccfcfece79aa61b60682d17f4503f76febb914f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2c8e3b94_fdf9b8e1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 5065
      },
      "writtenOn": "2023-05-19T22:56:37Z",
      "side": 1,
      "message": "PTAL; now with GOEXPERIMENT per the issue.",
      "revId": "3ccfcfece79aa61b60682d17f4503f76febb914f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2a9a668e_1d2fd5d2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-05-19T23:07:11Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "06680237_2a7a6e27",
      "tag": "autogenerated:trybots~happy",
      "revId": "3ccfcfece79aa61b60682d17f4503f76febb914f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "08ec9adc_b6ca3a6e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 5056
      },
      "writtenOn": "2023-05-23T21:41:25Z",
      "side": 1,
      "message": "Nice and simple.",
      "revId": "3ccfcfece79aa61b60682d17f4503f76febb914f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f4af9987_a39855e4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 6365
      },
      "writtenOn": "2023-05-24T02:47:41Z",
      "side": 1,
      "message": "Ideally I would like to also see a reference `GOCACHEPROG` implementation (perhaps in `cmd/go/testdata`?) and an integration test that uses it to demonstrate the protocols and codepaths.",
      "revId": "3ccfcfece79aa61b60682d17f4503f76febb914f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8b6f82ab_144c2b2b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 5065
      },
      "writtenOn": "2023-05-24T02:50:35Z",
      "side": 1,
      "message": "I have one at https://github.com/bradfitz/go-tool-cache but I probably won\u0027t have time to integrate it into std tests. I was hoping that by its GOEXPERIMENTal status it might need one in-tree until it becomes un-experimented.\n\nOr maybe I could add it in a follow-up change?",
      "parentUuid": "f4af9987_a39855e4",
      "revId": "3ccfcfece79aa61b60682d17f4503f76febb914f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "165d99d4_04382d84",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 6365
      },
      "writtenOn": "2023-05-24T02:59:16Z",
      "side": 1,
      "message": "A follow-up change seems ok. Probably it could just be a thin JSON wrapper around the real `cache.DiskCache`?",
      "parentUuid": "8b6f82ab_144c2b2b",
      "revId": "3ccfcfece79aa61b60682d17f4503f76febb914f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a87aa092_0a9c0a17",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 5065
      },
      "writtenOn": "2023-05-24T03:31:52Z",
      "side": 1,
      "message": "Yeah, that\u0027s basically what that repo above is. (except I had to reimplement some internal things since it\u0027s out of tree)",
      "parentUuid": "165d99d4_04382d84",
      "revId": "3ccfcfece79aa61b60682d17f4503f76febb914f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d80fbd23_4a43f8b3",
        "filename": "src/cmd/go/internal/cache/cache.go",
        "patchSetId": 8
      },
      "lineNbr": 475,
      "author": {
        "id": 5056
      },
      "writtenOn": "2023-05-23T21:41:25Z",
      "side": 1,
      "message": "Clever trick. I don\u0027t think I\u0027ve seen this before.",
      "revId": "3ccfcfece79aa61b60682d17f4503f76febb914f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fd9befc0_1be9418f",
        "filename": "src/cmd/go/internal/cache/cache.go",
        "patchSetId": 8
      },
      "lineNbr": 475,
      "author": {
        "id": 5065
      },
      "writtenOn": "2023-05-24T02:50:35Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "d80fbd23_4a43f8b3",
      "revId": "3ccfcfece79aa61b60682d17f4503f76febb914f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9cf56283_8a5e4298",
        "filename": "src/cmd/go/internal/cache/cache.go",
        "patchSetId": 8
      },
      "lineNbr": 486,
      "author": {
        "id": 6365
      },
      "writtenOn": "2023-05-23T22:00:22Z",
      "side": 1,
      "message": "(nit) maybe `file.ReadSeeker` here, to expose any extension methods masked by the struct?",
      "range": {
        "startLine": 486,
        "startChar": 18,
        "endLine": 486,
        "endChar": 22
      },
      "revId": "3ccfcfece79aa61b60682d17f4503f76febb914f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e0ebe727_23124c28",
        "filename": "src/cmd/go/internal/cache/cache.go",
        "patchSetId": 8
      },
      "lineNbr": 486,
      "author": {
        "id": 5065
      },
      "writtenOn": "2023-05-24T02:50:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9cf56283_8a5e4298",
      "range": {
        "startLine": 486,
        "startChar": 18,
        "endLine": 486,
        "endChar": 22
      },
      "revId": "3ccfcfece79aa61b60682d17f4503f76febb914f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6978357e_80e3a3e5",
        "filename": "src/cmd/go/internal/cache/default.go",
        "patchSetId": 8
      },
      "lineNbr": 64,
      "author": {
        "id": 6365
      },
      "writtenOn": "2023-05-23T22:00:22Z",
      "side": 1,
      "message": "(nit) remove either the `return` or the `else` (redundant)",
      "revId": "3ccfcfece79aa61b60682d17f4503f76febb914f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e2b82948_085f299e",
        "filename": "src/cmd/go/internal/cache/default.go",
        "patchSetId": 8
      },
      "lineNbr": 64,
      "author": {
        "id": 5065
      },
      "writtenOn": "2023-05-24T02:50:35Z",
      "side": 1,
      "message": "Whoops. I don\u0027t remember this being here, but I do remember rebase conflicts here once. This might\u0027ve snuck in. Gone.",
      "parentUuid": "6978357e_80e3a3e5",
      "revId": "3ccfcfece79aa61b60682d17f4503f76febb914f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c1b9efeb_15d317ee",
        "filename": "src/cmd/go/internal/cache/prog.go",
        "patchSetId": 8
      },
      "lineNbr": 113,
      "author": {
        "id": 6365
      },
      "writtenOn": "2023-05-24T02:45:55Z",
      "side": 1,
      "message": "(missing noun)",
      "range": {
        "startLine": 113,
        "startChar": 17,
        "endLine": 113,
        "endChar": 39
      },
      "revId": "3ccfcfece79aa61b60682d17f4503f76febb914f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3181e3e2_6793585d",
        "filename": "src/cmd/go/internal/cache/prog.go",
        "patchSetId": 8
      },
      "lineNbr": 113,
      "author": {
        "id": 5065
      },
      "writtenOn": "2023-05-24T03:31:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c1b9efeb_15d317ee",
      "range": {
        "startLine": 113,
        "startChar": 17,
        "endLine": 113,
        "endChar": 39
      },
      "revId": "3ccfcfece79aa61b60682d17f4503f76febb914f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "06fd8af6_537be8dc",
        "filename": "src/cmd/go/internal/cache/prog.go",
        "patchSetId": 8
      },
      "lineNbr": 122,
      "author": {
        "id": 6365
      },
      "writtenOn": "2023-05-24T02:45:55Z",
      "side": 1,
      "message": "`// in bytes`\n?",
      "revId": "3ccfcfece79aa61b60682d17f4503f76febb914f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "50914ce9_271b120d",
        "filename": "src/cmd/go/internal/cache/prog.go",
        "patchSetId": 8
      },
      "lineNbr": 122,
      "author": {
        "id": 5065
      },
      "writtenOn": "2023-05-24T03:31:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "06fd8af6_537be8dc",
      "revId": "3ccfcfece79aa61b60682d17f4503f76febb914f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e9c20c7d_6dc6f5a0",
        "filename": "src/cmd/go/internal/cache/prog.go",
        "patchSetId": 8
      },
      "lineNbr": 123,
      "author": {
        "id": 6365
      },
      "writtenOn": "2023-05-24T02:45:55Z",
      "side": 1,
      "message": "Yes, please: is this the mtime, the atime, something else?\n\n(Ideally I would prefer to use a `time.Time` in UTC, instead of nanos, to avoid questions about epochs, but if the overhead of marshaling and unmarshaling is too high, please at least document the epoch for this field.)",
      "range": {
        "startLine": 123,
        "startChar": 38,
        "endLine": 123,
        "endChar": 65
      },
      "revId": "3ccfcfece79aa61b60682d17f4503f76febb914f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "29cbfdcd_09389e59",
        "filename": "src/cmd/go/internal/cache/prog.go",
        "patchSetId": 8
      },
      "lineNbr": 123,
      "author": {
        "id": 5065
      },
      "writtenOn": "2023-05-24T03:31:52Z",
      "side": 1,
      "message": "Hah, right? https://github.com/golang/go/blob/go1.20.4/src/cmd/go/internal/cache/cache.go#L146-L150\n\nNot much in the way of docs anywhere. It was on my list to figure out but I forgot.\n\nMostly I didn\u0027t use time.Time because it can\u0027t do omitempty. (grrr) So I use an integer in protest.\n\nBut my integer sucks too, because maybe JSON clients (because JavaScript) can only deal with integers up to 1\u003c\u003c53-1 (that fit in a float64 without losing accuracy), which means:\n\nhttps://go.dev/play/p/JHBhqjgXfz1\n\n... nanoseconds only worked for four and a half months into 1970.\n\nI\u0027ll just use a time.Time.",
      "parentUuid": "e9c20c7d_6dc6f5a0",
      "range": {
        "startLine": 123,
        "startChar": 38,
        "endLine": 123,
        "endChar": 65
      },
      "revId": "3ccfcfece79aa61b60682d17f4503f76febb914f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "92e3f2a8_1d0429a0",
        "filename": "src/cmd/go/internal/cache/prog.go",
        "patchSetId": 8
      },
      "lineNbr": 138,
      "author": {
        "id": 5056
      },
      "writtenOn": "2023-05-23T21:41:25Z",
      "side": 1,
      "message": "panic(\"missing fuzzDirCache\")",
      "revId": "3ccfcfece79aa61b60682d17f4503f76febb914f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5fd11fbd_a3c7e354",
        "filename": "src/cmd/go/internal/cache/prog.go",
        "patchSetId": 8
      },
      "lineNbr": 138,
      "author": {
        "id": 5065
      },
      "writtenOn": "2023-05-24T02:50:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "92e3f2a8_1d0429a0",
      "revId": "3ccfcfece79aa61b60682d17f4503f76febb914f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9339feb7_213f3285",
        "filename": "src/cmd/go/internal/cache/prog.go",
        "patchSetId": 8
      },
      "lineNbr": 142,
      "author": {
        "id": 5056
      },
      "writtenOn": "2023-05-23T21:41:25Z",
      "side": 1,
      "message": "Most of our programs use quoted.Split from cmd/internal/quoted for this. Let\u0027s use that here too.",
      "revId": "3ccfcfece79aa61b60682d17f4503f76febb914f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "277b244d_93b9af95",
        "filename": "src/cmd/go/internal/cache/prog.go",
        "patchSetId": 8
      },
      "lineNbr": 142,
      "author": {
        "id": 5065
      },
      "writtenOn": "2023-05-24T02:50:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9339feb7_213f3285",
      "revId": "3ccfcfece79aa61b60682d17f4503f76febb914f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aff20959_51f2dc6d",
        "filename": "src/cmd/go/internal/cache/prog.go",
        "patchSetId": 8
      },
      "lineNbr": 154,
      "author": {
        "id": 6365
      },
      "writtenOn": "2023-05-23T22:00:22Z",
      "side": 1,
      "message": "Do we really need these checks to be explicit? I would expect `exec.Cmd.Start` to take care of them anyway.",
      "range": {
        "startLine": 148,
        "startChar": 0,
        "endLine": 154,
        "endChar": 2
      },
      "revId": "3ccfcfece79aa61b60682d17f4503f76febb914f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0da0a3f3_3fe0e380",
        "filename": "src/cmd/go/internal/cache/prog.go",
        "patchSetId": 8
      },
      "lineNbr": 154,
      "author": {
        "id": 5065
      },
      "writtenOn": "2023-05-24T02:50:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "aff20959_51f2dc6d",
      "range": {
        "startLine": 148,
        "startChar": 0,
        "endLine": 154,
        "endChar": 2
      },
      "revId": "3ccfcfece79aa61b60682d17f4503f76febb914f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7a42fd88_bb42ed3c",
        "filename": "src/cmd/go/internal/cache/prog.go",
        "patchSetId": 8
      },
      "lineNbr": 186,
      "author": {
        "id": 6365
      },
      "writtenOn": "2023-05-23T22:00:22Z",
      "side": 1,
      "message": "For hermetic testing and for tracing, this whole structure should probably have `Context` plumbing, and `Close` should wait for the command and `readLoop` to complete.",
      "revId": "3ccfcfece79aa61b60682d17f4503f76febb914f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "569e0d26_df1cca08",
        "filename": "src/cmd/go/internal/cache/prog.go",
        "patchSetId": 8
      },
      "lineNbr": 186,
      "author": {
        "id": 5065
      },
      "writtenOn": "2023-05-24T03:31:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7a42fd88_bb42ed3c",
      "revId": "3ccfcfece79aa61b60682d17f4503f76febb914f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aec09fd4_bf82b410",
        "filename": "src/cmd/go/internal/cache/prog.go",
        "patchSetId": 8
      },
      "lineNbr": 194,
      "author": {
        "id": 6365
      },
      "writtenOn": "2023-05-23T22:00:22Z",
      "side": 1,
      "message": "I think it\u0027s ok to print to stderr during cache startup to let the user know what\u0027s going on, but we shouldn\u0027t make any assumptions about the speed of the subprocess. (For example, maybe it has to build a larger cached binary on first startup, which could take longer than 5s.)",
      "revId": "3ccfcfece79aa61b60682d17f4503f76febb914f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "196ed95b_d9ac67ce",
        "filename": "src/cmd/go/internal/cache/prog.go",
        "patchSetId": 8
      },
      "lineNbr": 194,
      "author": {
        "id": 5065
      },
      "writtenOn": "2023-05-24T02:50:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "aec09fd4_bf82b410",
      "revId": "3ccfcfece79aa61b60682d17f4503f76febb914f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5cb62e0d_85b18488",
        "filename": "src/cmd/go/internal/cache/prog.go",
        "patchSetId": 8
      },
      "lineNbr": 214,
      "author": {
        "id": 6365
      },
      "writtenOn": "2023-05-23T22:00:22Z",
      "side": 1,
      "message": "I would expect the program to be able to close its pipes when it completes the `Close` command, at which point I think will get an EOF from `c.stdout`.\n\nWe should, however, verify that `c.inFlight` is empty when the stream breaks.",
      "revId": "3ccfcfece79aa61b60682d17f4503f76febb914f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5cfc0be4_11ad9914",
        "filename": "src/cmd/go/internal/cache/prog.go",
        "patchSetId": 8
      },
      "lineNbr": 214,
      "author": {
        "id": 5065
      },
      "writtenOn": "2023-05-24T03:31:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5cb62e0d_85b18488",
      "revId": "3ccfcfece79aa61b60682d17f4503f76febb914f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "903805b7_33ea8bf9",
        "filename": "src/cmd/go/internal/cache/prog.go",
        "patchSetId": 8
      },
      "lineNbr": 218,
      "author": {
        "id": 6365
      },
      "writtenOn": "2023-05-23T22:00:22Z",
      "side": 1,
      "message": "`base.Fatalf` if there is no in-flight operation with the given ID?\n(I would rather not mask bugs in the implementation, since we may have to work harder to maintain compatibility with those bugs going forward.)",
      "revId": "3ccfcfece79aa61b60682d17f4503f76febb914f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1e556b19_1df56c0a",
        "filename": "src/cmd/go/internal/cache/prog.go",
        "patchSetId": 8
      },
      "lineNbr": 218,
      "author": {
        "id": 5065
      },
      "writtenOn": "2023-05-24T02:50:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "903805b7_33ea8bf9",
      "revId": "3ccfcfece79aa61b60682d17f4503f76febb914f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3982bb0a_a7488fca",
        "filename": "src/cmd/go/internal/cache/prog.go",
        "patchSetId": 8
      },
      "lineNbr": 243,
      "author": {
        "id": 5056
      },
      "writtenOn": "2023-05-23T21:41:25Z",
      "side": 1,
      "message": "I suggest having two separate locks here, never held at the same time: one for in-memory things like nextID/inFlight/outputFile never held for very long (the defer would have to relock+unlock), and then a separate one for serializing writes to the subprocess.\n\nDepending on the behavior of the subprocess there is a possibility of deadlock here if the write gets backed up waiting on the subprocess (while holding the lock) and the subprocess is in turn backed up waiting for the go command to process a large packet but it\u0027s stuck trying to acquire the lock in readLoop. We could define that the subprocess is \"well behaved\" and must never refuse to read a new message just because a previous write is blocked, but we could also easily avoid the failure mode here by having two locks.",
      "revId": "3ccfcfece79aa61b60682d17f4503f76febb914f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "38aae4c3_533b7e19",
        "filename": "src/cmd/go/internal/cache/prog.go",
        "patchSetId": 8
      },
      "lineNbr": 243,
      "author": {
        "id": 5065
      },
      "writtenOn": "2023-05-24T03:06:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3982bb0a_a7488fca",
      "revId": "3ccfcfece79aa61b60682d17f4503f76febb914f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "94dc1294_65d387ec",
        "filename": "src/cmd/go/internal/cache/prog.go",
        "patchSetId": 8
      },
      "lineNbr": 273,
      "author": {
        "id": 6365
      },
      "writtenOn": "2023-05-24T02:45:55Z",
      "side": 1,
      "message": "Add more detail to the error? (Maybe the ActionID and/or ObjectID so that we can correlate an encoding bug with the request that triggered it?)",
      "revId": "3ccfcfece79aa61b60682d17f4503f76febb914f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d1e153f8_0b78585c",
        "filename": "src/cmd/go/internal/cache/prog.go",
        "patchSetId": 8
      },
      "lineNbr": 288,
      "author": {
        "id": 6365
      },
      "writtenOn": "2023-05-24T02:45:55Z",
      "side": 1,
      "message": "Populate the Err field here, perhaps with `errors.ErrUnsupported`?\n\nActually, I\u0027m not sure `entryNotFoundError` is appropriate. There are probably places where we rely on the fact that a recent `Put` can be read through a corresponding `Get`.",
      "revId": "3ccfcfece79aa61b60682d17f4503f76febb914f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3efa2edd_16971159",
        "filename": "src/cmd/go/internal/cache/prog.go",
        "patchSetId": 8
      },
      "lineNbr": 288,
      "author": {
        "id": 5065
      },
      "writtenOn": "2023-05-24T03:11:48Z",
      "side": 1,
      "message": "I added a big TODO here. That okay for now? I\u0027d prefer that to be a separate change as it\u0027ll touch enough other stuff.\n\nFor now I\u0027m not too concerned about this because a cacheprog not implementing \"get\" is a hypothetical fringe use case.",
      "parentUuid": "d1e153f8_0b78585c",
      "revId": "3ccfcfece79aa61b60682d17f4503f76febb914f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "343b24f9_488fa3ac",
        "filename": "src/cmd/go/internal/cache/prog.go",
        "patchSetId": 8
      },
      "lineNbr": 288,
      "author": {
        "id": 5065
      },
      "writtenOn": "2023-05-24T03:31:52Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "3efa2edd_16971159",
      "revId": "3ccfcfece79aa61b60682d17f4503f76febb914f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "90d227d9_4b7a18d0",
        "filename": "src/cmd/go/internal/cache/prog.go",
        "patchSetId": 8
      },
      "lineNbr": 290,
      "author": {
        "id": 6365
      },
      "writtenOn": "2023-05-24T02:45:55Z",
      "side": 1,
      "message": "Pass in the Context. (We ought to have it around for tracing anyway.)",
      "range": {
        "startLine": 290,
        "startChar": 48,
        "endLine": 290,
        "endChar": 83
      },
      "revId": "3ccfcfece79aa61b60682d17f4503f76febb914f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "aa04ab1b_1b62a04d",
        "filename": "src/cmd/go/internal/cache/prog.go",
        "patchSetId": 8
      },
      "lineNbr": 290,
      "author": {
        "id": 5065
      },
      "writtenOn": "2023-05-24T03:11:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "90d227d9_4b7a18d0",
      "range": {
        "startLine": 290,
        "startChar": 48,
        "endLine": 290,
        "endChar": 83
      },
      "revId": "3ccfcfece79aa61b60682d17f4503f76febb914f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "af4cafe9_89e6293b",
        "filename": "src/cmd/go/internal/cache/prog.go",
        "patchSetId": 8
      },
      "lineNbr": 296,
      "author": {
        "id": 6365
      },
      "writtenOn": "2023-05-24T02:45:55Z",
      "side": 1,
      "message": "I don\u0027t think we should return `entryNotFoundError` for protocol or communication errors. If the cache program is buggy or crashy, I\u0027d rather we surface that so that the user can fix it than quietly degrade to rebuilding a bunch of dependencies that should have been in cache.",
      "revId": "3ccfcfece79aa61b60682d17f4503f76febb914f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e96b5df4_69f51774",
        "filename": "src/cmd/go/internal/cache/prog.go",
        "patchSetId": 8
      },
      "lineNbr": 296,
      "author": {
        "id": 5065
      },
      "writtenOn": "2023-05-24T03:11:48Z",
      "side": 1,
      "message": "Changed to err, with a TODO to audit all the callers, same as the other TODO.",
      "parentUuid": "af4cafe9_89e6293b",
      "revId": "3ccfcfece79aa61b60682d17f4503f76febb914f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0f60e40a_68889f49",
        "filename": "src/cmd/go/internal/cache/prog.go",
        "patchSetId": 8
      },
      "lineNbr": 330,
      "author": {
        "id": 6365
      },
      "writtenOn": "2023-05-24T02:45:55Z",
      "side": 1,
      "message": "(nit) `io.SeekStart` (here and below) to make these `Seek` arguments a little more self-explanatory.",
      "range": {
        "startLine": 330,
        "startChar": 27,
        "endLine": 330,
        "endChar": 29
      },
      "revId": "3ccfcfece79aa61b60682d17f4503f76febb914f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6c13f0f8_7dcf910a",
        "filename": "src/cmd/go/internal/cache/prog.go",
        "patchSetId": 8
      },
      "lineNbr": 330,
      "author": {
        "id": 5065
      },
      "writtenOn": "2023-05-24T03:12:48Z",
      "side": 1,
      "message": "I try not to touch unrelated code in changes that are already too big if it\u0027s far enough away.\n\nIf I were touching these lines, sure.",
      "parentUuid": "0f60e40a_68889f49",
      "range": {
        "startLine": 330,
        "startChar": 27,
        "endLine": 330,
        "endChar": 29
      },
      "revId": "3ccfcfece79aa61b60682d17f4503f76febb914f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "49cc6b05_ad276750",
        "filename": "src/cmd/go/internal/cache/prog.go",
        "patchSetId": 8
      },
      "lineNbr": 330,
      "author": {
        "id": 5065
      },
      "writtenOn": "2023-05-24T03:31:52Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "6c13f0f8_7dcf910a",
      "range": {
        "startLine": 330,
        "startChar": 27,
        "endLine": 330,
        "endChar": 29
      },
      "revId": "3ccfcfece79aa61b60682d17f4503f76febb914f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c53c3871_4dd42b90",
        "filename": "src/cmd/go/internal/cache/prog.go",
        "patchSetId": 8
      },
      "lineNbr": 371,
      "author": {
        "id": 6365
      },
      "writtenOn": "2023-05-24T02:45:55Z",
      "side": 1,
      "message": "If we need to get an error back, name the method Flush instead of Close and pass in a `Context`?\n\nProbably `(*ProgCache).Close` itself should close the `stdin` pipe, wait for `readLoop` to reach `EOF`, and then call `c.cmd.Wait` to clean up the process.",
      "range": {
        "startLine": 371,
        "startChar": 29,
        "endLine": 371,
        "endChar": 96
      },
      "revId": "3ccfcfece79aa61b60682d17f4503f76febb914f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "64758557_f13808c1",
        "filename": "src/cmd/go/internal/cache/prog.go",
        "patchSetId": 8
      },
      "lineNbr": 371,
      "author": {
        "id": 5065
      },
      "writtenOn": "2023-05-24T03:11:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c53c3871_4dd42b90",
      "range": {
        "startLine": 371,
        "startChar": 29,
        "endLine": 371,
        "endChar": 96
      },
      "revId": "3ccfcfece79aa61b60682d17f4503f76febb914f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}