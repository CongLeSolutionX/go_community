{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "06680237_2a7a6e27",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-05-19T22:56:23Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003d3ccfcfec\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "3ccfcfece79aa61b60682d17f4503f76febb914f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2c8e3b94_fdf9b8e1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 5065
      },
      "writtenOn": "2023-05-19T22:56:37Z",
      "side": 1,
      "message": "PTAL; now with GOEXPERIMENT per the issue.",
      "revId": "3ccfcfece79aa61b60682d17f4503f76febb914f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2a9a668e_1d2fd5d2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-05-19T23:07:11Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "06680237_2a7a6e27",
      "tag": "autogenerated:trybots~happy",
      "revId": "3ccfcfece79aa61b60682d17f4503f76febb914f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "08ec9adc_b6ca3a6e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 5056
      },
      "writtenOn": "2023-05-23T21:41:25Z",
      "side": 1,
      "message": "Nice and simple.",
      "revId": "3ccfcfece79aa61b60682d17f4503f76febb914f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d80fbd23_4a43f8b3",
        "filename": "src/cmd/go/internal/cache/cache.go",
        "patchSetId": 8
      },
      "lineNbr": 475,
      "author": {
        "id": 5056
      },
      "writtenOn": "2023-05-23T21:41:25Z",
      "side": 1,
      "message": "Clever trick. I don\u0027t think I\u0027ve seen this before.",
      "revId": "3ccfcfece79aa61b60682d17f4503f76febb914f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "92e3f2a8_1d0429a0",
        "filename": "src/cmd/go/internal/cache/prog.go",
        "patchSetId": 8
      },
      "lineNbr": 138,
      "author": {
        "id": 5056
      },
      "writtenOn": "2023-05-23T21:41:25Z",
      "side": 1,
      "message": "panic(\"missing fuzzDirCache\")",
      "revId": "3ccfcfece79aa61b60682d17f4503f76febb914f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9339feb7_213f3285",
        "filename": "src/cmd/go/internal/cache/prog.go",
        "patchSetId": 8
      },
      "lineNbr": 142,
      "author": {
        "id": 5056
      },
      "writtenOn": "2023-05-23T21:41:25Z",
      "side": 1,
      "message": "Most of our programs use quoted.Split from cmd/internal/quoted for this. Let\u0027s use that here too.",
      "revId": "3ccfcfece79aa61b60682d17f4503f76febb914f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3982bb0a_a7488fca",
        "filename": "src/cmd/go/internal/cache/prog.go",
        "patchSetId": 8
      },
      "lineNbr": 243,
      "author": {
        "id": 5056
      },
      "writtenOn": "2023-05-23T21:41:25Z",
      "side": 1,
      "message": "I suggest having two separate locks here, never held at the same time: one for in-memory things like nextID/inFlight/outputFile never held for very long (the defer would have to relock+unlock), and then a separate one for serializing writes to the subprocess.\n\nDepending on the behavior of the subprocess there is a possibility of deadlock here if the write gets backed up waiting on the subprocess (while holding the lock) and the subprocess is in turn backed up waiting for the go command to process a large packet but it\u0027s stuck trying to acquire the lock in readLoop. We could define that the subprocess is \"well behaved\" and must never refuse to read a new message just because a previous write is blocked, but we could also easily avoid the failure mode here by having two locks.",
      "revId": "3ccfcfece79aa61b60682d17f4503f76febb914f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}