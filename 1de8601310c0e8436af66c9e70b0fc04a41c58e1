{
  "comments": [
    {
      "key": {
        "uuid": "d6874725_9addc850",
        "filename": "src/cmd/compile/internal/gc/inl.go",
        "patchSetId": 5
      },
      "lineNbr": 1067,
      "author": {
        "id": 5167
      },
      "writtenOn": "2018-12-18T20:21:31Z",
      "side": 1,
      "message": "After SSA-ification, does anything keep the inlmark in the \"right\" place? (Is the right place even well-defined after the contents of the inlined function get reordered?)",
      "revId": "1de8601310c0e8436af66c9e70b0fc04a41c58e1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "48e62841_9c0395e7",
        "filename": "src/cmd/compile/internal/gc/inl.go",
        "patchSetId": 5
      },
      "lineNbr": 1067,
      "author": {
        "id": 5200
      },
      "writtenOn": "2018-12-28T18:26:51Z",
      "side": 1,
      "message": "The inlmark takes a store argument, so it at least occurs at the memory state that was current at the time of the call. It won\u0027t necessarily be a hard line between instructions of the caller and of the callee (non-memory instructions, and memory-using-but-not-producing instructions could be reordered with the inline mark).\n\nBeing a hard line between caller and callee instructions isn\u0027t necessary. The instruction could be anywhere in the function and still work.  All it has to have is the right position information.",
      "parentUuid": "d6874725_9addc850",
      "revId": "1de8601310c0e8436af66c9e70b0fc04a41c58e1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7c92052b_196faa1a",
        "filename": "src/cmd/internal/obj/link.go",
        "patchSetId": 5
      },
      "lineNbr": 417,
      "author": {
        "id": 7061
      },
      "writtenOn": "2018-12-12T03:02:02Z",
      "side": 1,
      "message": "I\u0027m having a little trouble parsing this comment.",
      "range": {
        "startLine": 417,
        "startChar": 13,
        "endLine": 417,
        "endChar": 60
      },
      "revId": "1de8601310c0e8436af66c9e70b0fc04a41c58e1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5bd958d0_6ecc1454",
        "filename": "src/cmd/internal/obj/link.go",
        "patchSetId": 5
      },
      "lineNbr": 417,
      "author": {
        "id": 5200
      },
      "writtenOn": "2018-12-28T18:14:16Z",
      "side": 1,
      "message": "I\u0027ve expanded it a bit.",
      "parentUuid": "7c92052b_196faa1a",
      "range": {
        "startLine": 417,
        "startChar": 13,
        "endLine": 417,
        "endChar": 60
      },
      "revId": "1de8601310c0e8436af66c9e70b0fc04a41c58e1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b3ae41f9_198dd72b",
        "filename": "src/cmd/link/internal/sym/symbol.go",
        "patchSetId": 5
      },
      "lineNbr": 518,
      "author": {
        "id": 7061
      },
      "writtenOn": "2018-12-12T03:02:02Z",
      "side": 1,
      "message": "Is this an actual PC? It might not fit in (signed) 32 bits, right?",
      "range": {
        "startLine": 518,
        "startChar": 21,
        "endLine": 518,
        "endChar": 23
      },
      "revId": "1de8601310c0e8436af66c9e70b0fc04a41c58e1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0dc75e8b_03ffcef4",
        "filename": "src/cmd/link/internal/sym/symbol.go",
        "patchSetId": 5
      },
      "lineNbr": 518,
      "author": {
        "id": 5200
      },
      "writtenOn": "2018-12-28T18:14:16Z",
      "side": 1,
      "message": "It\u0027s a relative PC to the start of the function, so it should always fit. I\u0027ll update the comment.",
      "parentUuid": "b3ae41f9_198dd72b",
      "range": {
        "startLine": 518,
        "startChar": 21,
        "endLine": 518,
        "endChar": 23
      },
      "revId": "1de8601310c0e8436af66c9e70b0fc04a41c58e1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "49253d96_51f7ec92",
        "filename": "src/runtime/pprof/protomem_test.go",
        "patchSetId": 5
      },
      "lineNbr": 17,
      "author": {
        "id": 5167
      },
      "writtenOn": "2018-12-18T20:16:18Z",
      "side": 1,
      "message": "How does this change relate to the addition of inlining PCs?",
      "revId": "1de8601310c0e8436af66c9e70b0fc04a41c58e1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1f7a23cb_706fec47",
        "filename": "src/runtime/pprof/protomem_test.go",
        "patchSetId": 5
      },
      "lineNbr": 17,
      "author": {
        "id": 5200
      },
      "writtenOn": "2018-12-28T18:26:51Z",
      "side": 1,
      "message": "This test is directly manufacturing what the runtime would get from runtime.callers.\nruntime.callers changed the semantics of the values in the []uintptr to be PCs of the call instructions (or the new inlmarks) instead of the PCs just after the call instructions.",
      "parentUuid": "49253d96_51f7ec92",
      "revId": "1de8601310c0e8436af66c9e70b0fc04a41c58e1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "25603e26_9148cc3d",
        "filename": "src/runtime/symtab.go",
        "patchSetId": 5
      },
      "lineNbr": 69,
      "author": {
        "id": 5167
      },
      "writtenOn": "2018-12-18T20:16:18Z",
      "side": 1,
      "message": "Document the reason for this loop. IIUC, you need a one frame \"lookahead\" to figure out the \"more\" result.",
      "revId": "1de8601310c0e8436af66c9e70b0fc04a41c58e1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "22ef8d06_67b6c783",
        "filename": "src/runtime/symtab.go",
        "patchSetId": 5
      },
      "lineNbr": 69,
      "author": {
        "id": 5200
      },
      "writtenOn": "2018-12-28T18:26:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "25603e26_9148cc3d",
      "revId": "1de8601310c0e8436af66c9e70b0fc04a41c58e1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "15c76f41_0272cac8",
        "filename": "src/runtime/symtab.go",
        "patchSetId": 5
      },
      "lineNbr": 111,
      "author": {
        "id": 5167
      },
      "writtenOn": "2018-12-18T20:16:18Z",
      "side": 1,
      "message": "Maybe a comment explaining what this is doing. I assume you\u0027re just avoiding slice allocation in the common case.",
      "revId": "1de8601310c0e8436af66c9e70b0fc04a41c58e1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2547f0a9_e852fc4c",
        "filename": "src/runtime/symtab.go",
        "patchSetId": 5
      },
      "lineNbr": 111,
      "author": {
        "id": 5200
      },
      "writtenOn": "2018-12-28T18:26:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "15c76f41_0272cac8",
      "revId": "1de8601310c0e8436af66c9e70b0fc04a41c58e1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}