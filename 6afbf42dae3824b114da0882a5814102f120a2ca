{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "89bafa39_55b9bf18",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-05-09T10:39:42Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003d6afbf42d",
      "tag": "autogenerated:trybots~beginning",
      "revId": "6afbf42dae3824b114da0882a5814102f120a2ca",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d1b88c9e_eb0b3294",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-05-09T10:52:03Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "89bafa39_55b9bf18",
      "tag": "autogenerated:trybots~happy",
      "revId": "6afbf42dae3824b114da0882a5814102f120a2ca",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "efa4b030_55b63ce5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 5440
      },
      "writtenOn": "2022-05-09T18:50:11Z",
      "side": 1,
      "message": "Thanks, looking better.",
      "revId": "6afbf42dae3824b114da0882a5814102f120a2ca",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bdb1d35e_e5627af6",
        "filename": "src/cmd/compile/internal/typecheck/typecheck.go",
        "patchSetId": 8
      },
      "lineNbr": 875,
      "author": {
        "id": 5440
      },
      "writtenOn": "2022-05-09T18:50:11Z",
      "side": 1,
      "message": "nit: This check is fine, but redundant. I think it\u0027s okay to remove for simplicity.",
      "range": {
        "startLine": 873,
        "startChar": 0,
        "endLine": 875,
        "endChar": 2
      },
      "revId": "6afbf42dae3824b114da0882a5814102f120a2ca",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dd98aeed_e7789669",
        "filename": "src/cmd/compile/internal/typecheck/typecheck.go",
        "patchSetId": 8
      },
      "lineNbr": 875,
      "author": {
        "id": 14665
      },
      "writtenOn": "2022-05-09T19:02:25Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bdb1d35e_e5627af6",
      "range": {
        "startLine": 873,
        "startChar": 0,
        "endLine": 875,
        "endChar": 2
      },
      "revId": "6afbf42dae3824b114da0882a5814102f120a2ca",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ee299660_10fec569",
        "filename": "src/cmd/compile/internal/typecheck/typecheck.go",
        "patchSetId": 8
      },
      "lineNbr": 884,
      "author": {
        "id": 5440
      },
      "writtenOn": "2022-05-09T18:50:11Z",
      "side": 1,
      "message": "This switch only checks that the top-level callee expression has no ordered side effects, but we care if any subexpression have ordered side effects too. E.g., `f()[0](g())` needs to be rewritten into `tmp0 :\u003d f()[0]; tmp1, tmp2 :\u003d g(); tmp0(tmp1, tmp2)` even though `x[0]` has no side-effects by itself, because the `f()` call needs to still happen before `g()`. (I recommend adding a test case like this too.)\n\nThis is why I suggested `if !anyCallOrChan(*np)` previously. I still suggest that.",
      "revId": "6afbf42dae3824b114da0882a5814102f120a2ca",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "82c0d319_3ee648a8",
        "filename": "src/cmd/compile/internal/typecheck/typecheck.go",
        "patchSetId": 8
      },
      "lineNbr": 884,
      "author": {
        "id": 14665
      },
      "writtenOn": "2022-05-09T18:54:29Z",
      "side": 1,
      "message": "Ah, I see.\n\nThe problem with `anyCallOrChan` is that it also return true for something like `new(int)`, so the expression will be rewritten to `tmp :\u003d new; tmp(int)`, and causing more allocation: https://storage.googleapis.com/go-build-log/5af862d2/linux-amd64_6a0fd87c.log",
      "parentUuid": "ee299660_10fec569",
      "revId": "6afbf42dae3824b114da0882a5814102f120a2ca",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "22648967_f3ce2e1b",
        "filename": "src/cmd/compile/internal/typecheck/typecheck.go",
        "patchSetId": 8
      },
      "lineNbr": 884,
      "author": {
        "id": 14665
      },
      "writtenOn": "2022-05-09T19:01:06Z",
      "side": 1,
      "message": "Maybe something like:\n\n```\nif !ir.Any((*np), func(node ir.Node) bool {\n\t\tswitch (*np).Op() {\n\t\tcase ir.OCALL, ir.OCALLFUNC, ir.OCALLINTER, ir.OCALLMETH, ir.ORECV:\n\t\t\treturn true\n\t\tdefault:\n\t\t\treturn false\n\t\t}\n\t}) {\n\t\treturn // callee expression (or receiver argument) has no side effects\n\t}\n```\n\nshould work?",
      "parentUuid": "82c0d319_3ee648a8",
      "revId": "6afbf42dae3824b114da0882a5814102f120a2ca",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1506b24f_58693ae1",
        "filename": "src/cmd/compile/internal/typecheck/typecheck.go",
        "patchSetId": 8
      },
      "lineNbr": 884,
      "author": {
        "id": 5440
      },
      "writtenOn": "2022-05-09T19:30:35Z",
      "side": 1,
      "message": "I see. That ir.Any check is better, but it still needs to catch most other builtins, because they have side effects or can observe them. E.g., `append` can mutate a slice, and `len` can observe whether an element was inserted into a map.\n\nHow about restore your anyCallOrChan/isCallOrChan refactoring from earlier, and then here do something like:\n\n```\n// Check for side effects in the callee expression.\n// We explicitly special case new(T) though, because it doesn\u0027t have\n// observable side effects, and keeping it in place allows better escape analysis.\nif ir.Any(*np, func(n ir.Node) bool { return n.Op() !\u003d ir.ONEW \u0026\u0026 isCallOrChan(n) }) { ... }\n```",
      "parentUuid": "22648967_f3ce2e1b",
      "revId": "6afbf42dae3824b114da0882a5814102f120a2ca",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "274c4fc8_1ef84122",
        "filename": "src/cmd/compile/internal/typecheck/typecheck.go",
        "patchSetId": 8
      },
      "lineNbr": 884,
      "author": {
        "id": 14665
      },
      "writtenOn": "2022-05-09T19:42:18Z",
      "side": 1,
      "message": "SGTM!\n\nThe only problem left is with your proposed change above, fixedbugs/issue49143.go is currently failing. Seems that we need to exclude `OFUNCINST`, too?\n\nOr maybe we can do nothing if call had zero args.",
      "parentUuid": "1506b24f_58693ae1",
      "revId": "6afbf42dae3824b114da0882a5814102f120a2ca",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e0e88884_c05a5880",
        "filename": "src/cmd/compile/internal/typecheck/typecheck.go",
        "patchSetId": 8
      },
      "lineNbr": 884,
      "author": {
        "id": 5440
      },
      "writtenOn": "2022-05-09T20:11:42Z",
      "side": 1,
      "message": "Thanks, new code looks good, but I think I\u0027m not following the issue with OFUNCINST. Why do we need to explicitly check OFUNCINST? It\u0027s not currently matched by callOrChan, and I can\u0027t think of any cases where a function instantiation would include a call or receive expression. I would expect lines L874-L876 to be redundant with L886-L888.\n\nCan you show me the IR dump for the function in question that\u0027s causing problems and fixed by adding L874-L876?\n\n(I want to make sure if the check is needed, that we have a sufficiently clear comment explaining why.)\n\n\u003e Or maybe we can do nothing if call had zero args.\n\nThat sounds okay. But I think if we\u0027re going to do it conditionally, we might as well only rewrite the callee expression when we\u0027re rewriting multi-value calls too (i.e., when RewriteMultiValueCall needs to rewrite the IR).",
      "parentUuid": "274c4fc8_1ef84122",
      "revId": "6afbf42dae3824b114da0882a5814102f120a2ca",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "86eb3027_9255f54d",
        "filename": "src/cmd/compile/internal/typecheck/typecheck.go",
        "patchSetId": 8
      },
      "lineNbr": 884,
      "author": {
        "id": 14665
      },
      "writtenOn": "2022-05-10T01:46:33Z",
      "side": 1,
      "message": "The test failed:\n\n```\n/home/cuonglm/sources/go/test/fixedbugs/issue49143.dir/c.go:14:14: internal compiler error: label missing tag\n```\n\nThe IR dump:\n\n```\n.   CALL error tc(1) # c.go:14:28\n.   .   FUNCINST FUNC-func() error tc(1) # c.go:14:23\n.   .   .   METHVALUE c.Load FUNC-method(*a.Loader[test/a.Loader.Load.K,test/a.Loader.Load.R]) func() error tc(1) # c.go:14:23\n.   .   .   .   DOTPTR c.Loader PTR-*a.Loader[int,int] tc(1) # c.go:14:16\n.   .   .   .   .   CALLFUNC PTR-*b.Loaders tc(1) # c.go:14:14\n.   .   .   .   .   .   NAME-b.NewLoaders Class:PFUNC Offset:0 FUNC-func() *b.Loaders tc(1) # b.go:14:6\n.   .   FUNCINST-Targs\n.   .   .   TYPE int Offset:0 type int\n.   .   .   TYPE int Offset:0 type int\n```",
      "parentUuid": "e0e88884_c05a5880",
      "revId": "6afbf42dae3824b114da0882a5814102f120a2ca",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}