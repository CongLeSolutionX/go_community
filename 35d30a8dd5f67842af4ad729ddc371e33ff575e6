{
  "comments": [
    {
      "key": {
        "uuid": "d00a915c_3b302227",
        "filename": "src/cmd/compile/internal/gc/cgen.go",
        "patchSetId": 1
      },
      "lineNbr": 813,
      "author": {
        "id": 5206
      },
      "writtenOn": "2015-10-08T15:39:37Z",
      "side": 1,
      "message": "FixedFrameSize ?",
      "revId": "35d30a8dd5f67842af4ad729ddc371e33ff575e6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d0bd31e7_9a13e9de",
        "filename": "src/cmd/compile/internal/gc/cgen.go",
        "patchSetId": 1
      },
      "lineNbr": 813,
      "author": {
        "id": 5153
      },
      "writtenOn": "2015-10-08T21:10:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d00a915c_3b302227",
      "revId": "35d30a8dd5f67842af4ad729ddc371e33ff575e6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d00a915c_9b25cee7",
        "filename": "src/cmd/internal/obj/link.go",
        "patchSetId": 1
      },
      "lineNbr": 526,
      "author": {
        "id": 5206
      },
      "writtenOn": "2015-10-08T15:39:37Z",
      "side": 1,
      "message": "Please fill in TODO.",
      "revId": "35d30a8dd5f67842af4ad729ddc371e33ff575e6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d0bd31e7_7a0935a9",
        "filename": "src/cmd/internal/obj/link.go",
        "patchSetId": 1
      },
      "lineNbr": 526,
      "author": {
        "id": 5153
      },
      "writtenOn": "2015-10-08T21:10:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d00a915c_9b25cee7",
      "revId": "35d30a8dd5f67842af4ad729ddc371e33ff575e6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d00a915c_7b2aaab4",
        "filename": "src/cmd/internal/obj/ppc64/obj9.go",
        "patchSetId": 1
      },
      "lineNbr": 317,
      "author": {
        "id": 5206
      },
      "writtenOn": "2015-10-08T15:39:37Z",
      "side": 1,
      "message": "Checking textstksiz \u003c 0 here changes this code.  Is this a bug fix?",
      "revId": "35d30a8dd5f67842af4ad729ddc371e33ff575e6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d0bd31e7_5a06719b",
        "filename": "src/cmd/internal/obj/ppc64/obj9.go",
        "patchSetId": 1
      },
      "lineNbr": 317,
      "author": {
        "id": 5153
      },
      "writtenOn": "2015-10-08T21:10:13Z",
      "side": 1,
      "message": "This code confused me for a long time. What it is all about is the way you can say:\n\nTEXT foo(SB),$-8\n\nto prevent a stack frame being set up at all. As the default stack frame is 8 bytes, saying you have \"-8\" bytes of local variables cancels that out and this code notices and uses that to suppress the SP manipulations. I decided I didn\u0027t want to change all the $-8\u0027s to $-FIXED_FRAME\u0027s so I\u0027ve changed this code to just take a negative local variable size to suppress the frame setup. This does change behaviour though -- it means you could write TEXT foo(SB),$-1 or $-12234532 and have them behave the same. Options that spring to mind include: a) deciding this is fine and we don\u0027t care, b) checking for textstksiz \u003d\u003d -8 only here, or c) changing the assembly to say $-FIXED_FRAME where appropriate and leave this code alone. \n\nI don\u0027t really have an opinion on which I favour. Maybe b)?",
      "parentUuid": "d00a915c_7b2aaab4",
      "revId": "35d30a8dd5f67842af4ad729ddc371e33ff575e6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d00a915c_91f64f02",
        "filename": "src/cmd/internal/obj/ppc64/obj9.go",
        "patchSetId": 1
      },
      "lineNbr": 317,
      "author": {
        "id": 5206
      },
      "writtenOn": "2015-10-08T21:55:29Z",
      "side": 1,
      "message": "OK, well, that\u0027s perplexing.  The existing code is perplexing and the new code is perplexing.  Are there any docs on this?\n\nThis change doesn\u0027t seem right to me.  At least the -8 makes a certain weird kind of sense.  A cleaner approach might be another flag NOFRAME.",
      "parentUuid": "d0bd31e7_5a06719b",
      "revId": "35d30a8dd5f67842af4ad729ddc371e33ff575e6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d0bd31e7_7ab7f52d",
        "filename": "src/cmd/internal/obj/ppc64/obj9.go",
        "patchSetId": 1
      },
      "lineNbr": 317,
      "author": {
        "id": 5153
      },
      "writtenOn": "2015-10-08T22:06:58Z",
      "side": 1,
      "message": "The closest thing to documentation for this that I can find is this comment in the /ARM/ section of asm.html: \"When defining a TEXT, specifying frame size $-4 tells the linker that this is a leaf function that does not need to save LR on entry.\"\n\nIn the vein of this sort of thing being very confusing, there are some functions that declare that they take an extremely implausible number of argument bytes, like:\n\n// memequal_varlen(a, b unsafe.Pointer) bool\nTEXT runtimeÂ·memequal_varlen(SB),NOSPLIT,$40-17\n\nI don\u0027t know why I mention this here :-) I\u0027ll email golang-dev and austin and minux I guess.\n\nDo you think I should also ask golang-dev about this issue too? I think I also prefer the idea of a NOFRAME flag.",
      "parentUuid": "d00a915c_91f64f02",
      "revId": "35d30a8dd5f67842af4ad729ddc371e33ff575e6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}