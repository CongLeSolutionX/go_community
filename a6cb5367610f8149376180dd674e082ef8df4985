{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "df449369_717eec1c",
        "filename": "src/cmd/compile/internal/reflectdata/reflect.go",
        "patchSetId": 2
      },
      "lineNbr": 362,
      "author": {
        "id": 5200
      },
      "writtenOn": "2021-09-21T17:11:22Z",
      "side": 1,
      "message": "I\u0027m confused about this statement. What wrapper functions are you talking about? The ones I\u0027m familiar with are on fully instantiated non-interface generic types. Which take normal rcvr/args and redirect the call to functions with dict/rcvr/args.\n\nHow is the shape type passed as an argument?",
      "range": {
        "startLine": 361,
        "startChar": 62,
        "endLine": 362,
        "endChar": 15
      },
      "revId": "a6cb5367610f8149376180dd674e082ef8df4985",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1a98c226_63610845",
        "filename": "src/cmd/compile/internal/reflectdata/reflect.go",
        "patchSetId": 2
      },
      "lineNbr": 362,
      "author": {
        "id": 28783
      },
      "writtenOn": "2021-09-21T17:52:38Z",
      "side": 1,
      "message": "In g.getInstantiation() in stencil.go, in the method case, we are creating a _function_ which has a method-like name (created by MakeFuncInstName), and has a dictionary and shape receiver as the first two args.  That instantiated function is the helper for cases where we are calling the generic method (either for a fully-instantiated type or inside another generic function/method).  \n\nOn the other hand, consider a shape type that we call imethods on.  We don\u0027t need to create methods on it, but if we do, we will create a method using MakeFuncInstName() (in methodwrapper), so it will actually be the same name (and a real method).  So, we definitely don\u0027t want to create this method, since it is not useful and will cause confusion (and is the reason for the bug that is specifically fixed by this change).  I assume this confusion is part of the reason why you needed to avoid this methods in your linker bug CL.\n\nWe could change the naming of the helper function, but we don\u0027t have to, as long as we don\u0027t create the shape methods.",
      "parentUuid": "df449369_717eec1c",
      "range": {
        "startLine": 361,
        "startChar": 62,
        "endLine": 362,
        "endChar": 15
      },
      "revId": "a6cb5367610f8149376180dd674e082ef8df4985",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d9b8c403_94bf42ef",
        "filename": "src/cmd/compile/internal/reflectdata/reflect.go",
        "patchSetId": 2
      },
      "lineNbr": 362,
      "author": {
        "id": 5200
      },
      "writtenOn": "2021-09-21T19:25:49Z",
      "side": 1,
      "message": "Ok, so I wouldn\u0027t consider those helper functions. Those contain the actual body of the method.\n\nAlso I got confused by \"and the shape type\", expecting that the *type* was the argument. I think you mean \"and the receiver (of shape type)\" or something like that.",
      "parentUuid": "1a98c226_63610845",
      "range": {
        "startLine": 361,
        "startChar": 62,
        "endLine": 362,
        "endChar": 15
      },
      "revId": "a6cb5367610f8149376180dd674e082ef8df4985",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ba1c5199_d7bdebcd",
        "filename": "src/cmd/compile/internal/reflectdata/reflect.go",
        "patchSetId": 2
      },
      "lineNbr": 362,
      "author": {
        "id": 28783
      },
      "writtenOn": "2021-09-21T20:21:35Z",
      "side": 1,
      "message": "OK, thanks, I update the comment in line with your suggestions.",
      "parentUuid": "d9b8c403_94bf42ef",
      "range": {
        "startLine": 361,
        "startChar": 62,
        "endLine": 362,
        "endChar": 15
      },
      "revId": "a6cb5367610f8149376180dd674e082ef8df4985",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}