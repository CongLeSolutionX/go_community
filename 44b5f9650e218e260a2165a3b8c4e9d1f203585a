{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "f8cc834d_0cdefc11",
        "filename": "src/runtime/heapdump.go",
        "patchSetId": 10
      },
      "lineNbr": 547,
      "author": {
        "id": 25391
      },
      "writtenOn": "2020-10-14T21:13:40Z",
      "side": 1,
      "message": "UGH ok so as it turns out this gets stack allocated (desirable!) but unfortunately it\u0027s large enough that in addition to all the other stack frames generated by this chain of functions (starting from the closure in runtime_debug_WriteHeapDump) we actually blow the system stack, it seems (morestack gets called on g0).\n\nI can try making this a global? mdump stops the world...",
      "range": {
        "startLine": 547,
        "startChar": 1,
        "endLine": 547,
        "endChar": 15
      },
      "revId": "44b5f9650e218e260a2165a3b8c4e9d1f203585a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5e162cd4_5140a091",
        "filename": "src/runtime/heapdump.go",
        "patchSetId": 10
      },
      "lineNbr": 547,
      "author": {
        "id": 25391
      },
      "writtenOn": "2020-10-14T21:18:29Z",
      "side": 1,
      "message": "ah, or it could be just the call to readmemstats_m, which actually goes pretty deep. The failure didn\u0027t give me very many details.\n\nI can call it higher up instead and funnel down the MemStats pointer.",
      "parentUuid": "f8cc834d_0cdefc11",
      "range": {
        "startLine": 547,
        "startChar": 1,
        "endLine": 547,
        "endChar": 15
      },
      "revId": "44b5f9650e218e260a2165a3b8c4e9d1f203585a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}