{
  "comments": [
    {
      "key": {
        "uuid": "e45db351_5d7f35de",
        "filename": "src/cmd/go/internal/cache/cache.go",
        "patchSetId": 1
      },
      "lineNbr": 58,
      "author": {
        "id": 9850
      },
      "writtenOn": "2017-10-05T08:54:53Z",
      "side": 1,
      "message": "Mkdir should be enough here.",
      "range": {
        "startLine": 58,
        "startChar": 15,
        "endLine": 58,
        "endChar": 23
      },
      "revId": "e8286374226195d1bf338b3e047409839a86e783",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d0bcac7b_1c52816a",
        "filename": "src/cmd/go/internal/cache/cache.go",
        "patchSetId": 1
      },
      "lineNbr": 75,
      "author": {
        "id": 9850
      },
      "writtenOn": "2017-10-04T23:30:31Z",
      "side": 1,
      "message": "Consistently it would start with 2 + 1.",
      "range": {
        "startLine": 75,
        "startChar": 13,
        "endLine": 75,
        "endChar": 14
      },
      "revId": "e8286374226195d1bf338b3e047409839a86e783",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "764f1e9c_d566c728",
        "filename": "src/cmd/go/internal/cache/cache.go",
        "patchSetId": 1
      },
      "lineNbr": 91,
      "author": {
        "id": 9850
      },
      "writtenOn": "2017-10-04T23:30:31Z",
      "side": 1,
      "message": "Why the +1? Could not infer that.",
      "range": {
        "startLine": 91,
        "startChar": 32,
        "endLine": 91,
        "endChar": 34
      },
      "revId": "e8286374226195d1bf338b3e047409839a86e783",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5bfb172b_4b43042c",
        "filename": "src/cmd/go/internal/cache/cache.go",
        "patchSetId": 1
      },
      "lineNbr": 91,
      "author": {
        "id": 9850
      },
      "writtenOn": "2017-10-05T08:54:53Z",
      "side": 1,
      "message": "Got it. You use this to check that there is only the action entry in the file f and nothing more.",
      "parentUuid": "764f1e9c_d566c728",
      "range": {
        "startLine": 91,
        "startChar": 32,
        "endLine": 91,
        "endChar": 34
      },
      "revId": "e8286374226195d1bf338b3e047409839a86e783",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "87402c0a_e1754897",
        "filename": "src/cmd/go/internal/cache/cache.go",
        "patchSetId": 1
      },
      "lineNbr": 98,
      "author": {
        "id": 9850
      },
      "writtenOn": "2017-10-05T08:54:53Z",
      "side": 1,
      "message": "This part could be way nicer using regexp:\nhttps://gist.github.com/stemar94/2e757a26ed97dd201279112c18203da7",
      "range": {
        "startLine": 95,
        "startChar": 1,
        "endLine": 98,
        "endChar": 91
      },
      "revId": "e8286374226195d1bf338b3e047409839a86e783",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "40e875dd_c41a9acb",
        "filename": "src/cmd/go/internal/cache/cache.go",
        "patchSetId": 1
      },
      "lineNbr": 99,
      "author": {
        "id": 9850
      },
      "writtenOn": "2017-10-04T23:30:31Z",
      "side": 1,
      "message": "HASHSIZE",
      "range": {
        "startLine": 99,
        "startChar": 10,
        "endLine": 99,
        "endChar": 12
      },
      "revId": "e8286374226195d1bf338b3e047409839a86e783",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "db35ab84_8ba1acb8",
        "filename": "src/cmd/go/internal/cache/cache.go",
        "patchSetId": 1
      },
      "lineNbr": 99,
      "author": {
        "id": 9850
      },
      "writtenOn": "2017-10-05T08:54:53Z",
      "side": 1,
      "message": "HashSize, sry for shouting",
      "parentUuid": "40e875dd_c41a9acb",
      "range": {
        "startLine": 99,
        "startChar": 10,
        "endLine": 99,
        "endChar": 12
      },
      "revId": "e8286374226195d1bf338b3e047409839a86e783",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "787a36cc_d851c9da",
        "filename": "src/cmd/go/internal/cache/cache.go",
        "patchSetId": 1
      },
      "lineNbr": 152,
      "author": {
        "id": 9850
      },
      "writtenOn": "2017-10-05T08:54:53Z",
      "side": 1,
      "message": "This could be:\nvar out OutputID\nh.Sum(out[:])",
      "range": {
        "startLine": 150,
        "startChar": 1,
        "endLine": 152,
        "endChar": 18
      },
      "revId": "e8286374226195d1bf338b3e047409839a86e783",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f9be070a_bdceca18",
        "filename": "src/cmd/go/internal/cache/cache.go",
        "patchSetId": 1
      },
      "lineNbr": 169,
      "author": {
        "id": 5030
      },
      "writtenOn": "2017-10-05T12:55:47Z",
      "side": 1,
      "message": "I think trusting the size here will make it very hard for the cache to correct bad data.\n\nWhat about hashing the contents of the data file here, comparing to the output id, and only returning early if the content hash matches?",
      "revId": "e8286374226195d1bf338b3e047409839a86e783",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d7b7ab28_103cdcc7",
        "filename": "src/cmd/go/internal/cache/cache.go",
        "patchSetId": 1
      },
      "lineNbr": 187,
      "author": {
        "id": 9850
      },
      "writtenOn": "2017-10-04T23:30:31Z",
      "side": 1,
      "message": "This if only triggers for size 0? Then it would be redundant with the one below.",
      "range": {
        "startLine": 183,
        "startChar": 1,
        "endLine": 187,
        "endChar": 2
      },
      "revId": "e8286374226195d1bf338b3e047409839a86e783",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ba458608_6cd77e29",
        "filename": "src/cmd/go/internal/cache/cache.go",
        "patchSetId": 1
      },
      "lineNbr": 208,
      "author": {
        "id": 9850
      },
      "writtenOn": "2017-10-04T23:30:31Z",
      "side": 1,
      "message": "could use\nvar buf [1]byte",
      "range": {
        "startLine": 208,
        "startChar": 1,
        "endLine": 208,
        "endChar": 23
      },
      "revId": "e8286374226195d1bf338b3e047409839a86e783",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7809d53d_42b19717",
        "filename": "src/cmd/go/internal/cache/cache.go",
        "patchSetId": 1
      },
      "lineNbr": 214,
      "author": {
        "id": 5030
      },
      "writtenOn": "2017-10-05T12:55:47Z",
      "side": 1,
      "message": "Consider the scenario where copyFile is racing with another process.\n\nWhen os.Stat() is called, the other process is writing data but not yet done. So info.Size() \u003c size, and this process does not use O_TRUNC.\n\nThis process writes all but the last byte. Then it trips over this hash comparison here for some external reason and returns an error.\n\nNow this process has written bad bytes into the data file, but the other process has made the data file the correct length and written in the index file. So any future cache lookups will succeed, returning bad data.",
      "revId": "e8286374226195d1bf338b3e047409839a86e783",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    }
  ]
}