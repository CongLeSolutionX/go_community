{
  "comments": [
    {
      "key": {
        "uuid": "33c90d6f_725441b2",
        "filename": "src/cmd/compile/internal/gc/align.go",
        "patchSetId": 5
      },
      "lineNbr": 178,
      "author": {
        "id": 5440
      },
      "writtenOn": "2020-09-25T20:35:06Z",
      "side": 1,
      "message": "Rename to \"reportInvalidRecursiveType\".",
      "range": {
        "startLine": 178,
        "startChar": 5,
        "endLine": 178,
        "endChar": 21
      },
      "revId": "11ca96c3f09e9a1f50e340fbbf87394c304fb5a1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "db8f4cdf_44c58731",
        "filename": "src/cmd/compile/internal/gc/align.go",
        "patchSetId": 5
      },
      "lineNbr": 178,
      "author": {
        "id": 14665
      },
      "writtenOn": "2020-09-26T01:07:44Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "33c90d6f_725441b2",
      "range": {
        "startLine": 178,
        "startChar": 5,
        "endLine": 178,
        "endChar": 21
      },
      "revId": "11ca96c3f09e9a1f50e340fbbf87394c304fb5a1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ae6584f7_f6d84768",
        "filename": "src/cmd/compile/internal/gc/align.go",
        "patchSetId": 5
      },
      "lineNbr": 189,
      "author": {
        "id": 5440
      },
      "writtenOn": "2020-09-25T20:35:06Z",
      "side": 1,
      "message": "Are there test cases that make sure this is working as expected? E.g., I mentioned on Slack\n\n    type (a b; b c; c d; d c)\n\nbut I don\u0027t see anything like that in the test cases you had to update. (I didn\u0027t look too closely though, so maybe I missed one.)",
      "range": {
        "startLine": 187,
        "startChar": 0,
        "endLine": 189,
        "endChar": 3
      },
      "revId": "11ca96c3f09e9a1f50e340fbbf87394c304fb5a1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0f76798f_328cd6cf",
        "filename": "src/cmd/compile/internal/gc/align.go",
        "patchSetId": 5
      },
      "lineNbr": 189,
      "author": {
        "id": 14665
      },
      "writtenOn": "2020-09-26T01:07:44Z",
      "side": 1,
      "message": "Added this test case.",
      "parentUuid": "ae6584f7_f6d84768",
      "range": {
        "startLine": 187,
        "startChar": 0,
        "endLine": 189,
        "endChar": 3
      },
      "revId": "11ca96c3f09e9a1f50e340fbbf87394c304fb5a1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7cd4fb2f_d9cf0fe9",
        "filename": "src/cmd/compile/internal/gc/align.go",
        "patchSetId": 5
      },
      "lineNbr": 228,
      "author": {
        "id": 5440
      },
      "writtenOn": "2020-09-25T20:35:06Z",
      "side": 1,
      "message": "Push these into errRecursiveType.",
      "range": {
        "startLine": 227,
        "startChar": 0,
        "endLine": 228,
        "endChar": 63
      },
      "revId": "11ca96c3f09e9a1f50e340fbbf87394c304fb5a1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ac682452_f2017b80",
        "filename": "src/cmd/compile/internal/gc/align.go",
        "patchSetId": 5
      },
      "lineNbr": 228,
      "author": {
        "id": 14665
      },
      "writtenOn": "2020-09-26T01:07:44Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7cd4fb2f_d9cf0fe9",
      "range": {
        "startLine": 227,
        "startChar": 0,
        "endLine": 228,
        "endChar": 63
      },
      "revId": "11ca96c3f09e9a1f50e340fbbf87394c304fb5a1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a512aa8f_bfd0f7f9",
        "filename": "src/cmd/compile/internal/gc/align.go",
        "patchSetId": 5
      },
      "lineNbr": 228,
      "author": {
        "id": 5440
      },
      "writtenOn": "2020-09-26T02:19:57Z",
      "side": 1,
      "message": "By these I also meant thte skipDowidthForErrRecursive assignments.\n\nAnd now I\u0027m thinking the t.Broke() and t.SetBroke() calls belong there too.",
      "parentUuid": "ac682452_f2017b80",
      "range": {
        "startLine": 227,
        "startChar": 0,
        "endLine": 228,
        "endChar": 63
      },
      "revId": "11ca96c3f09e9a1f50e340fbbf87394c304fb5a1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0bd67271_af228be1",
        "filename": "src/cmd/compile/internal/gc/align.go",
        "patchSetId": 5
      },
      "lineNbr": 228,
      "author": {
        "id": 14665
      },
      "writtenOn": "2020-09-26T17:28:24Z",
      "side": 1,
      "message": "Ah ok, but sounds like we still need to keep t.Broke() and t.SetBroke() out of the function, because in case of TFORW, we pass nt.Type instead of t to reportInvalidRecursiveType",
      "parentUuid": "a512aa8f_bfd0f7f9",
      "range": {
        "startLine": 227,
        "startChar": 0,
        "endLine": 228,
        "endChar": 63
      },
      "revId": "11ca96c3f09e9a1f50e340fbbf87394c304fb5a1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cc9d24fd_3ccbb48d",
        "filename": "src/cmd/compile/internal/gc/align.go",
        "patchSetId": 5
      },
      "lineNbr": 348,
      "author": {
        "id": 5440
      },
      "writtenOn": "2020-09-25T20:35:06Z",
      "side": 1,
      "message": "I don\u0027t understand what\u0027s going on here. This needs a comment.\n\nAlso, justify why this case always needs to print the full stack. That seems suspicious to me.",
      "range": {
        "startLine": 348,
        "startChar": 12,
        "endLine": 348,
        "endChar": 42
      },
      "revId": "11ca96c3f09e9a1f50e340fbbf87394c304fb5a1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bf4be15b_6c268550",
        "filename": "src/cmd/compile/internal/gc/align.go",
        "patchSetId": 5
      },
      "lineNbr": 348,
      "author": {
        "id": 14665
      },
      "writtenOn": "2020-09-26T01:07:44Z",
      "side": 1,
      "message": "This is exactly for handling your test case above: type (a b; b c; c d; d c)\n\nWhen we reach d the second time in the last \"d c\", we report the error, but this time, the stack only contains \"d\". That\u0027s why there\u0027s a check that `if nt :\u003d asNode(t.Nod).Name.Param.Ntype; nt.Type.Broke()`, otherwise, we will report invalid recursive type for all type \"a\", \"b\", \"c\", and \"d\".\n\nCurrently, go1.15 also reports 4 errors this case.",
      "parentUuid": "cc9d24fd_3ccbb48d",
      "range": {
        "startLine": 348,
        "startChar": 12,
        "endLine": 348,
        "endChar": 42
      },
      "revId": "11ca96c3f09e9a1f50e340fbbf87394c304fb5a1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "57510855_153cb72f",
        "filename": "src/cmd/compile/internal/gc/align.go",
        "patchSetId": 5
      },
      "lineNbr": 348,
      "author": {
        "id": 5440
      },
      "writtenOn": "2020-09-26T02:19:57Z",
      "side": 1,
      "message": "Okay, I can believe this is necessary to suppress the duplicate error messages. It still needs a comment to that effect.\n\nAlso, do you have test cases that exercise each of these cases?\n\n1. !nt.Type.Broke()\n2. nt.Type.Broke() \u0026\u0026 nt.Type \u003d\u003d t\n3. nt.Type.Broke() \u0026\u0026 nt.Type !\u003d t\n\nIt\u0027s not immediately obvious to me when these cases happen.\n\nIt\u0027s also odd to me that we\u0027re printing errors here when nt.Type is already broken, but not when it\u0027s okay? Usually we only skip printing errors when we know an error has already been printed, so this seems backwards.",
      "parentUuid": "bf4be15b_6c268550",
      "range": {
        "startLine": 348,
        "startChar": 12,
        "endLine": 348,
        "endChar": 42
      },
      "revId": "11ca96c3f09e9a1f50e340fbbf87394c304fb5a1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "02f71a98_a938dc5a",
        "filename": "src/cmd/compile/internal/gc/align.go",
        "patchSetId": 5
      },
      "lineNbr": 348,
      "author": {
        "id": 14665
      },
      "writtenOn": "2020-09-26T17:28:24Z",
      "side": 1,
      "message": "\u003e Usually we only skip printing errors when we know an error has already been printed, so this seems backwards.\n\nDo you mean n.Diag() vs n.SetDiag()? As I understand, when type was marked as broken, it\u0027s not necessary to report the error right away. There\u0027re many places in the source code that we only set type as broken, then we check in other places and report error.\n\n\u003e Also, do you have test cases that exercise each of these cases?\n\nThe example `type (a b; b c; c d; d c)` contains (1) and (2) cases:\n\n1.!nt.Type.Broke():\n\ntype a b\n\nHere \"t\" is \"a\", \"nt.Type\" is \"b\", \"b\" is not broken, then \"a\" is set broken.\n\nSame for \"type b c\", \"b\" is set broken.\nSame for \"type c d\", \"c\" is set broken.\n\n\n3. nt.Type.Broke() \u0026\u0026 nt.Type !\u003d t\n\ntype d c\n\nHere \"t\" is \"d\", \"nt.Type\" is \"c\". \"c\" was marked as broken in (1).\n\nFor (2) case \"nt.Type.Broke() \u0026\u0026 nt.Type \u003d\u003d t\", we can add test case like:\n\ntype a b\ntype b c\ntype c d\ntype d d",
      "parentUuid": "57510855_153cb72f",
      "range": {
        "startLine": 348,
        "startChar": 12,
        "endLine": 348,
        "endChar": 42
      },
      "revId": "11ca96c3f09e9a1f50e340fbbf87394c304fb5a1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "be039107_85e89672",
        "filename": "src/cmd/compile/internal/gc/align.go",
        "patchSetId": 5
      },
      "lineNbr": 348,
      "author": {
        "id": 5440
      },
      "writtenOn": "2020-09-28T19:54:55Z",
      "side": 1,
      "message": "\u003e As I understand, when type was marked as broken, it\u0027s not necessary to report the error right away. There\u0027re many places in the source code that we only set type as broken, then we check in other places and report error.\n\nThe purpose of Type.Broke and Node.Diag are to indicate we\u0027ve already printed an error message related to that type/expression, so we don\u0027t need to print more error messages. A typical use is something like this code from typecheck.go:\n\n    if n.IsDDD() {\n        if !l.Type.Broke() {\n            yyerror(\"invalid use of ... in type conversion to %v\", l.Type)\n        }\n        n.SetDiag(true)\n    }\n\nThe point of the l.Type.Broke check here is that if we\u0027ve already reported an error about l.Type, then we can suppress the error about \"...\" because maybe it\u0027s related.\n\nTo my knowledge, we always use Broke/Diag to indicate that an error message has already been printed. I\u0027m not aware of any cases where we set them to indicate someone else needs to print an error message. If there is, we should probably fix that.",
      "parentUuid": "02f71a98_a938dc5a",
      "range": {
        "startLine": 348,
        "startChar": 12,
        "endLine": 348,
        "endChar": 42
      },
      "revId": "11ca96c3f09e9a1f50e340fbbf87394c304fb5a1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e7814f09_6d33d043",
        "filename": "src/cmd/compile/internal/gc/align.go",
        "patchSetId": 5
      },
      "lineNbr": 348,
      "author": {
        "id": 14665
      },
      "writtenOn": "2020-09-28T20:31:29Z",
      "side": 1,
      "message": "Ah right, maybe I made that statement wrongly. What I mean is like what we did in dcl.go, line 606. We mark struct t as broken, then later on line 614, we check if it’s broken or not then do checkwidth",
      "parentUuid": "be039107_85e89672",
      "range": {
        "startLine": 348,
        "startChar": 12,
        "endLine": 348,
        "endChar": 42
      },
      "revId": "11ca96c3f09e9a1f50e340fbbf87394c304fb5a1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b3901593_1c12c1c9",
        "filename": "src/cmd/compile/internal/gc/align.go",
        "patchSetId": 5
      },
      "lineNbr": 348,
      "author": {
        "id": 5440
      },
      "writtenOn": "2020-09-28T20:48:19Z",
      "side": 1,
      "message": "tostruct skips calling checkwidth there because (1) if t is broken, then we must have already printed a diagnostic about one of its fields\u0027 types; (2) we know checkwidth will fail because one of its fields\u0027 types is broken too; and (3) the checkwidth error message would be redundant with the earlier errors.",
      "parentUuid": "e7814f09_6d33d043",
      "range": {
        "startLine": 348,
        "startChar": 12,
        "endLine": 348,
        "endChar": 42
      },
      "revId": "11ca96c3f09e9a1f50e340fbbf87394c304fb5a1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7c232b54_a1268745",
        "filename": "src/cmd/compile/internal/gc/align.go",
        "patchSetId": 5
      },
      "lineNbr": 348,
      "author": {
        "id": 14665
      },
      "writtenOn": "2020-09-29T00:24:19Z",
      "side": 1,
      "message": "Ah, I got your point. Maybe we can switch to use nt.Type.Width \u003d\u003d -2 instead?",
      "parentUuid": "b3901593_1c12c1c9",
      "range": {
        "startLine": 348,
        "startChar": 12,
        "endLine": 348,
        "endChar": 42
      },
      "revId": "11ca96c3f09e9a1f50e340fbbf87394c304fb5a1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "76a758f2_cdc2ed44",
        "filename": "test/fixedbugs/issue23823.go",
        "patchSetId": 5
      },
      "lineNbr": 13,
      "author": {
        "id": 5440
      },
      "writtenOn": "2020-09-25T20:35:06Z",
      "side": 1,
      "message": "This seems bad, IMO.\n\nIt looks like go/types just omits this mention (\"I2 refers to I2\"). I\u0027d rather be consistent with that behavior than print a misleading type. (\"interface {}\" is a different type than \"I1\" or \"interface { I2 }\").",
      "revId": "11ca96c3f09e9a1f50e340fbbf87394c304fb5a1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "17e75e35_463710bf",
        "filename": "test/fixedbugs/issue23823.go",
        "patchSetId": 5
      },
      "lineNbr": 13,
      "author": {
        "id": 14665
      },
      "writtenOn": "2020-09-26T01:07:44Z",
      "side": 1,
      "message": "gotype reports that:\n\n../test/fixedbugs/issue23823.go:14:6: illegal cycle in declaration of I2\n../test/fixedbugs/issue23823.go:14:6: \tI2 refers to\n../test/fixedbugs/issue23823.go:9:6: \tI1 refers to\n../test/fixedbugs/issue23823.go:14:6: \tI2\n\nThe issue with us is we don\u0027t create new type for alias (I1), so the underlying type is used. That the same issue that we can\u0027t use alias name in error reports involved alias type in current implementation.",
      "parentUuid": "76a758f2_cdc2ed44",
      "revId": "11ca96c3f09e9a1f50e340fbbf87394c304fb5a1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5a1f6094_1da11003",
        "filename": "test/fixedbugs/issue23823.go",
        "patchSetId": 5
      },
      "lineNbr": 13,
      "author": {
        "id": 5440
      },
      "writtenOn": "2020-09-26T02:19:57Z",
      "side": 1,
      "message": "Odd, that\u0027s not what I see:\n\n```\n$ gotype test/fixedbugs/issue23823.go\ntest/fixedbugs/issue23823.go:13:6: illegal cycle in declaration of I2\ntest/fixedbugs/issue23823.go:13:6: \tI2 refers to\ntest/fixedbugs/issue23823.go:13:6: \tI2\n```\n\nIt\u0027s certainly preferable to include I1, but I\u0027m wondering why we\u0027re getting different behavior here.",
      "parentUuid": "17e75e35_463710bf",
      "revId": "11ca96c3f09e9a1f50e340fbbf87394c304fb5a1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f379ff95_e9d4cf65",
        "filename": "test/fixedbugs/issue23823.go",
        "patchSetId": 5
      },
      "lineNbr": 13,
      "author": {
        "id": 14665
      },
      "writtenOn": "2020-09-26T17:28:24Z",
      "side": 1,
      "message": "Hmm, sounds like I used old version of gotype, after running:\n\nGO111MODULES\u003doff go1.15.2 get golang.org/x/tools/cmd/gotype\n\nI now get the same error as you.",
      "parentUuid": "5a1f6094_1da11003",
      "revId": "11ca96c3f09e9a1f50e340fbbf87394c304fb5a1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cf99097a_2a697c4a",
        "filename": "test/fixedbugs/issue23823.go",
        "patchSetId": 5
      },
      "lineNbr": 13,
      "author": {
        "id": 14665
      },
      "writtenOn": "2020-09-28T19:36:13Z",
      "side": 1,
      "message": "I filled https://github.com/golang/go/issues/41669",
      "parentUuid": "f379ff95_e9d4cf65",
      "revId": "11ca96c3f09e9a1f50e340fbbf87394c304fb5a1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    }
  ]
}