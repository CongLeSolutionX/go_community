{
  "comments": [
    {
      "key": {
        "uuid": "86336cf4_4f99b17a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 5167
      },
      "writtenOn": "2015-03-16T16:33:56Z",
      "side": 1,
      "message": "I suspect this isn\u0027t the last time someone will read this commit message, so I\u0027d like it to be crystal clear on what\u0027s going on, what the problem is, and what the fix is. How about this:\n\nThe GC assumes that there will be no asynchronous write barriers when\nthe world is stopped. This keeps the synchronization between write\nbarriers and the GC simple. However, currently, there are a few places\nin runtime code where this assumption does not hold.\n\nThe GC stops the world by collecting all Ps, which stops all user Go\ncode, but small parts of the runtime can run without a P. For example,\nthe code that releases a P must still deschedule its G onto a runnable\nqueue before stopping. Similarly, when a G returns from a long-running\nsyscall, it must run code to reacquire a P.\n\nCurrently, this code can contain write barriers. This can lead to the\nGC collecting reachable objects if something like the following\nsequence of events happens:\n\n1. GC stops the world by collecting all Ps.\n\n2. G #1 returns from a syscall (for example), tries to install a\npointer to object X, and calls greyobject on X.\n\n3. greyobject on G #1 marks X, but does not yet add it to a write\nbuffer. At this point, X is effectively black, not grey, even though\nit may point to white objects.\n\n4. GC reaches X through some other path and calls greyobject on X, but\ngreyobject does nothing because X is already marked.\n\n5. GC completes.\n\n6. greyobject on G #1 adds X to a work buffer, but it\u0027s too late.\n\n7. Objects that were reachable only through X are collected.\n\nTo fix this, we check the invariant that no asynchronous write\nbarriers happen when the world is stopped by checking that write\nbarriers always have a P, and modify all currently known sources of\nthese writes to disable the write barrier. In all modified cases this\nis safe because the object in question will always be reachable via\nsome other path.\n\nSome of the trace code was turned off...",
      "revId": "05afca0119191aa92349fe769783a97d23cd5c85",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "86336cf4_0f2f29ba",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 14,
      "author": {
        "id": 5167
      },
      "writtenOn": "2015-03-16T16:33:56Z",
      "side": 1,
      "message": "s/is/are/",
      "range": {
        "startLine": 14,
        "startChar": 43,
        "endLine": 14,
        "endChar": 45
      },
      "revId": "05afca0119191aa92349fe769783a97d23cd5c85",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "611bc25b_e31cd29c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 24,
      "author": {
        "id": 5400
      },
      "writtenOn": "2015-03-13T12:40:04Z",
      "side": 1,
      "message": "I think it should be:\n\"The GC will move on and the objects this object points to can be incorrectly reclaimed\".\nThe object itself is marked, so it won\u0027t be reclaimed.",
      "revId": "05afca0119191aa92349fe769783a97d23cd5c85",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "611bc25b_8336be19",
        "filename": "src/runtime/mbarrier.go",
        "patchSetId": 2
      },
      "lineNbr": 92,
      "author": {
        "id": 5400
      },
      "writtenOn": "2015-03-13T12:40:04Z",
      "side": 1,
      "message": "I think it should be:\n\"if the write is of a pointer to a heap object\".",
      "revId": "05afca0119191aa92349fe769783a97d23cd5c85",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "26be4091_29f1ad64",
        "filename": "src/runtime/mbarrier.go",
        "patchSetId": 2
      },
      "lineNbr": 92,
      "author": {
        "id": 5056
      },
      "writtenOn": "2015-03-16T15:39:47Z",
      "side": 1,
      "message": "Yes.",
      "parentUuid": "611bc25b_8336be19",
      "revId": "05afca0119191aa92349fe769783a97d23cd5c85",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "063a1cf6_40e24e1b",
        "filename": "src/runtime/netpoll.go",
        "patchSetId": 2
      },
      "lineNbr": 277,
      "author": {
        "id": 5056
      },
      "writtenOn": "2015-03-16T15:39:47Z",
      "side": 1,
      "message": "add //go:nowritebarrier",
      "revId": "05afca0119191aa92349fe769783a97d23cd5c85",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "063a1cf6_60caf29d",
        "filename": "src/runtime/proc1.go",
        "patchSetId": 2
      },
      "lineNbr": 977,
      "author": {
        "id": 5056
      },
      "writtenOn": "2015-03-16T15:39:47Z",
      "side": 1,
      "message": "Add:\n//go:nowritebarrier\nso the compiler can verify this.",
      "revId": "05afca0119191aa92349fe769783a97d23cd5c85",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8147d63d_60da9a66",
        "filename": "src/runtime/proc1.go",
        "patchSetId": 2
      },
      "lineNbr": 1039,
      "author": {
        "id": 5056
      },
      "writtenOn": "2015-03-16T15:39:47Z",
      "side": 1,
      "message": "add //go:nowritebarrier",
      "revId": "05afca0119191aa92349fe769783a97d23cd5c85",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8147d63d_20d09246",
        "filename": "src/runtime/proc1.go",
        "patchSetId": 2
      },
      "lineNbr": 1053,
      "author": {
        "id": 5056
      },
      "writtenOn": "2015-03-16T15:39:47Z",
      "side": 1,
      "message": "Does \u0027mp :\u003d mget()\u0027 really have a write barrier? It is a stack variable.",
      "revId": "05afca0119191aa92349fe769783a97d23cd5c85",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "41331ed7_9ebb6d0a",
        "filename": "src/runtime/proc1.go",
        "patchSetId": 2
      },
      "lineNbr": 1153,
      "author": {
        "id": 5056
      },
      "writtenOn": "2015-03-16T15:39:47Z",
      "side": 1,
      "message": "Add //go:nowritebarrier",
      "revId": "05afca0119191aa92349fe769783a97d23cd5c85",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "86336cf4_efce1daf",
        "filename": "src/runtime/proc1.go",
        "patchSetId": 2
      },
      "lineNbr": 2585,
      "author": {
        "id": 5056
      },
      "writtenOn": "2015-03-16T15:39:47Z",
      "side": 1,
      "message": "add //go:nowritebarrier",
      "revId": "05afca0119191aa92349fe769783a97d23cd5c85",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "41331ed7_dec5e58b",
        "filename": "src/runtime/proc1.go",
        "patchSetId": 2
      },
      "lineNbr": 3010,
      "author": {
        "id": 5056
      },
      "writtenOn": "2015-03-16T15:39:47Z",
      "side": 1,
      "message": "add //go:nowritebarrier",
      "revId": "05afca0119191aa92349fe769783a97d23cd5c85",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "86336cf4_cfcb619d",
        "filename": "src/runtime/proc1.go",
        "patchSetId": 2
      },
      "lineNbr": 3037,
      "author": {
        "id": 5056
      },
      "writtenOn": "2015-03-16T15:39:47Z",
      "side": 1,
      "message": "add //go:nowritebarrier",
      "revId": "05afca0119191aa92349fe769783a97d23cd5c85",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "063a1cf6_40bb6e09",
        "filename": "src/runtime/proc1.go",
        "patchSetId": 2
      },
      "lineNbr": 3100,
      "author": {
        "id": 5056
      },
      "writtenOn": "2015-03-16T15:39:47Z",
      "side": 1,
      "message": "add //go:nowritebarrier",
      "revId": "05afca0119191aa92349fe769783a97d23cd5c85",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "063a1cf6_20c0ea7b",
        "filename": "src/runtime/proc1.go",
        "patchSetId": 2
      },
      "lineNbr": 3111,
      "author": {
        "id": 5056
      },
      "writtenOn": "2015-03-16T15:39:47Z",
      "side": 1,
      "message": "add //go:nowritebarrier",
      "revId": "05afca0119191aa92349fe769783a97d23cd5c85",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "063a1cf6_00d96676",
        "filename": "src/runtime/runtime2.go",
        "patchSetId": 2
      },
      "lineNbr": 121,
      "author": {
        "id": 5056
      },
      "writtenOn": "2015-03-16T15:39:47Z",
      "side": 1,
      "message": "s/go/Go/",
      "revId": "05afca0119191aa92349fe769783a97d23cd5c85",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "063a1cf6_e0d5623a",
        "filename": "src/runtime/runtime2.go",
        "patchSetId": 2
      },
      "lineNbr": 132,
      "author": {
        "id": 5056
      },
      "writtenOn": "2015-03-16T15:39:47Z",
      "side": 1,
      "message": "remove extra set of parens around unsafe.Pointer(gdst) -- it\u0027s doubly parenthesized. same on next 3 instances.",
      "revId": "05afca0119191aa92349fe769783a97d23cd5c85",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}