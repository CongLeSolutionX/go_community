{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "cfa0ff00_f7457213",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-05-09T21:27:01Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003d96788cae\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "96788caeb1a6f53dfaef3ff65a6c21bf036f142d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ba543ea2_4c301f96",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-05-09T21:37:52Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "cfa0ff00_f7457213",
      "tag": "autogenerated:trybots~happy",
      "revId": "96788caeb1a6f53dfaef3ff65a6c21bf036f142d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9393dfb6_bb507adc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 7061
      },
      "writtenOn": "2023-05-09T21:48:55Z",
      "side": 1,
      "message": "Russ, I was playing with this by hand on the ppc64le buildlet (where it broke, but only sometimes) and got screwy results.  I was wondering if there were issues when the set of triggered bugs was not fully independent (a \u0026\u0026 b) if their hash codes overlapped just-so.\n\nDetails, I think I have it, I think the exclusion has to use the whole hash:\n```\nroot@ab50273ea20e:/workdir/go/src/internal/godebug# GODEBUG\u003dbuggy\u003d1#v1001+0101+0001 go test -run\u003dBisectTestCase\n[bisect-match 0x48810ee71772ae99]\t/workdir/go/src/internal/godebug/godebug_test.go:115\n[bisect-match 0x4d35bb9bf338fde5]\t/workdir/go/src/internal/godebug/godebug_test.go:118\n[bisect-match 0x7967324fcae61151]\t/workdir/go/src/internal/godebug/godebug_test.go:119\n```\nand searching:\n```\n...\nbisect: run: GODEBUG\u003dbuggy\u003d1#v+001 go test -run\u003dBisectTestCase... FAIL (1 matches)\n...\nbisect: run: GODEBUG\u003dbuggy\u003d1#-001 go test -run\u003dBisectTestCase... ok (3 matches)\nbisect: target succeeds with all remaining changes enabled\n```\nBut\n```\nGODEBUG\u003dbuggy\u003d1#-1001 go test -run\u003dBisectTestCase\n[bisect-match 0x816f77a7ec6b4382]\n[bisect-match 0x2c95ecc94fad09bd]\n[bisect-match 0x4d35bb9bf338fde5]\n[bisect-match 0x7967324fcae61151]\n--- FAIL: TestBisectTestCase (0.00s)\n    godebug_test.go:110: ok\n```",
      "revId": "96788caeb1a6f53dfaef3ff65a6c21bf036f142d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4df258bd_7ea87a4f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 7061
      },
      "writtenOn": "2023-05-09T21:49:56Z",
      "side": 1,
      "message": "I\u0027m not actually sure that my fix here is 100% correct, the problem is in the bisect command.",
      "parentUuid": "9393dfb6_bb507adc",
      "revId": "96788caeb1a6f53dfaef3ff65a6c21bf036f142d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2ca4f838_174edfe3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 7061
      },
      "writtenOn": "2023-05-09T22:04:36Z",
      "side": 1,
      "message": "For bisect.go:\n```\ngit diff\ndiff --git a/cmd/bisect/main.go b/cmd/bisect/main.go\nindex baae1fa17..59603c161 100644\n--- a/cmd/bisect/main.go\n+++ b/cmd/bisect/main.go\n@@ -439,7 +439,7 @@ func (b *Bisect) search(r *Result) []string {\n                if r.Suffix \u003d\u003d \"\" {\n                        return []string{\"y\"}\n                }\n-               return []string{r.Suffix}\n+               return []string{fmt.Sprintf(\"%b\", r.MatchIDs[0])}\n        }\n\n        // If the suffix we were tracking in the trial is already 64 bits,\n```\n\nExcept that then we want the hash encodings to also process hex because otherwise 64 is a lot of bits -- unless we collect universe of hashcodes ever observed and truncate down to the minimum required to be unambiguous.",
      "revId": "96788caeb1a6f53dfaef3ff65a6c21bf036f142d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eebde505_52483ebb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 7061
      },
      "writtenOn": "2023-05-09T22:14:38Z",
      "side": 1,
      "message": "Sorry for the excess chit-chat -- this CL is adequate; the problem is caused because filtering\n\n  1001 ; 0101 \u0026\u0026 0001\n  \nwith \"001\" blocks evaluation of 0001 so 1001 looks like a singleton, and thus a not-actually-disambiguating hash matches as \"just one match\".  Computing them all ahead of time prevents this.  The true fix is in bisect.",
      "revId": "96788caeb1a6f53dfaef3ff65a6c21bf036f142d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "74876157_078b9f4a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5056
      },
      "writtenOn": "2023-05-10T14:44:19Z",
      "side": 1,
      "message": "I believe you found the real problem instead.",
      "revId": "96788caeb1a6f53dfaef3ff65a6c21bf036f142d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}