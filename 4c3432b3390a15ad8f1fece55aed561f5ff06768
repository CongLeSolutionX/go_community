{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "c86c921f_f0998a9e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 68008
      },
      "writtenOn": "2024-10-17T22:26:15Z",
      "side": 1,
      "message": "Hello,\n\nI\u0027ve rebased the changes and looked at some more benchmarks for performance effect. Please have a look at the updated version of this patch when you have time.\n\nOverall, it seems that the number of cases currently CSEd with this change is not significant (most functions are not changed) and maybe we need more aggressive `disjoint` routine to be able to detect more cases. But the `disjoint` function is used in other optimization passes (at least by opt) so maybe better to leave any changes related to that for separate patches...",
      "revId": "4c3432b3390a15ad8f1fece55aed561f5ff06768",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9843464e_18013929",
        "filename": "src/cmd/compile/internal/ssa/cse.go",
        "patchSetId": 3
      },
      "lineNbr": 211,
      "author": {
        "id": 5200
      },
      "writtenOn": "2024-10-22T01:02:21Z",
      "side": 1,
      "message": "I\u0027m not entirely sure what the point of this part is. Is it that we want the earliest possible value from the set of equivalent values, and that one is the one with the lowest skip count?",
      "range": {
        "startLine": 210,
        "startChar": 52,
        "endLine": 211,
        "endChar": 41
      },
      "revId": "4c3432b3390a15ad8f1fece55aed561f5ff06768",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f64e4402_18d42de7",
        "filename": "src/cmd/compile/internal/ssa/cse.go",
        "patchSetId": 3
      },
      "lineNbr": 384,
      "author": {
        "id": 5200
      },
      "writtenOn": "2024-10-22T01:02:21Z",
      "side": 1,
      "message": "(-1, -1, false)?",
      "range": {
        "startLine": 384,
        "startChar": 112,
        "endLine": 384,
        "endChar": 125
      },
      "revId": "4c3432b3390a15ad8f1fece55aed561f5ff06768",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "83bd5781_7b098d5e",
        "filename": "src/cmd/compile/internal/ssa/cse.go",
        "patchSetId": 3
      },
      "lineNbr": 395,
      "author": {
        "id": 5200
      },
      "writtenOn": "2024-10-22T01:02:21Z",
      "side": 1,
      "message": "same here.",
      "range": {
        "startLine": 395,
        "startChar": 112,
        "endLine": 395,
        "endChar": 125
      },
      "revId": "4c3432b3390a15ad8f1fece55aed561f5ff06768",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cae459c3_b305d1c3",
        "filename": "src/cmd/compile/internal/ssa/cse.go",
        "patchSetId": 3
      },
      "lineNbr": 414,
      "author": {
        "id": 5200
      },
      "writtenOn": "2024-10-22T01:02:21Z",
      "side": 1,
      "message": "31? memtable has signed ints in it.",
      "range": {
        "startLine": 414,
        "startChar": 21,
        "endLine": 414,
        "endChar": 23
      },
      "revId": "4c3432b3390a15ad8f1fece55aed561f5ff06768",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "564cfc78_ec44840f",
        "filename": "src/cmd/compile/internal/ssa/cse.go",
        "patchSetId": 3
      },
      "lineNbr": 417,
      "author": {
        "id": 5200
      },
      "writtenOn": "2024-10-22T01:02:21Z",
      "side": 1,
      "message": "I think this needs a bit more description, and maybe a name change. In particular, it returns the first possibly-aliased store along the memory chain starting at v\u0027s memory argument.\n\ngetEffectiveMemoryArg?",
      "revId": "4c3432b3390a15ad8f1fece55aed561f5ff06768",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2f13c533_32d64353",
        "filename": "src/cmd/compile/internal/ssa/cse.go",
        "patchSetId": 3
      },
      "lineNbr": 421,
      "author": {
        "id": 5200
      },
      "writtenOn": "2024-10-22T01:02:21Z",
      "side": 1,
      "message": "Keeping track of idxMem may be unnecessary. We have (*Value).MemoryArg which I think gets you the same thing.",
      "range": {
        "startLine": 421,
        "startChar": 12,
        "endLine": 421,
        "endChar": 18
      },
      "revId": "4c3432b3390a15ad8f1fece55aed561f5ff06768",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c2e6f64c_2b5309d6",
        "filename": "src/cmd/compile/internal/ssa/cse.go",
        "patchSetId": 3
      },
      "lineNbr": 439,
      "author": {
        "id": 5200
      },
      "writtenOn": "2024-10-22T01:02:21Z",
      "side": 1,
      "message": "Describe here what the return values are.",
      "revId": "4c3432b3390a15ad8f1fece55aed561f5ff06768",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d47616f6_87d8668c",
        "filename": "src/cmd/compile/internal/ssa/cse.go",
        "patchSetId": 3
      },
      "lineNbr": 440,
      "author": {
        "id": 5200
      },
      "writtenOn": "2024-10-22T01:02:21Z",
      "side": 1,
      "message": "It\u0027s weird that you\u0027re passing one of these by index and the other by value.\nPass idxUserPtr and idxUserMem as ints, or pass userPtr and userMem as *Value.",
      "range": {
        "startLine": 440,
        "startChar": 38,
        "endLine": 440,
        "endChar": 68
      },
      "revId": "4c3432b3390a15ad8f1fece55aed561f5ff06768",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3a201ee3_168a65e0",
        "filename": "src/cmd/compile/internal/ssa/cse.go",
        "patchSetId": 3
      },
      "lineNbr": 448,
      "author": {
        "id": 5200
      },
      "writtenOn": "2024-10-22T01:02:21Z",
      "side": 1,
      "message": "Stores keep the type being written in the Aux field, but that may not be true for other memory-defining opcodes. Maybe leave a TODO here or in isMemDef.",
      "revId": "4c3432b3390a15ad8f1fece55aed561f5ff06768",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}