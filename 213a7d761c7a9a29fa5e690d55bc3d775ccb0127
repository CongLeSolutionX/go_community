{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "7c59467a_02c41a38",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 3323728
      },
      "writtenOn": "2024-02-28T21:56:23Z",
      "side": 1,
      "message": "Reviewed the Kyber implementation and gave the SHA3 implementation a quick glance.\n\nThanks for the work!",
      "revId": "213a7d761c7a9a29fa5e690d55bc3d775ccb0127",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "220a13b0_aa87c814",
        "filename": "src/crypto/internal/mlkem768/mlkem768.go",
        "patchSetId": 3
      },
      "lineNbr": 46,
      "author": {
        "id": 3323728
      },
      "writtenOn": "2024-02-28T21:56:23Z",
      "side": 1,
      "message": "fancy",
      "range": {
        "startLine": 46,
        "startChar": 1,
        "endLine": 46,
        "endChar": 2
      },
      "revId": "213a7d761c7a9a29fa5e690d55bc3d775ccb0127",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ff1b0edc_0d1536b1",
        "filename": "src/crypto/internal/mlkem768/mlkem768.go",
        "patchSetId": 3
      },
      "lineNbr": 52,
      "author": {
        "id": 3323728
      },
      "writtenOn": "2024-02-28T21:56:23Z",
      "side": 1,
      "message": "I personally like to define a constant called log2prime \u003d 12 for this",
      "range": {
        "startLine": 52,
        "startChar": 22,
        "endLine": 52,
        "endChar": 24
      },
      "revId": "213a7d761c7a9a29fa5e690d55bc3d775ccb0127",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "091c3d40_701d9444",
        "filename": "src/crypto/internal/mlkem768/mlkem768.go",
        "patchSetId": 3
      },
      "lineNbr": 53,
      "author": {
        "id": 3323728
      },
      "writtenOn": "2024-02-28T21:56:23Z",
      "side": 1,
      "message": "du",
      "range": {
        "startLine": 53,
        "startChar": 22,
        "endLine": 53,
        "endChar": 24
      },
      "revId": "213a7d761c7a9a29fa5e690d55bc3d775ccb0127",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "295d847d_100037b9",
        "filename": "src/crypto/internal/mlkem768/mlkem768.go",
        "patchSetId": 3
      },
      "lineNbr": 54,
      "author": {
        "id": 3323728
      },
      "writtenOn": "2024-02-28T21:56:23Z",
      "side": 1,
      "message": "dv",
      "range": {
        "startLine": 54,
        "startChar": 22,
        "endLine": 54,
        "endChar": 23
      },
      "revId": "213a7d761c7a9a29fa5e690d55bc3d775ccb0127",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0ddfc84a_caff3185",
        "filename": "src/crypto/internal/mlkem768/mlkem768.go",
        "patchSetId": 3
      },
      "lineNbr": 59,
      "author": {
        "id": 3323728
      },
      "writtenOn": "2024-02-28T21:56:23Z",
      "side": 1,
      "message": "spacing inconsistent",
      "range": {
        "startLine": 59,
        "startChar": 22,
        "endLine": 59,
        "endChar": 23
      },
      "revId": "213a7d761c7a9a29fa5e690d55bc3d775ccb0127",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f34b7563_48b29e9d",
        "filename": "src/crypto/internal/mlkem768/mlkem768.go",
        "patchSetId": 3
      },
      "lineNbr": 64,
      "author": {
        "id": 3323728
      },
      "writtenOn": "2024-02-28T21:56:23Z",
      "side": 1,
      "message": "Is this not messageSize by definition?",
      "range": {
        "startLine": 64,
        "startChar": 1,
        "endLine": 64,
        "endChar": 14
      },
      "revId": "213a7d761c7a9a29fa5e690d55bc3d775ccb0127",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "82a169bf_25b09d04",
        "filename": "src/crypto/internal/mlkem768/mlkem768.go",
        "patchSetId": 3
      },
      "lineNbr": 106,
      "author": {
        "id": 3323728
      },
      "writtenOn": "2024-02-28T21:56:23Z",
      "side": 1,
      "message": "I assume this is faster/better in go than using [][]nttElement?",
      "range": {
        "startLine": 106,
        "startChar": 25,
        "endLine": 106,
        "endChar": 28
      },
      "revId": "213a7d761c7a9a29fa5e690d55bc3d775ccb0127",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c996bc15_02c48cd9",
        "filename": "src/crypto/internal/mlkem768/mlkem768.go",
        "patchSetId": 3
      },
      "lineNbr": 121,
      "author": {
        "id": 3323728
      },
      "writtenOn": "2024-02-28T21:56:23Z",
      "side": 1,
      "message": "nit: This can be its own method, taking a pointer to N, but I leave that up to you.",
      "range": {
        "startLine": 118,
        "startChar": 1,
        "endLine": 121,
        "endChar": 2
      },
      "revId": "213a7d761c7a9a29fa5e690d55bc3d775ccb0127",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b735f905_fbcd687e",
        "filename": "src/crypto/internal/mlkem768/mlkem768.go",
        "patchSetId": 3
      },
      "lineNbr": 205,
      "author": {
        "id": 3323728
      },
      "writtenOn": "2024-02-28T21:56:23Z",
      "side": 1,
      "message": "Clever!",
      "range": {
        "startLine": 203,
        "startChar": 2,
        "endLine": 205,
        "endChar": 8
      },
      "revId": "213a7d761c7a9a29fa5e690d55bc3d775ccb0127",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "87f46b8e_21a9d7cf",
        "filename": "src/crypto/internal/mlkem768/mlkem768.go",
        "patchSetId": 3
      },
      "lineNbr": 212,
      "author": {
        "id": 3323728
      },
      "writtenOn": "2024-02-28T21:56:23Z",
      "side": 1,
      "message": "It could be useful for performance of multiple encaps operations to have parse and marshal functions for public key and private key, otherwise you pay the cost of expanding every time.\nThis is even the case for ephemeral KEMs as we use them in TLS right now, since keygen has to compute the expanded matrix anyways, so reexpanding it on decrypt in order to do the FO transform is wasteful.\n\nIn the end this is a performance optimization, so we could implement it in a later CL as needed, but it does affect the API, so we might want to consider whether we should enable this design in the API already.\n\nIn the BoringSSL version, we made it so that keygen returns an expanded private key and a marshalled public key, as that is the most likely used configuration, but it\u0027s up to you.",
      "range": {
        "startLine": 197,
        "startChar": 1,
        "endLine": 212,
        "endChar": 2
      },
      "revId": "213a7d761c7a9a29fa5e690d55bc3d775ccb0127",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3c362870_9e348cc5",
        "filename": "src/crypto/internal/mlkem768/mlkem768.go",
        "patchSetId": 3
      },
      "lineNbr": 282,
      "author": {
        "id": 3323728
      },
      "writtenOn": "2024-02-28T21:56:23Z",
      "side": 1,
      "message": "Maybe add a comment that this will only err on public inputs, so we are not leaking any side channel information if we return early here. Having if\u0027s in the FO path makes me nervous otherwise",
      "range": {
        "startLine": 280,
        "startChar": 1,
        "endLine": 282,
        "endChar": 2
      },
      "revId": "213a7d761c7a9a29fa5e690d55bc3d775ccb0127",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "54dc36d8_4c03281f",
        "filename": "src/crypto/internal/mlkem768/mlkem768.go",
        "patchSetId": 3
      },
      "lineNbr": 297,
      "author": {
        "id": 3323728
      },
      "writtenOn": "2024-02-28T21:56:23Z",
      "side": 1,
      "message": "Same here.\n\nThis is another benefit of the separate parsing/marshal logic: The errors only happen on parse/marshal, and the FO path is free of any if statements.",
      "range": {
        "startLine": 294,
        "startChar": 1,
        "endLine": 297,
        "endChar": 0
      },
      "revId": "213a7d761c7a9a29fa5e690d55bc3d775ccb0127",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1f7c5e2d_b1ff4cae",
        "filename": "src/crypto/internal/mlkem768/mlkem768.go",
        "patchSetId": 3
      },
      "lineNbr": 329,
      "author": {
        "id": 3323728
      },
      "writtenOn": "2024-02-28T21:56:23Z",
      "side": 1,
      "message": "I guess if you want to be extra fancy, you give the s a little hat: ≈ù",
      "range": {
        "startLine": 329,
        "startChar": 1,
        "endLine": 329,
        "endChar": 2
      },
      "revId": "213a7d761c7a9a29fa5e690d55bc3d775ccb0127",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "793dd8e2_aabbb7e0",
        "filename": "src/crypto/internal/mlkem768/mlkem768.go",
        "patchSetId": 3
      },
      "lineNbr": 339,
      "author": {
        "id": 3323728
      },
      "writtenOn": "2024-02-28T21:56:23Z",
      "side": 1,
      "message": "I like calling this variable `mask`, since that is what it is functionally doing, but I won\u0027t argue variable names here, so up to you.",
      "range": {
        "startLine": 339,
        "startChar": 5,
        "endLine": 339,
        "endChar": 10
      },
      "revId": "213a7d761c7a9a29fa5e690d55bc3d775ccb0127",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "398efc69_7ebb8991",
        "filename": "src/crypto/internal/mlkem768/mlkem768.go",
        "patchSetId": 3
      },
      "lineNbr": 348,
      "author": {
        "id": 3323728
      },
      "writtenOn": "2024-02-28T21:56:23Z",
      "side": 1,
      "message": "The very annoying thing about Kyber with there being three fields that each can claim to be *the* field üòû.",
      "range": {
        "startLine": 348,
        "startChar": 2,
        "endLine": 348,
        "endChar": 80
      },
      "revId": "213a7d761c7a9a29fa5e690d55bc3d775ccb0127",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "45e716e7_3e998809",
        "filename": "src/crypto/internal/mlkem768/mlkem768.go",
        "patchSetId": 3
      },
      "lineNbr": 362,
      "author": {
        "id": 3323728
      },
      "writtenOn": "2024-02-28T21:56:23Z",
      "side": 1,
      "message": "neat trick",
      "range": {
        "startLine": 362,
        "startChar": 1,
        "endLine": 362,
        "endChar": 69
      },
      "revId": "213a7d761c7a9a29fa5e690d55bc3d775ccb0127",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3d798ac9_0bdb87eb",
        "filename": "src/crypto/internal/mlkem768/mlkem768.go",
        "patchSetId": 3
      },
      "lineNbr": 378,
      "author": {
        "id": 3323728
      },
      "writtenOn": "2024-02-28T21:56:23Z",
      "side": 1,
      "message": "I\u0027m used to thinking of this as 2^(12+12), reflecting that we need to support the reduction of a*b with both a and b having 12 bit.",
      "range": {
        "startLine": 378,
        "startChar": 29,
        "endLine": 378,
        "endChar": 32
      },
      "revId": "213a7d761c7a9a29fa5e690d55bc3d775ccb0127",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "41715169_5f541c22",
        "filename": "src/crypto/internal/mlkem768/mlkem768.go",
        "patchSetId": 3
      },
      "lineNbr": 481,
      "author": {
        "id": 3323728
      },
      "writtenOn": "2024-02-28T21:56:23Z",
      "side": 1,
      "message": "It\u0027s possible that NIST will change this in the final standard, to just silently reduce and then fail later because encaps hashes the public key in. The main advantage for that is in C implementations, since they cannot return nil for the shared secret.",
      "range": {
        "startLine": 480,
        "startChar": 64,
        "endLine": 481,
        "endChar": 49
      },
      "revId": "213a7d761c7a9a29fa5e690d55bc3d775ccb0127",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ddf4e9ad_ffd26ae9",
        "filename": "src/crypto/internal/mlkem768/mlkem768.go",
        "patchSetId": 3
      },
      "lineNbr": 550,
      "author": {
        "id": 3323728
      },
      "writtenOn": "2024-02-28T21:56:23Z",
      "side": 1,
      "message": "Make this a constant called halfPrime, to avoid having random int literals in the code",
      "range": {
        "startLine": 550,
        "startChar": 28,
        "endLine": 550,
        "endChar": 33
      },
      "revId": "213a7d761c7a9a29fa5e690d55bc3d775ccb0127",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "90059526_b7457c76",
        "filename": "src/crypto/internal/mlkem768/mlkem768.go",
        "patchSetId": 3
      },
      "lineNbr": 645,
      "author": {
        "id": 3323728
      },
      "writtenOn": "2024-02-28T21:56:23Z",
      "side": 1,
      "message": "I am amazed at you knowing the operator precedence between \u003e\u003e and \u0026 üòä",
      "range": {
        "startLine": 645,
        "startChar": 30,
        "endLine": 645,
        "endChar": 36
      },
      "revId": "213a7d761c7a9a29fa5e690d55bc3d775ccb0127",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "01d9b77c_51f890a4",
        "filename": "src/crypto/internal/mlkem768/mlkem768.go",
        "patchSetId": 3
      },
      "lineNbr": 729,
      "author": {
        "id": 3323728
      },
      "writtenOn": "2024-02-28T21:56:23Z",
      "side": 1,
      "message": "make this a constant inverseDegree or something like that to not have random int literals",
      "range": {
        "startLine": 729,
        "startChar": 24,
        "endLine": 729,
        "endChar": 28
      },
      "revId": "213a7d761c7a9a29fa5e690d55bc3d775ccb0127",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "93c2c61d_eaa9cc41",
        "filename": "src/crypto/internal/mlkem768/mlkem768_test.go",
        "patchSetId": 3
      },
      "lineNbr": 73,
      "author": {
        "id": 3323728
      },
      "writtenOn": "2024-02-28T21:56:23Z",
      "side": 1,
      "message": "you should also be able to test that |decompress(compress(x)) - x| \u003c\u003d 2^d",
      "range": {
        "startLine": 73,
        "startChar": 3,
        "endLine": 73,
        "endChar": 25
      },
      "revId": "213a7d761c7a9a29fa5e690d55bc3d775ccb0127",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "41ff1e57_443e847f",
        "filename": "src/vendor/golang.org/x/crypto/sha3/doc.go",
        "patchSetId": 3
      },
      "lineNbr": 1,
      "author": {
        "id": 3323728
      },
      "writtenOn": "2024-02-28T21:56:23Z",
      "side": 1,
      "message": "We should probably add some test vectors for the SHA3 stuff as well.",
      "range": {
        "startLine": 1,
        "startChar": 0,
        "endLine": 1,
        "endChar": 54
      },
      "revId": "213a7d761c7a9a29fa5e690d55bc3d775ccb0127",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "85f5b0b9_b3fb1c4b",
        "filename": "src/vendor/golang.org/x/crypto/sha3/doc.go",
        "patchSetId": 3
      },
      "lineNbr": 6,
      "author": {
        "id": 3323728
      },
      "writtenOn": "2024-02-28T21:56:23Z",
      "side": 1,
      "message": "Nit: Extendable-output function (XOF)",
      "range": {
        "startLine": 6,
        "startChar": 13,
        "endLine": 6,
        "endChar": 50
      },
      "revId": "213a7d761c7a9a29fa5e690d55bc3d775ccb0127",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}