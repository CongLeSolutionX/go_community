{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "6ca45cf4_d8934a6e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-07-01T00:02:57Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003d37070192\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "370701921ab8af8876f5d956c4a7d6cca3a49fcf",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5a4384e6_c44eb292",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-07-01T00:13:11Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "6ca45cf4_d8934a6e",
      "tag": "autogenerated:trybots~happy",
      "revId": "370701921ab8af8876f5d956c4a7d6cca3a49fcf",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "56b95af9_cd748ada",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5440
      },
      "writtenOn": "2023-07-01T00:14:51Z",
      "side": 1,
      "message": "Thanks.",
      "revId": "370701921ab8af8876f5d956c4a7d6cca3a49fcf",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "35e4894b_0690a041",
        "filename": "src/cmd/compile/internal/walk/builtin.go",
        "patchSetId": 1
      },
      "lineNbr": 141,
      "author": {
        "id": 5440
      },
      "writtenOn": "2023-07-01T00:14:51Z",
      "side": 1,
      "message": "How about just changing arrayClear to return this instead of nil?",
      "revId": "370701921ab8af8876f5d956c4a7d6cca3a49fcf",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ad3d408a_69226dc6",
        "filename": "src/cmd/compile/internal/walk/builtin.go",
        "patchSetId": 1
      },
      "lineNbr": 141,
      "author": {
        "id": 14665
      },
      "writtenOn": "2023-07-01T00:32:57Z",
      "side": 1,
      "message": "return nil in arrayClear is easier for arrayRangeClear to detect and skip the optimization.",
      "parentUuid": "35e4894b_0690a041",
      "revId": "370701921ab8af8876f5d956c4a7d6cca3a49fcf",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e92a3adf_597692c2",
        "filename": "src/cmd/compile/internal/walk/builtin.go",
        "patchSetId": 1
      },
      "lineNbr": 141,
      "author": {
        "id": 5440
      },
      "writtenOn": "2023-07-01T03:52:58Z",
      "side": 1,
      "message": "Why does it need to detect and skip the optimization? A NOP stmt to clear the zero-size array is just as valid there, isn\u0027t it?",
      "parentUuid": "ad3d408a_69226dc6",
      "revId": "370701921ab8af8876f5d956c4a7d6cca3a49fcf",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "06c39172_879dd032",
        "filename": "src/cmd/compile/internal/walk/builtin.go",
        "patchSetId": 1
      },
      "lineNbr": 141,
      "author": {
        "id": 14665
      },
      "writtenOn": "2023-07-01T06:33:00Z",
      "side": 1,
      "message": "I think it\u0027s the pattern inherit since the old C code:\n\n - walkRange tries to optimize array clear range, calling arrayRangeClear here: https://github.com/golang/go/blob/master/src/cmd/compile/internal/walk/range.go#L82C12-L82C27\n - arrayRangeClear calls arrayClear at the end: https://github.com/golang/go/blob/master/src/cmd/compile/internal/walk/range.go#L511\n \n Return a nil Node signal the caller that the optimization could not be applied, so normal code should be generated.\n \n In case of `clear(x)`, thing is different, it\u0027s not the optimization could not apply, but it\u0027s a no-op.",
      "parentUuid": "e92a3adf_597692c2",
      "revId": "370701921ab8af8876f5d956c4a7d6cca3a49fcf",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "be39b87b_183af60f",
        "filename": "src/cmd/compile/internal/walk/builtin.go",
        "patchSetId": 1
      },
      "lineNbr": 141,
      "author": {
        "id": 14665
      },
      "writtenOn": "2023-07-01T06:37:59Z",
      "side": 1,
      "message": "\u003e I think it\u0027s the pattern inherit since the old C code:\n\nStrictly speaking, only arrayRangeClear returns nil to signal walkRange optimization could not applied is inherited from old C code.\n\nWhen adding `clear` builtin, I factor out and introduce `arrayClear`, to be able to reuse the code in both `clear` and `for .. range a` loop, thus I keep `arrayClear` returns nil.\n\nProbably we could make arrayClear return (ir.Node, bool) to signal the caller that whether the code for clearing array is generated? So `arrayRangeClear can check the boolean and return nil, while `arrayClear` can just ignore the bool and returning the ir.Node generated. Not sure it\u0027s worth, though.",
      "parentUuid": "06c39172_879dd032",
      "revId": "370701921ab8af8876f5d956c4a7d6cca3a49fcf",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "526d85b8_2e1fe38a",
        "filename": "src/cmd/compile/internal/walk/builtin.go",
        "patchSetId": 1
      },
      "lineNbr": 141,
      "author": {
        "id": 5200
      },
      "writtenOn": "2023-07-03T19:16:29Z",
      "side": 1,
      "message": "I think it is fine for arrayClear to return an empty block if the elemsize is 0 (or the array length is 0?).\nThen the caller doesn\u0027t have to check the result at all.\n\nNo point in having to check a function result if we can write it so it will never fail.",
      "parentUuid": "be39b87b_183af60f",
      "revId": "370701921ab8af8876f5d956c4a7d6cca3a49fcf",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9a8c4ad6_0ab724ac",
        "filename": "src/cmd/compile/internal/walk/builtin.go",
        "patchSetId": 1
      },
      "lineNbr": 141,
      "author": {
        "id": 14665
      },
      "writtenOn": "2023-07-04T02:20:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "526d85b8_2e1fe38a",
      "revId": "370701921ab8af8876f5d956c4a7d6cca3a49fcf",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}