{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "b072b5aa_0645a887",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 7392
      },
      "writtenOn": "2024-09-06T18:17:54Z",
      "side": 1,
      "message": "Thanks for the fix and filing the new issue.",
      "revId": "700920bbb73b39af4794854e79b76dc9b66b19ca",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3f28f3da_d58b1eba",
        "filename": "src/go/printer/nodes.go",
        "patchSetId": 2
      },
      "lineNbr": 414,
      "author": {
        "id": 7392
      },
      "writtenOn": "2024-09-04T22:21:05Z",
      "side": 1,
      "message": "Hi Mateusz,\n\nWhile making the equivalent changes for the syntax parser and printer I realized that this is actually incorrect. It should be:\n```\nreturn !isTypeElem(x.X)\n```\n\nI can make the fix, or you can do it (see my CL 610758 for reference). Let me know your preference. Thanks.\n\nSorry for noticing this after the fact.",
      "fixSuggestions": [
        {
          "fixId": "aeccb8a7_1a71b333",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "src/go/printer/nodes.go",
              "range": {
                "startLine": 430,
                "startChar": 0,
                "endLine": 431,
                "endChar": 0
              },
              "replacement": "\t\treturn !isTypeElem(x.X)\n"
            }
          ]
        }
      ],
      "revId": "700920bbb73b39af4794854e79b76dc9b66b19ca",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4ed836fc_13a05f8f",
        "filename": "src/go/printer/nodes.go",
        "patchSetId": 2
      },
      "lineNbr": 414,
      "author": {
        "id": 55874
      },
      "writtenOn": "2024-09-05T08:25:02Z",
      "side": 1,
      "message": "Hi,\n\nI looked at this and i am unsure whether this is right, do you see a case that will break because of this?\n\nChanging this to `!isTypeElem(x.X)` makes this test non idempotent:\n\n```\ntype _[P (T),] struct{}\n```\n\ngets formatted to:\n\n```\ntype _[P T,] struct{}\n```\n\ngets formatted to:\n\n```\ntype _[P T] struct{}\n```\n\nThis is even how it worked before this change and CL 610078 (at least for only one ParenExpr) the parens were stripped, so it never reached the `isTypeElem` (unless it was a `StarExpr` or `BinaryExpr`).",
      "parentUuid": "3f28f3da_d58b1eba",
      "revId": "700920bbb73b39af4794854e79b76dc9b66b19ca",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1296a6dd_515327e5",
        "filename": "src/go/printer/nodes.go",
        "patchSetId": 2
      },
      "lineNbr": 414,
      "author": {
        "id": 55874
      },
      "writtenOn": "2024-09-05T13:39:15Z",
      "side": 1,
      "message": "My point here is that no matter the amount of parens, then:\n\n```\ntype _[P (((T))),] struct{}\n```\n\nshould be formatted the same way as\n\n```\ntype _[P T,] struct{}\n```\n\nright?",
      "parentUuid": "4ed836fc_13a05f8f",
      "revId": "700920bbb73b39af4794854e79b76dc9b66b19ca",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9fffe5b2_9fe1976e",
        "filename": "src/go/printer/nodes.go",
        "patchSetId": 2
      },
      "lineNbr": 414,
      "author": {
        "id": 7392
      },
      "writtenOn": "2024-09-05T20:35:19Z",
      "side": 1,
      "message": "combinesWithName is wrong: if x.X is an identifier, combinesWithName returns false.\nThen, a parameter list of the form [P (C)] (w/o any parentheses stripped) will be printed without comma, resulting in [P(C)] which the parser must interpret as an array length (for instance, it could be [int(N)]byte where N is a constant). The comma is needed to disambiguate.\n\nThe reason it looks like it \"works\" is unrelated: on line nodes.go:374, parentheses are always stripped around types (or constraints, for that matter). This is why the printer prints [P T,] instead of [P (T),].\n\nThe printer is producing a \"canonical\" output and we have (for historical reasons) stripped parentheses there (on the line mentioned above). In retrospect it might have been cleaner to do the canonicalization in a separate pass, leaving the printer to just do the (white space) formatting.\n\nTo fix this current issue, we probably need to feed the unparenthesized type/constraint into combinesWithName because that is what is produced in the output.\n\nAnother way to look at this is from the design point of view (rather than from the empirical \"it works/doesn\u0027t work\" point of view): combinesWithName should tell us if an expression combines into a valid value (i.e., non-type) expression. And (X) combines with a name as in N(X) whenever X is not a type element. So the suggested fix is what we need to do. It also matches what the code for the other cases do.\n\nAgain, leaving up to you to fix. Or you can leave it to me, if you prefer. Thanks.",
      "parentUuid": "1296a6dd_515327e5",
      "revId": "700920bbb73b39af4794854e79b76dc9b66b19ca",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cd8b1c51_08f684fc",
        "filename": "src/go/printer/nodes.go",
        "patchSetId": 2
      },
      "lineNbr": 414,
      "author": {
        "id": 55874
      },
      "writtenOn": "2024-09-06T09:20:33Z",
      "side": 1,
      "message": "Thanks for the detailed explanation, take a look at CL 611355.\n\nI also found a case, that once formatted produces a invalid go source, see:\n\n\n```\nfunc TestPrinterBug(t *testing.T) {\n\tconst src \u003d \"package main; type _[a (*b*3),]struct{}\"\n\tout :\u003d formatPrint(t, src)\n\tformatPrint(t, out)\n}\n\nfunc formatPrint(t *testing.T, src string) string {\n\tfset :\u003d token.NewFileSet()\n\tfs, err :\u003d parser.ParseFile(fset, \"test.go\", src, parser.ParseComments|parser.SkipObjectResolution)\n\tif err !\u003d nil {\n\t\tt.Fatal(err)\n\t}\n\tast.Print(fset, fs)\n\n\tvar b strings.Builder\n\tFprint(\u0026b, fset, fs)\n\tt.Logf(\"\\n%v\", b.String())\n\treturn b.String()\n}\n```\n\nIt gets formatted to:\n\n```\ntype _[a *b * 3,] struct{}\n```\n\nAnd this fails to parse with:\n```\nprinter_test.go:878: test.go:3:16: unexpected comma; expecting ]\n```\n\nNot sure how this should be fixed.",
      "parentUuid": "9fffe5b2_9fe1976e",
      "revId": "700920bbb73b39af4794854e79b76dc9b66b19ca",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dd5c05f7_7ec12874",
        "filename": "src/go/printer/nodes.go",
        "patchSetId": 2
      },
      "lineNbr": 414,
      "author": {
        "id": 55874
      },
      "writtenOn": "2024-09-06T17:52:57Z",
      "side": 1,
      "message": "Actually this seems to be also an issue before any of my changes, opened #69320",
      "parentUuid": "cd8b1c51_08f684fc",
      "revId": "700920bbb73b39af4794854e79b76dc9b66b19ca",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "afc7d6ee_1f6ba9ef",
        "filename": "src/go/printer/nodes.go",
        "patchSetId": 2
      },
      "lineNbr": 414,
      "author": {
        "id": 7392
      },
      "writtenOn": "2024-09-06T18:17:54Z",
      "side": 1,
      "message": "Interesting - thanks for finding this! I agree that the issue was present before.\n\n*b*3 (or even *b*c) cannot be a valid type, so a*b*3 must be interpreted as an array length, and thus the parser error message is correct.\n\nLooks like combinesWithName is not correct in the *ast.BinaryExpr case for x.X.",
      "parentUuid": "dd5c05f7_7ec12874",
      "revId": "700920bbb73b39af4794854e79b76dc9b66b19ca",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}