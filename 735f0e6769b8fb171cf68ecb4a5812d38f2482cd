{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "bf784f7b_51af152d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5210
      },
      "writtenOn": "2021-12-02T16:24:00Z",
      "side": 1,
      "message": "We\u0027re in the code freeze so this will have to wait for 1.19 unless this is fixing an important performance issue that cannot wait.\n\nWhat\u0027s the impact on code size?\n",
      "revId": "735f0e6769b8fb171cf68ecb4a5812d38f2482cd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fd80969e_f98f13db",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 53288
      },
      "writtenOn": "2021-12-03T11:10:26Z",
      "side": 1,
      "message": "Sure, this is not an important performance issue, it\u0027s ok if we wait.\nImpact on code size is inconspicuous. I compared it with master using josharian\u0027s compilecmp tool. Results - https://gist.github.com/vpachkov/7f3327eebc0dd77119895aadb025d02d",
      "parentUuid": "bf784f7b_51af152d",
      "revId": "735f0e6769b8fb171cf68ecb4a5812d38f2482cd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c386b9ab_5d430f68",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-04-01T17:02:57Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003d735f0e67",
      "tag": "autogenerated:trybots~beginning",
      "revId": "735f0e6769b8fb171cf68ecb4a5812d38f2482cd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "71314817_d80f58b5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-04-01T17:12:13Z",
      "side": 1,
      "message": "Build is still in progress... Status page: https://farmer.golang.org/try?commit\u003d735f0e67\nFailed on linux-386: https://storage.googleapis.com/go-build-log/735f0e67/linux-386_1c5135c0.log\nOther builds still in progress; subsequent failure notices suppressed until final report.\n\nConsult https://build.golang.org/ to see whether they are new failures. Keep in mind that TryBots currently test *exactly* your git commit, without rebasing. If your commit\u0027s git parent is old, the failure might\u0027ve already been fixed.\n",
      "parentUuid": "c386b9ab_5d430f68",
      "tag": "autogenerated:trybots~progress",
      "revId": "735f0e6769b8fb171cf68ecb4a5812d38f2482cd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7c8de54c_b7020fce",
        "filename": "src/cmd/compile/internal/reflectdata/alg.go",
        "patchSetId": 2
      },
      "lineNbr": 424,
      "author": {
        "id": 5200
      },
      "writtenOn": "2021-12-02T20:47:57Z",
      "side": 1,
      "message": "It would be nice if we had some notion of the complexity of comparing the element type, so we could adjust the unrolling amount.\nFor instance, if comparing types requires calling into the runtime (e.g. ifaceeq), it\u0027s probably not worth unrolling.\n\nOf course, that\u0027s also a problem in the current scheme, where we unroll completely or not based on just the size of the array. So it\u0027s not to say that this CL isn\u0027t worth doing, just another idea to consider.",
      "revId": "735f0e6769b8fb171cf68ecb4a5812d38f2482cd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f6aa0834_8e1ccfba",
        "filename": "src/cmd/compile/internal/reflectdata/alg.go",
        "patchSetId": 2
      },
      "lineNbr": 424,
      "author": {
        "id": 53288
      },
      "writtenOn": "2021-12-03T11:10:26Z",
      "side": 1,
      "message": "Yes, the unrolling amount (\"unroll\" variable) is determined in compilation time based on the array element type.\n\nFor example, comparing strings requires 2 passes:\n1. Compare strings lengths which don\u0027t require calling into the runtime and thus unroll is passed to be 3.\n2. Compare strings contents which require calling runtime.memequal, unroll is passed to be 1 which means don\u0027t do any unrolling.\nhttps://github.com/golang/go/blob/72c003ef82ba7c997f49e187e953872bfcbf5263/src/cmd/compile/internal/reflectdata/alg.go#L481\n\nConsidering your concern about comparing other types, that eventually could call into the runtime. Everything that wasn\u0027t either strings or floats weren\u0027t unrolled previously:\nhttps://github.com/golang/go/blob/72c003ef82ba7c997f49e187e953872bfcbf5263/src/cmd/compile/internal/reflectdata/alg.go#L501. \n\nThis CL doesn\u0027t change that logic.",
      "parentUuid": "7c8de54c_b7020fce",
      "revId": "735f0e6769b8fb171cf68ecb4a5812d38f2482cd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ee49fb76_14623689",
        "filename": "src/cmd/compile/internal/reflectdata/alg.go",
        "patchSetId": 2
      },
      "lineNbr": 449,
      "author": {
        "id": 5200
      },
      "writtenOn": "2022-04-01T17:02:40Z",
      "side": 1,
      "message": "You could reverse these and do\niterateTo :\u003d iterations * unroll",
      "revId": "735f0e6769b8fb171cf68ecb4a5812d38f2482cd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}