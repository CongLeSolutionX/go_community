{
  "comments": [
    {
      "key": {
        "uuid": "8a574447_02f2a20b",
        "filename": "src/sort/sort.go",
        "patchSetId": 2
      },
      "lineNbr": 27,
      "author": {
        "id": 5050
      },
      "writtenOn": "2018-03-20T09:53:27Z",
      "side": 1,
      "message": "This change is unrelated to the rest.\nIs it needed?",
      "revId": "aff08139717406e183752734908b29bf098cf259",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a30aa0f1_43500beb",
        "filename": "src/sort/sort.go",
        "patchSetId": 2
      },
      "lineNbr": 27,
      "author": {
        "id": 15048
      },
      "writtenOn": "2018-03-20T10:17:41Z",
      "side": 1,
      "message": "It is just a cosmetic change, but I will remove it so it would not bother anybody else.",
      "parentUuid": "8a574447_02f2a20b",
      "revId": "aff08139717406e183752734908b29bf098cf259",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2e2c86f3_73bb8c64",
        "filename": "src/sort/sort.go",
        "patchSetId": 2
      },
      "lineNbr": 587,
      "author": {
        "id": 5050
      },
      "writtenOn": "2018-03-20T09:53:27Z",
      "side": 1,
      "message": "Presumably these assertions should be removed\nin the final code: a) because these preconditions\nhave to be fulfilled in any case and b) checking\nthem requires CPU time.",
      "range": {
        "startLine": 585,
        "startChar": 1,
        "endLine": 587,
        "endChar": 2
      },
      "revId": "aff08139717406e183752734908b29bf098cf259",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fc30918d_ad6b3c83",
        "filename": "src/sort/sort.go",
        "patchSetId": 2
      },
      "lineNbr": 587,
      "author": {
        "id": 15048
      },
      "writtenOn": "2018-03-20T10:17:41Z",
      "side": 1,
      "message": "OK, will do.",
      "parentUuid": "2e2c86f3_73bb8c64",
      "range": {
        "startLine": 585,
        "startChar": 1,
        "endLine": 587,
        "endChar": 2
      },
      "revId": "aff08139717406e183752734908b29bf098cf259",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b9e6492a_74159c62",
        "filename": "src/sort/sort.go",
        "patchSetId": 2
      },
      "lineNbr": 657,
      "author": {
        "id": 5050
      },
      "writtenOn": "2018-03-20T09:53:27Z",
      "side": 1,
      "message": "These large blocks of commented out code make review harder\nthan necessary. Please remove.",
      "revId": "aff08139717406e183752734908b29bf098cf259",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b7762309_30cbb453",
        "filename": "src/sort/sort.go",
        "patchSetId": 2
      },
      "lineNbr": 657,
      "author": {
        "id": 15048
      },
      "writtenOn": "2018-03-20T10:17:41Z",
      "side": 1,
      "message": "Will do.",
      "parentUuid": "b9e6492a_74159c62",
      "revId": "aff08139717406e183752734908b29bf098cf259",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d282005f_727d8bb7",
        "filename": "src/sort/sort.go",
        "patchSetId": 2
      },
      "lineNbr": 1382,
      "author": {
        "id": 5050
      },
      "writtenOn": "2018-03-20T09:33:10Z",
      "side": 1,
      "message": "Nitpick: merge() calls quickSort with (as far as I understand it)\na potentially unbound input size and quicksort has an implicit stack\nspace requirement of O(log(n)) for the recursion.",
      "range": {
        "startLine": 1382,
        "startChar": 32,
        "endLine": 1382,
        "endChar": 66
      },
      "revId": "aff08139717406e183752734908b29bf098cf259",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c5fb11b8_8681fd9b",
        "filename": "src/sort/sort.go",
        "patchSetId": 2
      },
      "lineNbr": 1382,
      "author": {
        "id": 15048
      },
      "writtenOn": "2018-03-20T10:17:41Z",
      "side": 1,
      "message": "I could correct the \"O(1)\" note to O(sqrt(n)*whateverQuicksortTakesUp), or alternatively actually make it O(1) by changing the last argument to quickSort (recursion depth before calling heapsort). I guess the former would be preferable?",
      "parentUuid": "d282005f_727d8bb7",
      "range": {
        "startLine": 1382,
        "startChar": 32,
        "endLine": 1382,
        "endChar": 66
      },
      "revId": "aff08139717406e183752734908b29bf098cf259",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5258126b_10369ae1",
        "filename": "src/sort/sort.go",
        "patchSetId": 2
      },
      "lineNbr": 1382,
      "author": {
        "id": 5050
      },
      "writtenOn": "2018-03-20T12:58:37Z",
      "side": 1,
      "message": "Neither Sort() nor the original Stable() mentioned its space complexity.\nIt is just 256 bytes, so maybe drop it altogether.",
      "parentUuid": "c5fb11b8_8681fd9b",
      "range": {
        "startLine": 1382,
        "startChar": 32,
        "endLine": 1382,
        "endChar": 66
      },
      "revId": "aff08139717406e183752734908b29bf098cf259",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "895db28e_59f0f8ba",
        "filename": "src/sort/sort.go",
        "patchSetId": 2
      },
      "lineNbr": 1382,
      "author": {
        "id": 15048
      },
      "writtenOn": "2018-03-20T14:57:16Z",
      "side": 1,
      "message": "I put the correct (hopefully) asymptotic bound on space complexity in the latest patchsets.",
      "parentUuid": "5258126b_10369ae1",
      "range": {
        "startLine": 1382,
        "startChar": 32,
        "endLine": 1382,
        "endChar": 66
      },
      "revId": "aff08139717406e183752734908b29bf098cf259",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f9e3c2c3_c3315196",
        "filename": "src/sort/sort_test.go",
        "patchSetId": 2
      },
      "lineNbr": 483,
      "author": {
        "id": 5050
      },
      "writtenOn": "2018-03-20T09:33:10Z",
      "side": 1,
      "message": "Where do these numbers come from?\nEspecially the constant 64 extra swaps?\nNeglecting the constant: The new algorithm should\nuse less calls to Swap once 100/27\u003clg(n)/3 so\nsomewhere around 2000 elements.",
      "range": {
        "startLine": 483,
        "startChar": 64,
        "endLine": 483,
        "endChar": 77
      },
      "revId": "aff08139717406e183752734908b29bf098cf259",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2269e6a6_db4f8eaf",
        "filename": "src/sort/sort_test.go",
        "patchSetId": 2
      },
      "lineNbr": 483,
      "author": {
        "id": 15048
      },
      "writtenOn": "2018-03-20T10:17:41Z",
      "side": 1,
      "message": "The formula I got empirically by putting large sizes in the sizes slice of testBentleyMcIlroy (1\u003c\u003c16). The constant 64 swaps is just to neglect the small sizes, which is alright since this test serves to check asymptotic complexity.",
      "parentUuid": "f9e3c2c3_c3315196",
      "range": {
        "startLine": 483,
        "startChar": 64,
        "endLine": 483,
        "endChar": 77
      },
      "revId": "aff08139717406e183752734908b29bf098cf259",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7aa2f30b_eccd80a7",
        "filename": "src/sort/sort_test.go",
        "patchSetId": 2
      },
      "lineNbr": 483,
      "author": {
        "id": 5050
      },
      "writtenOn": "2018-03-20T12:58:37Z",
      "side": 1,
      "message": "testBentleyMcIlroy starts with n\u003d100 for which n lg n is 700.\nDoes the new algorithm have a constant offset?\nWill calling the new stable make 64 swaps in any case, even if\nn\u003d4? It simply looks suspicious. Sort and Heapsort (and the old\nStable) do not have a constant offset.\nThis does not check asymptotic complexity: What is checked is a\nhard upper bound for specific, n \u003c 1025.\n\nExperimenting a bit with the code indicates that the proper\nlimit would be n * lg(n) * 100 / 21 (BM with n from 100 to 100000).\n\nThis would make the new algorithm better for n \u003e 20\u0027000.\nPlaying around with CountStableOps I created the following graph\nhttps://drive.google.com/file/d/106pDFgCfhMEz_KiZ6_gqewNHT9U3Z5wz/view?usp\u003dsharing\nSo it seems as if the old and new algorithm do not differ on\nthe number of calls to Less (expected) and the new algorithm\nmakes less calls to Swap if n\u003e20\u0027000 (or n\u003c2\u0027000). For n\u003d1e8\nthe new algorithm makes only half as much calls to Swap then\nhe old one.\n\nUnfortunately I cannot confirm improvements on the running time\non darwin amd64.",
      "parentUuid": "2269e6a6_db4f8eaf",
      "range": {
        "startLine": 483,
        "startChar": 64,
        "endLine": 483,
        "endChar": 77
      },
      "revId": "aff08139717406e183752734908b29bf098cf259",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    }
  ]
}