{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "ddf89c26_7e6a9ad3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-05-08T07:57:16Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003d611e4f1a\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "611e4f1a870af7f734b07cbbc22ece32ac7bd7c5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6592b2b8_d542b3f8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-05-08T07:57:16Z",
      "side": 1,
      "message": "Superseded.",
      "parentUuid": "15f3fc8e_c6576a52",
      "tag": "autogenerated:trybots~beginning",
      "revId": "611e4f1a870af7f734b07cbbc22ece32ac7bd7c5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bf6552de_86faac9c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-05-08T08:07:52Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "ddf89c26_7e6a9ad3",
      "tag": "autogenerated:trybots~happy",
      "revId": "611e4f1a870af7f734b07cbbc22ece32ac7bd7c5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1109a4a5_4b2bdcf9",
        "filename": "src/os/os_windows_test.go",
        "patchSetId": 6
      },
      "lineNbr": 1388,
      "author": {
        "id": 6365
      },
      "writtenOn": "2023-05-10T16:32:08Z",
      "side": 1,
      "message": "(nit) This is a very long name. 😅\n\nCan we come up with a shorter example that still triggers the same behaviors?\n(It looks like a lot of the trailing codepoints are just ASCII characters...)",
      "revId": "611e4f1a870af7f734b07cbbc22ece32ac7bd7c5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0fadb978_13c9dfc2",
        "filename": "src/os/os_windows_test.go",
        "patchSetId": 6
      },
      "lineNbr": 1388,
      "author": {
        "id": 34993
      },
      "writtenOn": "2023-05-11T07:35:52Z",
      "side": 1,
      "message": "Sure!",
      "parentUuid": "1109a4a5_4b2bdcf9",
      "revId": "611e4f1a870af7f734b07cbbc22ece32ac7bd7c5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e5cacfb9_89472696",
        "filename": "src/os/os_windows_test.go",
        "patchSetId": 6
      },
      "lineNbr": 1396,
      "author": {
        "id": 6365
      },
      "writtenOn": "2023-05-10T16:32:08Z",
      "side": 1,
      "message": "This needs to also have a path separator to be within `t.TempDir()`, right?",
      "revId": "611e4f1a870af7f734b07cbbc22ece32ac7bd7c5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4acb735b_fc31cef4",
        "filename": "src/os/os_windows_test.go",
        "patchSetId": 6
      },
      "lineNbr": 1396,
      "author": {
        "id": 34993
      },
      "writtenOn": "2023-05-11T07:35:52Z",
      "side": 1,
      "message": "`dir` has a trailing path separator, so `dirw` will have it too.",
      "parentUuid": "e5cacfb9_89472696",
      "revId": "611e4f1a870af7f734b07cbbc22ece32ac7bd7c5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3b7b77d3_e0b0c67a",
        "filename": "src/os/os_windows_test.go",
        "patchSetId": 6
      },
      "lineNbr": 1403,
      "author": {
        "id": 6365
      },
      "writtenOn": "2023-05-10T16:32:08Z",
      "side": 1,
      "message": "Perhaps also verify that `os.ReadDir(dir)` lists the file?",
      "revId": "611e4f1a870af7f734b07cbbc22ece32ac7bd7c5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "55f06da8_b458a37d",
        "filename": "src/os/os_windows_test.go",
        "patchSetId": 6
      },
      "lineNbr": 1403,
      "author": {
        "id": 34993
      },
      "writtenOn": "2023-05-11T07:35:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3b7b77d3_e0b0c67a",
      "revId": "611e4f1a870af7f734b07cbbc22ece32ac7bd7c5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3372122c_6637a582",
        "filename": "src/os/os_windows_test.go",
        "patchSetId": 6
      },
      "lineNbr": 1406,
      "author": {
        "id": 6365
      },
      "writtenOn": "2023-05-10T16:32:08Z",
      "side": 1,
      "message": "Check that calling `.Name()` on the result converts back to the original basename?",
      "range": {
        "startLine": 1406,
        "startChar": 1,
        "endLine": 1406,
        "endChar": 2
      },
      "revId": "611e4f1a870af7f734b07cbbc22ece32ac7bd7c5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "68c9e76c_80c0f445",
        "filename": "src/os/os_windows_test.go",
        "patchSetId": 6
      },
      "lineNbr": 1406,
      "author": {
        "id": 34993
      },
      "writtenOn": "2023-05-11T07:35:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3372122c_6637a582",
      "range": {
        "startLine": 1406,
        "startChar": 1,
        "endLine": 1406,
        "endChar": 2
      },
      "revId": "611e4f1a870af7f734b07cbbc22ece32ac7bd7c5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7367930e_584db3ac",
        "filename": "src/syscall/syscall_windows.go",
        "patchSetId": 6
      },
      "lineNbr": 40,
      "author": {
        "id": 6365
      },
      "writtenOn": "2023-05-10T16:32:08Z",
      "side": 1,
      "message": "(nit) s/runes/sequences/ ?",
      "range": {
        "startLine": 40,
        "startChar": 53,
        "endLine": 40,
        "endChar": 58
      },
      "revId": "611e4f1a870af7f734b07cbbc22ece32ac7bd7c5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "05dd05ee_92c73207",
        "filename": "src/syscall/syscall_windows.go",
        "patchSetId": 6
      },
      "lineNbr": 40,
      "author": {
        "id": 34993
      },
      "writtenOn": "2023-05-11T07:35:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7367930e_584db3ac",
      "range": {
        "startLine": 40,
        "startChar": 53,
        "endLine": 40,
        "endChar": 58
      },
      "revId": "611e4f1a870af7f734b07cbbc22ece32ac7bd7c5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fbf9ce08_4295b2d8",
        "filename": "src/syscall/syscall_windows.go",
        "patchSetId": 6
      },
      "lineNbr": 41,
      "author": {
        "id": 6365
      },
      "writtenOn": "2023-05-10T16:32:08Z",
      "side": 1,
      "message": "Most invalid UTF-8 runes still go to the replacement character — only unpaired surrogates should be encoded using WTF-8.",
      "range": {
        "startLine": 40,
        "startChar": 39,
        "endLine": 41,
        "endChar": 15
      },
      "revId": "611e4f1a870af7f734b07cbbc22ece32ac7bd7c5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f5f372d2_8aad2074",
        "filename": "src/syscall/syscall_windows.go",
        "patchSetId": 6
      },
      "lineNbr": 41,
      "author": {
        "id": 34993
      },
      "writtenOn": "2023-05-11T07:35:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fbf9ce08_4295b2d8",
      "range": {
        "startLine": 40,
        "startChar": 39,
        "endLine": 41,
        "endChar": 15
      },
      "revId": "611e4f1a870af7f734b07cbbc22ece32ac7bd7c5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "12a2422a_379ee3c4",
        "filename": "src/syscall/syscall_windows.go",
        "patchSetId": 6
      },
      "lineNbr": 54,
      "author": {
        "id": 6365
      },
      "writtenOn": "2023-05-10T16:32:08Z",
      "side": 1,
      "message": "(nit) `utf16.AppendRune` with `\u0027\\x00\u0027` is equivalent to `buf \u003d append(buf, 0)`.\n\nIf we\u0027re not using `utf16.AppendRun` in the rest of the function, maybe do the direct `append` here too?",
      "range": {
        "startLine": 54,
        "startChar": 8,
        "endLine": 54,
        "endChar": 37
      },
      "revId": "611e4f1a870af7f734b07cbbc22ece32ac7bd7c5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a2b08b8d_b95cf260",
        "filename": "src/syscall/syscall_windows.go",
        "patchSetId": 6
      },
      "lineNbr": 54,
      "author": {
        "id": 34993
      },
      "writtenOn": "2023-05-11T07:35:52Z",
      "side": 1,
      "message": "Makes sense.",
      "parentUuid": "12a2422a_379ee3c4",
      "range": {
        "startLine": 54,
        "startChar": 8,
        "endLine": 54,
        "endChar": 37
      },
      "revId": "611e4f1a870af7f734b07cbbc22ece32ac7bd7c5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a0a45c6e_0e1512c7",
        "filename": "src/syscall/syscall_windows.go",
        "patchSetId": 6
      },
      "lineNbr": 54,
      "author": {
        "id": 34993
      },
      "writtenOn": "2023-05-11T07:36:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a2b08b8d_b95cf260",
      "range": {
        "startLine": 54,
        "startChar": 8,
        "endLine": 54,
        "endChar": 37
      },
      "revId": "611e4f1a870af7f734b07cbbc22ece32ac7bd7c5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fe9f8a25_78ff22cf",
        "filename": "src/syscall/syscall_windows.go",
        "patchSetId": 6
      },
      "lineNbr": 58,
      "author": {
        "id": 6365
      },
      "writtenOn": "2023-05-10T16:32:08Z",
      "side": 1,
      "message": "(nit) s/characters/sequences/ ?",
      "range": {
        "startLine": 58,
        "startChar": 50,
        "endLine": 58,
        "endChar": 60
      },
      "revId": "611e4f1a870af7f734b07cbbc22ece32ac7bd7c5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "379774ce_6a9c4b43",
        "filename": "src/syscall/syscall_windows.go",
        "patchSetId": 6
      },
      "lineNbr": 58,
      "author": {
        "id": 34993
      },
      "writtenOn": "2023-05-11T07:35:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fe9f8a25_78ff22cf",
      "range": {
        "startLine": 58,
        "startChar": 50,
        "endLine": 58,
        "endChar": 60
      },
      "revId": "611e4f1a870af7f734b07cbbc22ece32ac7bd7c5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "372d0cc1_809d40fa",
        "filename": "src/syscall/syscall_windows.go",
        "patchSetId": 6
      },
      "lineNbr": 59,
      "author": {
        "id": 6365
      },
      "writtenOn": "2023-05-10T16:32:08Z",
      "side": 1,
      "message": "(nit) Perhaps “Unpaired surrogates” instead of “Invalid UTF-16 characters”, to be a bit more precise about what we mean?",
      "range": {
        "startLine": 58,
        "startChar": 35,
        "endLine": 59,
        "endChar": 41
      },
      "revId": "611e4f1a870af7f734b07cbbc22ece32ac7bd7c5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "866023f9_4b33587f",
        "filename": "src/syscall/syscall_windows.go",
        "patchSetId": 6
      },
      "lineNbr": 59,
      "author": {
        "id": 34993
      },
      "writtenOn": "2023-05-11T07:35:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "372d0cc1_809d40fa",
      "range": {
        "startLine": 58,
        "startChar": 35,
        "endLine": 59,
        "endChar": 41
      },
      "revId": "611e4f1a870af7f734b07cbbc22ece32ac7bd7c5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0ae80725_f252f5f4",
        "filename": "src/syscall/syscall_windows.go",
        "patchSetId": 6
      },
      "lineNbr": 84,
      "author": {
        "id": 6365
      },
      "writtenOn": "2023-05-10T16:32:08Z",
      "side": 1,
      "message": "(comment out of date)",
      "revId": "611e4f1a870af7f734b07cbbc22ece32ac7bd7c5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8faded93_a4c6059f",
        "filename": "src/syscall/syscall_windows.go",
        "patchSetId": 6
      },
      "lineNbr": 84,
      "author": {
        "id": 34993
      },
      "writtenOn": "2023-05-11T07:35:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0ae80725_f252f5f4",
      "revId": "611e4f1a870af7f734b07cbbc22ece32ac7bd7c5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2455ebff_a5f6d416",
        "filename": "src/syscall/syscall_windows.go",
        "patchSetId": 6
      },
      "lineNbr": 86,
      "author": {
        "id": 6365
      },
      "writtenOn": "2023-05-10T16:32:08Z",
      "side": 1,
      "message": "Why 64?\n\nSince the UTF-16 strings are often going to be ASCII, maybe start with `len(s)` instead?\n\nOr, better still: since we\u0027re scanning the whole string to compute `n` anyway, maybe sum up the length while we do that?\n\n```\nconst (\n\trune1Max \u003d 1\u003c\u003c7 - 1\n\trune2Max \u003d 1\u003c\u003c11 - 1\n)\n\nend :\u003d unsafe.Pointer(p)\nn :\u003d 0\ndecodedLen :\u003d 0\nfor r :\u003d *(*uint16)(end); r !\u003d 0 {\n\tswitch {\n\tcase r \u003c\u003d rune1Max:\n\t\tdecoded +\u003d 1\n\tcase r \u003c\u003d rune2Max:\n\t\tdecoded +\u003d  2\n\tdefault:\n\t\t// r is a non-surrogate that decodes to 3 bytes,\n\t\t// or is an unpaired surrogate (also 3 bytes in WTF-8),\n\t\t// or is one half of a valid surrogate pair.\n\t\t// If it is half of a pair, we will add 3 for the second surrogate\n\t\t// (total of 6) and overestimate by 2 bytes for the pair,\n\t\t// since the resulting rune only requires 4 bytes.\n\t\tdecoded +\u003d 3\n\t}\n\tend \u003d unsafe.Add(end, unsafe.Sizeof(*p))\n\tn++\n}\nbuf :\u003d make([]byte, 0, decodedLen)\n```",
      "range": {
        "startLine": 86,
        "startChar": 24,
        "endLine": 86,
        "endChar": 26
      },
      "revId": "611e4f1a870af7f734b07cbbc22ece32ac7bd7c5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "652260a7_f18bc3fe",
        "filename": "src/syscall/syscall_windows.go",
        "patchSetId": 6
      },
      "lineNbr": 86,
      "author": {
        "id": 34993
      },
      "writtenOn": "2023-05-11T07:35:52Z",
      "side": 1,
      "message": "`64` doesn\u0027t have any special meaning, it was there to avoid escaping `buf` for small inputs, which are quite common in the runtime. Calculating `n` in advance also has it\u0027s advantages, though, as we are sure that we will only allocate once. Thoughts?",
      "parentUuid": "2455ebff_a5f6d416",
      "range": {
        "startLine": 86,
        "startChar": 24,
        "endLine": 86,
        "endChar": 26
      },
      "revId": "611e4f1a870af7f734b07cbbc22ece32ac7bd7c5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a73be256_86cdad4d",
        "filename": "src/syscall/wtf8_windows.go",
        "patchSetId": 6
      },
      "lineNbr": 53,
      "author": {
        "id": 6365
      },
      "writtenOn": "2023-05-10T16:32:08Z",
      "side": 1,
      "message": "Table 3 at https://simonsapin.github.io/wtf-8/#generalized-utf8 shows some additional constraints on well-formed WTF-8. In particular, it prohibits overlong encodings and 2nd or 3rd bytes outside of the continuation-byte range.\n\nMoreover, `utf8.DecodeRuneInString` only rejects a valid WTF-8 sequence if the sequence represents a surrogate code point, and per Table 1 (https://simonsapin.github.io/wtf-8/#surrogates-byte-sequences) the WTF-8 encoding of a surrogate always begins with 0xED followed by a byte in the range [0xA0, 0xBF].\n\nSo I think that would be something like:\n```\nif sc :\u003d s[i:]; len(sc) \u003e\u003d 3 \u0026\u0026 sc[0] \u003d\u003d 0xED \u0026\u0026 0xA0 \u003c\u003d sc[1] \u0026\u0026 sc[1] \u003c\u003d 0xBF \u0026\u0026 0x80 \u003c\u003d sc[2] \u0026\u0026 sc[2] \u003c\u003d 0xBF {\n\t…\n}\n```\n\nThat would preserve the behavior of appending the Unicode replacement character for 3-byte encodings that are not valid surrogate byte sequences.",
      "range": {
        "startLine": 53,
        "startChar": 22,
        "endLine": 53,
        "endChar": 44
      },
      "revId": "611e4f1a870af7f734b07cbbc22ece32ac7bd7c5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "72480dad_ad517650",
        "filename": "src/syscall/wtf8_windows.go",
        "patchSetId": 6
      },
      "lineNbr": 53,
      "author": {
        "id": 34993
      },
      "writtenOn": "2023-05-11T07:35:52Z",
      "side": 1,
      "message": "Good catch!",
      "parentUuid": "a73be256_86cdad4d",
      "range": {
        "startLine": 53,
        "startChar": 22,
        "endLine": 53,
        "endChar": 44
      },
      "revId": "611e4f1a870af7f734b07cbbc22ece32ac7bd7c5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}