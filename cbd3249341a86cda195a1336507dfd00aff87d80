{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "260a38ca_19ace930",
        "filename": "src/runtime/asm_wasm.s",
        "patchSetId": 4
      },
      "lineNbr": 560,
      "author": {
        "id": 12980
      },
      "writtenOn": "2024-08-09T06:39:38Z",
      "side": 1,
      "message": "If I\u0027m understanding correctly, wasm_pc_f_loop is always the \"top level\" entry point that ends up calling main.main, while wasm_pc_f_loop_until is used for other wasmexport functions.\n\n- Could we simplify by expressing wasm_pc_f_loop in terms of wasm_pc_f_loop_until, passing the PC of main.main? (potentially never reached since proc_exit would be called?)\n\n- If we keep both functions, maybe we could edit the names to better reflect the intent (e.g., wasm_pc_f_loop_main, wasm_pc_f_loop_export)?\n\nI don\u0027t hold strong opinions on either; I just wanted to bring it up in case we think these could be useful changes to make.",
      "revId": "cbd3249341a86cda195a1336507dfd00aff87d80",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e3a0435_65c6e624",
        "filename": "src/runtime/asm_wasm.s",
        "patchSetId": 4
      },
      "lineNbr": 560,
      "author": {
        "id": 13315
      },
      "writtenOn": "2024-08-09T17:01:32Z",
      "side": 1,
      "message": "\u003e Could we simplify by expressing wasm_pc_f_loop in terms of wasm_pc_f_loop_until,\n\nMaybe. I could pass a nonexistent PC to simulate wasm_pc_f_loop. But then we always need an extra comparison which is not needed for the non-export case. Not sure if that performance matters, but it complicates the code (has to load the PC twice).\n\nI can rename them.",
      "parentUuid": "260a38ca_19ace930",
      "revId": "cbd3249341a86cda195a1336507dfd00aff87d80",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cc3da47c_bb634e86",
        "filename": "src/runtime/asm_wasm.s",
        "patchSetId": 4
      },
      "lineNbr": 560,
      "author": {
        "id": 12980
      },
      "writtenOn": "2024-08-09T17:43:35Z",
      "side": 1,
      "message": "OK, let\u0027s keep it two functions, a little copying is better at this stage.",
      "parentUuid": "1e3a0435_65c6e624",
      "revId": "cbd3249341a86cda195a1336507dfd00aff87d80",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "94a1cb30_0ab58ec1",
        "filename": "src/runtime/asm_wasm.s",
        "patchSetId": 4
      },
      "lineNbr": 560,
      "author": {
        "id": 13315
      },
      "writtenOn": "2024-08-09T18:37:42Z",
      "side": 1,
      "message": "Renamed wasm_pc_f_loop_until to wasm_pc_f_loop_export.\n\nLeaving wasm_pc_f_loop unchanged for now, as apparently js/wasm calls it not just for the top level entry point, but also for handling events. The event handling semantics there is that it lets the runtime run as many runnable goroutines as possible, and return when there is no work to do. This is different than the proposed semantic for wasmexport (return to the host when the export function returns), so we can\u0027t simply reuse that.",
      "parentUuid": "cc3da47c_bb634e86",
      "revId": "cbd3249341a86cda195a1336507dfd00aff87d80",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}