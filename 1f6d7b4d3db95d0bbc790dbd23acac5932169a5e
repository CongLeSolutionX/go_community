{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "54070870_91aea3eb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 34636
      },
      "writtenOn": "2022-02-02T21:10:25Z",
      "side": 1,
      "message": "Missed one of the files in the upload. Would someone be kind enough to kick off the robots again? Thanks!",
      "revId": "1f6d7b4d3db95d0bbc790dbd23acac5932169a5e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "16f4fc87_f9aee7fd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-02-02T21:37:36Z",
      "side": 1,
      "message": "SlowBots beginning. Status page: https://farmer.golang.org/try?commit\u003d1f6d7b4d",
      "tag": "autogenerated:trybots~beginning",
      "revId": "1f6d7b4d3db95d0bbc790dbd23acac5932169a5e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b45c484d_29753ca3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-02-02T21:53:50Z",
      "side": 1,
      "message": "SlowBots are happy.\n\nSlowBot builds that ran:\n* linux-amd64-nocgo\n",
      "parentUuid": "16f4fc87_f9aee7fd",
      "tag": "autogenerated:trybots~happy",
      "revId": "1f6d7b4d3db95d0bbc790dbd23acac5932169a5e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fd269a27_a0ad4ade",
        "filename": "src/runtime/signal_unix.go",
        "patchSetId": 4
      },
      "lineNbr": 599,
      "author": {
        "id": 5167
      },
      "writtenOn": "2022-02-02T21:42:45Z",
      "side": 1,
      "message": "I think this should be guarded by sig \u003d\u003d sigPreempt.",
      "revId": "1f6d7b4d3db95d0bbc790dbd23acac5932169a5e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b93d2f24_a61bbebe",
        "filename": "src/runtime/signal_unix.go",
        "patchSetId": 4
      },
      "lineNbr": 599,
      "author": {
        "id": 34636
      },
      "writtenOn": "2022-02-02T23:24:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fd269a27_a0ad4ade",
      "revId": "1f6d7b4d3db95d0bbc790dbd23acac5932169a5e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "85f98999_9997948e",
        "filename": "src/syscall/syscall_linux_test.go",
        "patchSetId": 4
      },
      "lineNbr": 568,
      "author": {
        "id": 5167
      },
      "writtenOn": "2022-02-02T21:42:45Z",
      "side": 1,
      "message": "I wound up tidying up this test as I was writing my own version of this CL to better understand the constraints. This version is a little more robust in various ways and avoids depending on poller side effects.\n\n// TestAllThreadsSyscallBlockedSyscall confirms that AllThreadsSyscall\n// can interrupt threads in long-running system calls. This test will\n// deadlock if this doesn\u0027t work correctly.\nfunc TestAllThreadsSyscallBlockedSyscall(t *testing.T) {\n\tif _, _, err :\u003d syscall.AllThreadsSyscall(syscall.SYS_PRCTL, PR_SET_KEEPCAPS, 0, 0); err \u003d\u003d syscall.ENOTSUP {\n\t\tt.Skip(\"AllThreadsSyscall disabled with cgo\")\n\t}\n\n\trd, wr, err :\u003d os.Pipe()\n\tif err !\u003d nil {\n\t\tt.Fatalf(\"unable to obtain a pipe: %v\", err)\n\t}\n\tdefer wr.Close()\n\n\t// Perform a blocking read on the pipe.\n\tvar wg sync.WaitGroup\n\tready :\u003d make(chan bool)\n\twg.Add(1)\n\tgo func() {\n\t\tdata :\u003d make([]byte, 1)\n\n\t\t// To narrow the window we have to wait for this\n\t\t// goroutine to block in read, synchronize just before\n\t\t// calling read.\n\t\tready \u003c- true\n\n\t\t// We use syscall.Read directly to avoid the poller.\n\t\t// This will return when the write side is closed.\n\t\tn, err :\u003d syscall.Read(int(rd.Fd()), data)\n\t\tif !(n \u003d\u003d 0 \u0026\u0026 err \u003d\u003d nil) {\n\t\t\tt.Errorf(\"expected read to return 0, got %d, %s\", n, err)\n\t\t}\n\n\t\t// Clean up rd and also ensure rd stays reachable so\n\t\t// it doesn\u0027t get closed by GC.\n\t\trd.Close()\n\t\twg.Done()\n\t}()\n\t\u003c-ready\n\n\t// Loop here to give the goroutine more time to block in read.\n\t// Generally this will trigger on the first iteration anyway.\n\tpid :\u003d syscall.Getpid()\n\tfor i :\u003d 0; i \u003c 100; i++ {\n\t\tif id, _, e :\u003d syscall.AllThreadsSyscall(syscall.SYS_GETPID, 0, 0, 0); e !\u003d 0 {\n\t\t\tt.Errorf(\"[%d] getpid failed: %v\", i, e)\n\t\t} else if int(id) !\u003d pid {\n\t\t\tt.Errorf(\"[%d] getpid got\u003d%d, want\u003d%d\", i, id, pid)\n\t\t}\n\t\t// Provide an explicit opportunity for this goroutine\n\t\t// to change Ms.\n\t\truntime.Gosched()\n\t}\n\n\twg.Wait()\n}",
      "revId": "1f6d7b4d3db95d0bbc790dbd23acac5932169a5e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e6b7137c_e4690e68",
        "filename": "src/syscall/syscall_linux_test.go",
        "patchSetId": 4
      },
      "lineNbr": 568,
      "author": {
        "id": 5167
      },
      "writtenOn": "2022-02-02T21:44:03Z",
      "side": 1,
      "message": "Well that formatted strangely.\n\nhttps://gist.github.com/aclements/d41e6da37c578db8394fa08277707670",
      "parentUuid": "85f98999_9997948e",
      "revId": "1f6d7b4d3db95d0bbc790dbd23acac5932169a5e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cfca1822_61def461",
        "filename": "src/syscall/syscall_linux_test.go",
        "patchSetId": 4
      },
      "lineNbr": 568,
      "author": {
        "id": 34636
      },
      "writtenOn": "2022-02-02T23:24:37Z",
      "side": 1,
      "message": "As written, it appears that this version deadlocks on its own. I\u0027ve had to replace the `defer wr.Close()` with a serialized `wr.Close()` just before the `wg.Wait()`.",
      "parentUuid": "e6b7137c_e4690e68",
      "revId": "1f6d7b4d3db95d0bbc790dbd23acac5932169a5e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}