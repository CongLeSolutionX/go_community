{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "c7cd6eb3_d4885fa1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 13
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-10-25T09:35:28Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003d08e79f1a",
      "tag": "autogenerated:trybots~beginning",
      "revId": "08e79f1a031214aa49732f0bdab247b27df1f962",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a6362cee_944ddf4a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 13
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-10-25T09:35:28Z",
      "side": 1,
      "message": "Superseded.",
      "parentUuid": "11e6f655_745b8b4c",
      "tag": "autogenerated:trybots~beginning",
      "revId": "08e79f1a031214aa49732f0bdab247b27df1f962",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "18e4e654_6fe247be",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 13
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-10-25T09:47:04Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "c7cd6eb3_d4885fa1",
      "tag": "autogenerated:trybots~happy",
      "revId": "08e79f1a031214aa49732f0bdab247b27df1f962",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "594c79b2_1aa29e11",
        "filename": "src/runtime/malloc.go",
        "patchSetId": 13
      },
      "lineNbr": 1143,
      "author": {
        "id": 5206
      },
      "writtenOn": "2021-10-25T22:57:30Z",
      "side": 1,
      "message": "Can now use unsafe.Add here.",
      "revId": "08e79f1a031214aa49732f0bdab247b27df1f962",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6da98ddf_4c946c82",
        "filename": "src/runtime/malloc.go",
        "patchSetId": 13
      },
      "lineNbr": 1143,
      "author": {
        "id": 21345
      },
      "writtenOn": "2021-10-26T06:06:50Z",
      "side": 1,
      "message": "Good suggestion! Done. Thank you.",
      "parentUuid": "594c79b2_1aa29e11",
      "revId": "08e79f1a031214aa49732f0bdab247b27df1f962",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dfa1598d_513074ae",
        "filename": "src/runtime/malloc.go",
        "patchSetId": 13
      },
      "lineNbr": 1144,
      "author": {
        "id": 5206
      },
      "writtenOn": "2021-10-25T22:57:30Z",
      "side": 1,
      "message": "We only add a red zone at the end of the allocation?  Why no red zone at the start of the allocation?",
      "revId": "08e79f1a031214aa49732f0bdab247b27df1f962",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3167edfa_01b1f305",
        "filename": "src/runtime/malloc.go",
        "patchSetId": 13
      },
      "lineNbr": 1144,
      "author": {
        "id": 21345
      },
      "writtenOn": "2021-10-26T06:06:50Z",
      "side": 1,
      "message": "If we add a red zone at the start of the allocation, the runtime.SetFinalizer will report error \"runtime.SetFinalizer: pointer not at beginning of allocated block\". So the implementation adds a red zone at the end of the allocation istead of adding it at the start of the allocation like clang does, but it can also detect overflows or underflows. Thank you.",
      "parentUuid": "dfa1598d_513074ae",
      "revId": "08e79f1a031214aa49732f0bdab247b27df1f962",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7653bc2d_c9c32dc4",
        "filename": "src/runtime/malloc.go",
        "patchSetId": 13
      },
      "lineNbr": 1144,
      "author": {
        "id": 21345
      },
      "writtenOn": "2021-10-26T07:36:08Z",
      "side": 1,
      "message": "The above reply is incorrect. Not adding a red zone at the start of the allocation may cause -asan to fail to detect underflows. For the following case, memory access errors can only reportes by -asan option randomly.\n\npackage main\n\n/*\n#include \u003cstdlib.h\u003e\n#include \u003cstdio.h\u003e\n\nvoid test(int *a) {\n        int *q \u003d a-1;\n        // underflow\n        *q \u003d 10;        // BOOM.\n        // We shouldn\u0027t get here; asan should stop us first.\n        printf(\"a[-1]\u003d%d\\n\", *q);\n}\n*/\nimport \"C\"\n\nfunc main() {\n        cIntSlice :\u003d []C.int{200, 201, 202, 203}\n        C.test(\u0026cIntSlice[0])\n}\n\nBecause I am not familiar with the mechanism of finalizer, I do not know if it is doable to close this check when -asan is enabled. \n\nDo you have any good suggestions? Thank you.",
      "parentUuid": "3167edfa_01b1f305",
      "revId": "08e79f1a031214aa49732f0bdab247b27df1f962",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5cea1ce8_efe6dfb2",
        "filename": "src/runtime/malloc.go",
        "patchSetId": 13
      },
      "lineNbr": 1144,
      "author": {
        "id": 28792
      },
      "writtenOn": "2021-10-26T22:55:54Z",
      "side": 1,
      "message": "I would wonder if you could update the \"pointer not at beginning of allocated block\" check in SetFinalizer to allow it to proceed when asan is enabled if \u0027uintptr(e.data)\u0027 matches \u0027base\u0027 after adjusting for the size of the leading redzone? If so, one approach might be to compute the size of the leading redzone from \u0027ot.elem.size\u0027. Or maybe there is another way. There are at least some hints that the rest of the finalizer mechanisms might be OK pointing at an inner byte of the allocated object.\n\nhttps://github.com/golang/go/blob/80be4a4f90836a33ab5b3d09c6f529de8ee628ea/src/runtime/mfinal.go#L379-L384\n\nThat said, this is just a quick comment and a good chance it might not be correct. \n\nAs such, you might want some advice from Ian or others before trying that.",
      "parentUuid": "7653bc2d_c9c32dc4",
      "revId": "08e79f1a031214aa49732f0bdab247b27df1f962",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4a69e6e8_2cb4f481",
        "filename": "src/runtime/malloc.go",
        "patchSetId": 13
      },
      "lineNbr": 1156,
      "author": {
        "id": 5206
      },
      "writtenOn": "2021-10-25T22:57:30Z",
      "side": 1,
      "message": "Remove unrelated whitespace change.",
      "revId": "08e79f1a031214aa49732f0bdab247b27df1f962",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a2c3a966_d44f9bde",
        "filename": "src/runtime/malloc.go",
        "patchSetId": 13
      },
      "lineNbr": 1156,
      "author": {
        "id": 21345
      },
      "writtenOn": "2021-10-26T06:06:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4a69e6e8_2cb4f481",
      "revId": "08e79f1a031214aa49732f0bdab247b27df1f962",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}