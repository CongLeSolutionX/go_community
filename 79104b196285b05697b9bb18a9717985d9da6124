{
  "comments": [
    {
      "key": {
        "uuid": "4e27f498_01671922",
        "filename": "src/cmd/pprof/internal/symbolizer/symbolizer.go",
        "patchSetId": 1
      },
      "lineNbr": 203,
      "author": {
        "id": 10031
      },
      "writtenOn": "2016-04-11T16:38:31Z",
      "side": 1,
      "message": "I think this belongs on profile/legacy_profile.go as part of reading the profile.\n\nI\u0027d like to keep all parsing of legacy profiles on that file.",
      "revId": "79104b196285b05697b9bb18a9717985d9da6124",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0b06ce0a_a2ab9a99",
        "filename": "src/cmd/pprof/internal/symbolizer/symbolizer.go",
        "patchSetId": 1
      },
      "lineNbr": 203,
      "author": {
        "id": 5400
      },
      "writtenOn": "2016-04-11T16:51:06Z",
      "side": 1,
      "message": "That\u0027s what I tried first.\nBut in Go legacy profiles are not all that legacy, and I did not want to affect main usage mode (which is to pass a profile and a binary). I am not sure what will be the outcome if I pass both a profile with symbolization info and a binary. I suspect that we can have line info twice (as current symbolization will just append to slices), or maybe the inline symbolization info is not precise or bogus in some way (nobody tested it).\nFor background: I want to use this new mode from trace tool, it generates pprof profiles and I want to emit symbolization info into them. This is completely orthogonal to normal usage mode, and I don\u0027t want them to correlate.\nCan you suggest a way to strictly separate current behavior and this new mode?\nI also considered adding a new --symbolize flag mode. But I decided that not adding flags is better than adding flags.",
      "parentUuid": "4e27f498_01671922",
      "revId": "79104b196285b05697b9bb18a9717985d9da6124",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4e27f498_41b11154",
        "filename": "src/cmd/pprof/internal/symbolizer/symbolizer.go",
        "patchSetId": 1
      },
      "lineNbr": 203,
      "author": {
        "id": 10031
      },
      "writtenOn": "2016-04-11T17:39:48Z",
      "side": 1,
      "message": "If the trace tool is a new tool, independent of the runtime, I\u0027d recommend having it generate the profile in profile.proto. That way it can include symbol information and you will not need to make any changes to pprof.\n\nYou can use the code from pprof to encode the profile. I\u0027d be glad to help out as it is a step forward on the long term direction of switching all profiles to profile.proto.",
      "parentUuid": "0b06ce0a_a2ab9a99",
      "revId": "79104b196285b05697b9bb18a9717985d9da6124",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0b06ce0a_42e3b6be",
        "filename": "src/cmd/pprof/internal/symbolizer/symbolizer.go",
        "patchSetId": 1
      },
      "lineNbr": 203,
      "author": {
        "id": 5400
      },
      "writtenOn": "2016-04-11T18:31:51Z",
      "side": 1,
      "message": "The tool appeared in 1.5, but we can change the format.\nIt generates relatively simple profiles:\nhttps://github.com/golang/go/blob/master/src/cmd/trace/pprof.go#L138\nThe profiles are not exactly \"contentionz\", but pretending that they are contentionz works well.\nCan you point to an example of code that generates proto profiles?",
      "parentUuid": "4e27f498_41b11154",
      "revId": "79104b196285b05697b9bb18a9717985d9da6124",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8b3abef4_861c6e02",
        "filename": "src/cmd/pprof/internal/symbolizer/symbolizer.go",
        "patchSetId": 1
      },
      "lineNbr": 203,
      "author": {
        "id": 10031
      },
      "writtenOn": "2016-04-12T00:10:28Z",
      "side": 1,
      "message": "The best example is on pprof itself:\nhttps://github.com/golang/go/blob/master/src/cmd/pprof/internal/profile/profile.go\n\nPopulate a Profile struct with the data and then call Profile.Write(). You can set a more accurate sample type for it, no need to pretend it is a contention profile. Include the symbol information in the Profile.Location fields.\n\nThe profile package is internal to the pprof command, so you\u0027d have to either make a copy of it inside src/cmd/trace or copy it somewhere more widely accessible.",
      "parentUuid": "0b06ce0a_42e3b6be",
      "revId": "79104b196285b05697b9bb18a9717985d9da6124",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cbccb67f_a2cb3e70",
        "filename": "src/cmd/pprof/internal/symbolizer/symbolizer.go",
        "patchSetId": 1
      },
      "lineNbr": 203,
      "author": {
        "id": 5400
      },
      "writtenOn": "2016-04-12T08:26:18Z",
      "side": 1,
      "message": "Mailed https://go-review.googlesource.com/#/c/21870/ to move cmd/pprof/internal to cmd/internal/pprof.\n\nIf I import the package and populate Profile struct, then it makes sense to just generate svg programmatically in-memory instead of invoking pprof command. Need to figure out how to do it.",
      "parentUuid": "8b3abef4_861c6e02",
      "revId": "79104b196285b05697b9bb18a9717985d9da6124",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8b3abef4_9ab2fd06",
        "filename": "src/cmd/pprof/internal/symbolizer/symbolizer.go",
        "patchSetId": 1
      },
      "lineNbr": 203,
      "author": {
        "id": 10031
      },
      "writtenOn": "2016-04-12T15:12:40Z",
      "side": 1,
      "message": "I would recommend against creating the SVG programmatically yourself. You\u0027ll have to import a big chunk of pprof in order to do that, at a minimum the report and graph packages. I think you\u0027re better off invoking pprof for that like you\u0027ve been doing.",
      "parentUuid": "cbccb67f_a2cb3e70",
      "revId": "79104b196285b05697b9bb18a9717985d9da6124",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}