{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "0580ccd2_09bb8a0e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5440
      },
      "writtenOn": "2021-06-18T06:38:25Z",
      "side": 1,
      "message": "[+Cherry for real this time]\n\nCherry: For context, today the `cgo -dynimport` tool writes //go:cgo_* directives that cmd/compile copies into its .o output. Only the linker cares about those directives, so having them as cmd/compile inputs unnecessarily limits build parallelism.\n\nThis CL is trying to improve that by having `cgo -dynimport` directly write out a .o file that the linker can process. But the minimal .o file it\u0027s currently writing out is crashing the linker.\n\nI suspect including an empty (i.e., 0 LSym) object data section might work, but I also thought we should check with you first in case you have a better suggestion. Thanks.",
      "revId": "2f9e2b5185b4f73dfc16c483768adc8fde0082b2",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6a1b8d60_eb524164",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 13315
      },
      "writtenOn": "2021-06-21T16:43:43Z",
      "side": 1,
      "message": "Thanks. I haven\u0027t looked into the detail of this CL very carefully. My guess is that currently the linker assumes every Go object contains a linker object (i.e. symbols). It might make sense to skip empty linker objects, like\n\ndiff --git a/src/cmd/link/internal/loader/loader.go b/src/cmd/link/internal/loader/loader.go\nindex efca824d98..79541e24ad 100644\n--- a/src/cmd/link/internal/loader/loader.go\n+++ b/src/cmd/link/internal/loader/loader.go\n@@ -2067,6 +2067,9 @@ func (l *Loader) FuncInfo(i Sym) FuncInfo {\n // Does not read symbol data.\n // Returns the fingerprint of the object.\n func (l *Loader) Preload(localSymVersion int, f *bio.Reader, lib *sym.Library, unit *sym.CompilationUnit, length int64) goobj.FingerprintType {\n+\tif length \u003d\u003d 0 {\n+\t\treturn goobj.FingerprintType{}\n+\t}\n \troObject, readonly, err :\u003d f.Slice(uint64(length)) // TODO: no need to map blocks that are for tools only (e.g. RefName)\n \tif err !\u003d nil {\n \t\tlog.Fatal(\"cannot read object file:\", err)",
      "parentUuid": "0580ccd2_09bb8a0e",
      "revId": "2f9e2b5185b4f73dfc16c483768adc8fde0082b2",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}