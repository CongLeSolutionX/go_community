{
  "comments": [
    {
      "key": {
        "uuid": "fd1b7042_e648e46c",
        "filename": "src/cmd/go/internal/modget/get.go",
        "patchSetId": 3
      },
      "lineNbr": 61,
      "author": {
        "id": 28792
      },
      "writtenOn": "2019-06-11T15:06:10Z",
      "side": 1,
      "message": "Should this section be updated to mention it won’t downgrade? Or maybe that is covered elsewhere, or too detailed?",
      "revId": "8f24edda451aea39280e5610022c1227ae5083bf",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "703cdc54_d90164fb",
        "filename": "src/cmd/go/internal/modget/get.go",
        "patchSetId": 3
      },
      "lineNbr": 61,
      "author": {
        "id": 17092
      },
      "writtenOn": "2019-06-11T22:25:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fd1b7042_e648e46c",
      "revId": "8f24edda451aea39280e5610022c1227ae5083bf",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "59752faa_0b7a43f0",
        "filename": "src/cmd/go/internal/modget/get.go",
        "patchSetId": 3
      },
      "lineNbr": 369,
      "author": {
        "id": 6365
      },
      "writtenOn": "2019-06-07T19:07:25Z",
      "side": 1,
      "message": "Unfortunately, I think this is only true to a first approximation: a `replace` directive can re-point a dotless module path to some other repository or filesystem path, even if that module is not already in the build list.",
      "range": {
        "startLine": 368,
        "startChar": 0,
        "endLine": 369,
        "endChar": 15
      },
      "revId": "8f24edda451aea39280e5610022c1227ae5083bf",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8e79c0af_049252c4",
        "filename": "src/cmd/go/internal/modget/get.go",
        "patchSetId": 3
      },
      "lineNbr": 369,
      "author": {
        "id": 17092
      },
      "writtenOn": "2019-06-11T22:25:32Z",
      "side": 1,
      "message": "Should the comment be reworded or is a code change needed here?\n\nWe aren\u0027t really looking at replace directives in this code. ImportPathsQuiet and anything else that loads packages will respect replace directives, but getQuery, UpgradeAll, and Downgrade won\u0027t.",
      "parentUuid": "59752faa_0b7a43f0",
      "range": {
        "startLine": 368,
        "startChar": 0,
        "endLine": 369,
        "endChar": 15
      },
      "revId": "8f24edda451aea39280e5610022c1227ae5083bf",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5ddb0577_432ce197",
        "filename": "src/cmd/go/internal/modget/get.go",
        "patchSetId": 3
      },
      "lineNbr": 369,
      "author": {
        "id": 6365
      },
      "writtenOn": "2019-06-12T18:44:18Z",
      "side": 1,
      "message": "\u003e Should the comment be reworded or is a code change needed here?\n\nI\u0027m not sure. Mostly I don\u0027t really understand the function of the code here: why is it harmful to query a dotless package?",
      "parentUuid": "8e79c0af_049252c4",
      "range": {
        "startLine": 368,
        "startChar": 0,
        "endLine": 369,
        "endChar": 15
      },
      "revId": "8f24edda451aea39280e5610022c1227ae5083bf",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "338cc062_1789e29a",
        "filename": "src/cmd/go/internal/modget/get.go",
        "patchSetId": 3
      },
      "lineNbr": 406,
      "author": {
        "id": 6365
      },
      "writtenOn": "2019-06-07T19:07:25Z",
      "side": 1,
      "message": "Combine this explanation with the “Add missing modules” comment at line 399?\n\n(This clause explains why we need to add the missing modules.)",
      "range": {
        "startLine": 406,
        "startChar": 34,
        "endLine": 406,
        "endChar": 82
      },
      "revId": "8f24edda451aea39280e5610022c1227ae5083bf",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bb86568d_b6e5e42d",
        "filename": "src/cmd/go/internal/modget/get.go",
        "patchSetId": 3
      },
      "lineNbr": 406,
      "author": {
        "id": 17092
      },
      "writtenOn": "2019-06-11T22:25:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "338cc062_1789e29a",
      "range": {
        "startLine": 406,
        "startChar": 34,
        "endLine": 406,
        "endChar": 82
      },
      "revId": "8f24edda451aea39280e5610022c1227ae5083bf",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9822a1e4_aef5ba58",
        "filename": "src/cmd/go/internal/modget/get.go",
        "patchSetId": 3
      },
      "lineNbr": 409,
      "author": {
        "id": 6365
      },
      "writtenOn": "2019-06-07T19:07:25Z",
      "side": 1,
      "message": "I don\u0027t really follow this second sentence. Why does constructing this map impact the number of times we load packages?\n\nIn the baseline version, we pass the byPath map to newUpgrader mostly to avoid resolving “latest” versions for modules that have specific versions on the command line. (That avoids a needless upgrade-then-downgrade cycle, and also eliminates some spurious additional upgrades.)",
      "range": {
        "startLine": 408,
        "startChar": 60,
        "endLine": 409,
        "endChar": 28
      },
      "revId": "8f24edda451aea39280e5610022c1227ae5083bf",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4c135344_ebaa980e",
        "filename": "src/cmd/go/internal/modget/get.go",
        "patchSetId": 3
      },
      "lineNbr": 409,
      "author": {
        "id": 17092
      },
      "writtenOn": "2019-06-11T22:25:32Z",
      "side": 1,
      "message": "Clarified the comment a bit, but one additional thing to point out: I suspect we should narrow UpgradeAll to the non-@none subset of modOnly. However, if we calculate modOnly first, that means we download and verify zips before go.mod. Russ had some reservations about that in https://go-review.googlesource.com/c/go/+/174099/4/src/cmd/go/testdata/script/mod_sumdb.txt.",
      "parentUuid": "9822a1e4_aef5ba58",
      "range": {
        "startLine": 408,
        "startChar": 60,
        "endLine": 409,
        "endChar": 28
      },
      "revId": "8f24edda451aea39280e5610022c1227ae5083bf",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0972ff91_9c637c08",
        "filename": "src/cmd/go/internal/modload/query.go",
        "patchSetId": 3
      },
      "lineNbr": 42,
      "author": {
        "id": 6365
      },
      "writtenOn": "2019-06-07T19:07:25Z",
      "side": 1,
      "message": "What is the behavior if `current` is empty? (Do we fetch the latest version independent of the build list, or first consult the build list explicitly?)",
      "revId": "8f24edda451aea39280e5610022c1227ae5083bf",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c70e818d_90e5e1bb",
        "filename": "src/cmd/go/internal/modload/query.go",
        "patchSetId": 3
      },
      "lineNbr": 241,
      "author": {
        "id": 6365
      },
      "writtenOn": "2019-06-07T19:07:25Z",
      "side": 1,
      "message": "Would it make sense to put this block before the `Lookup` label?\nAs far as I can tell, `vers \u003d\u003d \"\"` iff we did not jump to Lookup directly.\n\nMore generally, there is a lot of repetition of the `rev !\u003d nil` condition. Perhaps we could restructure a bit using a local function instead of `goto` so that we can prefer earlier returns:\n\n\tvar rev *modfetch.RevInfo\n\tlookup :\u003d func(vers string) (*modfetch.RevInfo, error) {\n\t\trev, err :\u003d repo.Stat(vers)\n\t\tif err !\u003d nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tif rev !\u003d nil \u0026\u0026 current !\u003d \"\" \u0026\u0026 […] {\n\t\t\t[…]\n\t\t}\n\t\treturn rev, nil\n\t}\n\n\tvar vers string\n\tif preferOlder {\n\t\tfor _, v :\u003d range versions {\n\t\t\tif semver.Prerelease(v) \u003d\u003d \"\" \u0026\u0026 ok(module.Version{Path: path, Version: v}) {\n\t\t\t\treturn lookup(vers)\n\t\t\t}\n\t\t}\n\t\tfor _, v :\u003d range versions {\n\t\t\tif semver.Prerelease(v) !\u003d \"\" \u0026\u0026 ok(module.Version{Path: path, Version: v}) {\n\t\t\t\treturn lookup(vers)\n\t\t\t}\n\t\t}\n\t} else {\n\t\tfor i :\u003d len(versions) - 1; i \u003e\u003d 0; i-- {\n\t\t\tv :\u003d versions[i]\n\t\t\tif semver.Prerelease(v) \u003d\u003d \"\" \u0026\u0026 ok(module.Version{Path: path, Version: v}) {\n\t\t\t\treturn lookup(vers)\n\t\t\t}\n\t\t}\n\t\tfor i :\u003d len(versions) - 1; i \u003e\u003d 0; i-- {\n\t\t\tv :\u003d versions[i]\n\t\t\tif semver.Prerelease(v) !\u003d \"\" \u0026\u0026 ok(module.Version{Path: path, Version: v}) {\n\t\t\t\treturn lookup(vers)\n\t\t\t}\n\t\t}\n\t}\n\n\tif mayUseLatest {\n\t\tif latest, err :\u003d […]; err \u003d\u003d nil \u0026\u0026 […] {\n\t\t\treturn lookup(latest.Name)\n\t\t}\n\t}\n\n\treturn nil, \u0026NoMatchingVersionError{query: query}",
      "range": {
        "startLine": 234,
        "startChar": 8,
        "endLine": 241,
        "endChar": 0
      },
      "revId": "8f24edda451aea39280e5610022c1227ae5083bf",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ed90a98a_a55d8a1e",
        "filename": "src/cmd/go/internal/modload/query.go",
        "patchSetId": 3
      },
      "lineNbr": 241,
      "author": {
        "id": 17092
      },
      "writtenOn": "2019-06-11T22:25:32Z",
      "side": 1,
      "message": "I played around with this, but extracting lookup into a function didn\u0027t seem to help. The problem is that either repo.Stat or repo.Latest should be called. I\u0027m not confident calling repo.Stat on the version returned by repo.Latest will hit an in-memory cache and avoid extra I/O. So we could have two functions, lookup and lookupLatest, both of which would call a third function, checkLatestIsUpgrade. But then the control flow is pretty obfuscated.\n\ngoto is pretty much equivalent to a tail call, and it seems clearer to have that code come after the version selection.\n\nThat said, I did get rid of some of the `rev !\u003d nil` redundancy. No need for that.",
      "parentUuid": "c70e818d_90e5e1bb",
      "range": {
        "startLine": 234,
        "startChar": 8,
        "endLine": 241,
        "endChar": 0
      },
      "revId": "8f24edda451aea39280e5610022c1227ae5083bf",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5e2f168c_89c6b328",
        "filename": "src/cmd/go/internal/modload/query.go",
        "patchSetId": 3
      },
      "lineNbr": 241,
      "author": {
        "id": 6365
      },
      "writtenOn": "2019-06-12T18:44:18Z",
      "side": 1,
      "message": "\u003e I played around with this, but extracting lookup into a function didn\u0027t seem to help. The problem is that either repo.Stat or repo.Latest should be called. I\u0027m not confident calling repo.Stat on the version returned by repo.Latest will hit an in-memory cache and avoid extra I/O.\n\nEven if it doesn\u0027t hit an in-memory cache, it should at least hit an on-disk cache, and on this path the difference is unlikely to matter: it\u0027s just a single cache miss.\n\nThe place where we really need to avoid overhead is in `go list`, since that\u0027s used by interactive tools, and `go build` and `go test` since they\u0027re run frequently. It\u0027s ok if `go get` is a little suboptimal, because it is run infrequently and generally has a lot of more significant work to do anyway.",
      "parentUuid": "ed90a98a_a55d8a1e",
      "range": {
        "startLine": 234,
        "startChar": 8,
        "endLine": 241,
        "endChar": 0
      },
      "revId": "8f24edda451aea39280e5610022c1227ae5083bf",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f7d029fe_4abb29e4",
        "filename": "src/cmd/go/internal/modload/query.go",
        "patchSetId": 3
      },
      "lineNbr": 297,
      "author": {
        "id": 6365
      },
      "writtenOn": "2019-06-07T19:07:25Z",
      "side": 1,
      "message": "Passing `current` to `QueryPackage` seems like a bit of a non-sequitur: we\u0027re calling QueryPackage or QueryPattern in order to resolve a package or pattern to a module, so we don\u0027t know a priori which module to report the current version of.\n\nThis may imply that Query also needs to check the build list directly rather than relying on the caller to pass in the current version of the module, or perhaps the queryModule helper-function within QueryPattern should do that.",
      "range": {
        "startLine": 297,
        "startChar": 31,
        "endLine": 297,
        "endChar": 38
      },
      "revId": "8f24edda451aea39280e5610022c1227ae5083bf",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9f22f63d_ca6fdead",
        "filename": "src/cmd/go/internal/modload/query.go",
        "patchSetId": 3
      },
      "lineNbr": 297,
      "author": {
        "id": 17092
      },
      "writtenOn": "2019-06-11T22:25:32Z",
      "side": 1,
      "message": "Removed the current parameter: if we don\u0027t know which module it is, I don\u0027t think the current version should matter. The only cases where it matters to \u0027go get\u0027 are when Query succeeds.\n\nIf we can avoid Query referencing the global build list, I\u0027d prefer that. I\u0027d love to be able to get rid of global state in modload entirely in the future.",
      "parentUuid": "f7d029fe_4abb29e4",
      "range": {
        "startLine": 297,
        "startChar": 31,
        "endLine": 297,
        "endChar": 38
      },
      "revId": "8f24edda451aea39280e5610022c1227ae5083bf",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}