{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "2a9d91fa_db2f1e45",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 9,
      "author": {
        "id": 13640
      },
      "writtenOn": "2023-08-10T13:30:46Z",
      "side": 1,
      "message": "This should probably be more specific - \"floating point conversion instructions\".",
      "range": {
        "startLine": 9,
        "startChar": 40,
        "endLine": 9,
        "endChar": 43
      },
      "revId": "98469cd0a5f4d7eeffc94000f8358602537c109c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7f52663e_6f183025",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 7530
      },
      "writtenOn": "2023-08-10T09:21:04Z",
      "side": 1,
      "message": "TRY\u003dlinux-riscv64",
      "revId": "98469cd0a5f4d7eeffc94000f8358602537c109c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cc57a96c_18b1ca00",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-08-10T09:21:19Z",
      "side": 1,
      "message": "SlowBots beginning. Status page: https://farmer.golang.org/try?commit\u003d98469cd0\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "98469cd0a5f4d7eeffc94000f8358602537c109c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f43c507d_0096ee1e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-08-10T13:43:12Z",
      "side": 1,
      "message": "SlowBots are happy.\n\nSlowBot builds that ran:\n* linux-riscv64-unmatched\n",
      "parentUuid": "cc57a96c_18b1ca00",
      "tag": "autogenerated:trybots~happy",
      "revId": "98469cd0a5f4d7eeffc94000f8358602537c109c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1d618f7a_f6b4d033",
        "filename": "src/cmd/asm/internal/asm/asm.go",
        "patchSetId": 3
      },
      "lineNbr": 52,
      "author": {
        "id": 13640
      },
      "writtenOn": "2023-08-10T13:30:46Z",
      "side": 1,
      "message": "We probably want to return after the p.errorf.",
      "range": {
        "startLine": 52,
        "startChar": 4,
        "endLine": 52,
        "endChar": 12
      },
      "revId": "98469cd0a5f4d7eeffc94000f8358602537c109c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "15c67a84_9cf4981f",
        "filename": "src/cmd/internal/obj/riscv/cpu.go",
        "patchSetId": 3
      },
      "lineNbr": 606,
      "author": {
        "id": 13640
      },
      "writtenOn": "2023-08-10T13:30:46Z",
      "side": 1,
      "message": "This style of naming is largely from the old C code in the assembly - I\u0027d prefer to avoid introducing it into the riscv code.\n\nFurthermore, do we even need a flag for this? Given that Scond is only used for this purpose (and only used for the floating point conversion instructions), it seems that just storing the RM_* value is sufficient.",
      "range": {
        "startLine": 606,
        "startChar": 6,
        "endLine": 606,
        "endChar": 13
      },
      "revId": "98469cd0a5f4d7eeffc94000f8358602537c109c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ecdbdcd0_05ebca5b",
        "filename": "src/cmd/internal/obj/riscv/cpu.go",
        "patchSetId": 3
      },
      "lineNbr": 620,
      "author": {
        "id": 13640
      },
      "writtenOn": "2023-08-10T13:30:46Z",
      "side": 1,
      "message": "This is probably fine, but it seems cleaner to either scan opSuffixTable, or provide the inverse table (e.g. opSuffixNames \u003d map[opSuffix]string) and look that up.",
      "range": {
        "startLine": 620,
        "startChar": 1,
        "endLine": 620,
        "endChar": 18
      },
      "revId": "98469cd0a5f4d7eeffc94000f8358602537c109c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f0a4f71d_3ebf1d0c",
        "filename": "src/cmd/internal/obj/riscv/obj.go",
        "patchSetId": 3
      },
      "lineNbr": 2161,
      "author": {
        "id": 13640
      },
      "writtenOn": "2023-08-10T13:30:46Z",
      "side": 1,
      "message": "If we don\u0027t need C_ROUND, this just becomes:\n\n```\nins.func3 \u003d uint32(p.Scond)\n```",
      "range": {
        "startLine": 2161,
        "startChar": 3,
        "endLine": 2161,
        "endChar": 13
      },
      "revId": "98469cd0a5f4d7eeffc94000f8358602537c109c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c5cf1e96_c81088ad",
        "filename": "src/cmd/internal/obj/riscv/obj.go",
        "patchSetId": 3
      },
      "lineNbr": 2342,
      "author": {
        "id": 13640
      },
      "writtenOn": "2023-08-10T13:30:46Z",
      "side": 1,
      "message": "This should ensure that the instruction is permitted to use the given suffix (ADD.RUP is now also considered to be valid assembly).",
      "range": {
        "startLine": 2342,
        "startChar": 1,
        "endLine": 2342,
        "endChar": 57
      },
      "revId": "98469cd0a5f4d7eeffc94000f8358602537c109c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}