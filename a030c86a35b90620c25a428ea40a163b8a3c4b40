{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "b32d750c_1ba3987c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 53288
      },
      "writtenOn": "2022-04-04T12:37:01Z",
      "side": 1,
      "message": "Also, I decided to change the semantics a little bit. I removed a post statement for the unrolled loop and now append an incrementation operation after each checkIdx(i) check. This way in the compiler itself we do not allocate a new binary ADD expression for each statement inside an unrolled body generation, which is more effective.\n\nI compared generated code for this version with the previous one and there\u0027s no difference and thus no difference for benchmarks as well.\n\nPlease, take a look at this.",
      "revId": "a030c86a35b90620c25a428ea40a163b8a3c4b40",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "290c7a3e_71c92159",
        "filename": "src/cmd/compile/internal/reflectdata/alg.go",
        "patchSetId": 3
      },
      "lineNbr": 475,
      "author": {
        "id": 53288
      },
      "writtenOn": "2022-04-04T12:45:40Z",
      "side": 1,
      "message": "By the way, is it safe for the ir stage to have multiple nodes pointed to the same one (like it\u0027s done here) or we must allocate a new post node each time so the body would have unique copies of the same nodes?",
      "revId": "a030c86a35b90620c25a428ea40a163b8a3c4b40",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ff32566c_b832f055",
        "filename": "src/cmd/compile/internal/reflectdata/alg.go",
        "patchSetId": 3
      },
      "lineNbr": 475,
      "author": {
        "id": 5200
      },
      "writtenOn": "2022-04-04T19:33:32Z",
      "side": 1,
      "message": "Generally we want the AST to be a tree, not a DAG. So no, it isn\u0027t a good idea to alias children like that. (There are exceptions, like ir.Name nodes, but I don\u0027t think any apply here.)\nIt may work in specific cases, but I wouldn\u0027t rely on it. You can just make that increment statement each time through the loop.",
      "parentUuid": "290c7a3e_71c92159",
      "revId": "a030c86a35b90620c25a428ea40a163b8a3c4b40",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1824c8ff_57ab37fb",
        "filename": "src/cmd/compile/internal/reflectdata/alg.go",
        "patchSetId": 3
      },
      "lineNbr": 475,
      "author": {
        "id": 53288
      },
      "writtenOn": "2022-04-05T09:32:12Z",
      "side": 1,
      "message": "Understood, thank you for the clarification.",
      "parentUuid": "ff32566c_b832f055",
      "revId": "a030c86a35b90620c25a428ea40a163b8a3c4b40",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}