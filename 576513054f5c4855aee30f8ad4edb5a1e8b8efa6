{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "d7f1fd7d_defdbea3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-09-23T23:32:28Z",
      "side": 1,
      "message": "Hello AlexanderYastrebov, I\u0027ve spotted some possible problems.\n\nThese findings are based on simple heuristics. If a finding appears wrong, briefly reply here saying so. Otherwise, please address any problems and update the GitHub PR. When complete, mark this comment as \u0027Done\u0027 and click the [blue \u0027Reply\u0027 button](https://github.com/golang/go/wiki/GerritBot#i-left-a-reply-to-a-comment-in-gerrit-but-no-one-but-me-can-see-it) above.\n\nPossible problems detected:\n  1. You usually need to reference a bug number for all but trivial or cosmetic fixes. For this repo, the format is usually \u0027Fixes #12345\u0027 or \u0027Updates #12345\u0027 at the end of the commit message. Should you have a bug reference?\n\nTo edit the commit message, see instructions [here](https://github.com/golang/go/wiki/GerritBot/#how-does-gerritbot-determine-the-final-commit-message). For guidelines on commit messages for the Go project, see [here](https://go.dev/doc/contribute#commit_messages).\n\n\n(In general for Gerrit code reviews, the CL author is expected to close out each piece of feedback by marking it as \u0027Done\u0027 if implemented as suggested or otherwise reply to each review comment. See the [Review](https://go.dev/doc/contribute#review) section of the Contributing Guide for details.)",
      "revId": "576513054f5c4855aee30f8ad4edb5a1e8b8efa6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cf071ee4_98ebc2c5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 32637
      },
      "writtenOn": "2023-09-23T23:34:38Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "d7f1fd7d_defdbea3",
      "revId": "576513054f5c4855aee30f8ad4edb5a1e8b8efa6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d506eaf8_f4702d6c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5206
      },
      "writtenOn": "2023-09-24T05:22:51Z",
      "side": 1,
      "message": "Thanks, but we shouldn\u0027t complicate the code because of the current compiler.  We should improve the compiler instead.",
      "revId": "576513054f5c4855aee30f8ad4edb5a1e8b8efa6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8ee518e9_101b44a9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 32637
      },
      "writtenOn": "2023-09-24T10:52:57Z",
      "side": 1,
      "message": "Let me put my arguments forward (which I maybe should have added to the commit message).\n\n1. Performance gain is tangible because `val` is called in the hot loop and we can have it today while compiler improvement timeline that would make this change unnecessary is not obvious.\n2. The change is consistent with already existing `fetch` method that is called from huff.go and literals.go directly and there is no problem in converting its boolean result to error there. In fact this improvement is possible because `val` just wraps `fetch` which is inlined; here I just make one more step to inline `fetch` itself.\n3. The change does not complicate code as it is trivial and does not change code structure really",
      "parentUuid": "d506eaf8_f4702d6c",
      "revId": "576513054f5c4855aee30f8ad4edb5a1e8b8efa6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e268ed1_df15f9ea",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5206
      },
      "writtenOn": "2023-09-26T03:40:02Z",
      "side": 1,
      "message": "1. The inliner is being rewritten today.  We shouldn\u0027t optimize for the current inliner.\n\n2. `val` and `fetch` are two different operations, I don\u0027t see any natural reason for them to behave the same way.  Code that calls `val` always fails when `val` fails.  That is not true of `fetch`, which is perhaps missnamed; it\u0027s most like \"ensure this many bits are available, if possible.\"\n\n3. It doesn\u0027t complicate the code much, but it does a bit: we have a lot more calls to create an error.\n\nBut in general this is a bad path to walk down.  Rewriting code to optimize for the current compiler is the last resort to reach for when you have a critical speed problem and there is nothing else you can do.  I don\u0027t think we are at that point.",
      "parentUuid": "8ee518e9_101b44a9",
      "revId": "576513054f5c4855aee30f8ad4edb5a1e8b8efa6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3a91776b_0737d996",
        "filename": "src/internal/zstd/bits.go",
        "patchSetId": 1
      },
      "lineNbr": 102,
      "author": {
        "id": 55874
      },
      "writtenOn": "2023-09-25T06:58:51Z",
      "side": 1,
      "message": "Maybe this is useful for you, this makes the val inlinable (cost 79) without changing the signature of the val method.\n\n```\n[mateusz@arch zstd (master)]$ git diff\ndiff --git a/src/internal/zstd/bits.go b/src/internal/zstd/bits.go\nindex c9a2f70802..46dc0b78e2 100644\n--- a/src/internal/zstd/bits.go\n+++ b/src/internal/zstd/bits.go\n@@ -103,8 +103,7 @@ func (rbr *reverseBitReader) val(b uint8) (uint32, error) {\n        }\n\n        rbr.cnt -\u003d uint32(b)\n-       v :\u003d (rbr.bits \u003e\u003e rbr.cnt) \u0026 ((1 \u003c\u003c b) - 1)\n-       return v, nil\n+       return (rbr.bits \u003e\u003e rbr.cnt) \u0026 ((1 \u003c\u003c b) - 1), nil\n }\n\n // fetch is called to ensure that at least b bits are available.\n@@ -116,9 +115,8 @@ func (rbr *reverseBitReader) fetch(b uint8) bool {\n                        return false\n                }\n                rbr.off--\n-               c :\u003d rbr.data[rbr.off]\n                rbr.bits \u003c\u003c\u003d 8\n-               rbr.bits |\u003d uint32(c)\n+               rbr.bits |\u003d uint32(rbr.data[rbr.off])\n                rbr.cnt +\u003d 8\n        }\n        return true\ndiff --git a/src/internal/zstd/zstd.go b/src/internal/zstd/zstd.go\nindex 60551a4371..60cbf79599 100644\n--- a/src/internal/zstd/zstd.go\n+++ b/src/internal/zstd/zstd.go\n@@ -460,7 +460,7 @@ func (ze *zstdError) Unwrap() error {\n }\n\n func (r *Reader) makeEOFError(off int) error {\n-       return r.wrapError(off, io.ErrUnexpectedEOF)\n+       return \u0026zstdError{r.blockOffset + int64(off), io.ErrUnexpectedEOF}\n }\n\n func (r *Reader) wrapNonEOFError(off int, err error) error {\n\n```",
      "revId": "576513054f5c4855aee30f8ad4edb5a1e8b8efa6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}