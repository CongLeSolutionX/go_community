{
  "comments": [
    {
      "key": {
        "uuid": "4f30ad35_79c12193",
        "filename": "src/runtime/race.go",
        "patchSetId": 1
      },
      "lineNbr": 28,
      "author": {
        "id": 5167
      },
      "writtenOn": "2017-08-23T19:02:48Z",
      "side": 1,
      "message": "From the user\u0027s perspective these are just functions (an \"annotation\" would be something like a \"//go:\" comment), so perhaps: \"RaceAcquire, RaceRelease, and RaceReleaseMerge establish ...\"",
      "revId": "845e2d4a9c6f78779ee1dba6216f6a7cd62b2893",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "389add09_45d2bb66",
        "filename": "src/runtime/race.go",
        "patchSetId": 1
      },
      "lineNbr": 28,
      "author": {
        "id": 5400
      },
      "writtenOn": "2017-08-24T10:13:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4f30ad35_79c12193",
      "revId": "845e2d4a9c6f78779ee1dba6216f6a7cd62b2893",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1bc0d5a1_049e49b3",
        "filename": "src/runtime/race.go",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 5167
      },
      "writtenOn": "2017-08-23T19:02:48Z",
      "side": 1,
      "message": "Simpler: \"These inform the race detector about ...\"",
      "revId": "845e2d4a9c6f78779ee1dba6216f6a7cd62b2893",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e9601327_fae8c9a9",
        "filename": "src/runtime/race.go",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 5400
      },
      "writtenOn": "2017-08-24T10:13:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1bc0d5a1_049e49b3",
      "revId": "845e2d4a9c6f78779ee1dba6216f6a7cd62b2893",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "738cde0f_dba037f9",
        "filename": "src/runtime/race.go",
        "patchSetId": 1
      },
      "lineNbr": 31,
      "author": {
        "id": 5167
      },
      "writtenOn": "2017-08-23T19:02:48Z",
      "side": 1,
      "message": "I would drop \"synchronization established by non-instrumented runtime\" since this is user-facing documentation on a sort of user-facing API. (Plus, the runtime has to call the unexported versions.)",
      "revId": "845e2d4a9c6f78779ee1dba6216f6a7cd62b2893",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f03789e3_7d4d9181",
        "filename": "src/runtime/race.go",
        "patchSetId": 1
      },
      "lineNbr": 31,
      "author": {
        "id": 5400
      },
      "writtenOn": "2017-08-24T10:13:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "738cde0f_dba037f9",
      "revId": "845e2d4a9c6f78779ee1dba6216f6a7cd62b2893",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "44ad7bce_d8503218",
        "filename": "src/runtime/race.go",
        "patchSetId": 1
      },
      "lineNbr": 33,
      "author": {
        "id": 5167
      },
      "writtenOn": "2017-08-23T19:02:48Z",
      "side": 1,
      "message": "The rest of this comment should be split up between the three functions. (The overview above here probably makes the most sense to leave attached to RaceAcquire.)",
      "revId": "845e2d4a9c6f78779ee1dba6216f6a7cd62b2893",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0e037aff_11ad3f18",
        "filename": "src/runtime/race.go",
        "patchSetId": 1
      },
      "lineNbr": 33,
      "author": {
        "id": 5400
      },
      "writtenOn": "2017-08-24T10:13:31Z",
      "side": 1,
      "message": "But this is a single sentence that ties all 3 together. How do you propose to split it?",
      "parentUuid": "44ad7bce_d8503218",
      "revId": "845e2d4a9c6f78779ee1dba6216f6a7cd62b2893",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "48d50789_c51fcfb1",
        "filename": "src/runtime/race.go",
        "patchSetId": 1
      },
      "lineNbr": 33,
      "author": {
        "id": 5167
      },
      "writtenOn": "2017-08-25T19:01:47Z",
      "side": 1,
      "message": "I was thinking something like this:\n\n// RaceAcquire/RaceRelease/RaceReleaseMerge establish happens-before relations\n// ...\n//\n// RaceAcquire establishes a happens-before relation with the preceeding\n// RaceReleaseMerge on addr up to and including the last RaceRelease on addr.\n// In terms of the C memory model (C11 §5.1.2.4, §7.17.3),\n// RaceAcquire is equivalent to atomic_load(memory_order_acquire).\nfunc RaceAcquire(addr unsafe.Pointer)\n\n// RaceRelease performs a release operation on addr that\n// can synchronize with a later RaceAcquire on addr.\n//\n// In terms of the C memory model, RaceRelease is equivalent to atomic_store(memory_order_release).\nfunc RaceRelease(addr unsafe.Pointer)\n\n// RaceReleaseMerge is like RaceRelease, but also establishes a happens-before\n// relation with the preceeding RaceRelease or RaceReleaseMerge on addr.\n//\n// In terms of the C memory model, RaceReleaseMerge is equivalent to atomic_exchange(memory_order_release).\nfunc RaceReleaseMerge(addr unsafe.Pointer)",
      "parentUuid": "0e037aff_11ad3f18",
      "revId": "845e2d4a9c6f78779ee1dba6216f6a7cd62b2893",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d7dc6d2d_fba8196d",
        "filename": "src/runtime/race.go",
        "patchSetId": 1
      },
      "lineNbr": 33,
      "author": {
        "id": 5400
      },
      "writtenOn": "2017-08-26T10:30:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "48d50789_c51fcfb1",
      "revId": "845e2d4a9c6f78779ee1dba6216f6a7cd62b2893",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9e4b3678_576b5ca6",
        "filename": "src/runtime/race.go",
        "patchSetId": 1
      },
      "lineNbr": 35,
      "author": {
        "id": 6365
      },
      "writtenOn": "2017-08-23T21:28:27Z",
      "side": 1,
      "message": "Since Go provides C compatibility (via cgo) but not C++ compatibility explicitly, perhaps refer to the C11 model instead (§5.1.2.4 for the memory model and §7.17.3 for the constants).",
      "range": {
        "startLine": 35,
        "startChar": 3,
        "endLine": 35,
        "endChar": 31
      },
      "revId": "845e2d4a9c6f78779ee1dba6216f6a7cd62b2893",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0a207820_f9094a0a",
        "filename": "src/runtime/race.go",
        "patchSetId": 1
      },
      "lineNbr": 35,
      "author": {
        "id": 5400
      },
      "writtenOn": "2017-08-24T10:13:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9e4b3678_576b5ca6",
      "range": {
        "startLine": 35,
        "startChar": 3,
        "endLine": 35,
        "endChar": 31
      },
      "revId": "845e2d4a9c6f78779ee1dba6216f6a7cd62b2893",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2fe06798_d79054ef",
        "filename": "src/runtime/race.go",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 6365
      },
      "writtenOn": "2017-08-23T21:28:27Z",
      "side": 1,
      "message": "Since this comment will be visible in Godoc, either use typographically-correct em dashes (u+2014 \u0027—\u0027), or omit the dashes (the punctuation here is fine without them).",
      "range": {
        "startLine": 36,
        "startChar": 20,
        "endLine": 36,
        "endChar": 22
      },
      "revId": "845e2d4a9c6f78779ee1dba6216f6a7cd62b2893",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3f0bb8ce_b2feb38c",
        "filename": "src/runtime/race.go",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 5400
      },
      "writtenOn": "2017-08-24T10:13:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2fe06798_d79054ef",
      "range": {
        "startLine": 36,
        "startChar": 20,
        "endLine": 36,
        "endChar": 22
      },
      "revId": "845e2d4a9c6f78779ee1dba6216f6a7cd62b2893",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f90f49c0_014af340",
        "filename": "src/runtime/race.go",
        "patchSetId": 1
      },
      "lineNbr": 58,
      "author": {
        "id": 5167
      },
      "writtenOn": "2017-08-23T19:02:48Z",
      "side": 1,
      "message": "I don\u0027t know what this last line means. Why would I expect this to affect \"non-synchronization events\"?",
      "revId": "845e2d4a9c6f78779ee1dba6216f6a7cd62b2893",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "76adfa6d_5fa0220e",
        "filename": "src/runtime/race.go",
        "patchSetId": 1
      },
      "lineNbr": 58,
      "author": {
        "id": 5400
      },
      "writtenOn": "2017-08-24T10:13:31Z",
      "side": 1,
      "message": "Because the function is called RaceDisable, which implies that it disables all race events.",
      "parentUuid": "f90f49c0_014af340",
      "revId": "845e2d4a9c6f78779ee1dba6216f6a7cd62b2893",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9e378b76_5b5deaff",
        "filename": "src/runtime/race.go",
        "patchSetId": 1
      },
      "lineNbr": 58,
      "author": {
        "id": 5167
      },
      "writtenOn": "2017-08-25T19:01:47Z",
      "side": 1,
      "message": "But what effect does the race detector have on function entry/exit even when it\u0027s enabled? Why would disabling it change anything?",
      "parentUuid": "76adfa6d_5fa0220e",
      "revId": "845e2d4a9c6f78779ee1dba6216f6a7cd62b2893",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8261f097_8697fc40",
        "filename": "src/runtime/race.go",
        "patchSetId": 1
      },
      "lineNbr": 58,
      "author": {
        "id": 5400
      },
      "writtenOn": "2017-08-26T10:30:50Z",
      "side": 1,
      "message": "It\u0027s the other way around -- all events (synchronization, function entry/exit, memory accesses) have effect on the race detector. This function only disables effects of synchronization operations on the race detector.\nRace detector never has any semantic effects on the actual events.",
      "parentUuid": "9e378b76_5b5deaff",
      "revId": "845e2d4a9c6f78779ee1dba6216f6a7cd62b2893",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7d72a267_5192f0ec",
        "filename": "src/runtime/race.go",
        "patchSetId": 1
      },
      "lineNbr": 58,
      "author": {
        "id": 5167
      },
      "writtenOn": "2017-08-29T16:21:12Z",
      "side": 1,
      "message": "Oh! I see. That\u0027s not at all how I read this.\n\nPerhaps \"Non-synchronization events (memory accesses, function entry/exit) still affect the race detector.\"?",
      "parentUuid": "8261f097_8697fc40",
      "revId": "845e2d4a9c6f78779ee1dba6216f6a7cd62b2893",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    }
  ]
}