{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "b605cd62_26996e50",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 13315
      },
      "writtenOn": "2023-08-25T15:44:40Z",
      "side": 1,
      "message": "LGTM. Just some minor comments. Thanks.",
      "revId": "a96503434a51f644182307c0d50309afe3f6ac1a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5802f6f1_587cf86e",
        "filename": "src/cmd/link/internal/ld/deadcode.go",
        "patchSetId": 3
      },
      "lineNbr": 397,
      "author": {
        "id": 13315
      },
      "writtenOn": "2023-08-25T15:44:40Z",
      "side": 1,
      "message": "Minor: function. It could be a function, not necessarily a method. (I\u0027d think usually functions include methods, but not vice versa.)",
      "range": {
        "startLine": 397,
        "startChar": 40,
        "endLine": 397,
        "endChar": 46
      },
      "revId": "a96503434a51f644182307c0d50309afe3f6ac1a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dcfa9dcc_017ccf19",
        "filename": "src/cmd/link/internal/ld/deadcode.go",
        "patchSetId": 3
      },
      "lineNbr": 397,
      "author": {
        "id": 65064
      },
      "writtenOn": "2023-08-25T19:29:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5802f6f1_587cf86e",
      "range": {
        "startLine": 397,
        "startChar": 40,
        "endLine": 397,
        "endChar": 46
      },
      "revId": "a96503434a51f644182307c0d50309afe3f6ac1a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d5f92dd2_5e9883d6",
        "filename": "src/cmd/link/internal/ld/deadcode.go",
        "patchSetId": 3
      },
      "lineNbr": 398,
      "author": {
        "id": 13315
      },
      "writtenOn": "2023-08-25T15:44:40Z",
      "side": 1,
      "message": "Maybe say \"... means that F does a reflect method lookup but the compiler was not able to statically determine the method\u0027s name\".",
      "revId": "a96503434a51f644182307c0d50309afe3f6ac1a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "960c741f_7a1c4aac",
        "filename": "src/cmd/link/internal/ld/deadcode.go",
        "patchSetId": 3
      },
      "lineNbr": 398,
      "author": {
        "id": 65064
      },
      "writtenOn": "2023-08-25T19:29:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d5f92dd2_5e9883d6",
      "revId": "a96503434a51f644182307c0d50309afe3f6ac1a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c56a79c3_9c6d675e",
        "filename": "src/cmd/link/internal/ld/deadcode.go",
        "patchSetId": 3
      },
      "lineNbr": 400,
      "author": {
        "id": 13315
      },
      "writtenOn": "2023-08-25T15:44:40Z",
      "side": 1,
      "message": "Minor: drop (). Thanks.",
      "range": {
        "startLine": 400,
        "startChar": 45,
        "endLine": 400,
        "endChar": 48
      },
      "revId": "a96503434a51f644182307c0d50309afe3f6ac1a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "de63bfdb_9c5e464a",
        "filename": "src/cmd/link/internal/ld/deadcode.go",
        "patchSetId": 3
      },
      "lineNbr": 400,
      "author": {
        "id": 65064
      },
      "writtenOn": "2023-08-25T19:29:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c56a79c3_9c6d675e",
      "range": {
        "startLine": 400,
        "startChar": 45,
        "endLine": 400,
        "endChar": 48
      },
      "revId": "a96503434a51f644182307c0d50309afe3f6ac1a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e4fa6b16_3f9e3d2d",
        "filename": "src/cmd/link/internal/ld/deadcode.go",
        "patchSetId": 3
      },
      "lineNbr": 408,
      "author": {
        "id": 13315
      },
      "writtenOn": "2023-08-25T15:44:40Z",
      "side": 1,
      "message": "\"all reachable types that are converted to interfaces\"? (It is not necessarily a struct, could be other types with methods. Also if the type is never converted to interface we still don\u0027t need to mark them.)",
      "range": {
        "startLine": 407,
        "startChar": 73,
        "endLine": 408,
        "endChar": 20
      },
      "revId": "a96503434a51f644182307c0d50309afe3f6ac1a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1502c6d7_f5559266",
        "filename": "src/cmd/link/internal/ld/deadcode.go",
        "patchSetId": 3
      },
      "lineNbr": 408,
      "author": {
        "id": 65064
      },
      "writtenOn": "2023-08-25T19:29:57Z",
      "side": 1,
      "message": "... all reachable types.\n\nA type need not be converted to an interface. Suppose I have no calls to `s.F()` in the code and I only ever do\n```\nvar s S\nreflect.ValueOf(s).Method(0).Call(...)\n```",
      "parentUuid": "e4fa6b16_3f9e3d2d",
      "range": {
        "startLine": 407,
        "startChar": 73,
        "endLine": 408,
        "endChar": 20
      },
      "revId": "a96503434a51f644182307c0d50309afe3f6ac1a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "10aba646_ab549202",
        "filename": "src/cmd/link/internal/ld/deadcode.go",
        "patchSetId": 3
      },
      "lineNbr": 408,
      "author": {
        "id": 13315
      },
      "writtenOn": "2023-08-25T21:09:38Z",
      "side": 1,
      "message": "ValueOf takes an interface parameter, so s, and so type S, is converted to interface there. Implicit conversions also count. (To be clear it also includes types that are components of other types which are converted to interfaces, as components can be accessed via reflect Field/Elem/etc.)",
      "parentUuid": "1502c6d7_f5559266",
      "range": {
        "startLine": 407,
        "startChar": 73,
        "endLine": 408,
        "endChar": 20
      },
      "revId": "a96503434a51f644182307c0d50309afe3f6ac1a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b17f0ed8_45a412dd",
        "filename": "src/cmd/link/internal/ld/deadcode.go",
        "patchSetId": 3
      },
      "lineNbr": 408,
      "author": {
        "id": 65064
      },
      "writtenOn": "2023-08-28T09:32:33Z",
      "side": 1,
      "message": "Agreed, although the wording seems a bit heavy to me. For now, I just replaced \"structs\" with \"types\". Do you want to fix the comment in lines 126-127, too?",
      "parentUuid": "10aba646_ab549202",
      "range": {
        "startLine": 407,
        "startChar": 73,
        "endLine": 408,
        "endChar": 20
      },
      "revId": "a96503434a51f644182307c0d50309afe3f6ac1a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c5be1994_3ec79231",
        "filename": "src/cmd/link/internal/ld/deadcode.go",
        "patchSetId": 3
      },
      "lineNbr": 408,
      "author": {
        "id": 13315
      },
      "writtenOn": "2023-08-28T15:18:46Z",
      "side": 1,
      "message": "Okay. This is fine for now. Maybe we could have a separate paragraph describing interface method calls (including case 2 and 3) are considered for only types that could be converted to interfaces (not in this CL).",
      "parentUuid": "b17f0ed8_45a412dd",
      "range": {
        "startLine": 407,
        "startChar": 73,
        "endLine": 408,
        "endChar": 20
      },
      "revId": "a96503434a51f644182307c0d50309afe3f6ac1a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}