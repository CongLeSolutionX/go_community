{
  "comments": [
    {
      "key": {
        "uuid": "ede54beb_1b8661df",
        "filename": "src/cmd/internal/obj/riscv/obj.go",
        "patchSetId": 3
      },
      "lineNbr": 76,
      "author": {
        "id": 13315
      },
      "writtenOn": "2019-09-19T19:49:34Z",
      "side": 1,
      "message": "Does this trigger a fault? (Perhaps SIGILL)",
      "range": {
        "startLine": 75,
        "startChar": 0,
        "endLine": 76,
        "endChar": 17
      },
      "revId": "0084ec365791a9776b897d5509b8f4a7e99ed672",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bb6a7d22_fed96b57",
        "filename": "src/cmd/internal/obj/riscv/obj.go",
        "patchSetId": 3
      },
      "lineNbr": 76,
      "author": {
        "id": 13640
      },
      "writtenOn": "2019-09-21T13:09:07Z",
      "side": 1,
      "message": "EBREAK generates a breakpoint exception and transfers control back to the environment - on a Linux RISC-V system this results in a SIGTRAP being delivered to the process.",
      "parentUuid": "ede54beb_1b8661df",
      "range": {
        "startLine": 75,
        "startChar": 0,
        "endLine": 76,
        "endChar": 17
      },
      "revId": "0084ec365791a9776b897d5509b8f4a7e99ed672",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "df4cd481_62b8fef0",
        "filename": "src/cmd/internal/obj/riscv/obj.go",
        "patchSetId": 3
      },
      "lineNbr": 76,
      "author": {
        "id": 13315
      },
      "writtenOn": "2019-09-23T21:43:26Z",
      "side": 1,
      "message": "Ok. Ideally SIGILL may be better. But SIGTRAP is probably also fine.",
      "parentUuid": "bb6a7d22_fed96b57",
      "range": {
        "startLine": 75,
        "startChar": 0,
        "endLine": 76,
        "endChar": 17
      },
      "revId": "0084ec365791a9776b897d5509b8f4a7e99ed672",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7b2d0560_01cabf05",
        "filename": "src/cmd/internal/obj/riscv/obj.go",
        "patchSetId": 3
      },
      "lineNbr": 82,
      "author": {
        "id": 30809
      },
      "writtenOn": "2019-09-17T12:29:25Z",
      "side": 1,
      "message": "Do we need to be backwards compatible for a new port?",
      "range": {
        "startLine": 77,
        "startChar": 2,
        "endLine": 82,
        "endChar": 17
      },
      "revId": "0084ec365791a9776b897d5509b8f4a7e99ed672",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "12be6820_2b4ae04f",
        "filename": "src/cmd/internal/obj/riscv/obj.go",
        "patchSetId": 3
      },
      "lineNbr": 82,
      "author": {
        "id": 13640
      },
      "writtenOn": "2019-09-17T14:45:35Z",
      "side": 1,
      "message": "I don\u0027t have strong opinions, however the generated opcode/instruction table contains both of these instructions (since the source still contains them). For the sake of four lines of code, we can make them work... or we can remove them and have them trigger \u0027no encoding for instruction\u0027 errors.",
      "parentUuid": "7b2d0560_01cabf05",
      "range": {
        "startLine": 77,
        "startChar": 2,
        "endLine": 82,
        "endChar": 17
      },
      "revId": "0084ec365791a9776b897d5509b8f4a7e99ed672",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f310180d_f207d258",
        "filename": "src/cmd/internal/obj/riscv/obj.go",
        "patchSetId": 3
      },
      "lineNbr": 98,
      "author": {
        "id": 13315
      },
      "writtenOn": "2019-09-19T19:49:34Z",
      "side": 1,
      "message": "Why do they need to be handled here, instead of its own encode function?",
      "range": {
        "startLine": 89,
        "startChar": 0,
        "endLine": 98,
        "endChar": 3
      },
      "revId": "0084ec365791a9776b897d5509b8f4a7e99ed672",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "79191d4f_6cf5cc6b",
        "filename": "src/cmd/internal/obj/riscv/obj.go",
        "patchSetId": 3
      },
      "lineNbr": 98,
      "author": {
        "id": 13640
      },
      "writtenOn": "2019-09-21T13:09:07Z",
      "side": 1,
      "message": "The RISC-V specification says that these instructions are \"encoded using the I-type instruction format\", which is why the encodeI*/validateI* functions are used. It could obviously be handled via separate encoding/validation functions, however it would trade the fix up here, for two more functions and a separate encoding struct.",
      "parentUuid": "f310180d_f207d258",
      "range": {
        "startLine": 89,
        "startChar": 0,
        "endLine": 98,
        "endChar": 3
      },
      "revId": "0084ec365791a9776b897d5509b8f4a7e99ed672",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}