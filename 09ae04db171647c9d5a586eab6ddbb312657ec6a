{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "dfe84e6b_b975cb5b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-07-06T19:52:02Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003d09ae04db",
      "tag": "autogenerated:trybots~beginning",
      "revId": "09ae04db171647c9d5a586eab6ddbb312657ec6a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "724aeb98_5cf4bca4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-07-06T19:59:36Z",
      "side": 1,
      "message": "Build is still in progress... Status page: https://farmer.golang.org/try?commit\u003d09ae04db\nFailed on js-wasm: https://storage.googleapis.com/go-build-log/09ae04db/js-wasm_4c989dcc.log\nOther builds still in progress; subsequent failure notices suppressed until final report.\n\nConsult https://build.golang.org/ to see whether they are new failures. Keep in mind that TryBots currently test *exactly* your git commit, without rebasing. If your commit\u0027s git parent is old, the failure might\u0027ve already been fixed.\n",
      "parentUuid": "dfe84e6b_b975cb5b",
      "tag": "autogenerated:trybots~progress",
      "revId": "09ae04db171647c9d5a586eab6ddbb312657ec6a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "88602263_722853af",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-07-06T20:02:26Z",
      "side": 1,
      "message": "4 of 25 TryBots failed.\nFailed on js-wasm: https://storage.googleapis.com/go-build-log/09ae04db/js-wasm_4c989dcc.log\nFailed on linux-amd64: https://storage.googleapis.com/go-build-log/09ae04db/linux-amd64_64afa7a1.log\nFailed on linux-arm64-aws: https://storage.googleapis.com/go-build-log/09ae04db/linux-arm64-aws_615af91d.log\nFailed on linux-arm-aws: https://storage.googleapis.com/go-build-log/09ae04db/linux-arm-aws_c9b2cbc9.log\n\nConsult https://build.golang.org/ to see whether they are new failures. Keep in mind that TryBots currently test *exactly* your git commit, without rebasing. If your commit\u0027s git parent is old, the failure might\u0027ve already been fixed.\n\n",
      "parentUuid": "dfe84e6b_b975cb5b",
      "tag": "autogenerated:trybots~failed",
      "revId": "09ae04db171647c9d5a586eab6ddbb312657ec6a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "18e5936a_23cf5270",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 16006
      },
      "writtenOn": "2021-07-06T20:26:41Z",
      "side": 1,
      "message": "from a quick glance it seems the fix is triggering a compiler error for a test of typeparams example code because the compiler doesnt deal with generic types yet in https://github.com/golang/go/blob/912f0750472dd4f674b69ca1616bfaf377af1805/src/cmd/compile/internal/types/alg.go#L42.\n\n(If thats actually the case:) Thoughts on how to deal with that in the state where go1.17 doesnt yet support generic types? not sure if the test is wrong, bug in types or just missing feature in types.",
      "revId": "09ae04db171647c9d5a586eab6ddbb312657ec6a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "14020d12_7123c33c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5200
      },
      "writtenOn": "2021-07-07T16:07:05Z",
      "side": 1,
      "message": "I get other errors not related to generics when I patch in this CL to dev.typeparams and try it (on darwin/amd64):\n\n##### ../test\n# go run run.go -G\u003d3 fixedbugs/issue20174.go\nunexpected success\nFAIL\tfixedbugs/issue20174.go\t0.026s\n# go run run.go -G\u003d3 fixedbugs/issue37837.go\nunexpected success\nFAIL\tfixedbugs/issue37837.go\t0.059s\n2021/07/07 08:52:43 Failed: exit status 1\n\nWhat is strange is that 20174 should pass. And it does pass, when compiled directly. Which makes me think that run.go is somehow compiled incorrectly with this CL.",
      "revId": "09ae04db171647c9d5a586eab6ddbb312657ec6a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "331098e6_500fa7b9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5440
      },
      "writtenOn": "2021-07-07T18:56:36Z",
      "side": 1,
      "message": "Is this a release critical issue for Go 1.17? It doesn\u0027t sound like it\u0027s a regression, and the issue isn\u0027t marked as a release blocker.\n\nNoalg is quite subtle, because it plays with type identity assumptions in the frontend. If possible, I\u0027d prefer we defer fixing this to Go 1.18, so we can implement a proper fix (e.g., allow the linker to realize alg and noalg types are logically the same and can be de-duped, except that the alg variants must always be preferred).",
      "revId": "09ae04db171647c9d5a586eab6ddbb312657ec6a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}