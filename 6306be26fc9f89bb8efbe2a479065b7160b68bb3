{
  "comments": [
    {
      "key": {
        "uuid": "31342af1_aaa802c9",
        "filename": "src/strings/builder.go",
        "patchSetId": 4
      },
      "lineNbr": 26,
      "author": {
        "id": 5065
      },
      "writtenOn": "2017-11-02T00:08:58Z",
      "side": 1,
      "message": "This seems to add nothing, considering we already have the Grow method. Thoughts on removing it?",
      "range": {
        "startLine": 20,
        "startChar": 0,
        "endLine": 26,
        "endChar": 1
      },
      "revId": "6306be26fc9f89bb8efbe2a479065b7160b68bb3",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "865cd9d6_73ec4301",
        "filename": "src/strings/builder.go",
        "patchSetId": 4
      },
      "lineNbr": 26,
      "author": {
        "id": 5615
      },
      "writtenOn": "2017-11-02T07:47:13Z",
      "side": 1,
      "message": "Sounds good to me.",
      "parentUuid": "31342af1_aaa802c9",
      "range": {
        "startLine": 20,
        "startChar": 0,
        "endLine": 26,
        "endChar": 1
      },
      "revId": "6306be26fc9f89bb8efbe2a479065b7160b68bb3",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "853b7c94_a0672882",
        "filename": "src/strings/builder.go",
        "patchSetId": 4
      },
      "lineNbr": 30,
      "author": {
        "id": 5065
      },
      "writtenOn": "2017-11-02T00:08:58Z",
      "side": 1,
      "message": "\"is reset\" (or \"is cleared\" or \"is zeroed\", but zeroed is too particular for what users can see). But \"is empty\" seems like the wrong tense.\n\nAlso, what about adding bytes.Buffer\u0027s Reset method too? Then you can just say that String calls Reset?\n\nBut actually I\u0027m not a fan of String called reset. That seems problematic. I can imagine users of Stringer expecting that two back-to-back String calls return the same result.\n\nI would set a flag instead (stringCalled bool) and then lazily clear (or return an error) on the next Write.\n\nI realize this is late feedback, and I apologize if this was already discussed. I\u0027m not caught up on email.",
      "range": {
        "startLine": 30,
        "startChar": 27,
        "endLine": 30,
        "endChar": 35
      },
      "revId": "6306be26fc9f89bb8efbe2a479065b7160b68bb3",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "40d9672c_5d73d169",
        "filename": "src/strings/builder.go",
        "patchSetId": 4
      },
      "lineNbr": 30,
      "author": {
        "id": 5615
      },
      "writtenOn": "2017-11-02T07:47:13Z",
      "side": 1,
      "message": "Just to lay the options out on the table:\n\n1. After calling String, you can keep writing and call String later again (and get a longer string).\n2. Calling String resets the buffer.\n3. Calling String marks the Builder as frozen and subsequent write operations panic.\n4. Calling String marks the Builder as frozen and subsequent write operations return errors.\n5. Calling String sets a flag so that the next Write resets the buffer.\n\nMinux pointed out (1) in https://github.com/golang/go/issues/18990#issuecomment-278302903 and that\u0027s what an earlier patch set implements. (It\u0027s also how Java\u0027s StringBuilder behaves.)\n\n(2) was suggested by Ian and is the behavior on this patch set.\n\n(3) is the behavior of the private library I originally wrote this code for. It has worked well for us since it matches the normal use cases, where you just want to build up a single string and then be done.\n\n(4) and (5) are your suggestions.\n\nMy opinions are below, but I\u0027m happy to go with any of these (or something different).\n\n---\n\nI agree with you that it\u0027s a bit strange for back-to-back String calls to return different things. I don\u0027t like (5) as a way of resolving that since it seems like an unexpected API (Write sometimes clears but only if preceded by String).\n\nIf we go the write-once route, I prefer (3) over (4) since write-after-String is clearly a misuse of the API.\n\n(1) is looking better. It\u0027s easy to understand and explain. Ian wrote\n\n\u003e It\u0027s a little weird to call String() and then call Write() to add still more data.  I guess it would work with this implementation, but do we want to continue to support it?\n\nbut I now think that it\u0027s less weird than (2).",
      "parentUuid": "853b7c94_a0672882",
      "range": {
        "startLine": 30,
        "startChar": 27,
        "endLine": 30,
        "endChar": 35
      },
      "revId": "6306be26fc9f89bb8efbe2a479065b7160b68bb3",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    }
  ]
}