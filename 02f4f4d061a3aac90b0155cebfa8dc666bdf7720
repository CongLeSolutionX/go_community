{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "2bc57eb5_9ef89a20",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 11,
      "author": {
        "id": 13315
      },
      "writtenOn": "2022-05-09T20:16:30Z",
      "side": 1,
      "message": "It seems the CL does more than just buildmode\u003dpie. Maybe adjust the CL description. Also mention that it only affects external linking.",
      "range": {
        "startLine": 10,
        "startChar": 29,
        "endLine": 11,
        "endChar": 59
      },
      "revId": "02f4f4d061a3aac90b0155cebfa8dc666bdf7720",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "adb38210_22a75578",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-05-07T17:30:40Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003d02f4f4d0",
      "tag": "autogenerated:trybots~beginning",
      "revId": "02f4f4d061a3aac90b0155cebfa8dc666bdf7720",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "04225eb4_7b206872",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-05-07T17:30:40Z",
      "side": 1,
      "message": "Superseded.",
      "parentUuid": "bdd4ee4b_8e0ff5a1",
      "tag": "autogenerated:trybots~beginning",
      "revId": "02f4f4d061a3aac90b0155cebfa8dc666bdf7720",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "37ce56f9_f1ffcc14",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-05-07T17:42:22Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "adb38210_22a75578",
      "tag": "autogenerated:trybots~happy",
      "revId": "02f4f4d061a3aac90b0155cebfa8dc666bdf7720",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2ca43641_3c6db871",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 13315
      },
      "writtenOn": "2022-05-09T20:16:30Z",
      "side": 1,
      "message": "Do we want to make any change for internal linking? I feel that it would be a little weird if internal linking and external linking by default generate semantically different things.\n\nWhat is the effect for this for the C linker? Whether to use .got.plt section? Whether to use JUMP_SLOT relocations? Anything else? Thanks.\n",
      "revId": "02f4f4d061a3aac90b0155cebfa8dc666bdf7720",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "669d7c89_6a99277d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5206
      },
      "writtenOn": "2022-05-09T21:18:49Z",
      "side": 1,
      "message": "This has two effects on the C linker:\n\nFirst, it marks the executable as requiring that all dynamic relocations be processed at program startup.  There are three ways to mark this in an ELF dynamic executable, all equivalent:\n- add a DT_BIND_NOW dynamic tag\n- set DF_BIND_NOW in the DT_FLAGS dynamic tag\n- set DF_1_NOW in the DT_FLAGS_1 dynamic tag\n\nSecond,for most targets, .got.plt becomes a relro section, as it no longer changes after dynamic relocations are applied.",
      "parentUuid": "2ca43641_3c6db871",
      "revId": "02f4f4d061a3aac90b0155cebfa8dc666bdf7720",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9f168896_35200732",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 13315
      },
      "writtenOn": "2022-05-09T21:33:24Z",
      "side": 1,
      "message": "Thanks! Do you think we want to add that to internal linking? (I can look into it. But too late for Go 1.19.)",
      "parentUuid": "669d7c89_6a99277d",
      "revId": "02f4f4d061a3aac90b0155cebfa8dc666bdf7720",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "516d0b40_109541f0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5206
      },
      "writtenOn": "2022-05-09T22:05:51Z",
      "side": 1,
      "message": "Yes, I think you\u0027re right that if we add this new flag then we should also honor it when doing internal linking and generating a dynamically linked executable.",
      "parentUuid": "9f168896_35200732",
      "revId": "02f4f4d061a3aac90b0155cebfa8dc666bdf7720",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "af433f67_1ccb8382",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5206
      },
      "writtenOn": "2022-11-08T21:03:10Z",
      "side": 1,
      "message": "@mcfoxax@gmail.com Any interest in fixing up this CL for the internal linking case, as suggested in the comments?  Thanks.",
      "revId": "02f4f4d061a3aac90b0155cebfa8dc666bdf7720",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b3e5dae2_e2e23aa9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 51768
      },
      "writtenOn": "2022-11-08T21:07:41Z",
      "side": 1,
      "message": "I don\u0027t think I have the knowledge to do the internal linking case without sinking a lot more time into it sadly. Will that be a blocker to get the external linker portion merged?",
      "parentUuid": "af433f67_1ccb8382",
      "revId": "02f4f4d061a3aac90b0155cebfa8dc666bdf7720",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "657f9cad_15419ff9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5206
      },
      "writtenOn": "2022-11-08T22:23:46Z",
      "side": 1,
      "message": "I think we should make sure that we have the internal linking CL ready to go before submitting this one.  Otherwise we\u0027ll have surprising inconsistent behavior, which seems unwise for a feature whose main purpose is security.",
      "parentUuid": "b3e5dae2_e2e23aa9",
      "revId": "02f4f4d061a3aac90b0155cebfa8dc666bdf7720",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "94ce01ba_3f5918d1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 61418
      },
      "writtenOn": "2023-02-19T16:25:04Z",
      "side": 1,
      "message": "I believe I have achieved the desired behavior for internal linker in my local test env and will be happy to pick this work up.\n\nA couple of questions:\n- do we want to leave the current behavior (Rartial RELRO for PIE buildmode) and make Full RELRO an opt in through a linker flag or make Full RELRO the default one still giving the user choice to - say - pass \"-no-bindnow\" flag to preserve current behavior?\n- since I am not the author of the CL what is the recommended way to proceed?",
      "parentUuid": "516d0b40_109541f0",
      "revId": "02f4f4d061a3aac90b0155cebfa8dc666bdf7720",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dd34a900_edd6bad0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5206
      },
      "writtenOn": "2023-02-21T05:25:34Z",
      "side": 1,
      "message": "I think we should do what other linkers do.  Is \"full relro\" the default for any current Unix linker?\n\nIf you cherry pick this CL (312509) you should be able to send a new CL that is based on this one.  We can have this CL for external linking and yours for internal linking.\n\nI see that this CL has some open comments, though.\n\nThanks.",
      "parentUuid": "94ce01ba_3f5918d1",
      "revId": "02f4f4d061a3aac90b0155cebfa8dc666bdf7720",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b9b823f7_9f846f32",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 61418
      },
      "writtenOn": "2023-02-25T19:32:03Z",
      "side": 1,
      "message": "I have tested other linkers and here is a gist of observations.\n\nLinkers tested (with gcc, clang and some dummy C program):\n- ld\n- lld\n- mold\n- gold\n- bfd\n\n1. All tested linkers have \"partial relro\" enabled by default for linux targets regardless of PIE setting.\n2. With -Wl,-z,now lld, mold and gold map .got.plt section to the GNU_RELRO segment whereas ld and bfd merge .got.plt into .got.\n3. -z,now is independent from -z,relro meaning one can create an ELF binary without GNU_RELRO header but with DF_BIND_NOW in the DT_FLAGS and DF_1_NOW in the DT_FLAGS_1 dynamic tags.\n4. GNU_RELRO segment is always read-only with -Wl,-z,relro for all linkers whereas go\u0027s internal linker does not put that flag (see 28541: cmd/link: mark rel.ro segment as PT_GNU_RELRO | https://go-review.googlesource.com/c/go/+/28541)\n\nI suggest we preserve current behavior, make -bindnow flag false by default and decouple non-lazy binding from read-only relocations.",
      "parentUuid": "dd34a900_edd6bad0",
      "revId": "02f4f4d061a3aac90b0155cebfa8dc666bdf7720",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "016caa12_269eea59",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 51768
      },
      "writtenOn": "2023-03-02T15:20:58Z",
      "side": 1,
      "message": "I don\u0027t mind handing over this CL to Nick. If they want to rebase this change or do something else that is fine. It\u0027s been laying around for too long that I have any strong feelings on the matter :)\n\nAnything you want me to do with this CL Nick?",
      "parentUuid": "94ce01ba_3f5918d1",
      "revId": "02f4f4d061a3aac90b0155cebfa8dc666bdf7720",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "27b9f109_b89ebc1a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 61418
      },
      "writtenOn": "2023-03-04T23:30:41Z",
      "side": 1,
      "message": "I have sent a new CL that covers both internal and external linker:\n\n473495: cmd/link: add option to enable full RELRO for ELF | https://go-review.googlesource.com/c/go/+/473495",
      "parentUuid": "016caa12_269eea59",
      "revId": "02f4f4d061a3aac90b0155cebfa8dc666bdf7720",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "91da3b2e_280b8bcd",
        "filename": "src/cmd/link/internal/ld/lib.go",
        "patchSetId": 4
      },
      "lineNbr": 1411,
      "author": {
        "id": 13315
      },
      "writtenOn": "2022-05-09T20:16:30Z",
      "side": 1,
      "message": "If the flag is false, should we add flag to explicitly turn it off? Is there a C linker that has -z,now on by default?",
      "revId": "02f4f4d061a3aac90b0155cebfa8dc666bdf7720",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0754958d_5c964956",
        "filename": "src/cmd/link/internal/ld/lib.go",
        "patchSetId": 4
      },
      "lineNbr": 1419,
      "author": {
        "id": 13315
      },
      "writtenOn": "2022-05-09T20:16:30Z",
      "side": 1,
      "message": "Should this also apply to exe mode when external linking?",
      "revId": "02f4f4d061a3aac90b0155cebfa8dc666bdf7720",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "24864c97_bba08fa9",
        "filename": "src/cmd/link/internal/ld/main.go",
        "patchSetId": 4
      },
      "lineNbr": 98,
      "author": {
        "id": 13315
      },
      "writtenOn": "2022-05-09T21:40:18Z",
      "side": 1,
      "message": "Mention \"on ELF\".\n\n(What do we want to do on other platforms? Mach-O has -bind_at_load. Haven\u0027t looked at PE or XCOFF.)",
      "range": {
        "startLine": 98,
        "startChar": 49,
        "endLine": 98,
        "endChar": 92
      },
      "revId": "02f4f4d061a3aac90b0155cebfa8dc666bdf7720",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}