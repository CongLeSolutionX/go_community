{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "7aab1c5c_0ccb7ccb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2024-02-19T18:18:38Z",
      "side": 1,
      "message": "SlowBots beginning. Status page: https://farmer.golang.org/try?commit\u003da23bd1af\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "a23bd1af255d105ae6ade7e54a6e1377dd9375ea",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "506cf7f1_a7691aa7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2024-02-19T18:37:42Z",
      "side": 1,
      "message": "SlowBots are happy.\n\nSlowBot builds that ran:\n* windows-arm64-11\n",
      "parentUuid": "7aab1c5c_0ccb7ccb",
      "tag": "autogenerated:trybots~happy",
      "revId": "a23bd1af255d105ae6ade7e54a6e1377dd9375ea",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8e148088_7958f2e8",
        "filename": "src/os/os_windows_test.go",
        "patchSetId": 3
      },
      "lineNbr": 170,
      "author": {
        "id": 6365
      },
      "writtenOn": "2024-02-22T17:17:26Z",
      "side": 1,
      "message": "(nit) I think this condition would be a little clearer swapped:\n```go\nif test.isMountPoint \u0026\u0026 winsymlink.Value() !\u003d \"0\" {\n\t‚Ä¶\n} else {\n\t// This is either a real symlink, or a mount point\n\t// treated as a symlink.\n\t‚Ä¶\n}\n```",
      "revId": "a23bd1af255d105ae6ade7e54a6e1377dd9375ea",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "09e3a840_bc8f42f9",
        "filename": "src/os/os_windows_test.go",
        "patchSetId": 3
      },
      "lineNbr": 170,
      "author": {
        "id": 34993
      },
      "writtenOn": "2024-02-23T11:35:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8e148088_7958f2e8",
      "revId": "a23bd1af255d105ae6ade7e54a6e1377dd9375ea",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3f79c3a5_39351e66",
        "filename": "src/os/os_windows_test.go",
        "patchSetId": 3
      },
      "lineNbr": 1268,
      "author": {
        "id": 6365
      },
      "writtenOn": "2024-02-22T17:17:26Z",
      "side": 1,
      "message": "I think this starts to kind of blur the meaning of ‚Äúwant‚Äù, since what we\u0027re passing in isn\u0027t really what we ‚Äúwant‚Äù in this case.\n\nCan we instead push this to the caller side, so that `want` always represents exactly the desired output? That would also help to illustrate what happens from a user\u0027s perspective if `os.Readlink` is called on a non-symlink.\n\nOn POSIX platforms it [returns `EINVAL` for non-symlinks](https://go.dev/play/p/Dbid32LD9k3), and in https://github.com/golang/go/issues/63703#issue-1958060170 I had originally intended to return a similar error, but in that case I think we wouldn\u0027t even reach this point ‚Äî we would instead fail at line 1263.",
      "range": {
        "startLine": 1267,
        "startChar": 0,
        "endLine": 1268,
        "endChar": 90
      },
      "revId": "a23bd1af255d105ae6ade7e54a6e1377dd9375ea",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a779baef_1f28b2f8",
        "filename": "src/os/os_windows_test.go",
        "patchSetId": 3
      },
      "lineNbr": 1268,
      "author": {
        "id": 34993
      },
      "writtenOn": "2024-02-23T11:35:01Z",
      "side": 1,
      "message": "\u003e Can we instead push this to the caller side, so that want always represents exactly the desired output?\n\nMakes sense and simplifies the code, thanks!",
      "parentUuid": "3f79c3a5_39351e66",
      "range": {
        "startLine": 1267,
        "startChar": 0,
        "endLine": 1268,
        "endChar": 90
      },
      "revId": "a23bd1af255d105ae6ade7e54a6e1377dd9375ea",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "42948210_bf3417fd",
        "filename": "src/os/os_windows_test.go",
        "patchSetId": 3
      },
      "lineNbr": 1317,
      "author": {
        "id": 6365
      },
      "writtenOn": "2024-02-22T17:17:26Z",
      "side": 1,
      "message": "If it is feasible, I would like to also have an explicit test for the behavior of `os.Stat` and `os.Lstat` for mount points, if there isn\u0027t one already.\n\nPer https://github.com/golang/go/issues/61893#issuecomment-1787724440, the behavior as I understand it should be:\n\n- `os.Lstat` should return a `FileInfo` for the reparse point itself, with `ModeIrregular` set, and `ModeDir` and `ModeSymlink` both unset.\n- `os.Stat` should return a `FileInfo` for the underlying directory joined at the mount point, with `ModeDir` set and `ModeIrregular` unset.",
      "revId": "a23bd1af255d105ae6ade7e54a6e1377dd9375ea",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d2e631bb_684b94c7",
        "filename": "src/os/os_windows_test.go",
        "patchSetId": 3
      },
      "lineNbr": 1317,
      "author": {
        "id": 34993
      },
      "writtenOn": "2024-02-23T11:35:01Z",
      "side": 1,
      "message": "This is already being test inside `testDirLinks`, which is called in `TestDirectoryJunction` (for mount points) and in `TestDirectorySymbolicLink`.",
      "parentUuid": "42948210_bf3417fd",
      "revId": "a23bd1af255d105ae6ade7e54a6e1377dd9375ea",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d96a6a3a_2b1d88bc",
        "filename": "src/os/types_windows.go",
        "patchSetId": 3
      },
      "lineNbr": 186,
      "author": {
        "id": 6365
      },
      "writtenOn": "2024-02-22T17:17:26Z",
      "side": 1,
      "message": "We had some discussion about the `ModeDir` bit in proposal #61893, and concluded that we should not set that bit because it is in general not safe to traverse reparse points as if they were directories (for example, because that may lead to infinite recursion).\n\nIt would be good to leave a comment somewhere in here summarizing that decision, though. üòÖ",
      "revId": "a23bd1af255d105ae6ade7e54a6e1377dd9375ea",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c449a95d_7c61c552",
        "filename": "src/os/types_windows.go",
        "patchSetId": 3
      },
      "lineNbr": 186,
      "author": {
        "id": 34993
      },
      "writtenOn": "2024-02-23T11:35:01Z",
      "side": 1,
      "message": "Huh, I got this implementation wrong. Got confused by reading my own proposal üòï. Fixed and comments added. Also, added a clarification comment in the proposal: https://github.com/golang/go/issues/61893#issuecomment-1960969333.",
      "parentUuid": "d96a6a3a_2b1d88bc",
      "revId": "a23bd1af255d105ae6ade7e54a6e1377dd9375ea",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0b67cb1e_56c7a587",
        "filename": "src/path/filepath/path_windows_test.go",
        "patchSetId": 3
      },
      "lineNbr": 491,
      "author": {
        "id": 6365
      },
      "writtenOn": "2024-02-22T21:35:52Z",
      "side": 1,
      "message": "`testenv.MustHaveExecPath(t, \"powershell\")` before this, so that we don\u0027t pollute test logs with cleanup for a setup that can\u0027t possibly succeed?",
      "revId": "a23bd1af255d105ae6ade7e54a6e1377dd9375ea",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5b58e219_bbd55257",
        "filename": "src/path/filepath/path_windows_test.go",
        "patchSetId": 3
      },
      "lineNbr": 491,
      "author": {
        "id": 34993
      },
      "writtenOn": "2024-02-23T11:35:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0b67cb1e_56c7a587",
      "revId": "a23bd1af255d105ae6ade7e54a6e1377dd9375ea",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "582bb150_d4e135de",
        "filename": "src/path/filepath/path_windows_test.go",
        "patchSetId": 3
      },
      "lineNbr": 492,
      "author": {
        "id": 6365
      },
      "writtenOn": "2024-02-22T21:35:52Z",
      "side": 1,
      "message": "This output and exit code are dropped ‚Äî seems like we should at least pass them to `t.Logf` (or perhaps `t.Errorf` if the script to create the mount point succeeded?)",
      "range": {
        "startLine": 492,
        "startChar": 83,
        "endLine": 492,
        "endChar": 100
      },
      "revId": "a23bd1af255d105ae6ade7e54a6e1377dd9375ea",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fef908d7_3d612142",
        "filename": "src/path/filepath/path_windows_test.go",
        "patchSetId": 3
      },
      "lineNbr": 492,
      "author": {
        "id": 34993
      },
      "writtenOn": "2024-02-23T11:35:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "582bb150_d4e135de",
      "range": {
        "startLine": 492,
        "startChar": 83,
        "endLine": 492,
        "endChar": 100
      },
      "revId": "a23bd1af255d105ae6ade7e54a6e1377dd9375ea",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bc65022b_f0119e0d",
        "filename": "src/path/filepath/path_windows_test.go",
        "patchSetId": 3
      },
      "lineNbr": 497,
      "author": {
        "id": 6365
      },
      "writtenOn": "2024-02-22T21:35:52Z",
      "side": 1,
      "message": "(nit) use `strings.Join` (or `fmt.Fprintf` with a `strings.Builder`) instead of `+` to construct this program?",
      "revId": "a23bd1af255d105ae6ade7e54a6e1377dd9375ea",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b0203337_1ef2c2dd",
        "filename": "src/path/filepath/path_windows_test.go",
        "patchSetId": 3
      },
      "lineNbr": 497,
      "author": {
        "id": 34993
      },
      "writtenOn": "2024-02-23T11:35:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bc65022b_f0119e0d",
      "revId": "a23bd1af255d105ae6ade7e54a6e1377dd9375ea",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4c75ef79_012a7ba5",
        "filename": "src/path/filepath/path_windows_test.go",
        "patchSetId": 3
      },
      "lineNbr": 509,
      "author": {
        "id": 6365
      },
      "writtenOn": "2024-02-22T21:35:52Z",
      "side": 1,
      "message": "Does Windows have a race analogous to #22315?\n\nIf so, please add a comment at the beginning of each test that uses this to explain why the test cannot be parallel.\n\nOtherwise, consider making these tests parallel to improve overall test latency.",
      "revId": "a23bd1af255d105ae6ade7e54a6e1377dd9375ea",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "764675ac_436a60e4",
        "filename": "src/path/filepath/path_windows_test.go",
        "patchSetId": 3
      },
      "lineNbr": 509,
      "author": {
        "id": 34993
      },
      "writtenOn": "2024-02-23T11:35:01Z",
      "side": 1,
      "message": "Don\u0027t think so, as Windows doesn\u0027t support fork+exec model. Will make them parallel.",
      "parentUuid": "4c75ef79_012a7ba5",
      "revId": "a23bd1af255d105ae6ade7e54a6e1377dd9375ea",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "86d32f2f_39bbcf0e",
        "filename": "src/path/filepath/path_windows_test.go",
        "patchSetId": 3
      },
      "lineNbr": 517,
      "author": {
        "id": 6365
      },
      "writtenOn": "2024-02-22T21:35:52Z",
      "side": 1,
      "message": "(nit) please move the definition of `sameFile` closer to where it is used. (`TestEvalSymlinksVolumeID` does not appear to use it.)",
      "revId": "a23bd1af255d105ae6ade7e54a6e1377dd9375ea",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f3ae2376_9cfa7f40",
        "filename": "src/path/filepath/path_windows_test.go",
        "patchSetId": 3
      },
      "lineNbr": 517,
      "author": {
        "id": 34993
      },
      "writtenOn": "2024-02-23T11:35:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "86d32f2f_39bbcf0e",
      "revId": "a23bd1af255d105ae6ade7e54a6e1377dd9375ea",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e1c87bbd_bdf90575",
        "filename": "src/path/filepath/path_windows_test.go",
        "patchSetId": 3
      },
      "lineNbr": 532,
      "author": {
        "id": 6365
      },
      "writtenOn": "2024-02-22T21:35:52Z",
      "side": 1,
      "message": "It would be helpful to either expand this comment or add one near the end of the test to explain what would have happened before this issue was fixed.",
      "revId": "a23bd1af255d105ae6ade7e54a6e1377dd9375ea",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "958262d3_f9200f6f",
        "filename": "src/path/filepath/path_windows_test.go",
        "patchSetId": 3
      },
      "lineNbr": 532,
      "author": {
        "id": 34993
      },
      "writtenOn": "2024-02-23T11:35:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e1c87bbd_bdf90575",
      "revId": "a23bd1af255d105ae6ade7e54a6e1377dd9375ea",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "daab63c1_e0b34725",
        "filename": "src/path/filepath/path_windows_test.go",
        "patchSetId": 3
      },
      "lineNbr": 562,
      "author": {
        "id": 6365
      },
      "writtenOn": "2024-02-22T21:35:52Z",
      "side": 1,
      "message": "I\u0027m not sure what `ValidRecursion` refers to here ‚Äî it seems like what we\u0027re checking for is a _lack_ of recursion for mount points.",
      "range": {
        "startLine": 562,
        "startChar": 5,
        "endLine": 562,
        "endChar": 35
      },
      "revId": "a23bd1af255d105ae6ade7e54a6e1377dd9375ea",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7b138a6e_032b351c",
        "filename": "src/path/filepath/path_windows_test.go",
        "patchSetId": 3
      },
      "lineNbr": 562,
      "author": {
        "id": 34993
      },
      "writtenOn": "2024-02-23T11:35:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "daab63c1_e0b34725",
      "range": {
        "startLine": 562,
        "startChar": 5,
        "endLine": 562,
        "endChar": 35
      },
      "revId": "a23bd1af255d105ae6ade7e54a6e1377dd9375ea",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "45629980_0b605ffd",
        "filename": "src/path/filepath/path_windows_test.go",
        "patchSetId": 3
      },
      "lineNbr": 563,
      "author": {
        "id": 6365
      },
      "writtenOn": "2024-02-22T21:35:52Z",
      "side": 1,
      "message": "(nit) It\u0027s ok for code comments to refer to issues, but the comment should also include at least a summary of the issue in a standalone form ‚Äî it can be frustrating to have to open a bunch of links in a browser just to figure out what a test is doing if it happens to fail.",
      "revId": "a23bd1af255d105ae6ade7e54a6e1377dd9375ea",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f81871ad_4e4febc0",
        "filename": "src/path/filepath/path_windows_test.go",
        "patchSetId": 3
      },
      "lineNbr": 563,
      "author": {
        "id": 6365
      },
      "writtenOn": "2024-02-22T21:35:52Z",
      "side": 1,
      "message": "Is there an existing test for the equivalent case involving actual symlinks?\n\nOn POSIX systems that results in an error with the message \"EvalSymlinks: too many links\": https://go.dev/play/p/8aVW0DYjPBc",
      "revId": "a23bd1af255d105ae6ade7e54a6e1377dd9375ea",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2a1ac73b_84a6a610",
        "filename": "src/path/filepath/path_windows_test.go",
        "patchSetId": 3
      },
      "lineNbr": 563,
      "author": {
        "id": 34993
      },
      "writtenOn": "2024-02-23T11:35:01Z",
      "side": 1,
      "message": "Nop, not even for linux. Added `TestEvalSymlinksTooManyLinks`.",
      "parentUuid": "f81871ad_4e4febc0",
      "revId": "a23bd1af255d105ae6ade7e54a6e1377dd9375ea",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4da6c998_940c9ddb",
        "filename": "src/path/filepath/path_windows_test.go",
        "patchSetId": 3
      },
      "lineNbr": 563,
      "author": {
        "id": 34993
      },
      "writtenOn": "2024-02-23T11:35:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "45629980_0b605ffd",
      "revId": "a23bd1af255d105ae6ade7e54a6e1377dd9375ea",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2903b3a9_40f2e2b3",
        "filename": "src/path/filepath/path_windows_test.go",
        "patchSetId": 3
      },
      "lineNbr": 613,
      "author": {
        "id": 6365
      },
      "writtenOn": "2024-02-22T21:35:52Z",
      "side": 1,
      "message": "Since we\u0027re already starting from `tempDirCanonical`, I think the checks here and below should depend on the `winsymlink` setting, rather than using `sameFile`.\n\nIf `winsymlink` is `0`, I think we want the result of this call to be exactly equal to `want`, and otherwise IIUC it should be exactly equal to `dirlink`..?",
      "revId": "a23bd1af255d105ae6ade7e54a6e1377dd9375ea",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "afde5fee_4175a09a",
        "filename": "src/path/filepath/path_windows_test.go",
        "patchSetId": 3
      },
      "lineNbr": 613,
      "author": {
        "id": 34993
      },
      "writtenOn": "2024-02-23T11:35:01Z",
      "side": 1,
      "message": "Good catch.",
      "parentUuid": "2903b3a9_40f2e2b3",
      "revId": "a23bd1af255d105ae6ade7e54a6e1377dd9375ea",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e62e2460_553e486d",
        "filename": "src/path/filepath/path_windows_test.go",
        "patchSetId": 3
      },
      "lineNbr": 638,
      "author": {
        "id": 6365
      },
      "writtenOn": "2024-02-22T21:35:52Z",
      "side": 1,
      "message": "Here I think we expect exactly `want` in all cases, since the target of the link is based on `tempDirCanonical` (and thus cannot itself contain symlinks)..?",
      "revId": "a23bd1af255d105ae6ade7e54a6e1377dd9375ea",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "45aebbb5_fb8ca05b",
        "filename": "src/path/filepath/path_windows_test.go",
        "patchSetId": 3
      },
      "lineNbr": 638,
      "author": {
        "id": 34993
      },
      "writtenOn": "2024-02-23T11:35:01Z",
      "side": 1,
      "message": "The target of the link is based on a mounted volume that points to the `tempDirCanonical` volume. We can\u0027t use `file` directly.\nI\u0027ll apply the same logic as you mentioned in the previous comment.",
      "parentUuid": "e62e2460_553e486d",
      "revId": "a23bd1af255d105ae6ade7e54a6e1377dd9375ea",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}