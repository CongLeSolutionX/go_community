{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "3ca1b269_dd1e7c6f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-10-06T22:19:53Z",
      "side": 1,
      "message": "Superseded.",
      "parentUuid": "bb1270dd_fc553535",
      "tag": "autogenerated:trybots~beginning",
      "revId": "84529dc848d69de4282b92cead6ed7d678c31e3e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bddd151a_c690f218",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-10-06T22:19:53Z",
      "side": 1,
      "message": "SlowBots beginning. Status page: https://farmer.golang.org/try?commit\u003d84529dc8",
      "tag": "autogenerated:trybots~beginning",
      "revId": "84529dc848d69de4282b92cead6ed7d678c31e3e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "55b92f3c_b30efe83",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-10-06T22:35:48Z",
      "side": 1,
      "message": "Build is still in progress... Status page: https://farmer.golang.org/try?commit\u003d84529dc8\nFailed on windows-amd64-longtest: https://storage.googleapis.com/go-build-log/84529dc8/windows-amd64-longtest_6a4fabfe.log\nOther builds still in progress; subsequent failure notices suppressed until final report.\n\nConsult https://build.golang.org/ to see whether they are new failures. Keep in mind that TryBots currently test *exactly* your git commit, without rebasing. If your commit\u0027s git parent is old, the failure might\u0027ve already been fixed.\n",
      "parentUuid": "bddd151a_c690f218",
      "tag": "autogenerated:trybots~progress",
      "revId": "84529dc848d69de4282b92cead6ed7d678c31e3e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "83afea04_874e94a2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-10-06T22:39:11Z",
      "side": 1,
      "message": "3 of 28 SlowBots failed.\nFailed on windows-amd64-longtest: https://storage.googleapis.com/go-build-log/84529dc8/windows-amd64-longtest_6a4fabfe.log\nFailed on windows-386-2008: https://storage.googleapis.com/go-build-log/84529dc8/windows-386-2008_ff984ba4.log\nFailed on windows-amd64-2016: https://storage.googleapis.com/go-build-log/84529dc8/windows-amd64-2016_5fae7f10.log\n\nConsult https://build.golang.org/ to see whether they are new failures. Keep in mind that TryBots currently test *exactly* your git commit, without rebasing. If your commit\u0027s git parent is old, the failure might\u0027ve already been fixed.\n\nSlowBot builds that ran:\n* linux-amd64-longtest\n* windows-amd64-longtest\n",
      "parentUuid": "bddd151a_c690f218",
      "tag": "autogenerated:trybots~failed",
      "revId": "84529dc848d69de4282b92cead6ed7d678c31e3e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d7ba580e_03ca6a84",
        "filename": "src/cmd/go/internal/load/pkg.go",
        "patchSetId": 5
      },
      "lineNbr": 2207,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-10-07T21:10:54Z",
      "side": 1,
      "message": "I\u0027m thinking about how this interacts with multi-module workspaces, and how it interacts with users\u0027 understanding of versioning and reproducibility.\n\nSuppose I\u0027m in a workspace containing modules from repositories \u0027here\u0027, \u0027there\u0027, and \u0027other\u0027.\n\nIf I\u0027m in the working directory \u0027here\u0027, and I build a binary from \u0027there\u0027 that imports a package in \u0027other\u0027, the git status of the \u0027here\u0027 repository is not actually relevant at all, but \u0027there\u0027 and \u0027other\u0027 both actually matter a lot in terms of the contents of the binary. But we\u0027ll embed the status of the \u0027here\u0027 repository and not the other two.\n\n\nFor now, what I think we should do is:\n• Verify that p.Module is one of the main modules in the workspace.\n• Find the repo root containing base.Cwd.\n• Find the repo root containing p.Dir.\n• Find the repo root containing p.Module.Dir.\n• Verify that those three proposed repo roots all refer to the same directory. If not, either skip build-stamping or fail outright.\n\nAnd we should probably also leave open the option of stamping VCS status from multiple modules in the same workspace in the future. (That suggests that we should put the VCS information in the Module struct rather than the BuildInfo struct.)",
      "revId": "84529dc848d69de4282b92cead6ed7d678c31e3e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6304beb8_8a28e843",
        "filename": "src/cmd/go/internal/load/pkg.go",
        "patchSetId": 5
      },
      "lineNbr": 2207,
      "author": {
        "id": 17092
      },
      "writtenOn": "2021-10-08T22:05:31Z",
      "side": 1,
      "message": "Partially done. I\u0027ve changed this so that VCS info is stamped if the main package is in a main module, and both that module and the working directory are in the same repository. If those conditions aren\u0027t satisfied, VCS is skipped (no error).\n\nI don\u0027t think we should accommodate more than that. Modules and repositories don\u0027t necessarily correspond: you could have multiple repositories in a module, especially with Git submodules. If someone really is building out of multiple local repositories, I think our recommendation should be to use regular module requirements to get clean version information.",
      "parentUuid": "d7ba580e_03ca6a84",
      "revId": "84529dc848d69de4282b92cead6ed7d678c31e3e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "604e157c_c78a32ea",
        "filename": "src/cmd/go/internal/load/pkg.go",
        "patchSetId": 5
      },
      "lineNbr": 2273,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-10-07T21:10:54Z",
      "side": 1,
      "message": "If the vcs status command fails, I would prefer that we fail the build instead of silently omitting the debug information.\n\nOtherwise it seems much to easy to accidentally release an unstamped binary by, for example, running on a machine on which the user has forgotten to install or configure the VCS tool.\n\n(They can always bypass the error with `-buildvcs\u003dfalse` if they really don\u0027t care about the VCS metadata.)",
      "revId": "84529dc848d69de4282b92cead6ed7d678c31e3e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ae8ce37d_832d254a",
        "filename": "src/cmd/go/internal/load/pkg.go",
        "patchSetId": 5
      },
      "lineNbr": 2273,
      "author": {
        "id": 17092
      },
      "writtenOn": "2021-10-08T22:05:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "604e157c_c78a32ea",
      "revId": "84529dc848d69de4282b92cead6ed7d678c31e3e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ffe17744_41683cba",
        "filename": "src/cmd/go/internal/vcs/vcs.go",
        "patchSetId": 5
      },
      "lineNbr": 175,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-10-07T21:10:54Z",
      "side": 1,
      "message": "(not sure) Should we pass an explicit flag here?\n\nThe modified/added/removed files should already be reflected in the `hg identify` output, so maybe `hg status -u` is all we need? (That could potentially be faster — it theoretically doesn\u0027t even need to stat the files that are tracked.)",
      "revId": "84529dc848d69de4282b92cead6ed7d678c31e3e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "94165f5d_f06c419c",
        "filename": "src/cmd/go/internal/vcs/vcs.go",
        "patchSetId": 5
      },
      "lineNbr": 175,
      "author": {
        "id": 17092
      },
      "writtenOn": "2021-10-08T22:05:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ffe17744_41683cba",
      "revId": "84529dc848d69de4282b92cead6ed7d678c31e3e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b672aebc_83708ec8",
        "filename": "src/cmd/go/internal/vcs/vcs.go",
        "patchSetId": 5
      },
      "lineNbr": 827,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-10-07T21:10:54Z",
      "side": 1,
      "message": "How does this differ from the existing FromDir function? (And are there cases considered in that function that we also need to consider here, or does the lack of srcRoot make things simpler?)",
      "range": {
        "startLine": 822,
        "startChar": 0,
        "endLine": 827,
        "endChar": 32
      },
      "revId": "84529dc848d69de4282b92cead6ed7d678c31e3e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "171b136b_449a784a",
        "filename": "src/cmd/go/internal/vcs/vcs.go",
        "patchSetId": 5
      },
      "lineNbr": 827,
      "author": {
        "id": 17092
      },
      "writtenOn": "2021-10-08T22:05:31Z",
      "side": 1,
      "message": "Embarrassed to say I missed the existence of this function, even though I should have known it existed from GOPATH get. Not thinking clearly.\n\nFromDir was pretty specific to GOPATH get, but I\u0027ve adapted it to work here and pulled out some GOPATH specific code.",
      "parentUuid": "b672aebc_83708ec8",
      "range": {
        "startLine": 822,
        "startChar": 0,
        "endLine": 827,
        "endChar": 32
      },
      "revId": "84529dc848d69de4282b92cead6ed7d678c31e3e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f512e420_dedae39c",
        "filename": "src/cmd/go/internal/vcs/vcs.go",
        "patchSetId": 5
      },
      "lineNbr": 845,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-10-07T21:10:54Z",
      "side": 1,
      "message": "(not sure)\n\nShould we also prune at os.TempDir() the same way that we do when locating the go.mod file?",
      "range": {
        "startLine": 841,
        "startChar": 0,
        "endLine": 845,
        "endChar": 3
      },
      "revId": "84529dc848d69de4282b92cead6ed7d678c31e3e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f11d76d0_de6d6189",
        "filename": "src/cmd/go/internal/vcs/vcs.go",
        "patchSetId": 5
      },
      "lineNbr": 845,
      "author": {
        "id": 17092
      },
      "writtenOn": "2021-10-08T22:05:31Z",
      "side": 1,
      "message": "Deleted",
      "parentUuid": "f512e420_dedae39c",
      "range": {
        "startLine": 841,
        "startChar": 0,
        "endLine": 845,
        "endChar": 3
      },
      "revId": "84529dc848d69de4282b92cead6ed7d678c31e3e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "50cc6277_c0d45300",
        "filename": "src/cmd/go/script_test.go",
        "patchSetId": 5
      },
      "lineNbr": 1134,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-10-07T21:10:54Z",
      "side": 1,
      "message": "filepath.FromSlash, or perhaps filepath.Clean (if we want to accept both slashes and backslashes)?\n\n(Or are both of those unsuitable? If so, a comment would be helpful.)",
      "revId": "84529dc848d69de4282b92cead6ed7d678c31e3e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e1aafe4b_be151512",
        "filename": "src/cmd/go/script_test.go",
        "patchSetId": 5
      },
      "lineNbr": 1134,
      "author": {
        "id": 17092
      },
      "writtenOn": "2021-10-08T22:05:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "50cc6277_c0d45300",
      "revId": "84529dc848d69de4282b92cead6ed7d678c31e3e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8d12b558_b74d7757",
        "filename": "src/cmd/go/script_test.go",
        "patchSetId": 5
      },
      "lineNbr": 1159,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-10-07T21:10:54Z",
      "side": 1,
      "message": "It\u0027s kind of a shame that we don\u0027t already have this in x/ somewhere. I half-expected to find it in x/sys/execabs. 😞",
      "revId": "84529dc848d69de4282b92cead6ed7d678c31e3e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e06adc8e_20d8dee8",
        "filename": "src/cmd/go/script_test.go",
        "patchSetId": 5
      },
      "lineNbr": 1159,
      "author": {
        "id": 17092
      },
      "writtenOn": "2021-10-08T22:05:31Z",
      "side": 1,
      "message": "Yeah, I looked for it in os/exec and internal/execabs but was disappointed.\n\nI had a misconception that the lookup was done with PATH in the new process\u0027s environment rather than the parent process. It surprised me this was even needed.",
      "parentUuid": "8d12b558_b74d7757",
      "revId": "84529dc848d69de4282b92cead6ed7d678c31e3e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2a9d2638_ce490ced",
        "filename": "src/cmd/go/script_test.go",
        "patchSetId": 5
      },
      "lineNbr": 1179,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-10-07T21:10:54Z",
      "side": 1,
      "message": "Does this need to use lower-case \"path\" on plan9? (See lines 194–196.)",
      "revId": "84529dc848d69de4282b92cead6ed7d678c31e3e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d26ed5fc_bc749013",
        "filename": "src/cmd/go/script_test.go",
        "patchSetId": 5
      },
      "lineNbr": 1179,
      "author": {
        "id": 17092
      },
      "writtenOn": "2021-10-08T22:05:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2a9d2638_ce490ced",
      "revId": "84529dc848d69de4282b92cead6ed7d678c31e3e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8f295b45_ce747eea",
        "filename": "src/cmd/go/script_test.go",
        "patchSetId": 5
      },
      "lineNbr": 1186,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-10-07T21:10:54Z",
      "side": 1,
      "message": "I feel like there\u0027s gotta be a more efficient way to do this than statting every possible extension in each directory. 😅\n\n(Maybe `os.ReadDir(dir)` and then stat only the files with matching names? Or leave a TODO and I\u0027ll follow up.)",
      "range": {
        "startLine": 1181,
        "startChar": 0,
        "endLine": 1186,
        "endChar": 4
      },
      "revId": "84529dc848d69de4282b92cead6ed7d678c31e3e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "057ded78_46b59028",
        "filename": "src/cmd/go/script_test.go",
        "patchSetId": 5
      },
      "lineNbr": 1186,
      "author": {
        "id": 17092
      },
      "writtenOn": "2021-10-08T22:05:31Z",
      "side": 1,
      "message": "Done, also handled case insensitve matches.\n\nBut we actually do stat each extension in each directory on Windows. It costs a lot because of antivirus. See golang.org/issue/36768.",
      "parentUuid": "8f295b45_ce747eea",
      "range": {
        "startLine": 1181,
        "startChar": 0,
        "endLine": 1186,
        "endChar": 4
      },
      "revId": "84529dc848d69de4282b92cead6ed7d678c31e3e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}