{
  "comments": [
    {
      "key": {
        "uuid": "02cf8da0_e961fdb2",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 11,
      "author": {
        "id": 5045
      },
      "writtenOn": "2016-02-26T21:16:17Z",
      "side": 1,
      "message": "If this is true, that proto decoder is buggy and should be fixed. Proto decoders have been required to accept packed repeated fields since ~2009.",
      "revId": "95a555ce038ecff3b9a66703f4206df56b303444",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a29de171_a40b2fba",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 11,
      "author": {
        "id": 10031
      },
      "writtenOn": "2016-02-29T17:14:29Z",
      "side": 1,
      "message": "That is what this patch is addressing. The proto decoder in the pprof from the Go distribution does not recognize packet repeated fields. It doesn\u0027t generate them either, but it breaks compatibility with other profile generators.",
      "parentUuid": "02cf8da0_e961fdb2",
      "revId": "95a555ce038ecff3b9a66703f4206df56b303444",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "02cf8da0_bb234840",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 11,
      "author": {
        "id": 5045
      },
      "writtenOn": "2016-02-29T22:51:26Z",
      "side": 1,
      "message": "Ah, that wasn\u0027t clear to me. I saw this change was changing some encoding code, but I now see it\u0027s also changing decoding code.\n\nOkay, seems reasonable enough to me.",
      "parentUuid": "a29de171_a40b2fba",
      "revId": "95a555ce038ecff3b9a66703f4206df56b303444",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "02cf8da0_9b19ac0e",
        "filename": "src/cmd/pprof/internal/profile/proto.go",
        "patchSetId": 2
      },
      "lineNbr": 71,
      "author": {
        "id": 5045
      },
      "writtenOn": "2016-02-29T22:51:26Z",
      "side": 1,
      "message": "how important is efficiency here? one way to make this a bit more efficient would be to reserve enough space for the length varint in b.data first, then encode the entries, and then go back to write the varint (and shrink the reserved space as needed). is that worth doing?",
      "revId": "95a555ce038ecff3b9a66703f4206df56b303444",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "02feade5_d097cc73",
        "filename": "src/cmd/pprof/internal/profile/proto.go",
        "patchSetId": 2
      },
      "lineNbr": 71,
      "author": {
        "id": 10031
      },
      "writtenOn": "2016-03-01T18:49:55Z",
      "side": 1,
      "message": "This isn\u0027t particularly performance sensitive.\n\nAlso, we do not know how much space we will need for the length varint ahead of time, so it seems to me a copy is inevitable. Or am I missing something?",
      "parentUuid": "02cf8da0_9b19ac0e",
      "revId": "95a555ce038ecff3b9a66703f4206df56b303444",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "02cf8da0_af7422d9",
        "filename": "src/cmd/pprof/internal/profile/proto.go",
        "patchSetId": 2
      },
      "lineNbr": 71,
      "author": {
        "id": 5045
      },
      "writtenOn": "2016-03-04T00:08:56Z",
      "side": 1,
      "message": "I meant the allocation. If you go pessimistic, the longest varint is 10 bytes, so allow that much, and copy afterwards. Copying bytes is cheap on modern machines, but doing the extra allocations is expensive.\n\nAnyway, you can revisit.",
      "parentUuid": "02feade5_d097cc73",
      "revId": "95a555ce038ecff3b9a66703f4206df56b303444",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "02cf8da0_7b16d0dd",
        "filename": "src/cmd/pprof/internal/profile/proto.go",
        "patchSetId": 2
      },
      "lineNbr": 283,
      "author": {
        "id": 5045
      },
      "writtenOn": "2016-02-29T22:51:26Z",
      "side": 1,
      "message": "this doesn\u0027t seem right. for packed encoding, there should be a single varint (indicating the length in bytes of the whole repeated field), followed by some set of elements. I\u0027d expect this code to extract the varint, and then loop over that many bytes, pulling off varints as it goes.\n\nIn comparison, look at decode.go:dec_slice_packed_int64 in goprotobuf.",
      "revId": "95a555ce038ecff3b9a66703f4206df56b303444",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "02feade5_cb1a81b4",
        "filename": "src/cmd/pprof/internal/profile/proto.go",
        "patchSetId": 2
      },
      "lineNbr": 283,
      "author": {
        "id": 10031
      },
      "writtenOn": "2016-03-01T18:49:55Z",
      "side": 1,
      "message": "Yes, the length varint is decoded in decodeField, which creates a slice with the data in this field and puts it on b.data, which then is dispatched to this function from decodeMessage by a call through dec[b.field](...)",
      "parentUuid": "02cf8da0_7b16d0dd",
      "revId": "95a555ce038ecff3b9a66703f4206df56b303444",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "02cf8da0_8f7166ea",
        "filename": "src/cmd/pprof/internal/profile/proto.go",
        "patchSetId": 2
      },
      "lineNbr": 283,
      "author": {
        "id": 5045
      },
      "writtenOn": "2016-03-04T00:08:56Z",
      "side": 1,
      "message": "oh, right. this function is meant to consume all of b.data.",
      "parentUuid": "02feade5_cb1a81b4",
      "revId": "95a555ce038ecff3b9a66703f4206df56b303444",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}