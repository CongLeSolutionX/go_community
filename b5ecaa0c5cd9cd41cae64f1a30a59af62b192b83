{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "fa21109d_29153b04",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 19
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-03-02T19:43:01Z",
      "side": 1,
      "message": "SlowBots beginning. Status page: https://farmer.golang.org/try?commit\u003db5ecaa0c\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "b5ecaa0c5cd9cd41cae64f1a30a59af62b192b83",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2445731c_63353372",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 19
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-03-02T19:52:04Z",
      "side": 1,
      "message": "SlowBots are happy.\n\nSlowBot builds that ran:\n* freebsd-amd64-13_0\n",
      "parentUuid": "fa21109d_29153b04",
      "tag": "autogenerated:trybots~happy",
      "revId": "b5ecaa0c5cd9cd41cae64f1a30a59af62b192b83",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4062784a_d49a25d0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 19
      },
      "lineNbr": 0,
      "author": {
        "id": 50449
      },
      "writtenOn": "2023-03-02T20:06:35Z",
      "side": 1,
      "message": "Fixed the TryBot failure. This is ready now for initial feedback now. I\u0027ve highlighted a few lines that will probably need discussion.",
      "revId": "b5ecaa0c5cd9cd41cae64f1a30a59af62b192b83",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8591ef9f_32fc9425",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 19
      },
      "lineNbr": 0,
      "author": {
        "id": 50449
      },
      "writtenOn": "2023-03-02T23:15:07Z",
      "side": 1,
      "message": "Thanks for the fast review Michael. Left some comments and will push another patch. Probably tomorrow.",
      "revId": "b5ecaa0c5cd9cd41cae64f1a30a59af62b192b83",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cd0949f3_35f799ac",
        "filename": "src/runtime/asm_amd64.s",
        "patchSetId": 19
      },
      "lineNbr": 2039,
      "author": {
        "id": 12120
      },
      "writtenOn": "2023-03-02T22:54:39Z",
      "side": 1,
      "message": "I wonder if we should just make this a compiler intrinsic like getcallersp?\n\nhttps://cs.opensource.google/go/go/+/master:src/cmd/compile/internal/ssagen/ssa.go;l\u003d3979-3989",
      "revId": "b5ecaa0c5cd9cd41cae64f1a30a59af62b192b83",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c75612fb_26faa1a0",
        "filename": "src/runtime/proc.go",
        "patchSetId": 19
      },
      "lineNbr": 316,
      "author": {
        "id": 12120
      },
      "writtenOn": "2023-03-02T22:54:39Z",
      "side": 1,
      "message": "Related: CL 472957\n\nI\u0027d rather not disable inlining just to make one test pass. Is it possible to add a special case to the test?",
      "revId": "b5ecaa0c5cd9cd41cae64f1a30a59af62b192b83",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9a573cb4_4851e306",
        "filename": "src/runtime/proc.go",
        "patchSetId": 19
      },
      "lineNbr": 316,
      "author": {
        "id": 50449
      },
      "writtenOn": "2023-03-02T23:15:07Z",
      "side": 1,
      "message": "Should be doable. I\u0027ll try it.",
      "parentUuid": "c75612fb_26faa1a0",
      "revId": "b5ecaa0c5cd9cd41cae64f1a30a59af62b192b83",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eaf83d8a_c43429b4",
        "filename": "src/runtime/proc.go",
        "patchSetId": 19
      },
      "lineNbr": 316,
      "author": {
        "id": 50449
      },
      "writtenOn": "2023-03-09T14:47:44Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9a573cb4_4851e306",
      "revId": "b5ecaa0c5cd9cd41cae64f1a30a59af62b192b83",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4642cc71_a1c18284",
        "filename": "src/runtime/runtime1.go",
        "patchSetId": 19
      },
      "lineNbr": 361,
      "author": {
        "id": 12120
      },
      "writtenOn": "2023-03-02T22:54:39Z",
      "side": 1,
      "message": "Maybe tracefpunwindoff to be more specific?",
      "revId": "b5ecaa0c5cd9cd41cae64f1a30a59af62b192b83",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7ca6ffca_b342769a",
        "filename": "src/runtime/runtime1.go",
        "patchSetId": 19
      },
      "lineNbr": 361,
      "author": {
        "id": 12120
      },
      "writtenOn": "2023-03-02T22:54:39Z",
      "side": 1,
      "message": "Add to the GODEBUG doc in extern.go.",
      "revId": "b5ecaa0c5cd9cd41cae64f1a30a59af62b192b83",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c190452b_c6c31888",
        "filename": "src/runtime/runtime1.go",
        "patchSetId": 19
      },
      "lineNbr": 361,
      "author": {
        "id": 50449
      },
      "writtenOn": "2023-03-02T23:15:07Z",
      "side": 1,
      "message": "Will do.",
      "parentUuid": "7ca6ffca_b342769a",
      "revId": "b5ecaa0c5cd9cd41cae64f1a30a59af62b192b83",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7334f137_06d8b21f",
        "filename": "src/runtime/runtime1.go",
        "patchSetId": 19
      },
      "lineNbr": 361,
      "author": {
        "id": 50449
      },
      "writtenOn": "2023-03-02T23:15:07Z",
      "side": 1,
      "message": "I\u0027ll rename it.",
      "parentUuid": "4642cc71_a1c18284",
      "revId": "b5ecaa0c5cd9cd41cae64f1a30a59af62b192b83",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f9bce60a_c8cf4433",
        "filename": "src/runtime/runtime1.go",
        "patchSetId": 19
      },
      "lineNbr": 361,
      "author": {
        "id": 50449
      },
      "writtenOn": "2023-03-09T14:47:44Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c190452b_c6c31888",
      "revId": "b5ecaa0c5cd9cd41cae64f1a30a59af62b192b83",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d9c314d8_a097557c",
        "filename": "src/runtime/runtime1.go",
        "patchSetId": 19
      },
      "lineNbr": 361,
      "author": {
        "id": 50449
      },
      "writtenOn": "2023-03-09T14:47:44Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7334f137_06d8b21f",
      "revId": "b5ecaa0c5cd9cd41cae64f1a30a59af62b192b83",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e07a1c38_47894530",
        "filename": "src/runtime/trace.go",
        "patchSetId": 19
      },
      "lineNbr": 892,
      "author": {
        "id": 12120
      },
      "writtenOn": "2023-03-02T22:54:39Z",
      "side": 1,
      "message": "What kinds of issues? Is it from syscalls perhaps? gcallers has a special case for syscalls: https://cs.opensource.google/go/go/+/master:src/runtime/traceback.go;l\u003d56-70;drc\u003d02411bcd7c8eda9c694a5755aff0a516d4983952",
      "range": {
        "startLine": 891,
        "startChar": 5,
        "endLine": 892,
        "endChar": 33
      },
      "revId": "b5ecaa0c5cd9cd41cae64f1a30a59af62b192b83",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9aca0b3a_e5e12329",
        "filename": "src/runtime/trace.go",
        "patchSetId": 19
      },
      "lineNbr": 892,
      "author": {
        "id": 50449
      },
      "writtenOn": "2023-03-02T23:15:07Z",
      "side": 1,
      "message": "I\u0027ll dig deeper. But I think what I saw was that gentraceback will sometimes have an additional frame that fp unwind doesn\u0027t see. But it\u0027s not consistent for some reason. Sometimes it\u0027s 1 extra frame, sometimes it\u0027s 2.",
      "parentUuid": "e07a1c38_47894530",
      "range": {
        "startLine": 891,
        "startChar": 5,
        "endLine": 892,
        "endChar": 33
      },
      "revId": "b5ecaa0c5cd9cd41cae64f1a30a59af62b192b83",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "29995b99_4b397bfb",
        "filename": "src/runtime/trace.go",
        "patchSetId": 19
      },
      "lineNbr": 892,
      "author": {
        "id": 50449
      },
      "writtenOn": "2023-03-09T14:47:44Z",
      "side": 1,
      "message": "We\u0027re still looking into this.",
      "parentUuid": "9aca0b3a_e5e12329",
      "range": {
        "startLine": 891,
        "startChar": 5,
        "endLine": 892,
        "endChar": 33
      },
      "revId": "b5ecaa0c5cd9cd41cae64f1a30a59af62b192b83",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e605fcde_2e41696c",
        "filename": "src/runtime/trace.go",
        "patchSetId": 19
      },
      "lineNbr": 892,
      "author": {
        "id": 57733
      },
      "writtenOn": "2023-03-09T15:49:13Z",
      "side": 1,
      "message": "I can update this a bit. I tried out unwinding from curgp.sched.bp. If you do that with no other changes, I observe crashes when 1) we\u0027re in runtime.goexit1, and 2) the stack grows. In this case, we attempt to unwind from traceGoPreempt within runtime.newstack, and there is no saved base pointer because we\u0027re at the top of the stack, so we crash on a nil pointer dereference. That\u0027s easy to fix by checking that the frame pointer is nonzero before following it.\n\nHowever, that still leaves some inconsistencies. I think they mostly come down to not having runtime.systemstack save a frame pointer. Without that, when we unwind from curgp.sched.bp, we might unwind from the caller of runtime.systemstack, or from the caller\u0027s caller if the caller is inlined, and so on. If I pull in go.dev/cl/472195 to add a frame pointer to runtime.systemstack, I can use skip - 1 and get fully consistent results, with the exception of traceGoSysCall. The \"minus 1\" is because gcallers is going to start from the program counter and stack pointer saved by gosave_systemstack_switch, so it\u0027ll get one extra frame to unwind.\n\nAs for traceGoSysCall, as you say Michael that\u0027s a special case. gcallers will unwind from a saved PC and SP at the point where entersyscall was called. This is a few frames up from runtime.systemstack gets called, so I can change the special case in traceGoSysCall to skip 4 frames instead of 1 and get all of the original TestTraceSymbolize cases to pass.\n\nAll that said, I think curgp.sched.bp is workable if runtime.systemstack saves a frame pointer. And it would have the benefit of being able to start unwinding earlier in the stack, without having to pass through frames on the system stack like this CL does now.\n\n---\n\nAnother direction I tried is to more closely imitate what gentraceback does. We start with a PC and an SP, and use findfunc and funcspdelta to reconstruct the first frame pointer. Then we can do normal frame pointer unwinding from there. I didn\u0027t get far with that, though, because I ran into morestack-related crashes that I haven\u0027t debugged yet. Plus you lose a little bit of the performance gain since you\u0027re doing the lookup stuff for the first frame.",
      "parentUuid": "29995b99_4b397bfb",
      "range": {
        "startLine": 891,
        "startChar": 5,
        "endLine": 892,
        "endChar": 33
      },
      "revId": "b5ecaa0c5cd9cd41cae64f1a30a59af62b192b83",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6fd735cf_ec2ae2d9",
        "filename": "src/runtime/trace.go",
        "patchSetId": 19
      },
      "lineNbr": 892,
      "author": {
        "id": 50449
      },
      "writtenOn": "2023-03-09T17:20:03Z",
      "side": 1,
      "message": "\u003e  That\u0027s easy to fix by checking that the frame pointer is nonzero before following it.\n\n\nThat\u0027s probably a good idea in general. Done in Patchset 21.",
      "parentUuid": "e605fcde_2e41696c",
      "range": {
        "startLine": 891,
        "startChar": 5,
        "endLine": 892,
        "endChar": 33
      },
      "revId": "b5ecaa0c5cd9cd41cae64f1a30a59af62b192b83",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "68f72dac_ece608e8",
        "filename": "src/runtime/trace.go",
        "patchSetId": 19
      },
      "lineNbr": 892,
      "author": {
        "id": 50449
      },
      "writtenOn": "2023-03-10T10:12:55Z",
      "side": 1,
      "message": "@mpratt@google.com we need to decide whether:\n\n1. We can land this patch with the `skip+4` workaround before CL 472195 lands. But this will prevent CL 472195 to land because it breaks unwinding from g0 to g stack [1].\n2. Wait for CL 472195 to land, and adjust this patch like shown here [2].\n\nI probably slightly prefer figuring out CL 472195 first. What do you think?\n\n[1] https://go-review.googlesource.com/c/go/+/472195/comment/9441d839_7e1a92db/\n[2] https://gist.github.com/felixge/8fa0b66298910417edbc0426b700a7b1",
      "parentUuid": "6fd735cf_ec2ae2d9",
      "range": {
        "startLine": 891,
        "startChar": 5,
        "endLine": 892,
        "endChar": 33
      },
      "revId": "b5ecaa0c5cd9cd41cae64f1a30a59af62b192b83",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "599360fc_3ae40e43",
        "filename": "src/runtime/trace.go",
        "patchSetId": 19
      },
      "lineNbr": 892,
      "author": {
        "id": 12120
      },
      "writtenOn": "2023-03-13T17:52:46Z",
      "side": 1,
      "message": "CL 472195 is submitted now, so that answers that question. 😊",
      "parentUuid": "68f72dac_ece608e8",
      "range": {
        "startLine": 891,
        "startChar": 5,
        "endLine": 892,
        "endChar": 33
      },
      "revId": "b5ecaa0c5cd9cd41cae64f1a30a59af62b192b83",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2d507df3_0038347f",
        "filename": "src/runtime/trace.go",
        "patchSetId": 19
      },
      "lineNbr": 894,
      "author": {
        "id": 12120
      },
      "writtenOn": "2023-03-02T22:54:39Z",
      "side": 1,
      "message": "Why is this different from the gcallers case above? The callers of this function should be incrementing skip appropriately.",
      "range": {
        "startLine": 892,
        "startChar": 34,
        "endLine": 894,
        "endChar": 65
      },
      "revId": "b5ecaa0c5cd9cd41cae64f1a30a59af62b192b83",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8124f42a_9d22f4ba",
        "filename": "src/runtime/trace.go",
        "patchSetId": 19
      },
      "lineNbr": 894,
      "author": {
        "id": 50449
      },
      "writtenOn": "2023-03-02T23:15:07Z",
      "side": 1,
      "message": "The gcallers case above starts unwinding at the point where the g transitioned to g0\u0027s stack. This means traceStackID and its callers on the g0 stack are not included in the traceback, so less frames need to be skipped. Does that make sense?",
      "parentUuid": "2d507df3_0038347f",
      "range": {
        "startLine": 892,
        "startChar": 34,
        "endLine": 894,
        "endChar": 65
      },
      "revId": "b5ecaa0c5cd9cd41cae64f1a30a59af62b192b83",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "28ae44a2_b1219379",
        "filename": "src/runtime/trace.go",
        "patchSetId": 19
      },
      "lineNbr": 894,
      "author": {
        "id": 50449
      },
      "writtenOn": "2023-03-10T10:12:55Z",
      "side": 1,
      "message": "Marking this as resolved.",
      "parentUuid": "8124f42a_9d22f4ba",
      "range": {
        "startLine": 892,
        "startChar": 34,
        "endLine": 894,
        "endChar": 65
      },
      "revId": "b5ecaa0c5cd9cd41cae64f1a30a59af62b192b83",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aefd8c35_674a03f3",
        "filename": "src/runtime/trace.go",
        "patchSetId": 19
      },
      "lineNbr": 895,
      "author": {
        "id": 50449
      },
      "writtenOn": "2023-03-02T20:06:35Z",
      "side": 1,
      "message": "Is this a deal breaker for landing this patch?\n\nGenerally speaking curgp.sched.bp works, but some events either have a frame too much or a frame too little, regardless of how I adjust skip here. I suspect the issues I\u0027ve been hitting with it could also be related to https://go-review.googlesource.com/c/go/+/472195 but I\u0027m not entirely sure yet.\n\nI\u0027m also curious about whether or not hiding runtime frames makes sense for a low-level tool like the tracer, especially since it complicates the implementation quite a bit.",
      "revId": "b5ecaa0c5cd9cd41cae64f1a30a59af62b192b83",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "52877ea7_cf92e873",
        "filename": "src/runtime/trace.go",
        "patchSetId": 19
      },
      "lineNbr": 913,
      "author": {
        "id": 12120
      },
      "writtenOn": "2023-03-02T22:54:39Z",
      "side": 1,
      "message": "!\u003d 0?\n\nGODEBUG\u003dfpunwindoff\u003d100 should be extra off, right?",
      "range": {
        "startLine": 913,
        "startChar": 25,
        "endLine": 913,
        "endChar": 30
      },
      "revId": "b5ecaa0c5cd9cd41cae64f1a30a59af62b192b83",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "da1a0696_d7dbcd6d",
        "filename": "src/runtime/trace.go",
        "patchSetId": 19
      },
      "lineNbr": 913,
      "author": {
        "id": 50449
      },
      "writtenOn": "2023-03-02T23:15:07Z",
      "side": 1,
      "message": "Will do.",
      "parentUuid": "52877ea7_cf92e873",
      "range": {
        "startLine": 913,
        "startChar": 25,
        "endLine": 913,
        "endChar": 30
      },
      "revId": "b5ecaa0c5cd9cd41cae64f1a30a59af62b192b83",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3f46e666_a4d59db4",
        "filename": "src/runtime/trace.go",
        "patchSetId": 19
      },
      "lineNbr": 913,
      "author": {
        "id": 50449
      },
      "writtenOn": "2023-03-09T14:47:44Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "da1a0696_d7dbcd6d",
      "range": {
        "startLine": 913,
        "startChar": 25,
        "endLine": 913,
        "endChar": 30
      },
      "revId": "b5ecaa0c5cd9cd41cae64f1a30a59af62b192b83",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f86334e6_ee169119",
        "filename": "src/runtime/trace.go",
        "patchSetId": 19
      },
      "lineNbr": 1277,
      "author": {
        "id": 12120
      },
      "writtenOn": "2023-03-02T22:54:39Z",
      "side": 1,
      "message": "\"Logical\" frames here means the manually constructed stack traces in traceReadCPU and StartTrace, right? Could you define that somewhere?",
      "range": {
        "startLine": 1277,
        "startChar": 43,
        "endLine": 1277,
        "endChar": 50
      },
      "revId": "b5ecaa0c5cd9cd41cae64f1a30a59af62b192b83",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5f77a681_d8ed183a",
        "filename": "src/runtime/trace.go",
        "patchSetId": 19
      },
      "lineNbr": 1277,
      "author": {
        "id": 50449
      },
      "writtenOn": "2023-03-02T23:15:07Z",
      "side": 1,
      "message": "\u003e \"Logical\" frames here means the manually constructed stack traces in traceReadCPU and StartTrace, right?\n\nYes.\n\n\u003e Could you define that somewhere?\n\nBy declaring the sentinel value as a constant? That\u0027s probably a good idea. Or did you mean enhancing the comment to explain the different cases in more detail?",
      "parentUuid": "f86334e6_ee169119",
      "range": {
        "startLine": 1277,
        "startChar": 43,
        "endLine": 1277,
        "endChar": 50
      },
      "revId": "b5ecaa0c5cd9cd41cae64f1a30a59af62b192b83",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f4323191_0f151d22",
        "filename": "src/runtime/trace.go",
        "patchSetId": 19
      },
      "lineNbr": 1277,
      "author": {
        "id": 12120
      },
      "writtenOn": "2023-03-06T18:16:59Z",
      "side": 1,
      "message": "I meant enhancing the comment, since this is the only place that term is used.",
      "parentUuid": "5f77a681_d8ed183a",
      "range": {
        "startLine": 1277,
        "startChar": 43,
        "endLine": 1277,
        "endChar": 50
      },
      "revId": "b5ecaa0c5cd9cd41cae64f1a30a59af62b192b83",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3f353603_c23c7018",
        "filename": "src/runtime/trace.go",
        "patchSetId": 19
      },
      "lineNbr": 1277,
      "author": {
        "id": 50449
      },
      "writtenOn": "2023-03-09T14:47:44Z",
      "side": 1,
      "message": "I\u0027ve enhanced the comment. But I don\u0027t think this patch introduces \"logical frames\" as a new term, gentraceback already uses it:\n\nhttps://github.com/golang/go/blob/71c84d4b4149bebc2abcc495ef744e1a010a18e7/src/runtime/traceback.go#L29-L31",
      "parentUuid": "f4323191_0f151d22",
      "range": {
        "startLine": 1277,
        "startChar": 43,
        "endLine": 1277,
        "endChar": 50
      },
      "revId": "b5ecaa0c5cd9cd41cae64f1a30a59af62b192b83",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b0007467_5cf101d5",
        "filename": "src/runtime/trace.go",
        "patchSetId": 19
      },
      "lineNbr": 1281,
      "author": {
        "id": 50449
      },
      "writtenOn": "2023-03-02T20:06:35Z",
      "side": 1,
      "message": "Please let me know if placing a sentinel (todo: fix typo) or skip value in pcBuf[0] is okay, or if I should attempt a cleaner approach,",
      "revId": "b5ecaa0c5cd9cd41cae64f1a30a59af62b192b83",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c12b4e97_e16b7036",
        "filename": "src/runtime/trace/trace_stack_test.go",
        "patchSetId": 19
      },
      "lineNbr": 248,
      "author": {
        "id": 50449
      },
      "writtenOn": "2023-03-02T20:06:35Z",
      "side": 1,
      "message": "This problem would go away if https://go-review.googlesource.com/c/go/+/472195 lands, but it seems like there might be concerns about it: https://github.com/golang/go/issues/58378#issuecomment-1452270103",
      "revId": "b5ecaa0c5cd9cd41cae64f1a30a59af62b192b83",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}