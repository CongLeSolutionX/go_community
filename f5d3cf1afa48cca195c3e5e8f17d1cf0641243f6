{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "f7517f55_1fbf9b98",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 11990
      },
      "writtenOn": "2020-10-16T11:00:04Z",
      "side": 1,
      "message": "Thanks for reviewing this one Keith.",
      "revId": "f5d3cf1afa48cca195c3e5e8f17d1cf0641243f6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a13cacd1_c7b334ec",
        "filename": "src/cmd/compile/internal/ssa/gen/S390X.rules",
        "patchSetId": 3
      },
      "lineNbr": 649,
      "author": {
        "id": 5200
      },
      "writtenOn": "2020-10-15T20:12:09Z",
      "side": 1,
      "message": "There is overlap between these two rules. Which one should we pick? Is RISBGZ or ANDconst faster?",
      "range": {
        "startLine": 643,
        "startChar": 0,
        "endLine": 649,
        "endChar": 21
      },
      "revId": "f5d3cf1afa48cca195c3e5e8f17d1cf0641243f6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8b8ac900_b2b04d67",
        "filename": "src/cmd/compile/internal/ssa/gen/S390X.rules",
        "patchSetId": 3
      },
      "lineNbr": 649,
      "author": {
        "id": 11990
      },
      "writtenOn": "2020-10-16T11:00:04Z",
      "side": 1,
      "message": "They both have the same latency I think. Both also clobber flags. RISBGZ has the advantage that is not in-place and therefore we might be able to save a reg-reg move. ANDconst with a 16-bit immediate can be encoded in 4 bytes whereas RISBGZ and ANDconst with a 32-bit immediate are 6 bytes.\n\nI think overall it makes sense to choose RISBGZ thanks to the separate source and destination registers. Overall that reduces the size of the code more than the 16-bit immediate encoding advantage. But it\u0027s close, the choice is fairly arbitrary.",
      "parentUuid": "a13cacd1_c7b334ec",
      "range": {
        "startLine": 643,
        "startChar": 0,
        "endLine": 649,
        "endChar": 21
      },
      "revId": "f5d3cf1afa48cca195c3e5e8f17d1cf0641243f6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "51aab0e7_5a181baa",
        "filename": "src/cmd/compile/internal/ssa/gen/S390X.rules",
        "patchSetId": 3
      },
      "lineNbr": 649,
      "author": {
        "id": 11990
      },
      "writtenOn": "2020-10-16T12:19:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8b8ac900_b2b04d67",
      "range": {
        "startLine": 643,
        "startChar": 0,
        "endLine": 649,
        "endChar": 21
      },
      "revId": "f5d3cf1afa48cca195c3e5e8f17d1cf0641243f6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "91e8098d_71779d0a",
        "filename": "src/cmd/compile/internal/ssa/gen/S390X.rules",
        "patchSetId": 3
      },
      "lineNbr": 665,
      "author": {
        "id": 5200
      },
      "writtenOn": "2020-10-15T20:12:09Z",
      "side": 1,
      "message": "I don\u0027t think these are right.\nFor example, SLW is spec\u0027d to shift by arg1%32. Just because arg1\u003e\u003d32 doesn\u0027t mean the result is 0. SLW is not Go-like (at least, according to S390Ops.go).\n\nThe two rules here should probably be:\n\n(S(LD|RD|RAD) x (MOVDconst [c])) \u003d\u003e (S(LD|RD|RAD)const x [int8(c\u002663)])\n(S(LW|RW|RAW) x (MOVDconst [c])) \u003d\u003e (S(LW|RW|RAW)const x [int8(c\u002631)])\n\n... but check the semantics of those shifts to make sure the comments in S390XOps.go are right.\n\nCan the old rule lead to incorrect code (SLWconst with constant \u003e\u003d32, \u003c64)? If so, we should have a separate CL to fix it (and possibly backport).",
      "revId": "f5d3cf1afa48cca195c3e5e8f17d1cf0641243f6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "66bbf721_6995ffb8",
        "filename": "src/cmd/compile/internal/ssa/gen/S390X.rules",
        "patchSetId": 3
      },
      "lineNbr": 665,
      "author": {
        "id": 11990
      },
      "writtenOn": "2020-10-16T11:00:04Z",
      "side": 1,
      "message": "Ah good spot. The comments in S390XOps are wrong. All shifts on s390x use the rightmost 6 bits of the shift value and are therefore mod 64, even 32-bit shifts. I\u0027ll fix those.\n\nI think the old rules are OK, I don\u0027t think they need to be changed.",
      "parentUuid": "91e8098d_71779d0a",
      "revId": "f5d3cf1afa48cca195c3e5e8f17d1cf0641243f6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "50838212_fccb0c57",
        "filename": "src/cmd/compile/internal/ssa/gen/S390X.rules",
        "patchSetId": 3
      },
      "lineNbr": 665,
      "author": {
        "id": 11990
      },
      "writtenOn": "2020-10-16T12:19:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "66bbf721_6995ffb8",
      "revId": "f5d3cf1afa48cca195c3e5e8f17d1cf0641243f6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5f3d83bc_667bad57",
        "filename": "src/cmd/compile/internal/ssa/gen/S390X.rules",
        "patchSetId": 3
      },
      "lineNbr": 722,
      "author": {
        "id": 5200
      },
      "writtenOn": "2020-10-15T20:12:09Z",
      "side": 1,
      "message": "I get very confused by this rule. Perhaps an example would help me understand why it is correct.",
      "revId": "f5d3cf1afa48cca195c3e5e8f17d1cf0641243f6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7c9fc818_9e6ad194",
        "filename": "src/cmd/compile/internal/ssa/gen/S390X.rules",
        "patchSetId": 3
      },
      "lineNbr": 722,
      "author": {
        "id": 11990
      },
      "writtenOn": "2020-10-16T11:00:04Z",
      "side": 1,
      "message": "Yes, I\u0027ll put together an explanation of the logic.",
      "parentUuid": "5f3d83bc_667bad57",
      "revId": "f5d3cf1afa48cca195c3e5e8f17d1cf0641243f6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9e5012ae_3a04e374",
        "filename": "src/cmd/compile/internal/ssa/gen/S390X.rules",
        "patchSetId": 3
      },
      "lineNbr": 722,
      "author": {
        "id": 11990
      },
      "writtenOn": "2020-10-16T12:19:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7c9fc818_9e6ad194",
      "revId": "f5d3cf1afa48cca195c3e5e8f17d1cf0641243f6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4fdf7506_30dd7b53",
        "filename": "src/cmd/compile/internal/ssa/gen/S390X.rules",
        "patchSetId": 3
      },
      "lineNbr": 754,
      "author": {
        "id": 5200
      },
      "writtenOn": "2020-10-15T20:12:09Z",
      "side": 1,
      "message": "Don\u0027t you need r.Amount \u003d\u003d 0 or something here?",
      "revId": "f5d3cf1afa48cca195c3e5e8f17d1cf0641243f6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4c5e29d1_79725b83",
        "filename": "src/cmd/compile/internal/ssa/gen/S390X.rules",
        "patchSetId": 3
      },
      "lineNbr": 754,
      "author": {
        "id": 11990
      },
      "writtenOn": "2020-10-16T11:00:04Z",
      "side": 1,
      "message": "Good catch. Yes, I think we need either a \u0027r.Amount \u003d\u003d 0\u0027 or adjust the check to unrotate r.Start before checking it refers to (a copy of) the most significant bit: \u0027(r.Start+r.Amount)\u002663 \u003c\u003d c\u0027.",
      "parentUuid": "4fdf7506_30dd7b53",
      "revId": "f5d3cf1afa48cca195c3e5e8f17d1cf0641243f6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ba35a72c_312339ef",
        "filename": "src/cmd/compile/internal/ssa/gen/S390X.rules",
        "patchSetId": 3
      },
      "lineNbr": 754,
      "author": {
        "id": 11990
      },
      "writtenOn": "2020-10-16T12:19:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4c5e29d1_79725b83",
      "revId": "f5d3cf1afa48cca195c3e5e8f17d1cf0641243f6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "901f7d4a_0f704b0a",
        "filename": "src/cmd/internal/obj/s390x/rotate.go",
        "patchSetId": 3
      },
      "lineNbr": 61,
      "author": {
        "id": 5200
      },
      "writtenOn": "2020-10-15T20:12:09Z",
      "side": 1,
      "message": "Maybe call this RotateLeft? So the reader knows the direction, and it matches byts.RotateLeft64.\n\nMaybe even InRotateLeft, as the rotate happens before the mask.",
      "revId": "f5d3cf1afa48cca195c3e5e8f17d1cf0641243f6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5bb8eb0a_c42d5453",
        "filename": "src/cmd/internal/obj/s390x/rotate.go",
        "patchSetId": 3
      },
      "lineNbr": 61,
      "author": {
        "id": 11990
      },
      "writtenOn": "2020-10-16T12:19:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "901f7d4a_0f704b0a",
      "revId": "f5d3cf1afa48cca195c3e5e8f17d1cf0641243f6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "adcc746b_5f7beb46",
        "filename": "src/cmd/internal/obj/s390x/rotate.go",
        "patchSetId": 3
      },
      "lineNbr": 82,
      "author": {
        "id": 5200
      },
      "writtenOn": "2020-10-15T20:12:09Z",
      "side": 1,
      "message": "unrepresentable (0 or not contiguous)",
      "range": {
        "startLine": 82,
        "startChar": 26,
        "endLine": 82,
        "endChar": 40
      },
      "revId": "f5d3cf1afa48cca195c3e5e8f17d1cf0641243f6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "60c0d84b_5938a2e7",
        "filename": "src/cmd/internal/obj/s390x/rotate.go",
        "patchSetId": 3
      },
      "lineNbr": 82,
      "author": {
        "id": 11990
      },
      "writtenOn": "2020-10-16T12:19:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "adcc746b_5f7beb46",
      "range": {
        "startLine": 82,
        "startChar": 26,
        "endLine": 82,
        "endChar": 40
      },
      "revId": "f5d3cf1afa48cca195c3e5e8f17d1cf0641243f6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "37cf8312_062e9420",
        "filename": "src/cmd/internal/obj/s390x/rotate.go",
        "patchSetId": 3
      },
      "lineNbr": 110,
      "author": {
        "id": 5200
      },
      "writtenOn": "2020-10-15T20:12:09Z",
      "side": 1,
      "message": "same here.",
      "range": {
        "startLine": 110,
        "startChar": 26,
        "endLine": 110,
        "endChar": 40
      },
      "revId": "f5d3cf1afa48cca195c3e5e8f17d1cf0641243f6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d9f5bb1f_cd07cbf2",
        "filename": "src/cmd/internal/obj/s390x/rotate.go",
        "patchSetId": 3
      },
      "lineNbr": 110,
      "author": {
        "id": 11990
      },
      "writtenOn": "2020-10-16T12:19:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "37cf8312_062e9420",
      "range": {
        "startLine": 110,
        "startChar": 26,
        "endLine": 110,
        "endChar": 40
      },
      "revId": "f5d3cf1afa48cca195c3e5e8f17d1cf0641243f6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}