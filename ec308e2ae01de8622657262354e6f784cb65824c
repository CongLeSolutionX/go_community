{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "6e2b8fcb_07bb025a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 12545
      },
      "writtenOn": "2021-05-16T01:56:03Z",
      "side": 1,
      "message": "Not working on the weekend... honest.",
      "revId": "ec308e2ae01de8622657262354e6f784cb65824c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4e306d53_0ec43f71",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 17092
      },
      "writtenOn": "2021-05-17T21:06:04Z",
      "side": 1,
      "message": "TRY\u003dlinux-amd64-longtest,windows-amd64-longtest",
      "revId": "ec308e2ae01de8622657262354e6f784cb65824c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "14df2e47_c465359b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-05-17T21:06:18Z",
      "side": 1,
      "message": "SlowBots beginning. Status page: https://farmer.golang.org/try?commit\u003dec308e2a",
      "tag": "autogenerated:trybots~beginning",
      "revId": "ec308e2ae01de8622657262354e6f784cb65824c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "70a566e5_9ea276e9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-05-17T21:14:29Z",
      "side": 1,
      "message": "Build is still in progress... Status page: https://farmer.golang.org/try?commit\u003dec308e2a\nFailed on linux-amd64-longtest: https://storage.googleapis.com/go-build-log/ec308e2a/linux-amd64-longtest_2ad5d59d.log\nOther builds still in progress; subsequent failure notices suppressed until final report.\n\nConsult https://build.golang.org/ to see whether they are new failures. Keep in mind that TryBots currently test *exactly* your git commit, without rebasing. If your commit\u0027s git parent is old, the failure might\u0027ve already been fixed.\n",
      "parentUuid": "14df2e47_c465359b",
      "tag": "autogenerated:trybots~progress",
      "revId": "ec308e2ae01de8622657262354e6f784cb65824c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6f9e62ac_dfd32cb6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-05-17T23:35:38Z",
      "side": 1,
      "message": "2 of 26 SlowBots failed.\nFailed on linux-amd64-longtest: https://storage.googleapis.com/go-build-log/ec308e2a/linux-amd64-longtest_2ad5d59d.log\nFailed on windows-amd64-longtest: https://storage.googleapis.com/go-build-log/ec308e2a/windows-amd64-longtest_26a7e9a8.log\n\nConsult https://build.golang.org/ to see whether they are new failures. Keep in mind that TryBots currently test *exactly* your git commit, without rebasing. If your commit\u0027s git parent is old, the failure might\u0027ve already been fixed.\n\nSlowBot builds that ran:\n* linux-amd64-longtest\n* windows-amd64-longtest\n",
      "parentUuid": "14df2e47_c465359b",
      "tag": "autogenerated:trybots~failed",
      "revId": "ec308e2ae01de8622657262354e6f784cb65824c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9c217940_2a437a82",
        "filename": "src/internal/fuzz/coverage.go",
        "patchSetId": 2
      },
      "lineNbr": 31,
      "author": {
        "id": 17092
      },
      "writtenOn": "2021-05-17T21:06:04Z",
      "side": 1,
      "message": "I think we can resolve this TODO and delete coverageCopy. It\u0027s better for callers to call SnapshotCoverage(), then use the global coverageSnapshot.",
      "revId": "ec308e2ae01de8622657262354e6f784cb65824c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fd75ce6c_03266d56",
        "filename": "src/internal/fuzz/coverage.go",
        "patchSetId": 2
      },
      "lineNbr": 58,
      "author": {
        "id": 17092
      },
      "writtenOn": "2021-05-17T21:06:04Z",
      "side": 1,
      "message": "Nit: let\u0027s have callers reference coverageSnapshot directly. We may be able to avoid allocating and copying, and it makes the use of global state more explicit.",
      "revId": "ec308e2ae01de8622657262354e6f784cb65824c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ceed86ad_d88d3bc3",
        "filename": "src/testing/fuzz.go",
        "patchSetId": 2
      },
      "lineNbr": 686,
      "author": {
        "id": 17092
      },
      "writtenOn": "2021-05-17T21:06:04Z",
      "side": 1,
      "message": "Rather than go:linkname, let\u0027s wrap these functions to testing/internal/testdeps.TestDeps. The generated test main code injects that early on. The testing package can call them through the testDeps interface. We\u0027ve done that for a few other internal/fuzz functions, and it\u0027s worked well.",
      "revId": "ec308e2ae01de8622657262354e6f784cb65824c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}