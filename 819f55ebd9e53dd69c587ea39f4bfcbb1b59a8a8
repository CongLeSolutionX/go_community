{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "9ebc53d9_5a5c1b66",
        "filename": "/COMMIT_MSG",
        "patchSetId": 8
      },
      "lineNbr": 11,
      "author": {
        "id": 5440
      },
      "writtenOn": "2022-05-05T22:57:30Z",
      "side": 1,
      "message": "nit: maybe add something like \"With this optimization, changing runtime/stack.go to use unsafe.Slice no longer negatively impacts stack copying performance:\"\n\n(I forgot the context of this CL at first, so I was a bit confused why we wanted to land a compiler optimization that didn\u0027t change performance. :-))",
      "revId": "819f55ebd9e53dd69c587ea39f4bfcbb1b59a8a8",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "10291ab6_e4996b6d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 8
      },
      "lineNbr": 11,
      "author": {
        "id": 14665
      },
      "writtenOn": "2022-05-06T16:15:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9ebc53d9_5a5c1b66",
      "revId": "819f55ebd9e53dd69c587ea39f4bfcbb1b59a8a8",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e632cf68_6717ac80",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-05-03T13:43:28Z",
      "side": 1,
      "message": "SlowBots beginning. Status page: https://farmer.golang.org/try?commit\u003d819f55eb",
      "tag": "autogenerated:trybots~beginning",
      "revId": "819f55ebd9e53dd69c587ea39f4bfcbb1b59a8a8",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5f010deb_40d4f620",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-05-03T13:55:56Z",
      "side": 1,
      "message": "SlowBots are happy.\n\nSlowBot builds that ran:\n* linux-amd64-longtest\n",
      "parentUuid": "e632cf68_6717ac80",
      "tag": "autogenerated:trybots~happy",
      "revId": "819f55ebd9e53dd69c587ea39f4bfcbb1b59a8a8",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "222ed70b_c316483e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 5440
      },
      "writtenOn": "2022-05-05T22:57:30Z",
      "side": 1,
      "message": "Sorry for the delay.",
      "revId": "819f55ebd9e53dd69c587ea39f4bfcbb1b59a8a8",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1b5f69fd_8955888c",
        "filename": "src/cmd/compile/internal/walk/builtin.go",
        "patchSetId": 8
      },
      "lineNbr": 664,
      "author": {
        "id": 5440
      },
      "writtenOn": "2022-05-05T22:57:30Z",
      "side": 1,
      "message": "nit: \"this code\"\n\nAlso, add an analogous comment to runtime.unsafeslice.",
      "range": {
        "startLine": 664,
        "startChar": 10,
        "endLine": 664,
        "endChar": 21
      },
      "revId": "819f55ebd9e53dd69c587ea39f4bfcbb1b59a8a8",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d5d24716_491ffb5c",
        "filename": "src/cmd/compile/internal/walk/builtin.go",
        "patchSetId": 8
      },
      "lineNbr": 664,
      "author": {
        "id": 14665
      },
      "writtenOn": "2022-05-06T16:15:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1b5f69fd_8955888c",
      "range": {
        "startLine": 664,
        "startChar": 10,
        "endLine": 664,
        "endChar": 21
      },
      "revId": "819f55ebd9e53dd69c587ea39f4bfcbb1b59a8a8",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "05deb75b_515db126",
        "filename": "src/cmd/compile/internal/walk/builtin.go",
        "patchSetId": 8
      },
      "lineNbr": 675,
      "author": {
        "id": 5440
      },
      "writtenOn": "2022-05-05T22:57:30Z",
      "side": 1,
      "message": "I don\u0027t think this matters in practice, but this is subtlely wrong: if mkcall emits any init statements, they should be added to nif.Body, not init, so they\u0027re only executed if nif.Cond is true.\n\nI think `nif.Body.Append(mkcall(..., \u0026nif.Body))` should be okay though.\n\nSame issue applies to other panic mkcalls below.",
      "range": {
        "startLine": 675,
        "startChar": 58,
        "endLine": 675,
        "endChar": 62
      },
      "revId": "819f55ebd9e53dd69c587ea39f4bfcbb1b59a8a8",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "046c56e1_69a407a4",
        "filename": "src/cmd/compile/internal/walk/builtin.go",
        "patchSetId": 8
      },
      "lineNbr": 675,
      "author": {
        "id": 14665
      },
      "writtenOn": "2022-05-06T16:15:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "05deb75b_515db126",
      "range": {
        "startLine": 675,
        "startChar": 58,
        "endLine": 675,
        "endChar": 62
      },
      "revId": "819f55ebd9e53dd69c587ea39f4bfcbb1b59a8a8",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a85f43dc_98dd5674",
        "filename": "src/cmd/compile/internal/walk/builtin.go",
        "patchSetId": 8
      },
      "lineNbr": 679,
      "author": {
        "id": 5440
      },
      "writtenOn": "2022-05-05T22:57:30Z",
      "side": 1,
      "message": "nit: `// if len \u003c 0 { panicunsafeslicelen() }`",
      "revId": "819f55ebd9e53dd69c587ea39f4bfcbb1b59a8a8",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "113638ad_0dbc08fa",
        "filename": "src/cmd/compile/internal/walk/builtin.go",
        "patchSetId": 8
      },
      "lineNbr": 679,
      "author": {
        "id": 14665
      },
      "writtenOn": "2022-05-06T16:15:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a85f43dc_98dd5674",
      "revId": "819f55ebd9e53dd69c587ea39f4bfcbb1b59a8a8",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1669a7f1_35472963",
        "filename": "src/cmd/compile/internal/walk/builtin.go",
        "patchSetId": 8
      },
      "lineNbr": 688,
      "author": {
        "id": 5440
      },
      "writtenOn": "2022-05-05T22:57:30Z",
      "side": 1,
      "message": "ssagen recognizes runtime/internal/math.MulUintptr as an intrinsic, but I think this will cause a real function call, right?\n\nWe might need to extend mkbuiltin.go to also generate stubs for runtime/internal/math (just MulUintptr is fine). Open to other ideas though.",
      "revId": "819f55ebd9e53dd69c587ea39f4bfcbb1b59a8a8",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "03a82908_0e32e0a3",
        "filename": "src/cmd/compile/internal/walk/builtin.go",
        "patchSetId": 8
      },
      "lineNbr": 688,
      "author": {
        "id": 14665
      },
      "writtenOn": "2022-05-06T16:15:51Z",
      "side": 1,
      "message": "\u003e ssagen recognizes runtime/internal/math.MulUintptr as an intrinsic, but I think this will cause a real function call, right?\n\nYes, but I thought the overhead will be lesser, but still 1-2% when I re-run the benchmark at this moment.\n\n\u003e We might need to extend mkbuiltin.go to also generate stubs for runtime/internal/math (just MulUintptr is fine). Open to other ideas though.\n\nI don\u0027t know we can do that for other packages but runtime, would you mind elaborating more?",
      "parentUuid": "1669a7f1_35472963",
      "revId": "819f55ebd9e53dd69c587ea39f4bfcbb1b59a8a8",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "db9f63e4_c6eeeb5a",
        "filename": "src/cmd/compile/internal/walk/builtin.go",
        "patchSetId": 8
      },
      "lineNbr": 688,
      "author": {
        "id": 14665
      },
      "writtenOn": "2022-05-08T16:23:08Z",
      "side": 1,
      "message": "Yay, I think we can make the compiler recognize runtime.mulUintptr and treat it as an intrinsic.",
      "parentUuid": "03a82908_0e32e0a3",
      "revId": "819f55ebd9e53dd69c587ea39f4bfcbb1b59a8a8",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "14dd15ec_525ada22",
        "filename": "src/cmd/compile/internal/walk/builtin.go",
        "patchSetId": 8
      },
      "lineNbr": 689,
      "author": {
        "id": 5440
      },
      "writtenOn": "2022-05-05T22:57:30Z",
      "side": 1,
      "message": "nit: `ir.NewInt`?\n\nI also think it\u0027s fine to omit the typecheck.Conv here; mkcall will handle the implicit conversion from untyped int.",
      "range": {
        "startLine": 689,
        "startChar": 25,
        "endLine": 689,
        "endChar": 65
      },
      "revId": "819f55ebd9e53dd69c587ea39f4bfcbb1b59a8a8",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "55427ac5_3a23a3c6",
        "filename": "src/cmd/compile/internal/walk/builtin.go",
        "patchSetId": 8
      },
      "lineNbr": 689,
      "author": {
        "id": 14665
      },
      "writtenOn": "2022-05-06T16:15:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "14dd15ec_525ada22",
      "range": {
        "startLine": 689,
        "startChar": 25,
        "endLine": 689,
        "endChar": 65
      },
      "revId": "819f55ebd9e53dd69c587ea39f4bfcbb1b59a8a8",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "88799fc7_65021a21",
        "filename": "src/runtime/slice.go",
        "patchSetId": 8
      },
      "lineNbr": 160,
      "author": {
        "id": 5440
      },
      "writtenOn": "2022-05-05T22:57:30Z",
      "side": 1,
      "message": "nit: I think \"nilptr\" (i.e., \u0027nil\u0027 as an adjective modifying \u0027ptr\u0027) reads a bit more naturally than \"ptrnil\".",
      "range": {
        "startLine": 160,
        "startChar": 21,
        "endLine": 160,
        "endChar": 27
      },
      "revId": "819f55ebd9e53dd69c587ea39f4bfcbb1b59a8a8",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1a18f872_232877ad",
        "filename": "src/runtime/slice.go",
        "patchSetId": 8
      },
      "lineNbr": 160,
      "author": {
        "id": 14665
      },
      "writtenOn": "2022-05-06T16:15:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "88799fc7_65021a21",
      "range": {
        "startLine": 160,
        "startChar": 21,
        "endLine": 160,
        "endChar": 27
      },
      "revId": "819f55ebd9e53dd69c587ea39f4bfcbb1b59a8a8",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}