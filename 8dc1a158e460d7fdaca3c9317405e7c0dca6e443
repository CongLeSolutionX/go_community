{
  "comments": [
    {
      "key": {
        "uuid": "8968a118_1d276f45",
        "filename": "src/runtime/preemptm_test.go",
        "patchSetId": 9
      },
      "lineNbr": 15,
      "author": {
        "id": 6365
      },
      "writtenOn": "2019-10-26T12:38:23Z",
      "side": 1,
      "message": "This test is failing on Android: https://build.golang.org/log/c6d5f1f992137697f3884b74a684e47f05a41f31",
      "revId": "8dc1a158e460d7fdaca3c9317405e7c0dca6e443",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dac7bf77_7cceb1e3",
        "filename": "src/runtime/preemptm_test.go",
        "patchSetId": 9
      },
      "lineNbr": 15,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-10-27T03:41:33Z",
      "side": 1,
      "message": "Hmm. My initial hunch was that tgkill was blacklisted on Android, but it looks like Bionic\u0027s raise is implemented using tgkill (from https://android.googlesource.com/platform/bionic/).\n\nIt doesn\u0027t seem like bionic does anything weird with SIGUSR1 either, based on grepping through that repo. In fact, it has a bunch of tests that use SIGUSR1.",
      "parentUuid": "8968a118_1d276f45",
      "revId": "8dc1a158e460d7fdaca3c9317405e7c0dca6e443",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6431fa1b_fe697912",
        "filename": "src/runtime/preemptm_test.go",
        "patchSetId": 9
      },
      "lineNbr": 15,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-10-27T18:02:05Z",
      "side": 1,
      "message": "Doing some tests on the builder\n\nThe arguments to tgkill look perfectly reasonable and it returns with success. I wonder if our SIGUSR1 handler is getting messed up on Android?",
      "parentUuid": "dac7bf77_7cceb1e3",
      "revId": "8dc1a158e460d7fdaca3c9317405e7c0dca6e443",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0c71e671_fa54e273",
        "filename": "src/runtime/preemptm_test.go",
        "patchSetId": 9
      },
      "lineNbr": 15,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-10-27T18:13:14Z",
      "side": 1,
      "message": "It does appear to be specific to SIGUSR1. If I send a SIGQUIT in this test instead, the runtime does its SIGQUIT thing.",
      "parentUuid": "6431fa1b_fe697912",
      "revId": "8dc1a158e460d7fdaca3c9317405e7c0dca6e443",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "db97ee65_e11bded3",
        "filename": "src/runtime/preemptm_test.go",
        "patchSetId": 9
      },
      "lineNbr": 15,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-10-27T22:56:06Z",
      "side": 1,
      "message": "Ugh. SIGUSR1 (and SIGPIPE) are in the process\u0027s signal mask. Just those two.\n\nIf I change the test to use SIGUSR2, it works fine.\n\nProbably this test should properly unblock the signal it uses, but the fact that SIGUSR1 is specifically blocked makes me think that maybe it should be using SIGUSR2.",
      "parentUuid": "0c71e671_fa54e273",
      "revId": "8dc1a158e460d7fdaca3c9317405e7c0dca6e443",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    }
  ]
}