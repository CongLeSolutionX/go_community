{
  "comments": [
    {
      "key": {
        "uuid": "c7fe22a0_db07b5f5",
        "filename": "src/cmd/go/internal/modfetch/coderepo.go",
        "patchSetId": 3
      },
      "lineNbr": 223,
      "author": {
        "id": 6365
      },
      "writtenOn": "2018-07-18T22:27:42Z",
      "side": 1,
      "message": "(nit) I think this TODO goes outside the if-statement? (It seems to apply to the result of the info.Tags loop too.)",
      "revId": "84c710abdd7eda6be0b5dc05d2474a427bc046da",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "62ca30cc_f9a0fdde",
        "filename": "src/cmd/go/internal/modfetch/coderepo.go",
        "patchSetId": 3
      },
      "lineNbr": 223,
      "author": {
        "id": 5056
      },
      "writtenOn": "2018-07-19T04:43:20Z",
      "side": 1,
      "message": "That may be. I will have to return to that TODO after beta2.",
      "parentUuid": "c7fe22a0_db07b5f5",
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "84c710abdd7eda6be0b5dc05d2474a427bc046da",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "739a37b2_06d82cd7",
        "filename": "src/cmd/go/internal/modfetch/pseudo.go",
        "patchSetId": 3
      },
      "lineNbr": 16,
      "author": {
        "id": 6365
      },
      "writtenOn": "2018-07-18T22:27:42Z",
      "side": 1,
      "message": "s/yyy/yyyy/g",
      "range": {
        "startLine": 16,
        "startChar": 14,
        "endLine": 16,
        "endChar": 17
      },
      "revId": "84c710abdd7eda6be0b5dc05d2474a427bc046da",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "73239f16_e6388a23",
        "filename": "src/cmd/go/internal/modfetch/pseudo.go",
        "patchSetId": 3
      },
      "lineNbr": 16,
      "author": {
        "id": 5056
      },
      "writtenOn": "2018-07-19T04:43:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "739a37b2_06d82cd7",
      "range": {
        "startLine": 16,
        "startChar": 14,
        "endLine": 16,
        "endChar": 17
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "84c710abdd7eda6be0b5dc05d2474a427bc046da",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "02c00eb8_1babea2a",
        "filename": "src/cmd/go/internal/modfetch/pseudo.go",
        "patchSetId": 3
      },
      "lineNbr": 64,
      "author": {
        "id": 6365
      },
      "writtenOn": "2018-07-18T22:27:42Z",
      "side": 1,
      "message": "Is `older[:len(older)]` equivalent to just `older`?",
      "revId": "84c710abdd7eda6be0b5dc05d2474a427bc046da",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6d6dca22_ab6a0742",
        "filename": "src/cmd/go/internal/modfetch/pseudo.go",
        "patchSetId": 3
      },
      "lineNbr": 64,
      "author": {
        "id": 5056
      },
      "writtenOn": "2018-07-19T04:43:20Z",
      "side": 1,
      "message": "Indeed. It used to say :len(older)-len(prerelease) but then I released prerelease\u003d\u003d\"\" at that point so I removed that variable and the zero subtraction but didn\u0027t go far enough.",
      "parentUuid": "02c00eb8_1babea2a",
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "84c710abdd7eda6be0b5dc05d2474a427bc046da",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f95e34d8_d33484f1",
        "filename": "src/cmd/go/internal/modfetch/pseudo.go",
        "patchSetId": 3
      },
      "lineNbr": 68,
      "author": {
        "id": 6365
      },
      "writtenOn": "2018-07-18T22:27:42Z",
      "side": 1,
      "message": "It would be helpful to explain why we\u0027re not using strconv or math/big in this comment, given that we know that older is a canonical semantic version.\n\nEven if we need to handler numbers larger than a uint64, this would be a lot more obvious to me as:\n\n\tbigPatch, _ \u003d new(big.Int).SetString(patch, 10)\n\tpatch \u003d bigPatch.Add(bigPatch, big.NewInt(1)).String()",
      "revId": "84c710abdd7eda6be0b5dc05d2474a427bc046da",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8857154c_d7ac3d8a",
        "filename": "src/cmd/go/internal/modfetch/pseudo.go",
        "patchSetId": 3
      },
      "lineNbr": 68,
      "author": {
        "id": 5056
      },
      "writtenOn": "2018-07-19T04:43:20Z",
      "side": 1,
      "message": "The expense of math/big seems crazy to me when the algorithm for incrementing decimal is so trivial. I commented what the algorithm is though:\n\n\t// Increment PATCH by adding 1 to decimal:\n\t// scan right to left turning 9s to 0s until you find a digit to increment.\n\t// (Number might exceed int64, but math/big is overkill.)",
      "parentUuid": "f95e34d8_d33484f1",
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "84c710abdd7eda6be0b5dc05d2474a427bc046da",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "52e82875_7da8bad1",
        "filename": "src/cmd/go/internal/modfetch/pseudo.go",
        "patchSetId": 3
      },
      "lineNbr": 86,
      "author": {
        "id": 6365
      },
      "writtenOn": "2018-07-18T22:27:42Z",
      "side": 1,
      "message": "This spuriously rejects prereleases for versions with patch \".0\".\nhttps://play.golang.org/p/DXrvRIM31ot\n\n(Also, it\u0027s *really* hard to code-review long regular expressions!)",
      "range": {
        "startLine": 86,
        "startChar": 64,
        "endLine": 86,
        "endChar": 69
      },
      "revId": "84c710abdd7eda6be0b5dc05d2474a427bc046da",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "daeab584_f58f5e25",
        "filename": "src/cmd/go/internal/modfetch/pseudo.go",
        "patchSetId": 3
      },
      "lineNbr": 86,
      "author": {
        "id": 6365
      },
      "writtenOn": "2018-07-18T22:27:42Z",
      "side": 1,
      "message": "This assumes semver.IsValid: otherwise we\u0027ll erroneously accept leading zeroes.\n\n(If the IsPseudoVersion function assumes validity, please mention that in its doc comment.)",
      "range": {
        "startLine": 86,
        "startChar": 44,
        "endLine": 86,
        "endChar": 50
      },
      "revId": "84c710abdd7eda6be0b5dc05d2474a427bc046da",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "33cbb014_8f352f7e",
        "filename": "src/cmd/go/internal/modfetch/pseudo.go",
        "patchSetId": 3
      },
      "lineNbr": 86,
      "author": {
        "id": 5056
      },
      "writtenOn": "2018-07-19T04:43:20Z",
      "side": 1,
      "message": "Thanks, fixed the [1-9]\\d* back to \\d+.\nI have tried multiple times to write Go code to do this and never land on something that seems actually clearer.",
      "parentUuid": "52e82875_7da8bad1",
      "range": {
        "startLine": 86,
        "startChar": 64,
        "endLine": 86,
        "endChar": 69
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "84c710abdd7eda6be0b5dc05d2474a427bc046da",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a54354a_f3719084",
        "filename": "src/cmd/go/internal/modfetch/pseudo.go",
        "patchSetId": 3
      },
      "lineNbr": 86,
      "author": {
        "id": 5056
      },
      "writtenOn": "2018-07-19T04:43:20Z",
      "side": 1,
      "message": "Thanks, added a semver.IsValid check.",
      "parentUuid": "daeab584_f58f5e25",
      "range": {
        "startLine": 86,
        "startChar": 44,
        "endLine": 86,
        "endChar": 50
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "84c710abdd7eda6be0b5dc05d2474a427bc046da",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7c3ebfab_0bb6e04c",
        "filename": "src/cmd/go/internal/modfetch/pseudo_test.go",
        "patchSetId": 3
      },
      "lineNbr": 25,
      "author": {
        "id": 6365
      },
      "writtenOn": "2018-07-18T22:27:42Z",
      "side": 1,
      "message": "Add \"v1.3.0-pre\" or similar (prerelease for patch .0).",
      "revId": "84c710abdd7eda6be0b5dc05d2474a427bc046da",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a2488a23_0e5b6274",
        "filename": "src/cmd/go/internal/modfetch/pseudo_test.go",
        "patchSetId": 3
      },
      "lineNbr": 25,
      "author": {
        "id": 5056
      },
      "writtenOn": "2018-07-19T04:43:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7c3ebfab_0bb6e04c",
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "84c710abdd7eda6be0b5dc05d2474a427bc046da",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "71df00ac_81dd0cf4",
        "filename": "src/cmd/go/internal/modfetch/pseudo_test.go",
        "patchSetId": 3
      },
      "lineNbr": 43,
      "author": {
        "id": 6365
      },
      "writtenOn": "2018-07-18T22:27:42Z",
      "side": 1,
      "message": "It\u0027s probably also worth testing what happens if somebody explicitly tags their repo with a pseudo-version. (I could imagine someone trying that in order to, say, promote a commonly-used pseudo-version to show up in `go list`, and that might break pseudo-version generation for commits after that one.)",
      "revId": "84c710abdd7eda6be0b5dc05d2474a427bc046da",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "37a1a408_d6fd8211",
        "filename": "src/cmd/go/internal/modfetch/pseudo_test.go",
        "patchSetId": 3
      },
      "lineNbr": 43,
      "author": {
        "id": 5056
      },
      "writtenOn": "2018-07-19T04:43:20Z",
      "side": 1,
      "message": "Not sure where to put that test (not this file) but what will happen is that RecentTag will return the pseudo-version, then tagToVersion will see it\u0027s a pseudo-version and refuse to use it. So the clever person will get a v0.0.0 pseudoversion for commits after that tag.",
      "parentUuid": "71df00ac_81dd0cf4",
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "84c710abdd7eda6be0b5dc05d2474a427bc046da",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eae7aafe_81c25780",
        "filename": "src/cmd/go/internal/modfetch/pseudo_test.go",
        "patchSetId": 3
      },
      "lineNbr": 43,
      "author": {
        "id": 6365
      },
      "writtenOn": "2018-07-19T14:53:09Z",
      "side": 1,
      "message": "I\u0027m not sure what the right behavior is that case is, but I think a v0.0.0 pseudoversion for later commits is going to trip somebody up.\n\nInstead, I think we should either adopt the version base from the explicit tag, or treat the explicit pseudo-version tag as a regular pre-release version.\n\nSo after an explicit tag of\n\tv1.2.4-0.20060102150405-hash1\nwe\u0027d produce either\n\tv1.2.4-0.20060102150406-hash2\nor\n\tv1.2.4-0.20060102150405-hash1.0.20060102150406-hash2",
      "parentUuid": "37a1a408_d6fd8211",
      "revId": "84c710abdd7eda6be0b5dc05d2474a427bc046da",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "74574f71_a517784f",
        "filename": "src/cmd/go/internal/modfetch/pseudo_test.go",
        "patchSetId": 3
      },
      "lineNbr": 43,
      "author": {
        "id": 5056
      },
      "writtenOn": "2018-07-19T16:11:46Z",
      "side": 1,
      "message": "I disagree: people should not do this at all. We don\u0027t need to go out of our way to adjust to misbehavior (cf symlinks).",
      "parentUuid": "eae7aafe_81c25780",
      "revId": "84c710abdd7eda6be0b5dc05d2474a427bc046da",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c1fdca9f_c6956468",
        "filename": "src/cmd/go/testdata/script/mod_get_pseudo.txt",
        "patchSetId": 3
      },
      "lineNbr": 46,
      "author": {
        "id": 6365
      },
      "writtenOn": "2018-07-18T22:27:42Z",
      "side": 1,
      "message": "This doesn\u0027t match the comment at line 43.",
      "range": {
        "startLine": 46,
        "startChar": 35,
        "endLine": 46,
        "endChar": 43
      },
      "revId": "84c710abdd7eda6be0b5dc05d2474a427bc046da",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3afcb966_12942f8f",
        "filename": "src/cmd/go/testdata/script/mod_get_pseudo.txt",
        "patchSetId": 3
      },
      "lineNbr": 46,
      "author": {
        "id": 5056
      },
      "writtenOn": "2018-07-19T04:43:20Z",
      "side": 1,
      "message": "Very nice catch. Because line 5 is wrong and should say [!exec:git] skip.",
      "parentUuid": "c1fdca9f_c6956468",
      "range": {
        "startLine": 46,
        "startChar": 35,
        "endLine": 46,
        "endChar": 43
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "84c710abdd7eda6be0b5dc05d2474a427bc046da",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}