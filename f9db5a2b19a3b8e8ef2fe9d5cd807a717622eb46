{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "6365f3df_59c310f4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-09-23T04:21:55Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003df9db5a2b\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "f9db5a2b19a3b8e8ef2fe9d5cd807a717622eb46",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e68ad0bc_4c47005a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-09-23T04:25:26Z",
      "side": 1,
      "message": "Build is still in progress... Status page: https://farmer.golang.org/try?commit\u003df9db5a2b\nFailed on (x/tools) linux-amd64: https://storage.googleapis.com/go-build-log/f9db5a2b/linux-amd64_617f2588.log\nOther builds still in progress; subsequent failure notices suppressed until final report.\n\nConsult https://build.golang.org/ to see whether they are new failures. Keep in mind that TryBots currently test *exactly* your git commit, without rebasing. If your commit\u0027s git parent is old, the failure might\u0027ve already been fixed.\n",
      "parentUuid": "6365f3df_59c310f4",
      "tag": "autogenerated:trybots~progress",
      "revId": "f9db5a2b19a3b8e8ef2fe9d5cd807a717622eb46",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "84bcddb8_d2c7ee4b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-09-23T04:34:34Z",
      "side": 1,
      "message": "1 of 29 TryBots failed.\nFailed on (x/tools) linux-amd64: https://storage.googleapis.com/go-build-log/f9db5a2b/linux-amd64_617f2588.log\n\nConsult https://build.golang.org/ to see whether they are new failures. Keep in mind that TryBots currently test *exactly* your git commit, without rebasing. If your commit\u0027s git parent is old, the failure might\u0027ve already been fixed.\n\n",
      "parentUuid": "6365f3df_59c310f4",
      "tag": "autogenerated:trybots~failed",
      "revId": "f9db5a2b19a3b8e8ef2fe9d5cd807a717622eb46",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ef3e351b_36b8c2b3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 55613
      },
      "writtenOn": "2022-09-23T05:17:49Z",
      "side": 1,
      "message": "Hi, all.\n\nA reviewer\u0027s suggestion is required here.\n\nIf my change makes sense, I can modify `go/analysis/passes/copylock/testdata/src/a/copylock.go` to pass the test case.\n\n\nThanks.\n\n\n- Before\n\n```\n// AtomicTypesCheck checks copying of sync/atomic types\nfunc AtomicTypesCheck() {\n\t// atomic.Value copying\n\tvar vX atomic.Value\n\tvar vXX \u003d atomic.Value{}\n\tvX1 :\u003d new(atomic.Value)\n\t// These are OK because the value has not been used yet.\n\t// (And vet can\u0027t tell whether it has been used, so they\u0027re always OK.)\n\tvY :\u003d vX           \n\tvY \u003d vX            \n\tvar vYY \u003d vX       \n\tvP :\u003d \u0026vX\n\tvZ :\u003d \u0026atomic.Value{}\n}\n```\n\n- After\n\n```\n// AtomicTypesCheck checks copying of sync/atomic types\nfunc AtomicTypesCheck() {\n\t// atomic.Value copying\n\tvar vX atomic.Value\n\tvar vXX \u003d atomic.Value{}\n\tvX1 :\u003d new(atomic.Value)\n\t// These are OK because the value has not been used yet.\n\t// (And vet can\u0027t tell whether it has been used, so they\u0027re always OK.)\n\tvY :\u003d vX           // want `assignment copies lock value to vY: sync/atomic.Value contains sync/atomic.noCopy`\n\tvY \u003d vX            // want `assignment copies lock value to vY: sync/atomic.Value contains sync/atomic.noCopy`\n\tvar vYY \u003d vX       // want `variable declaration copies lock value to vYY: sync/atomic.Value contains sync/atomic.noCopy`\n\tvP :\u003d \u0026vX\n\tvZ :\u003d \u0026atomic.Value{}\n}\n```",
      "parentUuid": "84bcddb8_d2c7ee4b",
      "revId": "f9db5a2b19a3b8e8ef2fe9d5cd807a717622eb46",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "91898314_d19717ef",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 52329
      },
      "writtenOn": "2022-09-23T07:42:43Z",
      "side": 1,
      "message": "See CL 80836, we should not add noCopy inside atomic.Value. Thanks.",
      "parentUuid": "ef3e351b_36b8c2b3",
      "revId": "f9db5a2b19a3b8e8ef2fe9d5cd807a717622eb46",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}