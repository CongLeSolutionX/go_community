{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "51ffd743_f934d638",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-05-03T17:45:25Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003dc7081855",
      "tag": "autogenerated:trybots~beginning",
      "revId": "c7081855102ab561412fe84f72f40e2a61f0b13e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "949c9268_bf224d6d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-05-03T17:57:22Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "51ffd743_f934d638",
      "tag": "autogenerated:trybots~happy",
      "revId": "c7081855102ab561412fe84f72f40e2a61f0b13e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0c35e74f_ce025b21",
        "filename": "src/cmd/compile/internal/ssa/gen/AMD64.rules",
        "patchSetId": 1
      },
      "lineNbr": 109,
      "author": {
        "id": 55763
      },
      "writtenOn": "2022-05-03T17:50:28Z",
      "side": 1,
      "message": "I think this should be a MOVZX.",
      "revId": "c7081855102ab561412fe84f72f40e2a61f0b13e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7eb8a13e_a0839fb6",
        "filename": "src/cmd/compile/internal/ssa/gen/AMD64.rules",
        "patchSetId": 1
      },
      "lineNbr": 109,
      "author": {
        "id": 13315
      },
      "writtenOn": "2022-05-03T17:51:09Z",
      "side": 1,
      "message": "There is a LZCNTW instruction. Maybe use that to save an instruction? (Seems there is no LZCNTB, though)",
      "range": {
        "startLine": 109,
        "startChar": 73,
        "endLine": 109,
        "endChar": 79
      },
      "revId": "c7081855102ab561412fe84f72f40e2a61f0b13e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9aedea19_be71cc69",
        "filename": "src/cmd/compile/internal/ssa/gen/AMD64.rules",
        "patchSetId": 1
      },
      "lineNbr": 109,
      "author": {
        "id": 55763
      },
      "writtenOn": "2022-05-03T17:53:35Z",
      "side": 1,
      "message": "NVM this is rewriten in a later step to MOVZX.",
      "parentUuid": "0c35e74f_ce025b21",
      "revId": "c7081855102ab561412fe84f72f40e2a61f0b13e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "363f27a1_71d73e3a",
        "filename": "src/cmd/compile/internal/ssa/gen/AMD64.rules",
        "patchSetId": 1
      },
      "lineNbr": 109,
      "author": {
        "id": 5200
      },
      "writtenOn": "2022-05-03T17:59:39Z",
      "side": 1,
      "message": "It doesn\u0027t matter for the final result, but we might as well avoid one rewrite. I will fix.",
      "parentUuid": "9aedea19_be71cc69",
      "revId": "c7081855102ab561412fe84f72f40e2a61f0b13e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2543d023_46a17b01",
        "filename": "src/cmd/compile/internal/ssa/gen/AMD64.rules",
        "patchSetId": 1
      },
      "lineNbr": 109,
      "author": {
        "id": 5200
      },
      "writtenOn": "2022-05-03T17:59:39Z",
      "side": 1,
      "message": "LZCNTW is weird because I think it only writes 16 bits of the output register. We need a full register width on output.\n(Whereas I think LZCNTL does extend its result from 32 to 64 bits.)\n\nI should retest all that though. I have a hazy recollection that\u0027s why we didn\u0027t include LZCNTW.",
      "parentUuid": "7eb8a13e_a0839fb6",
      "range": {
        "startLine": 109,
        "startChar": 73,
        "endLine": 109,
        "endChar": 79
      },
      "revId": "c7081855102ab561412fe84f72f40e2a61f0b13e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1d8c0682_5ae9c2a1",
        "filename": "src/cmd/compile/internal/test/intrinsics_test.go",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 13315
      },
      "writtenOn": "2022-05-03T17:51:09Z",
      "side": 1,
      "message": "Does the test fail without the CL? Maybe we need to intentionally make some input that has high bits not 0?",
      "revId": "c7081855102ab561412fe84f72f40e2a61f0b13e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "05e4715a_36ce1c6f",
        "filename": "src/cmd/compile/internal/test/intrinsics_test.go",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5200
      },
      "writtenOn": "2022-05-03T17:59:39Z",
      "side": 1,
      "message": "Yes, just on the last iteration when the shift is the full width. For instance, that tries register value 0x100 on input to bits.Len8 and should get 0, but gets 9.",
      "parentUuid": "1d8c0682_5ae9c2a1",
      "revId": "c7081855102ab561412fe84f72f40e2a61f0b13e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}