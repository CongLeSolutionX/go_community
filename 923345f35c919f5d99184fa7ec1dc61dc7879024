{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "90f7fc6f_88f2c935",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2024-01-26T03:57:00Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003d923345f3\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "923345f35c919f5d99184fa7ec1dc61dc7879024",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b8512f5d_56233005",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2024-01-26T04:07:14Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "90f7fc6f_88f2c935",
      "tag": "autogenerated:trybots~happy",
      "revId": "923345f35c919f5d99184fa7ec1dc61dc7879024",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f11b8dd3_d44fea82",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 25391
      },
      "writtenOn": "2024-01-26T15:59:03Z",
      "side": 1,
      "message": "thanks. this still needs to await the proposal process, but I suspect the proposal will be fairly uncontroversial.",
      "revId": "923345f35c919f5d99184fa7ec1dc61dc7879024",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f59f83eb_298be21c",
        "filename": "src/runtime/pinner.go",
        "patchSetId": 2
      },
      "lineNbr": 27,
      "author": {
        "id": 25391
      },
      "writtenOn": "2024-01-26T15:59:03Z",
      "side": 1,
      "message": "nit: perhaps, \"The argument must be a pointer of any type, an [unsafe.Pointer], a string, or a slice of any type.\"",
      "range": {
        "startLine": 27,
        "startChar": 69,
        "endLine": 27,
        "endChar": 87
      },
      "revId": "923345f35c919f5d99184fa7ec1dc61dc7879024",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "859a0865_645d4fd7",
        "filename": "src/runtime/pinner.go",
        "patchSetId": 2
      },
      "lineNbr": 118,
      "author": {
        "id": 25391
      },
      "writtenOn": "2024-01-26T15:59:03Z",
      "side": 1,
      "message": "minor nit, but I\u0027d prefer to use the runtime\u0027s `slice` type here (which the compiler is aware of, so it\u0027s not any more brittle) rather than cast to a type that might be wrong. so something like:\n\n```\ndata \u003d ((*slice)(e.data)).array\n```",
      "range": {
        "startLine": 118,
        "startChar": 44,
        "endLine": 118,
        "endChar": 50
      },
      "revId": "923345f35c919f5d99184fa7ec1dc61dc7879024",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}