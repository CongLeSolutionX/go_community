{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "5bf9c6b4_e08b6b55",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-12-09T19:12:08Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003dfd1f7dbe",
      "tag": "autogenerated:trybots~beginning",
      "revId": "fd1f7dbe02fd4f93d7ad447b7ee9bed63b083d62",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "da0d2fa8_651a2115",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-12-09T19:25:32Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "5bf9c6b4_e08b6b55",
      "tag": "autogenerated:trybots~happy",
      "revId": "fd1f7dbe02fd4f93d7ad447b7ee9bed63b083d62",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "67eab42f_dd593a93",
        "filename": "src/internal/testenv/testenv.go",
        "patchSetId": 1
      },
      "lineNbr": 343,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-12-09T20:34:49Z",
      "side": 1,
      "message": "Compute this from t.Deadline instead of relying on the scale-factor environment variable?\n\nThe logic we\u0027ve used so far for cmd/go tests is here:\nhttps://cs.opensource.google/go/go/+/master:src/cmd/go/script_test.go;l\u003d47-72;drc\u003d189b4a2f428be7264db76e5275c96d98b847383b\n\n(That might itself be useful to abstract into testenv... Maybe testenv.Context(t, minGracePeriod)?)",
      "range": {
        "startLine": 333,
        "startChar": 0,
        "endLine": 343,
        "endChar": 3
      },
      "revId": "fd1f7dbe02fd4f93d7ad447b7ee9bed63b083d62",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "152e353f_0b1c9770",
        "filename": "src/internal/testenv/testenv.go",
        "patchSetId": 1
      },
      "lineNbr": 347,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-12-09T20:34:49Z",
      "side": 1,
      "message": "This leaks a timer in the typical case, and also isn\u0027t synchronous: this goroutine may still be running (and may be in a call to p.Signal) arbitrarily long after the done channel is closed.\n\nInstead, you can use an explicit send or receive as the synchronization point:\n\n\ttimerExit :\u003d make(chan bool)\n\t\n\tâ€¦\n\n\ttimer :\u003d time.NewTimer(d)\n\tselect {\n\tcase timerExit \u003c- true:\n\t\ttimer.Stop()\n\tcase \u003c-timer.C:\n\t\tp.Signal(Sigquit)\n\t\ttimerExit \u003c- true\n\t}\n\n\tâ€¦\n\t\n\terr :\u003d cmd.Wait()\n\tif err !\u003d nil {\n\t\tt.Logf(\"%s exit status: %v\", args, err)\n\t}\n\t\u003c-timerExit",
      "revId": "fd1f7dbe02fd4f93d7ad447b7ee9bed63b083d62",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6d8e72a5_c70e6a2d",
        "filename": "src/internal/testenv/testenv.go",
        "patchSetId": 1
      },
      "lineNbr": 349,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-12-09T20:34:49Z",
      "side": 1,
      "message": "In a lot of other use-cases, we generally want to send SIGQUIT, followed by a grace period to dump goroutines, followed by SIGKILL if that doesn\u0027t work (e.g. in case the runtime of the subprocess is wedged).\n\nThe code to do that in cmd/go is here:\nhttps://cs.opensource.google/go/go/+/master:src/cmd/go/script_test.go;l\u003d1234-1293;drc\u003d189b4a2f428be7264db76e5275c96d98b847383b\n\nIt\u0027s basically a drop-in replacement for cmd.Wait. There are also several copies of that function floating around in the x/ repos. ðŸ˜…\n\nMaybe we could factor that out somewhere in internal/ too? There are several cases in various tests where we want to run a command with a timeout, but still want to distinguish stdout and stderr.",
      "range": {
        "startLine": 345,
        "startChar": 0,
        "endLine": 349,
        "endChar": 3
      },
      "revId": "fd1f7dbe02fd4f93d7ad447b7ee9bed63b083d62",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}