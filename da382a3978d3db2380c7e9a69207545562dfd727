{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "c3892110_6141c3d2",
        "filename": "src/syscall/syscall_unix.go",
        "patchSetId": 5
      },
      "lineNbr": 67,
      "author": {
        "id": 14665
      },
      "writtenOn": "2021-03-08T12:55:26Z",
      "side": 1,
      "message": "Does this usage violate unsafe rule 2, as it converts from uintptr back to unsafe pointer?",
      "revId": "da382a3978d3db2380c7e9a69207545562dfd727",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "21a51368_5fc9d7f1",
        "filename": "src/syscall/syscall_unix.go",
        "patchSetId": 5
      },
      "lineNbr": 67,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-03-08T19:02:17Z",
      "side": 1,
      "message": "Technically unsafe rule 2 does not apply here, because the value did not originate as a Go pointer type.\n\nActually, re-reading the `unsafe` rules I think that technically none of those rules apply here. This may be a missing case in the documentation: namely, conversion of a uintptr to a Pointer when the uintptr is known to contain a valid address not allocated by the Go runtime.",
      "parentUuid": "c3892110_6141c3d2",
      "revId": "da382a3978d3db2380c7e9a69207545562dfd727",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}