{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "60c097c2_50a75fff",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-03-12T18:46:07Z",
      "side": 1,
      "message": "SlowBots beginning. Status page: https://farmer.golang.org/try?commit\u003d3ae88be6\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "3ae88be61ef462eef43e50ad19f64d038fb949d5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a0396dd2_e94dcdb6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-03-12T18:46:07Z",
      "side": 1,
      "message": "Superseded.",
      "parentUuid": "9c997621_391fe32a",
      "tag": "autogenerated:trybots~beginning",
      "revId": "3ae88be61ef462eef43e50ad19f64d038fb949d5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "539a3bd6_de344cc6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-03-12T19:08:20Z",
      "side": 1,
      "message": "SlowBots are happy.\n\nSlowBot builds that ran:\n* aix-ppc64\n* linux-ppc64-sid-buildlet\n",
      "parentUuid": "60c097c2_50a75fff",
      "tag": "autogenerated:trybots~happy",
      "revId": "3ae88be61ef462eef43e50ad19f64d038fb949d5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c4bf7bc4_c7c63a25",
        "filename": "src/runtime/asm_ppc64x.s",
        "patchSetId": 2
      },
      "lineNbr": 11,
      "author": {
        "id": 36863
      },
      "writtenOn": "2023-03-13T18:16:16Z",
      "side": 1,
      "message": "I wonder if we want to add some helper macros inside asm_ppc64x.h to define things like GO_PPC64_ELFV2, GO_PPC64_ELFV1, GO_PC64_HAS_FUNCDESC (for those similar aix/elfv1 cases).\n\nIMO, the primitive preprocessor implementation makes it difficult to concisely express compound conditionals.",
      "range": {
        "startLine": 11,
        "startChar": 10,
        "endLine": 11,
        "endChar": 20
      },
      "revId": "3ae88be61ef462eef43e50ad19f64d038fb949d5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "34011ba8_0816d514",
        "filename": "src/runtime/asm_ppc64x.s",
        "patchSetId": 2
      },
      "lineNbr": 11,
      "author": {
        "id": 13640
      },
      "writtenOn": "2023-03-23T10:17:48Z",
      "side": 1,
      "message": "Agreed - CL 476117 added GO_PPC64X_HAS_FUNCDESC and made use of it, separate to this change. I originally added the ELFv1/ELFv2/XCOFF defines, but ended up directly defining HAS_FUNCDESC instead.",
      "parentUuid": "c4bf7bc4_c7c63a25",
      "range": {
        "startLine": 11,
        "startChar": 10,
        "endLine": 11,
        "endChar": 20
      },
      "revId": "3ae88be61ef462eef43e50ad19f64d038fb949d5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "527421b6_c1ac159e",
        "filename": "src/runtime/asm_ppc64x.s",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 36863
      },
      "writtenOn": "2023-03-13T18:16:16Z",
      "side": 1,
      "message": "What is different about openbsd that requires a slightly larger minimum stack frame?",
      "range": {
        "startLine": 17,
        "startChar": 8,
        "endLine": 17,
        "endChar": 26
      },
      "revId": "3ae88be61ef462eef43e50ad19f64d038fb949d5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "879b237f_dae82ac4",
        "filename": "src/runtime/asm_ppc64x.s",
        "patchSetId": 2
      },
      "lineNbr": 52,
      "author": {
        "id": 6320
      },
      "writtenOn": "2023-03-13T17:22:30Z",
      "side": 1,
      "message": "Please update comment regarding openbsd\u0027s use of ELFv2.",
      "revId": "3ae88be61ef462eef43e50ad19f64d038fb949d5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3aeea632_a5ef1a81",
        "filename": "src/runtime/asm_ppc64x.s",
        "patchSetId": 2
      },
      "lineNbr": 52,
      "author": {
        "id": 13640
      },
      "writtenOn": "2023-03-23T10:17:48Z",
      "side": 1,
      "message": "This was addressed via CL 476117.",
      "parentUuid": "879b237f_dae82ac4",
      "revId": "3ae88be61ef462eef43e50ad19f64d038fb949d5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e41210b7_9c6761d0",
        "filename": "src/runtime/asm_ppc64x.s",
        "patchSetId": 2
      },
      "lineNbr": 557,
      "author": {
        "id": 36863
      },
      "writtenOn": "2023-03-13T18:16:16Z",
      "side": 1,
      "message": "Is this function needed only for openbsd?",
      "range": {
        "startLine": 557,
        "startChar": 6,
        "endLine": 557,
        "endChar": 21
      },
      "revId": "3ae88be61ef462eef43e50ad19f64d038fb949d5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b93c30b4_09c04d49",
        "filename": "src/runtime/asm_ppc64x.s",
        "patchSetId": 2
      },
      "lineNbr": 557,
      "author": {
        "id": 13640
      },
      "writtenOn": "2023-03-23T10:17:48Z",
      "side": 1,
      "message": "Currently, yes.\n\nAs way of some background, on OpenBSD all system calls have to be performed via libc and that means that asmcgocall has to be callable from all contexts (g or no g, already on systemstack, already on signal stack, etc). AIUI there is also a case where the g is in an unknown state, so we\u0027re not able to determine if the g is valid or not (namely during needm). In that case asmcgocall_no_g is used (`grep asmcgocall_no_g\\(unsafe runtime/*` will show the occurrences where asmcgocall_no_g is used for darwin and openbsd).\n\nLooking over the code again, we could also factor out the code that is used to call _cgo_init and reuse that here as well. I\u0027ll see about a separate change that does that.\n\nFWIW asmcgocall_no_g was introduced in CL 288793 - the commit message for that change also provides additional details.",
      "parentUuid": "e41210b7_9c6761d0",
      "range": {
        "startLine": 557,
        "startChar": 6,
        "endLine": 557,
        "endChar": 21
      },
      "revId": "3ae88be61ef462eef43e50ad19f64d038fb949d5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1fd2c35b_c0049456",
        "filename": "src/runtime/asm_ppc64x.s",
        "patchSetId": 2
      },
      "lineNbr": 557,
      "author": {
        "id": 36863
      },
      "writtenOn": "2023-08-08T13:58:11Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "b93c30b4_09c04d49",
      "range": {
        "startLine": 557,
        "startChar": 6,
        "endLine": 557,
        "endChar": 21
      },
      "revId": "3ae88be61ef462eef43e50ad19f64d038fb949d5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bb99a72d_cd985e47",
        "filename": "src/runtime/asm_ppc64x.s",
        "patchSetId": 2
      },
      "lineNbr": 603,
      "author": {
        "id": 36863
      },
      "writtenOn": "2023-03-13T18:16:16Z",
      "side": 1,
      "message": "When does openbsd call this without a valid g? Is it safe to assume that it is always 0 in that case?",
      "range": {
        "startLine": 603,
        "startChar": 5,
        "endLine": 603,
        "endChar": 11
      },
      "revId": "3ae88be61ef462eef43e50ad19f64d038fb949d5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "27e4cb38_595fbcd5",
        "filename": "src/runtime/asm_ppc64x.s",
        "patchSetId": 2
      },
      "lineNbr": 603,
      "author": {
        "id": 13640
      },
      "writtenOn": "2023-03-23T10:17:48Z",
      "side": 1,
      "message": "I\u0027m not entirely certain when this will occur, but it would be during thread creation/teardown or when a C thread calls into Go (e.g. plugin mode, although that is not currently supported). In such a case the g would be nil and the test follows the pattern used for other architectures.",
      "parentUuid": "bb99a72d_cd985e47",
      "range": {
        "startLine": 603,
        "startChar": 5,
        "endLine": 603,
        "endChar": 11
      },
      "revId": "3ae88be61ef462eef43e50ad19f64d038fb949d5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b84d8fcc_3f7a207a",
        "filename": "src/runtime/asm_ppc64x.s",
        "patchSetId": 2
      },
      "lineNbr": 616,
      "author": {
        "id": 36863
      },
      "writtenOn": "2023-03-13T18:16:16Z",
      "side": 1,
      "message": "This is a hard change to follow. If I understand, it is just switching to the g0 stack if not already. Similarly, the g0 label below is unused now too.\n\nSimilarly, openbsd introduces a new path where g isn\u0027t yet set up, so we can assume it is a stack sufficiently large for the call?",
      "range": {
        "startLine": 616,
        "startChar": 5,
        "endLine": 616,
        "endChar": 11
      },
      "revId": "3ae88be61ef462eef43e50ad19f64d038fb949d5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "34e25a9c_915a79ac",
        "filename": "src/runtime/asm_ppc64x.s",
        "patchSetId": 2
      },
      "lineNbr": 616,
      "author": {
        "id": 13640
      },
      "writtenOn": "2023-03-23T10:17:48Z",
      "side": 1,
      "message": "I\u0027ve split the non-OpenBSD changes into CL 478775 - hopefully that makes it easier to understand.\n\nIn short, this brings the ppc64x asmcgocall inline with others (e.g. amd64/arm64) - if we\u0027re called with either a nil g (the case above), already on a system stack, or already on a signal stack, then we do not save the stack offset or the g and simply call through to the C function.\n\nCL 17072 introduced the nosave: path to amd64 and has some additional details, likewise CL 117176 brought it over to arm64.",
      "parentUuid": "b84d8fcc_3f7a207a",
      "range": {
        "startLine": 616,
        "startChar": 5,
        "endLine": 616,
        "endChar": 11
      },
      "revId": "3ae88be61ef462eef43e50ad19f64d038fb949d5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e67a283f_0ce74596",
        "filename": "src/runtime/asm_ppc64x.s",
        "patchSetId": 2
      },
      "lineNbr": 616,
      "author": {
        "id": 36863
      },
      "writtenOn": "2023-08-10T16:05:05Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "34e25a9c_915a79ac",
      "range": {
        "startLine": 616,
        "startChar": 5,
        "endLine": 616,
        "endChar": 11
      },
      "revId": "3ae88be61ef462eef43e50ad19f64d038fb949d5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7d27a42a_941573f2",
        "filename": "src/runtime/asm_ppc64x.s",
        "patchSetId": 2
      },
      "lineNbr": 692,
      "author": {
        "id": 6320
      },
      "writtenOn": "2023-03-13T17:22:30Z",
      "side": 1,
      "message": "Please update comment.",
      "revId": "3ae88be61ef462eef43e50ad19f64d038fb949d5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1b81a7f6_497bc53c",
        "filename": "src/runtime/asm_ppc64x.s",
        "patchSetId": 2
      },
      "lineNbr": 692,
      "author": {
        "id": 13640
      },
      "writtenOn": "2023-03-23T10:17:48Z",
      "side": 1,
      "message": "Also addressed via CL 476117.",
      "parentUuid": "7d27a42a_941573f2",
      "revId": "3ae88be61ef462eef43e50ad19f64d038fb949d5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}