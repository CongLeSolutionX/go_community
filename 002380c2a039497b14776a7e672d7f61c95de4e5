{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "2e18c263_5b3aa8a9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 50449
      },
      "writtenOn": "2024-06-17T21:13:39Z",
      "side": 1,
      "message": "Thanks for adding this, this is great üôáüèª‚Äç‚ôÇÔ∏è.\n\nI was considering to add a \"wall\" profile at some point as well. I can create a GH issue to describe how I\u0027d imagine this to work if it sounds interesting.",
      "revId": "002380c2a039497b14776a7e672d7f61c95de4e5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d924ac36_4b98b243",
        "filename": "src/cmd/trace/pprof.go",
        "patchSetId": 1
      },
      "lineNbr": 205,
      "author": {
        "id": 25391
      },
      "writtenOn": "2024-06-17T19:27:18Z",
      "side": 1,
      "message": "this structure came mostly from the old trace command, and IIUC, it existed specifically for filtering by goroutine, as you say.\n\n+1 to preprocessing all this in the initial parse. this may be where we end up going anyway because Carlos was going to work on making cmd/trace not fall over for big traces anyway, which would probably want to preprocess all this stuff anyway.",
      "range": {
        "startLine": 203,
        "startChar": 19,
        "endLine": 205,
        "endChar": 77
      },
      "revId": "002380c2a039497b14776a7e672d7f61c95de4e5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a6d3f649_bd2fc98c",
        "filename": "src/cmd/trace/pprof.go",
        "patchSetId": 1
      },
      "lineNbr": 222,
      "author": {
        "id": 25391
      },
      "writtenOn": "2024-06-17T19:27:18Z",
      "side": 1,
      "message": "maybe we have a dummy goroutine? NoGoroutine is a valid GoID, for example.\n\neither that, or we generalize this even further (pToIntervals, mToIntervals) ... or we break the CPU profiles out of this structure entirely.",
      "range": {
        "startLine": 222,
        "startChar": 2,
        "endLine": 222,
        "endChar": 52
      },
      "revId": "002380c2a039497b14776a7e672d7f61c95de4e5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b9e3d8ac_751f06a9",
        "filename": "src/cmd/trace/pprof.go",
        "patchSetId": 1
      },
      "lineNbr": 222,
      "author": {
        "id": 9210
      },
      "writtenOn": "2024-06-17T22:24:10Z",
      "side": 1,
      "message": "A note for the record -- we expect no (user) goroutine for samples that arrive within the scheduler. I\u0027ve seen it somewhat often in spinning Ms when they\u0027ve woken up, but haven\u0027t quite found work yet.\n\nSo, use `GoID(-1)` to represent `g0`? Could work, both 0 and -1 are unusual numbers here.",
      "parentUuid": "a6d3f649_bd2fc98c",
      "range": {
        "startLine": 222,
        "startChar": 2,
        "endLine": 222,
        "endChar": 52
      },
      "revId": "002380c2a039497b14776a7e672d7f61c95de4e5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ff5b81af_007c4994",
        "filename": "src/cmd/trace/pprof.go",
        "patchSetId": 1
      },
      "lineNbr": 224,
      "author": {
        "id": 9210
      },
      "writtenOn": "2024-06-17T22:24:10Z",
      "side": 1,
      "message": "In my execution trace hacking, I\u0027ve _tried_ to be a bit strict on the intervals being half-open. I\u0027m not sure it\u0027s helped me at all, but if it\u0027s in use here then it would mean that the interval `[T,T+1)` doesn\u0027t contain anything but `T`.",
      "revId": "002380c2a039497b14776a7e672d7f61c95de4e5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a15f574a_c3822acf",
        "filename": "src/internal/trace/traceviewer/http.go",
        "patchSetId": 1
      },
      "lineNbr": 188,
      "author": {
        "id": 9210
      },
      "writtenOn": "2024-06-17T22:24:10Z",
      "side": 1,
      "message": "The execution trace doesn\u0027t include goroutine labels (yet), right? The profiles would be equivalent, except for that omission.",
      "revId": "002380c2a039497b14776a7e672d7f61c95de4e5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "91b05fd2_7b56d97e",
        "filename": "src/internal/trace/traceviewer/http.go",
        "patchSetId": 1
      },
      "lineNbr": 188,
      "author": {
        "id": 50449
      },
      "writtenOn": "2024-06-18T06:57:29Z",
      "side": 1,
      "message": "Yes, no labels yet. See https://github.com/golang/go/issues/56295",
      "parentUuid": "a15f574a_c3822acf",
      "revId": "002380c2a039497b14776a7e672d7f61c95de4e5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}