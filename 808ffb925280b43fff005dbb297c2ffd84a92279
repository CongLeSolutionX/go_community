{
  "comments": [
    {
      "key": {
        "uuid": "306f8562_47c1426d",
        "filename": "src/runtime/export_test.go",
        "patchSetId": 38
      },
      "lineNbr": 800,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-10-29T22:46:16Z",
      "side": 1,
      "message": "Unused?",
      "revId": "808ffb925280b43fff005dbb297c2ffd84a92279",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "801d7127_467d7f1c",
        "filename": "src/runtime/export_test.go",
        "patchSetId": 38
      },
      "lineNbr": 802,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-10-29T22:46:16Z",
      "side": 1,
      "message": "Document what pageAllocDummy is.",
      "revId": "808ffb925280b43fff005dbb297c2ffd84a92279",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "96b3c53f_f30167a5",
        "filename": "src/runtime/export_test.go",
        "patchSetId": 38
      },
      "lineNbr": 807,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-10-29T22:46:16Z",
      "side": 1,
      "message": "If this lock is actually used, I would just call it \"lock\". \"dummyLock\" sounds like it doesn\u0027t protect anything at all.",
      "revId": "808ffb925280b43fff005dbb297c2ffd84a92279",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fbb10814_ccb1ec7e",
        "filename": "src/runtime/export_test.go",
        "patchSetId": 38
      },
      "lineNbr": 813,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-10-29T22:46:16Z",
      "side": 1,
      "message": "This is getting sophisticated enough that we should maybe put it in its own export file, like export_mpagealloc_test.go",
      "revId": "808ffb925280b43fff005dbb297c2ffd84a92279",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "85cbca76_1fe8d27d",
        "filename": "src/runtime/export_test.go",
        "patchSetId": 38
      },
      "lineNbr": 816,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-10-29T22:46:16Z",
      "side": 1,
      "message": "I\u0027m not entirely clear on what the map keys are. Are these chunk indexes and ranges within each chunk? Would it make more sense to just take a slice of ranges in terms of page indexes or addresses?",
      "revId": "808ffb925280b43fff005dbb297c2ffd84a92279",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e90ff090_e4d1c27c",
        "filename": "src/runtime/export_test.go",
        "patchSetId": 38
      },
      "lineNbr": 827,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-10-29T22:46:16Z",
      "side": 1,
      "message": "This doesn\u0027t say why this is a problem. There are a bunch of other ways we could allocate it, or it could be declared on the caller\u0027s stack with an initializer function instead of an allocator function.",
      "range": {
        "startLine": 825,
        "startChar": 22,
        "endLine": 827,
        "endChar": 16
      },
      "revId": "808ffb925280b43fff005dbb297c2ffd84a92279",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dc6e7803_6e0ee86f",
        "filename": "src/runtime/export_test.go",
        "patchSetId": 38
      },
      "lineNbr": 828,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-10-29T22:46:16Z",
      "side": 1,
      "message": "It looks like PutTestPageAlloc frees all of this memory. Is this still a problem?\n\nOverall, I\u0027m wondering if the cache is actually necessary. It would be nice if it wasn\u0027t.",
      "revId": "808ffb925280b43fff005dbb297c2ffd84a92279",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5dd82f46_acf078a0",
        "filename": "src/runtime/export_test.go",
        "patchSetId": 38
      },
      "lineNbr": 835,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-10-29T22:46:16Z",
      "side": 1,
      "message": "for i :\u003d range pageAllocDummies",
      "revId": "808ffb925280b43fff005dbb297c2ffd84a92279",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f97883d8_3c83e0a0",
        "filename": "src/runtime/export_test.go",
        "patchSetId": 38
      },
      "lineNbr": 843,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-10-29T22:46:16Z",
      "side": 1,
      "message": "Panic with a useful message?",
      "revId": "808ffb925280b43fff005dbb297c2ffd84a92279",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5f55f53c_5b9ab076",
        "filename": "src/runtime/export_test.go",
        "patchSetId": 38
      },
      "lineNbr": 850,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-10-29T22:46:16Z",
      "side": 1,
      "message": "Stale comment?",
      "revId": "808ffb925280b43fff005dbb297c2ffd84a92279",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5ddb7487_a35b3351",
        "filename": "src/runtime/export_test.go",
        "patchSetId": 38
      },
      "lineNbr": 860,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-10-29T22:46:16Z",
      "side": 1,
      "message": "Should allocRange ignore N \u003d\u003d 0, or maybe panic?",
      "revId": "808ffb925280b43fff005dbb297c2ffd84a92279",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "64fd0033_a69a648d",
        "filename": "src/runtime/export_test.go",
        "patchSetId": 38
      },
      "lineNbr": 878,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-10-29T22:46:16Z",
      "side": 1,
      "message": "for i :\u003d range pageAllocDummies",
      "revId": "808ffb925280b43fff005dbb297c2ffd84a92279",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "86a5562b_f6776a45",
        "filename": "src/runtime/export_test.go",
        "patchSetId": 38
      },
      "lineNbr": 884,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-10-29T22:46:16Z",
      "side": 1,
      "message": "that",
      "range": {
        "startLine": 884,
        "startChar": 40,
        "endLine": 884,
        "endChar": 45
      },
      "revId": "808ffb925280b43fff005dbb297c2ffd84a92279",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "82d9a655_5724f6a2",
        "filename": "src/runtime/export_test.go",
        "patchSetId": 38
      },
      "lineNbr": 914,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-10-29T22:46:16Z",
      "side": 1,
      "message": "Is the \"entry.pageAlloc.init\" above going to clobber the fixalloc or is this okay?",
      "revId": "808ffb925280b43fff005dbb297c2ffd84a92279",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c6796d60_b6772d1a",
        "filename": "src/runtime/export_test.go",
        "patchSetId": 38
      },
      "lineNbr": 918,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-10-29T22:46:16Z",
      "side": 1,
      "message": "Document",
      "revId": "808ffb925280b43fff005dbb297c2ffd84a92279",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1d9de6f9_abcda5e0",
        "filename": "src/runtime/export_test.go",
        "patchSetId": 38
      },
      "lineNbr": 920,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-10-29T22:46:16Z",
      "side": 1,
      "message": "Document",
      "revId": "808ffb925280b43fff005dbb297c2ffd84a92279",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9983be35_eee44018",
        "filename": "src/runtime/mpagealloc.go",
        "patchSetId": 38
      },
      "lineNbr": 79,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-10-29T22:46:16Z",
      "side": 1,
      "message": "The -arenaBaseOffset could use a little explanation.",
      "revId": "808ffb925280b43fff005dbb297c2ffd84a92279",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "41531341_a8c6e406",
        "filename": "src/runtime/mpagealloc.go",
        "patchSetId": 38
      },
      "lineNbr": 84,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-10-29T22:46:16Z",
      "side": 1,
      "message": "leaf?",
      "range": {
        "startLine": 84,
        "startChar": 32,
        "endLine": 84,
        "endChar": 39
      },
      "revId": "808ffb925280b43fff005dbb297c2ffd84a92279",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "955e35cd_b84d281e",
        "filename": "src/runtime/mpagealloc.go",
        "patchSetId": 38
      },
      "lineNbr": 100,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-10-29T22:46:16Z",
      "side": 1,
      "message": "that (also on the next line)\n\n(\"which\" always introduces a sub-clause. \"X which Y\" means you can delete the \"which Y\" part and still have a sensible sentence. \"X that Y\" means that Y is integral to X.)",
      "range": {
        "startLine": 100,
        "startChar": 49,
        "endLine": 100,
        "endChar": 54
      },
      "revId": "808ffb925280b43fff005dbb297c2ffd84a92279",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8d5ede9f_2b7eee7d",
        "filename": "src/runtime/mpagealloc.go",
        "patchSetId": 38
      },
      "lineNbr": 106,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-10-29T22:46:16Z",
      "side": 1,
      "message": "It\u0027s rather confusing that this uses both inclusive and exclusive ranges. Can\u0027t they both be exclusive? Is the problem that limit could be the end of the address space? (I was really skeptical of the call sites, so I had to come and check the documentation.)",
      "revId": "808ffb925280b43fff005dbb297c2ffd84a92279",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6eaed278_d63b6f9a",
        "filename": "src/runtime/mpagealloc.go",
        "patchSetId": 38
      },
      "lineNbr": 114,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-10-29T22:46:16Z",
      "side": 1,
      "message": "What\u0027s an entry block? Actually, I\u0027m rather confused by why this function is doing rounding at all. Why isn\u0027t this function just a shift of the address (and dealing with arenaBaseOffset)?",
      "range": {
        "startLine": 114,
        "startChar": 64,
        "endLine": 114,
        "endChar": 75
      },
      "revId": "808ffb925280b43fff005dbb297c2ffd84a92279",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "998fad7b_7e15d829",
        "filename": "src/runtime/mpagealloc.go",
        "patchSetId": 38
      },
      "lineNbr": 140,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-10-29T22:46:16Z",
      "side": 1,
      "message": "Typo",
      "revId": "808ffb925280b43fff005dbb297c2ffd84a92279",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "95e9f6e1_6c657590",
        "filename": "src/runtime/mpagealloc.go",
        "patchSetId": 38
      },
      "lineNbr": 142,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-10-29T22:46:16Z",
      "side": 1,
      "message": "\u003c\u003d",
      "range": {
        "startLine": 142,
        "startChar": 31,
        "endLine": 142,
        "endChar": 32
      },
      "revId": "808ffb925280b43fff005dbb297c2ffd84a92279",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "245c3bd3_504a7bce",
        "filename": "src/runtime/mpagealloc.go",
        "patchSetId": 38
      },
      "lineNbr": 151,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-10-29T22:46:16Z",
      "side": 1,
      "message": "Explain how this is indexed.",
      "revId": "808ffb925280b43fff005dbb297c2ffd84a92279",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "03dd9056_3b0e32c6",
        "filename": "src/runtime/mpagealloc.go",
        "patchSetId": 38
      },
      "lineNbr": 170,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-10-29T22:46:16Z",
      "side": 1,
      "message": "The fact that it\u0027s critical is less important than its justification. \"This level of indirection makes it possible to test pageAlloc independently of the runtime allocator.\"",
      "range": {
        "startLine": 169,
        "startChar": 46,
        "endLine": 170,
        "endChar": 16
      },
      "revId": "808ffb925280b43fff005dbb297c2ffd84a92279",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e5165ebb_ff93bc2e",
        "filename": "src/runtime/mpagealloc.go",
        "patchSetId": 38
      },
      "lineNbr": 182,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-10-29T22:46:16Z",
      "side": 1,
      "message": "sysStat?",
      "range": {
        "startLine": 182,
        "startChar": 63,
        "endLine": 182,
        "endChar": 79
      },
      "revId": "808ffb925280b43fff005dbb297c2ffd84a92279",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f10bbf95_66d4ebb1",
        "filename": "src/runtime/mpagealloc.go",
        "patchSetId": 38
      },
      "lineNbr": 196,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-10-29T22:46:16Z",
      "side": 1,
      "message": "\"It may allocate metadata, in which case *sysStat will be updated.\"",
      "revId": "808ffb925280b43fff005dbb297c2ffd84a92279",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "36782568_b65d74f7",
        "filename": "src/runtime/mpagealloc.go",
        "patchSetId": 38
      },
      "lineNbr": 198,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-10-29T22:46:16Z",
      "side": 1,
      "message": "What are the locking/concurrency rules for this?",
      "revId": "808ffb925280b43fff005dbb297c2ffd84a92279",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cab8909f_1df7165f",
        "filename": "src/runtime/mpagealloc.go",
        "patchSetId": 38
      },
      "lineNbr": 199,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-10-29T22:46:16Z",
      "side": 1,
      "message": "Not strictly true, since this also maps chunks. Maybe \"Grow the summary levels in a system-dependent manner.\"?",
      "revId": "808ffb925280b43fff005dbb297c2ffd84a92279",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b88b790b_50f9c337",
        "filename": "src/runtime/mpagealloc.go",
        "patchSetId": 38
      },
      "lineNbr": 208,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-10-29T22:46:16Z",
      "side": 1,
      "message": "Move to just before \"Get the part of chunks that now needs to be mapped\"?",
      "revId": "808ffb925280b43fff005dbb297c2ffd84a92279",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b0482311_6d590d62",
        "filename": "src/runtime/mpagealloc.go",
        "patchSetId": 38
      },
      "lineNbr": 236,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-10-29T22:46:16Z",
      "side": 1,
      "message": "This looks identical to the logic in sysGrow. Maybe the logic could be merged in a helper?",
      "revId": "808ffb925280b43fff005dbb297c2ffd84a92279",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7f84df9c_e3a36fe9",
        "filename": "src/runtime/mpagealloc.go",
        "patchSetId": 38
      },
      "lineNbr": 242,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-10-29T22:46:16Z",
      "side": 1,
      "message": "See my comment at https://go-review.googlesource.com/c/go/+/190622/38/src/runtime/mpagealloc_64bit.go#115",
      "revId": "808ffb925280b43fff005dbb297c2ffd84a92279",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6b760d51_316e9adb",
        "filename": "src/runtime/mpagealloc.go",
        "patchSetId": 38
      },
      "lineNbr": 258,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-10-29T22:46:16Z",
      "side": 1,
      "message": "I\u0027m not sure what this means.\n\nI would think this is a matter of correctness, since the definition of searchAddr is \"there are no free pages below here\". Does \"below\" mean in the address space or in the shifted address space?",
      "range": {
        "startLine": 257,
        "startChar": 60,
        "endLine": 258,
        "endChar": 32
      },
      "revId": "808ffb925280b43fff005dbb297c2ffd84a92279",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f7863a79_774b0811",
        "filename": "src/runtime/mpagealloc.go",
        "patchSetId": 38
      },
      "lineNbr": 270,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-10-29T22:46:16Z",
      "side": 1,
      "message": "Does it add free memory, or did grow just add a bunch of free memory and update is incorporating that into the summary?",
      "range": {
        "startLine": 269,
        "startChar": 17,
        "endLine": 270,
        "endChar": 21
      },
      "revId": "808ffb925280b43fff005dbb297c2ffd84a92279",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f84efbb7_d42242ac",
        "filename": "src/runtime/mpagealloc.go",
        "patchSetId": 38
      },
      "lineNbr": 274,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-10-29T22:46:16Z",
      "side": 1,
      "message": "I haven\u0027t read past here yet.",
      "revId": "808ffb925280b43fff005dbb297c2ffd84a92279",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a6e3c90_6c01d79d",
        "filename": "src/runtime/mpagealloc_32bit.go",
        "patchSetId": 38
      },
      "lineNbr": 0,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-10-29T22:46:16Z",
      "side": 1,
      "message": "Some of my comments from mpagealloc_64bit also apply here.",
      "revId": "808ffb925280b43fff005dbb297c2ffd84a92279",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2ea5bba3_754820f4",
        "filename": "src/runtime/mpagealloc_32bit.go",
        "patchSetId": 38
      },
      "lineNbr": 75,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-10-29T22:46:16Z",
      "side": 1,
      "message": "entries",
      "range": {
        "startLine": 75,
        "startChar": 2,
        "endLine": 75,
        "endChar": 3
      },
      "revId": "808ffb925280b43fff005dbb297c2ffd84a92279",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "535eac72_a715c953",
        "filename": "src/runtime/mpagealloc_32bit.go",
        "patchSetId": 38
      },
      "lineNbr": 81,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-10-29T22:46:16Z",
      "side": 1,
      "message": "Instead of keeping the offset i, maybe \"reservation \u003d add(reservation, e * mallocSumBytes)\"?",
      "revId": "808ffb925280b43fff005dbb297c2ffd84a92279",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "41a30e36_6c9b5de5",
        "filename": "src/runtime/mpagealloc_64bit.go",
        "patchSetId": 38
      },
      "lineNbr": 26,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-10-29T22:46:16Z",
      "side": 1,
      "message": "This seems unrelated to levelBits. Should this just by in the doc for levelShift?",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 26,
        "endChar": 21
      },
      "revId": "808ffb925280b43fff005dbb297c2ffd84a92279",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "050f8483_c71f1f79",
        "filename": "src/runtime/mpagealloc_64bit.go",
        "patchSetId": 38
      },
      "lineNbr": 52,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-10-29T22:46:16Z",
      "side": 1,
      "message": "Leaf?",
      "range": {
        "startLine": 52,
        "startChar": 7,
        "endLine": 52,
        "endChar": 14
      },
      "revId": "808ffb925280b43fff005dbb297c2ffd84a92279",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6d704d0d_0018709a",
        "filename": "src/runtime/mpagealloc_64bit.go",
        "patchSetId": 38
      },
      "lineNbr": 61,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-10-29T22:46:16Z",
      "side": 1,
      "message": "Go ahead and name this so it\u0027s clearer to callers what they\u0027re supposed to pass, even though this implementation doesn\u0027t use it.",
      "range": {
        "startLine": 61,
        "startChar": 28,
        "endLine": 61,
        "endChar": 29
      },
      "revId": "808ffb925280b43fff005dbb297c2ffd84a92279",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4faa5a58_ded737b5",
        "filename": "src/runtime/mpagealloc_64bit.go",
        "patchSetId": 38
      },
      "lineNbr": 64,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-10-29T22:46:16Z",
      "side": 1,
      "message": "for l, shift :\u003d range levelShift ?",
      "revId": "808ffb925280b43fff005dbb297c2ffd84a92279",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0a4bfa70_02ecc2f9",
        "filename": "src/runtime/mpagealloc_64bit.go",
        "patchSetId": 38
      },
      "lineNbr": 65,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-10-29T22:46:16Z",
      "side": 1,
      "message": "\"size\" is ambiguous. I think this is \"entries\"",
      "revId": "808ffb925280b43fff005dbb297c2ffd84a92279",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b60b0636_25124dc0",
        "filename": "src/runtime/mpagealloc_64bit.go",
        "patchSetId": 38
      },
      "lineNbr": 71,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-10-29T22:46:16Z",
      "side": 1,
      "message": "Slightly more self-descriptive: \"page summary memory\"",
      "range": {
        "startLine": 71,
        "startChar": 28,
        "endLine": 71,
        "endChar": 51
      },
      "revId": "808ffb925280b43fff005dbb297c2ffd84a92279",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "25be34b9_72afa2ad",
        "filename": "src/runtime/mpagealloc_64bit.go",
        "patchSetId": 38
      },
      "lineNbr": 80,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-10-29T22:46:16Z",
      "side": 1,
      "message": "Document (probably just this one, not the 32bit one)",
      "revId": "808ffb925280b43fff005dbb297c2ffd84a92279",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3b044374_4c366b60",
        "filename": "src/runtime/mpagealloc_64bit.go",
        "patchSetId": 38
      },
      "lineNbr": 99,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-10-29T22:46:16Z",
      "side": 1,
      "message": "Move this above the mlo, mhi calculation? It seems to be in the middle of the mapping computation, but doesn\u0027t itself relate to the mapping.",
      "revId": "808ffb925280b43fff005dbb297c2ffd84a92279",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "14cdaf92_f2f59a79",
        "filename": "src/runtime/mpagealloc_64bit.go",
        "patchSetId": 38
      },
      "lineNbr": 108,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-10-29T22:46:16Z",
      "side": 1,
      "message": "Comment what this is doing. // Extend the new range to be contiguous with the old range.",
      "revId": "808ffb925280b43fff005dbb297c2ffd84a92279",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9ec07de8_fc29c4a5",
        "filename": "src/runtime/mpagealloc_64bit.go",
        "patchSetId": 38
      },
      "lineNbr": 115,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-10-29T22:46:16Z",
      "side": 1,
      "message": "What if the overlap is something like\n\n      |--- mapped ---|\n   |--- need ---|\n\n? Then you\u0027ll fall into this case, but you actually needed to map the memory from needBase to mappedBase (but not past mappedBase or you\u0027ll wipe out the overlapping memory).",
      "revId": "808ffb925280b43fff005dbb297c2ffd84a92279",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2aaaec93_659208a4",
        "filename": "src/runtime/mpagealloc_64bit.go",
        "patchSetId": 38
      },
      "lineNbr": 127,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-10-29T22:46:16Z",
      "side": 1,
      "message": "I was surprised to not see this update s.start and s.end, given that it consumes them and then changes the underlying state that they summarize.",
      "revId": "808ffb925280b43fff005dbb297c2ffd84a92279",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "755fea40_e849503b",
        "filename": "src/runtime/mpagealloc_test.go",
        "patchSetId": 38
      },
      "lineNbr": 0,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-10-29T22:46:16Z",
      "side": 1,
      "message": "I haven\u0027t read this file yet.",
      "revId": "808ffb925280b43fff005dbb297c2ffd84a92279",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}