{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "dea7b38d_6b09b115",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 28759
      },
      "writtenOn": "2021-05-26T14:14:02Z",
      "side": 1,
      "message": "LGTM. I added the wait-release hashtag since this changes behavior (even though it\u0027s very slight).",
      "revId": "34c61b2c7a0f8c91e0256ce8738444da1fbc754b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d7885b9c_de5156dc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-05-26T14:14:41Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003d34c61b2c",
      "tag": "autogenerated:trybots~beginning",
      "revId": "34c61b2c7a0f8c91e0256ce8738444da1fbc754b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dd533ac6_271730f4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-05-26T14:25:45Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "d7885b9c_de5156dc",
      "tag": "autogenerated:trybots~happy",
      "revId": "34c61b2c7a0f8c91e0256ce8738444da1fbc754b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a799498a_f3b4f900",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 28759
      },
      "writtenOn": "2021-05-26T16:36:31Z",
      "side": 1,
      "message": "I\u0027m going to keep this unresolved.",
      "parentUuid": "dea7b38d_6b09b115",
      "revId": "34c61b2c7a0f8c91e0256ce8738444da1fbc754b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c1da7b33_a7c34dc6",
        "filename": "src/crypto/sha256/sha256.go",
        "patchSetId": 2
      },
      "lineNbr": 268,
      "author": {
        "id": 28759
      },
      "writtenOn": "2021-05-26T14:14:02Z",
      "side": 1,
      "message": "Slight preference to use copy for readability, rather than casting to a pointer then dereferencing. ie.\n\n  var sum224 [Size224]byte\n  copy(sum224[:], sum[:Size224])\n  return sum224",
      "range": {
        "startLine": 268,
        "startChar": 1,
        "endLine": 268,
        "endChar": 40
      },
      "revId": "34c61b2c7a0f8c91e0256ce8738444da1fbc754b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f01d8fe5_ac002847",
        "filename": "src/crypto/sha256/sha256.go",
        "patchSetId": 2
      },
      "lineNbr": 268,
      "author": {
        "id": 35588
      },
      "writtenOn": "2021-05-26T15:11:56Z",
      "side": 1,
      "message": "Awww, I wanted to use new language features! 😂\n\n(https://go-review.googlesource.com/c/go/+/216424/ .... https://github.com/golang/go/issues/395)\n\nI hadn\u0027t measured until just now but it\u0027s also much faster:\n\nBenchmarkNamed-8        201051339                6.263 ns/op\nBenchmarkCopy-8         172203873                6.071 ns/op\nBenchmarkPointer-8      1000000000               1.031 ns/op\n\n(not runnable on playground, but https://play.golang.org/p/BkYM9Gbi4t2)\n\nLooks like both Named and Copy call runtime.memmove but BenchmarkPointer has no calls:\n\n\"\".BenchmarkPointer STEXT nosplit size\u003d84 args\u003d0x8 locals\u003d0x18 funcid\u003d0x0\n        0x0000 00000 (arraybench_test.go:31)    TEXT    \"\".BenchmarkPointer(SB), NOSPLIT|ABIInternal, $24-8\n        0x0000 00000 (arraybench_test.go:31)    SUBQ    $24, SP\n        0x0004 00004 (arraybench_test.go:31)    MOVQ    BP, 16(SP)\n        0x0009 00009 (arraybench_test.go:31)    LEAQ    16(SP), BP\n        0x000e 00014 (arraybench_test.go:31)    FUNCDATA        $0, gclocals·1a65e721a2ccc325b382662e7ffee780(SB)\n        0x000e 00014 (arraybench_test.go:31)    FUNCDATA        $1, gclocals·69c1753bd5f81501d95132d08af04464(SB)\n        0x000e 00014 (arraybench_test.go:31)    FUNCDATA        $5, \"\".BenchmarkPointer.arginfo1(SB)\n        0x000e 00014 (arraybench_test.go:31)    XORL    CX, CX\n        0x0010 00016 (arraybench_test.go:32)    JMP     32\n        0x0012 00018 (arraybench_test.go:49)    TESTB   AL, (BX)\n        0x0014 00020 (arraybench_test.go:32)    INCQ    CX\n        0x0017 00023 (arraybench_test.go:32)    NOP\n        0x0020 00032 (arraybench_test.go:32)    CMPQ    400(AX), CX\n        0x0027 00039 (arraybench_test.go:32)    JLE     63\n        0x0029 00041 (\u003cunknown line number\u003e)    NOP\n        0x0029 00041 (arraybench_test.go:33)    MOVQ    \"\".buf+16(SB), DX\n        0x0030 00048 (arraybench_test.go:33)    MOVQ    \"\".buf(SB), BX\n        0x0037 00055 (arraybench_test.go:49)    CMPQ    DX, $32\n        0x003b 00059 (arraybench_test.go:49)    JCC     18\n        0x003d 00061 (arraybench_test.go:49)    JMP     73\n        0x003f 00063 (arraybench_test.go:35)    MOVQ    16(SP), BP\n        0x0044 00068 (arraybench_test.go:35)    ADDQ    $24, SP\n        0x0048 00072 (arraybench_test.go:35)    RET\n        0x0049 00073 (arraybench_test.go:49)    MOVL    $32, CX\n        0x004e 00078 (arraybench_test.go:49)    PCDATA  $1, $1\n        0x004e 00078 (arraybench_test.go:49)    CALL    runtime.panicSliceAcap(SB)\n        0x0053 00083 (arraybench_test.go:49)    XCHGL   AX, AX",
      "parentUuid": "c1da7b33_a7c34dc6",
      "range": {
        "startLine": 268,
        "startChar": 1,
        "endLine": 268,
        "endChar": 40
      },
      "revId": "34c61b2c7a0f8c91e0256ce8738444da1fbc754b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4d974cab_f1e243ad",
        "filename": "src/crypto/sha256/sha256.go",
        "patchSetId": 2
      },
      "lineNbr": 268,
      "author": {
        "id": 28759
      },
      "writtenOn": "2021-05-26T16:12:21Z",
      "side": 1,
      "message": "Although that operation is faster, that last step is probably negligible in the context of the rest of the Sum224 function. i.e. a 5 ns/op decrease might be worth it if that\u0027s the entirety of the function, but if the rest of the function takes 1 second to run (which it very well might for Sum functions), then dropping to 995 ns isn\u0027t a big benefit.\n\nFrom a readability standpoint, considering the fact that the performance benefit is likely negligible in the grand scheme of the function, I don\u0027t think it\u0027s worth the added complexity.\n\nSorry to be a buzzkill about the use of new language features 😄",
      "parentUuid": "f01d8fe5_ac002847",
      "range": {
        "startLine": 268,
        "startChar": 1,
        "endLine": 268,
        "endChar": 40
      },
      "revId": "34c61b2c7a0f8c91e0256ce8738444da1fbc754b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d1be4d8b_13a26126",
        "filename": "src/crypto/sha256/sha256.go",
        "patchSetId": 2
      },
      "lineNbr": 268,
      "author": {
        "id": 5065
      },
      "writtenOn": "2021-05-26T16:34:36Z",
      "side": 1,
      "message": "\u003e Sorry to be a buzzkill about the use of new language features 😄\n\nRemoved!\n\nI\u0027ll have to find another place to use it. :)",
      "parentUuid": "4d974cab_f1e243ad",
      "range": {
        "startLine": 268,
        "startChar": 1,
        "endLine": 268,
        "endChar": 40
      },
      "revId": "34c61b2c7a0f8c91e0256ce8738444da1fbc754b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e7fbb0e8_b0579866",
        "filename": "src/crypto/sha256/sha256.go",
        "patchSetId": 2
      },
      "lineNbr": 268,
      "author": {
        "id": 28759
      },
      "writtenOn": "2021-05-26T16:36:31Z",
      "side": 1,
      "message": "Thanks! 😊",
      "parentUuid": "d1be4d8b_13a26126",
      "range": {
        "startLine": 268,
        "startChar": 1,
        "endLine": 268,
        "endChar": 40
      },
      "revId": "34c61b2c7a0f8c91e0256ce8738444da1fbc754b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9f2b9860_b402a672",
        "filename": "src/crypto/sha256/sha256.go",
        "patchSetId": 2
      },
      "lineNbr": 268,
      "author": {
        "id": 5206
      },
      "writtenOn": "2021-05-26T19:21:16Z",
      "side": 1,
      "message": "The time is negligible but I don\u0027t really gree in general.  This is part of the language now, and we should consider the entire language to be permitted in the standard library.  If this construct is too unreadable, we should reconsider whether we should add it to the language at all.  Or so it seems to me.",
      "parentUuid": "4d974cab_f1e243ad",
      "range": {
        "startLine": 268,
        "startChar": 1,
        "endLine": 268,
        "endChar": 40
      },
      "revId": "34c61b2c7a0f8c91e0256ce8738444da1fbc754b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8a2d5888_45a441e1",
        "filename": "src/crypto/sha256/sha256.go",
        "patchSetId": 2
      },
      "lineNbr": 268,
      "author": {
        "id": 28759
      },
      "writtenOn": "2021-05-26T19:53:35Z",
      "side": 1,
      "message": "That\u0027s a fair point Ian. It feels like a bit of a hack to me to cast a slice to a pointer to an array, then return the dereferenced value. But it\u0027s likely I\u0027m missing some context about the proposal surrounding that feature. My ideal for this code would be to do something like this:\n  return ([Size224]byte)(sum[:Size224])\n\n\nHowever, if this is the new canonical way to handle situations like this, then I agree that we shouldn\u0027t special case just due to my readability preferences. So we can revert back to patchset #2\n\nPerhaps it\u0027s worth a new section in https://github.com/golang/go/wiki/CodeReviewComments to explain cases like this?",
      "parentUuid": "9f2b9860_b402a672",
      "range": {
        "startLine": 268,
        "startChar": 1,
        "endLine": 268,
        "endChar": 40
      },
      "revId": "34c61b2c7a0f8c91e0256ce8738444da1fbc754b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cfe39afa_d9c4052a",
        "filename": "src/crypto/sha256/sha256.go",
        "patchSetId": 2
      },
      "lineNbr": 268,
      "author": {
        "id": 35588
      },
      "writtenOn": "2021-05-26T20:04:18Z",
      "side": 1,
      "message": "Yeah, I wish Array(slice) was also permitted. I think the concern at the time was copying, but that\u0027s a little silly considering `*` also copies. It just makes more less readable code in cases like this.",
      "parentUuid": "8a2d5888_45a441e1",
      "range": {
        "startLine": 268,
        "startChar": 1,
        "endLine": 268,
        "endChar": 40
      },
      "revId": "34c61b2c7a0f8c91e0256ce8738444da1fbc754b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1ad58f31_44c190b2",
        "filename": "src/crypto/sha256/sha256.go",
        "patchSetId": 2
      },
      "lineNbr": 268,
      "author": {
        "id": 5065
      },
      "writtenOn": "2021-05-27T03:27:20Z",
      "side": 1,
      "message": "Katie,\n\nJosh pointed out that it might be palatable style-wise if it were two lines:\n\n    ap :\u003d (*[Size224]byte)(sum[:Size224])\n    return *ap\n\nDoes that read any better/worse to you?\n\nThe other reason to prefer the array pointer way is it doesn\u0027t change the stack size of this function, as opposed to the unnamed return + copy. (Mentioned in https://github.com/golang/go/issues/20859#issuecomment-849023922)",
      "parentUuid": "cfe39afa_d9c4052a",
      "range": {
        "startLine": 268,
        "startChar": 1,
        "endLine": 268,
        "endChar": 40
      },
      "revId": "34c61b2c7a0f8c91e0256ce8738444da1fbc754b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1d61c2b7_fd7724d4",
        "filename": "src/crypto/sha256/sha256.go",
        "patchSetId": 2
      },
      "lineNbr": 268,
      "author": {
        "id": 28759
      },
      "writtenOn": "2021-05-27T14:51:08Z",
      "side": 1,
      "message": "That does actually read slightly better for me. Wdyt?\n\nAs an aside, I imagine someone (who likely isn\u0027t me) should come to a style decision and document it somewhere, but for the purposes of this CL, I think it\u0027s fine for us to make the decision that makes the most sense. 👍",
      "parentUuid": "1ad58f31_44c190b2",
      "range": {
        "startLine": 268,
        "startChar": 1,
        "endLine": 268,
        "endChar": 40
      },
      "revId": "34c61b2c7a0f8c91e0256ce8738444da1fbc754b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "79db79fe_2aa9bfde",
        "filename": "src/crypto/sha256/sha256.go",
        "patchSetId": 2
      },
      "lineNbr": 268,
      "author": {
        "id": 5065
      },
      "writtenOn": "2021-05-27T14:58:55Z",
      "side": 1,
      "message": "Yeah, I\u0027m fine with it too.\n\nI\u0027m a little reluctant to get super prescriptive on style until we have more experience. (See Rob Pike\u0027s comments on #20859, lamenting style guides)\n\nI suspect this just doesn\u0027t come up often enough to warrant style guidance: note how long we did without this language feature. Array types aren\u0027t used too often. Especially pointers to array types. crypto/* is the one exception, e.g. https://pkg.go.dev/golang.org/x/crypto/nacl/box#Seal",
      "parentUuid": "1d61c2b7_fd7724d4",
      "range": {
        "startLine": 268,
        "startChar": 1,
        "endLine": 268,
        "endChar": 40
      },
      "revId": "34c61b2c7a0f8c91e0256ce8738444da1fbc754b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}