{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "f2392bce_cf16e90e",
        "filename": "src/testing/testing.go",
        "patchSetId": 4
      },
      "lineNbr": 77,
      "author": {
        "id": 6365
      },
      "writtenOn": "2023-06-22T18:45:50Z",
      "side": 1,
      "message": "I think `runtime.KeepAlive` would be clearer and more robust than using an exported package variable. At least in theory, a link-time optimization (or whole-program compiler) could discover than `Sink` is never read, consider stores to that variable dead, and DCE all of the code leading up to those stores.\n\nThat is: this pattern makes assumptions about the capabilities of the compiler and toolchain that are not required in the language spec and not subject to the Go 1 compatibility policy.",
      "range": {
        "startLine": 74,
        "startChar": 0,
        "endLine": 77,
        "endChar": 18
      },
      "revId": "d7b0ffda136b001e870fd4b7feebbb3a2cfe31d7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e6a49e12_20450c6b",
        "filename": "src/testing/testing.go",
        "patchSetId": 4
      },
      "lineNbr": 77,
      "author": {
        "id": 52648
      },
      "writtenOn": "2023-06-22T18:49:16Z",
      "side": 1,
      "message": "Fair enough.\n\n`runtime.KeepAlive` does make the code slightly trickier though since we need to ensure that every iteration result needs to be kept alive",
      "parentUuid": "f2392bce_cf16e90e",
      "range": {
        "startLine": 74,
        "startChar": 0,
        "endLine": 77,
        "endChar": 18
      },
      "revId": "d7b0ffda136b001e870fd4b7feebbb3a2cfe31d7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "76ffdf46_77b62925",
        "filename": "src/testing/testing.go",
        "patchSetId": 4
      },
      "lineNbr": 77,
      "author": {
        "id": 52648
      },
      "writtenOn": "2023-06-22T20:15:40Z",
      "side": 1,
      "message": "Here\u0027s a basic example using KeepAlive:\n\nfunc BenchmarkEncode(b *testing.B) {\n\tsrc :\u003d bytes.Repeat([]byte{2, 3, 5, 7}, 256)\n\tdest :\u003d make([]byte, hex.EncodedLen(len(src)))\n\n\tfor i :\u003d 0; i \u003c b.N; i++ {\n\t\thex.Encode(dest, src)\n\t}\n\n\truntime.KeepAlive(dest)\n}\n\nCan we be sure that a sufficiently smart compiler won\u0027t notice that we keep writing the same thing into the same slice (`dest`) and replace the loop by a single invocation? Should we make an effort to write into difference destinations and/or read from different sources?",
      "parentUuid": "e6a49e12_20450c6b",
      "range": {
        "startLine": 74,
        "startChar": 0,
        "endLine": 77,
        "endChar": 18
      },
      "revId": "d7b0ffda136b001e870fd4b7feebbb3a2cfe31d7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1cf9b904_01848da7",
        "filename": "src/testing/testing.go",
        "patchSetId": 4
      },
      "lineNbr": 77,
      "author": {
        "id": 6365
      },
      "writtenOn": "2023-06-22T20:20:00Z",
      "side": 1,
      "message": "\u003e Can we be sure that a sufficiently smart compiler won\u0027t notice that we keep writing the same thing into the same slice (`dest`) and replace the loop by a single invocation? Should we make an effort to write into difference destinations and/or read from different sources?\n\nI can\u0027t be sure of that, which is why I proposed #48768. ðŸ˜…\n\nBut I could imagine a documentation change to `runtime.KeepAlive` that would promise to also keep alive any writes leading to the current value at that point. If that promise were added, then we could call `runtime.KeepAlive(dest)` at the end of each iteration to guarantee that the dead stores aren\u0027t eliminated.",
      "parentUuid": "76ffdf46_77b62925",
      "range": {
        "startLine": 74,
        "startChar": 0,
        "endLine": 77,
        "endChar": 18
      },
      "revId": "d7b0ffda136b001e870fd4b7feebbb3a2cfe31d7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dd04b92e_4ebd13ba",
        "filename": "src/testing/testing.go",
        "patchSetId": 4
      },
      "lineNbr": 77,
      "author": {
        "id": 52648
      },
      "writtenOn": "2023-06-23T13:48:54Z",
      "side": 1,
      "message": "I went ahead and changed the example to something that returns a scalar, which can then be easily collected into an aggregate and a KeepAlive on that aggregate \n\nIt\u0027s difficult to find stdlib examples that will actually be optimized away (typically because of implementation complexity which prevents inlining), so I\u0027m using an artificial example here. The benefit is that this benchmark is actually giving wrong results w/o the KeepAlive, and correct results with it.",
      "parentUuid": "1cf9b904_01848da7",
      "range": {
        "startLine": 74,
        "startChar": 0,
        "endLine": 77,
        "endChar": 18
      },
      "revId": "d7b0ffda136b001e870fd4b7feebbb3a2cfe31d7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eaaf0aa4_09b17044",
        "filename": "src/testing/testing.go",
        "patchSetId": 4
      },
      "lineNbr": 77,
      "author": {
        "id": 5206
      },
      "writtenOn": "2023-06-23T20:34:14Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "dd04b92e_4ebd13ba",
      "range": {
        "startLine": 74,
        "startChar": 0,
        "endLine": 77,
        "endChar": 18
      },
      "revId": "d7b0ffda136b001e870fd4b7feebbb3a2cfe31d7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "224c6f82_1fe043cf",
        "filename": "src/testing/testing.go",
        "patchSetId": 4
      },
      "lineNbr": 81,
      "author": {
        "id": 6365
      },
      "writtenOn": "2023-06-22T18:45:50Z",
      "side": 1,
      "message": "s/:\u003d/\u003d/\n\n(or else this turns into a local variable and gets DCE\u0027d.)",
      "range": {
        "startLine": 81,
        "startChar": 12,
        "endLine": 81,
        "endChar": 14
      },
      "revId": "d7b0ffda136b001e870fd4b7feebbb3a2cfe31d7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4d7e7849_7c5bfc4f",
        "filename": "src/testing/testing.go",
        "patchSetId": 4
      },
      "lineNbr": 81,
      "author": {
        "id": 52648
      },
      "writtenOn": "2023-06-22T18:47:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "224c6f82_1fe043cf",
      "range": {
        "startLine": 81,
        "startChar": 12,
        "endLine": 81,
        "endChar": 14
      },
      "revId": "d7b0ffda136b001e870fd4b7feebbb3a2cfe31d7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}