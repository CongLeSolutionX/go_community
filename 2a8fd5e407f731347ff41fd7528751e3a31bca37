{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "11aa9a68_74d03368",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 9,
      "author": {
        "id": 6005
      },
      "writtenOn": "2023-04-23T23:02:02Z",
      "side": 1,
      "message": "Also here.",
      "range": {
        "startLine": 9,
        "startChar": 12,
        "endLine": 9,
        "endChar": 22
      },
      "revId": "2a8fd5e407f731347ff41fd7528751e3a31bca37",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b542d3b5_0c270bad",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 9,
      "author": {
        "id": 57259
      },
      "writtenOn": "2023-04-24T15:17:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "11aa9a68_74d03368",
      "range": {
        "startLine": 9,
        "startChar": 12,
        "endLine": 9,
        "endChar": 22
      },
      "revId": "2a8fd5e407f731347ff41fd7528751e3a31bca37",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b7c4fc23_5373a99b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-04-23T18:08:58Z",
      "side": 1,
      "message": "Superseded.",
      "parentUuid": "53f18e99_a14601b9",
      "tag": "autogenerated:trybots~beginning",
      "revId": "2a8fd5e407f731347ff41fd7528751e3a31bca37",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c775e3ad_d81ca234",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-04-23T18:08:58Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003d2a8fd5e4\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "2a8fd5e407f731347ff41fd7528751e3a31bca37",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "354d3f83_4b573146",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-04-23T18:19:30Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "c775e3ad_d81ca234",
      "tag": "autogenerated:trybots~happy",
      "revId": "2a8fd5e407f731347ff41fd7528751e3a31bca37",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dd290f23_473952e4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 6005
      },
      "writtenOn": "2023-04-23T23:02:02Z",
      "side": 1,
      "message": "Various comments, possibly too in the weeds, in case they\u0027re helpful. :)",
      "revId": "2a8fd5e407f731347ff41fd7528751e3a31bca37",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2be9e9e0_b7dd65d3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 31647
      },
      "writtenOn": "2023-04-24T14:15:34Z",
      "side": 1,
      "message": "Well, Dmitri already did a very thorough job of reviewing! LGTM at a high level, but I will re-review once his comments are addressed.\n\nThanks for picking this up!",
      "revId": "2a8fd5e407f731347ff41fd7528751e3a31bca37",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ef710462_634a0f09",
        "filename": "api/next/28089.txt",
        "patchSetId": 4
      },
      "lineNbr": 1,
      "author": {
        "id": 6005
      },
      "writtenOn": "2023-04-23T23:02:02Z",
      "side": 1,
      "message": "I wanted to share a data point about this API that I\u0027ve realized after the proposal was accepted, and see what you think. There may be rare cases where the caller wants to know what the generated comment middle arbitrary text part was, in addition to the fact it was generated. (I encountered one real-world example of this in https://github.com/dominikh/go-tools/blob/90a075d2433880b782b153fb7f085b5fe71ca3d6/analysis/facts/generated/generated.go. CC @dominik@honnef.co)\n\nSince IsGenerated already does the work of finding the generated comment, if the API were to return `(text string, ok bool)` instead of just `(bool)`, it would no extra effort for it to make that text available too:\n\n    if /* ... comment.Text matches ... */ {\n        return comment.Text[len(prefix) : len(comment.Text)-len(suffix)], true\n    }\n\nMost callers that don\u0027t need it would just do:\n\n    _, gen :\u003d ast.IsGenerated(f)\n\nWith the API accepted in the proposal, callers that want to get to the generated comment text have no choice but to implement the IsGenerated function themselves. Perhaps that\u0027s fine.",
      "range": {
        "startLine": 1,
        "startChar": 36,
        "endLine": 1,
        "endChar": 40
      },
      "revId": "2a8fd5e407f731347ff41fd7528751e3a31bca37",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "17ede56e_ad2f3f08",
        "filename": "api/next/28089.txt",
        "patchSetId": 4
      },
      "lineNbr": 1,
      "author": {
        "id": 57259
      },
      "writtenOn": "2023-04-24T15:17:14Z",
      "side": 1,
      "message": "I had the same thought myself, but decided against that API because I expect the vast majority of clients not to need the middle portion of the comment. The few that do can easily fork IsGenerated without significant risk as its behavior is totally governed by a published spec.\n\nNonetheless I\u0027ve structured it internally in this way.",
      "parentUuid": "ef710462_634a0f09",
      "range": {
        "startLine": 1,
        "startChar": 36,
        "endLine": 1,
        "endChar": 40
      },
      "revId": "2a8fd5e407f731347ff41fd7528751e3a31bca37",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "19dfefd3_1984bd6c",
        "filename": "src/go/ast/ast.go",
        "patchSetId": 4
      },
      "lineNbr": 1079,
      "author": {
        "id": 6005
      },
      "writtenOn": "2023-04-23T23:02:02Z",
      "side": 1,
      "message": "This can be shortened slightly and reduce redirects by 1: s/golang.org/go.dev/.",
      "range": {
        "startLine": 1079,
        "startChar": 14,
        "endLine": 1079,
        "endChar": 24
      },
      "revId": "2a8fd5e407f731347ff41fd7528751e3a31bca37",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e5c29dc1_efd70a2b",
        "filename": "src/go/ast/ast.go",
        "patchSetId": 4
      },
      "lineNbr": 1079,
      "author": {
        "id": 57259
      },
      "writtenOn": "2023-04-24T15:17:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "19dfefd3_1984bd6c",
      "range": {
        "startLine": 1079,
        "startChar": 14,
        "endLine": 1079,
        "endChar": 24
      },
      "revId": "2a8fd5e407f731347ff41fd7528751e3a31bca37",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5dd3a957_b1886965",
        "filename": "src/go/ast/ast.go",
        "patchSetId": 4
      },
      "lineNbr": 1084,
      "author": {
        "id": 6005
      },
      "writtenOn": "2023-04-23T23:02:02Z",
      "side": 1,
      "message": "Add \u0027src\u0027 parameter.",
      "range": {
        "startLine": 1084,
        "startChar": 45,
        "endLine": 1084,
        "endChar": 46
      },
      "revId": "2a8fd5e407f731347ff41fd7528751e3a31bca37",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a0372f8b_bae8dffe",
        "filename": "src/go/ast/ast.go",
        "patchSetId": 4
      },
      "lineNbr": 1084,
      "author": {
        "id": 6005
      },
      "writtenOn": "2023-04-23T23:02:02Z",
      "side": 1,
      "message": "s/ParseComment/ParseComments/ (https://pkg.go.dev/go/parser#ParseComments)\n\nHere and on line 1081.",
      "range": {
        "startLine": 1084,
        "startChar": 53,
        "endLine": 1084,
        "endChar": 65
      },
      "revId": "2a8fd5e407f731347ff41fd7528751e3a31bca37",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b15803d3_29639c8e",
        "filename": "src/go/ast/ast.go",
        "patchSetId": 4
      },
      "lineNbr": 1084,
      "author": {
        "id": 57259
      },
      "writtenOn": "2023-04-24T15:17:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a0372f8b_bae8dffe",
      "range": {
        "startLine": 1084,
        "startChar": 53,
        "endLine": 1084,
        "endChar": 65
      },
      "revId": "2a8fd5e407f731347ff41fd7528751e3a31bca37",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5791055b_0ad830c0",
        "filename": "src/go/ast/ast.go",
        "patchSetId": 4
      },
      "lineNbr": 1084,
      "author": {
        "id": 57259
      },
      "writtenOn": "2023-04-24T15:17:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5dd3a957_b1886965",
      "range": {
        "startLine": 1084,
        "startChar": 45,
        "endLine": 1084,
        "endChar": 46
      },
      "revId": "2a8fd5e407f731347ff41fd7528751e3a31bca37",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aeb00bb1_9aaf198b",
        "filename": "src/go/ast/ast.go",
        "patchSetId": 4
      },
      "lineNbr": 1084,
      "author": {
        "id": 6005
      },
      "writtenOn": "2023-04-25T13:37:54Z",
      "side": 1,
      "message": "It also needs to be in the third position (after filename) per https://pkg.go.dev/go/parser#ParseFile, otherwise it\u0027ll still be a build error for everyone that tries to copy and run this example code.",
      "parentUuid": "5791055b_0ad830c0",
      "range": {
        "startLine": 1084,
        "startChar": 45,
        "endLine": 1084,
        "endChar": 46
      },
      "revId": "2a8fd5e407f731347ff41fd7528751e3a31bca37",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4743bda4_8de38804",
        "filename": "src/go/ast/ast.go",
        "patchSetId": 4
      },
      "lineNbr": 1093,
      "author": {
        "id": 6005
      },
      "writtenOn": "2023-04-23T23:02:02Z",
      "side": 1,
      "message": "The prefix and suffix check alone have an overlapping space and end up producing a false positive on the \"// Code generated DO NOT EDIT.\" edge case, so this needs an extra check like:\n\n    if len(comment.Text) \u003e\u003d len(prefix)+len(suffix) \u0026\u0026\n        /* ... has matching prefix and suffix ... */ {",
      "revId": "2a8fd5e407f731347ff41fd7528751e3a31bca37",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "48cecdbd_31f38291",
        "filename": "src/go/ast/ast.go",
        "patchSetId": 4
      },
      "lineNbr": 1093,
      "author": {
        "id": 31647
      },
      "writtenOn": "2023-04-24T14:15:34Z",
      "side": 1,
      "message": "Nice catch.",
      "parentUuid": "4743bda4_8de38804",
      "revId": "2a8fd5e407f731347ff41fd7528751e3a31bca37",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "aadc95d4_43be14b5",
        "filename": "src/go/ast/ast.go",
        "patchSetId": 4
      },
      "lineNbr": 1093,
      "author": {
        "id": 57259
      },
      "writtenOn": "2023-04-24T15:17:14Z",
      "side": 1,
      "message": "Indeed! I replaced the Has calls with Cut, and added a test.",
      "parentUuid": "48cecdbd_31f38291",
      "revId": "2a8fd5e407f731347ff41fd7528751e3a31bca37",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1cddc6f9_8f7943b7",
        "filename": "src/go/ast/issues_test.go",
        "patchSetId": 4
      },
      "lineNbr": 72,
      "author": {
        "id": 6005
      },
      "writtenOn": "2023-04-25T13:37:54Z",
      "side": 1,
      "message": "\u003e \"commment\" is a possible misspelling of \"comment\".\n\nConsider fixing this (and 2 below) if you\u0027d like, it might save a future CL from touching these lines.",
      "parentUuid": "0687ccf2_7136faa7",
      "range": {
        "startLine": 72,
        "startChar": 17,
        "endLine": 72,
        "endChar": 25
      },
      "revId": "2a8fd5e407f731347ff41fd7528751e3a31bca37",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f66d59da_2a61ea5c",
        "filename": "src/go/ast/issues_test.go",
        "patchSetId": 4
      },
      "lineNbr": 100,
      "author": {
        "id": 6005
      },
      "writtenOn": "2023-04-23T23:02:02Z",
      "side": 1,
      "message": "I ran the existing test cases I had in the https://dmitri.shuralyov.com/go/generated package on the implementation here. Most of them passed, but I figured I\u0027d share the 3 that didn\u0027t:\n\n#### 1. FAIL: TestParseFile/positive.10.src: got hasGeneratedComment false, want true\n\nA very obscure edge case: in theory the generated comment spec can be satisfied by a line inside a general comment. The current implementation checks that the entire possibly-multiple-line comment.Text matches and ends up missing this. positive.10.src that reproduces this:\n\n```\n/* start of a general comment\n\n// Code generated by tool; DO NOT EDIT.\n\nend of a general comment */\n\n// +build !dev\n\n// Package comment.\npackage p\n\n// Does match even though it\u0027s inside general comment (/*-style).\n```\n\n#### 2. FAIL: TestParseFile/negative.1.src: got hasGeneratedComment true, want false\n\nAt least for that package, I considered valid Go source files that aren\u0027t gofmt\u0027ed to be in scope. Not sure if you intend for this API to do that or not. But if so, here\u0027s negative.1.src:\n\n```\n    // Code generated by tool; DO NOT EDIT.\n\n// +build !dev\n\npackage p\n\n// Doesn\u0027t match because it\u0027s not a properly formatted // comment (doesn\u0027t begin on column 1).\n```\n\n#### 3. FAIL: TestParseFile/negative.2.src: got hasGeneratedComment true, want false\n\nThis is the \"too short\" edge case I already left an inline comment above. negative.2.src is:\n\n```\n// Code generated DO NOT EDIT.\n\npackage p\n\n// Doesn\u0027t match because the string isn\u0027t an exact match (too short).\n```\n\n---\n\nThere were 2 more failing test cases that I skipped because they exercise source code files that aren\u0027t Go, and don\u0027t apply to the go/ast API here that\u0027s meant for Go source only.",
      "revId": "2a8fd5e407f731347ff41fd7528751e3a31bca37",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9531a5d8_a71bb437",
        "filename": "src/go/ast/issues_test.go",
        "patchSetId": 4
      },
      "lineNbr": 100,
      "author": {
        "id": 57259
      },
      "writtenOn": "2023-04-24T15:17:14Z",
      "side": 1,
      "message": "Thanks Dmitri for such a thorough review.\n\nFor (1) I\u0027ve fixed it and added a test; by a stroke of good luck, the parser doesn\u0027t remove \"//\" from the comment text so it\u0027s sufficient to just iterate over the lines.\n\nFor (2) I already have a test case that asserts a positive result, which is strictly incorrect because of the indent, but it\u0027s impossible to compute the correct answer without more information than the proposed IsGenerated signature provides. I propose we sweep this under the rug and never speak of it again.\n\n\nFor (3) I have fixed the bug and added a test.",
      "parentUuid": "f66d59da_2a61ea5c",
      "revId": "2a8fd5e407f731347ff41fd7528751e3a31bca37",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c2f0d734_08312aac",
        "filename": "src/go/ast/issues_test.go",
        "patchSetId": 4
      },
      "lineNbr": 100,
      "author": {
        "id": 6005
      },
      "writtenOn": "2023-04-25T13:37:54Z",
      "side": 1,
      "message": "\u003e without more information than the proposed IsGenerated signature provides\n\nRight. I included case 2 in scope of the io.Reader-based generated package only because that information was readily available, but given it isn\u0027t here without a FileSet, I agree leaving it out scope here seems like the best path forward.",
      "parentUuid": "9531a5d8_a71bb437",
      "revId": "2a8fd5e407f731347ff41fd7528751e3a31bca37",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "15cd5977_f66f9eb2",
        "filename": "src/go/ast/issues_test.go",
        "patchSetId": 4
      },
      "lineNbr": 110,
      "author": {
        "id": 31647
      },
      "writtenOn": "2023-04-24T14:15:34Z",
      "side": 1,
      "message": "Nit: no need for this to be a multi-line call.",
      "range": {
        "startLine": 109,
        "startChar": 5,
        "endLine": 110,
        "endChar": 21
      },
      "revId": "2a8fd5e407f731347ff41fd7528751e3a31bca37",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e622e441_4aa8179f",
        "filename": "src/go/ast/issues_test.go",
        "patchSetId": 4
      },
      "lineNbr": 110,
      "author": {
        "id": 57259
      },
      "writtenOn": "2023-04-24T15:17:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "15cd5977_f66f9eb2",
      "range": {
        "startLine": 109,
        "startChar": 5,
        "endLine": 110,
        "endChar": 21
      },
      "revId": "2a8fd5e407f731347ff41fd7528751e3a31bca37",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}