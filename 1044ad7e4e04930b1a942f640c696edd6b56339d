{
  "comments": [
    {
      "key": {
        "uuid": "5ca49a01_cfa3b474",
        "filename": "src/sync/atomic/doc.go",
        "patchSetId": 1
      },
      "lineNbr": 41,
      "author": {
        "id": 5615
      },
      "writtenOn": "2019-08-08T02:13:43Z",
      "side": 1,
      "message": "I think that \"mix\" needs to be better-defined here (as concurrent access, right?), or some folks may misinterpret this. This code should be fine:\n\n  var n int64\n  var wg sync.WaitGroup\n  for i :\u003d 0; i \u003c 10; i++ {\n  \tgo func() {\n  \t\tatomic.AddInt64(\u0026n, 1)\n  \t\twg.Done()\n  \t}()\n  }\n  wg.Wait()\n  fmt.Println(n) // \u003c-- non-atomic read is fine",
      "range": {
        "startLine": 41,
        "startChar": 28,
        "endLine": 41,
        "endChar": 31
      },
      "revId": "1044ad7e4e04930b1a942f640c696edd6b56339d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "21c37c93_c7aaeff3",
        "filename": "src/sync/atomic/doc.go",
        "patchSetId": 1
      },
      "lineNbr": 41,
      "author": {
        "id": 21345
      },
      "writtenOn": "2019-08-08T08:58:13Z",
      "side": 1,
      "message": "It\u0027s difficult to describe the behavior of atomic and non-atomic when using other synchronization operations, so we decided to remove this sentence. The behavior not mentioned in the document is not guaranteed. Thank you.",
      "parentUuid": "5ca49a01_cfa3b474",
      "range": {
        "startLine": 41,
        "startChar": 28,
        "endLine": 41,
        "endChar": 31
      },
      "revId": "1044ad7e4e04930b1a942f640c696edd6b56339d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    }
  ]
}