{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "ec1c44d4_586616e0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 33992
      },
      "writtenOn": "2021-04-14T21:12:09Z",
      "side": 1,
      "message": "This is one of my first more \u0027complete\u0027 features for Go, so I\u0027m looking for your input on this PoC eg. if you think of a better way to achieve this.\n\nSome the questions/issues currently\n\n- There is a cyclical dependency between the `math/rand` and `testing` packages.\nI\u0027m thinking there are three solutions, but I\u0027m not sure which would be preferred.\na) use some other method to seed and shuffle the slices. Maybe use runtime.fastrand and a new shuffling function?\nb) //go:linkname the `rand.Seed` and `rand.Shuffle` functions so that they can be used here\nc) move the `math/rand` tests in a `rand_testing` package; this entails duplication of variables and making the tests less readable\n\n- I haven\u0027t used the JSON output very extensively, so I don\u0027t know if it would make sense to introduce a new Action in `test2json` for setting the seed\n\n- Are we okay with `-shuffle\u003don` using the system clock for seeding, or should we use a shorter/more readable seed?\n\n\nLooking forward to your input!\n",
      "revId": "a1128ff928aa8439ead5f7e5d17eb193c47ff961",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1cb3201f_750d4491",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5206
      },
      "writtenOn": "2021-04-14T21:56:21Z",
      "side": 1,
      "message": "Break the cyclical dependency between testing and math/rand by moving the math/rand tests into package rand_test.  The same pattern can be seen in pretty much every package that the testing package imports, such as the flag or os packages.\n\nI don\u0027t think anything different needs to appear in the JSON output.  The JSON output shouldn\u0027t care which order tests are run in.\n\nI think that the system clock is a good random seed.",
      "parentUuid": "ec1c44d4_586616e0",
      "revId": "a1128ff928aa8439ead5f7e5d17eb193c47ff961",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7f46a3cf_7aba705c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5137
      },
      "writtenOn": "2021-04-14T21:57:19Z",
      "side": 1,
      "message": "Thank you for working on this change Paschalis and congrats! I\u0027ve added some comments, please take a look.",
      "revId": "a1128ff928aa8439ead5f7e5d17eb193c47ff961",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "391ca091_b55d02ca",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 33992
      },
      "writtenOn": "2021-04-16T21:06:57Z",
      "side": 1,
      "message": "Thanks a lot for the detailed feedback and encouragement; here\u0027s a new patchset!\n\nI\u0027ve added a comment outlining my thoughts on how -shuffle and -count should interact with each other; let me know what you think.\n\nAlso, I\u0027ve broken the cyclical dependency by moving the math/rand tests in a new rand_test package.\nI now need to figure out the best way to continue testing the unexported `rand.int31n` method.",
      "revId": "a1128ff928aa8439ead5f7e5d17eb193c47ff961",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2dbd55fe_d020b766",
        "filename": "src/cmd/go/internal/test/test.go",
        "patchSetId": 2
      },
      "lineNbr": 490,
      "author": {
        "id": 5206
      },
      "writtenOn": "2021-04-14T22:00:13Z",
      "side": 1,
      "message": "You can omit seed: 0, that is the default anyhow.\n\nI suggest changing the field from \"off\" to \"on\", so that the zero value is the one that does nothing (see discussion at https://golang.org/doc/effective_go#allocation_new).",
      "revId": "a1128ff928aa8439ead5f7e5d17eb193c47ff961",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5fd488ad_81ca3c7c",
        "filename": "src/cmd/go/internal/test/test.go",
        "patchSetId": 2
      },
      "lineNbr": 490,
      "author": {
        "id": 33992
      },
      "writtenOn": "2021-04-16T21:06:57Z",
      "side": 1,
      "message": "Done. I agree with both suggestions. I initially chose \u0027off\u0027 to mimic other flags for readability, but this is better.",
      "parentUuid": "2dbd55fe_d020b766",
      "revId": "a1128ff928aa8439ead5f7e5d17eb193c47ff961",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aec98725_dbed6105",
        "filename": "src/cmd/go/internal/test/testflag.go",
        "patchSetId": 2
      },
      "lineNbr": 214,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-04-15T14:55:28Z",
      "side": 1,
      "message": "Instead of treating the empty string as \"off\", I think we should treat it as an error, and explicitly set the default to \"off\" at registration time.\n\nI don\u0027t think I can reasonably infer a user\u0027s intent from a command line line `go test -shuffle\u003d\u0027\u0027`",
      "range": {
        "startLine": 214,
        "startChar": 4,
        "endLine": 214,
        "endChar": 18
      },
      "revId": "a1128ff928aa8439ead5f7e5d17eb193c47ff961",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "26ed3e71_cfe2c7ad",
        "filename": "src/cmd/go/internal/test/testflag.go",
        "patchSetId": 2
      },
      "lineNbr": 214,
      "author": {
        "id": 33992
      },
      "writtenOn": "2021-04-16T21:06:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "aec98725_dbed6105",
      "range": {
        "startLine": 214,
        "startChar": 4,
        "endLine": 214,
        "endChar": 18
      },
      "revId": "a1128ff928aa8439ead5f7e5d17eb193c47ff961",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "25abe94c_02cb5fcd",
        "filename": "src/cmd/go/internal/test/testflag.go",
        "patchSetId": 2
      },
      "lineNbr": 222,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-04-15T14:55:28Z",
      "side": 1,
      "message": "I think the seeding logic for `-shuffle\u003don` should be moved from cmd/go into the `testing` package proper.\n\nA user may reasonably expect to run `go test -c some/pkg` and then `./pkg.test -test.shuffle\u003don` and get the same behavior as `go test -shuffle\u003don some/pkg`. (Please also update the test to demonstrate what happens for that mode of use.)",
      "range": {
        "startLine": 218,
        "startChar": 0,
        "endLine": 222,
        "endChar": 2
      },
      "revId": "a1128ff928aa8439ead5f7e5d17eb193c47ff961",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5a2f5c59_25478f38",
        "filename": "src/cmd/go/internal/test/testflag.go",
        "patchSetId": 2
      },
      "lineNbr": 222,
      "author": {
        "id": 33992
      },
      "writtenOn": "2021-04-16T21:06:57Z",
      "side": 1,
      "message": "Done; I\u0027ve also added a couple of tests to check that the behavior from the binary is the same.",
      "parentUuid": "25abe94c_02cb5fcd",
      "range": {
        "startLine": 218,
        "startChar": 0,
        "endLine": 222,
        "endChar": 2
      },
      "revId": "a1128ff928aa8439ead5f7e5d17eb193c47ff961",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0e024f44_2c8982ae",
        "filename": "src/cmd/go/internal/test/testflag.go",
        "patchSetId": 2
      },
      "lineNbr": 224,
      "author": {
        "id": 5137
      },
      "writtenOn": "2021-04-14T21:57:19Z",
      "side": 1,
      "message": "seed",
      "range": {
        "startLine": 224,
        "startChar": 1,
        "endLine": 224,
        "endChar": 2
      },
      "revId": "a1128ff928aa8439ead5f7e5d17eb193c47ff961",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "25b7539f_5fb00fc4",
        "filename": "src/cmd/go/internal/test/testflag.go",
        "patchSetId": 2
      },
      "lineNbr": 224,
      "author": {
        "id": 33992
      },
      "writtenOn": "2021-04-16T21:06:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0e024f44_2c8982ae",
      "range": {
        "startLine": 224,
        "startChar": 1,
        "endLine": 224,
        "endChar": 2
      },
      "revId": "a1128ff928aa8439ead5f7e5d17eb193c47ff961",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6a5e9f8f_77f84e3a",
        "filename": "src/cmd/go/internal/test/testflag.go",
        "patchSetId": 2
      },
      "lineNbr": 230,
      "author": {
        "id": 5137
      },
      "writtenOn": "2021-04-14T21:57:19Z",
      "side": 1,
      "message": "Perhaps we should also return the error in here by:\n\n\nreturn fmt.Errorf(\"-shuffle argument must be \u0027on\u0027, \u0027off\u0027, or an int64: %v\", err)",
      "range": {
        "startLine": 230,
        "startChar": 70,
        "endLine": 230,
        "endChar": 72
      },
      "revId": "a1128ff928aa8439ead5f7e5d17eb193c47ff961",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e8396726_c1c2182c",
        "filename": "src/cmd/go/internal/test/testflag.go",
        "patchSetId": 2
      },
      "lineNbr": 230,
      "author": {
        "id": 33992
      },
      "writtenOn": "2021-04-16T21:06:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6a5e9f8f_77f84e3a",
      "range": {
        "startLine": 230,
        "startChar": 70,
        "endLine": 230,
        "endChar": 72
      },
      "revId": "a1128ff928aa8439ead5f7e5d17eb193c47ff961",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7ccbf9b3_dc7eab99",
        "filename": "src/cmd/go/testdata/script/test_shuffle.txt",
        "patchSetId": 2
      },
      "lineNbr": 1,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-04-15T14:55:28Z",
      "side": 1,
      "message": "Please add cases demonstrating the interaction of -shuffle\u003don with -count.\n\nShould there be -count distinct runs of the all of the tests, with each run completing before the next begins and the same shuffled order for each run?\nOr should there be -count distinct runs of the all of the tests, with a different shuffled order each run?\nOr should each test run -count times all together, with the order of the contiguous blocks of per-test runs shuffled?\nOr should there be -count individual runs of each test all shuffled together?",
      "revId": "a1128ff928aa8439ead5f7e5d17eb193c47ff961",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "097d3a28_046b72e9",
        "filename": "src/cmd/go/testdata/script/test_shuffle.txt",
        "patchSetId": 2
      },
      "lineNbr": 1,
      "author": {
        "id": 33992
      },
      "writtenOn": "2021-04-16T21:06:57Z",
      "side": 1,
      "message": "I\u0027ve added some test cases for -count.\n\nMy 2 cents would be that -count should _not_ reshuffle tests, but maintain the initial shuffled order.\n\nAs you said in your first sentence, each run should be independent, start after the previous one has finished, in the same order.\n\nI feel this would make it easier to spot flakiness arising from a specific seed value; otherwise the extra randomness would make it even harder to spot the root cause of the failure.\n\nWhat do you think on that?",
      "parentUuid": "7ccbf9b3_dc7eab99",
      "revId": "a1128ff928aa8439ead5f7e5d17eb193c47ff961",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fc264cc3_4f203487",
        "filename": "src/cmd/go/testdata/script/test_shuffle.txt",
        "patchSetId": 2
      },
      "lineNbr": 1,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-04-28T15:26:56Z",
      "side": 1,
      "message": "That sounds reasonable to me.",
      "parentUuid": "097d3a28_046b72e9",
      "revId": "a1128ff928aa8439ead5f7e5d17eb193c47ff961",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bf9434cc_46dbe276",
        "filename": "src/cmd/go/testdata/script/test_shuffle.txt",
        "patchSetId": 2
      },
      "lineNbr": 2,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-04-15T14:55:28Z",
      "side": 1,
      "message": "Please add `stdout` assertions for the logging of the test seeds.",
      "revId": "a1128ff928aa8439ead5f7e5d17eb193c47ff961",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f6661b27_437a875c",
        "filename": "src/cmd/go/testdata/script/test_shuffle.txt",
        "patchSetId": 2
      },
      "lineNbr": 2,
      "author": {
        "id": 33992
      },
      "writtenOn": "2021-04-16T21:06:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bf9434cc_46dbe276",
      "revId": "a1128ff928aa8439ead5f7e5d17eb193c47ff961",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "feeb62df_c27b02d0",
        "filename": "src/cmd/go/testdata/script/test_shuffle.txt",
        "patchSetId": 2
      },
      "lineNbr": 22,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-04-15T14:55:28Z",
      "side": 1,
      "message": "Please add some comments explaining the expected output here and at 41–46. (Why two occurrences of each test name?)\n\nBetter still, use longer regexps to show as much of the six expected lines as possible.",
      "range": {
        "startLine": 20,
        "startChar": 0,
        "endLine": 22,
        "endChar": 27
      },
      "revId": "a1128ff928aa8439ead5f7e5d17eb193c47ff961",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f9ab1dda_dc1c60e6",
        "filename": "src/cmd/go/testdata/script/test_shuffle.txt",
        "patchSetId": 2
      },
      "lineNbr": 22,
      "author": {
        "id": 33992
      },
      "writtenOn": "2021-04-16T21:06:57Z",
      "side": 1,
      "message": "I wasn\u0027t sure about these tests to be honest, as setting -shuffle\u003don doesn\u0027t have a predictable seed, so we can\u0027t perform the same assertions on the order they\u0027re run in.\n\nThe -count\u003d2 was an easy way to check that for each test there would be a line like \u0027\u003d\u003d\u003d RUN   TestOne\u0027 and a line like \u0027--- PASS: TestOne\u0027. I\u0027ve changed the regexes a little to make this more obvious.\n\nDo you have any better checks in mind for the -shuffle\u003don case?",
      "parentUuid": "feeb62df_c27b02d0",
      "range": {
        "startLine": 20,
        "startChar": 0,
        "endLine": 22,
        "endChar": 27
      },
      "revId": "a1128ff928aa8439ead5f7e5d17eb193c47ff961",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8c6f2cf3_597c0f65",
        "filename": "src/cmd/go/testdata/script/test_shuffle.txt",
        "patchSetId": 2
      },
      "lineNbr": 22,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-04-28T15:26:56Z",
      "side": 1,
      "message": "These tests seem fine.\n\nIf we really want to test -shuffle\u003don as thoroughly as possible, we could write a test that re-execs itself many times with \u0027-test.shuffle\u003don\u0027, parses the output, and verifies that the order of running changes at least once.\n\n(But if you\u0027ve tested the shuffling manually, maybe that sort of test would be overkill given that you also have tests for explicit seeds.)",
      "parentUuid": "f9ab1dda_dc1c60e6",
      "range": {
        "startLine": 20,
        "startChar": 0,
        "endLine": 22,
        "endChar": 27
      },
      "revId": "a1128ff928aa8439ead5f7e5d17eb193c47ff961",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1bb6b9c2_17470f71",
        "filename": "src/testing/testing.go",
        "patchSetId": 2
      },
      "lineNbr": 1458,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-04-15T14:55:28Z",
      "side": 1,
      "message": "This message should more clearly indicate its relationship to the `-shuffle` flag.\n\nPerhaps:\n\n\tfmt.Printf(\"-test.shuffle\u003d%v\", n)",
      "revId": "a1128ff928aa8439ead5f7e5d17eb193c47ff961",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e9a9d97e_2dd02c93",
        "filename": "src/testing/testing.go",
        "patchSetId": 2
      },
      "lineNbr": 1458,
      "author": {
        "id": 33992
      },
      "writtenOn": "2021-04-16T21:06:57Z",
      "side": 1,
      "message": "Good point, done. \nI thought the capital 4-letter word would match \"PASS\", \"FAIL\" etcetera, but this is better for readability; I personally wouldn\u0027t go as far as making it a full sentence.\n\nI\u0027ve used fmt.Println() so this is hidden on success without the -v flag; fmt.Printf doesn\u0027t have this behavior and appears always (both with and without the -v flag on successful runs)",
      "parentUuid": "1bb6b9c2_17470f71",
      "revId": "a1128ff928aa8439ead5f7e5d17eb193c47ff961",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6c2f9af4_fb0e07da",
        "filename": "src/testing/testing.go",
        "patchSetId": 2
      },
      "lineNbr": 1462,
      "author": {
        "id": 5137
      },
      "writtenOn": "2021-04-14T21:57:19Z",
      "side": 1,
      "message": "We need to properly parse -shuffle as you did for it in cmd/* and not ignore this error.\n\nThis code also unfortunately changes the global rand, perhaps make an *Rand by:\n\nseed, err :\u003d strconv.ParseInt(*shuffle, 10, 63)\nif err !\u003d nil {\n     // TODO: Handle the error here\n     m.exitCode \u003d 1\n     return\n}\nrng :\u003d math.New(math.NewSource(seed))\nrng.Shuffle(len(m.tests), func(i, j int) {\n     m.tests[i], m.tests[j] \u003d m.tests[j], m.tests[i]\n})\nrng.Shuffle(len(m.benchmarks), func(i, j int) {\n     m.benchmarks[i], m.benchmarks[j] \u003d m.benchmarks[j], m.benchmarks[i]\n})",
      "range": {
        "startLine": 1456,
        "startChar": 1,
        "endLine": 1462,
        "endChar": 2
      },
      "revId": "a1128ff928aa8439ead5f7e5d17eb193c47ff961",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8d21ad34_5a47aa2a",
        "filename": "src/testing/testing.go",
        "patchSetId": 2
      },
      "lineNbr": 1462,
      "author": {
        "id": 33992
      },
      "writtenOn": "2021-04-16T21:06:57Z",
      "side": 1,
      "message": "Done. If it fails to parse, we set the exit code to 2, as is the case with erroneous \u0027parallel\u0027 flag.\n\nThanks for letting me know about the global rand, we\u0027re now creating a new source and also moved the seeding logic when -shuffle\u003don in here.",
      "parentUuid": "6c2f9af4_fb0e07da",
      "range": {
        "startLine": 1456,
        "startChar": 1,
        "endLine": 1462,
        "endChar": 2
      },
      "revId": "a1128ff928aa8439ead5f7e5d17eb193c47ff961",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}