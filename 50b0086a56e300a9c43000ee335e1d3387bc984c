{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "22c51ca9_719c170d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-05-17T15:43:14Z",
      "side": 1,
      "message": "SlowBots beginning. Status page: https://farmer.golang.org/try?commit\u003d50b0086a\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "50b0086a56e300a9c43000ee335e1d3387bc984c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "abc376c1_a9be8bcb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-05-17T15:55:04Z",
      "side": 1,
      "message": "SlowBots are happy.\n\nSlowBot builds that ran:\n* linux-amd64-longtest\n",
      "parentUuid": "22c51ca9_719c170d",
      "tag": "autogenerated:trybots~happy",
      "revId": "50b0086a56e300a9c43000ee335e1d3387bc984c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0be07b32_ba4ed1bd",
        "filename": "src/archive/zip/zip_test.go",
        "patchSetId": 4
      },
      "lineNbr": 511,
      "author": {
        "id": 6365
      },
      "writtenOn": "2023-05-18T16:17:00Z",
      "side": 1,
      "message": "If the test is just slow, does it pass with a longer `-timeout` setting? (The default is 10m, but I think `go tool dist test` might drop it down to 3m unless `GO_TEST_TIMEOUT_SCALE` says otherwise.)",
      "range": {
        "startLine": 511,
        "startChar": 37,
        "endLine": 511,
        "endChar": 45
      },
      "revId": "50b0086a56e300a9c43000ee335e1d3387bc984c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "46b254c3_7d673e9b",
        "filename": "src/archive/zip/zip_test.go",
        "patchSetId": 4
      },
      "lineNbr": 511,
      "author": {
        "id": 14020
      },
      "writtenOn": "2023-05-18T18:58:11Z",
      "side": 1,
      "message": "Looks like it does pass with a 16m timeout. On my machine (which is fairly speedy):\n\n```\n$ go test -count\u003d1 -run\u003dTestZip64LargeDirectory archive/zip\nok  \tarchive/zip\t26.149s\nthanm@cetina:/ssd2/go/src$ go test -cover -count\u003d1 -run\u003dTestZip64LargeDirectory archive/zip\nok  \tarchive/zip\t63.662s\tcoverage: 23.3% of statements\n$ go test  -coverpkg\u003dall -count\u003d1 -run\u003dTestZip64LargeDirectory archive/zip\nok  \tarchive/zip\t411.351s\tcoverage: 23.3% of statements in all\n$ go test -timeout\u003d60m -covermode\u003datomic -coverpkg\u003dall -count\u003d1 -run\u003dTestZip64LargeDirectory archive/zip\nok  \tarchive/zip\t978.111s\tcoverage: 23.3% of statements in all\n$\n\n```\n\nso seems likely this is the issue. Perhaps this CL is not the right way to go after all, I can try to attack the problem by increasing GO_TEST_TIMEOUT_SCALE in \"dist test\" if coverage is in effect. Right now I\u0027m using 2x in http://go.dev/cl/395897, sounds like maybe 10x or 20x might be better.\n\nThanks.",
      "parentUuid": "0be07b32_ba4ed1bd",
      "range": {
        "startLine": 511,
        "startChar": 37,
        "endLine": 511,
        "endChar": 45
      },
      "revId": "50b0086a56e300a9c43000ee335e1d3387bc984c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "88a881b1_31dba449",
        "filename": "src/archive/zip/zip_test.go",
        "patchSetId": 4
      },
      "lineNbr": 511,
      "author": {
        "id": 6365
      },
      "writtenOn": "2023-09-14T18:16:04Z",
      "side": 1,
      "message": "I would expect any kind of continuous coverage collection to either only run in `-short` mode (which already skips this test) or to use a large `GO_TEST_TIMEOUT_SCALE` (such as for overnight runs).\n\nIt is curious that this seems to have such a large penalty in coverage mode, though: on the `linux-amd64-longtest-race` builder it still only takes ~2m.\n\nMaybe there is something we could do to reduce the overhead of `-covemode\u003datomic`? (For example, if it is due to cache contention for atomic stores, perhaps we could first load the “covered” bit and only update the counter if it is not already marked as covered.)",
      "parentUuid": "46b254c3_7d673e9b",
      "range": {
        "startLine": 511,
        "startChar": 37,
        "endLine": 511,
        "endChar": 45
      },
      "revId": "50b0086a56e300a9c43000ee335e1d3387bc984c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}