{
  "comments": [
    {
      "key": {
        "uuid": "796b8031_c24ae775",
        "filename": "src/cmd/cgo/out.go",
        "patchSetId": 1
      },
      "lineNbr": 473,
      "author": {
        "id": 5206
      },
      "writtenOn": "2015-06-08T20:47:17Z",
      "side": 1,
      "message": "A technique I used in SWIG is, essentially,\n    if cgoAlwaysFalse {\n        _Cgo_use(unsafe.pointer(p%d))\n    }\nThe compiler can\u0027t prove that cgoAlwaysFalse (use go:linkname to define in runtime or somewhere) is never set to true, so it must assume the pointer always escapes, but the function is never actually called.",
      "revId": "35b746d04e71fd9c57ea4bde4d11720cc4461cdc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "59c15c6b_634750ce",
        "filename": "src/cmd/cgo/out.go",
        "patchSetId": 1
      },
      "lineNbr": 482,
      "author": {
        "id": 8393
      },
      "writtenOn": "2015-06-08T20:02:21Z",
      "side": 1,
      "message": "is this really sufficient? there aren\u0027t any other ast types that need to be forced to the heap? i\u0027m somewhat of a noob here, but does this catch things that are \"unsafe.Pointer\" types? or values that are type aliases from other pointer values, or slices or closures or other things?\n\nfor my patch we applied, i ended up annotating cgoType to catch all sorts of types, instead of ones that were just StarExpr",
      "revId": "35b746d04e71fd9c57ea4bde4d11720cc4461cdc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "59c15c6b_234158b7",
        "filename": "src/cmd/cgo/out.go",
        "patchSetId": 1
      },
      "lineNbr": 482,
      "author": {
        "id": 8393
      },
      "writtenOn": "2015-06-08T20:02:59Z",
      "side": 1,
      "message": "(for reference, here was my possibly overly energetic attempt: https://gist.github.com/jtolds/83a8cf059d496586709f)",
      "parentUuid": "59c15c6b_634750ce",
      "revId": "35b746d04e71fd9c57ea4bde4d11720cc4461cdc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "796b8031_e29e036b",
        "filename": "src/cmd/cgo/out.go",
        "patchSetId": 1
      },
      "lineNbr": 482,
      "author": {
        "id": 5206
      },
      "writtenOn": "2015-06-08T20:47:17Z",
      "side": 1,
      "message": "I think we can test on Go types, but what struct/array/map/slice/string/unsafe.Pointer ?",
      "range": {
        "startLine": 482,
        "startChar": 26,
        "endLine": 482,
        "endChar": 27
      },
      "revId": "35b746d04e71fd9c57ea4bde4d11720cc4461cdc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}