{
  "comments": [
    {
      "key": {
        "uuid": "78eecdee_368fec71",
        "filename": "src/cmd/go/go_test.go",
        "patchSetId": 4
      },
      "lineNbr": 4305,
      "author": {
        "id": 8955
      },
      "writtenOn": "2017-09-17T00:56:39Z",
      "side": 1,
      "message": "These changes are a bit hairy.\nBasically, launch() now starts each interval\u0027s n at 1. Previously it would start at 100. For slow operations starting at 100 would be fine because run1 would get to the benchtime limit and launch was a noop and it would use the results from run1 as the final result. For the default case of benchsplit\u003d\u003d1, slow operations will have the old behavior as you can see in the new if check at the top of launch. The simplest solution brenchsplit\u003e1 and non-slow queries was to just start each interval at 1.",
      "range": {
        "startLine": 4305,
        "startChar": 31,
        "endLine": 4305,
        "endChar": 32
      },
      "revId": "9e63d8f65a338361dd9c91f68dec78b2ef03b9d8",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "12e8ea86_78683d0f",
        "filename": "src/cmd/go/go_test.go",
        "patchSetId": 4
      },
      "lineNbr": 4305,
      "author": {
        "id": 6365
      },
      "writtenOn": "2017-10-13T22:21:16Z",
      "side": 1,
      "message": "\u003e These changes are a bit hairy.\n\u003e Basically, launch() now starts each interval\u0027s n at 1.\n\nThat seems odd — it makes sense to ramp up the first interval gradually, but after that we should be able to predict the number of iterations for each subsequent interval more-or-less precisely from the running time for the previous ones.\n\n(Even if the previous intervals were not particularly uniform, we can at least get a conservative bound based on the slowest interval seen so far.)\n\nFor this particular sequence, it looks like the ramp-up time inflates the overall running time by around 5%, so if the number of splits is large the extra delay could be noticeable.",
      "parentUuid": "78eecdee_368fec71",
      "range": {
        "startLine": 4305,
        "startChar": 31,
        "endLine": 4305,
        "endChar": 32
      },
      "revId": "9e63d8f65a338361dd9c91f68dec78b2ef03b9d8",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "82a85e56_257fbea3",
        "filename": "src/cmd/go/go_test.go",
        "patchSetId": 4
      },
      "lineNbr": 4305,
      "author": {
        "id": 8955
      },
      "writtenOn": "2017-10-23T03:18:36Z",
      "side": 1,
      "message": "Done\n\nUsing cumulative ops and time was being thwarted by prevN * 100 limiting predictN. Now, after the first interval, prevN is set to the lowest of all the second to last n\u0027s from previous intervals. This skips unnecessary ramp up after 1st interval.",
      "parentUuid": "12e8ea86_78683d0f",
      "range": {
        "startLine": 4305,
        "startChar": 31,
        "endLine": 4305,
        "endChar": 32
      },
      "revId": "9e63d8f65a338361dd9c91f68dec78b2ef03b9d8",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1f3487e5_fcea3e24",
        "filename": "src/testing/benchmark.go",
        "patchSetId": 4
      },
      "lineNbr": 290,
      "author": {
        "id": 6365
      },
      "writtenOn": "2017-10-13T22:21:16Z",
      "side": 1,
      "message": "Can we reject invalid settings instead of defaulting them to 1?\n\nI could imagine at some point wanting \"-benchsplit\u003d-1\" to mean something like \"repeat the benchmark for benchtime forever\".\n\n(That also somewhat argues for making the flag “benchiters” — a multiplier on “benchtime” — rather than a “benchsplit” divider.)",
      "range": {
        "startLine": 287,
        "startChar": 0,
        "endLine": 290,
        "endChar": 2
      },
      "revId": "9e63d8f65a338361dd9c91f68dec78b2ef03b9d8",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "06ec34d6_d10759e1",
        "filename": "src/testing/benchmark.go",
        "patchSetId": 4
      },
      "lineNbr": 290,
      "author": {
        "id": 8955
      },
      "writtenOn": "2017-10-23T03:18:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1f3487e5_fcea3e24",
      "range": {
        "startLine": 287,
        "startChar": 0,
        "endLine": 290,
        "endChar": 2
      },
      "revId": "9e63d8f65a338361dd9c91f68dec78b2ef03b9d8",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fcf99fc9_385772d7",
        "filename": "src/testing/benchmark.go",
        "patchSetId": 4
      },
      "lineNbr": 297,
      "author": {
        "id": 6365
      },
      "writtenOn": "2017-10-13T22:21:16Z",
      "side": 1,
      "message": "Why do we need a special-case here?\n\n(Shouldn\u0027t the loop below cover it anyway? If not, a more explicit comment would be helpful.)",
      "range": {
        "startLine": 293,
        "startChar": 0,
        "endLine": 297,
        "endChar": 2
      },
      "revId": "9e63d8f65a338361dd9c91f68dec78b2ef03b9d8",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a2216027_737d4ffa",
        "filename": "src/testing/benchmark.go",
        "patchSetId": 4
      },
      "lineNbr": 297,
      "author": {
        "id": 8955
      },
      "writtenOn": "2017-10-23T03:18:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fcf99fc9_385772d7",
      "range": {
        "startLine": 293,
        "startChar": 0,
        "endLine": 297,
        "endChar": 2
      },
      "revId": "9e63d8f65a338361dd9c91f68dec78b2ef03b9d8",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "89f803b1_68999048",
        "filename": "src/testing/benchmark.go",
        "patchSetId": 4
      },
      "lineNbr": 314,
      "author": {
        "id": 6365
      },
      "writtenOn": "2017-10-13T22:21:16Z",
      "side": 1,
      "message": "n is the result of predictN, which itself caps the result to 2e9. Can we do this limiting in one place instead of two?  (Perhaps have predictN return (int, bool), where the boolean indicates whether n can be increased further?)",
      "range": {
        "startLine": 314,
        "startChar": 39,
        "endLine": 314,
        "endChar": 47
      },
      "revId": "9e63d8f65a338361dd9c91f68dec78b2ef03b9d8",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1d4b748f_6e87ccd8",
        "filename": "src/testing/benchmark.go",
        "patchSetId": 4
      },
      "lineNbr": 314,
      "author": {
        "id": 8955
      },
      "writtenOn": "2017-10-23T03:18:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "89f803b1_68999048",
      "range": {
        "startLine": 314,
        "startChar": 39,
        "endLine": 314,
        "endChar": 47
      },
      "revId": "9e63d8f65a338361dd9c91f68dec78b2ef03b9d8",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1b0ceabb_1eeaa457",
        "filename": "src/testing/benchmark.go",
        "patchSetId": 4
      },
      "lineNbr": 532,
      "author": {
        "id": 6365
      },
      "writtenOn": "2017-10-13T22:21:16Z",
      "side": 1,
      "message": "I\u0027m a little worried that the output from this block doesn\u0027t seem to have any corresponding new tests.\n\nAt the very least, the change description ought to have an example of the new output, but a regression test would be even better if it\u0027s feasible.",
      "range": {
        "startLine": 511,
        "startChar": 0,
        "endLine": 532,
        "endChar": 0
      },
      "revId": "9e63d8f65a338361dd9c91f68dec78b2ef03b9d8",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1e052fc7_1da20f00",
        "filename": "src/testing/benchmark.go",
        "patchSetId": 4
      },
      "lineNbr": 532,
      "author": {
        "id": 8955
      },
      "writtenOn": "2017-10-23T03:18:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1b0ceabb_1eeaa457",
      "range": {
        "startLine": 511,
        "startChar": 0,
        "endLine": 532,
        "endChar": 0
      },
      "revId": "9e63d8f65a338361dd9c91f68dec78b2ef03b9d8",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}