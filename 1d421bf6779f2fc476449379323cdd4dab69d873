{
  "comments": [
    {
      "key": {
        "uuid": "388a1111_82f5f485",
        "filename": "src/cmd/link/internal/ld/deadcode2.go",
        "patchSetId": 7
      },
      "lineNbr": 153,
      "author": {
        "id": 14020
      },
      "writtenOn": "2019-10-25T15:23:37Z",
      "side": 1,
      "message": "This must have been fun to track down :-(.\n\nLooking at the old deadcode, I see:\n\n\t\td.mark(s.Gotype, s)\n\t\td.mark(s.Sub, s)\n\t\td.mark(s.Outer, s)\n\nDo we need to do anything with s.Gotype or s.Sub here in new deadcode?",
      "revId": "1d421bf6779f2fc476449379323cdd4dab69d873",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "df634893_1286b663",
        "filename": "src/cmd/link/internal/ld/deadcode2.go",
        "patchSetId": 7
      },
      "lineNbr": 153,
      "author": {
        "id": 13315
      },
      "writtenOn": "2019-10-25T17:23:10Z",
      "side": 1,
      "message": "Gotype is an Aux symbol, so it should be tracked already.\n\nI haven\u0027t figured out what exactly s.Sub is. Maybe we need that.",
      "parentUuid": "388a1111_82f5f485",
      "revId": "1d421bf6779f2fc476449379323cdd4dab69d873",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1c5cc2b1_1099ee2b",
        "filename": "src/cmd/link/internal/ld/lib.go",
        "patchSetId": 7
      },
      "lineNbr": 2390,
      "author": {
        "id": 14020
      },
      "writtenOn": "2019-10-25T15:23:37Z",
      "side": 1,
      "message": "Why? Just curious.",
      "revId": "1d421bf6779f2fc476449379323cdd4dab69d873",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "deebf30a_a6dfa206",
        "filename": "src/cmd/link/internal/ld/lib.go",
        "patchSetId": 7
      },
      "lineNbr": 2390,
      "author": {
        "id": 13315
      },
      "writtenOn": "2019-10-25T17:23:10Z",
      "side": 1,
      "message": "I\u0027m actually not sure. Also I don\u0027t know why it wasn\u0027t this way already...",
      "parentUuid": "1c5cc2b1_1099ee2b",
      "revId": "1d421bf6779f2fc476449379323cdd4dab69d873",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "141b8cf0_4e3623e0",
        "filename": "src/cmd/link/internal/loadelf/ldelf.go",
        "patchSetId": 7
      },
      "lineNbr": 459,
      "author": {
        "id": 14020
      },
      "writtenOn": "2019-10-25T15:23:37Z",
      "side": 1,
      "message": "Why? What\u0027s the bad thing that happens if there are multiple overwrites to a symbol?\n\nObviously Go is not Fortran, but when linking a Fortran program you can have an arbitrary number of overwrites for something like a common block symbol.",
      "range": {
        "startLine": 458,
        "startChar": 67,
        "endLine": 459,
        "endChar": 48
      },
      "revId": "1d421bf6779f2fc476449379323cdd4dab69d873",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "05e5d1ee_d6bb013d",
        "filename": "src/cmd/link/internal/loadelf/ldelf.go",
        "patchSetId": 7
      },
      "lineNbr": 459,
      "author": {
        "id": 13315
      },
      "writtenOn": "2019-10-25T17:23:10Z",
      "side": 1,
      "message": "I think what happens here is: if it is a dupok symbol, it will be dedup\u0027d but not overwrite (it doesn\u0027t matter which one we choose). If it is not, it can only be that a definition overwrites a contentless declaration. If we see the second definition, it will be duplicated definition.",
      "parentUuid": "141b8cf0_4e3623e0",
      "range": {
        "startLine": 458,
        "startChar": 67,
        "endLine": 459,
        "endChar": 48
      },
      "revId": "1d421bf6779f2fc476449379323cdd4dab69d873",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "da73fda5_e3b08e7f",
        "filename": "src/cmd/link/internal/loadelf/ldelf.go",
        "patchSetId": 7
      },
      "lineNbr": 459,
      "author": {
        "id": 14020
      },
      "writtenOn": "2019-10-25T18:10:24Z",
      "side": 1,
      "message": "OK, that makes sense. Thanks.",
      "parentUuid": "05e5d1ee_d6bb013d",
      "range": {
        "startLine": 458,
        "startChar": 67,
        "endLine": 459,
        "endChar": 48
      },
      "revId": "1d421bf6779f2fc476449379323cdd4dab69d873",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5b789e88_88bf4555",
        "filename": "src/cmd/link/internal/loadelf/ldelf.go",
        "patchSetId": 7
      },
      "lineNbr": 471,
      "author": {
        "id": 13315
      },
      "writtenOn": "2019-10-25T17:23:10Z",
      "side": 1,
      "message": "I think we also need to check dupok, somewhere.",
      "revId": "1d421bf6779f2fc476449379323cdd4dab69d873",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4b612ef2_bc26acaf",
        "filename": "src/cmd/link/internal/loadelf/ldelf.go",
        "patchSetId": 7
      },
      "lineNbr": 491,
      "author": {
        "id": 14020
      },
      "writtenOn": "2019-10-25T15:23:37Z",
      "side": 1,
      "message": "debug code",
      "revId": "1d421bf6779f2fc476449379323cdd4dab69d873",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "db61fb21_4cb64743",
        "filename": "src/cmd/link/internal/loadelf/ldelf.go",
        "patchSetId": 7
      },
      "lineNbr": 517,
      "author": {
        "id": 13315
      },
      "writtenOn": "2019-10-25T17:23:10Z",
      "side": 1,
      "message": "Maybe \"newSym\" and \"lookup\"? symNew seems less natural.",
      "range": {
        "startLine": 517,
        "startChar": 47,
        "endLine": 517,
        "endChar": 64
      },
      "revId": "1d421bf6779f2fc476449379323cdd4dab69d873",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "117a38fc_33356621",
        "filename": "src/cmd/link/internal/loader/loader.go",
        "patchSetId": 7
      },
      "lineNbr": 123,
      "author": {
        "id": 14020
      },
      "writtenOn": "2019-10-25T15:23:37Z",
      "side": 1,
      "message": "typo canOverwrite",
      "range": {
        "startLine": 123,
        "startChar": 3,
        "endLine": 123,
        "endChar": 13
      },
      "revId": "1d421bf6779f2fc476449379323cdd4dab69d873",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8f3cc90f_92930aa5",
        "filename": "src/cmd/link/internal/loader/loader.go",
        "patchSetId": 7
      },
      "lineNbr": 123,
      "author": {
        "id": 13315
      },
      "writtenOn": "2019-10-25T17:23:10Z",
      "side": 1,
      "message": "This function doesn\u0027t check the data size.\n\nAlso, wonder just name it IsData or something like? Maybe even move to sym package?",
      "range": {
        "startLine": 123,
        "startChar": 46,
        "endLine": 123,
        "endChar": 59
      },
      "revId": "1d421bf6779f2fc476449379323cdd4dab69d873",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4fdc55d0_77ac3bc4",
        "filename": "src/cmd/link/internal/loader/loader.go",
        "patchSetId": 7
      },
      "lineNbr": 195,
      "author": {
        "id": 14020
      },
      "writtenOn": "2019-10-25T15:23:37Z",
      "side": 1,
      "message": "typo overwritten",
      "range": {
        "startLine": 195,
        "startChar": 76,
        "endLine": 195,
        "endChar": 86
      },
      "revId": "1d421bf6779f2fc476449379323cdd4dab69d873",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3a05936b_dd893b67",
        "filename": "src/cmd/link/internal/loader/loader.go",
        "patchSetId": 7
      },
      "lineNbr": 196,
      "author": {
        "id": 13315
      },
      "writtenOn": "2019-10-25T17:23:10Z",
      "side": 1,
      "message": "I feel the logic of this function is hard to follow, especially on the allowOverwrite parameter and the second result. Why do we care whether a symbol is already overwritten? If a symbol A is overwritten by a symbol B, symsByName should return B, not A. I think there shouldn\u0027t be any difference between this situation and a situation that A never exists and we only added B alone.\n\nAnd if there are multiple overwrites, why it is not just an error?",
      "revId": "1d421bf6779f2fc476449379323cdd4dab69d873",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bdf90488_3c2b17cc",
        "filename": "src/cmd/link/internal/loader/loader.go",
        "patchSetId": 7
      },
      "lineNbr": 198,
      "author": {
        "id": 13315
      },
      "writtenOn": "2019-10-25T17:23:10Z",
      "side": 1,
      "message": "This isn\u0027t that we are actually going to overwrite it. It just means the symbol exists. We\u0027ll overwrite or not depending on other conditions. If you don\u0027t like \"ok\", maybe \"existed\"?",
      "range": {
        "startLine": 198,
        "startChar": 7,
        "endLine": 198,
        "endChar": 20
      },
      "revId": "1d421bf6779f2fc476449379323cdd4dab69d873",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c052bfc8_c76eab83",
        "filename": "src/cmd/link/internal/loader/loader.go",
        "patchSetId": 7
      },
      "lineNbr": 454,
      "author": {
        "id": 13315
      },
      "writtenOn": "2019-10-25T17:23:10Z",
      "side": 1,
      "message": "Maybe OuterSym? We use Sym in other places.",
      "range": {
        "startLine": 454,
        "startChar": 17,
        "endLine": 454,
        "endChar": 28
      },
      "revId": "1d421bf6779f2fc476449379323cdd4dab69d873",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4ecf8ede_6d24f2c3",
        "filename": "src/cmd/link/internal/loader/loader.go",
        "patchSetId": 7
      },
      "lineNbr": 455,
      "author": {
        "id": 13315
      },
      "writtenOn": "2019-10-25T17:23:10Z",
      "side": 1,
      "message": "Use a variable for this?",
      "range": {
        "startLine": 455,
        "startChar": 24,
        "endLine": 455,
        "endChar": 39
      },
      "revId": "1d421bf6779f2fc476449379323cdd4dab69d873",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d8980817_da06225e",
        "filename": "src/cmd/link/internal/loader/loader.go",
        "patchSetId": 7
      },
      "lineNbr": 651,
      "author": {
        "id": 13315
      },
      "writtenOn": "2019-10-25T17:23:10Z",
      "side": 1,
      "message": "\", _\" is not necessary.",
      "range": {
        "startLine": 651,
        "startChar": 9,
        "endLine": 651,
        "endChar": 12
      },
      "revId": "1d421bf6779f2fc476449379323cdd4dab69d873",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    }
  ]
}