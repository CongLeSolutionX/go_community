{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "c6aa4dc6_00bb5abb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2024-02-26T17:48:16Z",
      "side": 1,
      "message": "I spotted some possible problems.\n\nThese findings are based on simple heuristics. If a finding appears wrong, briefly reply here saying so. Otherwise, please address any problems and update the GitHub PR. When complete, mark this comment as \u0027Done\u0027 and click the [blue \u0027Reply\u0027 button](https://go.dev/wiki/GerritBot#i-left-a-reply-to-a-comment-in-gerrit-but-no-one-but-me-can-see-it) above.\n\nPossible problems detected:\n  1. Lines in the commit message should be wrapped at ~76 characters unless needed for things like URLs or tables. You have a 107 character line.\n  2. Are you using markdown? Markdown should not be used to augment text in the commit message.\n\nThe commit title and commit message body come from the GitHub PR title and description, and must be edited in the GitHub web interface (not via git). For instructions, see [here](https://go.dev/wiki/GerritBot/#how-does-gerritbot-determine-the-final-commit-message). For guidelines on commit messages for the Go project, see [here](https://go.dev/doc/contribute#commit_messages).\n\n\n(In general for Gerrit code reviews, the change author is expected to [log in to Gerrit](https://go-review.googlesource.com/login/) with a Gmail or other Google account and then close out each piece of feedback by marking it as \u0027Done\u0027 if implemented as suggested or otherwise reply to each review comment. See the [Review](https://go.dev/doc/contribute#review) section of the Contributing Guide for details.)",
      "revId": "41551c470cb10330eecef31d475e4b10d3770503",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c95e66a3_a2c280e8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5206
      },
      "writtenOn": "2024-02-26T17:58:16Z",
      "side": 1,
      "message": "The existing comment is trying to say that if there are multiple fields with names that differ only by case, then encoding/json prefers to match a field with the exact case, and if there isn\u0027t one, will choose a field with a different case.  You are describing a different scenario, with a single field.  There may be something to change in the documentation, but I don\u0027t think this is the right change.",
      "revId": "41551c470cb10330eecef31d475e4b10d3770503",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b6dedca5_c7cec4b5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 3306309
      },
      "writtenOn": "2024-02-26T22:11:19Z",
      "side": 1,
      "message": "I\u0027m not sure I fully understand, so let me check. Considering an adjustment to something like https://go.dev/play/p/TBSPQ28v6EX where the \u0027Example\u0027 struct gets two fields that differ only by case - say \u0027NAME\u0027 and \u0027name\u0027 - I read your explanation as saying that I should expect parsing a string like `{\"Name\": \"Name\", \"name\": \"name\", \"NAME\": \"NAME\"}` to fill both fields in question?\n\nMy impression is that this is also not the case here, and that in the last portion illustrated in the linked code we should expect unmarshalling of `{\"NAME\": \"A\", \"name\": \"b\"}` to leave the struct as something like `{b A}` instead of `{b 2}`?\n\nI\u0027m not sure if my understanding is correct here, but if it is this would lead me to the impression that the comment would be clearly wrong as it talks about behavior that is clearly missing?\n\nIf I misunderstand could you aid me with an example where the actual behavior described by this comment can be seen?\n\nCurrently it strikes me as more likely that the \u0027preferring\u0027 in the comment would indeed already apply to a single field.",
      "parentUuid": "c95e66a3_a2c280e8",
      "revId": "41551c470cb10330eecef31d475e4b10d3770503",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8bdbf627_3687076d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 3306309
      },
      "writtenOn": "2024-02-26T22:11:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c6aa4dc6_00bb5abb",
      "revId": "41551c470cb10330eecef31d475e4b10d3770503",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "47b45870_d029446d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 8495
      },
      "writtenOn": "2024-02-27T00:06:56Z",
      "side": 1,
      "message": "The example code is flawed since \"name\" is an unexported field and ignored by the \"encoding/json\" package.",
      "parentUuid": "b6dedca5_c7cec4b5",
      "revId": "41551c470cb10330eecef31d475e4b10d3770503",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ec9e7ec5_713a1008",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 3306309
      },
      "writtenOn": "2024-02-29T15:47:13Z",
      "side": 1,
      "message": "Ah I see. Thanks for the pointer, this way it all makes more sense.\nI\u0027ve adjusted the suggested comment change to try and better reflect what\u0027s happening.",
      "parentUuid": "47b45870_d029446d",
      "revId": "41551c470cb10330eecef31d475e4b10d3770503",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}