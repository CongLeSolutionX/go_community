{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "1af6a45b_de95ac44",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 13,
      "author": {
        "id": 6320
      },
      "writtenOn": "2023-11-08T14:50:13Z",
      "side": 1,
      "message": "Just curious as to why you chose to do it this way, instead of using rules or keeping the argument type.",
      "revId": "7ae46de3c8d816252296143f386d05bd98381030",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "808918a4_cf6d8edc",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 13,
      "author": {
        "id": 36863
      },
      "writtenOn": "2023-11-08T15:52:59Z",
      "side": 1,
      "message": "It would require splitting C_UCON into two distinct classes, C_U3216 and C_S3216.\n\nI think the added complexity is not worth the limited benefit. I am hoping to cleanup the matching classes, we have many which add little or no value.",
      "parentUuid": "1af6a45b_de95ac44",
      "revId": "7ae46de3c8d816252296143f386d05bd98381030",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3b9998bc_a592ce2f",
        "filename": "src/cmd/internal/obj/ppc64/obj9.go",
        "patchSetId": 4
      },
      "lineNbr": 121,
      "author": {
        "id": 6320
      },
      "writtenOn": "2023-11-08T14:50:13Z",
      "side": 1,
      "message": "Isn\u0027t there a problem with this if the sign bit is set since the ANDIS sign extends it?",
      "revId": "7ae46de3c8d816252296143f386d05bd98381030",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b43464a3_25f105e7",
        "filename": "src/cmd/internal/obj/ppc64/obj9.go",
        "patchSetId": 4
      },
      "lineNbr": 121,
      "author": {
        "id": 36863
      },
      "writtenOn": "2023-11-08T15:47:20Z",
      "side": 1,
      "message": "MOVW should only work with signed 32 bit values (also arguably, the upper 32 bits are undefined). That isn\u0027t enforced today. Something like `MOVW $0x80000000, Rx` is arguably invalid, but nothing enforces that.\n\nShould we enforce the constant is an int32, or should we let the behavior slide? The compiler never generates constants with MOVW, so only handwritten asm would run into this.",
      "parentUuid": "3b9998bc_a592ce2f",
      "revId": "7ae46de3c8d816252296143f386d05bd98381030",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dd4cdcfb_7e0090d4",
        "filename": "src/cmd/internal/obj/ppc64/obj9.go",
        "patchSetId": 4
      },
      "lineNbr": 121,
      "author": {
        "id": 6320
      },
      "writtenOn": "2023-11-08T16:12:27Z",
      "side": 1,
      "message": "I was thinking of MOVWZ not MOVW. So this is OK.",
      "parentUuid": "b43464a3_25f105e7",
      "revId": "7ae46de3c8d816252296143f386d05bd98381030",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}