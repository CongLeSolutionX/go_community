{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "554fb3a6_5c957eea",
        "filename": "src/cmd/dist/buildtool.go",
        "patchSetId": 6
      },
      "lineNbr": 110,
      "author": {
        "id": 5056
      },
      "writtenOn": "2022-10-25T16:20:09Z",
      "side": 0,
      "message": "The comment changes in this CL are fine, but this code change is not. \nWe are going to keep looking for the bootstrap Go toolchain in $HOME/go1.4\nbecause that path is hard-coded in too many places that build Go.",
      "revId": "8cb350d69a1b0765c1c81301583d6fd99fb9d74b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1596daea_f88d43b9",
        "filename": "src/cmd/dist/buildtool.go",
        "patchSetId": 6
      },
      "lineNbr": 110,
      "author": {
        "id": 16006
      },
      "writtenOn": "2022-11-21T16:02:36Z",
      "side": 0,
      "message": "reverted.",
      "parentUuid": "554fb3a6_5c957eea",
      "revId": "8cb350d69a1b0765c1c81301583d6fd99fb9d74b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "548736ef_ef3275a4",
        "filename": "src/cmd/dist/test.go",
        "patchSetId": 6
      },
      "lineNbr": 1642,
      "author": {
        "id": 6005
      },
      "writtenOn": "2022-11-17T23:00:50Z",
      "side": 0,
      "message": "Can this change be simplified by using the fs.DirEntry.Type method (https://pkg.go.dev/io/fs#DirEntry.Type), i.e., something that\u0027s very close to the current code:\n\n```\n if err \u003d\u003d nil {\n-\tmode :\u003d info.Mode()\n+\tmode :\u003d d.Type()\n \tif mode\u00260222 !\u003d 0 \u0026\u0026 (mode.IsDir() || mode.IsRegular()) {\n \t\tdirs \u003d append(dirs, pathMode{path, mode})\n \t}\n }\n```\n\nOr does that not work because its missing permission bits?\n\nIf in this case it\u0027s necessary to do an Lstat on each DirEntry anyway, is there still benefit to move to filepath.WalkDir compared the existing filepath.Walk that does that automatically?",
      "revId": "8cb350d69a1b0765c1c81301583d6fd99fb9d74b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "beca1909_469e9f3f",
        "filename": "src/cmd/dist/test.go",
        "patchSetId": 6
      },
      "lineNbr": 1642,
      "author": {
        "id": 16006
      },
      "writtenOn": "2022-11-21T16:02:36Z",
      "side": 0,
      "message": "used d.Type(). Thanks. Test still pass.",
      "parentUuid": "548736ef_ef3275a4",
      "revId": "8cb350d69a1b0765c1c81301583d6fd99fb9d74b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0c25af65_49964af2",
        "filename": "src/cmd/dist/test.go",
        "patchSetId": 6
      },
      "lineNbr": 1642,
      "author": {
        "id": 6005
      },
      "writtenOn": "2022-11-21T16:36:01Z",
      "side": 0,
      "message": "DirEntry.Type does seem to be missing permissions though, as checked via a small program (https://go.dev/play/p/jzbq_rdI4B7). So if you\u0027re switching to WalkDir, it is necessary to use DirEntry.Info.Mode for mode\u00260222 to continue to work as before. Sorry for my misleading comment.\n\n(This test helper exists to make GOROOT unwritable on some builders to help catch problems, I\u0027m not sure if it has any test coverage itself.)",
      "parentUuid": "beca1909_469e9f3f",
      "revId": "8cb350d69a1b0765c1c81301583d6fd99fb9d74b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}