{
  "comments": [
    {
      "key": {
        "uuid": "da65a9da_c8697ed2",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 26817
      },
      "writtenOn": "2018-07-23T21:25:12Z",
      "side": 1,
      "message": "Are there any functions/callsites that are no longer inlined?",
      "revId": "d75af141de904b5224eddbb7aed6fe7090055ada",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "91226642_b19f4975",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 5200
      },
      "writtenOn": "2018-07-23T21:37:09Z",
      "side": 1,
      "message": "Sure, lots of them.\n\ncmd/internal/obj/x86/asm6.go:4159:12: didn\u0027t inline (*AsmBuf).Put3\ncmd/internal/obj/x86/asm6.go:4163:12: didn\u0027t inline (*AsmBuf).Put2\ncmd/internal/obj/x86/asm6.go:4186:51: didn\u0027t inline isbadbyte\ncmd/internal/obj/x86/asm6.go:4186:73: didn\u0027t inline isbadbyte\ncmd/internal/obj/x86/asm6.go:4198:13: didn\u0027t inline bytereg\ncmd/internal/obj/x86/asm6.go:4199:13: didn\u0027t inline bytereg\ncmd/internal/obj/x86/asm6.go:4257:12: didn\u0027t inline bytereg\ncmd/internal/obj/x86/asm6.go:4269:12: didn\u0027t inline (*AsmBuf).Put2\ncmd/internal/obj/x86/asm6.go:4297:17: didn\u0027t inline (*AsmBuf).PutInt16\ncmd/internal/obj/x86/asm6.go:4299:17: didn\u0027t inline (*AsmBuf).PutInt32\ncmd/internal/obj/x86/asm6.go:4378:26: didn\u0027t inline regIndex\ncmd/internal/obj/x86/asm6.go:4381:26: didn\u0027t inline newEVEXBits\n... and so on...",
      "parentUuid": "da65a9da_c8697ed2",
      "revId": "d75af141de904b5224eddbb7aed6fe7090055ada",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aa4ee8f6_f42d2069",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 26817
      },
      "writtenOn": "2018-07-23T21:41:57Z",
      "side": 1,
      "message": "Looks like this can affect tool asm performance, could you measure compile time impact?",
      "parentUuid": "91226642_b19f4975",
      "revId": "d75af141de904b5224eddbb7aed6fe7090055ada",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0e018310_27a1d607",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 56,
      "author": {
        "id": 26817
      },
      "writtenOn": "2018-07-23T21:25:12Z",
      "side": 1,
      "message": "Can we create a test from 26546?",
      "revId": "d75af141de904b5224eddbb7aed6fe7090055ada",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ca0b2dae_52efe961",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 56,
      "author": {
        "id": 5200
      },
      "writtenOn": "2018-07-23T21:37:09Z",
      "side": 1,
      "message": "I\u0027m working on this.",
      "parentUuid": "0e018310_27a1d607",
      "revId": "d75af141de904b5224eddbb7aed6fe7090055ada",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3a861c55_8808976d",
        "filename": "src/cmd/compile/internal/gc/inl.go",
        "patchSetId": 1
      },
      "lineNbr": 465,
      "author": {
        "id": 26817
      },
      "writtenOn": "2018-07-23T21:25:12Z",
      "side": 1,
      "message": "Does it make sense to change this into e. g. isBigFunction and stop recursion early if we already have inlineBigFunctionNodes nodes?",
      "revId": "d75af141de904b5224eddbb7aed6fe7090055ada",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6349b49c_6d8d8555",
        "filename": "src/cmd/compile/internal/gc/inl.go",
        "patchSetId": 1
      },
      "lineNbr": 465,
      "author": {
        "id": 5200
      },
      "writtenOn": "2018-07-23T21:37:09Z",
      "side": 1,
      "message": "I don\u0027t think it is a big deal.  Iterating once over the nodes of the function isn\u0027t a big cost.\nI\u0027m going for simple and obviously correct.",
      "parentUuid": "3a861c55_8808976d",
      "revId": "d75af141de904b5224eddbb7aed6fe7090055ada",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "02d500c6_7593f274",
        "filename": "src/cmd/compile/internal/gc/inl.go",
        "patchSetId": 1
      },
      "lineNbr": 504,
      "author": {
        "id": 13315
      },
      "writtenOn": "2018-07-23T21:16:08Z",
      "side": 1,
      "message": "maxCost is not used in this function, inlconv2expr, and inlconv2list. Do we need to add it? Just for consistency?",
      "revId": "d75af141de904b5224eddbb7aed6fe7090055ada",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2c1c2591_b0a348d4",
        "filename": "src/cmd/compile/internal/gc/inl.go",
        "patchSetId": 1
      },
      "lineNbr": 504,
      "author": {
        "id": 5200
      },
      "writtenOn": "2018-07-23T21:37:09Z",
      "side": 1,
      "message": "No, I just over-added.  Will remove.",
      "parentUuid": "02d500c6_7593f274",
      "revId": "d75af141de904b5224eddbb7aed6fe7090055ada",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3afbb7be_4df1ea51",
        "filename": "src/cmd/compile/internal/gc/inl.go",
        "patchSetId": 1
      },
      "lineNbr": 861,
      "author": {
        "id": 26817
      },
      "writtenOn": "2018-07-23T21:25:12Z",
      "side": 1,
      "message": "With -m this should probably report that function wasn\u0027t inlined.",
      "revId": "d75af141de904b5224eddbb7aed6fe7090055ada",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a5a11b0b_7a77ad7d",
        "filename": "src/cmd/compile/internal/gc/inl.go",
        "patchSetId": 1
      },
      "lineNbr": 861,
      "author": {
        "id": 5200
      },
      "writtenOn": "2018-07-23T21:37:09Z",
      "side": 1,
      "message": "We don\u0027t currently report non-inlinings.",
      "parentUuid": "3afbb7be_4df1ea51",
      "revId": "d75af141de904b5224eddbb7aed6fe7090055ada",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fffda06c_928f7ba9",
        "filename": "src/cmd/compile/internal/gc/inl.go",
        "patchSetId": 1
      },
      "lineNbr": 861,
      "author": {
        "id": 26817
      },
      "writtenOn": "2018-07-23T21:41:57Z",
      "side": 1,
      "message": "We do in caninl.",
      "parentUuid": "a5a11b0b_7a77ad7d",
      "revId": "d75af141de904b5224eddbb7aed6fe7090055ada",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "58cd1087_833bdfeb",
        "filename": "src/cmd/compile/internal/gc/inl.go",
        "patchSetId": 1
      },
      "lineNbr": 861,
      "author": {
        "id": 5200
      },
      "writtenOn": "2018-07-23T21:51:53Z",
      "side": 1,
      "message": "The new wrinkle here is that before a function was inlineable everywhere or nowhere. Now a function can be inlined at some callsites and not others.\n\nThe report from caninl states whether a function can be inlined (as a callee), or if not, why not. This CL does not change this at all.  But that report is callsite-agnostic.\n\nThis CL introduces callsite-dependent inlining.  For instance, cmd/internal/obj/x86.AsmBuf.Put3 is inlineable generally, but it won\u0027t be inlined into cmd/internal/obj/x86.doasm because doasm is too big.\n\nI think once we really get into callsite-dependent inlining decisions, we\u0027ll need to redo inline decision reporting.  But for this CL it seems like overkill; this is just a stopgap for an unusual corner case.\n\nWe do report every actual inlining with -m\u003d2.  That\u0027s enough to test this CL by looking for the absence of those reports.",
      "parentUuid": "fffda06c_928f7ba9",
      "revId": "d75af141de904b5224eddbb7aed6fe7090055ada",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    }
  ]
}