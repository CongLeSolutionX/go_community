{
  "comments": [
    {
      "key": {
        "uuid": "db18299a_af28ea5c",
        "filename": "src/cmd/asm/internal/arch/x86.go",
        "patchSetId": 3
      },
      "lineNbr": 43,
      "author": {
        "id": 13315
      },
      "writtenOn": "2018-05-17T03:46:35Z",
      "side": 1,
      "message": "Can we put this logic in the backend (cmd/internal/obj/x86)? Maybe obj.NewX86suffix should return (suffix, error)?",
      "revId": "f684235daf68ddbc60abf74c1c4bb995a83f2812",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e082a35c_e59d4ce6",
        "filename": "src/cmd/asm/internal/asm/line_test.go",
        "patchSetId": 3
      },
      "lineNbr": 21,
      "author": {
        "id": 13315
      },
      "writtenOn": "2018-05-17T03:46:35Z",
      "side": 1,
      "message": "I think `unknown suffix \"A\"` might be better.",
      "range": {
        "startLine": 21,
        "startChar": 27,
        "endLine": 21,
        "endChar": 52
      },
      "revId": "f684235daf68ddbc60abf74c1c4bb995a83f2812",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "87d04d29_9f3432c1",
        "filename": "src/cmd/asm/internal/asm/line_test.go",
        "patchSetId": 3
      },
      "lineNbr": 22,
      "author": {
        "id": 13315
      },
      "writtenOn": "2018-05-17T03:46:35Z",
      "side": 1,
      "message": "I\u0027m thinking if we should permit duplicated suffix.",
      "revId": "f684235daf68ddbc60abf74c1c4bb995a83f2812",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0b1a952c_43662c06",
        "filename": "src/cmd/asm/internal/asm/line_test.go",
        "patchSetId": 3
      },
      "lineNbr": 37,
      "author": {
        "id": 13315
      },
      "writtenOn": "2018-05-17T03:46:35Z",
      "side": 1,
      "message": "\"arch\" is enough.",
      "range": {
        "startLine": 37,
        "startChar": 2,
        "endLine": 37,
        "endChar": 14
      },
      "revId": "f684235daf68ddbc60abf74c1c4bb995a83f2812",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c3bedc21_d656d3c8",
        "filename": "src/cmd/asm/internal/asm/operand_test.go",
        "patchSetId": 3
      },
      "lineNbr": 131,
      "author": {
        "id": 13315
      },
      "writtenOn": "2018-05-17T03:46:35Z",
      "side": 1,
      "message": "Combine to one line: input, error string",
      "range": {
        "startLine": 130,
        "startChar": 0,
        "endLine": 131,
        "endChar": 13
      },
      "revId": "f684235daf68ddbc60abf74c1c4bb995a83f2812",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "12a2d543_bd9ee97a",
        "filename": "src/cmd/asm/internal/asm/operand_test.go",
        "patchSetId": 3
      },
      "lineNbr": 258,
      "author": {
        "id": 13315
      },
      "writtenOn": "2018-05-17T03:46:35Z",
      "side": 1,
      "message": "This doesn\u0027t look very good. Maybe \"unmatched []\". It may be ok to say \"expected \u0027]\u0027, found EOF\".",
      "range": {
        "startLine": 258,
        "startChar": 23,
        "endLine": 258,
        "endChar": 49
      },
      "revId": "f684235daf68ddbc60abf74c1c4bb995a83f2812",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "87094ed4_d978e9af",
        "filename": "src/cmd/asm/internal/asm/parse.go",
        "patchSetId": 3
      },
      "lineNbr": 145,
      "author": {
        "id": 13315
      },
      "writtenOn": "2018-05-17T03:46:35Z",
      "side": 1,
      "message": "Maybe we just always say suffix. \"ARM conditions\" isn\u0027t accurate, as (1) ARM and ARM64 are different architectures; (2) even on ARM, it is not always conditions (e.g. .P, .W, .S, etc.).",
      "range": {
        "startLine": 143,
        "startChar": 6,
        "endLine": 145,
        "endChar": 7
      },
      "revId": "f684235daf68ddbc60abf74c1c4bb995a83f2812",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8784de55_a1f2ff26",
        "filename": "src/cmd/asm/internal/asm/parse.go",
        "patchSetId": 3
      },
      "lineNbr": 838,
      "author": {
        "id": 13315
      },
      "writtenOn": "2018-05-17T03:46:35Z",
      "side": 1,
      "message": "This is not easy to understand. In particular, it is not intuitive how register list translates to/from that syntax.",
      "range": {
        "startLine": 836,
        "startChar": 42,
        "endLine": 838,
        "endChar": 39
      },
      "revId": "f684235daf68ddbc60abf74c1c4bb995a83f2812",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "08c6222f_c37d01a8",
        "filename": "src/cmd/internal/obj/util.go",
        "patchSetId": 3
      },
      "lineNbr": 77,
      "author": {
        "id": 13315
      },
      "writtenOn": "2018-05-17T03:46:35Z",
      "side": 1,
      "message": "386/AMD64.",
      "range": {
        "startLine": 77,
        "startChar": 3,
        "endLine": 77,
        "endChar": 13
      },
      "revId": "f684235daf68ddbc60abf74c1c4bb995a83f2812",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a06f8641_09bfed56",
        "filename": "src/cmd/internal/obj/util.go",
        "patchSetId": 3
      },
      "lineNbr": 291,
      "author": {
        "id": 13315
      },
      "writtenOn": "2018-05-17T03:46:35Z",
      "side": 1,
      "message": "Can we implement RLconv for amd64/386? So we have less arch-specific code in this package.",
      "revId": "f684235daf68ddbc60abf74c1c4bb995a83f2812",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "436a5f3c_12287946",
        "filename": "src/cmd/internal/obj/x86/a.out.go",
        "patchSetId": 3
      },
      "lineNbr": 122,
      "author": {
        "id": 13315
      },
      "writtenOn": "2018-05-17T03:46:35Z",
      "side": 1,
      "message": "No need to have the blank line, unless X0-X15 and X16-X31 are very different?",
      "revId": "f684235daf68ddbc60abf74c1c4bb995a83f2812",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dbe175c3_d1088b9f",
        "filename": "src/cmd/internal/obj/x86/a.out.go",
        "patchSetId": 3
      },
      "lineNbr": 156,
      "author": {
        "id": 13315
      },
      "writtenOn": "2018-05-17T03:46:35Z",
      "side": 1,
      "message": "Same here.",
      "revId": "f684235daf68ddbc60abf74c1c4bb995a83f2812",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5bfb6ab6_37c0c603",
        "filename": "src/cmd/internal/obj/x86/anames.go",
        "patchSetId": 3
      },
      "lineNbr": 370,
      "author": {
        "id": 13315
      },
      "writtenOn": "2018-05-17T03:46:35Z",
      "side": 1,
      "message": "This code is generated. Did you change the code generator to add the comment?",
      "revId": "f684235daf68ddbc60abf74c1c4bb995a83f2812",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a5d15e23_eb519e2e",
        "filename": "src/cmd/internal/obj/x86/asm6.go",
        "patchSetId": 3
      },
      "lineNbr": 170,
      "author": {
        "id": 13315
      },
      "writtenOn": "2018-05-17T03:46:35Z",
      "side": 1,
      "message": "Remove the quotes.",
      "range": {
        "startLine": 170,
        "startChar": 18,
        "endLine": 170,
        "endChar": 41
      },
      "revId": "f684235daf68ddbc60abf74c1c4bb995a83f2812",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4c1c419b_02241eed",
        "filename": "src/cmd/internal/obj/x86suffix.go",
        "patchSetId": 3
      },
      "lineNbr": 7,
      "author": {
        "id": 13315
      },
      "writtenOn": "2018-05-17T03:46:35Z",
      "side": 1,
      "message": "Can we have this logic in obj/x86 package? I see it is used CCconv. But can this be done with each architecture register a function, like Rconv and RLconv?",
      "revId": "f684235daf68ddbc60abf74c1c4bb995a83f2812",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    }
  ]
}