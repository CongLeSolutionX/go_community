{
  "comments": [
    {
      "key": {
        "uuid": "0bc4207e_a74b219a",
        "filename": "src/cmd/internal/obj/inl.go",
        "patchSetId": 5
      },
      "lineNbr": 9,
      "author": {
        "id": 5210
      },
      "writtenOn": "2017-02-23T22:25:57Z",
      "side": 1,
      "message": "More direct:\n\nThe Parent field of an InlinedCall is the index of another InlinedCall in InlTree.",
      "revId": "a7d9690fa0a0eeb9ce698656f704be94600a5772",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ac119a94_38e679aa",
        "filename": "src/cmd/internal/obj/inl.go",
        "patchSetId": 5
      },
      "lineNbr": 28,
      "author": {
        "id": 5210
      },
      "writtenOn": "2017-02-23T22:25:57Z",
      "side": 1,
      "message": "Any reason for this to be a struct? You could just do\n\nInlTree []InlinedCall\n\nThe Add method below already takes a pointer receiver, so it should work unchanged.",
      "revId": "a7d9690fa0a0eeb9ce698656f704be94600a5772",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a3040dc4_b91d24d3",
        "filename": "src/cmd/internal/obj/inl.go",
        "patchSetId": 5
      },
      "lineNbr": 34,
      "author": {
        "id": 5210
      },
      "writtenOn": "2017-02-23T22:25:57Z",
      "side": 1,
      "message": "or \u003c 0 if",
      "range": {
        "startLine": 34,
        "startChar": 58,
        "endLine": 34,
        "endChar": 60
      },
      "revId": "a7d9690fa0a0eeb9ce698656f704be94600a5772",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ef2253db_e766fc83",
        "filename": "src/cmd/internal/obj/inl.go",
        "patchSetId": 5
      },
      "lineNbr": 55,
      "author": {
        "id": 5210
      },
      "writtenOn": "2017-02-23T22:25:57Z",
      "side": 1,
      "message": "if ix \u003c 0 ...",
      "revId": "a7d9690fa0a0eeb9ce698656f704be94600a5772",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d8f7bda3_4f08b56b",
        "filename": "src/cmd/internal/obj/pcln.go",
        "patchSetId": 5
      },
      "lineNbr": 179,
      "author": {
        "id": 5167
      },
      "writtenOn": "2017-02-24T00:05:21Z",
      "side": 1,
      "message": "ctxt",
      "range": {
        "startLine": 179,
        "startChar": 60,
        "endLine": 179,
        "endChar": 64
      },
      "revId": "a7d9690fa0a0eeb9ce698656f704be94600a5772",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "db39c317_58525aff",
        "filename": "src/cmd/internal/obj/pcln.go",
        "patchSetId": 5
      },
      "lineNbr": 182,
      "author": {
        "id": 5210
      },
      "writtenOn": "2017-02-23T22:25:57Z",
      "side": 1,
      "message": "if globalIndex \u003c 0 {",
      "revId": "a7d9690fa0a0eeb9ce698656f704be94600a5772",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9f331efb_0185ca3a",
        "filename": "src/cmd/internal/obj/pcln.go",
        "patchSetId": 5
      },
      "lineNbr": 206,
      "author": {
        "id": 5210
      },
      "writtenOn": "2017-02-23T22:25:57Z",
      "side": 1,
      "message": "The result should be int now.",
      "range": {
        "startLine": 206,
        "startChar": 111,
        "endLine": 206,
        "endChar": 116
      },
      "revId": "a7d9690fa0a0eeb9ce698656f704be94600a5772",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7cc47c58_f5c0a945",
        "filename": "src/cmd/internal/obj/pcln.go",
        "patchSetId": 5
      },
      "lineNbr": 206,
      "author": {
        "id": 16260
      },
      "writtenOn": "2017-02-23T22:50:23Z",
      "side": 1,
      "message": "The result can\u0027t be int: funcpctab expects int32.",
      "parentUuid": "9f331efb_0185ca3a",
      "range": {
        "startLine": 206,
        "startChar": 111,
        "endLine": 206,
        "endChar": 116
      },
      "revId": "a7d9690fa0a0eeb9ce698656f704be94600a5772",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e64398f0_d9def676",
        "filename": "src/cmd/internal/obj/pcln.go",
        "patchSetId": 5
      },
      "lineNbr": 217,
      "author": {
        "id": 5210
      },
      "writtenOn": "2017-02-23T22:25:57Z",
      "side": 1,
      "message": "if globalIndex \u003c 0",
      "range": {
        "startLine": 217,
        "startChar": 16,
        "endLine": 217,
        "endChar": 18
      },
      "revId": "a7d9690fa0a0eeb9ce698656f704be94600a5772",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "308b3b57_1f90927d",
        "filename": "src/cmd/internal/obj/pcln.go",
        "patchSetId": 5
      },
      "lineNbr": 225,
      "author": {
        "id": 5210
      },
      "writtenOn": "2017-02-23T22:25:57Z",
      "side": 1,
      "message": "no need for conversion",
      "range": {
        "startLine": 225,
        "startChar": 8,
        "endLine": 225,
        "endChar": 13
      },
      "revId": "a7d9690fa0a0eeb9ce698656f704be94600a5772",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7c890a35_74785448",
        "filename": "src/cmd/internal/src/pos.go",
        "patchSetId": 5
      },
      "lineNbr": 121,
      "author": {
        "id": 5210
      },
      "writtenOn": "2017-02-23T22:25:57Z",
      "side": 1,
      "message": "There\u0027s nothing in this code that ties PosBases to inlining except the comment and the fact that the field is called \"inl\". It seems like an extra decision to tie the two together even though there\u0027s no need.\n\nIf you make this just an index, then there\u0027s no need to make the connection in this package. The index may be used elsewhere for something else.\n\nThe factory method could be called NewIndexBase, the accessor Index, and the field index. Seems cleaner to me.",
      "revId": "a7d9690fa0a0eeb9ce698656f704be94600a5772",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1b393328_11244590",
        "filename": "src/cmd/internal/src/pos.go",
        "patchSetId": 5
      },
      "lineNbr": 121,
      "author": {
        "id": 5167
      },
      "writtenOn": "2017-02-24T00:05:21Z",
      "side": 1,
      "message": "Replacing this with a generic index feels like premature abstraction to me. If it\u0027s a generic index, then when you have a particular Pos object you have to figure out what the index means for that particular Pos object. Right now that\u0027s trivial, since it\u0027s documented right here, even if it\u0027s only meaningful to the compiler. If we find some other use for an index in PosBase that\u0027s completely disjoint from uses that need an inlining index, we can easily revisit this.",
      "parentUuid": "7c890a35_74785448",
      "revId": "a7d9690fa0a0eeb9ce698656f704be94600a5772",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "354a63bf_c36d8b4b",
        "filename": "src/cmd/internal/src/pos.go",
        "patchSetId": 5
      },
      "lineNbr": 121,
      "author": {
        "id": 16260
      },
      "writtenOn": "2017-02-24T01:31:09Z",
      "side": 1,
      "message": "What happens when you use the index for something else, but also want to assign an inlining index to the PosBase?\n\nI think it makes sense to make the connection in this package since inlining is closely tied to line info. In particular, the inlining index is what distinguishes two src.Pos with the same file and line number but that are in completely different parts of the AST.",
      "parentUuid": "1b393328_11244590",
      "revId": "a7d9690fa0a0eeb9ce698656f704be94600a5772",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3bafa77f_bafc818a",
        "filename": "src/cmd/internal/src/pos.go",
        "patchSetId": 5
      },
      "lineNbr": 121,
      "author": {
        "id": 5210
      },
      "writtenOn": "2017-02-24T04:10:41Z",
      "side": 1,
      "message": "ok - I\u0027m just trying to see if one could disentangle the somewhat low-level position information from the higher-level inlining stuff - fine to leave as is",
      "parentUuid": "354a63bf_c36d8b4b",
      "revId": "a7d9690fa0a0eeb9ce698656f704be94600a5772",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "116a5e39_a3281e02",
        "filename": "src/cmd/internal/src/pos.go",
        "patchSetId": 5
      },
      "lineNbr": 199,
      "author": {
        "id": 5210
      },
      "writtenOn": "2017-02-23T22:25:57Z",
      "side": 1,
      "message": "the result is \u003c 0.",
      "range": {
        "startLine": 199,
        "startChar": 32,
        "endLine": 199,
        "endChar": 34
      },
      "revId": "a7d9690fa0a0eeb9ce698656f704be94600a5772",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "df9e92e7_ca9adeee",
        "filename": "src/cmd/link/internal/ld/pcln.go",
        "patchSetId": 5
      },
      "lineNbr": 343,
      "author": {
        "id": 5210
      },
      "writtenOn": "2017-02-23T22:25:57Z",
      "side": 1,
      "message": "This must not use platform-specific byte order. I\u0027d be surprised if this works when cross-compiling where the two platforms have different byte-orders.\n\nInstead, it should be platform-independent encoding. If the size of this data doesn\u0027t have to be known a priory, why not write into a buffer that grows as needed, using VarInt encoding (we do that elsewhere in the compiler).",
      "revId": "a7d9690fa0a0eeb9ce698656f704be94600a5772",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0d3cce4c_ab3642eb",
        "filename": "src/cmd/link/internal/ld/pcln.go",
        "patchSetId": 5
      },
      "lineNbr": 343,
      "author": {
        "id": 5167
      },
      "writtenOn": "2017-02-23T22:50:20Z",
      "side": 1,
      "message": "Robert, this is directly building up the runtime.inlinedCall structure, so the encoding has to match to runtime\u0027s byte order. It also has to be randomly accessible, so the size matters.",
      "parentUuid": "df9e92e7_ca9adeee",
      "revId": "a7d9690fa0a0eeb9ce698656f704be94600a5772",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "79b40c46_c55149a5",
        "filename": "src/cmd/link/internal/ld/pcln.go",
        "patchSetId": 5
      },
      "lineNbr": 343,
      "author": {
        "id": 16260
      },
      "writtenOn": "2017-02-23T22:50:23Z",
      "side": 1,
      "message": "Actually, I think this has to be platform-specific given how the runtime decodes this table.\n\nIf I use a VarInt encoding, then the linker would have to rewrite the PC-value table. I\u0027d rather not do that now unless it seems like the space savings is necessary.",
      "parentUuid": "df9e92e7_ca9adeee",
      "revId": "a7d9690fa0a0eeb9ce698656f704be94600a5772",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "46c2d06e_7afa9b2e",
        "filename": "src/cmd/link/internal/ld/pcln.go",
        "patchSetId": 5
      },
      "lineNbr": 343,
      "author": {
        "id": 5210
      },
      "writtenOn": "2017-02-23T22:57:31Z",
      "side": 1,
      "message": "What about all the other data written here? I don\u0027t see any platform-specific encoding. Once you do that, code forever will have to deal with the platform. Cross-anything won\u0027t work.",
      "parentUuid": "79b40c46_c55149a5",
      "revId": "a7d9690fa0a0eeb9ce698656f704be94600a5772",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "449573e7_b2d54d9f",
        "filename": "src/cmd/link/internal/ld/pcln.go",
        "patchSetId": 5
      },
      "lineNbr": 343,
      "author": {
        "id": 5167
      },
      "writtenOn": "2017-02-23T23:34:42Z",
      "side": 1,
      "message": "I don\u0027t understand your objection. This entire function is writing out platform-dependent encodings (setuint32, etc.) meant to be consumed as runtime data structures.",
      "parentUuid": "46c2d06e_7afa9b2e",
      "revId": "a7d9690fa0a0eeb9ce698656f704be94600a5772",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3ff61d1b_db6206e1",
        "filename": "src/cmd/link/internal/ld/pcln.go",
        "patchSetId": 5
      },
      "lineNbr": 343,
      "author": {
        "id": 5210
      },
      "writtenOn": "2017-02-23T23:45:03Z",
      "side": 1,
      "message": "Never mind - sorry for being dim. I see now that the setuintxx functions also use platform-specific encoding.",
      "parentUuid": "449573e7_b2d54d9f",
      "revId": "a7d9690fa0a0eeb9ce698656f704be94600a5772",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0f10570d_739a3078",
        "filename": "src/cmd/link/internal/ld/pcln.go",
        "patchSetId": 5
      },
      "lineNbr": 343,
      "author": {
        "id": 5167
      },
      "writtenOn": "2017-02-24T00:05:21Z",
      "side": 1,
      "message": "Though this code should probably be using setuint* for consistency with the rest of this function.",
      "parentUuid": "3ff61d1b_db6206e1",
      "revId": "a7d9690fa0a0eeb9ce698656f704be94600a5772",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    }
  ]
}