{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "2edf4d87_a24f1659",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 16585
      },
      "writtenOn": "2023-01-29T03:48:55Z",
      "side": 1,
      "message": "I think this is ready for a review from the compiler team. Adding @cherryyz@google.com, @austin@google.com and @mdempsky@google.com.",
      "revId": "0fc6184ddfef117cb26c94bcad05c029b99cb818",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "da260354_a0f98c96",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-01-29T03:52:20Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003d0fc6184d\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "0fc6184ddfef117cb26c94bcad05c029b99cb818",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "09dd870c_04c5612b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-01-29T04:00:24Z",
      "side": 1,
      "message": "Build is still in progress... Status page: https://farmer.golang.org/try?commit\u003d0fc6184d\nFailed on linux-386: https://storage.googleapis.com/go-build-log/0fc6184d/linux-386_bf1c3c42.log\nOther builds still in progress; subsequent failure notices suppressed until final report.\n\nConsult https://build.golang.org/ to see whether they are new failures. Keep in mind that TryBots currently test *exactly* your git commit, without rebasing. If your commit\u0027s git parent is old, the failure might\u0027ve already been fixed.\n",
      "parentUuid": "da260354_a0f98c96",
      "tag": "autogenerated:trybots~progress",
      "revId": "0fc6184ddfef117cb26c94bcad05c029b99cb818",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "de98b142_c52d02cb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-01-29T04:03:59Z",
      "side": 1,
      "message": "3 of 27 TryBots failed.\nFailed on linux-386: https://storage.googleapis.com/go-build-log/0fc6184d/linux-386_bf1c3c42.log\nFailed on linux-arm-aws: https://storage.googleapis.com/go-build-log/0fc6184d/linux-arm-aws_ce49b440.log\nFailed on windows-386-2012: https://storage.googleapis.com/go-build-log/0fc6184d/windows-386-2012_2c66b3aa.log\n\nConsult https://build.golang.org/ to see whether they are new failures. Keep in mind that TryBots currently test *exactly* your git commit, without rebasing. If your commit\u0027s git parent is old, the failure might\u0027ve already been fixed.\n\n",
      "parentUuid": "da260354_a0f98c96",
      "tag": "autogenerated:trybots~failed",
      "revId": "0fc6184ddfef117cb26c94bcad05c029b99cb818",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0568d02a_54e2aaad",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 5440
      },
      "writtenOn": "2023-01-30T23:15:02Z",
      "side": 1,
      "message": "Thanks. I made a first review pass and it seems generally good to me. Mostly nits, but a bunch of random drive-by, wasm-noob questions too.",
      "revId": "0fc6184ddfef117cb26c94bcad05c029b99cb818",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "307bbbb1_5ce98eaf",
        "filename": "src/cmd/compile/internal/ir/node.go",
        "patchSetId": 5
      },
      "lineNbr": 466,
      "author": {
        "id": 5440
      },
      "writtenOn": "2023-01-30T23:15:02Z",
      "side": 1,
      "message": "nit: period at the end of the sentence.\n\nMight as well put this type in func.go instead too, since it only applies to funcs.",
      "revId": "0fc6184ddfef117cb26c94bcad05c029b99cb818",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "23b3c453_2ea1f01b",
        "filename": "src/cmd/compile/internal/noder/linker.go",
        "patchSetId": 5
      },
      "lineNbr": 273,
      "author": {
        "id": 5440
      },
      "writtenOn": "2023-01-30T23:15:02Z",
      "side": 1,
      "message": "This seems wrong. I think you want to write out name.Func.WasmImport.{Module,Name}.",
      "revId": "0fc6184ddfef117cb26c94bcad05c029b99cb818",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "67dfddd8_f3f3f1fb",
        "filename": "src/cmd/compile/internal/noder/noder.go",
        "patchSetId": 5
      },
      "lineNbr": 235,
      "author": {
        "id": 5440
      },
      "writtenOn": "2023-01-30T23:15:02Z",
      "side": 1,
      "message": "It may not matter in practice, but I think it\u0027s better if we at least do these two error checks below unconditionally, so improper uses of //go:wasmimport are more likely to be caught.",
      "revId": "0fc6184ddfef117cb26c94bcad05c029b99cb818",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ff75aa4c_c0eccbdd",
        "filename": "src/cmd/compile/internal/noder/noder.go",
        "patchSetId": 5
      },
      "lineNbr": 238,
      "author": {
        "id": 5440
      },
      "writtenOn": "2023-01-30T23:15:02Z",
      "side": 1,
      "message": "nit: The usage text from the proposal was \"//go:wasmimport importmodule importname\"\n\nAlso, `break` after the errors.",
      "revId": "0fc6184ddfef117cb26c94bcad05c029b99cb818",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "10327dae_d3c1b026",
        "filename": "src/cmd/compile/internal/noder/reader.go",
        "patchSetId": 5
      },
      "lineNbr": 1077,
      "author": {
        "id": 5440
      },
      "writtenOn": "2023-01-30T23:15:02Z",
      "side": 1,
      "message": "nit: `||`?",
      "range": {
        "startLine": 1077,
        "startChar": 15,
        "endLine": 1077,
        "endChar": 17
      },
      "revId": "0fc6184ddfef117cb26c94bcad05c029b99cb818",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "70afdefc_0cc23892",
        "filename": "src/cmd/compile/internal/noder/writer.go",
        "patchSetId": 5
      },
      "lineNbr": 1055,
      "author": {
        "id": 5440
      },
      "writtenOn": "2023-01-30T23:15:02Z",
      "side": 1,
      "message": "Maybe only read/write these strings when buildcfg.GOARCH\u003d\u003dwasm? On other architectures, they\u0027ll always be the empty string, so they\u0027re pure overhead.",
      "range": {
        "startLine": 1049,
        "startChar": 0,
        "endLine": 1055,
        "endChar": 2
      },
      "revId": "0fc6184ddfef117cb26c94bcad05c029b99cb818",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e937edae_242b8572",
        "filename": "src/cmd/compile/internal/ssagen/abi.go",
        "patchSetId": 5
      },
      "lineNbr": 398,
      "author": {
        "id": 5440
      },
      "writtenOn": "2023-01-30T23:15:02Z",
      "side": 1,
      "message": "Why does the comment here talk about \"go\" but the comparison on the previous line uses \"gojs\"?",
      "range": {
        "startLine": 398,
        "startChar": 42,
        "endLine": 398,
        "endChar": 46
      },
      "revId": "0fc6184ddfef117cb26c94bcad05c029b99cb818",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8540d8ce_8f7a2ed3",
        "filename": "src/cmd/compile/internal/ssagen/abi.go",
        "patchSetId": 5
      },
      "lineNbr": 399,
      "author": {
        "id": 5440
      },
      "writtenOn": "2023-01-30T23:15:02Z",
      "side": 1,
      "message": "And just confirming: we pass the stack pointer as a WasmI32, not WasmPtr?",
      "range": {
        "startLine": 399,
        "startChar": 31,
        "endLine": 399,
        "endChar": 44
      },
      "revId": "0fc6184ddfef117cb26c94bcad05c029b99cb818",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cb558a7c_3e1fd9ea",
        "filename": "src/cmd/internal/obj/wasm/wasmobj.go",
        "patchSetId": 5
      },
      "lineNbr": 200,
      "author": {
        "id": 5440
      },
      "writtenOn": "2023-01-30T23:15:02Z",
      "side": 1,
      "message": "This is the second time this magic string has appeared in the CL. I\u0027d suggest declaring it as a const somewhere, for easier cross-referencing of applicable code.\n\nE.g., cmd/internal/obj.WasmGoModule or cmd/internal/obj/wasm.GoModule would seem fine.",
      "range": {
        "startLine": 200,
        "startChar": 18,
        "endLine": 200,
        "endChar": 24
      },
      "revId": "0fc6184ddfef117cb26c94bcad05c029b99cb818",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "03201f0e_d30a1e1b",
        "filename": "src/cmd/internal/obj/wasm/wasmobj.go",
        "patchSetId": 5
      },
      "lineNbr": 222,
      "author": {
        "id": 5440
      },
      "writtenOn": "2023-01-30T23:15:02Z",
      "side": 1,
      "message": "nit: Maybe just \"Each load instruction\"? \"Call\" is usually associated with functions, not individual instructions.",
      "range": {
        "startLine": 222,
        "startChar": 12,
        "endLine": 222,
        "endChar": 41
      },
      "revId": "0fc6184ddfef117cb26c94bcad05c029b99cb818",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b4612e9_be069cae",
        "filename": "src/cmd/internal/obj/wasm/wasmobj.go",
        "patchSetId": 5
      },
      "lineNbr": 228,
      "author": {
        "id": 5440
      },
      "writtenOn": "2023-01-30T23:15:02Z",
      "side": 1,
      "message": "typo: parameters",
      "range": {
        "startLine": 228,
        "startChar": 43,
        "endLine": 228,
        "endChar": 52
      },
      "revId": "0fc6184ddfef117cb26c94bcad05c029b99cb818",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "002872fa_76c7ace2",
        "filename": "src/cmd/internal/obj/wasm/wasmobj.go",
        "patchSetId": 5
      },
      "lineNbr": 291,
      "author": {
        "id": 5440
      },
      "writtenOn": "2023-01-30T23:15:02Z",
      "side": 1,
      "message": "Sorry, I don\u0027t understand this comment. How does setting `framesize \u003d 0` here prevent it from being overwritten below? If any code below overwrites the work, won\u0027t this assignment not matter either?",
      "revId": "0fc6184ddfef117cb26c94bcad05c029b99cb818",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "70ecf5de_f8347c7b",
        "filename": "src/cmd/internal/obj/wasm/wasmobj.go",
        "patchSetId": 5
      },
      "lineNbr": 345,
      "author": {
        "id": 5440
      },
      "writtenOn": "2023-01-30T23:15:02Z",
      "side": 1,
      "message": "Is there a reason you\u0027re removing the `p \u003d` assignments here?\n\nIf it\u0027s just because they\u0027re effectively nops, the compiler can figure that out on its own. It\u0027s preferable for idioms to be consistently applied, IMO.",
      "revId": "0fc6184ddfef117cb26c94bcad05c029b99cb818",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "27687d5f_0adbbf55",
        "filename": "src/cmd/internal/obj/wasm/wasmobj.go",
        "patchSetId": 5
      },
      "lineNbr": 358,
      "author": {
        "id": 5440
      },
      "writtenOn": "2023-01-30T23:15:02Z",
      "side": 1,
      "message": "There\u0027s already code for \"if framesize \u003e 0\" just above, so that makes me think there already exist functions with \"framesize \u003d\u003d 0\", and now we\u0027re changing how they\u0027re compiled. Maybe that\u0027s fine, but I\u0027m not familiar enough with the wasm code to be sure of that.",
      "revId": "0fc6184ddfef117cb26c94bcad05c029b99cb818",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "937833ae_32fd04f0",
        "filename": "src/cmd/link/internal/wasm/asm.go",
        "patchSetId": 5
      },
      "lineNbr": 94,
      "author": {
        "id": 5440
      },
      "writtenOn": "2023-01-30T23:15:02Z",
      "side": 1,
      "message": "This has an extra, unnecessary copy of the byte data to buf, before copying it to the string. This should be equivalent, but without the extra copy:\n\n```\nn :\u003d readUint32()\ns :\u003d string(data[:n])\ndata \u003d data[n:]\nreturn s\n```",
      "range": {
        "startLine": 89,
        "startChar": 0,
        "endLine": 94,
        "endChar": 20
      },
      "revId": "0fc6184ddfef117cb26c94bcad05c029b99cb818",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3da56c92_769a1187",
        "filename": "src/cmd/link/internal/wasm/asm.go",
        "patchSetId": 5
      },
      "lineNbr": 97,
      "author": {
        "id": 5440
      },
      "writtenOn": "2023-01-30T23:15:02Z",
      "side": 1,
      "message": "nit: I think `var wi obj.WasmImport` is more idiomatic within the compiler.",
      "revId": "0fc6184ddfef117cb26c94bcad05c029b99cb818",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1a87ecba_4b415ac5",
        "filename": "src/cmd/link/internal/wasm/asm.go",
        "patchSetId": 5
      },
      "lineNbr": 355,
      "author": {
        "id": 5440
      },
      "writtenOn": "2023-01-30T23:15:02Z",
      "side": 1,
      "message": "Not \"gojs\"?",
      "range": {
        "startLine": 355,
        "startChar": 23,
        "endLine": 355,
        "endChar": 27
      },
      "revId": "0fc6184ddfef117cb26c94bcad05c029b99cb818",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "69e1ed4c_0935e90d",
        "filename": "src/cmd/link/internal/wasm/asm.go",
        "patchSetId": 5
      },
      "lineNbr": 683,
      "author": {
        "id": 5440
      },
      "writtenOn": "2023-01-30T23:15:02Z",
      "side": 1,
      "message": "default: panic?\n\nAlternatively, since these enums are densely numbered anyway, just declare a helper array like:\n\n```\nvar wasmTypes \u003d []byte{\n  obj.WasmI32: I32,\n  obj.WasmI64: I64,\n  ...\n}\n```\n\nand use `b[i] \u003d wasmTypes[f]`.",
      "revId": "0fc6184ddfef117cb26c94bcad05c029b99cb818",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f012728a_ed5c304c",
        "filename": "src/runtime/lock_js.go",
        "patchSetId": 5
      },
      "lineNbr": 10,
      "author": {
        "id": 5440
      },
      "writtenOn": "2023-01-30T23:15:02Z",
      "side": 1,
      "message": "nit: typically we write `import _ \"unsafe\" // for go:linkname`.",
      "revId": "0fc6184ddfef117cb26c94bcad05c029b99cb818",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}