{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "197a99c4_4c343262",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-08-01T06:53:00Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003ddd15b1b1\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "dd15b1b18ac9c221e6b331d0a5a0ebc18dd3c3ac",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1c1d9fbe_92943ce0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-08-01T07:07:05Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "197a99c4_4c343262",
      "tag": "autogenerated:trybots~happy",
      "revId": "dd15b1b18ac9c221e6b331d0a5a0ebc18dd3c3ac",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1bb664d2_908c30b4",
        "filename": "src/cmd/compile/internal/ssa/gen/ARM64.rules",
        "patchSetId": 1
      },
      "lineNbr": 614,
      "author": {
        "id": 13315
      },
      "writtenOn": "2022-08-01T22:06:05Z",
      "side": 1,
      "message": "I\u0027m not really sure about this. I think TST and CMP set the carry bit differently. So if it is an unsigned comparison the result may be different. I think that is why it only includes EQ, NE, and signed comparisons.",
      "revId": "dd15b1b18ac9c221e6b331d0a5a0ebc18dd3c3ac",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "147895bd_f375a44a",
        "filename": "src/cmd/compile/internal/ssa/gen/ARM64.rules",
        "patchSetId": 1
      },
      "lineNbr": 614,
      "author": {
        "id": 24534
      },
      "writtenOn": "2022-08-02T03:02:38Z",
      "side": 1,
      "message": "I think there\u0027s should be no difference when comparing with 0, at least the test results are the same, see https://go.dev/play/p/ifnfgL0eygE. Actually we are encoding the below code with TST:\n\nfunc ulegt(a, b uint) string {\n        c0 :\u003d a\u0026b \u003c\u003d 0\n        if c0 {\n                return \"\u003c\u003d\"\n        }\n        c0 \u003d a\u0026b \u003e 0\n        if c0 {\n                return \"\u003e\"\n        }\n        return \"none\"\n}",
      "parentUuid": "1bb664d2_908c30b4",
      "revId": "dd15b1b18ac9c221e6b331d0a5a0ebc18dd3c3ac",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fee9f482_2ca0776b",
        "filename": "src/cmd/compile/internal/ssa/gen/ARM64.rules",
        "patchSetId": 1
      },
      "lineNbr": 614,
      "author": {
        "id": 24534
      },
      "writtenOn": "2022-08-02T03:13:19Z",
      "side": 1,
      "message": "Interestingly, for the above test case, the code generated by the tip version isï¼š\nTST     R0, R1\nBNE     24\n\nand this CL turns it into:\nAND     R0, R1, R2\nCBNZ    R2, 24",
      "parentUuid": "147895bd_f375a44a",
      "revId": "dd15b1b18ac9c221e6b331d0a5a0ebc18dd3c3ac",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "74a9a98e_935b1d03",
        "filename": "src/cmd/compile/internal/ssa/gen/ARM64.rules",
        "patchSetId": 1
      },
      "lineNbr": 614,
      "author": {
        "id": 13315
      },
      "writtenOn": "2022-08-02T14:22:55Z",
      "side": 1,
      "message": "I think there is another rule that turns unsigned \u003e0 to !\u003d0, so it may be hard to trigger the difference. But each rule should be correct by itself. A rule\u0027s correctness shouldn\u0027t depend on other optional optimization rules.\n\nIf you write in assembly \"TST; BHI\" vs. \"AND; CMP $0; BHI\", there is a difference. So I don\u0027t think we want to write this unconditionally.\n\nWhat optimization is missing without this change? I think we can add them more explicitly. CMP generates a flag value, and there are only a few operations that consume a flag value.",
      "parentUuid": "fee9f482_2ca0776b",
      "revId": "dd15b1b18ac9c221e6b331d0a5a0ebc18dd3c3ac",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "99eb8fb9_d8a44fd3",
        "filename": "src/cmd/compile/internal/ssa/gen/ARM64.rules",
        "patchSetId": 1
      },
      "lineNbr": 614,
      "author": {
        "id": 24534
      },
      "writtenOn": "2022-08-03T09:18:14Z",
      "side": 1,
      "message": "\u003e I think there is another rule that turns unsigned \u003e0 to !\u003d0\nYou are right, I found this rule, disable it, and found that \"TST; BHI\" behaves differently with \"AND; CMP $0; BHI\". Thanks.\n\n\u003e What optimization is missing without this change?\nThis rule doesn\u0027t apply to conditional instructions in a block, such as cset, csel.\n\"AND; CMP $0; CSET EQ\" can be optimized as \"TST; CSET EQ\"",
      "parentUuid": "74a9a98e_935b1d03",
      "revId": "dd15b1b18ac9c221e6b331d0a5a0ebc18dd3c3ac",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6c4f212a_ec6eb711",
        "filename": "src/cmd/compile/internal/ssa/gen/ARM64.rules",
        "patchSetId": 1
      },
      "lineNbr": 614,
      "author": {
        "id": 13315
      },
      "writtenOn": "2022-08-03T17:02:58Z",
      "side": 1,
      "message": "Thanks. Yeah, adding rules for CSET and CSEL is better.",
      "parentUuid": "99eb8fb9_d8a44fd3",
      "revId": "dd15b1b18ac9c221e6b331d0a5a0ebc18dd3c3ac",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}