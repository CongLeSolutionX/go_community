{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "516f1097_a0d39bee",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 31647
      },
      "writtenOn": "2022-02-17T15:29:47Z",
      "side": 1,
      "message": "that",
      "range": {
        "startLine": 10,
        "startChar": 45,
        "endLine": 10,
        "endChar": 48
      },
      "revId": "2c4c1adc92d01459cbadb2dbc20b9b7469c03a02",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eecead3e_a58fcb17",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 28783
      },
      "writtenOn": "2022-02-17T20:04:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "516f1097_a0d39bee",
      "range": {
        "startLine": 10,
        "startChar": 45,
        "endLine": 10,
        "endChar": 48
      },
      "revId": "2c4c1adc92d01459cbadb2dbc20b9b7469c03a02",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6a777d12_a67c913e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-02-17T04:31:58Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003d2c4c1adc",
      "tag": "autogenerated:trybots~beginning",
      "revId": "2c4c1adc92d01459cbadb2dbc20b9b7469c03a02",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "955f1d4d_f85e0297",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-02-17T04:43:57Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "6a777d12_a67c913e",
      "tag": "autogenerated:trybots~happy",
      "revId": "2c4c1adc92d01459cbadb2dbc20b9b7469c03a02",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fa68ac15_0ac5fbd0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 28783
      },
      "writtenOn": "2022-02-17T04:58:17Z",
      "side": 1,
      "message": "Hi Rob:  this CL isn\u0027t complete yet, since I haven\u0027t created a minimized test case yet, but could you take a look at the change for {importer, gcimporter}/iimport.go, where I have to defer the call to SetConstraint for types that are recursive through a type constraint.  Does it make sense and/or is there a better way?  We can chat in more detail if the problem/solution are not clear.\n\nIn this issue\u0027s test program, we actually have a recursive cycle on types that goes through about 9 different types, including two type constraints!  (Interaction - InteractionDataConstraint - UserCommandInteractionData - resolvedInteractionWithOptions - Resolved - ResolvedData - ResolvedDataConstraint - Message - Interaction)\n",
      "revId": "2c4c1adc92d01459cbadb2dbc20b9b7469c03a02",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9529409b_65ab4aaf",
        "filename": "src/go/internal/gcimporter/iimport.go",
        "patchSetId": 1
      },
      "lineNbr": 184,
      "author": {
        "id": 31647
      },
      "writtenOn": "2022-02-17T17:20:37Z",
      "side": 1,
      "message": "We should have a block comment somewhere, perhaps here, explaining why this must be done later ðŸ˜Š",
      "range": {
        "startLine": 184,
        "startChar": 1,
        "endLine": 184,
        "endChar": 28
      },
      "revId": "2c4c1adc92d01459cbadb2dbc20b9b7469c03a02",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2af824d3_627eaa00",
        "filename": "src/go/internal/gcimporter/iimport.go",
        "patchSetId": 1
      },
      "lineNbr": 184,
      "author": {
        "id": 28783
      },
      "writtenOn": "2022-02-17T20:04:57Z",
      "side": 1,
      "message": "Done.  Added a comment here as well.",
      "parentUuid": "9529409b_65ab4aaf",
      "range": {
        "startLine": 184,
        "startChar": 1,
        "endLine": 184,
        "endChar": 28
      },
      "revId": "2c4c1adc92d01459cbadb2dbc20b9b7469c03a02",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9dfd58bb_45935ddd",
        "filename": "src/go/internal/gcimporter/iimport.go",
        "patchSetId": 1
      },
      "lineNbr": 410,
      "author": {
        "id": 31647
      },
      "writtenOn": "2022-02-17T15:29:47Z",
      "side": 1,
      "message": "Hmm, ideally we should be able to set the constraint even if its not fully set up, since it should be fully set up by the time the import exits, but that\u0027s not how it currently works :(\n\nI think what\u0027s going on here is that SetConstraint computes the type parameter type set, and due to recursive references does this improperly. Does that sound right?",
      "range": {
        "startLine": 407,
        "startChar": 6,
        "endLine": 410,
        "endChar": 41
      },
      "revId": "2c4c1adc92d01459cbadb2dbc20b9b7469c03a02",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "451d60f5_6173e370",
        "filename": "src/go/internal/gcimporter/iimport.go",
        "patchSetId": 1
      },
      "lineNbr": 410,
      "author": {
        "id": 31647
      },
      "writtenOn": "2022-02-17T15:29:47Z",
      "side": 1,
      "message": "s/completely/completely set up\n?",
      "range": {
        "startLine": 410,
        "startChar": 6,
        "endLine": 410,
        "endChar": 40
      },
      "revId": "2c4c1adc92d01459cbadb2dbc20b9b7469c03a02",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bdd40f7e_1b8cf7d2",
        "filename": "src/go/internal/gcimporter/iimport.go",
        "patchSetId": 1
      },
      "lineNbr": 410,
      "author": {
        "id": 28783
      },
      "writtenOn": "2022-02-17T16:18:48Z",
      "side": 1,
      "message": "I\u0027ll try to make the comment clearer.  SetConstraint definitely panics if constraint (bound) is a named type with no underlying type set yet (t.iface() in SetConstraint calls under(bound), which fails with a \"nil underlying\" panic for Named types).  So we definitely have to defer the SetConstraint call unless the implementation of SetConstraint() is changed.\n\nGiven that, let me know if you think the way I\u0027ve deferred things seems reasonable.",
      "parentUuid": "9dfd58bb_45935ddd",
      "range": {
        "startLine": 407,
        "startChar": 6,
        "endLine": 410,
        "endChar": 41
      },
      "revId": "2c4c1adc92d01459cbadb2dbc20b9b7469c03a02",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ac62a08e_2732c782",
        "filename": "src/go/internal/gcimporter/iimport.go",
        "patchSetId": 1
      },
      "lineNbr": 410,
      "author": {
        "id": 28783
      },
      "writtenOn": "2022-02-17T16:18:48Z",
      "side": 1,
      "message": "I think I mean \"completed\", but \"completely set up\" works as well.",
      "parentUuid": "451d60f5_6173e370",
      "range": {
        "startLine": 410,
        "startChar": 6,
        "endLine": 410,
        "endChar": 40
      },
      "revId": "2c4c1adc92d01459cbadb2dbc20b9b7469c03a02",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c5f3794a_bf496040",
        "filename": "src/go/internal/gcimporter/iimport.go",
        "patchSetId": 1
      },
      "lineNbr": 410,
      "author": {
        "id": 31647
      },
      "writtenOn": "2022-02-17T17:20:37Z",
      "side": 1,
      "message": "I think this is reasonable. However, I don\u0027t think we should switch based on constraint.Underlying() !\u003d nil. One could imagine that the Underlying itself may be non-nil but not completely set up.\n\nI think what we\u0027ve discovered is that it is generally incorrect to SetConstraint for type parameters in doDecl. SetConstraint should not be called while we are in the middle of importing declarations. Let\u0027s just always do this later.",
      "parentUuid": "bdd40f7e_1b8cf7d2",
      "range": {
        "startLine": 407,
        "startChar": 6,
        "endLine": 410,
        "endChar": 41
      },
      "revId": "2c4c1adc92d01459cbadb2dbc20b9b7469c03a02",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a11447de_a24331bf",
        "filename": "src/go/internal/gcimporter/iimport.go",
        "patchSetId": 1
      },
      "lineNbr": 410,
      "author": {
        "id": 28783
      },
      "writtenOn": "2022-02-17T20:04:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ac62a08e_2732c782",
      "range": {
        "startLine": 410,
        "startChar": 6,
        "endLine": 410,
        "endChar": 40
      },
      "revId": "2c4c1adc92d01459cbadb2dbc20b9b7469c03a02",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "17b990ba_365f05ed",
        "filename": "src/go/internal/gcimporter/iimport.go",
        "patchSetId": 1
      },
      "lineNbr": 410,
      "author": {
        "id": 28783
      },
      "writtenOn": "2022-02-17T20:04:57Z",
      "side": 1,
      "message": "OK, I changed to always deferring the SetConstraint call.  I was thinking that maybe we could at least not defer it for \u0027any\u0027 constraint, but I guess we can\u0027t be sure that the constraint that looks like an empty interface is just not filled in yet for some reason.",
      "parentUuid": "c5f3794a_bf496040",
      "range": {
        "startLine": 407,
        "startChar": 6,
        "endLine": 410,
        "endChar": 41
      },
      "revId": "2c4c1adc92d01459cbadb2dbc20b9b7469c03a02",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}