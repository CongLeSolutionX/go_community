{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "ca6ddab4_6fa3d8c3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2024-01-08T22:40:13Z",
      "side": 1,
      "message": "I spotted some possible problems.\n\nThese findings are based on simple heuristics. If a finding appears wrong, briefly reply here saying so. Otherwise, please address any problems and update the GitHub PR. When complete, mark this comment as \u0027Done\u0027 and click the [blue \u0027Reply\u0027 button](https://go.dev/wiki/GerritBot#i-left-a-reply-to-a-comment-in-gerrit-but-no-one-but-me-can-see-it) above.\n\nPossible problems detected:\n  1. Lines in the commit message should be wrapped at ~76 characters unless needed for things like URLs or tables. You have a 133 character line.\n\nThe commit title and commit message body come from the GitHub PR title and description, and must be edited in the GitHub web interface (not via git). For instructions, see [here](https://go.dev/wiki/GerritBot/#how-does-gerritbot-determine-the-final-commit-message). For guidelines on commit messages for the Go project, see [here](https://go.dev/doc/contribute#commit_messages).\n\n\n(In general for Gerrit code reviews, the change author is expected to [log in to Gerrit](https://go-review.googlesource.com/login/) with a Gmail or other Google account and then close out each piece of feedback by marking it as \u0027Done\u0027 if implemented as suggested or otherwise reply to each review comment. See the [Review](https://go.dev/doc/contribute#review) section of the Contributing Guide for details.)",
      "revId": "2d8d6e1fb80bf5afc2094a2d9e804443d05fa8f5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6a6d4013_b640a087",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5200
      },
      "writtenOn": "2024-01-08T23:20:24Z",
      "side": 1,
      "message": "The thing I worry about here is code size at the callsite. With the register ABI calls to concatstringX just require setting up args in registers (e.g. concatstring2 needs to set 5 registers, 2 for each string and 1 for the tmpbuf). concatstring, on the other hand, requires initializing the backing store for the slice (which involves memory operations) and then setting up the slice header. That code sequence can be significantly larger (especially on x86).\n\nCode size regressions are hard to quantify with microbenchmarks, but they can adversely affect larger programs which challenge the icache.\n\nIt appears from the issue that you have some benchmarks. Can you add them to this CL as Go benchmarks? That way it will make it easier to test on different architectures.",
      "revId": "2d8d6e1fb80bf5afc2094a2d9e804443d05fa8f5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a615f9bd_161e517e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5200
      },
      "writtenOn": "2024-01-08T23:21:00Z",
      "side": 1,
      "message": "(Note to self: original hash mentioned is 24699fb05c897dbaec3fe4f1d565c3c9da5078fc)",
      "revId": "2d8d6e1fb80bf5afc2094a2d9e804443d05fa8f5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}