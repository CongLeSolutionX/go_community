{
  "comments": [
    {
      "key": {
        "uuid": "1b765175_075e6d49",
        "filename": "test/winbatch.go",
        "patchSetId": 4
      },
      "lineNbr": 34,
      "author": {
        "id": 6365
      },
      "writtenOn": "2020-06-04T20:51:20Z",
      "side": 1,
      "message": "(optional)\n\nYou might also want to skip GOROOT/pkg, which contains generated files and can be quite large.\n\n(See https://github.com/golang/go/blob/fb86c70bdad8aaa9756d6740885714c5aeff5989/src/cmd/internal/moddeps/moddeps_test.go#L42 for a function that does a similar walk of GOROOT.)",
      "range": {
        "startLine": 34,
        "startChar": 0,
        "endLine": 34,
        "endChar": 83
      },
      "revId": "0f8b02e5fdccdd003726e9f0b441c57dead693f0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2e2a8349_36df15fc",
        "filename": "test/winbatch.go",
        "patchSetId": 4
      },
      "lineNbr": 34,
      "author": {
        "id": 6005
      },
      "writtenOn": "2020-06-04T22:18:56Z",
      "side": 1,
      "message": "Thanks for this suggestion. I think that\u0027s a good change to make.\n\nTo share an unexpected (to me) finding, I thought it would help save time, but the time taken stayed around at 110~ ms on my machine. In a fresh checkout after ./make.bash, `tree pkg | wc -l` reports a number as low as 533, compared to 10k for the entire Go repo.\n\nSo I documented its reason to be more about avoiding false-positives; the optimization can be secondary (and might help if pkg happens to get more packed under different circumstances).\n\nDone.",
      "parentUuid": "1b765175_075e6d49",
      "range": {
        "startLine": 34,
        "startChar": 0,
        "endLine": 34,
        "endChar": 83
      },
      "revId": "0f8b02e5fdccdd003726e9f0b441c57dead693f0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}