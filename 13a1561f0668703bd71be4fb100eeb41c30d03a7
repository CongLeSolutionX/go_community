{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "1db240bd_f8e4c38a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5200
      },
      "writtenOn": "2024-09-03T22:46:04Z",
      "side": 1,
      "message": "Interesting idea.\n\nI\u0027m not 100% sold on modifying things and then modifying them back. It would be nicer to keep a side table somehow (which you\u0027re doing anyway for the undo part) and use that to modify partitioning.\n\nAny idea whether there are actual cases where this comes up? Perhaps a benchmark that improves?",
      "revId": "13a1561f0668703bd71be4fb100eeb41c30d03a7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "43fb8702_07c8bb22",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 68008
      },
      "writtenOn": "2024-09-07T07:11:39Z",
      "side": 1,
      "message": "One interesting case where I\u0027ve seen is when we have some closure that captures local variable (e.g. slice) by reference, it adds ad indirection when working with such variables and work with such captured slice increases number of the bound checks because the slice variable access is indirect. However, this change is not  enough to handle CSEing such indirect accesses, maybe it could help if we somehow improve the `disjoint` function in future.\nI tried bent benchmarks with current version of the change. I\u0027ll update after updating the change, but here is current version result:\n```\nshortname: ajstarks_deck_generate\ntoolchain: Ref1\ngoos: linux\ngoarch: amd64\npkg: github.com/ajstarks/deck/generate\ncpu: AMD Ryzen 9 7945HX with Radeon Graphics        \n          │ Ref1.stdout │            Cse1.stdout             │\n          │   sec/op    │   sec/op     vs base               │\nArc-8       1.491µ ± 0%   1.508µ ± 0%  +1.14% (p\u003d0.000 n\u003d15)\nPolygon-8   2.700µ ± 0%   2.724µ ± 0%  +0.89% (p\u003d0.000 n\u003d15)\ngeomean     2.006µ        2.027µ       +1.01%\n\nshortname: aws_jsonutil\npkg: github.com/aws/aws-sdk-go/private/protocol/json/jsonutil\n             │ Ref1.stdout │            Cse1.stdout             │\n             │   sec/op    │   sec/op     vs base               │\nBuildJSON-8    1.707µ ± 1%   1.665µ ± 1%  -2.46% (p\u003d0.000 n\u003d15)\nStdlibJSON-8   1.215µ ± 1%   1.208µ ± 0%  -0.58% (p\u003d0.006 n\u003d15)\ngeomean        1.440µ        1.418µ       -1.52%\n\nshortname: benhoyt_goawk_1_18\npkg: github.com/benhoyt/goawk/interp\n                      │ Ref1.stdout │            Cse1.stdout             │\n                      │   sec/op    │   sec/op     vs base               │\nRecursiveFunc-8         5.502µ ± 1%   5.487µ ± 1%       ~ (p\u003d0.330 n\u003d15)\nRegexMatch-8            459.9n ± 1%   459.3n ± 2%       ~ (p\u003d0.721 n\u003d15)\nRepeatExecProgram-8     7.349µ ± 0%   7.359µ ± 0%       ~ (p\u003d0.170 n\u003d15)\nRepeatNew-8             37.11n ± 1%   37.06n ± 4%       ~ (p\u003d0.129 n\u003d15)\nRepeatIOExecProgram-8   12.52µ ± 0%   12.56µ ± 0%  +0.35% (p\u003d0.017 n\u003d15)\nRepeatIONew-8           366.0n ± 0%   350.4n ± 1%  -4.26% (p\u003d0.000 n\u003d15)\ngeomean                 1.212µ        1.203µ       -0.73%\n\nshortname: commonmark_markdown\npkg: gitlab.com/golang-commonmark/markdown\n                         │ Ref1.stdout │            Cse1.stdout             │\n                         │   sec/op    │   sec/op     vs base               │\nRenderSpecNoHTML-8         2.743m ± 1%   2.692m ± 1%  -1.87% (p\u003d0.000 n\u003d15)\nRenderSpec-8               2.757m ± 1%   2.695m ± 1%  -2.22% (p\u003d0.000 n\u003d15)\nRenderSpecBlackFriday2-8   1.910m ± 1%   1.753m ± 0%  -8.24% (p\u003d0.000 n\u003d15)\ngeomean                    2.436m        2.334m       -4.16%\n\nshortname: ericlagergren_decimal\npkg: github.com/ericlagergren/decimal/benchmarks\n                                      │ Ref1.stdout │            Cse1.stdout             │\n                                      │   sec/op    │   sec/op     vs base               │\nPi/foo\u003dericlagergren_(Go)/prec\u003d100-8    56.78µ ± 0%   55.02µ ± 0%  -3.10% (p\u003d0.000 n\u003d15)\nPi/foo\u003dericlagergren_(GDA)/prec\u003d100-8   117.2µ ± 1%   111.9µ ± 0%  -4.56% (p\u003d0.000 n\u003d15)\nPi/foo\u003dshopspring/prec\u003d100-8            167.4µ ± 1%   169.0µ ± 1%  +0.93% (p\u003d0.016 n\u003d15)\nPi/foo\u003dapmckinlay/prec\u003d100-8            1.048µ ± 0%   1.054µ ± 1%  +0.57% (p\u003d0.002 n\u003d15)\nPi/foo\u003dgo-inf/prec\u003d100-8                46.59µ ± 1%   46.68µ ± 1%       ~ (p\u003d0.330 n\u003d15)\nPi/foo\u003dfloat64/prec\u003d100-8               1.663µ ± 1%   1.677µ ± 1%       ~ (p\u003d0.228 n\u003d15)\ngeomean                                 21.19µ        21.00µ       -0.88%\n\nshortname: ethereum_bitutil\npkg: github.com/ethereum/go-ethereum/common/bitutil\n                        │ Ref1.stdout │             Cse1.stdout             │\n                        │   sec/op    │   sec/op     vs base                │\nFastTest2KB-8             85.15n ± 0%   74.64n ± 0%  -12.34% (p\u003d0.000 n\u003d15)\nBaseTest2KB-8             386.1n ± 0%   385.9n ± 0%   -0.05% (p\u003d0.001 n\u003d15)\nEncoding4KBVerySparse-8   7.013µ ± 0%   7.064µ ± 1%        ~ (p\u003d0.095 n\u003d15)\ngeomean                   613.2n        588.2n        -4.08%\n\nshortname: gonum_traverse\npkg: gonum.org/v1/gonum/graph/traverse\n                                    │ Ref1.stdout │            Cse1.stdout             │\n                                    │   sec/op    │   sec/op     vs base               │\nWalkAllBreadthFirstGnp_10_tenth-8     1.510µ ± 1%   1.524µ ± 0%  +0.93% (p\u003d0.003 n\u003d15)\nWalkAllBreadthFirstGnp_1000_tenth-8   6.375m ± 0%   6.437m ± 0%  +0.98% (p\u003d0.000 n\u003d15)\ngeomean                               98.11µ        99.05µ       +0.95%\n\nshortname: gonum_lapack_native\npkg: gonum.org/v1/gonum/lapack/gonum\n                     │ Ref1.stdout │            Cse1.stdout             │\n                     │   sec/op    │   sec/op     vs base               │\nDgeev/Circulant10-8    17.81µ ± 2%   18.16µ ± 1%  +1.94% (p\u003d0.016 n\u003d15)\nDgeev/Circulant100-8   5.622m ± 1%   5.715m ± 1%  +1.65% (p\u003d0.005 n\u003d15)\ngeomean                316.5µ        322.1µ       +1.79%\n\nshortname: gonum_mat\npkg: gonum.org/v1/gonum/mat\n                                 │ Ref1.stdout │            Cse1.stdout             │\n                                 │   sec/op    │   sec/op     vs base               │\nMulWorkspaceDense1000Hundredth-8   107.3m ± 0%   107.2m ± 0%  -0.14% (p\u003d0.000 n\u003d15)\nScaleVec10000Inc20-8               5.929µ ± 2%   5.835µ ± 2%       ~ (p\u003d0.140 n\u003d15)\ngeomean                            797.6µ        790.7µ       -0.86%\n\nshortname: gonum_topo\npkg: gonum.org/v1/gonum/graph/topo\n                         │ Ref1.stdout │            Cse1.stdout             │\n                         │   sec/op    │   sec/op     vs base               │\nTarjanSCCGnp_10_tenth-8    3.411µ ± 2%   3.412µ ± 1%       ~ (p\u003d1.000 n\u003d15)\nTarjanSCCGnp_1000_half-8   44.84m ± 0%   44.86m ± 1%       ~ (p\u003d0.512 n\u003d15)\ngeomean                    391.1µ        391.2µ       +0.03%\n\n\nshortname: minio\npkg: github.com/minio/minio/cmd\n                               │ Ref1.stdout  │             Cse1.stdout              │\n                               │    sec/op    │    sec/op      vs base               │\nDecodehealingTracker-8            470.0n ± 1%    482.3n ±  2%  +2.62% (p\u003d0.000 n\u003d15)\nAppendMsgReplicateDecision-8     0.1861n ± 0%   0.1865n ±  0%       ~ (p\u003d0.071 n\u003d15)\nAppendMsgResyncTargetsInfo-8      2.893n ± 0%    3.084n ±  1%  +6.60% (p\u003d0.000 n\u003d15)\nDataUpdateTracker-8               1.560µ ± 8%    1.405µ ± 11%       ~ (p\u003d0.056 n\u003d15)\nMarshalMsgdataUsageCacheInfo-8    29.60n ± 1%    29.38n ±  1%       ~ (p\u003d0.076 n\u003d15)\ngeomean                           25.91n         25.81n        -0.40%\n\n                             │ Ref1.stdout  │              Cse1.stdout              │\n                             │     B/s      │      B/s       vs base                │\nDecodehealingTracker-8         631.0Mi ± 1%   614.9Mi ±  2%   -2.56% (p\u003d0.000 n\u003d15)\nAppendMsgReplicateDecision-8   5.004Gi ± 0%   4.994Gi ±  0%        ~ (p\u003d0.061 n\u003d15)\nAppendMsgResyncTargetsInfo-8   3.220Gi ± 0%   3.020Gi ±  1%   -6.20% (p\u003d0.000 n\u003d15)\nDataUpdateTracker-8            625.0Ki ± 9%   693.4Ki ± 10%  +10.94% (p\u003d0.046 n\u003d15)\ngeomean                        284.0Mi        284.9Mi         +0.30%\n\nshortname: uber_zap\npkg: go.uber.org/zap/zapcore\n                                             │  Ref1.stdout  │             Cse1.stdout             │\n                                             │    sec/op     │    sec/op     vs base               │\nBufferedWriteSyncer/write_file_with_buffer-8    36.96n ±  1%   37.10n ±  0%       ~ (p\u003d0.245 n\u003d15)\nMultiWriteSyncer/2_discarder-8                  7.886n ± 23%   6.052n ±  0%       ~ (p\u003d0.254 n\u003d15)\nMultiWriteSyncer/4_discarder-8                  7.523n ±  0%   7.523n ±  0%       ~ (p\u003d0.574 n\u003d15)\nMultiWriteSyncer/4_discarder_with_buffer-8      25.83n ±  1%   26.02n ±  0%  +0.74% (p\u003d0.042 n\u003d15)\nWriteSyncer/write_file_with_no_buffer-8         1.212µ ±  0%   1.207µ ±  0%  -0.41% (p\u003d0.007 n\u003d15)\nZapConsole-8                                    405.1n ±  0%   405.3n ±  0%       ~ (p\u003d0.631 n\u003d15)\nJSONLogMarshalerFunc-8                          258.3n ±  2%   259.6n ±  2%       ~ (p\u003d0.675 n\u003d15)\nZapJSON-8                                       298.5n ±  0%   299.4n ±  0%       ~ (p\u003d0.134 n\u003d15)\nStandardJSON-8                                  454.1n ±  0%   451.4n ±  1%       ~ (p\u003d0.140 n\u003d15)\nSampler_Check/7_keys-8                          4.630n ±  0%   4.633n ±  0%       ~ (p\u003d0.182 n\u003d15)\nSampler_Check/50_keys-8                         5.221n ±  0%   5.222n ±  0%       ~ (p\u003d0.959 n\u003d15)\nSampler_Check/100_keys-8                        5.236n ±  0%   5.234n ±  0%       ~ (p\u003d0.571 n\u003d15)\nSampler_CheckWithHook/7_keys-8                  10.51n ± 11%   10.41n ± 10%       ~ (p\u003d0.943 n\u003d15)\nSampler_CheckWithHook/50_keys-8                10.600n ± 10%   9.551n ± 11%       ~ (p\u003d0.543 n\u003d15)\nSampler_CheckWithHook/100_keys-8                10.59n ± 10%   10.32n ±  8%       ~ (p\u003d0.307 n\u003d15)\nTeeCheck-8                                      92.63n ±  1%   92.93n ±  1%       ~ (p\u003d0.395 n\u003d15)\ngeomean                                         37.20n         36.30n        -2.41%\n```",
      "parentUuid": "1db240bd_f8e4c38a",
      "revId": "13a1561f0668703bd71be4fb100eeb41c30d03a7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7e0792d9_7d76eeba",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 68008
      },
      "writtenOn": "2024-09-07T07:11:39Z",
      "side": 1,
      "message": "Thank you for the suggestion, I\u0027ll try the suggested approach.",
      "revId": "13a1561f0668703bd71be4fb100eeb41c30d03a7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6597e448_a72af375",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 6875
      },
      "writtenOn": "2024-09-09T17:41:42Z",
      "side": 1,
      "message": "I\u0027m trying to understand where this would come up in practice. Probably the best way to do that is to take a few of the benchmarks which changed (both faster and slower), grab a profile of them, look at the top functions (top overall or top when looking at a differential profile), and find one whose assembly has changed.",
      "parentUuid": "43fb8702_07c8bb22",
      "revId": "13a1561f0668703bd71be4fb100eeb41c30d03a7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f8a3e755_9d945746",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 68008
      },
      "writtenOn": "2024-09-15T18:36:57Z",
      "side": 1,
      "message": "Actually, I need some more tests to see or maybe will try them on other machine, because in these benchmarks top difference look like have some indirect effect - that is, top functions look identical for several tests I looked at (e.g., RenderSpecBlackFriday2, AppendMsgResyncTargetsInfo, FastTest2KB).\nHowever, for now I found several interesting differences in disassembly which might help improve if they were in some hot code. Here they are:\n\n1) `encoding/hex.(*dumper).Write`:\n\nthere is a bswap matched after the load of its source is CSE-d:\n\nmov    0x38(%rax),%rsi\nbswap  %esi\nmov    %esi,0x22(%rax)\n\nin original code (without this patch) it re-loads the source for each byte:\n\nmov    0x38(%rax),%rsi\nshr    $0x18,%rsi\nmov    %sil,0x22(%rax)\n\nmov    0x38(%rax),%rsi\nshr    $0x10,%rsi\nmov    %sil,0x23(%rax)\n\nmov    0x38(%rax),%rsi\nshr    $0x8,%rsi\nmov    %sil,0x24(%rax)\n\nmov    0x38(%rax),%rsi\nmov    %sil,0x25(%rax)\n\n\n2) `vendor/golang.org/x/net/dns/dnsmessage.(*Parser).resourceHeader`:\n\nIt was able to avoid loading a value that\u0027s already in register loaded in some previous basic block:\n...\nmovzbl 0x24(%rax),%r9d   --\u003e   lea    0x1(%rdx),%r9d\ninc    %r9d\n...\n\n\n3) `vendor/golang.org/x/crypto/sha3.(*state).padAndPermute`:\n\nThe change helps to avoid a useless reload locally:\n\nmov    0xc8(%rax),%rcx\nmov    %rcx,0xe0(%rax)\nmov    0xc8(%rax),%rcx     \u003c-- this re-load was removed\ncmp    $0xa8,%rcx\n...\n\n\n4) `gopkg.in/yaml%2ev2.yaml_parser_fetch_stream_start`:\n\nSimilar, but it seems like work with some structure:\nmov    0x108(%rdx),%r8\nmov    0x110(%rdx),%r9\nmov    0x100(%rdx),%r10\nmov    %r10,0xd8(%rsp)\nmov    %r8,0xe0(%rsp)\nmov    %r9,0xe8(%rsp)\nmov    0x108(%rdx),%r8\t\t\u003c-- re-loading\nmov    0x110(%rdx),%r9\t\t\u003c--\nmov    0x100(%rdx),%r10\t\t\u003c--",
      "parentUuid": "6597e448_a72af375",
      "revId": "13a1561f0668703bd71be4fb100eeb41c30d03a7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d198c02b_c3b6c675",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5200
      },
      "writtenOn": "2024-09-17T20:25:17Z",
      "side": 1,
      "message": "We have seen lots of cases where changes in one function cause performance differences in other unrelated functions. We suspect these differences occur due to alignment changes or conflicts in the icache and other pc-keyed caches (e.g. the branch predictor).\n\nDavid even hacked up a bunch of CLs to do randomization during linking to try and tease apart these effects.\nhttps://go-review.googlesource.com/c/benchmarks/+/563895",
      "parentUuid": "f8a3e755_9d945746",
      "revId": "13a1561f0668703bd71be4fb100eeb41c30d03a7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6901145c_df27cb95",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 68008
      },
      "writtenOn": "2024-10-17T22:26:15Z",
      "side": 1,
      "message": "Thank you, these changes and using random config help.\n\nMost of the differences appear due to such effects, anyway the following one seem affected by these changes:\n\nThe StdlibJSON benchmark  has among its hot functions `strconv.ryuDigits`, in which there are some redundant bound checks removed with this change. There are also some others functions (e.g. bytes.(*Reader).Read), but the change in them probably should not have noticeable impact on performance.\n\nThe benhoyt_goawk_1_18 benchmark has several cases in one of its top functions `github.com/benhoyt/goawk/interp.(*interp).execute` when a loaded previously pointer is re-used, e.g.\n```\nmov    0xd0(%rax),%r11\nmovzbl (%r11,%r15,1),%ecx\nmov    0x8(%r11,%r15,1),%rdi\nmov    0x10(%r11,%r15,1),%rsi\n```\n(while the code without this change had to re-load it before the uses).",
      "parentUuid": "d198c02b_c3b6c675",
      "revId": "13a1561f0668703bd71be4fb100eeb41c30d03a7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e533fe5e_fba553f2",
        "filename": "src/cmd/compile/internal/ssa/cse.go",
        "patchSetId": 1
      },
      "lineNbr": 450,
      "author": {
        "id": 5200
      },
      "writtenOn": "2024-09-03T22:46:04Z",
      "side": 1,
      "message": "I worry a bit about this being quadratic in some cases. Not sure if that would actually happen or not. Maybe lots of local declarations would make that happen?",
      "revId": "13a1561f0668703bd71be4fb100eeb41c30d03a7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c708273f_0f6f63cb",
        "filename": "src/cmd/compile/internal/ssa/cse.go",
        "patchSetId": 1
      },
      "lineNbr": 450,
      "author": {
        "id": 68008
      },
      "writtenOn": "2024-09-08T18:09:07Z",
      "side": 1,
      "message": "I\u0027ve updated the loop in `skipDisjointMemDefs` function to not make more than a constant number of steps. It should be linear now (limited by the constant * number of load-like instructions it is called on). Currently the constant is not more than 255 (because of storing it into a byte), probably it should be almost always enough.",
      "parentUuid": "e533fe5e_fba553f2",
      "revId": "13a1561f0668703bd71be4fb100eeb41c30d03a7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "26afb759_095f3114",
        "filename": "src/cmd/compile/internal/ssa/cse.go",
        "patchSetId": 1
      },
      "lineNbr": 451,
      "author": {
        "id": 5200
      },
      "writtenOn": "2024-09-03T22:46:04Z",
      "side": 1,
      "message": "You could use \"continue\" here and \"break\" at the end of the loop body, then you don\u0027t need the \"changed\" variable.",
      "revId": "13a1561f0668703bd71be4fb100eeb41c30d03a7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "817ac29b_06af2ab9",
        "filename": "src/cmd/compile/internal/ssa/cse.go",
        "patchSetId": 1
      },
      "lineNbr": 451,
      "author": {
        "id": 68008
      },
      "writtenOn": "2024-09-08T18:09:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "26afb759_095f3114",
      "revId": "13a1561f0668703bd71be4fb100eeb41c30d03a7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e00eecec_cc503941",
        "filename": "test/prove.go",
        "patchSetId": 1
      },
      "lineNbr": 459,
      "author": {
        "id": 5200
      },
      "writtenOn": "2024-09-03T22:46:04Z",
      "side": 1,
      "message": "This test appears somewhat fragile because we could constant-propagate 0 everywhere pretty easily.",
      "revId": "13a1561f0668703bd71be4fb100eeb41c30d03a7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "45348cc8_b7ebe5e1",
        "filename": "test/prove.go",
        "patchSetId": 1
      },
      "lineNbr": 459,
      "author": {
        "id": 68008
      },
      "writtenOn": "2024-09-08T18:09:07Z",
      "side": 1,
      "message": "I changed it to use the argument `q` pointer in the loads and `p` in the store, for the test it works fine too.",
      "parentUuid": "e00eecec_cc503941",
      "revId": "13a1561f0668703bd71be4fb100eeb41c30d03a7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}