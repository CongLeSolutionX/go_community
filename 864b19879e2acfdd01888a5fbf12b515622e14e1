{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "9cad9c52_0437235a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 5821
      },
      "writtenOn": "2024-08-09T20:22:05Z",
      "side": 1,
      "message": "How much does this increase the size of executables (for example the compiler)?",
      "revId": "864b19879e2acfdd01888a5fbf12b515622e14e1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6c5fdc01_5b7577d6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 64694
      },
      "writtenOn": "2024-08-10T16:01:05Z",
      "side": 1,
      "message": "I don\u0027t think it makes sense to test this value now, there are obvious bugs in this patch that need to be fixed, and the fixes may change the size of the final binary.",
      "parentUuid": "9cad9c52_0437235a",
      "revId": "864b19879e2acfdd01888a5fbf12b515622e14e1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "818f09d5_dfaed463",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 64694
      },
      "writtenOn": "2024-08-10T16:06:23Z",
      "side": 1,
      "message": "I\u0027d like to explain the problem I\u0027m having: the DW_AT_type is supposed to point to a type description, but the string type itself has a type that is not available here. go uses a StringHeader to describe a string, a length uint, and a pointer to the location of the string, but for const strings go handles it specifically Only the string data itself is stored, so we should use a fixed-length uint8 array to describe the data.\n\nI tried to expose this newly generated type using reflectdata.TypeLinksym, but it seems that this function will also add the type to go\u0027s runtime type, which is obviously pointless, the type should only exist in a dwarf.\n\n@alessandro.arzilli@gmail.com Any suggestions?",
      "revId": "864b19879e2acfdd01888a5fbf12b515622e14e1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5907d395_92bd7770",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 5821
      },
      "writtenOn": "2024-08-10T16:17:40Z",
      "side": 1,
      "message": "DW_TAG_constant DIEs do not need to have a type attribute, that\u0027s one possibility, but we should see how other debuggers (gdb, lldb) react to that. Another way could be to write to .rodata the string struct (although what about relocations) and give the DIEs a DW_AT_location attribute.",
      "parentUuid": "818f09d5_dfaed463",
      "revId": "864b19879e2acfdd01888a5fbf12b515622e14e1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ff37580f_b300f827",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 64694
      },
      "writtenOn": "2024-08-10T16:31:55Z",
      "side": 1,
      "message": "I\u0027m not sure how to generate location expression in gc, can you provide some clue?",
      "parentUuid": "5907d395_92bd7770",
      "revId": "864b19879e2acfdd01888a5fbf12b515622e14e1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cc354b19_1a933335",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 64694
      },
      "writtenOn": "2024-08-10T16:33:56Z",
      "side": 1,
      "message": "Writing the full string struct in rodata doesn\u0027t seem feasible, all const strings are specially handled to be aggregated in go:string.* Changing this behavior would cause destructive changes and unnecessarily increase binary size.",
      "parentUuid": "ff37580f_b300f827",
      "revId": "864b19879e2acfdd01888a5fbf12b515622e14e1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0a3a7a8e_3c1e16e2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 5821
      },
      "writtenOn": "2024-08-10T16:49:49Z",
      "side": 1,
      "message": "\u003e I\u0027m not sure how to generate location expression in gc, can you provide some clue?\n\n\nThe code has been changed quite a bit since I last touched it, but it seems to me that now variable DIEs are generated inside the compiler, through obj.(*Link).DwarfGlobal. It would be a similar thing for constants.\n\n\u003e Writing the full string struct in rodata doesn\u0027t seem feasible, all const strings are specially handled to be aggregated in go:string.* Changing this behavior would cause destructive changes and unnecessarily increase binary size.\n\nI\u0027m not suggesting that would be changed. You would write, in addition to that, a string struct where the data field is a relocated address inside the go:string blob. Which increases more the size of the executable is going to depend on the average length of constant strings.",
      "parentUuid": "cc354b19_1a933335",
      "revId": "864b19879e2acfdd01888a5fbf12b515622e14e1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dec80a77_b6ff145f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 5021
      },
      "writtenOn": "2024-08-10T17:23:13Z",
      "side": 1,
      "message": "Suggested an test case for dwarf encoding.",
      "revId": "864b19879e2acfdd01888a5fbf12b515622e14e1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2f632a0b_7d8737e2",
        "filename": "src/runtime/runtime-gdb_test.go",
        "patchSetId": 5
      },
      "lineNbr": 597,
      "author": {
        "id": 5021
      },
      "writtenOn": "2024-08-10T17:23:13Z",
      "side": 1,
      "message": "Could you add a case with a 0 inside? \n\ne.g. \"before zero\\x00 after zero\"\n\nand check that you get that string? This would cross check whether the right type has been chosen to encode strings.",
      "revId": "864b19879e2acfdd01888a5fbf12b515622e14e1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "14bdf9d0_b9de4f97",
        "filename": "src/runtime/runtime-gdb_test.go",
        "patchSetId": 5
      },
      "lineNbr": 597,
      "author": {
        "id": 64694
      },
      "writtenOn": "2024-08-10T17:26:31Z",
      "side": 1,
      "message": "As I mentioned before, this patch is not currently working correctly. gdb is not outputting the correct string values. We need to design a correct DW_AT_type for it",
      "parentUuid": "2f632a0b_7d8737e2",
      "revId": "864b19879e2acfdd01888a5fbf12b515622e14e1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}