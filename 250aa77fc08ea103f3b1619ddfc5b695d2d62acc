{
  "comments": [
    {
      "key": {
        "uuid": "cbc885ac_d93b256a",
        "filename": "src/cmd/compile/internal/arm64/ggen.go",
        "patchSetId": 13
      },
      "lineNbr": 18,
      "author": {
        "id": 13315
      },
      "writtenOn": "2018-06-22T15:00:20Z",
      "side": 1,
      "message": "0 is also 16 bytes aligned. No need the special case now.",
      "range": {
        "startLine": 18,
        "startChar": 4,
        "endLine": 18,
        "endChar": 15
      },
      "revId": "250aa77fc08ea103f3b1619ddfc5b695d2d62acc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "28d9e8ca_0270a612",
        "filename": "src/cmd/compile/internal/arm64/ggen.go",
        "patchSetId": 13
      },
      "lineNbr": 18,
      "author": {
        "id": 16227
      },
      "writtenOn": "2018-06-25T09:13:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cbc885ac_d93b256a",
      "range": {
        "startLine": 18,
        "startChar": 4,
        "endLine": 18,
        "endChar": 15
      },
      "revId": "250aa77fc08ea103f3b1619ddfc5b695d2d62acc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5965d45a_fb1362fe",
        "filename": "src/cmd/compile/internal/gc/pgen.go",
        "patchSetId": 13
      },
      "lineNbr": 435,
      "author": {
        "id": 13315
      },
      "writtenOn": "2018-06-22T15:00:20Z",
      "side": 1,
      "message": "I\u0027m not sure I understand this part. If FP is enabled and GOARCH is ARM64, it seems the result is the same before and after. Do you mean to subtract Widthptr regardless of whether FP is enabled on ARM64? Why?",
      "range": {
        "startLine": 430,
        "startChar": 0,
        "endLine": 435,
        "endChar": 35
      },
      "revId": "250aa77fc08ea103f3b1619ddfc5b695d2d62acc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0827d6b1_1903846c",
        "filename": "src/cmd/compile/internal/gc/pgen.go",
        "patchSetId": 13
      },
      "lineNbr": 435,
      "author": {
        "id": 16227
      },
      "writtenOn": "2018-06-25T09:13:31Z",
      "side": 1,
      "message": "Yes, for implementation simplicity, the stack layout is the same for both disabling and enabling FP. The main challenge is that there are some hard-code offsets inside run-time.",
      "parentUuid": "5965d45a_fb1362fe",
      "range": {
        "startLine": 430,
        "startChar": 0,
        "endLine": 435,
        "endChar": 35
      },
      "revId": "250aa77fc08ea103f3b1619ddfc5b695d2d62acc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5d2ca224_5926b900",
        "filename": "src/cmd/compile/internal/gc/pgen.go",
        "patchSetId": 13
      },
      "lineNbr": 435,
      "author": {
        "id": 13315
      },
      "writtenOn": "2018-06-30T23:15:23Z",
      "side": 1,
      "message": "Ok. Probably rearrange it as\n\n\tif Ctxt.FixedFrameSize() \u003d\u003d 0 {\n\t\toffs -\u003d int64(Widthptr)\n\t}\n\tif objabi.Framepointer_enabled(objabi.GOOS, objabi.GOARCH) || objabi.GOARCH \u003d\u003d \"arm64\" {\n\t\toffs -\u003d int64(Widthptr)\n\t}\n\nAlso comment that we leave the space for FP on ARM64, even if the frame pointer is disabled.",
      "parentUuid": "0827d6b1_1903846c",
      "range": {
        "startLine": 430,
        "startChar": 0,
        "endLine": 435,
        "endChar": 35
      },
      "revId": "250aa77fc08ea103f3b1619ddfc5b695d2d62acc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "272304ae_51790a66",
        "filename": "src/cmd/compile/internal/gc/pgen.go",
        "patchSetId": 13
      },
      "lineNbr": 435,
      "author": {
        "id": 16227
      },
      "writtenOn": "2018-07-03T10:07:30Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5d2ca224_5926b900",
      "range": {
        "startLine": 430,
        "startChar": 0,
        "endLine": 435,
        "endChar": 35
      },
      "revId": "250aa77fc08ea103f3b1619ddfc5b695d2d62acc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f5984cfd_f0eb19d6",
        "filename": "src/cmd/compile/internal/gc/pgen.go",
        "patchSetId": 13
      },
      "lineNbr": 640,
      "author": {
        "id": 13315
      },
      "writtenOn": "2018-06-30T23:15:23Z",
      "side": 1,
      "message": "Same here.",
      "revId": "250aa77fc08ea103f3b1619ddfc5b695d2d62acc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e09baeba_5cf9a509",
        "filename": "src/cmd/compile/internal/gc/pgen.go",
        "patchSetId": 13
      },
      "lineNbr": 640,
      "author": {
        "id": 16227
      },
      "writtenOn": "2018-07-03T10:07:30Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f5984cfd_f0eb19d6",
      "revId": "250aa77fc08ea103f3b1619ddfc5b695d2d62acc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6856d08a_adcee95d",
        "filename": "src/cmd/internal/obj/arm64/asm7.go",
        "patchSetId": 13
      },
      "lineNbr": 1448,
      "author": {
        "id": 13315
      },
      "writtenOn": "2018-06-22T15:00:20Z",
      "side": 1,
      "message": "8 or16 now",
      "range": {
        "startLine": 1448,
        "startChar": 20,
        "endLine": 1448,
        "endChar": 22
      },
      "revId": "250aa77fc08ea103f3b1619ddfc5b695d2d62acc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7afb0b82_f28291f2",
        "filename": "src/cmd/internal/obj/arm64/asm7.go",
        "patchSetId": 13
      },
      "lineNbr": 1448,
      "author": {
        "id": 16227
      },
      "writtenOn": "2018-06-25T09:13:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6856d08a_adcee95d",
      "range": {
        "startLine": 1448,
        "startChar": 20,
        "endLine": 1448,
        "endChar": 22
      },
      "revId": "250aa77fc08ea103f3b1619ddfc5b695d2d62acc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d92a060c_c9f90935",
        "filename": "src/cmd/internal/obj/arm64/asm7.go",
        "patchSetId": 13
      },
      "lineNbr": 1549,
      "author": {
        "id": 13315
      },
      "writtenOn": "2018-06-22T15:00:20Z",
      "side": 1,
      "message": "Same here.",
      "range": {
        "startLine": 1549,
        "startChar": 20,
        "endLine": 1549,
        "endChar": 22
      },
      "revId": "250aa77fc08ea103f3b1619ddfc5b695d2d62acc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d2f62881_7e53afab",
        "filename": "src/cmd/internal/obj/arm64/asm7.go",
        "patchSetId": 13
      },
      "lineNbr": 1549,
      "author": {
        "id": 16227
      },
      "writtenOn": "2018-06-25T09:13:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d92a060c_c9f90935",
      "range": {
        "startLine": 1549,
        "startChar": 20,
        "endLine": 1549,
        "endChar": 22
      },
      "revId": "250aa77fc08ea103f3b1619ddfc5b695d2d62acc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3fd86ec7_58baa889",
        "filename": "src/cmd/internal/objabi/util.go",
        "patchSetId": 13
      },
      "lineNbr": 79,
      "author": {
        "id": 13315
      },
      "writtenOn": "2018-06-22T15:00:20Z",
      "side": 1,
      "message": "Do we want to enable frame pointer on darwin? Per previous discussion, it doesn\u0027t seem to help. I\u0027m not sure whether it causes problem. Elias?",
      "revId": "250aa77fc08ea103f3b1619ddfc5b695d2d62acc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b6e9060c_cbba3178",
        "filename": "src/cmd/internal/objabi/util.go",
        "patchSetId": 13
      },
      "lineNbr": 79,
      "author": {
        "id": 7435
      },
      "writtenOn": "2018-06-22T22:23:54Z",
      "side": 1,
      "message": "Cherry-picking this CL on top of tip (CL 120495) GOARCH\u003darm64 iostest.bash runs until the testcarchive test, which hangs. I\u0027ve confirmed the testcarchive test works on darwin/arm with this CL as well as on darwin/arm64 if I don\u0027t apply this CL.",
      "parentUuid": "3fd86ec7_58baa889",
      "revId": "250aa77fc08ea103f3b1619ddfc5b695d2d62acc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1d930031_04258a7e",
        "filename": "src/cmd/internal/objabi/util.go",
        "patchSetId": 13
      },
      "lineNbr": 79,
      "author": {
        "id": 16227
      },
      "writtenOn": "2018-06-25T09:13:31Z",
      "side": 1,
      "message": "I don\u0027t have darwin/arm64 environment but your result surprises me since this CL is almost system-independent. Could you please help collect the call stack dumps triggered by the timeout of running the test case?\nYou can also comment line 1049 and 1050 of file src/runtime/asm_arm64.s to see if there is any changes to the result.",
      "parentUuid": "b6e9060c_cbba3178",
      "revId": "250aa77fc08ea103f3b1619ddfc5b695d2d62acc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b1b95f25_cddd5946",
        "filename": "src/cmd/internal/objabi/util.go",
        "patchSetId": 13
      },
      "lineNbr": 79,
      "author": {
        "id": 7435
      },
      "writtenOn": "2018-06-25T11:06:05Z",
      "side": 1,
      "message": "With PS 14, the std tests crash with errors that look like memory corruption. I\u0027ve pasted a few such traces here: https://pastebin.com/2gm8wCMA.\n\nCommenting line 1049 and 1050 in asm_arm64.s doesn\u0027t seem to make a difference (the tests still crash).",
      "parentUuid": "1d930031_04258a7e",
      "revId": "250aa77fc08ea103f3b1619ddfc5b695d2d62acc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cbaf2a82_87022b9a",
        "filename": "src/cmd/internal/objabi/util.go",
        "patchSetId": 13
      },
      "lineNbr": 79,
      "author": {
        "id": 16227
      },
      "writtenOn": "2018-06-26T07:44:03Z",
      "side": 1,
      "message": "Elias, could you please try PS15? Any feedback is appreciated!",
      "parentUuid": "b1b95f25_cddd5946",
      "revId": "250aa77fc08ea103f3b1619ddfc5b695d2d62acc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0a2683a9_251fefeb",
        "filename": "src/cmd/internal/objabi/util.go",
        "patchSetId": 13
      },
      "lineNbr": 79,
      "author": {
        "id": 7435
      },
      "writtenOn": "2018-06-26T08:05:02Z",
      "side": 1,
      "message": "I ran the first few std tests and the testcarchive test and they all passed:\n\n$ GOARCH\u003darm64 ./iostest.bash \nBuilding Go cmd/dist using /Users/elias/go1.10.1.\nBuilding Go toolchain1 using /Users/elias/go1.10.1.\nBuilding Go bootstrap cmd/go (go_bootstrap) using Go toolchain1.\nBuilding Go toolchain2 using go_bootstrap and Go toolchain1.\nBuilding Go toolchain3 using go_bootstrap and Go toolchain2.\nBuilding packages and commands for host, darwin/amd64.\nBuilding packages and commands for target, darwin/arm64.\n---\nInstalled Go for darwin/arm64 in /Users/elias/go-tip\nInstalled commands in /Users/elias/go-tip/bin\n\n##### Testing packages.\nok  \tarchive/tar\t43.616s\nok  \tarchive/zip\t34.258s\nok  \tbufio\t18.745s\nok  \tbytes\t55.588s\nok  \tcompress/bzip2\t49.726s\nok  \tcompress/flate\t46.021s\n^C\n\n$ GOARCH\u003darm64 go tool dist test testcarchive\n\n##### ../misc/cgo/testcarchive\nPASS\n\nALL TESTS PASSED (some were excluded)",
      "parentUuid": "cbaf2a82_87022b9a",
      "revId": "250aa77fc08ea103f3b1619ddfc5b695d2d62acc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9d0c7006_4550da62",
        "filename": "src/runtime/asm_arm64.s",
        "patchSetId": 13
      },
      "lineNbr": 1022,
      "author": {
        "id": 13315
      },
      "writtenOn": "2018-06-22T15:00:20Z",
      "side": 1,
      "message": "Do we need to increase the frame size here? It doesn\u0027t seem to store anything there. Also, it\u0027s hard to understand what these numbers are for.",
      "range": {
        "startLine": 1022,
        "startChar": 16,
        "endLine": 1022,
        "endChar": 19
      },
      "revId": "250aa77fc08ea103f3b1619ddfc5b695d2d62acc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a42ae566_4044b7eb",
        "filename": "src/runtime/asm_arm64.s",
        "patchSetId": 13
      },
      "lineNbr": 1022,
      "author": {
        "id": 16227
      },
      "writtenOn": "2018-06-25T09:13:31Z",
      "side": 1,
      "message": "It\u0027s needed to align with the stack layout (i.e frame size is indeed 32+16) assumed by assembler. Otherwise there will be problems when doing traceback.",
      "parentUuid": "9d0c7006_4550da62",
      "range": {
        "startLine": 1022,
        "startChar": 16,
        "endLine": 1022,
        "endChar": 19
      },
      "revId": "250aa77fc08ea103f3b1619ddfc5b695d2d62acc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "248eb077_8425849d",
        "filename": "src/runtime/asm_arm64.s",
        "patchSetId": 13
      },
      "lineNbr": 1022,
      "author": {
        "id": 13315
      },
      "writtenOn": "2018-06-30T23:15:23Z",
      "side": 1,
      "message": "If we change the declared frame size from 24 to 16, the assembler will make the actual frame size 32, and it should just work without adding 16 here?",
      "parentUuid": "a42ae566_4044b7eb",
      "range": {
        "startLine": 1022,
        "startChar": 16,
        "endLine": 1022,
        "endChar": 19
      },
      "revId": "250aa77fc08ea103f3b1619ddfc5b695d2d62acc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9cf220af_e58de9ea",
        "filename": "src/runtime/asm_arm64.s",
        "patchSetId": 13
      },
      "lineNbr": 1022,
      "author": {
        "id": 16227
      },
      "writtenOn": "2018-07-03T10:07:30Z",
      "side": 1,
      "message": "we can\u0027t declare the frame size as 16 because this function does need 3 frame words (savedm, savedsp and one parameter (i.e ctxt) for calling func: cgocallbackg)",
      "parentUuid": "248eb077_8425849d",
      "range": {
        "startLine": 1022,
        "startChar": 16,
        "endLine": 1022,
        "endChar": 19
      },
      "revId": "250aa77fc08ea103f3b1619ddfc5b695d2d62acc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3d37f23a_b8f4be0b",
        "filename": "src/runtime/cgocall.go",
        "patchSetId": 13
      },
      "lineNbr": 269,
      "author": {
        "id": 13315
      },
      "writtenOn": "2018-06-22T15:00:20Z",
      "side": 1,
      "message": "Update the comment. (or not, if we decided not to do the change in asm_arm64.s)",
      "revId": "250aa77fc08ea103f3b1619ddfc5b695d2d62acc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f60226bf_d48f1e61",
        "filename": "src/runtime/cgocall.go",
        "patchSetId": 13
      },
      "lineNbr": 269,
      "author": {
        "id": 16227
      },
      "writtenOn": "2018-06-25T09:13:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3d37f23a_b8f4be0b",
      "revId": "250aa77fc08ea103f3b1619ddfc5b695d2d62acc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "72a665c9_d958b731",
        "filename": "src/runtime/traceback.go",
        "patchSetId": 13
      },
      "lineNbr": 271,
      "author": {
        "id": 13315
      },
      "writtenOn": "2018-06-22T15:00:20Z",
      "side": 1,
      "message": "This can be just combined with the AMD64 case below.",
      "revId": "250aa77fc08ea103f3b1619ddfc5b695d2d62acc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c7f79cda_71d38a02",
        "filename": "src/runtime/traceback.go",
        "patchSetId": 13
      },
      "lineNbr": 271,
      "author": {
        "id": 16227
      },
      "writtenOn": "2018-06-25T09:13:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "72a665c9_d958b731",
      "revId": "250aa77fc08ea103f3b1619ddfc5b695d2d62acc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f502f1a0_c9f1311f",
        "filename": "test/nosplit.go",
        "patchSetId": 13
      },
      "lineNbr": 211,
      "author": {
        "id": 13315
      },
      "writtenOn": "2018-06-22T15:00:20Z",
      "side": 1,
      "message": "I assume this also applies to ARM64 now?\n\nWe probably could check both frame pointer on and off, with something like changing goarch from amd64 to amd64nofp if frame pointer is off, then we can code both cases into the tests. Not necessarily in this CL.",
      "range": {
        "startLine": 208,
        "startChar": 0,
        "endLine": 211,
        "endChar": 2
      },
      "revId": "250aa77fc08ea103f3b1619ddfc5b695d2d62acc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d64f3fa2_2b3672cd",
        "filename": "test/nosplit.go",
        "patchSetId": 13
      },
      "lineNbr": 211,
      "author": {
        "id": 16227
      },
      "writtenOn": "2018-06-25T09:13:31Z",
      "side": 1,
      "message": "Yes, it\u0027s better to do it in another CL.",
      "parentUuid": "f502f1a0_c9f1311f",
      "range": {
        "startLine": 208,
        "startChar": 0,
        "endLine": 211,
        "endChar": 2
      },
      "revId": "250aa77fc08ea103f3b1619ddfc5b695d2d62acc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cf6b0098_6d3df2d6",
        "filename": "test/nosplit.go",
        "patchSetId": 13
      },
      "lineNbr": 211,
      "author": {
        "id": 13315
      },
      "writtenOn": "2018-06-30T23:15:23Z",
      "side": 1,
      "message": "Does the test pass if the frame pointer is disabled on ARM64? If not, we would need to disable the test when frame pointer is off, in this CL.",
      "parentUuid": "d64f3fa2_2b3672cd",
      "range": {
        "startLine": 208,
        "startChar": 0,
        "endLine": 211,
        "endChar": 2
      },
      "revId": "250aa77fc08ea103f3b1619ddfc5b695d2d62acc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c1ecfc12_917a3b89",
        "filename": "test/nosplit.go",
        "patchSetId": 13
      },
      "lineNbr": 211,
      "author": {
        "id": 16227
      },
      "writtenOn": "2018-07-03T10:07:30Z",
      "side": 1,
      "message": "Yes, tests pass if the frame pointer is disabled on ARM64 since we have the same stack layout for both enabled and disabled frame pointer.",
      "parentUuid": "cf6b0098_6d3df2d6",
      "range": {
        "startLine": 208,
        "startChar": 0,
        "endLine": 211,
        "endChar": 2
      },
      "revId": "250aa77fc08ea103f3b1619ddfc5b695d2d62acc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}