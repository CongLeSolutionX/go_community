{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "5e8c8d17_98f8f8b6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-08-17T13:29:03Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003daae31051\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "aae31051174de078df40de50323010daaff8d0d0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "df3322e6_c206ce93",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-08-17T13:42:44Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "5e8c8d17_98f8f8b6",
      "tag": "autogenerated:trybots~happy",
      "revId": "aae31051174de078df40de50323010daaff8d0d0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d6403401_05edcbb9",
        "filename": "src/runtime/traceback.go",
        "patchSetId": 1
      },
      "lineNbr": 663,
      "author": {
        "id": 13315
      },
      "writtenOn": "2022-08-18T21:46:47Z",
      "side": 1,
      "message": "Maybe add a test to check if this is actually inlined?",
      "revId": "aae31051174de078df40de50323010daaff8d0d0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e5a98bd2_e2603bc7",
        "filename": "src/runtime/traceback.go",
        "patchSetId": 1
      },
      "lineNbr": 663,
      "author": {
        "id": 5167
      },
      "writtenOn": "2022-08-25T21:32:57Z",
      "side": 1,
      "message": "Oops, this is actually a stale comment, so I\u0027ve deleted it. This replaced getArgInfoFast, which was originally written to be inlineable, but at this point it really doesn\u0027t matter because of other changes in the code since then. It\u0027s in fact *not* inlineable (cost 84 \u003e threshold 80 ðŸ˜Š), but I don\u0027t think it matters.",
      "parentUuid": "d6403401_05edcbb9",
      "revId": "aae31051174de078df40de50323010daaff8d0d0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d213b81a_8f406e51",
        "filename": "src/runtime/traceback.go",
        "patchSetId": 1
      },
      "lineNbr": 676,
      "author": {
        "id": 13315
      },
      "writtenOn": "2022-08-18T21:46:47Z",
      "side": 1,
      "message": "For non-reflect case, it only populates argMap.n but not the data pointer? This could be confusing.\n\nActually, why this only handles the special case, but let the caller to handle the non-special case?",
      "revId": "aae31051174de078df40de50323010daaff8d0d0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4a6dcb2d_db6cd7f5",
        "filename": "src/runtime/traceback.go",
        "patchSetId": 1
      },
      "lineNbr": 676,
      "author": {
        "id": 5167
      },
      "writtenOn": "2022-08-25T21:32:57Z",
      "side": 1,
      "message": "I agree, it\u0027s weird. This structure came over from the old code, except that getArgInfo returned the length in *two* different ways and I found that even more confusing than this.\n\nI would be happy for this to be cleaner, but there are two reasons why it\u0027s structured this way:\n\n1. This function is used by both argBytes and getStackMap. argBytes doesn\u0027t care about the stack map, but we have to fetch it to get the size in exactly these two weird cases.\n\n2. To fetch the stack map in general, we need to know the PC and need to interpret PCDATA, but we don\u0027t need that in these cases (or for argBytes).\n\nSo we wind up with this weird matrix where we need to get either just the argument frame size (argBytes) or the whole stack map (getStackMap), and we\u0027re doing it for either a normal function or a special function.\n\n- argBytes/normal: Just f.args. Don\u0027t need PC.\n\n- argBytes/special: Need to decode the dynamic map. Don\u0027t need PC.\n\n- getStackMap/normal: If f.args \u003e 0, use PC, PCDATA, and FUCNDATA. Otherwise, it\u0027s empty.\n\n- getStackMap/special: Need to decode the dynamic map. Don\u0027t need PC.\n\nIn all cases, we need to determine if it\u0027s a normal or special function and right now we do that by looking at f.args and then the name.\n\nThis leads to this weird division of labor. I\u0027m not sure there\u0027s a better way to divide the problem, though it\u0027s possible a better API to argMapInternal would at least make this clearer.",
      "parentUuid": "d213b81a_8f406e51",
      "revId": "aae31051174de078df40de50323010daaff8d0d0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "453f86a1_b66b4b98",
        "filename": "src/runtime/traceback.go",
        "patchSetId": 1
      },
      "lineNbr": 676,
      "author": {
        "id": 13315
      },
      "writtenOn": "2022-08-26T20:36:09Z",
      "side": 1,
      "message": "Yeah, this is complex. Maybe mention in the comment that in the non-reflect case only argMap.n is populated.",
      "parentUuid": "4a6dcb2d_db6cd7f5",
      "revId": "aae31051174de078df40de50323010daaff8d0d0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d6cc5d57_ce870a2b",
        "filename": "src/runtime/traceback.go",
        "patchSetId": 1
      },
      "lineNbr": 680,
      "author": {
        "id": 12120
      },
      "writtenOn": "2022-08-19T19:09:20Z",
      "side": 1,
      "message": "Along the lines of Cherry\u0027s suggestion, I think it would also be cleaner to invert these conditions for early return.\n\n    if f.args !\u003d _ArgsSizeUnknown {\n        return\n    }\n    name :\u003d funcname(f)\n    if name !\u003d \"reflect.makeFuncStub\" \u0026\u0026 name !\u003d \"reflect.methodValueCall\" {\n        return\n    }\n    ... body ...",
      "range": {
        "startLine": 677,
        "startChar": 0,
        "endLine": 680,
        "endChar": 57
      },
      "revId": "aae31051174de078df40de50323010daaff8d0d0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "05596dae_d31446b1",
        "filename": "src/runtime/traceback.go",
        "patchSetId": 1
      },
      "lineNbr": 680,
      "author": {
        "id": 5167
      },
      "writtenOn": "2022-08-26T18:41:08Z",
      "side": 1,
      "message": "Done in go.dev/cl/425936 to keep the diff in this CL minimal.\n\n(I had actually done that, and then pulled it off into a scratch file and then completely forgot about it. So thank you for the reminder!)",
      "parentUuid": "d6cc5d57_ce870a2b",
      "range": {
        "startLine": 677,
        "startChar": 0,
        "endLine": 680,
        "endChar": 57
      },
      "revId": "aae31051174de078df40de50323010daaff8d0d0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}