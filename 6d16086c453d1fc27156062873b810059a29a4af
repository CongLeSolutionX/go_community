{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "9dfc5fe0_93f10186",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-08-13T08:31:05Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003d6d16086c",
      "tag": "autogenerated:trybots~beginning",
      "revId": "6d16086c453d1fc27156062873b810059a29a4af",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dcbb30fd_ee73fe25",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-08-13T08:42:22Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "9dfc5fe0_93f10186",
      "tag": "autogenerated:trybots~happy",
      "revId": "6d16086c453d1fc27156062873b810059a29a4af",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "71915d71_eb45c6e0",
        "filename": "src/cmd/compile/internal/reflectdata/reflect.go",
        "patchSetId": 2
      },
      "lineNbr": 43,
      "author": {
        "id": 5200
      },
      "writtenOn": "2021-08-17T21:14:25Z",
      "side": 1,
      "message": "This isn\u0027t really a set any more. It\u0027s a tri-state thing.\nnot seen, seen but not written, written.\nThis probably needs a new name, and maybe an enum of states (with 0 being the \"not seen yet\" state).",
      "range": {
        "startLine": 43,
        "startChar": 1,
        "endLine": 43,
        "endChar": 10
      },
      "revId": "6d16086c453d1fc27156062873b810059a29a4af",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0b405e0a_40755f99",
        "filename": "src/cmd/compile/internal/reflectdata/reflect.go",
        "patchSetId": 2
      },
      "lineNbr": 43,
      "author": {
        "id": 14665
      },
      "writtenOn": "2021-08-18T08:52:07Z",
      "side": 1,
      "message": "If we agree with the discussion below, then we don\u0027t need this change, just removing \"delete(signatset, t)\" line is enough.",
      "parentUuid": "71915d71_eb45c6e0",
      "range": {
        "startLine": 43,
        "startChar": 1,
        "endLine": 43,
        "endChar": 10
      },
      "revId": "6d16086c453d1fc27156062873b810059a29a4af",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "03e3b458_cf05d83a",
        "filename": "src/cmd/compile/internal/reflectdata/reflect.go",
        "patchSetId": 2
      },
      "lineNbr": 1264,
      "author": {
        "id": 5200
      },
      "writtenOn": "2021-08-17T21:14:25Z",
      "side": 1,
      "message": "This seems strange because then when someone subsequently calls NeedRuntimeType, we\u0027ll add it again, process it in the first half of this function, only to not do anything in writeType. Can\u0027t we leave the entry in there?",
      "revId": "6d16086c453d1fc27156062873b810059a29a4af",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "62bdd221_827ff1fc",
        "filename": "src/cmd/compile/internal/reflectdata/reflect.go",
        "patchSetId": 2
      },
      "lineNbr": 1264,
      "author": {
        "id": 14665
      },
      "writtenOn": "2021-08-18T05:01:38Z",
      "side": 1,
      "message": "Not sure I got your point. We need to remove T from signatset after finishing writeType(T), otherwise, we will go into infinite loop if leave T in signatset.\n\nPrior to this CL, it\u0027s fine to leave T in signatset like you said, but that will leave us in a weird situation during debugging, e.g, if writeType(T) add T to signatset again, you will see T in signatset while writing type for T.\n\nMy motivation to make this change is prevent that weird state, it makes hard to debug bug like one in #46386.",
      "parentUuid": "03e3b458_cf05d83a",
      "revId": "6d16086c453d1fc27156062873b810059a29a4af",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c446fde1_7b13dda1",
        "filename": "src/cmd/compile/internal/reflectdata/reflect.go",
        "patchSetId": 2
      },
      "lineNbr": 1264,
      "author": {
        "id": 5200
      },
      "writtenOn": "2021-08-18T05:45:41Z",
      "side": 1,
      "message": "If we leave types in signatset, then NeedRuntimeType will not add that type again to signatslice, and thus we\u0027ll never call writeType on it again. Doesn\u0027t that provide what you\u0027re looking for?",
      "parentUuid": "62bdd221_827ff1fc",
      "revId": "6d16086c453d1fc27156062873b810059a29a4af",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "864c2c94_30932eaa",
        "filename": "src/cmd/compile/internal/reflectdata/reflect.go",
        "patchSetId": 2
      },
      "lineNbr": 1264,
      "author": {
        "id": 14665
      },
      "writtenOn": "2021-08-18T07:37:46Z",
      "side": 1,
      "message": "Ah, but there’re 2 problems:\n\n - writeType(T) may call NeedRuntimeType(T\u0027)\n - then we need to check whether all types in signatset are in written state to terminate the loop (signatset[T] \u003d\u003d true), which I believe will affect compile time.\n \nNote that we only care in situation that T is added to signatset when we are writing T, which we dont want. If T are added back to signatset after each iteration, it’s ok.",
      "parentUuid": "c446fde1_7b13dda1",
      "revId": "6d16086c453d1fc27156062873b810059a29a4af",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b7f4ef91_b810eea5",
        "filename": "src/cmd/compile/internal/reflectdata/reflect.go",
        "patchSetId": 2
      },
      "lineNbr": 1264,
      "author": {
        "id": 14665
      },
      "writtenOn": "2021-08-18T08:16:34Z",
      "side": 1,
      "message": "Hmm, sounds like you\u0027re right, keeping the type in signatset is ok, here\u0027s the result of compilecmp:\n\n```\ncompilecmp master -\u003e HEAD\nmaster (cf12b0d1f9): cmd/trace: use newTaskDesc to create taskDesc\nHEAD (3b064db4a6): cmd/compile: prevent duplicated works in WriteRuntimeTypes\n\nbenchstat -geomean  /var/folders/rz/mxg9f82d2kl7jycb_rvrdp2r0000gn/T/957568437 /var/folders/rz/mxg9f82d2kl7jycb_rvrdp2r0000gn/T/267251600\ncompleted 5 of 5, estimated time remaining 0s (ETA 3:13PM)\nname                      old time/op       new time/op       delta\nTemplate                        119ms ± 2%        118ms ± 1%    ~     (p\u003d0.548 n\u003d5+5)\nUnicode                        47.4ms ± 4%       47.4ms ± 5%    ~     (p\u003d0.548 n\u003d5+5)\nGoTypes                         552ms ± 3%        548ms ± 3%    ~     (p\u003d1.000 n\u003d5+5)\nCompiler                       46.7ms ± 8%       45.6ms ± 5%    ~     (p\u003d0.421 n\u003d5+5)\nSSA                             4.69s ± 2%        4.68s ± 1%    ~     (p\u003d0.690 n\u003d5+5)\nFlate                          72.7ms ± 1%       74.5ms ± 2%    ~     (p\u003d0.063 n\u003d4+5)\nGoParser                        130ms ± 1%        131ms ± 2%    ~     (p\u003d0.222 n\u003d5+5)\nTar                            98.5ms ± 3%       97.6ms ± 1%    ~     (p\u003d0.151 n\u003d5+5)\nXML                             136ms ± 4%        137ms ± 3%    ~     (p\u003d0.548 n\u003d5+5)\nLinkCompiler                    324ms ± 1%        326ms ± 2%    ~     (p\u003d0.413 n\u003d4+5)\nExternalLinkCompiler            1.73s ± 1%        1.73s ± 1%    ~     (p\u003d0.841 n\u003d5+5)\nLinkWithoutDebugCompiler        207ms ± 1%        207ms ± 1%    ~     (p\u003d1.000 n\u003d5+5)\n[Geo mean]                      215ms             215ms       -0.00%\n\nname                      old user-time/op  new user-time/op  delta\nTemplate                        157ms ± 3%        155ms ± 1%    ~     (p\u003d0.095 n\u003d5+5)\nUnicode                        67.6ms ±11%       66.8ms ± 7%    ~     (p\u003d0.548 n\u003d5+5)\nGoTypes                         772ms ± 6%        778ms ± 2%    ~     (p\u003d0.690 n\u003d5+5)\nCompiler                       59.4ms ± 7%       59.3ms ± 9%    ~     (p\u003d1.000 n\u003d5+5)\nSSA                             6.77s ± 1%        6.79s ± 1%    ~     (p\u003d0.841 n\u003d5+5)\nFlate                          92.1ms ± 4%       89.2ms ± 4%    ~     (p\u003d0.095 n\u003d5+5)\nGoParser                        168ms ± 1%        169ms ± 0%    ~     (p\u003d0.063 n\u003d5+4)\nTar                             126ms ± 8%        126ms ± 4%    ~     (p\u003d0.690 n\u003d5+5)\nXML                             172ms ± 1%        173ms ± 4%    ~     (p\u003d0.690 n\u003d5+5)\nLinkCompiler                    511ms ± 3%        508ms ± 1%    ~     (p\u003d0.690 n\u003d5+5)\nExternalLinkCompiler            1.72s ± 1%        1.72s ± 0%    ~     (p\u003d0.310 n\u003d5+5)\nLinkWithoutDebugCompiler        240ms ± 1%        237ms ± 1%    ~     (p\u003d0.222 n\u003d5+5)\n[Geo mean]                      280ms             279ms       -0.43%\n\nname                      old alloc/op      new alloc/op      delta\nTemplate                       38.9MB ± 0%       38.9MB ± 0%  +0.03%  (p\u003d0.032 n\u003d5+5)\nUnicode                        26.9MB ± 0%       26.9MB ± 0%    ~     (p\u003d0.056 n\u003d5+5)\nGoTypes                         179MB ± 0%        179MB ± 0%    ~     (p\u003d0.222 n\u003d5+5)\nCompiler                       19.8MB ± 0%       19.8MB ± 0%    ~     (p\u003d0.310 n\u003d5+5)\nSSA                            1.60GB ± 0%       1.60GB ± 0%    ~     (p\u003d1.000 n\u003d5+5)\nFlate                          23.4MB ± 0%       23.4MB ± 0%    ~     (p\u003d0.151 n\u003d5+5)\nGoParser                       42.5MB ± 0%       42.5MB ± 0%    ~     (p\u003d0.690 n\u003d5+5)\nTar                            34.8MB ± 0%       34.8MB ± 0%    ~     (p\u003d0.056 n\u003d5+5)\nXML                            44.2MB ± 0%       44.2MB ± 0%    ~     (p\u003d0.381 n\u003d5+5)\nLinkCompiler                    167MB ± 0%        166MB ± 0%  -0.56%  (p\u003d0.008 n\u003d5+5)\nExternalLinkCompiler            215MB ± 0%        215MB ± 0%    ~     (p\u003d0.690 n\u003d5+5)\nLinkWithoutDebugCompiler        112MB ± 0%        112MB ± 0%    ~     (p\u003d1.000 n\u003d5+5)\n[Geo mean]                     75.9MB            75.9MB       -0.04%\n\nname                      old allocs/op     new allocs/op     delta\nTemplate                         431k ± 0%         431k ± 0%    ~     (p\u003d0.730 n\u003d5+5)\nUnicode                          319k ± 0%         319k ± 0%    ~     (p\u003d0.111 n\u003d5+5)\nGoTypes                         2.11M ± 0%        2.11M ± 0%    ~     (p\u003d0.095 n\u003d5+5)\nCompiler                         171k ± 0%         171k ± 0%  -0.07%  (p\u003d0.008 n\u003d5+5)\nSSA                             17.7M ± 0%        17.7M ± 0%    ~     (p\u003d0.222 n\u003d5+5)\nFlate                            260k ± 0%         260k ± 0%  +0.02%  (p\u003d0.016 n\u003d5+5)\nGoParser                         482k ± 0%         482k ± 0%    ~     (p\u003d1.000 n\u003d5+5)\nTar                              393k ± 0%         393k ± 0%    ~     (p\u003d0.421 n\u003d5+5)\nXML                              489k ± 0%         489k ± 0%    ~     (p\u003d0.159 n\u003d5+5)\nLinkCompiler                     812k ± 0%         812k ± 0%  +0.03%  (p\u003d0.016 n\u003d5+5)\nExternalLinkCompiler            1.04M ± 0%        1.04M ± 0%  -0.03%  (p\u003d0.008 n\u003d5+5)\nLinkWithoutDebugCompiler         371k ± 0%         371k ± 0%    ~     (p\u003d0.421 n\u003d5+5)\n[Geo mean]                       658k              658k       -0.00%\n\nname                      old maxRSS/op     new maxRSS/op     delta\nTemplate                        42.6M ± 1%        42.4M ± 2%    ~     (p\u003d0.841 n\u003d5+5)\nUnicode                         38.4M ± 1%        38.3M ± 0%    ~     (p\u003d0.690 n\u003d5+5)\nGoTypes                          108M ± 3%         108M ± 2%    ~     (p\u003d1.000 n\u003d5+5)\nCompiler                        36.8M ± 3%        37.3M ± 1%    ~     (p\u003d0.286 n\u003d5+5)\nSSA                              742M ± 1%         750M ± 1%    ~     (p\u003d0.095 n\u003d5+5)\nFlate                           33.2M ± 2%        33.4M ± 1%    ~     (p\u003d0.341 n\u003d5+5)\nGoParser                        44.0M ± 0%        43.9M ± 1%    ~     (p\u003d1.000 n\u003d5+5)\nTar                             40.4M ± 1%        40.4M ± 2%    ~     (p\u003d1.000 n\u003d5+5)\nXML                             46.2M ± 2%        46.2M ± 1%    ~     (p\u003d1.000 n\u003d5+5)\nLinkCompiler                     257M ± 1%         257M ± 2%    ~     (p\u003d0.841 n\u003d5+5)\nExternalLinkCompiler             261M ± 1%         260M ± 0%    ~     (p\u003d0.841 n\u003d5+5)\nLinkWithoutDebugCompiler         216M ± 1%         216M ± 0%    ~     (p\u003d1.000 n\u003d5+5)\n[Geo mean]                      87.1M             87.2M       +0.16%\n\nname                      old object-bytes  new object-bytes  delta\nTemplate                        576kB ± 0%        576kB ± 0%    ~     (all equal)\nUnicode                         327kB ± 0%        327kB ± 0%    ~     (all equal)\nGoTypes                        2.78MB ± 0%       2.78MB ± 0%  +0.01%  (p\u003d0.008 n\u003d5+5)\nCompiler                        251kB ± 0%        251kB ± 0%  -0.28%  (p\u003d0.008 n\u003d5+5)\nSSA                            12.8MB ± 0%       12.8MB ± 0%  -0.00%  (p\u003d0.008 n\u003d5+5)\nFlate                           373kB ± 0%        373kB ± 0%  -0.00%  (p\u003d0.008 n\u003d5+5)\nGoParser                        632kB ± 0%        632kB ± 0%    ~     (all equal)\nTar                             501kB ± 0%        501kB ± 0%    ~     (all equal)\nXML                             582kB ± 0%        582kB ± 0%    ~     (all equal)\n[Geo mean]                      787kB             787kB       -0.03%\n\nname                      old export-bytes  new export-bytes  delta\nTemplate                       29.0kB ± 0%       29.0kB ± 0%    ~     (all equal)\nUnicode                        9.22kB ± 0%       9.22kB ± 0%    ~     (all equal)\nGoTypes                        63.9kB ± 0%       63.9kB ± 0%    ~     (all equal)\nCompiler                       74.6kB ± 0%       74.6kB ± 0%    ~     (all equal)\nSSA                             234kB ± 0%        234kB ± 0%    ~     (all equal)\nFlate                          5.70kB ± 0%       5.70kB ± 0%    ~     (all equal)\nGoParser                       10.8kB ± 0%       10.8kB ± 0%    ~     (all equal)\nTar                            19.0kB ± 0%       19.0kB ± 0%    ~     (all equal)\nXML                            26.5kB ± 0%       26.5kB ± 0%    ~     (all equal)\n[Geo mean]                     27.6kB            27.6kB       +0.00%\n\nname                      old text-bytes    new text-bytes    delta\nHelloSize                       426kB ± 0%        426kB ± 0%    ~     (all equal)\n\nname                      old data-bytes    new data-bytes    delta\nHelloSize                       225kB ± 0%        225kB ± 0%    ~     (all equal)\n\nname                      old exe-bytes     new exe-bytes     delta\nHelloSize                      1.15MB ± 0%       1.15MB ± 0%    ~     (all equal)\n\n\n\nfile      before    after     Δ       %\naddr2line 3786322   3769810   -16512  -0.436%\nasm       4902450   4885938   -16512  -0.337%\ncompile   22901794  22885282  -16512  -0.072%\ntotal     107984756 107935220 -49536  -0.046%\n\nfile                                          before    after     Δ       %\ncmd/compile/internal/gc.a                     365046    364344    -702    -0.192%\ncmd/compile/internal/reflectdata.a            1110868   1117410   +6542   +0.589%\ncmd/compile/internal/ssa.a                    39158638  39158462  -176    -0.000%\ncmd/compile/internal/syntax.a                 2515226   2515218   -8      -0.000%\ncmd/compile/internal/types2.a                 5595756   5599736   +3980   +0.071%\ncmd/go/internal/modload.a                     2256708   2283530   +26822  +1.189%\ncmd/go/internal/test.a                        613188    614576    +1388   +0.226%\ncmd/internal/obj/arm64.a                      6811610   6812408   +798    +0.012%\ncmd/internal/obj/wasm.a                       357608    357032    -576    -0.161%\ncmd/link/internal/ld.a                        6927032   6927232   +200    +0.003%\ncmd/vendor/golang.org/x/arch/ppc64/ppc64asm.a 1052880   1052864   -16     -0.002%\ncmd/vendor/golang.org/x/arch/x86/x86asm.a     821452    820284    -1168   -0.142%\ncompress/flate.a                              654760    654748    -12     -0.002%\nexpvar.a                                      196708    196700    -8      -0.004%\ngo/types.a                                    5457900   5461972   +4072   +0.075%\nhash/crc64.a                                  76906     76886     -20     -0.026%\nindex/suffixarray.a                           435916    435900    -16     -0.004%\nruntime/pprof.a                               784866    784606    -260    -0.033%\ntesting.a                                     1038610   1038602   -8      -0.001%\ntime.a                                        1043684   1043676   -8      -0.001%\ntotal                                         257329260 257370084 +40824  +0.016%\n```",
      "parentUuid": "864c2c94_30932eaa",
      "revId": "6d16086c453d1fc27156062873b810059a29a4af",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fb6d86d5_1ac2fbe7",
        "filename": "src/cmd/compile/internal/reflectdata/reflect.go",
        "patchSetId": 2
      },
      "lineNbr": 1264,
      "author": {
        "id": 14665
      },
      "writtenOn": "2021-08-18T08:30:30Z",
      "side": 1,
      "message": "I just worried can it be trouble if there\u0027re a lot of types, then signatset size will now always increase.",
      "parentUuid": "b7f4ef91_b810eea5",
      "revId": "6d16086c453d1fc27156062873b810059a29a4af",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0d5ccd2b_29ceb5bd",
        "filename": "src/cmd/compile/internal/reflectdata/reflect.go",
        "patchSetId": 2
      },
      "lineNbr": 1264,
      "author": {
        "id": 14665
      },
      "writtenOn": "2021-08-22T02:36:26Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fb6d86d5_1ac2fbe7",
      "revId": "6d16086c453d1fc27156062873b810059a29a4af",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}