{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "4e31339a_451ffb65",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 21,
      "author": {
        "id": 36863
      },
      "writtenOn": "2023-04-03T15:51:43Z",
      "side": 1,
      "message": "Looking briefly at the source, it isn\u0027t immediately clear to me what code path BenchmarkIndex is testing. Is this just testing a 7 byte separator against various input lengths?\n\nIf so, I am curious what the performance is for other combinations of string length and separator length.",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 21,
        "endChar": 2
      },
      "revId": "6abac59d4d7a4fb3e589b31bbf132640a17960d0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f65ba83c_19991d4a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 21,
      "author": {
        "id": 53859
      },
      "writtenOn": "2023-04-05T08:28:58Z",
      "side": 1,
      "message": "Yes I guess the Test* functions deal with a large number of combinations of strings and separators but the Benchmark* functions seem to be all written in the same way testing a similar pattern across Index, Indexbyte and count functions",
      "parentUuid": "4e31339a_451ffb65",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 21,
        "endChar": 2
      },
      "revId": "6abac59d4d7a4fb3e589b31bbf132640a17960d0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "42d17e24_a5969c3c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 21,
      "author": {
        "id": 36863
      },
      "writtenOn": "2023-04-05T13:36:24Z",
      "side": 1,
      "message": "I was curious how the various paths performed, so I wrote to observe:\n\n```\nfunc BenchmarkIndex512xN(b *testing.B) {\n        needleLen :\u003d []int{}\n        haystackLen :\u003d 512\n        for i :\u003d 1; i \u003c\u003d 33; i++ {\n                needleLen \u003d append(needleLen, i)\n        }\n        for _, n :\u003d range needleLen {\n                b.Run(valName(n), func(b *testing.B) {\n                        b.SetBytes(int64(haystackLen))\n                        if len(bmbuf) \u003c haystackLen {\n                                bmbuf \u003d make([]byte, haystackLen)\n                        }\n                        buf :\u003d bmbuf\n                        buf[haystackLen-1] \u003d \u0027x\u0027\n                        for i :\u003d 0; i \u003c b.N; i++ {\n                                j :\u003d Index(buf, buf[haystackLen-n:])\n                                if j !\u003d haystackLen-n {\n                                        b.Fatal(\"bad index\", j)\n                                }\n                        }\n                        buf[haystackLen-1] \u003d \u0027\\x00\u0027\n                })\n        }\n}\n```\n\n33 is the switchover to native Go. It surprises me the existing PPC64 variant isn\u0027t much faster (it was only 30-40%).\n\nI wonder if the index2to16 case could be improved.",
      "parentUuid": "f65ba83c_19991d4a",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 21,
        "endChar": 2
      },
      "revId": "6abac59d4d7a4fb3e589b31bbf132640a17960d0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b3a0bc08_375120b0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 53859
      },
      "writtenOn": "2023-04-03T09:51:39Z",
      "side": 1,
      "message": "TRY\u003dppc64le,ppc64lep10,ppc64lep9,ppc64",
      "revId": "6abac59d4d7a4fb3e589b31bbf132640a17960d0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6d974592_f1cd3e60",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-04-03T09:51:55Z",
      "side": 1,
      "message": "SlowBots beginning. Status page: https://farmer.golang.org/try?commit\u003d6abac59d\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "6abac59d4d7a4fb3e589b31bbf132640a17960d0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eb0b3e72_8b49d73b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-04-03T10:22:08Z",
      "side": 1,
      "message": "SlowBots are happy.\n\nSlowBot builds that ran:\n* linux-ppc64-sid-buildlet\n* linux-ppc64le-buildlet\n* linux-ppc64le-power10osu\n* linux-ppc64le-power9osu\n",
      "parentUuid": "6d974592_f1cd3e60",
      "tag": "autogenerated:trybots~happy",
      "revId": "6abac59d4d7a4fb3e589b31bbf132640a17960d0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2b8092d8_dd924531",
        "filename": "src/internal/bytealg/index_ppc64x.s",
        "patchSetId": 7
      },
      "lineNbr": 444,
      "author": {
        "id": 36863
      },
      "writtenOn": "2023-04-07T15:58:20Z",
      "side": 1,
      "message": "Maybe \"Set up separator length for LXVLL\".",
      "range": {
        "startLine": 444,
        "startChar": 31,
        "endLine": 444,
        "endChar": 54
      },
      "revId": "6abac59d4d7a4fb3e589b31bbf132640a17960d0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2a6a9a89_3e5a2087",
        "filename": "src/internal/bytealg/index_ppc64x.s",
        "patchSetId": 7
      },
      "lineNbr": 727,
      "author": {
        "id": 36863
      },
      "writtenOn": "2023-04-07T15:58:20Z",
      "side": 1,
      "message": "I think this is OK, but I think it would be a little clearer to define a distinct label within this #ifdef for this backwards jump. Maybe `index2to16next_p10` between line 721 and 722.",
      "range": {
        "startLine": 727,
        "startChar": 12,
        "endLine": 727,
        "endChar": 26
      },
      "revId": "6abac59d4d7a4fb3e589b31bbf132640a17960d0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}