{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "09d25485_b84c7584",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-08-10T16:30:20Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003dc0273027\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "c02730278d663e42ab0ecc3d5fc5dcdceb67fb5b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0d128343_8d8c7997",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-08-10T16:41:47Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "09d25485_b84c7584",
      "tag": "autogenerated:trybots~happy",
      "revId": "c02730278d663e42ab0ecc3d5fc5dcdceb67fb5b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d8014a53_c27f0aa4",
        "filename": "src/cmd/compile/internal/amd64/versions_test.go",
        "patchSetId": 2
      },
      "lineNbr": 41,
      "author": {
        "id": 5440
      },
      "writtenOn": "2022-08-10T17:59:29Z",
      "side": 1,
      "message": "Can we check that \"amd64.v2\" is absent instead?",
      "revId": "c02730278d663e42ab0ecc3d5fc5dcdceb67fb5b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "26ae3ddd_acace23a",
        "filename": "src/cmd/compile/internal/amd64/versions_test.go",
        "patchSetId": 2
      },
      "lineNbr": 41,
      "author": {
        "id": 14665
      },
      "writtenOn": "2022-08-10T18:06:51Z",
      "side": 1,
      "message": "Yeah, I initially do something like this:\n\n```\namd64v1 :\u003d func() bool {\n    for _, tag :\u003d range build.Default.ToolTags {\n        if tag !\u003d \"amd64.v1\" {\n            return false\n        }\n    }\n    return true\n}\n```\n\nBut it\u0027s not right, since when we need to care about the case that experiment is enabled, so it becomes:\n\n```\namd64v1 :\u003d func() bool {\n    for _, tag :\u003d range build.Default.ToolTags {\n        if strings.HasPrefix(tag, \"experiment.\") {\n            continue\n        }\n        if tag !\u003d \"amd64.v1\" {\n            return false\n        }\n    }\n    return true\n}\n```\n\nSounds like too much works. Because `build.Default.ToolTags` is arranged to have experiment tags before \"GO$GOARCH\" tags, it\u0027s safe to just check for the last element.",
      "parentUuid": "d8014a53_c27f0aa4",
      "revId": "c02730278d663e42ab0ecc3d5fc5dcdceb67fb5b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0ca32203_d855fa06",
        "filename": "src/cmd/compile/internal/amd64/versions_test.go",
        "patchSetId": 2
      },
      "lineNbr": 41,
      "author": {
        "id": 5440
      },
      "writtenOn": "2022-08-10T18:30:19Z",
      "side": 1,
      "message": "Sorry, maybe I was unclear, because neither of those are what I suggested. I meant to check that \"amd64.v2\" (v2, not v1) is *not* present:\n\n```\namd64v1 :\u003d func() bool {\n  for _, tag :\u003d range build.Default.ToolTags {\n    if tag \u003d\u003d \"amd64.v2\" {\n      return false // compiling for GOAMD64\u003dv2 or higher\n    }\n  }\n  return true\n}()\n```",
      "parentUuid": "26ae3ddd_acace23a",
      "revId": "c02730278d663e42ab0ecc3d5fc5dcdceb67fb5b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}