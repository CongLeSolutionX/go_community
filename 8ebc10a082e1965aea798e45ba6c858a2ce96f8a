{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "d90fc582_06f199c7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 7061
      },
      "writtenOn": "2024-04-01T16:18:48Z",
      "side": 1,
      "message": "Curious if this is done appropriately, and if this is a good encoding for Delve.\nThis generates names that look like (real names from objdump, for 3 nesting rangefunc loops):\n```\n_cmd/compile/internal/rangefunc_test.TestBreak3\n_cmd/compile/internal/rangefunc_test.TestBreak3.func1.RF\n_cmd/compile/internal/rangefunc_test.TestBreak3.func1.RF.1.RF\n_cmd/compile/internal/rangefunc_test.TestBreak3.func1.RF.1.RF.1.RF\n```",
      "revId": "8ebc10a082e1965aea798e45ba6c858a2ce96f8a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e5051f55_9fb12f98",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5821
      },
      "writtenOn": "2024-04-01T18:00:54Z",
      "side": 1,
      "message": "The .RF is fine in principle. I think the problem is that this inlined symbol names are unparseable in general (discussed in https://github.com/golang/go/issues/60324).\n\nSuppose I have this:\n\n\tfunc f1() {\n\t\tfor range x {\n\t\t\tsome code\n\t\t\tf2()\n\t\t\tfor range z {\n\t\t\t\tsome other code\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfunc f2() {\n\t\tfor range y {\n\t\t\tsome other code still\n\t\t}\n\t}\n\nAnd everything gets inlined.\nWhat are going to be the symbol names for:\n\n* the call to x inlined into f1\n* the body of the first loop of f1 (containing \"some code\")\n* the call to f2 inlined into f1\n* the call to y inlined into f2 inlined into f1\n* the body of the loop of f2 inlined into f1 (containing \"some other code still\")\n* the call to z inlined into f1\n* the body of the second loop of f1 (containing \"some other code\")\n\nIf everything is inlined and delve is stepping through f1 and everything is inlined it needs to distinguish code that belonged to f1 from code that didn\u0027t. Maybe I\u0027m wrong but I\u0027m guessing that\u0027s not possible.\n\nAlso, as a user of Go, it seems to me that the autogenerated symbol names are getting out of hand but that gets us back to the (contentious) github issue above.",
      "parentUuid": "d90fc582_06f199c7",
      "revId": "8ebc10a082e1965aea798e45ba6c858a2ce96f8a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7b655191_e66ed181",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5821
      },
      "writtenOn": "2024-04-03T10:23:00Z",
      "side": 1,
      "message": "I have had time to look more into this and I have a counterproposal:\n\nhttps://go-review.googlesource.com/c/go/+/576035\n\nIf I haven\u0027t made any mistakes this would add a -rangeN at the end of the symbol name for range body closures, and there would never be more than one of those in a symbol.",
      "parentUuid": "e5051f55_9fb12f98",
      "revId": "8ebc10a082e1965aea798e45ba6c858a2ce96f8a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ea71c700_6d2856cf",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 7061
      },
      "writtenOn": "2024-04-03T16:28:42Z",
      "side": 1,
      "message": "Let me figure out how to steal that, and thanks.  You also used \"-\" which is a better choice than \".\".",
      "parentUuid": "7b655191_e66ed181",
      "revId": "8ebc10a082e1965aea798e45ba6c858a2ce96f8a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e62b63c5_fc053335",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 7061
      },
      "writtenOn": "2024-04-03T18:09:39Z",
      "side": 1,
      "message": "Were you expecting it to look like this?  If so, I will incorporate your CL into this CL.\n```\n_cmd/compile/internal/rangefunc_test.TestBreak1\n_cmd/compile/internal/rangefunc_test.TestBreak1-range1\n_cmd/compile/internal/rangefunc_test.TestBreak1-range2\n_cmd/compile/internal/rangefunc_test.TestBreak1BadA\n_cmd/compile/internal/rangefunc_test.TestBreak1BadA-range1\n_cmd/compile/internal/rangefunc_test.TestBreak1BadA-range2\n_cmd/compile/internal/rangefunc_test.TestBreak1BadA.func1\n_cmd/compile/internal/rangefunc_test.TestBreak1BadB\n_cmd/compile/internal/rangefunc_test.TestBreak1BadB-range1\n_cmd/compile/internal/rangefunc_test.TestBreak1BadB-range2\n_cmd/compile/internal/rangefunc_test.TestBreak1BadB.func1\n_cmd/compile/internal/rangefunc_test.TestBreak1BadDefer\n_cmd/compile/internal/rangefunc_test.TestBreak2\n_cmd/compile/internal/rangefunc_test.TestBreak2-range1\n_cmd/compile/internal/rangefunc_test.TestBreak2-range2\n_cmd/compile/internal/rangefunc_test.TestBreak3\n_cmd/compile/internal/rangefunc_test.TestBreak3-range1\n_cmd/compile/internal/rangefunc_test.TestBreak3-range2\n_cmd/compile/internal/rangefunc_test.TestBreak3-range3\n```",
      "parentUuid": "ea71c700_6d2856cf",
      "revId": "8ebc10a082e1965aea798e45ba6c858a2ce96f8a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a46deada_815e62b6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5821
      },
      "writtenOn": "2024-04-03T18:19:04Z",
      "side": 1,
      "message": "Yes, that looks like what I would expect, feel free to incorporate it if you like it.\nOn a related note, I also tried fixing the inlined closure naming issue myself (#60324 and #66517) but so far I haven\u0027t managed it.",
      "parentUuid": "e62b63c5_fc053335",
      "revId": "8ebc10a082e1965aea798e45ba6c858a2ce96f8a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}