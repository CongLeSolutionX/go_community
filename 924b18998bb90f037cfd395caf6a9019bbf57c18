{
  "comments": [
    {
      "key": {
        "uuid": "ad5a4a3e_55a7f1b1",
        "filename": "src/math/bits/bits.go",
        "patchSetId": 2
      },
      "lineNbr": 41,
      "author": {
        "id": 5340
      },
      "writtenOn": "2017-02-04T09:51:05Z",
      "side": 1,
      "message": "This kind of separation between high-level and impl functions seem to imply that the operations performed here (e.g.: 8-n%8) will always be performed, even in a high-performance contest. Most CPUs are able to rotate right with a single opcode, so leaving this kind of parameter cleaning in the high-level implementation that is always executed seems inefficient to me.",
      "range": {
        "startLine": 41,
        "startChar": 53,
        "endLine": 41,
        "endChar": 84
      },
      "revId": "924b18998bb90f037cfd395caf6a9019bbf57c18",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3a511c7f_3b389516",
        "filename": "src/math/bits/bits.go",
        "patchSetId": 2
      },
      "lineNbr": 54,
      "author": {
        "id": 5340
      },
      "writtenOn": "2017-02-04T09:51:05Z",
      "side": 1,
      "message": "Wouldn\u0027t ByteSwap16() be clearer? bits.ReverseN() is intuitive, but \"ReverseBytes\" sounds weird to me; that operation is always called \"byte swapping\", at least in my background, in the context of bit / word manipulation.",
      "range": {
        "startLine": 54,
        "startChar": 5,
        "endLine": 54,
        "endChar": 19
      },
      "revId": "924b18998bb90f037cfd395caf6a9019bbf57c18",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    }
  ]
}