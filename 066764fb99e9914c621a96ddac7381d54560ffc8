{
  "comments": [
    {
      "key": {
        "uuid": "2bf2d718_404e50dd",
        "filename": "src/strings/strings.go",
        "patchSetId": 1
      },
      "lineNbr": 307,
      "author": {
        "id": 10961
      },
      "writtenOn": "2016-11-11T17:45:46Z",
      "side": 1,
      "message": "I only thought about this, not tried it, but ISTM that if inField started as 0xfe, then the ...\u00261 wouldn\u0027t be needed.  I think it\u0027s only there to handle the initial iteration where ^wasInField is 0xff which might result in 0xff\u00260xff.  ^0xfe would give the 1 as in later iterations.",
      "revId": "066764fb99e9914c621a96ddac7381d54560ffc8",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c15a28dc_0b500fe8",
        "filename": "src/strings/strings.go",
        "patchSetId": 1
      },
      "lineNbr": 307,
      "author": {
        "id": 5340
      },
      "writtenOn": "2017-03-11T12:15:27Z",
      "side": 1,
      "message": "I think another way to reduce the total count of ops is:\n\nwasInField :\u003d inField\ninField \u003d notAsciiSpace[s[I]]\nn +\u003d int((wasInField ^ inField) \u0026 inField)\n\nwhere notAsciiSpace is the opposite of asciiSpace",
      "parentUuid": "2bf2d718_404e50dd",
      "revId": "066764fb99e9914c621a96ddac7381d54560ffc8",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "172b1489_b7afb161",
        "filename": "src/strings/strings.go",
        "patchSetId": 1
      },
      "lineNbr": 307,
      "author": {
        "id": 16006
      },
      "writtenOn": "2017-03-11T13:28:28Z",
      "side": 1,
      "message": "i toyed around with this earlier and the best i could find was:\n\nisSpace :\u003d int(asciiSpace[r])\t\t\nn +\u003d ^isSpace \u0026 wasSpace\nwasSpace \u003d isSpace\n\nsee my suggestion in the improved version i linked earlier https://go-review.googlesource.com/c/37959/1/src/strings/strings.go",
      "parentUuid": "c15a28dc_0b500fe8",
      "revId": "066764fb99e9914c621a96ddac7381d54560ffc8",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2b8e57b3_89e7bcfa",
        "filename": "src/strings/strings.go",
        "patchSetId": 1
      },
      "lineNbr": 315,
      "author": {
        "id": 9735
      },
      "writtenOn": "2016-11-11T10:05:39Z",
      "side": 1,
      "message": "This could really benefit from: http://golang.org/issue/14758",
      "range": {
        "startLine": 315,
        "startChar": 4,
        "endLine": 315,
        "endChar": 34
      },
      "revId": "066764fb99e9914c621a96ddac7381d54560ffc8",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "71ddc4a3_ebcc2f78",
        "filename": "src/strings/strings.go",
        "patchSetId": 1
      },
      "lineNbr": 334,
      "author": {
        "id": 16006
      },
      "writtenOn": "2017-03-08T19:55:13Z",
      "side": 1,
      "message": "starting with make([]string,0,2) seems better since there is at least one allocation at any rate. And i suspect\nhaving more than 1 field and 2 fields is not that uncommon and doesnt waste much space either ;)",
      "range": {
        "startLine": 334,
        "startChar": 1,
        "endLine": 334,
        "endChar": 15
      },
      "revId": "066764fb99e9914c621a96ddac7381d54560ffc8",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    }
  ]
}