{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "eb51068c_9a1f6c3e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 13
      },
      "lineNbr": 0,
      "author": {
        "id": 5210
      },
      "writtenOn": "2021-01-12T01:31:47Z",
      "side": 1,
      "message": "I have not thought through every detail, but it looks very clean overall.\nSome minor comments.\n",
      "revId": "ed23887e94c13c1e338c06a43ab73aa0a2724584",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6c2f212d_81db44f0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 13
      },
      "lineNbr": 0,
      "author": {
        "id": 5440
      },
      "writtenOn": "2021-01-12T02:16:14Z",
      "side": 1,
      "message": "Thanks, some answers/responses to your feedback. I\u0027ll respond to the rest after I revise the CL.",
      "revId": "ed23887e94c13c1e338c06a43ab73aa0a2724584",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f32103b3_1f16b554",
        "filename": "src/cmd/compile/internal/noder/expr.go",
        "patchSetId": 13
      },
      "lineNbr": 31,
      "author": {
        "id": 5210
      },
      "writtenOn": "2021-01-12T01:31:47Z",
      "side": 1,
      "message": "types2.Info.Selections provides selector information, but not for qualified identifiers. Perhaps it should.",
      "range": {
        "startLine": 31,
        "startChar": 30,
        "endLine": 31,
        "endChar": 42
      },
      "revId": "ed23887e94c13c1e338c06a43ab73aa0a2724584",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e9221d84_238f0005",
        "filename": "src/cmd/compile/internal/noder/expr.go",
        "patchSetId": 13
      },
      "lineNbr": 31,
      "author": {
        "id": 5440
      },
      "writtenOn": "2021-01-12T02:16:14Z",
      "side": 1,
      "message": "Ack, I remember from your comment on PS4. :)\n\nThe main reason I\u0027m handling these specially up here though is because they aren\u0027t stored in g.info.Types either, so they hit the Fatalf at L41 otherwise. I\u0027m expecting our long-term plan is still to get rid of the maps and store type-checker info directly into the syntax AST, so this probably isn\u0027t worth worrying about for types2. But maybe for go/types.",
      "parentUuid": "f32103b3_1f16b554",
      "range": {
        "startLine": 31,
        "startChar": 30,
        "endLine": 31,
        "endChar": 42
      },
      "revId": "ed23887e94c13c1e338c06a43ab73aa0a2724584",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "523ca20c_9e2150bf",
        "filename": "src/cmd/compile/internal/noder/expr.go",
        "patchSetId": 13
      },
      "lineNbr": 91,
      "author": {
        "id": 5210
      },
      "writtenOn": "2021-01-12T01:31:47Z",
      "side": 1,
      "message": "Can we just ignore parentheses? Either way, perhaps add a comment as to why/why not.",
      "range": {
        "startLine": 91,
        "startChar": 12,
        "endLine": 91,
        "endChar": 24
      },
      "revId": "ed23887e94c13c1e338c06a43ab73aa0a2724584",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "da7c362e_e6c63031",
        "filename": "src/cmd/compile/internal/noder/expr.go",
        "patchSetId": 13
      },
      "lineNbr": 91,
      "author": {
        "id": 5440
      },
      "writtenOn": "2021-01-12T02:16:14Z",
      "side": 1,
      "message": "Hm, probably. I\u0027m pretty sure typecheck just throws them away anyway. I\u0027ll double check.",
      "parentUuid": "523ca20c_9e2150bf",
      "range": {
        "startLine": 91,
        "startChar": 12,
        "endLine": 91,
        "endChar": 24
      },
      "revId": "ed23887e94c13c1e338c06a43ab73aa0a2724584",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ab563766_a0520d58",
        "filename": "src/cmd/compile/internal/noder/irgen.go",
        "patchSetId": 13
      },
      "lineNbr": 119,
      "author": {
        "id": 5210
      },
      "writtenOn": "2021-01-12T01:31:47Z",
      "side": 1,
      "message": "ImportDecls must always come first per Go syntax. This loop can exit as soon as we a declaration that\u0027s not an ImportDecl. Probably worthwhile doing.\n\nIt may even make sense to operate on a sub-slice (everything after the imports) for the remaining two steps. Though it\u0027s unlikely to have a perf. impact.",
      "revId": "ed23887e94c13c1e338c06a43ab73aa0a2724584",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "92ff7948_7d7c6a0e",
        "filename": "src/cmd/compile/internal/noder/object.go",
        "patchSetId": 13
      },
      "lineNbr": 133,
      "author": {
        "id": 5210
      },
      "writtenOn": "2021-01-12T01:31:47Z",
      "side": 1,
      "message": "hopefully we can eventually get rid of these global vars",
      "range": {
        "startLine": 133,
        "startChar": 43,
        "endLine": 133,
        "endChar": 50
      },
      "revId": "ed23887e94c13c1e338c06a43ab73aa0a2724584",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1c1b1b30_78e23d46",
        "filename": "src/cmd/compile/internal/noder/object.go",
        "patchSetId": 13
      },
      "lineNbr": 133,
      "author": {
        "id": 5440
      },
      "writtenOn": "2021-01-12T02:16:14Z",
      "side": 1,
      "message": "Ack. We should be able to once the uses of typecheck.Expr/typecheck.Stmt are all gone.",
      "parentUuid": "92ff7948_7d7c6a0e",
      "range": {
        "startLine": 133,
        "startChar": 43,
        "endLine": 133,
        "endChar": 50
      },
      "revId": "ed23887e94c13c1e338c06a43ab73aa0a2724584",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e1273edf_2c69a789",
        "filename": "src/cmd/compile/internal/noder/posmap.go",
        "patchSetId": 13
      },
      "lineNbr": 32,
      "author": {
        "id": 5210
      },
      "writtenOn": "2021-01-12T01:31:47Z",
      "side": 1,
      "message": "do you mean types2.Objects or just nodes?",
      "range": {
        "startLine": 32,
        "startChar": 31,
        "endLine": 32,
        "endChar": 38
      },
      "revId": "ed23887e94c13c1e338c06a43ab73aa0a2724584",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3ecbfeb9_23e633ee",
        "filename": "src/cmd/compile/internal/noder/posmap.go",
        "patchSetId": 13
      },
      "lineNbr": 32,
      "author": {
        "id": 5440
      },
      "writtenOn": "2021-01-12T02:16:14Z",
      "side": 1,
      "message": "Yes, types2.Objects. I think I saw it for anonymous parameters. I\u0027ll double-check and see if there was anything else too.",
      "parentUuid": "e1273edf_2c69a789",
      "range": {
        "startLine": 32,
        "startChar": 31,
        "endLine": 32,
        "endChar": 38
      },
      "revId": "ed23887e94c13c1e338c06a43ab73aa0a2724584",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8f197ee1_d0a64c71",
        "filename": "src/cmd/compile/internal/noder/stmt.go",
        "patchSetId": 13
      },
      "lineNbr": 19,
      "author": {
        "id": 5210
      },
      "writtenOn": "2021-01-12T01:31:47Z",
      "side": 1,
      "message": "Is this for labeled statements where there\u0027s only a label? perhaps add a comment",
      "range": {
        "startLine": 19,
        "startChar": 7,
        "endLine": 19,
        "endChar": 10
      },
      "revId": "ed23887e94c13c1e338c06a43ab73aa0a2724584",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "adfce06d_95b9220d",
        "filename": "src/cmd/compile/internal/noder/stmt.go",
        "patchSetId": 13
      },
      "lineNbr": 19,
      "author": {
        "id": 5440
      },
      "writtenOn": "2021-01-12T02:16:14Z",
      "side": 1,
      "message": "I think it\u0027s for EmptyStmt. I\u0027ll check and add a comment. (This was mostly copied from noder.)",
      "parentUuid": "8f197ee1_d0a64c71",
      "range": {
        "startLine": 19,
        "startChar": 7,
        "endLine": 19,
        "endChar": 10
      },
      "revId": "ed23887e94c13c1e338c06a43ab73aa0a2724584",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3a08d283_f3345180",
        "filename": "src/cmd/compile/internal/noder/stmt.go",
        "patchSetId": 13
      },
      "lineNbr": 111,
      "author": {
        "id": 5210
      },
      "writtenOn": "2021-01-12T01:31:47Z",
      "side": 1,
      "message": "I\u0027d prefer not exporting Token and have specific (short) enumerations where we need them. Better decoupling of the packages.",
      "range": {
        "startLine": 111,
        "startChar": 26,
        "endLine": 111,
        "endChar": 32
      },
      "revId": "ed23887e94c13c1e338c06a43ab73aa0a2724584",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f20741b1_9eae5260",
        "filename": "src/cmd/compile/internal/noder/types.go",
        "patchSetId": 13
      },
      "lineNbr": 129,
      "author": {
        "id": 5210
      },
      "writtenOn": "2021-01-12T01:31:47Z",
      "side": 1,
      "message": "go/types? (here and below)",
      "range": {
        "startLine": 129,
        "startChar": 34,
        "endLine": 129,
        "endChar": 39
      },
      "revId": "ed23887e94c13c1e338c06a43ab73aa0a2724584",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4ddc7983_03074601",
        "filename": "src/cmd/compile/internal/noder/types.go",
        "patchSetId": 13
      },
      "lineNbr": 129,
      "author": {
        "id": 5440
      },
      "writtenOn": "2021-01-12T02:16:14Z",
      "side": 1,
      "message": "I think you\u0027re asking if I meant types2 instead of go/types? If so, no.\n\nFor function parameters and struct fields (types.Var) and interface methods (types.Func), the package that they syntactically appeared in is exposed via their Pkg methods. Historically though, the Go compiler only tracked package-origin for unexported struct fields and interface methods (and lowercase function parameter names, as an implementation quirk), because the package isn\u0027t relevant to type-checking for exported names.\n\nNowadays the compiler explicitly tracks this information, just so it\u0027ll be available in export data for gcimporter. However, types2 doesn\u0027t directly provide this information, hence the roundabout approach below to try to infer it.",
      "parentUuid": "f20741b1_9eae5260",
      "range": {
        "startLine": 129,
        "startChar": 34,
        "endLine": 129,
        "endChar": 39
      },
      "revId": "ed23887e94c13c1e338c06a43ab73aa0a2724584",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2e26d201_0edc9a14",
        "filename": "src/cmd/compile/internal/noder/validate.go",
        "patchSetId": 13
      },
      "lineNbr": 26,
      "author": {
        "id": 5210
      },
      "writtenOn": "2021-01-12T01:31:47Z",
      "side": 1,
      "message": "go/types -\u003e types2",
      "range": {
        "startLine": 26,
        "startChar": 27,
        "endLine": 26,
        "endChar": 32
      },
      "revId": "ed23887e94c13c1e338c06a43ab73aa0a2724584",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e67d3a26_a2696e6e",
        "filename": "src/cmd/compile/internal/noder/validate.go",
        "patchSetId": 13
      },
      "lineNbr": 32,
      "author": {
        "id": 5210
      },
      "writtenOn": "2021-01-12T01:31:47Z",
      "side": 1,
      "message": "It was probably a mistake to represent empty tuples as nil (it also causes problems in types2). I should make it a singleton non-nil empty tuple.",
      "range": {
        "startLine": 32,
        "startChar": 17,
        "endLine": 32,
        "endChar": 22
      },
      "revId": "ed23887e94c13c1e338c06a43ab73aa0a2724584",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dc9f028a_1a99b102",
        "filename": "src/cmd/compile/internal/noder/validate.go",
        "patchSetId": 13
      },
      "lineNbr": 32,
      "author": {
        "id": 5440
      },
      "writtenOn": "2021-01-12T02:16:14Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "e67d3a26_a2696e6e",
      "range": {
        "startLine": 32,
        "startChar": 17,
        "endLine": 32,
        "endChar": 22
      },
      "revId": "ed23887e94c13c1e338c06a43ab73aa0a2724584",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}