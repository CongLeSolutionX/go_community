{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "9033d20b_74c65f9f",
        "filename": "src/cmd/go/internal/test/test.go",
        "patchSetId": 2
      },
      "lineNbr": 1221,
      "author": {
        "id": 6365
      },
      "writtenOn": "2023-09-01T16:15:02Z",
      "side": 1,
      "message": "This seems like an incomplete solution — we shouldn\u0027t make the tests 2x slower in JSON mode either.\n\nI think we need to better understand why this sequencing was thought to be needed in CL 448357 in the first place. (Maybe we can just remove it?)",
      "revId": "7c2c8fd730b377429b5302a9591ccde32d0ae0d9",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6ee91cb0_48b97f19",
        "filename": "src/cmd/go/internal/test/test.go",
        "patchSetId": 2
      },
      "lineNbr": 1221,
      "author": {
        "id": 52073
      },
      "writtenOn": "2023-09-01T16:42:53Z",
      "side": 1,
      "message": "I agree we should fix both cases as well; this seemed like an easy win in the meantime while we discussed the longer term solution.\n\nMy understanding is it is to make sure the `{\"Action\":\"start\"}` are printed in order. I don\u0027t know why we need that, though -- seems reasonable to allow them out of order. That being said the `print` action is ordered so maybe that is the motivation.\n\nIf we do really want to keep it, I think we can do it efficiently, we would just need a new explicit \"Start\" action that tests can depend on instead of this implicit dependency that isn\u0027t handled buy the actiongraph. But that seems like a lot of work if we do not actually need to sequence them.\n\nI am open to either approach or alternatives, let me know which is preferred",
      "parentUuid": "9033d20b_74c65f9f",
      "revId": "7c2c8fd730b377429b5302a9591ccde32d0ae0d9",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "09511b09_16b3e186",
        "filename": "src/cmd/go/internal/test/test.go",
        "patchSetId": 2
      },
      "lineNbr": 1221,
      "author": {
        "id": 5167
      },
      "writtenOn": "2023-09-01T17:45:03Z",
      "side": 1,
      "message": "The start events are ordered because that\u0027s the only way a consumer of the JSON output can reconstruct the order that packages were passed to the go tool itself. This is valuable when presenting test results to a user, especially across multiple runs (like in a CI system).\n\nFor some context, this originally came out of work I was doing in dist to do a streaming conversion of the JSON test output back to the text format. There was no way to make this deterministic and to match the package sequence of the text format without these ordered start events.\n\nI agree that blocking workers is certainly an unfortunate (and unintended!) consequence and we should find some other way to implement this.\n\nFWIW, I had a similar problem in dist in one of the many rewrites I was doing it to. I wound up adding a separate buffer sequencing layer that understood the first line of each buffer had to be released to the output stream in order, and the lines within any buffer had to be released in order, but that otherwise lines could be released immediately. That resulted in potentially unbounded buffering, but didn\u0027t require anything to block.",
      "parentUuid": "6ee91cb0_48b97f19",
      "revId": "7c2c8fd730b377429b5302a9591ccde32d0ae0d9",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "73221925_ee87ce5a",
        "filename": "src/cmd/go/internal/test/test.go",
        "patchSetId": 2
      },
      "lineNbr": 1221,
      "author": {
        "id": 52073
      },
      "writtenOn": "2023-09-01T18:46:58Z",
      "side": 1,
      "message": "Now that I think about it, my idea of a new Start action isn\u0027t great. It does ensure the starts are printed in order but the actual test run may happen way later.\n\nOne way around this could be to add some mechanism to ensure an action happens immediately after another one. That seems fairly complex though, so I would want some. directional agreement before going down that route",
      "parentUuid": "09511b09_16b3e186",
      "revId": "7c2c8fd730b377429b5302a9591ccde32d0ae0d9",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a4dbb4f7_917e1c57",
        "filename": "src/cmd/go/internal/test/test.go",
        "patchSetId": 2
      },
      "lineNbr": 1221,
      "author": {
        "id": 52073
      },
      "writtenOn": "2023-09-01T18:46:58Z",
      "side": 1,
      "message": "Hmm now that I think about it - my proposed fix to this if we wanted to keep the ordering was to make a new Start action. But that doesn\u0027t *really* solve the problem. It ensures we print the starts in order, but we may not schedule the actual work until an arbitrary later time. Seems like for it to work we would need a way to have 2 actions that are guaranteed to be started back-to-back maybe.",
      "parentUuid": "09511b09_16b3e186",
      "revId": "7c2c8fd730b377429b5302a9591ccde32d0ae0d9",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a684a6fb_dfb129ad",
        "filename": "src/cmd/go/internal/test/test.go",
        "patchSetId": 2
      },
      "lineNbr": 1221,
      "author": {
        "id": 6365
      },
      "writtenOn": "2023-09-01T18:47:32Z",
      "side": 1,
      "message": "Ah, that sounds very similar to the approach we took in CL 317975.\n\n(The `sequencer` and `reporter` added in that CL form a sort of “output monad” that buffers up the fragments.)",
      "parentUuid": "09511b09_16b3e186",
      "revId": "7c2c8fd730b377429b5302a9591ccde32d0ae0d9",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}