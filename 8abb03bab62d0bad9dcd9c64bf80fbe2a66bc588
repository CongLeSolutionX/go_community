{
  "comments": [
    {
      "key": {
        "uuid": "c61c4b8d_238f3969",
        "filename": "src/cmd/internal/obj/arm64/asm7.go",
        "patchSetId": 2
      },
      "lineNbr": 888,
      "author": {
        "id": 13315
      },
      "writtenOn": "2020-03-04T19:30:03Z",
      "side": 1,
      "message": "Length, or Len, or Size. Lens doesn\u0027t read right.",
      "range": {
        "startLine": 888,
        "startChar": 15,
        "endLine": 888,
        "endChar": 19
      },
      "revId": "8abb03bab62d0bad9dcd9c64bf80fbe2a66bc588",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8bb3ff27_83831c14",
        "filename": "src/cmd/internal/obj/arm64/asm7.go",
        "patchSetId": 2
      },
      "lineNbr": 888,
      "author": {
        "id": 32848
      },
      "writtenOn": "2020-03-05T06:10:04Z",
      "side": 1,
      "message": "Yes, Thanks. I\u0027ll change it.",
      "parentUuid": "c61c4b8d_238f3969",
      "range": {
        "startLine": 888,
        "startChar": 15,
        "endLine": 888,
        "endChar": 19
      },
      "revId": "8abb03bab62d0bad9dcd9c64bf80fbe2a66bc588",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "af22dccb_78211237",
        "filename": "src/cmd/internal/obj/arm64/asm7.go",
        "patchSetId": 2
      },
      "lineNbr": 936,
      "author": {
        "id": 13315
      },
      "writtenOn": "2020-03-04T19:30:03Z",
      "side": 1,
      "message": "Now there are four special instructions, use a switch statement. Also below.",
      "revId": "8abb03bab62d0bad9dcd9c64bf80fbe2a66bc588",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3cd19c42_c871966b",
        "filename": "src/cmd/internal/obj/arm64/asm7.go",
        "patchSetId": 2
      },
      "lineNbr": 1058,
      "author": {
        "id": 13315
      },
      "writtenOn": "2020-03-04T19:30:03Z",
      "side": 1,
      "message": "I\u0027m not sure I followed here. Why not just let asmout to emit the right bytes? Why use out[0]? Changing o.size in asmout seems a bad idea to me.",
      "revId": "8abb03bab62d0bad9dcd9c64bf80fbe2a66bc588",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5abd50b7_0b97bde6",
        "filename": "src/cmd/internal/obj/arm64/asm7.go",
        "patchSetId": 2
      },
      "lineNbr": 1058,
      "author": {
        "id": 32848
      },
      "writtenOn": "2020-03-09T07:00:15Z",
      "side": 1,
      "message": "For directive obj.APCALIGN, the original o.size is 0, and after asmout, I store the padding size to o.size. Then I compare o.size before asmout with after asmout, then I can check if weather is obj.APCALIGN directive and also know the padding size by o.size. In asmout, I only set out[0] as NOOP in order to overflow out[] array. So here, I know the padding size and just set the following instruction by c.ctxt.Arch.ByteOrder.PutUint32(bp, out[0]) on the control of o.size. \nAfter padding NOOP, need re-set o.size to 0, since the size of directive obj.PCALIGN is defined as 0.\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\nif not use o.size to check directive and store padding size, could I use asmout() out[0] to store padding size?  like that:\nc.asmout(p, o, out[:])\nif o.as \u003d\u003d obj.APCALIGN {\n\t// the padding size stored in out[0]\n\tv :\u003d out[0]\n\tif v !\u003d 0 {\n\t\tfor i \u003d 0; i \u003c int(v/4); i++ {\n\t\t\tc.ctxt.Arch.ByteOrder.PutUint32(bp, OP_NOOP)\n\t\t\tbp \u003d bp[4:]\n\t\t\tpsz +\u003d 4\n\t\t}\n\t}\n} else {\n\tfor i \u003d 0; i \u003c int(o.size/4); i++ {\n\t\tc.ctxt.Arch.ByteOrder.PutUint32(bp, out[i])\n\t\tbp \u003d bp[4:]\n\t\tpsz +\u003d 4\n\t}\n}",
      "parentUuid": "3cd19c42_c871966b",
      "revId": "8abb03bab62d0bad9dcd9c64bf80fbe2a66bc588",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7affdd7e_b6b80153",
        "filename": "src/cmd/internal/obj/arm64/asm7.go",
        "patchSetId": 2
      },
      "lineNbr": 1058,
      "author": {
        "id": 32848
      },
      "writtenOn": "2020-03-09T07:07:37Z",
      "side": 1,
      "message": "In order to avoid out of size of out[] array, I do not pad NOOP directly in asmout and just store the padding size, and after asmout(), pad NOOP by the output padding size.",
      "parentUuid": "5abd50b7_0b97bde6",
      "revId": "8abb03bab62d0bad9dcd9c64bf80fbe2a66bc588",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a2542068_d05d8cb1",
        "filename": "src/cmd/internal/obj/arm64/asm7.go",
        "patchSetId": 2
      },
      "lineNbr": 1058,
      "author": {
        "id": 13315
      },
      "writtenOn": "2020-03-10T19:12:29Z",
      "side": 1,
      "message": "Multiple instances of this function may run concurrently, whereas o.size is global. Changing o.size here is not safe. Don\u0027t do it.\n\nIt looks to me the simplest way is to specialize PCALIGN, handle it here instead of calling asmout.",
      "parentUuid": "7affdd7e_b6b80153",
      "revId": "8abb03bab62d0bad9dcd9c64bf80fbe2a66bc588",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    }
  ]
}