{
  "comments": [
    {
      "key": {
        "uuid": "8b530879_9681a748",
        "filename": "/COMMIT_MSG",
        "patchSetId": 31
      },
      "lineNbr": 30,
      "author": {
        "id": 5050
      },
      "writtenOn": "2018-04-12T12:25:53Z",
      "side": 1,
      "message": "If the new code kicks in only for block sizes \u003e\u003d 2000 why do you see 10% performance improvements for sorting 1000 elements? Same for Int1k and Int1k_Slice?",
      "revId": "4b41811a96efd8e897eca1b23fa2a04b6f3e3b9b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fd75e42c_249c3d07",
        "filename": "/COMMIT_MSG",
        "patchSetId": 31
      },
      "lineNbr": 30,
      "author": {
        "id": 15048
      },
      "writtenOn": "2018-04-13T01:46:37Z",
      "side": 1,
      "message": "The new *algorithm* starts being used with array size 2000, but the code in stable is a bit different, there is one pass over the data reversing sequences of elements in reverse order ( https://go-review.googlesource.com/c/go/+/101415/32/src/sort/sort.go#989 ) and the merge sort (not symMerge) logic was changed to use one less variable, I guess that would account for the performance improvements in the 1k tests.",
      "parentUuid": "8b530879_9681a748",
      "revId": "4b41811a96efd8e897eca1b23fa2a04b6f3e3b9b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5bd2b973_433281a2",
        "filename": "/COMMIT_MSG",
        "patchSetId": 31
      },
      "lineNbr": 30,
      "author": {
        "id": 5050
      },
      "writtenOn": "2018-04-16T08:14:28Z",
      "side": 1,
      "message": "If this optimization yields 20% performance increase\nto the existing algorithm then it must not be part of\nthis CL:\n\nPlease separate it into its own, standalone CL and\nsubmit it individually. Don\u0027t forget to include the\nappropriate benchmarks.\n\nThen rebase this new algorithm onto the optimized\nSymMerge based stable sorting. Then you can find an\noptimum cut-over point from the optimized old to the\nnew algorithm.",
      "parentUuid": "fd75e42c_249c3d07",
      "revId": "4b41811a96efd8e897eca1b23fa2a04b6f3e3b9b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e78c94e4_16a3b6d6",
        "filename": "src/sort/sort.go",
        "patchSetId": 31
      },
      "lineNbr": 328,
      "author": {
        "id": 5050
      },
      "writtenOn": "2018-04-12T12:25:53Z",
      "side": 1,
      "message": "All these functions are used only during stable sorting which now lives in\nits own file sort-stable.go (which presumably should be renamed to e.g.\nstable.go) So move all these function into the new file too.",
      "revId": "4b41811a96efd8e897eca1b23fa2a04b6f3e3b9b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6f6ffd05_8fab192b",
        "filename": "src/sort/sort.go",
        "patchSetId": 31
      },
      "lineNbr": 328,
      "author": {
        "id": 15048
      },
      "writtenOn": "2018-04-13T01:46:37Z",
      "side": 1,
      "message": "The move to sort-stable.go was just because of deficiency of genzfunc.go, fixed in PS 32; so this is now irrelevant.",
      "parentUuid": "e78c94e4_16a3b6d6",
      "revId": "4b41811a96efd8e897eca1b23fa2a04b6f3e3b9b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "31c558a9_2482a679",
        "filename": "src/sort/sort.go",
        "patchSetId": 31
      },
      "lineNbr": 352,
      "author": {
        "id": 5050
      },
      "writtenOn": "2018-04-12T12:25:53Z",
      "side": 1,
      "message": "Returning a generator is cute but needs explanation.\nInstead of returning a generator: Why not precompute these\n31 or 63 values either in init or even fixed constants?",
      "revId": "4b41811a96efd8e897eca1b23fa2a04b6f3e3b9b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c9b92f30_f5270bb3",
        "filename": "src/sort/sort.go",
        "patchSetId": 31
      },
      "lineNbr": 352,
      "author": {
        "id": 15048
      },
      "writtenOn": "2018-04-13T01:46:37Z",
      "side": 1,
      "message": "This is presumably prettier/shorter/easier to review than a bunch of constants, and also made up of very cheap operations; and isqrt is only called once in merge sort level anyway, so I do not see the need for change.",
      "parentUuid": "31c558a9_2482a679",
      "revId": "4b41811a96efd8e897eca1b23fa2a04b6f3e3b9b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f6183fa2_f9b486e3",
        "filename": "src/sort/sort.go",
        "patchSetId": 31
      },
      "lineNbr": 352,
      "author": {
        "id": 5050
      },
      "writtenOn": "2018-04-16T08:14:28Z",
      "side": 1,
      "message": "I do see need for change.\nIf you return an generator you _must_ document this.\nThe current documentation to func isqrt is\n    Integer parts of square roots of successive powers of 2, rounded.\nWhich is not appropriate for neither isqrt itself not for the function\nit returns. \n\nThe other alternative (the one I would prefer) is a \nbunch of constants and maybe a genisqrt.go file generating\nthem.\nNevertheless: The current state is not ok.",
      "parentUuid": "c9b92f30_f5270bb3",
      "revId": "4b41811a96efd8e897eca1b23fa2a04b6f3e3b9b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5127b524_25f8b2ee",
        "filename": "src/sort/sort.go",
        "patchSetId": 31
      },
      "lineNbr": 393,
      "author": {
        "id": 5050
      },
      "writtenOn": "2018-04-12T12:25:53Z",
      "side": 1,
      "message": "The whole body of this if is not covered by the tests.",
      "revId": "4b41811a96efd8e897eca1b23fa2a04b6f3e3b9b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6e75ae9d_fbbfdaad",
        "filename": "src/sort/sort.go",
        "patchSetId": 31
      },
      "lineNbr": 419,
      "author": {
        "id": 5050
      },
      "writtenOn": "2018-04-12T12:25:53Z",
      "side": 1,
      "message": "These functions and their return values are very cryptic.\nMaybe adding some example or some simple ASCII art would help\nto clarify where these indices point to in data.",
      "revId": "4b41811a96efd8e897eca1b23fa2a04b6f3e3b9b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2102e64f_71c4f9b5",
        "filename": "src/sort/sort.go",
        "patchSetId": 31
      },
      "lineNbr": 625,
      "author": {
        "id": 5050
      },
      "writtenOn": "2018-04-12T12:25:53Z",
      "side": 1,
      "message": "Then why not change the function name?",
      "revId": "4b41811a96efd8e897eca1b23fa2a04b6f3e3b9b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "82780cdd_b252aab2",
        "filename": "src/sort/sort.go",
        "patchSetId": 31
      },
      "lineNbr": 625,
      "author": {
        "id": 15048
      },
      "writtenOn": "2018-04-13T01:46:37Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "2102e64f_71c4f9b5",
      "revId": "4b41811a96efd8e897eca1b23fa2a04b6f3e3b9b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "51d15731_c7671159",
        "filename": "src/sort/sort.go",
        "patchSetId": 31
      },
      "lineNbr": 659,
      "author": {
        "id": 5050
      },
      "writtenOn": "2018-04-12T12:25:53Z",
      "side": 1,
      "message": "If this is Hwang-Lin merging than name it something like\nhwangAndLinMerge.",
      "revId": "4b41811a96efd8e897eca1b23fa2a04b6f3e3b9b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "74849c3b_409a1d0f",
        "filename": "src/sort/sort.go",
        "patchSetId": 31
      },
      "lineNbr": 659,
      "author": {
        "id": 15048
      },
      "writtenOn": "2018-04-13T01:46:37Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "51d15731_c7671159",
      "revId": "4b41811a96efd8e897eca1b23fa2a04b6f3e3b9b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6f151439_8d1d8a6d",
        "filename": "src/sort/sort.go",
        "patchSetId": 31
      },
      "lineNbr": 836,
      "author": {
        "id": 5050
      },
      "writtenOn": "2018-04-12T12:25:53Z",
      "side": 1,
      "message": "I do not like these variable names compTime for compile time\nfeels as if something is done here at compile time (like in\nC++ template meta programing) which it is not. So drop the\ncompTime everywhere.",
      "revId": "4b41811a96efd8e897eca1b23fa2a04b6f3e3b9b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8a9b494a_084ad6f6",
        "filename": "src/sort/sort.go",
        "patchSetId": 31
      },
      "lineNbr": 836,
      "author": {
        "id": 15048
      },
      "writtenOn": "2018-04-13T01:46:37Z",
      "side": 1,
      "message": "The buffer\u0027s size is known at compile time. I do not want to just drop the name prefix, it would make the names too short and ambiguous for global identifiers; do you have a better prefix in mind?",
      "parentUuid": "6f151439_8d1d8a6d",
      "revId": "4b41811a96efd8e897eca1b23fa2a04b6f3e3b9b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "afe2547e_05569ae0",
        "filename": "src/sort/sort.go",
        "patchSetId": 31
      },
      "lineNbr": 836,
      "author": {
        "id": 5050
      },
      "writtenOn": "2018-04-16T08:14:28Z",
      "side": 1,
      "message": "No, this is not know \"at compile time\" this is a dead simple constant.\nIf this would depend on the machine size for an int one could possibly\nargue to name it \"compile time\" but this is not. It is a constant.\n\nOther constants used in other packages also do not have a \"comileTime\"\nprefix. Remove this prefix.\n\nIf the resulting name becomes too short: Rename.\nAnd I doubt that movementImitationBufferSize is ambiguous.",
      "parentUuid": "8a9b494a_084ad6f6",
      "revId": "4b41811a96efd8e897eca1b23fa2a04b6f3e3b9b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8e5684b1_86efaaab",
        "filename": "src/sort/sort_test.go",
        "patchSetId": 31
      },
      "lineNbr": 595,
      "author": {
        "id": 5050
      },
      "writtenOn": "2018-04-12T12:25:53Z",
      "side": 1,
      "message": "Is this a test for hl an hlBufBigSmall ? If yes: Why combined and why the name. If No: What are local stable merges?",
      "revId": "4b41811a96efd8e897eca1b23fa2a04b6f3e3b9b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9e8882e9_ced0374d",
        "filename": "src/sort/sort_test.go",
        "patchSetId": 31
      },
      "lineNbr": 595,
      "author": {
        "id": 15048
      },
      "writtenOn": "2018-04-13T01:46:37Z",
      "side": 1,
      "message": "Yes, this tests hL and hLBufBigSmall, the local stable merge functions (local merge is a term from the Kim\u0026Kutzner paper). They are tested together because they do basically the same thing: stable merging.",
      "parentUuid": "8e5684b1_86efaaab",
      "revId": "4b41811a96efd8e897eca1b23fa2a04b6f3e3b9b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    }
  ]
}