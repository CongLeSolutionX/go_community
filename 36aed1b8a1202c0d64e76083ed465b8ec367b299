{
  "comments": [
    {
      "key": {
        "uuid": "a90e2b19_e12bb3c4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 5200
      },
      "writtenOn": "2020-03-09T20:44:33Z",
      "side": 1,
      "message": "I\u0027m a bit confused by this. The defer still exists, right? Is the problem that it will be a duplicate of the open-coded defer that will run after recover?\nOr are its captured variables stale? Or something else?",
      "range": {
        "startLine": 13,
        "startChar": 45,
        "endLine": 13,
        "endChar": 64
      },
      "revId": "36aed1b8a1202c0d64e76083ed465b8ec367b299",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8e42a214_e8f91856",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 28783
      },
      "writtenOn": "2020-03-09T22:14:23Z",
      "side": 1,
      "message": "The defer still exists, but when we do a recover, we will now process that defer normally via inline code (unless we happen to do another panic) and pop the stack frame related to that defer.  So, the defer entry won\u0027t get automatically removed from the chain, and the stack pointer, etc. in the defer entry will become invalid/stale.  It is the processing of this stale defer entry later in the program that causes the bug.  So, we need to remove that defer entry (and any other open-coded defer entries) from the chain.\n\nAnother way to say it is we only want entries for open-coded defers on the defer chain while a panic is in progress.  When no panic is in progress, we don\u0027t want any entries for open-coded defers on the chain, since we will be processing all open-coded defers inline.",
      "parentUuid": "a90e2b19_e12bb3c4",
      "range": {
        "startLine": 13,
        "startChar": 45,
        "endLine": 13,
        "endChar": 64
      },
      "revId": "36aed1b8a1202c0d64e76083ed465b8ec367b299",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3cb3317d_17ff8c48",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 5200
      },
      "writtenOn": "2020-03-09T22:23:17Z",
      "side": 1,
      "message": "Ok. Then it sounds to me like they are just duplicates then.\nA single language-level defer must be either:\n1. in the deferMask bits of a frame that has no panic below it, or\n2. in the gp.defer linked list\n\nIt can\u0027t be both. When we panic we move all those in #1 to #2, and when we recover, we have to move everything that is still in a deferMask somewhere back to #1.",
      "parentUuid": "8e42a214_e8f91856",
      "range": {
        "startLine": 13,
        "startChar": 45,
        "endLine": 13,
        "endChar": 64
      },
      "revId": "36aed1b8a1202c0d64e76083ed465b8ec367b299",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "db812649_12f70ba8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 28783
      },
      "writtenOn": "2020-03-10T02:00:14Z",
      "side": 1,
      "message": "Well, I wouldn\u0027t say \u0027it can\u0027t be both\u0027.  The open-coded defer info is temporarily duplicated on the defer chain during a panic, so we can get the ordering between open-coded and non-open-coded defers correct.  Also, we need somewhere to store the defer \u0027started\u0027 state (which already exists for non-open-coded defers), in order to distinguish the case of another panic happening while running a defer.\n\nThen when we do a recover, we get rid of the duplicates on the chain, since during non-panic state, we don\u0027t want/need them there.",
      "parentUuid": "3cb3317d_17ff8c48",
      "range": {
        "startLine": 13,
        "startChar": 45,
        "endLine": 13,
        "endChar": 64
      },
      "revId": "36aed1b8a1202c0d64e76083ed465b8ec367b299",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8ad50ea4_9cecb2d9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 5200
      },
      "writtenOn": "2020-03-10T02:49:47Z",
      "side": 1,
      "message": "Right, sorry, what I mean is that in a non-panic state it must be one or the other. In a panic state it might be both.",
      "parentUuid": "db812649_12f70ba8",
      "range": {
        "startLine": 13,
        "startChar": 45,
        "endLine": 13,
        "endChar": 64
      },
      "revId": "36aed1b8a1202c0d64e76083ed465b8ec367b299",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4d889475_012555db",
        "filename": "src/runtime/panic.go",
        "patchSetId": 1
      },
      "lineNbr": 1010,
      "author": {
        "id": 5200
      },
      "writtenOn": "2020-03-09T20:44:33Z",
      "side": 1,
      "message": "out-dated how?",
      "range": {
        "startLine": 1009,
        "startChar": 35,
        "endLine": 1010,
        "endChar": 16
      },
      "revId": "36aed1b8a1202c0d64e76083ed465b8ec367b299",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "99bd81e2_354d8c2c",
        "filename": "src/runtime/panic.go",
        "patchSetId": 1
      },
      "lineNbr": 1010,
      "author": {
        "id": 28783
      },
      "writtenOn": "2020-03-09T22:14:23Z",
      "side": 1,
      "message": "I hope I explained this in my response to your comment on the commit message.  I will put more detail into this comment.",
      "parentUuid": "4d889475_012555db",
      "range": {
        "startLine": 1009,
        "startChar": 35,
        "endLine": 1010,
        "endChar": 16
      },
      "revId": "36aed1b8a1202c0d64e76083ed465b8ec367b299",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    }
  ]
}