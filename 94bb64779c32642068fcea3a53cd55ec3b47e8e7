{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "723286b9_f592d7c1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-03-01T04:57:26Z",
      "side": 1,
      "message": "SlowBots beginning. Status page: https://farmer.golang.org/try?commit\u003d94bb6477\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "94bb64779c32642068fcea3a53cd55ec3b47e8e7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "120b10de_59f3f02a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-03-01T06:35:46Z",
      "side": 1,
      "message": "SlowBots beginning. Status page: https://farmer.golang.org/try?commit\u003d94bb6477\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "94bb64779c32642068fcea3a53cd55ec3b47e8e7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f23196ff_c6f0d671",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-03-01T06:35:46Z",
      "side": 1,
      "message": "Superseded.",
      "parentUuid": "723286b9_f592d7c1",
      "tag": "autogenerated:trybots~beginning",
      "revId": "94bb64779c32642068fcea3a53cd55ec3b47e8e7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ec3ed819_ccb24d88",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-03-01T07:55:46Z",
      "side": 1,
      "message": "SlowBots are happy.\n\nSlowBot builds that ran:\n* linux-riscv64-unmatched\n",
      "parentUuid": "120b10de_59f3f02a",
      "tag": "autogenerated:trybots~happy",
      "revId": "94bb64779c32642068fcea3a53cd55ec3b47e8e7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "289da805_221d35b7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 13315
      },
      "writtenOn": "2023-03-01T22:38:29Z",
      "side": 1,
      "message": "As we no longer ship prebuilt C objects, we\u0027re going to move towards cgo external linking more (even for std cgo-using packages like net). I\u0027m not sure we want to do more on cgo internal linking. Thanks.",
      "revId": "94bb64779c32642068fcea3a53cd55ec3b47e8e7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "315dcf57_9b1e5cae",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 13640
      },
      "writtenOn": "2023-03-02T01:58:32Z",
      "side": 1,
      "message": "I\u0027m not sure that I\u0027m following the reasoning here.\n\nFirstly, as noted in the CL description, there is a considerable performance gain that results from this - being able to reduce ./all.bash runs by 20%+ is a big help for this platform, and will benefit buildlets and trybots.\n\nSecondly, this is (or at least most of it is) needed to support SDYNIMPORT via the internal linker. This in turn is needed to support any libc based platform, including the openbsd/riscv64 port (#55999).\n\nIs there a design or proposal that covers this intended change to move away from cgo internal linking?",
      "parentUuid": "289da805_221d35b7",
      "revId": "94bb64779c32642068fcea3a53cd55ec3b47e8e7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5e423de7_33484bc9",
        "filename": "src/cmd/link/internal/ld/data.go",
        "patchSetId": 4
      },
      "lineNbr": 276,
      "author": {
        "id": 14020
      },
      "writtenOn": "2023-03-01T15:00:04Z",
      "side": 1,
      "message": "a comment would be helpful here",
      "revId": "94bb64779c32642068fcea3a53cd55ec3b47e8e7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "424d3d53_65effb2b",
        "filename": "src/cmd/link/internal/ld/data.go",
        "patchSetId": 4
      },
      "lineNbr": 276,
      "author": {
        "id": 13315
      },
      "writtenOn": "2023-07-28T20:43:33Z",
      "side": 1,
      "message": "Why this is necessary? In which case you\u0027ll generate a value that does not fit in siz?",
      "parentUuid": "5e423de7_33484bc9",
      "revId": "94bb64779c32642068fcea3a53cd55ec3b47e8e7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "161a8692_9970c173",
        "filename": "src/cmd/link/internal/ld/data.go",
        "patchSetId": 4
      },
      "lineNbr": 276,
      "author": {
        "id": 13640
      },
      "writtenOn": "2023-08-08T15:53:00Z",
      "side": 1,
      "message": "I\u0027ll have to reproduce this, however the crux of the problem is that Archreloc often takes in an instruction (or a pair of instructions) and returns the same with the relocation resolved and applied. In the two byte case (which we have for compressed instructions with RISC-V), the test is:\n\n   o !\u003d int64(int16(o))\n   \nHowever, it is perfectly okay for the top bit to be set in this instruction (e.g. a compressed jump or branch). And this value is then written out using PutUint16.\n\nI guess an alternative is to alter the check to also include uint16(o)...",
      "parentUuid": "424d3d53_65effb2b",
      "revId": "94bb64779c32642068fcea3a53cd55ec3b47e8e7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d6699a9b_abea1c43",
        "filename": "src/cmd/link/internal/ld/data.go",
        "patchSetId": 4
      },
      "lineNbr": 276,
      "author": {
        "id": 13640
      },
      "writtenOn": "2023-08-08T15:55:16Z",
      "side": 1,
      "message": "Without this change we get failures like:\n\n```\n# archive/tar.test                                                                                                \nruntime/cgo(.text): relocation address for .L4 is too big: 0xc489 \nruntime/cgo(.text): relocation address for .L7 is too big: 0xa029                                                 \nruntime/cgo(.text): relocation address for .L8 is too big: 0xd7f5                                                 \nruntime/cgo(.text): relocation address for .L17 is too big: 0xc785                                                \nruntime/cgo(.text): relocation address for .L6 is too big: 0xb741                                                 \nruntime/cgo(.text): relocation address for .L10 is too big: 0xf169                                                \nruntime/cgo(.text): relocation address for .L10 is too big: 0xbf75                                                \nruntime/cgo(.text): relocation address for .L29 is too big: 0xc815                                                \nruntime/cgo(.text): relocation address for .L25 is too big: 0xbfe1                                                \nruntime/cgo(.text): relocation address for .L33 is too big: 0xe509                                                \nruntime/cgo(.text): relocation address for .L10 is too big: 0xe499                                                \nruntime/cgo(.text): relocation address for .L11 is too big: 0xc781                                                \nruntime/cgo(.text): relocation address for .L5 is too big: 0xcd11\nFAIL    archive/tar [build failed]\n```\n\nThese are valid/correct relocations, however they fail since the top bit is set.",
      "parentUuid": "161a8692_9970c173",
      "revId": "94bb64779c32642068fcea3a53cd55ec3b47e8e7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "aaff798d_1a4d1fbb",
        "filename": "src/cmd/link/internal/loadelf/ldelf.go",
        "patchSetId": 4
      },
      "lineNbr": 597,
      "author": {
        "id": 14020
      },
      "writtenOn": "2023-03-01T15:00:04Z",
      "side": 1,
      "message": "From looking at the LLVM sources this apparently is triggered when clang emits DWARF with \"relocations across sections\", https://github.com/llvm/llvm-project/blob/2e7311170201e07e5e067e397aed8fa482d2fb8b/llvm/lib/MC/MCDwarf.cpp#L1140. Any idea why this might be in use for riscv64 and not for other targets? I am just curious.",
      "revId": "94bb64779c32642068fcea3a53cd55ec3b47e8e7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}