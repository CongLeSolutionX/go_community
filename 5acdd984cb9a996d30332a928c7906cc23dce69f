{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "25c36973_658251ca",
        "filename": "src/cmd/compile/internal/noder/transform.go",
        "patchSetId": 2
      },
      "lineNbr": 64,
      "author": {
        "id": 5210
      },
      "writtenOn": "2021-04-08T17:14:18Z",
      "side": 1,
      "message": "s/l/list/\n\n(we have a long name \"eltType\" for a single value, and \"l\" for a list of nodes - seems not commensurate)",
      "range": {
        "startLine": 64,
        "startChar": 5,
        "endLine": 64,
        "endChar": 6
      },
      "revId": "5acdd984cb9a996d30332a928c7906cc23dce69f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "91ee4e7f_726c8b1c",
        "filename": "src/cmd/compile/internal/noder/transform.go",
        "patchSetId": 2
      },
      "lineNbr": 64,
      "author": {
        "id": 28783
      },
      "writtenOn": "2021-04-08T19:13:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "25c36973_658251ca",
      "range": {
        "startLine": 64,
        "startChar": 5,
        "endLine": 64,
        "endChar": 6
      },
      "revId": "5acdd984cb9a996d30332a928c7906cc23dce69f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a6ec9bbd_2fdef634",
        "filename": "src/cmd/compile/internal/noder/transform.go",
        "patchSetId": 2
      },
      "lineNbr": 815,
      "author": {
        "id": 5210
      },
      "writtenOn": "2021-04-08T17:14:18Z",
      "side": 1,
      "message": "Make this \"hasKeys\", even if we have to say !hasKeys(...) below (and invert the result).\n\nIt\u0027s always a bit odd to have negative predicates. It works if we just need the negative form, but it we invert the logic somewhere and we need the opposite, we end up with a double negation (!nokeys) which is hard to read (while !hasKeys is easy).",
      "range": {
        "startLine": 815,
        "startChar": 5,
        "endLine": 815,
        "endChar": 11
      },
      "revId": "5acdd984cb9a996d30332a928c7906cc23dce69f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5f9c1071_c001343d",
        "filename": "src/cmd/compile/internal/noder/transform.go",
        "patchSetId": 2
      },
      "lineNbr": 815,
      "author": {
        "id": 28783
      },
      "writtenOn": "2021-04-08T19:13:21Z",
      "side": 1,
      "message": "Done.  Good point.  Note that this is from the code in typecheck/expr.go, so I\u0027m keeping the code mainly the same (even if it ugly), so it is easier to maintain while we have both sets of code around.  But this seems reasonable to fix up.",
      "parentUuid": "a6ec9bbd_2fdef634",
      "range": {
        "startLine": 815,
        "startChar": 5,
        "endLine": 815,
        "endChar": 11
      },
      "revId": "5acdd984cb9a996d30332a928c7906cc23dce69f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8649baa0_d6b2c90c",
        "filename": "src/cmd/compile/internal/noder/transform.go",
        "patchSetId": 2
      },
      "lineNbr": 824,
      "author": {
        "id": 5210
      },
      "writtenOn": "2021-04-08T17:14:18Z",
      "side": 1,
      "message": "s/value/element/",
      "range": {
        "startLine": 824,
        "startChar": 53,
        "endLine": 824,
        "endChar": 58
      },
      "revId": "5acdd984cb9a996d30332a928c7906cc23dce69f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "70dae057_29de489c",
        "filename": "src/cmd/compile/internal/noder/transform.go",
        "patchSetId": 2
      },
      "lineNbr": 824,
      "author": {
        "id": 28783
      },
      "writtenOn": "2021-04-08T19:13:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8649baa0_d6b2c90c",
      "range": {
        "startLine": 824,
        "startChar": 53,
        "endLine": 824,
        "endChar": 58
      },
      "revId": "5acdd984cb9a996d30332a928c7906cc23dce69f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "09fdc6e5_3211f011",
        "filename": "src/cmd/compile/internal/noder/transform.go",
        "patchSetId": 2
      },
      "lineNbr": 853,
      "author": {
        "id": 5210
      },
      "writtenOn": "2021-04-08T17:14:18Z",
      "side": 1,
      "message": "Shouldn\u0027t this just be\n\nreturn key\n\n?\n(it doesn\u0027t look like length is needed)",
      "range": {
        "startLine": 853,
        "startChar": 8,
        "endLine": 853,
        "endChar": 14
      },
      "revId": "5acdd984cb9a996d30332a928c7906cc23dce69f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "efe82511_7caf2363",
        "filename": "src/cmd/compile/internal/noder/transform.go",
        "patchSetId": 2
      },
      "lineNbr": 853,
      "author": {
        "id": 28783
      },
      "writtenOn": "2021-04-08T19:13:21Z",
      "side": 1,
      "message": "No, length is correct.  We are returning the length of the slice needed to hold all the keys/indexes (which is one more than the highest key).  The return value is used in the TSLICE case of OCOMPLIT.  I added a comment to the function header about what we are returning.",
      "parentUuid": "09fdc6e5_3211f011",
      "range": {
        "startLine": 853,
        "startChar": 8,
        "endLine": 853,
        "endChar": 14
      },
      "revId": "5acdd984cb9a996d30332a928c7906cc23dce69f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c7e557c1_d6666abc",
        "filename": "src/cmd/compile/internal/noder/transform.go",
        "patchSetId": 2
      },
      "lineNbr": 853,
      "author": {
        "id": 5210
      },
      "writtenOn": "2021-04-08T20:16:38Z",
      "side": 1,
      "message": "Ack. I missed that key is not always monotonically increasing and we want the max value, essentially.",
      "parentUuid": "efe82511_7caf2363",
      "range": {
        "startLine": 853,
        "startChar": 8,
        "endLine": 853,
        "endChar": 14
      },
      "revId": "5acdd984cb9a996d30332a928c7906cc23dce69f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d1707bd9_4e6a066a",
        "filename": "src/cmd/compile/internal/noder/transform.go",
        "patchSetId": 2
      },
      "lineNbr": 906,
      "author": {
        "id": 5210
      },
      "writtenOn": "2021-04-08T17:14:18Z",
      "side": 1,
      "message": "s/variables/values/",
      "range": {
        "startLine": 906,
        "startChar": 21,
        "endLine": 906,
        "endChar": 30
      },
      "revId": "5acdd984cb9a996d30332a928c7906cc23dce69f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1da8d513_f9d3a8ec",
        "filename": "src/cmd/compile/internal/noder/transform.go",
        "patchSetId": 2
      },
      "lineNbr": 906,
      "author": {
        "id": 28783
      },
      "writtenOn": "2021-04-08T19:13:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d1707bd9_4e6a066a",
      "range": {
        "startLine": 906,
        "startChar": 21,
        "endLine": 906,
        "endChar": 30
      },
      "revId": "5acdd984cb9a996d30332a928c7906cc23dce69f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}