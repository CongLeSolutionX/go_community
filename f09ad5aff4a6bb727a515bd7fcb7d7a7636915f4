{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "e71a04c3_e9c0cc94",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 14020
      },
      "writtenOn": "2024-05-09T22:27:55Z",
      "side": 1,
      "message": "LGTM. I am similarly unclear on why inlining would factor into the checking, hopefully someone with more insight into the runtime can elucidate.",
      "revId": "f09ad5aff4a6bb727a515bd7fcb7d7a7636915f4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9d4d4422_bbde085f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 57259
      },
      "writtenOn": "2024-05-10T14:35:23Z",
      "side": 1,
      "message": "[cc\u0027ing mpratt, who may know]",
      "revId": "f09ad5aff4a6bb727a515bd7fcb7d7a7636915f4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "39c07c3b_142c706a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 12120
      },
      "writtenOn": "2024-05-10T19:35:31Z",
      "side": 1,
      "message": "It doesn\u0027t seem to be related to the checking, it is related to the generated code.\n\nBefore:\n```\n0000000000435660 \u003cruntime.throw.func1\u003e:\n  435660:       /----\u003e 49 3b 66 10              cmp    0x10(%r14),%rsp\n  435664:       |  /-- 76 74                    jbe    4356da \u003cruntime.throw.func1+0x7a\u003e\n  435666:       |  |   55                       push   %rbp\n  435667:       |  |   48 89 e5                 mov    %rsp,%rbp\n  43566a:       |  |   48 83 ec 30              sub    $0x30,%rsp\n  43566e:       |  |   48 8b 42 08              mov    0x8(%rdx),%rax\n  435672:       |  |   48 89 44 24 18           mov    %rax,0x18(%rsp)\n  435677:       |  |   48 8b 4a 10              mov    0x10(%rdx),%rcx\n  43567b:       |  |   48 89 4c 24 10           mov    %rcx,0x10(%rsp)\n  435680:       |  |   e8 bb 1b 00 00           call   437240 \u003cruntime.printlock\u003e\n  435685:       |  |   48 8d 05 2b 86 07 00     lea    0x7862b(%rip),%rax        # 4adcb7 \u003cgo:string.*+0x13df\u003e\n  43568c:       |  |   bb 0d 00 00 00           mov    $0xd,%ebx\n  435691:       |  |   e8 2a 24 00 00           call   437ac0 \u003cruntime.printstring\u003e\n  435696:       |  |   e8 05 1c 00 00           call   4372a0 \u003cruntime.printunlock\u003e\n  43569b:       |  |   48 8b 44 24 18           mov    0x18(%rsp),%rax\n  4356a0:       |  |   48 89 44 24 20           mov    %rax,0x20(%rsp)\n  4356a5:       |  |   48 8b 44 24 10           mov    0x10(%rsp),%rax\n  4356aa:       |  |   48 89 44 24 28           mov    %rax,0x28(%rsp)\n  4356af:       |  |   48 8d 05 ca 0e 06 00     lea    0x60eca(%rip),%rax        # 496580 \u003ctype:*+0x8580\u003e\n  4356b6:       |  |   48 8d 5c 24 20           lea    0x20(%rsp),%rbx\n  4356bb:       |  |   0f 1f 44 00 00           nopl   0x0(%rax,%rax,1)\n  4356c0:       |  |   e8 db 2f fd ff           call   4086a0 \u003cruntime.printpanicval\u003e\n  4356c5:       |  |   e8 76 1b 00 00           call   437240 \u003cruntime.printlock\u003e\n  4356ca:       |  |   e8 b1 1d 00 00           call   437480 \u003cruntime.printnl\u003e\n  4356cf:       |  |   e8 cc 1b 00 00           call   4372a0 \u003cruntime.printunlock\u003e\n  4356d4:       |  |   48 83 c4 30              add    $0x30,%rsp\n  4356d8:       |  |   5d                       pop    %rbp\n  4356d9:       |  |   c3                       ret\n  4356da:       |  \\-\u003e e8 21 2f 03 00           call   468600 \u003cruntime.morestack.abi0\u003e\n  4356df:       |      90                       nop\n  4356e0:       \\----- e9 7b ff ff ff           jmp    435660 \u003cruntime.throw.func1\u003e\n```\n\nAfter:\n```\n0000000000484420 \u003cruntime.resolveNameOff.throw.func1\u003e:\n  484420:       /----\u003e 49 3b 66 10              cmp    0x10(%r14),%rsp\n  484424:       |  /-- 76 6a                    jbe    484490 \u003cruntime.resolveNameOff.throw.func1+0x70\u003e\n  484426:       |  |   55                       push   %rbp\n  484427:       |  |   48 89 e5                 mov    %rsp,%rbp\n  48442a:       |  |   48 83 ec 20              sub    $0x20,%rsp\n  48442e:       |  |   48 8b 42 08              mov    0x8(%rdx),%rax\n  484432:       |  |   48 89 44 24 18           mov    %rax,0x18(%rsp)\n  484437:       |  |   48 8b 4a 10              mov    0x10(%rdx),%rcx\n  48443b:       |  |   48 89 4c 24 10           mov    %rcx,0x10(%rsp)\n  484440:       |  |   e8 9b 62 fc ff           call   44a6e0 \u003cruntime.printlock\u003e\n  484445:       |  |   48 8d 05 6e 07 05 00     lea    0x5076e(%rip),%rax        # 4d4bba \u003cgo:string.*+0x12e2\u003e\n  48444c:       |  |   bb 0d 00 00 00           mov    $0xd,%ebx\n  484451:       |  |   e8 8a 6c fc ff           call   44b0e0 \u003cruntime.printstring\u003e\n  484456:       |  |   e8 e5 62 fc ff           call   44a740 \u003cruntime.printunlock\u003e\n  48445b:       |  |   48 8b 44 24 18           mov    0x18(%rsp),%rax\n  484460:       |  |   48 8b 5c 24 10           mov    0x10(%rsp),%rbx\n  484465:       |  |   e8 f6 87 f8 ff           call   40cc60 \u003cruntime.convTstring\u003e\n  48446a:       |  |   48 89 c3                 mov    %rax,%rbx\n  48446d:       |  |   48 8d 05 0c 91 03 00     lea    0x3910c(%rip),%rax        # 4bd580 \u003ctype:*+0x8580\u003e\n  484474:       |  |   e8 07 52 f8 ff           call   409680 \u003cruntime.printpanicval\u003e\n  484479:       |  |   e8 62 62 fc ff           call   44a6e0 \u003cruntime.printlock\u003e\n  48447e:       |  |   66 90                    xchg   %ax,%ax\n  484480:       |  |   e8 5b 63 fc ff           call   44a7e0 \u003cruntime.printnl\u003e\n  484485:       |  |   e8 b6 62 fc ff           call   44a740 \u003cruntime.printunlock\u003e\n  48448a:       |  |   48 83 c4 20              add    $0x20,%rsp\n  48448e:       |  |   5d                       pop    %rbp\n  48448f:       |  |   c3                       ret\n  484490:       |  \\-\u003e e8 8b 84 00 00           call   48c920 \u003cruntime.morestack.abi0\u003e\n  484495:       \\----- eb 89                    jmp    484420 \u003cruntime.resolveNameOff.throw.func1\u003e\n```\n\nNotice that only the latter has a `convTstring`. I\u0027m not sure exactly why that is, but I assume it is related to the fact that `s` is always unknown in `throw.func1`, but once inlined into `resolveNameOff`, `s` is a constant string literal.",
      "parentUuid": "e71a04c3_e9c0cc94",
      "revId": "f09ad5aff4a6bb727a515bd7fcb7d7a7636915f4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "136d0bc0_9f8536ab",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 57259
      },
      "writtenOn": "2024-05-13T14:38:06Z",
      "side": 1,
      "message": "Thanks for clarifying. I added this comment to the assertion logic:\n\n```\n\t\t\t// Seeing this error in a failed CI run? It indicates that\n\t\t\t// a function in the runtime package marked nowritebarrierrec\n\t\t\t// (the outermost stack element) was found, by a static\n\t\t\t// reachability analysis over the fully lowered optimized code,\n\t\t\t// to call a function (fn) that involves a write barrier.\n\t\t\t//\n\t\t\t// Even if the call path is infeasable,\n\t\t\t// you will need to reorganize the code to avoid it.\n\t\t\tbase.ErrorfAt(fn.WBPos, 0, \"write barrier prohibited by caller; %v%s\", fn.Nname, err.String())\n```",
      "parentUuid": "39c07c3b_142c706a",
      "revId": "f09ad5aff4a6bb727a515bd7fcb7d7a7636915f4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}