{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "487af85b_c1a7f92d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 3378790
      },
      "writtenOn": "2024-04-11T13:39:38Z",
      "side": 1,
      "message": "Thanks for the suggestion, I\u0027ve applied it.",
      "revId": "db48b8e05d938f348c6847b65d5eab00407b7eb8",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bd4d61a1_16228413",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5206
      },
      "writtenOn": "2024-04-11T22:06:30Z",
      "side": 1,
      "message": "The description says that this is consistent with the behavior of -o, but as far as I can see that is not the case.  What -o option are you thinking of?\n\nIn general we don\u0027t expect people to run cgo themselves.  What is invoking cgo with -objdir?",
      "revId": "db48b8e05d938f348c6847b65d5eab00407b7eb8",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0c4126de_9cab7efb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 3378790
      },
      "writtenOn": "2024-04-12T14:37:29Z",
      "side": 1,
      "message": "\u003e What -o option are you thinking of?\n`cmd/compile` and `cmd/asm` - when output file doesn\u0027t exits they create it.\n\n\u003e What is invoking cgo with -objdir?\n- go build - `cmd/go/internal/work`\n- Bazel\n- Buck/Buck2 \n- other build systems\n\nI\u0027m working on Buck2 integration for Go, that\u0027s how I noticed this.",
      "parentUuid": "bd4d61a1_16228413",
      "revId": "db48b8e05d938f348c6847b65d5eab00407b7eb8",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1490dbc4_7fbb097e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5206
      },
      "writtenOn": "2024-04-12T18:08:27Z",
      "side": 1,
      "message": "cmd/compile and cmd/asm create the output file, yes.  But they don\u0027t create the directory that contains the output file.  If that directory doesn\u0027t exist, they fail.\n\nI know that several tools call cgo with -objdir.  What I am wondering about is what calls cgo with -objdir in such a way that the directory may or may not exist.",
      "parentUuid": "0c4126de_9cab7efb",
      "revId": "db48b8e05d938f348c6847b65d5eab00407b7eb8",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8ce047ea_cfa8b2ff",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 3378790
      },
      "writtenOn": "2024-04-15T13:10:47Z",
      "side": 1,
      "message": "\u003e cmd/compile and cmd/asm create the output file, yes. But they don\u0027t create the directory that contains the output file\n\nYes, that\u0027s right. The difference is that for cmd/cgo the \"output artifact\" we specify on as a CLI argument is a directory (not a file).\nAnd the difference in the behavior when the parent directory of an \"output artifact\" exist, but the artifact itself isn\u0027t exist:\n- cmd/compile - successfully creates the output file\n- cmd/cgo - fails because the output directory doesn\u0027t exist\n\n\n\u003e What I am wondering about is what calls cgo with -objdir in such a way that the directory may or may not exist.\n\n[Buck2](https://buck2.build/) doesn\u0027t create an output artifact, but creates the parent directory of an output artifact. Then after running the build action it checks if the artifact was created.\n\nSo, following `.bzl` code has similar structure but works differently on cmd/compile and cmd/cgo.\n\n\n```\n# works\nout_file \u003d ctx.actions.declare_output(\"out.a\")\nctx.actions.run(\"go\", \"tool\", \"compile\", \"-o\", out_file, ...)\n\n\n# fails\nout_dir \u003d ctx.actions.declare_output(\"cgo_out\", dir \u003d True)\nctx.actions.run(\"go\", \"tool\", \"cgo\", \"-objdir\", out_dir, ...)\n```\n\n\nIf we could fix this behavior we would be able to get rid of this [ugly wrapper](https://github.com/facebook/buck2-prelude/blob/main/go/tools/cgo_wrapper.py#L28C7-L28C39) that does only one important thing, creates the directory ðŸ˜€",
      "parentUuid": "1490dbc4_7fbb097e",
      "revId": "db48b8e05d938f348c6847b65d5eab00407b7eb8",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3f88e34d_37e1bbec",
        "filename": "src/cmd/cgo/main.go",
        "patchSetId": 2
      },
      "lineNbr": 392,
      "author": {
        "id": 5206
      },
      "writtenOn": "2024-04-11T22:06:30Z",
      "side": 1,
      "message": "Seems like if we are going to do this we should call os.MkdirAll.",
      "revId": "db48b8e05d938f348c6847b65d5eab00407b7eb8",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8f9b6246_9b90c6f8",
        "filename": "src/cmd/cgo/main.go",
        "patchSetId": 2
      },
      "lineNbr": 392,
      "author": {
        "id": 3378790
      },
      "writtenOn": "2024-04-12T14:37:29Z",
      "side": 1,
      "message": "I also have been thinking this could be useful, let me fix this.",
      "parentUuid": "3f88e34d_37e1bbec",
      "revId": "db48b8e05d938f348c6847b65d5eab00407b7eb8",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}