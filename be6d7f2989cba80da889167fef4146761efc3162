{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "f72fe8c9_ef679412",
        "filename": "src/net/http/internal/chunked.go",
        "patchSetId": 2
      },
      "lineNbr": 84,
      "author": {
        "id": 5305
      },
      "writtenOn": "2021-10-14T22:00:14Z",
      "side": 1,
      "message": "Just break out unconditionally if err !\u003d nil; there\u0027s no reason to issue another read. (And this avoids confusing behavior if the underlying Reader returns an error followed by a non-error return.)\n\n_, cr.err \u003d io.ReadFull(cr.r, cr.buf[:2])\nif cr.err !\u003d nil {\n  break\n}\n\nAnd then rather than checking for io.EOF in two places, we can combine the checks into one at the end of this function.",
      "revId": "be6d7f2989cba80da889167fef4146761efc3162",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0b7a9dbf_0902f572",
        "filename": "src/net/http/internal/chunked.go",
        "patchSetId": 2
      },
      "lineNbr": 84,
      "author": {
        "id": 32637
      },
      "writtenOn": "2021-10-14T22:17:22Z",
      "side": 1,
      "message": "\u003e And then rather than checking for io.EOF in two places, we can combine the checks into one at the end of this function.\n\nWe can enter the function with cr.err \u003d\u003d io.EOF (see cr.beginChunk() and a special handling of the last zero chunk), if we rewrite EOF like\n```\n\tif cr.err \u003d\u003d io.EOF {\n\t\tcr.err \u003d io.ErrUnexpectedEOF\n\t}\n\treturn n, cr.err\n```\nit will break happy case of full read (last check in the test).",
      "parentUuid": "f72fe8c9_ef679412",
      "revId": "be6d7f2989cba80da889167fef4146761efc3162",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "34309cc5_7d186185",
        "filename": "src/net/http/internal/chunked.go",
        "patchSetId": 2
      },
      "lineNbr": 84,
      "author": {
        "id": 32637
      },
      "writtenOn": "2021-10-14T22:23:31Z",
      "side": 1,
      "message": "\u003e We can enter the function with cr.err \u003d\u003d io.EOF\n\nI meant we can finish the loop with cr.err \u003d\u003d io.EOF caused by cr.beginChunk() and not by Read/ReadFull",
      "parentUuid": "0b7a9dbf_0902f572",
      "revId": "be6d7f2989cba80da889167fef4146761efc3162",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}