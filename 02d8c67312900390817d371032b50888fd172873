{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "98669e5d_68480044",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-08-17T23:20:05Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003d02d8c673\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "02d8c67312900390817d371032b50888fd172873",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f6766ccc_312d31bb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-08-17T23:31:42Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "98669e5d_68480044",
      "tag": "autogenerated:trybots~happy",
      "revId": "02d8c67312900390817d371032b50888fd172873",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "faf74fa4_b451a4a4",
        "filename": "src/os/exec/lp_linux_test.go",
        "patchSetId": 9
      },
      "lineNbr": 19,
      "author": {
        "id": 26451
      },
      "writtenOn": "2022-08-18T00:48:53Z",
      "side": 1,
      "message": "OK, this check is still incorrect since AT_EACCESS is handled by syscall.Faccessat internally and so it works on older kernel, too.\n\nNeed to call faccessat2 directly here, and I\u0027m not sure how to do that without doing one of the following:\n1. Make const syscall._SYS_faccessat2 public; or\n2. Make func syscall.Faccessat2 public; or\n3. Duplicate the value of SYS_faccessat2 in internal/syscall/unix.\n\nTo me it seems that the first approach is the best (not too intrusive and avoid duplication), yet it\u0027s still a syscall API change so needs an approval.\n\nWe could also do something like\n\n4. Define public SYS_faccessat in internal/syscall/unix, so it can be used by the test, and have syscall use it as `_SYS_faccessat \u003d unix.SYS_faccessat`\n\n...but this is impossible since internal/syscall/unix depends on syscall and not vice versa.\n\nYet another way is to\n\n5. Introduce an internal `force_faccessat2` Linux-specific flag, honored by syscall.Faccessat, and use it in this test.\n\nThis approach, while doable, seems really ugly to me.",
      "revId": "02d8c67312900390817d371032b50888fd172873",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}