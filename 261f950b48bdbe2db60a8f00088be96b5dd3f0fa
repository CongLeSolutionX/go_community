{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "d15c94f4_1c7cdd5a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 7392
      },
      "writtenOn": "2024-09-26T17:10:01Z",
      "side": 1,
      "message": "First of all, the error message reported by the compiler is not coming from this parser but from cmd/compile/internal/syntax. Both parsers need to be adjusted.\n\nSecond, I agree with Alan that this error message is not an improvement.\n\nI will take care of this issue myself. Please abandon this CL. Thanks.",
      "revId": "261f950b48bdbe2db60a8f00088be96b5dd3f0fa",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3c812112_a8ec7877",
        "filename": "src/go/parser/parser.go",
        "patchSetId": 2
      },
      "lineNbr": 1000,
      "author": {
        "id": 57259
      },
      "writtenOn": "2024-09-26T16:05:06Z",
      "side": 1,
      "message": "I don\u0027t think this message is an improvement.\n\nConsider:\n\n  func(int, int, int, int, a int, int int)\n  \nIn this case, the problem is not that the declaration is incomplete, but that it has a surplus name on one of the parameters. The current error message is better.\n  \nOr:\n\n  func(a int, string)\n  \nIn this case, the problem is a mix of styles; again the current message is better.\n\nI can\u0027t think of a wording that improves the message for \"func(a int, b)\" without hurting the cases above. (The type checker can obviously do better.)",
      "range": {
        "startLine": 1000,
        "startChar": 11,
        "endLine": 1000,
        "endChar": 61
      },
      "revId": "261f950b48bdbe2db60a8f00088be96b5dd3f0fa",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0dd80a13_a7bb2b4d",
        "filename": "src/go/parser/parser.go",
        "patchSetId": 2
      },
      "lineNbr": 1000,
      "author": {
        "id": 58169
      },
      "writtenOn": "2024-09-26T16:36:16Z",
      "side": 1,
      "message": "\u003e func(int, int, int, int, a int, int int)\n\nthe error message for this is `int redeclared in this block`, as the first 4 `int` are treated as variables. The unnamed parameter could only happen at the last because `a,b, c int` will be recognized as a list of variables. So the first one doesn\u0027t apply to the case here.\n\nFor the second one, I agree with you that the real issue is caused by the mixing usage, and the \"variable declaration is incomplete\" only provides one of the possible fix, while we have 2 possible fixes:\n\n- remove the variable declaration: `func(int, string`\n- complete the function decl: `func(a int, b string)` or `func(a int, string []byte)`\n\n\nGiven the error case that all the parameters before are the named one and only the last one is unnamed, it\u0027s reasonable to expect it should be a named parameter as well.\n\nThe problem of the current message is it reports the position of the unnamed parameter, and under such case all the parameters before the position are named parameters. The position of `s` in `func(a int, string)` is mis-leading because we will only encounter this error when we first meet a unnamed parameter(all the parameters before will be recognized as named parameter even though it\u0027s not intended).\n\nBut generally, i think the `mixing` error is enough and usually this kind of error could be awared by users quickly. If you feel it\u0027s not an improvement, it\u0027s also fine to abandon this CL.\n\nBut anyway, thanks for your reviewing, i have learned a lot from you",
      "parentUuid": "3c812112_a8ec7877",
      "range": {
        "startLine": 1000,
        "startChar": 11,
        "endLine": 1000,
        "endChar": 61
      },
      "revId": "261f950b48bdbe2db60a8f00088be96b5dd3f0fa",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "32b5ce00_d3a41dd0",
        "filename": "src/go/parser/parser.go",
        "patchSetId": 2
      },
      "lineNbr": 1000,
      "author": {
        "id": 57259
      },
      "writtenOn": "2024-09-26T16:45:41Z",
      "side": 1,
      "message": "\u003e the error message for this is int redeclared in this block\n\nSorry, in my haste I missed the comma between the last two \"int\"s. With it, the parser emits the \"mixed\" message.\n\n\n\u003e Given the error case that all the parameters before are the named one and only the last one is unnamed, it\u0027s reasonable to expect it should be a named parameter as well.\n\nI agree; and we could refine the existing error to \"unnamed parameter follows named paramter\" or somesuch, but it still wouldn\u0027t help us identify which part (name or type) is missing. If the type is a qualified identifier (e.g. io.Reader), then it\u0027s obviously a type; if it was a capitalized name, we might heuristically guess that it is a type, not a parameter name; but in the bug you actually encountered, the \"type\" was a lower case identifier, so neither of these refinements would have helped.\n\n\n\u003e But generally, i think the mixing error is enough and usually this kind of error could be awared by users quickly. If you feel it\u0027s not an improvement, it\u0027s also fine to abandon this CL.\n\nI haven\u0027t seen any approach yet that would be a real improvement yet here, so I am inclined to abandon it.\n\n\n\u003e But anyway, thanks for your reviewing, i have learned a lot from you\n\nYou\u0027re welcome. Thanks for trying to improve the parser.",
      "parentUuid": "0dd80a13_a7bb2b4d",
      "range": {
        "startLine": 1000,
        "startChar": 11,
        "endLine": 1000,
        "endChar": 61
      },
      "revId": "261f950b48bdbe2db60a8f00088be96b5dd3f0fa",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "16fba338_3323f706",
        "filename": "src/go/parser/parser.go",
        "patchSetId": 2
      },
      "lineNbr": 1000,
      "author": {
        "id": 58169
      },
      "writtenOn": "2024-09-27T02:35:01Z",
      "side": 1,
      "message": "understood, we cannot improve the \"mixing...\" error better without involving the type checker. I have abandoned this CL and another CL in `internal/syntax`. \n\nthanks a lot.",
      "parentUuid": "32b5ce00_d3a41dd0",
      "range": {
        "startLine": 1000,
        "startChar": 11,
        "endLine": 1000,
        "endChar": 61
      },
      "revId": "261f950b48bdbe2db60a8f00088be96b5dd3f0fa",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one Code-Review+2 is required. Self review is not allowed."
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Code-Review=MAX,user=non_uploader"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "261f950b48bdbe2db60a8f00088be96b5dd3f0fa",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Do-Not-Review",
        "description": {
          "value": "Changes that have DO NOT REVIEW in their commit message are not submittable."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (R|r)(E|e)(V|v)(I|i)(E|e)(W|w).*\""
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:false"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (R|r)(E|e)(V|v)(I|i)(E|e)(W|w).*\""},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (R|r)(E|e)(V|v)(I|i)(E|e)(W|w).*\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "261f950b48bdbe2db60a8f00088be96b5dd3f0fa",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Do-Not-Submit",
        "description": {
          "value": "Changes that have DO NOT SUBMIT in their commit message are not submittable."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:false"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "261f950b48bdbe2db60a8f00088be96b5dd3f0fa",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Legacy-TryBots-Pass",
        "description": {
          "value": "Legacy TryBots must pass if requested, unless TryBot-Bypass+1 is set."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "label:Run-TryBot\u003dMAX"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:TryBot-Result\u003dMAX"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:TryBot-Bypass\u003dMAX"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Run-TryBot=MAX"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Run-TryBot=MAX"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:TryBot-Result=MAX"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:TryBot-Bypass=MAX"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "patchSetCommitId": "261f950b48bdbe2db60a8f00088be96b5dd3f0fa",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Matching-Subject-Prefix",
        "description": {
          "value": "Changes on release branches must have a matching [release-branch.go1.nn] subject prefix."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "branch:\"^refs/heads/release-branch.+\" -prefixsubject:\"[release-branch\""
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:false"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"branch:\"^refs/heads/release-branch.+\" -prefixsubject:\"[release-branch\""},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:\"^refs/heads/release-branch.+\"","prefixsubject:\"[release-branch\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "261f950b48bdbe2db60a8f00088be96b5dd3f0fa",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "No-Holds",
        "description": {
          "value": "Changes with a Hold+1 vote are not submittable."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "label:Hold\u003d1"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:false"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Hold=1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Hold=1"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "261f950b48bdbe2db60a8f00088be96b5dd3f0fa",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "No-Signed-off-by-Footer",
        "description": {
          "value": "Changes with a Signed-off-by footer are not submittable. See https://go.dev/wiki/CommitMessage."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "hasfooter:Signed-off-by"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:false"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"hasfooter:Signed-off-by"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["hasfooter:Signed-off-by"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "261f950b48bdbe2db60a8f00088be96b5dd3f0fa",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "No-Unresolved-Comments",
        "description": {
          "value": "Changes that have unresolved comments are not submittable, unless overriden by adding the hashtag allow-unresolved-comments."
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "-has:unresolved"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "hashtag:allow-unresolved-comments"
          }
        },
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-has:unresolved"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":["has:unresolved"],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"hashtag:allow-unresolved-comments"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["hashtag:allow-unresolved-comments"]}
      },
      "patchSetCommitId": "261f950b48bdbe2db60a8f00088be96b5dd3f0fa",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "No-Wait-Release",
        "description": {
          "value": "Changes with the hashtag wait-release cannot be submitted."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "hashtag:wait-release"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:false"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"hashtag:wait-release"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["hashtag:wait-release"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "261f950b48bdbe2db60a8f00088be96b5dd3f0fa",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval. Using a trusted device is required, see go/gerrit-onboarding#review-enforcement."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "261f950b48bdbe2db60a8f00088be96b5dd3f0fa",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "TryBots-Pass",
        "description": {
          "value": "Changes must pass LUCI TryBots unless TryBot-Bypass+1 is set. Vote Commit-Queue+1 to trigger TryBots."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:LUCI-TryBot-Result\u003dMAX"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:TryBot-Bypass\u003dMAX"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:LUCI-TryBot-Result=MAX"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:LUCI-TryBot-Result=MAX"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:TryBot-Bypass=MAX"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:TryBot-Bypass=MAX"]}
      },
      "patchSetCommitId": "261f950b48bdbe2db60a8f00088be96b5dd3f0fa",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}