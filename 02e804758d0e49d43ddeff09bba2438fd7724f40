{
  "comments": [
    {
      "key": {
        "uuid": "98234e23_67489297",
        "filename": "src/runtime/testdata/testprogcgo/sigstack.go",
        "patchSetId": 2
      },
      "lineNbr": 21,
      "author": {
        "id": 6365
      },
      "writtenOn": "2019-03-02T03:27:11Z",
      "side": 1,
      "message": "This seems like a serious issue that the test successfully diagnoses — won\u0027t real users need to worry about signal stack corruption?\n\nIs the problem that to Go signal handler is too sloppy about stack space, that the AIX definition of SIGSTKSZ is unrealistically small, or something else?",
      "revId": "02e804758d0e49d43ddeff09bba2438fd7724f40",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "074af7b4_ec173786",
        "filename": "src/runtime/testdata/testprogcgo/sigstack.go",
        "patchSetId": 2
      },
      "lineNbr": 21,
      "author": {
        "id": 27994
      },
      "writtenOn": "2019-03-04T08:39:53Z",
      "side": 1,
      "message": "Yes, on AIX, SIGSTKSZ is too small when the VMX is used (which is the case on Go)... \nI think this is a bug in AIX kernel, because the stack is corrupted even before entering runtime.sigtramp.",
      "parentUuid": "98234e23_67489297",
      "revId": "02e804758d0e49d43ddeff09bba2438fd7724f40",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4f4ad8c8_fa3450ce",
        "filename": "src/runtime/testdata/testprogcgo/sigstack.go",
        "patchSetId": 2
      },
      "lineNbr": 21,
      "author": {
        "id": 6365
      },
      "writtenOn": "2019-03-04T13:45:02Z",
      "side": 1,
      "message": "In that case, perhaps add a comment referring to an upstream tracking issue?\n(It would be nice to have some means to figure out when, if ever, we can remove this workaround from the Go side.)\n\nIf there is a corresponding workaround within the Go runtime, it might also be helpful to cross-reference that here.",
      "parentUuid": "074af7b4_ec173786",
      "revId": "02e804758d0e49d43ddeff09bba2438fd7724f40",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9ebff2c5_90485828",
        "filename": "src/runtime/testdata/testprogcgo/sigstack.go",
        "patchSetId": 2
      },
      "lineNbr": 21,
      "author": {
        "id": 27994
      },
      "writtenOn": "2019-03-04T14:03:02Z",
      "side": 1,
      "message": "The problem is that I cannot really have a workaround inside Go runtime. If the default SIGSTKSZ value is used the signal handler crashes with: \n         fatal error: non-Go code set up signal handler without SA_ONSTACK flag\n\nMaybe I can improve the error message to explain the problem ? But, I don\u0027t think a workaround is the stack is already corrupted.",
      "parentUuid": "4f4ad8c8_fa3450ce",
      "revId": "02e804758d0e49d43ddeff09bba2438fd7724f40",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "11f86edc_b5165f04",
        "filename": "src/runtime/testdata/testprogcgo/sigstack.go",
        "patchSetId": 2
      },
      "lineNbr": 21,
      "author": {
        "id": 6365
      },
      "writtenOn": "2019-03-04T14:16:50Z",
      "side": 1,
      "message": "\u003e The problem is that I cannot really have a workaround inside Go runtime. If the default SIGSTKSZ value is used the signal handler crashes with: \n\u003e          fatal error: non-Go code set up signal handler without SA_ONSTACK flag\n\nWhat I meant was, if you need a stack larger than SIGSTKSZ here, then the threads created by the Go runtime probably also need a stack larger than SIGSTKSZ. Presumably the stack size that the Go runtime uses ought to be large enough for simple C handlers as well, so if you link to that code here we can more easily verify that the two estimates of “reasonable signal stack size” match.",
      "parentUuid": "9ebff2c5_90485828",
      "revId": "02e804758d0e49d43ddeff09bba2438fd7724f40",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    }
  ]
}