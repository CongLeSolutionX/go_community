{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "66cfc79a_01dc65ca",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 58169
      },
      "writtenOn": "2024-10-05T03:31:29Z",
      "side": 1,
      "message": "Feel sorry and that wasn\u0027t my intention. I didn\u0027t expect my changes to break the pipeline.\n\nI have checked the builders and looks like the test introduced by me is a bit fragile. For example, the 3 commits\u0027s pipeline have different output, even though they should all succeed.\n[gotip-linux-amd64- aliastypeparams](https://ci.chromium.org/ui/p/golang/builders/ci/gotip-linux-amd64-aliastypeparams):\n```\neae89f37d(change in CL 616615) --\u003e succeeded\nd39bfafee(after eae) --\u003e failed\n2f507985d(after d39) --\u003e succeeded.\n```\n\nIt\u0027s similar in [gotip-openbsd-amd64](https://ci.chromium.org/ui/p/golang/builders/ci/gotip-openbsd-amd64).\n\nWe can fix the fragile testing by removing the rw mode checking. Because it\u0027s totally OS behaviours strictly speaking. When I raised the CL, I thought it\u0027s no harm to check it as well, can see the comment here: https://go-review.googlesource.com/c/go/+/616615/comment/82bd63e9_6588a0dc/.\n\nBut now it does harm on the ci and makes testing fragile, we can consider to remove this part. \n\nCould you kindly let me know your idea? I\u0027m not sure the process to handle ci failure in such scenario to handle the failure.",
      "revId": "ab364df93e379e8f9a6c294092ce9970f674dcdf",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7c11a66b_e91f2fc0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 58169
      },
      "writtenOn": "2024-10-05T08:16:21Z",
      "side": 1,
      "message": "cool, I got the root cause. It\u0027s *not* the system problem. The error is caused that `TestCopyFS` calls CopyFS when `TestMkdirStickyUmask` sets the `umask` with 0777, but when we create a file to verify, `TestMkdirStickyUmask` has restored umask with the original value, as the flow shown below:\n\n```\nTestMkdirStickyUmask: change the umask\nTestCopyFS: CopyFS using the CHANGED umask\nTestMkdirStickyUmask: reset the old umask back\nTestCopyFS: create a file with original umask for comparing\n```\nSo the want and got are different. You can pull the patchset of [CL 618055](https://go-review.googlesource.com/c/go/+/618055) to reproduce it. I think the reasonble fix is to remove `t.Parallel` call in either `TestMkdirStickyUmask` or `TestCopyFS`. Because it\u0027s introduced by my change, I have removed the `Parallel()` in `TestCopyFS` at patchset 2. \n\n```\n➜  src git:(yuchen.xie/fix-failed-pipeline) uname -a\nLinux xieyuschen 5.15.0-48-generic #54~20.04.1-Ubuntu SMP Thu Sep 1 16:17:26 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux\n➜  src git:(yuchen.xie/fix-failed-pipeline) umask\n022\n➜  src git:(yuchen.xie/fix-failed-pipeline) git rev-parse HEAD\n56fb52cc3c89ae85db7d05e0c9d6c97e8ee5b92e\n➜  src git:(yuchen.xie/fix-failed-pipeline) $GOROOT/bin/go version                     \ngo version devel go1.24-2f507985dc Fri Oct 4 20:34:42 2024 +0000 linux/amd64\n➜  src git:(yuchen.xie/fix-failed-pipeline) $GOROOT/bin/go test ./os -run TestCopyFS -v\n\u003d\u003d\u003d RUN   TestCopyFS\n\u003d\u003d\u003d PAUSE TestCopyFS\n\u003d\u003d\u003d RUN   TestCopyFSWithSymlinks\n    os_test.go:3534: skip the subsequent test and wait for #49580\n--- SKIP: TestCopyFSWithSymlinks (0.00s)\n\u003d\u003d\u003d CONT  TestCopyFS\n    os_test.go:3325: comparing two directories: file \"a\" rw mode is -rw-------, want -rw-r--r--\n--- FAIL: TestCopyFS (0.00s)\nFAIL\nFAIL    os      0.008s\nFAI\n```\n\nThanks a lot, and apologize that I have missed to check whether the other tests have set the umask.",
      "parentUuid": "66cfc79a_01dc65ca",
      "revId": "ab364df93e379e8f9a6c294092ce9970f674dcdf",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}