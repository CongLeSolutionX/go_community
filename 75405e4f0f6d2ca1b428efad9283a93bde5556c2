{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "9ed45be4_aee9ec7a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-10-11T22:27:34Z",
      "side": 1,
      "message": "SlowBots beginning. Status page: https://farmer.golang.org/try?commit\u003d75405e4f",
      "tag": "autogenerated:trybots~beginning",
      "revId": "75405e4f0f6d2ca1b428efad9283a93bde5556c2",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d18cd1ee_41dcf50d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-10-11T22:27:34Z",
      "side": 1,
      "message": "Superseded.",
      "parentUuid": "967c2501_600bf961",
      "tag": "autogenerated:trybots~beginning",
      "revId": "75405e4f0f6d2ca1b428efad9283a93bde5556c2",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e83fac4c_9d53dba4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-10-11T22:42:11Z",
      "side": 1,
      "message": "SlowBots are happy.\n\nSlowBot builds that ran:\n* linux-amd64-longtest\n* windows-amd64-longtest\n",
      "parentUuid": "9ed45be4_aee9ec7a",
      "tag": "autogenerated:trybots~happy",
      "revId": "75405e4f0f6d2ca1b428efad9283a93bde5556c2",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6eaadfc4_62604d22",
        "filename": "src/cmd/go/internal/load/pkg.go",
        "patchSetId": 8
      },
      "lineNbr": 2287,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-10-12T21:14:36Z",
      "side": 1,
      "message": "This verifies that p.Module is in a subtree of repoDir â€” do we also need to check that there is no VCS boundary in between repoDir and p.Module.Dir?\n\nI\u0027m imagining something like:\n\n-- root/.git/config --\n-- root/go.mod --\nmodule funky\n-- root/sub/.git/config --\n-- root/sub/main.go --\npackage main\n\n\nFor package `funky/sub`, that would give repoDir as `root`, and `p.Module.Dir` as `root/sub`, but it wouldn\u0027t be accurate to stamp the `funky/sub` binary with VCS status from the `root` repository, because the `funky/sub` source could could contain arbitrary changes.\n\n(Or am I missing such a check somewhere?)",
      "range": {
        "startLine": 2287,
        "startChar": 45,
        "endLine": 2287,
        "endChar": 89
      },
      "revId": "75405e4f0f6d2ca1b428efad9283a93bde5556c2",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4a96a155_47e9b6f3",
        "filename": "src/cmd/go/internal/load/pkg.go",
        "patchSetId": 8
      },
      "lineNbr": 2287,
      "author": {
        "id": 17092
      },
      "writtenOn": "2021-10-13T00:04:28Z",
      "side": 1,
      "message": "Hmm, good point. vcs.FromDir usually returns an error for one repo inside another, but not for git-within-git (because submodules). Also with workspaces, it\u0027s entirely possible the current directory, main package, and main module containing it are in different repositories.\n\nAdded more checks below and a test.",
      "parentUuid": "6eaadfc4_62604d22",
      "range": {
        "startLine": 2287,
        "startChar": 45,
        "endLine": 2287,
        "endChar": 89
      },
      "revId": "75405e4f0f6d2ca1b428efad9283a93bde5556c2",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "281f76f1_d9dc4453",
        "filename": "src/cmd/go/internal/vcs/vcs.go",
        "patchSetId": 8
      },
      "lineNbr": 765,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-10-12T21:14:36Z",
      "side": 1,
      "message": "Since this function is now exported, a comment about what it checks would be helpful.",
      "revId": "75405e4f0f6d2ca1b428efad9283a93bde5556c2",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4f851e57_b505fba0",
        "filename": "src/cmd/go/internal/vcs/vcs.go",
        "patchSetId": 8
      },
      "lineNbr": 765,
      "author": {
        "id": 17092
      },
      "writtenOn": "2021-10-13T00:04:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "281f76f1_d9dc4453",
      "revId": "75405e4f0f6d2ca1b428efad9283a93bde5556c2",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6fbd1cb3_1fa84671",
        "filename": "src/runtime/debug/mod.go",
        "patchSetId": 8
      },
      "lineNbr": 94,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-10-12T21:14:36Z",
      "side": 1,
      "message": "The encoding of these values assumes that they do not contain certain characters (\\t or \\n). The specific constraints should probably be documented here, and perhaps verified somewhere (perhaps via an error-return from a MarshalBinary method?).",
      "revId": "75405e4f0f6d2ca1b428efad9283a93bde5556c2",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eff2c71f_ac2d90a9",
        "filename": "src/runtime/debug/mod.go",
        "patchSetId": 8
      },
      "lineNbr": 94,
      "author": {
        "id": 17092
      },
      "writtenOn": "2021-10-13T00:04:28Z",
      "side": 1,
      "message": "Documented here and added a panic in String.\n\nTabs and newlines are the two control characters used in ParseBuildInfo. I hesitate to make it any stricter since compiler and linker flags like -X may go in here, and they can contain arbitrary text. I don\u0027t want to quote them either since they may already be quoted in a format understood by str.SplitQuotedFields, and it\u0027s not safe to call that multiple times.\n\nAbout MarshalBinary: is there a reason to use that over String (or MarshalText?). I don\u0027t want to import \"encoding\" here, but I guess that wouldn\u0027t be needed for BuildInfo to satisfy encoding.TextMarshaler and TextUnmarshaler.",
      "parentUuid": "6fbd1cb3_1fa84671",
      "revId": "75405e4f0f6d2ca1b428efad9283a93bde5556c2",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}