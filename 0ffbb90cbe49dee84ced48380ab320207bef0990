{
  "comments": [
    {
      "key": {
        "uuid": "73a5f8c0_e77634ce",
        "filename": "src/reflect/value.go",
        "patchSetId": 1
      },
      "lineNbr": 2086,
      "author": {
        "id": 5206
      },
      "writtenOn": "2017-04-10T17:52:04Z",
      "side": 1,
      "message": "The spec says \"make(T, n)\" produces a \"map of type T with initial space for n elements\".  We could just echo the spec here: \"MakeMapWithSize creates a new map with the specified type and initial space for n elements.\"",
      "range": {
        "startLine": 2085,
        "startChar": 3,
        "endLine": 2086,
        "endChar": 17
      },
      "revId": "0ffbb90cbe49dee84ced48380ab320207bef0990",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9e282469_7b2a9f5c",
        "filename": "src/reflect/value.go",
        "patchSetId": 1
      },
      "lineNbr": 2086,
      "author": {
        "id": 5015
      },
      "writtenOn": "2017-04-10T18:46:24Z",
      "side": 1,
      "message": "It\u0027s not correct grammar to say \"created with a hint\". Ian\u0027s suggestion is better.\n\nBUT: The reason I pushed for this issue is that someone is trying to write code that exploits the internals of this operation and includes a peculiar doubling. I want to know whether we commit to something meaningful about the hint, or say that it is entirely implementation-defined and kill any code that exploits it otherwise.",
      "parentUuid": "73a5f8c0_e77634ce",
      "range": {
        "startLine": 2085,
        "startChar": 3,
        "endLine": 2086,
        "endChar": 17
      },
      "revId": "0ffbb90cbe49dee84ced48380ab320207bef0990",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "65ccd159_38f00c03",
        "filename": "src/reflect/value.go",
        "patchSetId": 1
      },
      "lineNbr": 2086,
      "author": {
        "id": 5056
      },
      "writtenOn": "2017-04-10T18:48:57Z",
      "side": 1,
      "message": "I believe it is entirely implementation-defined, both in make(map[K]V, n) and in this function.",
      "parentUuid": "9e282469_7b2a9f5c",
      "range": {
        "startLine": 2085,
        "startChar": 3,
        "endLine": 2086,
        "endChar": 17
      },
      "revId": "0ffbb90cbe49dee84ced48380ab320207bef0990",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "544c1e4e_f071354a",
        "filename": "src/reflect/value.go",
        "patchSetId": 1
      },
      "lineNbr": 2086,
      "author": {
        "id": 5206
      },
      "writtenOn": "2017-04-10T18:50:07Z",
      "side": 1,
      "message": "In my opinion the spec says it right: the map is created with enough space to hold N elements.\n\nIt follows that if code is going to add N elements to a map, that is the exact value that it should pass to `make` or to `reflect.MakeMapWithSize`.  No reason for any doubling or other fiddling.  Unless you are unsure about how many elements you are going to add.",
      "parentUuid": "9e282469_7b2a9f5c",
      "range": {
        "startLine": 2085,
        "startChar": 3,
        "endLine": 2086,
        "endChar": 17
      },
      "revId": "0ffbb90cbe49dee84ced48380ab320207bef0990",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "85de8aa0_44419424",
        "filename": "src/reflect/value.go",
        "patchSetId": 1
      },
      "lineNbr": 2086,
      "author": {
        "id": 5056
      },
      "writtenOn": "2017-04-10T19:14:46Z",
      "side": 1,
      "message": "This is the logic I was trying to avoid. Due to the unpredictability of hash collisions, a map with allocated space for N elements may or may not actually hold the N elements you want to insert, depending on exactly how they hash. (This is also what I think https://golang.org/ref/spec#Map_types is trying to avoid; you found text in https://golang.org/ref/spec#Making_slices_maps_and_channels, which I\u0027d missed when I went looking.)",
      "parentUuid": "544c1e4e_f071354a",
      "range": {
        "startLine": 2085,
        "startChar": 3,
        "endLine": 2086,
        "endChar": 17
      },
      "revId": "0ffbb90cbe49dee84ced48380ab320207bef0990",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "32bd0473_0509a249",
        "filename": "src/reflect/value.go",
        "patchSetId": 1
      },
      "lineNbr": 2088,
      "author": {
        "id": 5065
      },
      "writtenOn": "2017-04-10T17:30:48Z",
      "side": 1,
      "message": "Or drop the word \"in\".",
      "range": {
        "startLine": 2088,
        "startChar": 8,
        "endLine": 2088,
        "endChar": 11
      },
      "revId": "0ffbb90cbe49dee84ced48380ab320207bef0990",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "36fc880f_e98c79fd",
        "filename": "src/reflect/value.go",
        "patchSetId": 1
      },
      "lineNbr": 2088,
      "author": {
        "id": 5056
      },
      "writtenOn": "2017-04-10T17:31:48Z",
      "side": 1,
      "message": "I never remember which to use. Will wait for Rob.",
      "parentUuid": "32bd0473_0509a249",
      "range": {
        "startLine": 2088,
        "startChar": 8,
        "endLine": 2088,
        "endChar": 11
      },
      "revId": "0ffbb90cbe49dee84ced48380ab320207bef0990",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "52f3fe3d_cea3d049",
        "filename": "src/reflect/value.go",
        "patchSetId": 1
      },
      "lineNbr": 2088,
      "author": {
        "id": 5206
      },
      "writtenOn": "2017-04-10T17:52:04Z",
      "side": 1,
      "message": "It\u0027s \"Like X\" or \"As in X\", but in this case I would go for \"As with X\".",
      "parentUuid": "36fc880f_e98c79fd",
      "range": {
        "startLine": 2088,
        "startChar": 8,
        "endLine": 2088,
        "endChar": 11
      },
      "revId": "0ffbb90cbe49dee84ced48380ab320207bef0990",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6e39e72b_5e2aa9c4",
        "filename": "src/reflect/value.go",
        "patchSetId": 1
      },
      "lineNbr": 2088,
      "author": {
        "id": 5015
      },
      "writtenOn": "2017-04-10T18:46:24Z",
      "side": 1,
      "message": "It should be \"As with\".",
      "parentUuid": "52f3fe3d_cea3d049",
      "range": {
        "startLine": 2088,
        "startChar": 8,
        "endLine": 2088,
        "endChar": 11
      },
      "revId": "0ffbb90cbe49dee84ced48380ab320207bef0990",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    }
  ]
}