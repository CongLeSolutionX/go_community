{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "32d7c097_d48ad6df",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-07-30T12:32:12Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003dc427217e\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "c427217e6a2dbdad6388f06e1f9ac41bfba5151f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a8314ca2_cd442ae3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-07-30T12:43:38Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "32d7c097_d48ad6df",
      "tag": "autogenerated:trybots~happy",
      "revId": "c427217e6a2dbdad6388f06e1f9ac41bfba5151f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7c0bd35e_9161b42d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 14570
      },
      "writtenOn": "2023-07-31T17:10:25Z",
      "side": 1,
      "message": "Thanks, but I don\u0027t think this is the right approach. Nils are valid values and a type might choose to format nil in some reasonable way. What I believe we should do instead is to trap panics during formatting, just like fmt.Printf does. I think the right place to do that is handleState.appendValue, in handler.go.\n\nThoughts?",
      "revId": "c427217e6a2dbdad6388f06e1f9ac41bfba5151f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "475d565a_54883331",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 34725
      },
      "writtenOn": "2023-07-31T18:29:06Z",
      "side": 1,
      "message": "The current approach first checks if a value with KindAny is nil, if so, it delegates the formatting job to fmt.Sprintf which traps panics as you said, thus I failed to see the conflict between your opinion and the current implementation, I don\u0027t understand why we have to trap the panics when the fmt.Sprintf has already done it, please let me know if I\u0027m missing something from your comment.",
      "parentUuid": "7c0bd35e_9161b42d",
      "revId": "c427217e6a2dbdad6388f06e1f9ac41bfba5151f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a6172027_572d2b4a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 14570
      },
      "writtenOn": "2023-08-01T12:07:46Z",
      "side": 1,
      "message": "I could implement a type whose MarshalText method behaved nicely with nil:\n\n    type T int\n    func (t *T) MarshalText() ([]byte, error) {\n       if t \u003d\u003d nil {\n          return []byte(\"I\u0027m nil and I love it!\"), nil\n       }\n       ...\n   }\n   \n TextHandler should call that method. TextHandler should _always_ call the MarshalText method if there is one. Since it can\u0027t look inside the method, it has to trap panics.",
      "parentUuid": "475d565a_54883331",
      "revId": "c427217e6a2dbdad6388f06e1f9ac41bfba5151f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7a1d2230_36cfbbfe",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 34725
      },
      "writtenOn": "2023-08-01T12:13:46Z",
      "side": 1,
      "message": "Now I get your point, thanks for the explanation.\n\nI\u0027ll upload a commit later.",
      "parentUuid": "a6172027_572d2b4a",
      "revId": "c427217e6a2dbdad6388f06e1f9ac41bfba5151f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c3dfd165_5c8b6678",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 62853
      },
      "writtenOn": "2023-08-01T13:08:21Z",
      "side": 1,
      "message": "https://go.dev/play/p/bfepUgSGSVE?v\u003dgotip\n\nSorry for this annoying test, is it worth a fix?",
      "parentUuid": "7a1d2230_36cfbbfe",
      "revId": "c427217e6a2dbdad6388f06e1f9ac41bfba5151f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "08e9d77f_70c0d50f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 62853
      },
      "writtenOn": "2023-08-01T13:39:30Z",
      "side": 1,
      "message": "If I understand correctly, Jonathan means to modify the method that implements MarshalText.\n\nI found two possible panics.\n- *regexp.Regexp\n- *slog.LevelVar",
      "parentUuid": "c3dfd165_5c8b6678",
      "revId": "c427217e6a2dbdad6388f06e1f9ac41bfba5151f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "df00e17a_490c3dd8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 62853
      },
      "writtenOn": "2023-08-01T13:56:42Z",
      "side": 1,
      "message": "Maybe I am wrong, if so, sorry.",
      "parentUuid": "08e9d77f_70c0d50f",
      "revId": "c427217e6a2dbdad6388f06e1f9ac41bfba5151f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}