{
  "comments": [
    {
      "key": {
        "uuid": "5c8ac543_452d9548",
        "filename": "misc/cgo/test/issue18720.go",
        "patchSetId": 1
      },
      "lineNbr": 16,
      "author": {
        "id": 5206
      },
      "writtenOn": "2017-04-21T14:15:08Z",
      "side": 1,
      "message": "Why not do the test right here?  Why call another function?",
      "revId": "d23ecd1ee685dea979921fb8db7c21915908afea",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e8114ac6_c1aa94bb",
        "filename": "misc/cgo/test/issue18720.go",
        "patchSetId": 1
      },
      "lineNbr": 16,
      "author": {
        "id": 11631
      },
      "writtenOn": "2017-04-22T00:54:29Z",
      "side": 1,
      "message": "I have a plan to send subsequent CLs which address different topics.\nBut I could cleanup in a later step. so, done.",
      "parentUuid": "5c8ac543_452d9548",
      "revId": "d23ecd1ee685dea979921fb8db7c21915908afea",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9784b236_aa5b41d7",
        "filename": "src/cmd/cgo/gcc.go",
        "patchSetId": 1
      },
      "lineNbr": 494,
      "author": {
        "id": 5206
      },
      "writtenOn": "2017-04-21T14:15:08Z",
      "side": 1,
      "message": "Space after \\t looks wrong.",
      "range": {
        "startLine": 494,
        "startChar": 22,
        "endLine": 494,
        "endChar": 23
      },
      "revId": "d23ecd1ee685dea979921fb8db7c21915908afea",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cf37157f_cc9f1827",
        "filename": "src/cmd/cgo/gcc.go",
        "patchSetId": 1
      },
      "lineNbr": 494,
      "author": {
        "id": 11631
      },
      "writtenOn": "2017-04-22T00:54:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9784b236_aa5b41d7",
      "range": {
        "startLine": 494,
        "startChar": 22,
        "endLine": 494,
        "endChar": 23
      },
      "revId": "d23ecd1ee685dea979921fb8db7c21915908afea",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "150a615e_6f8c819f",
        "filename": "src/cmd/cgo/gcc.go",
        "patchSetId": 1
      },
      "lineNbr": 1334,
      "author": {
        "id": 5206
      },
      "writtenOn": "2017-04-21T14:15:08Z",
      "side": 1,
      "message": "Where does this __cstring name come from?  Seems like that will be compiler dependent.  You should be able to find the right section by pulling the address out of the array and looking through the sections for the one that includes that address.",
      "revId": "d23ecd1ee685dea979921fb8db7c21915908afea",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bf390f50_1f190a6c",
        "filename": "src/cmd/cgo/gcc.go",
        "patchSetId": 1
      },
      "lineNbr": 1334,
      "author": {
        "id": 11631
      },
      "writtenOn": "2017-04-22T00:54:29Z",
      "side": 1,
      "message": "__cstring come from \nhttps://github.com/aidansteele/osx-abi-macho-file-format-reference/blob/master/Mach-O_File_Format.pdf\nhttps://developer.apple.com/library/content/documentation/DeveloperTools/Reference/Assembler/040-Assembler_Directives/asm_directives.html\n\nSo I think it follow the spec at least.\nIf some compilers don\u0027t follow the rule, how can I filter sections? Can I still use S_CSTRING_LITERALS flag?\nHonestly, I don\u0027t know how to deal with symbol values here.",
      "parentUuid": "150a615e_6f8c819f",
      "revId": "d23ecd1ee685dea979921fb8db7c21915908afea",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "44ef2004_72138612",
        "filename": "src/cmd/cgo/gcc.go",
        "patchSetId": 1
      },
      "lineNbr": 1334,
      "author": {
        "id": 5206
      },
      "writtenOn": "2017-04-24T22:26:29Z",
      "side": 1,
      "message": "What you have here is an object file and a value in that object file.  That value will have a relocation that points to the string data.  So the reliable way to find the string data is to look through the relocations for this section for one that applies to this entry in the array.  I\u0027m skeptical that the approach you are using here is going to be reliable across compilers.\n\nAnother and perhaps simpler approach is to not try to build an array.  Instead build a set of symbols\n\nconst char __cgo_str__0[] \u003d \"constant\";\nconst char __cgo_str__1[] \u003d  \"constant\";\n\nand so forth.  Then when you find a symbol whose name starts with __cgo_str__, you can read the data from the section up to the NUL byte.\n\nBut when I write that I realize that this will mishandle\n\n#define S \"a\\000b\"\n\nSo you also need something like\n\nconst size_t __cgo_strlen__0 \u003d sizeof \"constant\" - 1;\n\nto know how many bytes to read.",
      "parentUuid": "bf390f50_1f190a6c",
      "revId": "d23ecd1ee685dea979921fb8db7c21915908afea",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    }
  ]
}