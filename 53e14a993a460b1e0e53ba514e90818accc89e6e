{
  "comments": [
    {
      "key": {
        "uuid": "707552b8_a74b92b6",
        "filename": "src/go/build/deps_test.go",
        "patchSetId": 1
      },
      "lineNbr": 413,
      "author": {
        "id": 5055
      },
      "writtenOn": "2015-04-16T21:24:35Z",
      "side": 1,
      "message": "please avoid using os/exec here. that will make\nit impossible to run the test on certain platforms.",
      "revId": "53e14a993a460b1e0e53ba514e90818accc89e6e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d080bec6_339d74b2",
        "filename": "src/go/build/deps_test.go",
        "patchSetId": 1
      },
      "lineNbr": 413,
      "author": {
        "id": 5440
      },
      "writtenOn": "2015-04-16T21:31:41Z",
      "side": 1,
      "message": "How does cmd/api work on those platforms?  I based this code after http://tip.golang.org/src/cmd/api/goapi.go?s\u003d3672:3727#L120",
      "parentUuid": "707552b8_a74b92b6",
      "revId": "53e14a993a460b1e0e53ba514e90818accc89e6e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "707552b8_829be471",
        "filename": "src/go/build/deps_test.go",
        "patchSetId": 1
      },
      "lineNbr": 413,
      "author": {
        "id": 5055
      },
      "writtenOn": "2015-04-16T21:38:48Z",
      "side": 1,
      "message": "the api test is portable in the sense that just running\nit on platform will check api for all platforms, so it\u0027s\nnot run on those limited platforms.\n\nThis test, however, in short mode only test the current\nplatform, so if we have to shell out to cmd/go here, we\nwill need to enable the test on all platforms to cover\nthose limited platforms.",
      "parentUuid": "d080bec6_339d74b2",
      "revId": "53e14a993a460b1e0e53ba514e90818accc89e6e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d080bec6_7e53b3bf",
        "filename": "src/go/build/deps_test.go",
        "patchSetId": 1
      },
      "lineNbr": 413,
      "author": {
        "id": 5440
      },
      "writtenOn": "2015-04-16T21:59:43Z",
      "side": 1,
      "message": "It seems like that problem would be addressed by https://github.com/golang/go/issues/10456\n\nAlso, at the moment this test is broken in non-short mode anyway because of https://github.com/golang/go/issues/10455\n\nDunno.  How severe is this compared to the problem that we\u0027re not tracking new standard library packages accurately?  Can you (or anyone) suggest a concrete path forward to solving this?\n\nIt seems like most packages are unlikely to add unwanted OS-specific dependencies, so maybe coverage on just the main platforms is sufficient for now?",
      "parentUuid": "707552b8_829be471",
      "revId": "53e14a993a460b1e0e53ba514e90818accc89e6e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "707552b8_627c886f",
        "filename": "src/go/build/deps_test.go",
        "patchSetId": 1
      },
      "lineNbr": 413,
      "author": {
        "id": 5055
      },
      "writtenOn": "2015-04-16T22:10:16Z",
      "side": 1,
      "message": "At a first step, i think we can make the deps test\ntreat any packages not in the table as not allowed\nto import any packages.\n\nAdding a new non-internal package to the standard packages\nshould be very rare, so this check alone should catch\nall the problems.\n\nWe can have a non-short test that use the go command\nto check all std packages are listed in the table,\nthen coupled with #10455, we should be safe.",
      "parentUuid": "d080bec6_7e53b3bf",
      "revId": "53e14a993a460b1e0e53ba514e90818accc89e6e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "707552b8_a28940f8",
        "filename": "src/go/build/deps_test.go",
        "patchSetId": 1
      },
      "lineNbr": 413,
      "author": {
        "id": 5055
      },
      "writtenOn": "2015-04-16T22:11:16Z",
      "side": 1,
      "message": "Update: s/so this check alone should catch all the problems/\nso this check alone should catch most of the problems/",
      "parentUuid": "707552b8_627c886f",
      "revId": "53e14a993a460b1e0e53ba514e90818accc89e6e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "506daeeb_0968551e",
        "filename": "src/go/build/deps_test.go",
        "patchSetId": 1
      },
      "lineNbr": 413,
      "author": {
        "id": 5440
      },
      "writtenOn": "2015-04-17T01:58:05Z",
      "side": 1,
      "message": "\u003e At a first step, i think we can make the deps test\n \u003e treat any packages not in the table as not allowed\n \u003e to import any packages.\n\nTestDependencies already treats packages not listed in pkgDeps as not allowed to import any packages.  That\u0027s not a problem.  E.g., container/list has no dependencies, so this CL doesn\u0027t add an entry for container/list.\n\nThe problem is that currently it only tested packages with entries in pkgDeps.  For example, it doesn\u0027t apply *any* dependency checks to internal/syscall/windows, because there\u0027s no entry for internal/syscall/windows in pkgDeps, even though internal/syscall/windows does have dependencies.\n\n \u003e We can have a non-short test that use the go command\n \u003e to check all std packages are listed in the table,\n\nI don\u0027t see how that\u0027s an improvement over the approach I took here.  Can you elaborate?\n\nWith this CL, we only run \"go list std\" once for the current GOOS/GOARCH combination in short-mode, and then run it for all GOOS/GOARCH combinations in non-short-mode.\n\nIt sounds like you\u0027re proposing a second test that only runs in non-short-mode, still runs \"go list std\" for all GOOS/GOARCH combinations, and makes sure that all packages listed are also present in pkgDeps.\n\nThat has the advantage of saving one \"go list std\" invocation during short mode, but that only costs a fraction of a second.  Am I wrong to think that\u0027s an insignificant amount of time?\n\nIt also has the disadvantage of requiring every package (even those with no dependencies) to be listed in pkgDeps, which seems contradictory to your stance that unlisted packages should be treated as not allowing any dependencies.\n\nLastly, it doesn\u0027t seem to help the issue that running \"go list std\" once per GOOS/GOARCH combination is very slow for non-short-mode.",
      "parentUuid": "707552b8_627c886f",
      "revId": "53e14a993a460b1e0e53ba514e90818accc89e6e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}