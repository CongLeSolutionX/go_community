{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "4d478c35_f29e977f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 17092
      },
      "writtenOn": "2021-09-13T18:38:15Z",
      "side": 1,
      "message": "Change Fixes to For if this doesn\u0027t resolve the issue; from the thread, it sounded like there was something else.",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 9,
        "endChar": 21
      },
      "revId": "467207585ddc739917ae1344e113219c496f0624",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f374e409_9da9a1b4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 28759
      },
      "writtenOn": "2021-09-13T16:34:39Z",
      "side": 1,
      "message": "I\u0027m probably going to follow up with another CL this week which improves the flow of this a bit. Right now, if coverage is disabled and someone runs fuzzing with `-run\u003dNone` to disable the fuzz target\u0027s initial seed corpus checks, then we could start fuzzing without ever running the seed corpus once. That seems broken to me. (What if someone introduced a bug that their seed corpus would have already covered, and we start writing \"new\" crasher files in testdata/fuzz that don\u0027t actually expand the test coverage)\n\nBut this should work in the interim, and fixes some other issues anyway.",
      "revId": "467207585ddc739917ae1344e113219c496f0624",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8c345306_93f56340",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 28759
      },
      "writtenOn": "2021-09-13T16:34:51Z",
      "side": 1,
      "message": "TRY\u003ddarwin-amd64-longtest,linux-amd64-longtest,windows-amd64-longtest\n",
      "revId": "467207585ddc739917ae1344e113219c496f0624",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "df1695c5_49304db8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-09-13T16:35:07Z",
      "side": 1,
      "message": "SlowBots beginning. Status page: https://farmer.golang.org/try?commit\u003d46720758",
      "tag": "autogenerated:trybots~beginning",
      "revId": "467207585ddc739917ae1344e113219c496f0624",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b5da4056_fb7d59bc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-09-13T16:48:09Z",
      "side": 1,
      "message": "SlowBots are happy.\n\nSlowBot builds that ran:\n* linux-amd64-longtest\n* windows-amd64-longtest\n",
      "parentUuid": "df1695c5_49304db8",
      "tag": "autogenerated:trybots~happy",
      "revId": "467207585ddc739917ae1344e113219c496f0624",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6ab6ef34_f5af043d",
        "filename": "src/internal/fuzz/coverage.go",
        "patchSetId": 1
      },
      "lineNbr": 59,
      "author": {
        "id": 17092
      },
      "writtenOn": "2021-09-13T18:38:15Z",
      "side": 1,
      "message": "I don\u0027t understand this part of the change. If base is nil but snapshot is not, diffCoverage should probably panic. Returning nil indicates snapshot is a subset of base.",
      "revId": "467207585ddc739917ae1344e113219c496f0624",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c8baf517_5f55331d",
        "filename": "src/internal/fuzz/fuzz.go",
        "patchSetId": 1
      },
      "lineNbr": 688,
      "author": {
        "id": 17092
      },
      "writtenOn": "2021-09-13T18:38:15Z",
      "side": 1,
      "message": "Nit: I think assigning input.coverageData inside an if statement would be more readable than another local variable:\n\n  input :\u003d fuzzInput{...}\n  if c.coverageMask !\u003d nil {\n    input.coverageData \u003d make([]byte, len(c.coverageMask))\n    copy(input.coverageData, c.coverageMask)\n  }",
      "revId": "467207585ddc739917ae1344e113219c496f0624",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4eb8936c_b8b5ba49",
        "filename": "src/internal/fuzz/worker.go",
        "patchSetId": 1
      },
      "lineNbr": 107,
      "author": {
        "id": 17092
      },
      "writtenOn": "2021-09-13T18:38:15Z",
      "side": 1,
      "message": "Shouldn\u0027t w.coordinator.interestingCount be -1 here? This seems like it would be a no-op.\n\nActually I\u0027m not sure I understand what this variable does. It doesn\u0027t seem to get updated anywhere.",
      "range": {
        "startLine": 102,
        "startChar": 1,
        "endLine": 107,
        "endChar": 2
      },
      "revId": "467207585ddc739917ae1344e113219c496f0624",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}