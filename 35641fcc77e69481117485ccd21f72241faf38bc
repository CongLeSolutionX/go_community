{
  "comments": [
    {
      "key": {
        "uuid": "81b56446_700d25e2",
        "filename": "src/runtime/sys_linux_amd64.s",
        "patchSetId": 2
      },
      "lineNbr": 228,
      "author": {
        "id": 5206
      },
      "writtenOn": "2016-10-28T03:54:28Z",
      "side": 1,
      "message": "This will be unreliable when calling a signal handler that simply returns, because if the new ANDQ instruction changes the stack pointer then the RET will read the wrong address from the stack.  For example, look at the same function in sys_darwin_amd64.s, which does it right.\n\nThere is nothing GNU/Linux-specific about this, we should change this for every sys_GOOS_amd64.s.\n\nAnd, for that matter, the same issue arises for 386, so we should also change this for sys_GOOS_386.s.",
      "revId": "35641fcc77e69481117485ccd21f72241faf38bc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "61ba3039_0c1926ed",
        "filename": "src/runtime/sys_linux_amd64.s",
        "patchSetId": 2
      },
      "lineNbr": 228,
      "author": {
        "id": 6365
      },
      "writtenOn": "2016-10-28T04:40:20Z",
      "side": 1,
      "message": "\u003e For example, look at the same function in sys_darwin_amd64.s, which does it right.\n\nI don\u0027t really understand how the darwin version works:\nWhy doesn\u0027t it need to push and pop BP like a normal function prologue would?\nWhy does it subtract an extra 64 bytes from SP before making the forwarded call?\n\nI\u0027m happy to copy it once I have a better idea of what it\u0027s doing...",
      "parentUuid": "81b56446_700d25e2",
      "revId": "35641fcc77e69481117485ccd21f72241faf38bc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e19380d8_b8d040df",
        "filename": "src/runtime/sys_linux_amd64.s",
        "patchSetId": 2
      },
      "lineNbr": 228,
      "author": {
        "id": 6365
      },
      "writtenOn": "2016-10-28T15:49:08Z",
      "side": 1,
      "message": "In particular, I was under the impression (from the PDF linked in https://github.com/golang/go/issues/16922#issuecomment-243748180 and the frame pointer change mentioned in #15840) that BP, as the amd64 frame pointer, is now callee-save.",
      "parentUuid": "61ba3039_0c1926ed",
      "revId": "35641fcc77e69481117485ccd21f72241faf38bc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a6eefe70_3e90c064",
        "filename": "src/runtime/sys_linux_amd64.s",
        "patchSetId": 2
      },
      "lineNbr": 228,
      "author": {
        "id": 5206
      },
      "writtenOn": "2016-10-28T17:18:46Z",
      "side": 1,
      "message": "sigfwd is calling a function that is assumed to be written in C, so C ABI rules apply.  In the amd64 C ABI BP is callee saved,  meaning that the callee will not change it.  So it\u0027s fine for sigfwd to store a value in BP across a call to a C ABI function.\n\nI think the subtraction of $64 is unnecessary.  I think I accidentally copied that from asm_amd64.s, where it is there because the Windows C ABI requires it in some cases.  But of course Darwin does not.",
      "parentUuid": "e19380d8_b8d040df",
      "revId": "35641fcc77e69481117485ccd21f72241faf38bc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}