{
  "comments": [
    {
      "key": {
        "uuid": "40e60288_7dda9add",
        "filename": "src/math/big/ftoa.go",
        "patchSetId": 2
      },
      "lineNbr": 182,
      "author": {
        "id": 5210
      },
      "writtenOn": "2017-08-08T14:45:31Z",
      "side": 0,
      "message": "isn\u0027t the fix simply to write\n\ns :\u003d mant.bitLen() - (int(x.prec) + 1) // avoid uint32 overflow\n\n?",
      "revId": "ac29f30dbb35d8812c865aed6a6ae738a480def3",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e37195d5_5477a355",
        "filename": "src/math/big/ftoa.go",
        "patchSetId": 2
      },
      "lineNbr": 182,
      "author": {
        "id": 5385
      },
      "writtenOn": "2017-08-08T14:54:22Z",
      "side": 0,
      "message": "But int(x.prec) will fail on 32-bits architectures when x.prec is maxUint32.\n\nYou could do int64(x.prec) but then you\u0027ll have to make s of type int64 and then below the uint(-s) cast could cause issues again on 32-bits archs.",
      "parentUuid": "40e60288_7dda9add",
      "revId": "ac29f30dbb35d8812c865aed6a6ae738a480def3",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "638e0ed8_73012edf",
        "filename": "src/math/big/ftoa.go",
        "patchSetId": 2
      },
      "lineNbr": 182,
      "author": {
        "id": 5210
      },
      "writtenOn": "2017-08-08T15:12:16Z",
      "side": 0,
      "message": "Ah - good point. What I had before I \"optimized\" for readability was\n\ns :\u003d mant.bitLen() - int(x.prec) - 1\n\nwhich also is not correct because x.prec is a uint32 which might not fit into an 32bit int. But given that, your solution doesn\u0027t seem right either (not even as an approximation), because as soon as we do int(wp) we might have hidden overflow.",
      "parentUuid": "e37195d5_5477a355",
      "revId": "ac29f30dbb35d8812c865aed6a6ae738a480def3",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}