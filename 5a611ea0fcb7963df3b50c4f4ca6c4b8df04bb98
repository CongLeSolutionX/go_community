{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "05be3724_e05b33a5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 14020
      },
      "writtenOn": "2022-12-08T16:21:22Z",
      "side": 1,
      "message": "TRY\u003dlongtest",
      "revId": "5a611ea0fcb7963df3b50c4f4ca6c4b8df04bb98",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "595d92da_fe186020",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-12-08T16:21:35Z",
      "side": 1,
      "message": "SlowBots beginning. Status page: https://farmer.golang.org/try?commit\u003d5a611ea0\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "5a611ea0fcb7963df3b50c4f4ca6c4b8df04bb98",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b8255848_c3a9f5d5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-12-08T16:36:21Z",
      "side": 1,
      "message": "SlowBots are happy.\n\nSlowBot builds that ran:\n* linux-amd64-longtest\n",
      "parentUuid": "595d92da_fe186020",
      "tag": "autogenerated:trybots~happy",
      "revId": "5a611ea0fcb7963df3b50c4f4ca6c4b8df04bb98",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "08ef571d_cecd6c70",
        "filename": "src/cmd/cover/cover.go",
        "patchSetId": 1
      },
      "lineNbr": 547,
      "author": {
        "id": 6365
      },
      "writtenOn": "2022-12-08T16:51:06Z",
      "side": 1,
      "message": "I\u0027m not sure this rewriting is really appropriate or necessary.\n\n`pp` is a package import path. Normally, such a path can be passed to `go` commands to refer to the package being built. However, for explicit file arguments there is no such import path: the only way to get that package is to pass exactly the same list of files as arguments on the command line, hence the name `command-line-arguments`.\n\nMoreover, consider the case of `go test -cover foo.go foo_test.go`, where both `foo.go` and `foo_test.go` declare `package foo`. There is not really any sense in which the package comprising `foo.go` and `foo_test.go` is `main`: it does not declare `package main`, does not provide `func main`, and is not “the top-level package in a stand-alone executable” (as defined by https://pkg.go.dev/cmd/go#hdr-Package_lists_and_patterns).\n\n(Most of the time this does not come up anyway: in general we expect the arguments to `go build` or `go test` to be package paths rather than individual files.)",
      "range": {
        "startLine": 545,
        "startChar": 0,
        "endLine": 547,
        "endChar": 61
      },
      "revId": "5a611ea0fcb7963df3b50c4f4ca6c4b8df04bb98",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2dcfab3f_ed713494",
        "filename": "src/cmd/go/testdata/script/cover_main_import_path.txt",
        "patchSetId": 1
      },
      "lineNbr": 54,
      "author": {
        "id": 6365
      },
      "writtenOn": "2022-12-08T16:51:06Z",
      "side": 1,
      "message": "Consider this similar set of inputs:\n\n```\n-- go.mod --\nmodule example\ngo 1.20\n-- foo.go --\n//go:build ignore\n\npackage foo\n\nfunc Message() string { return \"FOO!\" }\n-- foo_test.go --\n//go:build ignore\n\npackage foo\n\nimport (\n\t\"testing\"\n)\n\nfunc Test(t *testing.T) {\n\tt.Log(Message())\n}\n```\n\nWhat should `go test -cover foo.go foo_test.go` report for the package import path?\n\nI could reasonably argue for\n- `command-line-arguments` (because that is the path reported by `cmd/go` for a set of files passed on the command line),\n- or perhaps `example` (because that is the import path to the directory containing the source files),\n- or `foo` (because the files declare `package foo`, and lacking an import path perhaps we could fall back to the package name).\n\nHowever, I would be surprised and somewhat confused to see the package reported as `main`.",
      "range": {
        "startLine": 37,
        "startChar": 0,
        "endLine": 54,
        "endChar": 1
      },
      "revId": "5a611ea0fcb7963df3b50c4f4ca6c4b8df04bb98",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}