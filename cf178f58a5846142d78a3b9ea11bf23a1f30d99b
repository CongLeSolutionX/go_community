{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "5fec1e90_fc543e82",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5206
      },
      "writtenOn": "2024-08-21T23:21:06Z",
      "side": 1,
      "message": "I\u0027m puzzled by this.  The implementations of syscall.Getwd don\u0027t work in deep directory trees.  But I have to admit that this code seems to be a correct translation of the existing code.  How is this working in general?  Is it just relying on the PWD environment variable?",
      "revId": "cf178f58a5846142d78a3b9ea11bf23a1f30d99b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "56936b23_8961ba87",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 34895
      },
      "writtenOn": "2024-08-21T23:53:18Z",
      "side": 1,
      "message": "Looking at the comments on the other CL, I think a good intermediate step is to fall back to the existing general algorithm if syscall.Getwd fails because the name is too long.",
      "parentUuid": "5fec1e90_fc543e82",
      "revId": "cf178f58a5846142d78a3b9ea11bf23a1f30d99b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "82c1cf4a_deaba970",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 26451
      },
      "writtenOn": "2024-08-22T02:32:57Z",
      "side": 1,
      "message": "Currently the code being removed is not used at all:\n - all platforms have `syscall.ImplementsGetwd \u003d true`;\n - if `PWD` env var is used and it\u0027s longed than PATH_MAX, ENAMETOOLONG is returned from the stat call and it falls back to using `syscall.Getwd`;\n - if an error is returned from syscall.Getwd, it is returned (i.e. there\u0027s no fallback to the code being removed).\n\nIf such a fallback is to be implemented, the path returned is hardly usable for anything but logging, since all syscalls will return ENAMETOOLONG.\n\n(Not really related to this, but getcwd syscall on Linux can never return any path longer than PATH_MAX no matter what the buffer provided is).\n\nThe above is true for at least Linux, but I _think_ most other platforms work in a similar way, i.e. it doesn\u0027t make sense to return a longer path from os.Getwd which can\u0027t be used anyway.",
      "parentUuid": "56936b23_8961ba87",
      "revId": "cf178f58a5846142d78a3b9ea11bf23a1f30d99b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "15f232df_9624dcef",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 26451
      },
      "writtenOn": "2024-08-22T02:43:16Z",
      "side": 1,
      "message": "I\u0027ve implemented the fallback and it works (see below). But I still don\u0027t think it makes sense to return a value which is\n - expensive to obtain;\n - error prone to obtain (some stat calls may fail due to permissions);\n - mostly useless.\n\nHere\u0027s the fallback diff:\n\n```diff\ndiff --git a/src/os/getwd.go b/src/os/getwd.go\nindex 732ece7b09..1e4b0a109a 100644\n--- a/src/os/getwd.go\n+++ b/src/os/getwd.go\n@@ -56,9 +56,13 @@ func Getwd() (dir string, err error) {\n                                break\n                        }\n                }\n+               if e \u003d\u003d syscall.ENAMETOOLONG {\n+                       goto slow\n+               }\n                return s, NewSyscallError(\"getwd\", e)\n        }\n \n+slow:\n        // Apply same kludge but to cached dir instead of $PWD.\n        getwdCache.Lock()\n        dir \u003d getwdCache.dir\n```\n\nHere\u0027s the test:\n\n```\n  func TestGetwdDeep(t *testing.T) {\n          dir :\u003d t.TempDir()\n          t.Chdir(dir)\n          \n          name :\u003d strings.Repeat(\"a\", 200)\n          for {\n                  if err :\u003d os.Mkdir(name, 0o700); err !\u003d nil {\n                          t.Fatal(err)\n                  }\n                  if err :\u003d os.Chdir(name); err !\u003d nil {\n                          t.Fatal(err)\n                  }\n  \n                  wd, err :\u003d os.Getwd()\n                  t.Logf(\"     os.Getwd len \u003d %d, err \u003d %v\", len(wd), err)\n                  if err !\u003d nil {\n                          t.Fatal(err)\n                  }\n                  if len(wd) \u003e syscall.PathMax {\n                          break\n                  }\n          }\n  }\n```\n\nHere\u0027s the result:\n\n```\n[kir@kir-tp1 src]$ go test -run GetwdDeep -v os \n\u003d\u003d\u003d RUN   TestGetwdDeep\n    getwd_test.go:69:      os.Getwd len \u003d 233, err \u003d \u003cnil\u003e\n    getwd_test.go:69:      os.Getwd len \u003d 434, err \u003d \u003cnil\u003e\n\u003c...skipped for clarity...\u003e\n    getwd_test.go:69:      os.Getwd len \u003d 4052, err \u003d \u003cnil\u003e\n    getwd_test.go:69:      os.Getwd len \u003d 4253, err \u003d \u003cnil\u003e\n--- PASS: TestGetwdDeep (0.00s)\n```",
      "parentUuid": "82c1cf4a_deaba970",
      "revId": "cf178f58a5846142d78a3b9ea11bf23a1f30d99b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}