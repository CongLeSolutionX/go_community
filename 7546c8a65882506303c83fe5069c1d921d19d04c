{
  "comments": [
    {
      "key": {
        "uuid": "0cf785ae_fe209551",
        "filename": "src/cmd/compile/internal/gc/order.go",
        "patchSetId": 1
      },
      "lineNbr": 1281,
      "author": {
        "id": 5065
      },
      "writtenOn": "2019-04-29T21:00:26Z",
      "side": 1,
      "message": "I assume that something else emits the creation of the map when the len(dynamics) \u003d\u003d 0 case breaks out?",
      "range": {
        "startLine": 1281,
        "startChar": 35,
        "endLine": 1281,
        "endChar": 62
      },
      "revId": "7546c8a65882506303c83fe5069c1d921d19d04c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "99925490_079bb424",
        "filename": "src/cmd/compile/internal/gc/order.go",
        "patchSetId": 1
      },
      "lineNbr": 1281,
      "author": {
        "id": 5200
      },
      "writtenOn": "2019-04-29T21:15:22Z",
      "side": 1,
      "message": "Yes, we return n unmodified and walk will emit all the assignments that initialize the (static portions of the) map.\n\nIn other words, order.expr for an OMAPLIT either returns n (the original OMAPLIT), or we do:\n  tmp :\u003d map[int]int{...} // the original OMAPLIT minus the dynamic entries\n  .. additional assignments to tmp ..\n  return tmp\n\nIn either case, all the static entries are put into the map in walk.",
      "parentUuid": "0cf785ae_fe209551",
      "range": {
        "startLine": 1281,
        "startChar": 35,
        "endLine": 1281,
        "endChar": 62
      },
      "revId": "7546c8a65882506303c83fe5069c1d921d19d04c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6811f89b_d8ebc090",
        "filename": "src/cmd/compile/internal/gc/order.go",
        "patchSetId": 1
      },
      "lineNbr": 1286,
      "author": {
        "id": 5065
      },
      "writtenOn": "2019-04-29T23:05:35Z",
      "side": 1,
      "message": "Ah, this is the line I missed in my earlier read. Now I understand.",
      "revId": "7546c8a65882506303c83fe5069c1d921d19d04c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7116ae1b_c7b189fd",
        "filename": "src/cmd/compile/internal/gc/sinit.go",
        "patchSetId": 1
      },
      "lineNbr": 966,
      "author": {
        "id": 5440
      },
      "writtenOn": "2019-04-29T23:28:22Z",
      "side": 1,
      "message": "Can this still happen?",
      "revId": "7546c8a65882506303c83fe5069c1d921d19d04c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "93863e6d_f6c6d26a",
        "filename": "src/cmd/compile/internal/gc/sinit.go",
        "patchSetId": 1
      },
      "lineNbr": 966,
      "author": {
        "id": 5200
      },
      "writtenOn": "2019-04-29T23:43:26Z",
      "side": 1,
      "message": "I don\u0027t think so. I can probably rip this code out. Will do in a separate CL.",
      "parentUuid": "7116ae1b_c7b189fd",
      "revId": "7546c8a65882506303c83fe5069c1d921d19d04c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5b7e62ea_dd4ad75f",
        "filename": "src/cmd/compile/internal/gc/sinit.go",
        "patchSetId": 1
      },
      "lineNbr": 1083,
      "author": {
        "id": 5440
      },
      "writtenOn": "2019-04-29T23:28:22Z",
      "side": 1,
      "message": "How does this happen?",
      "revId": "7546c8a65882506303c83fe5069c1d921d19d04c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e2998722_d85030e9",
        "filename": "src/cmd/compile/internal/gc/sinit.go",
        "patchSetId": 1
      },
      "lineNbr": 1083,
      "author": {
        "id": 5200
      },
      "writtenOn": "2019-04-29T23:43:26Z",
      "side": 1,
      "message": "It happens if a literal has a subliteral which is a map literal with a dynamic entry.\nThat subliteral gets replaced with the temporary allocated in the order pass.",
      "parentUuid": "5b7e62ea_dd4ad75f",
      "revId": "7546c8a65882506303c83fe5069c1d921d19d04c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1fae5508_0f0e8bda",
        "filename": "src/cmd/compile/internal/gc/sinit.go",
        "patchSetId": 1
      },
      "lineNbr": 1083,
      "author": {
        "id": 5440
      },
      "writtenOn": "2019-04-29T23:48:02Z",
      "side": 1,
      "message": "Ah, makes sense. Thanks.",
      "parentUuid": "e2998722_d85030e9",
      "revId": "7546c8a65882506303c83fe5069c1d921d19d04c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}