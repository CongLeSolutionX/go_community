{
  "comments": [
    {
      "key": {
        "uuid": "bd78eade_7916d51e",
        "filename": "src/cmd/go/internal/modget/get.go",
        "patchSetId": 4
      },
      "lineNbr": 576,
      "author": {
        "id": 5056
      },
      "writtenOn": "2018-08-07T14:38:18Z",
      "side": 1,
      "message": "Removing the special cases from the ordinary import use is nice.\nThat said, I\u0027m not sure this is the right get semantics anymore.\nIn general there\u0027s a two-dimensional search space here between\npossible modules providing path and their independent version axes.\n\nI was quite happy about flattening that two-dimensional search space\ninto two steps: first, figure out the current (using \"latest\") module\nproviding the package. Then apply the query to that module.\nIs that algorithm fundamentally at odds with something, or was it an\nincidental casualty? If the latter, I think it would be good to restore\n(in QueryPackage).",
      "revId": "1baac19071944ead8273eca81b386904ae85ae5c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8e8f3679_840cc9c8",
        "filename": "src/cmd/go/internal/modget/get.go",
        "patchSetId": 4
      },
      "lineNbr": 576,
      "author": {
        "id": 6365
      },
      "writtenOn": "2018-08-07T18:25:48Z",
      "side": 1,
      "message": "\u003e Removing the special cases from the ordinary import use is nice.\n\u003e That said, I\u0027m not sure this is the right get semantics anymore.\n\u003e In general there\u0027s a two-dimensional search space here between\n\u003e possible modules providing path and their independent version axes.\n\u003e \n\u003e I was quite happy about flattening that two-dimensional search space\n\u003e into two steps: first, figure out the current (using \"latest\") module\n\u003e providing the package. Then apply the query to that module.\n\u003e Is that algorithm fundamentally at odds with something, or was it an\n\u003e incidental casualty? If the latter, I think it would be good to restore\n\u003e (in QueryPackage).\n\nThe algorithm is fundamentally at odds with migrating packages between modules, although we don\u0027t have tests that verify that. (Added now.)\n\nNote that the search space is more like 1½-D than 2-D. For each candidate module, we still examine only one version (the one selected by `Query(\u003cmodule path\u003e, vers, modload.Allowed)`), and we still stop as soon as we have found a candidate that provides the package.\n\nInstead of searching modules exhaustively, we choose the longest prefix. The user can always provide a shorter path on the command line if that isn\u0027t what they meant, so it\u0027s better to err on the long side.\n(I\u0027m not convinced that that behavior is entirely optimal. It could give surprising results for branch names and `@latest`, but it does keep the search space limited and works fine as long as the moved-from modules leave a “forwarding address” in their requirements.)",
      "parentUuid": "bd78eade_7916d51e",
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "1baac19071944ead8273eca81b386904ae85ae5c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5b3326bf_fbd92dff",
        "filename": "src/cmd/go/internal/modget/get.go",
        "patchSetId": 4
      },
      "lineNbr": 576,
      "author": {
        "id": 6365
      },
      "writtenOn": "2018-08-07T19:44:28Z",
      "side": 1,
      "message": "I\u0027m provisionally marking this resolved (based on the added tests), but happy to continue the discussion if you\u0027re not convinced.",
      "parentUuid": "8e8f3679_840cc9c8",
      "revId": "1baac19071944ead8273eca81b386904ae85ae5c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}