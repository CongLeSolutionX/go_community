{
  "comments": [
    {
      "key": {
        "uuid": "7709edae_52d1c16e",
        "filename": "src/compress/flate/huffman_bit_writer.go",
        "patchSetId": 16
      },
      "lineNbr": 154,
      "author": {
        "id": 8495
      },
      "writtenOn": "2016-03-10T19:29:01Z",
      "side": 1,
      "message": "The main difference between writeBytes and flush is that flush auto aligns to the nearest byte edge, while this one assumes that the input is byte-aligned, otherwise the for loop below can infinite loop.\n\nCan we just nuke this whole function and just use flush()+Write() in its stead?",
      "revId": "d032f6d679bedc01ebee7518e14c7bf4ccd6fc4e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7709edae_1254699c",
        "filename": "src/compress/flate/huffman_bit_writer.go",
        "patchSetId": 16
      },
      "lineNbr": 190,
      "author": {
        "id": 8495
      },
      "writtenOn": "2016-03-10T19:29:01Z",
      "side": 1,
      "message": "It asymmetrical now that offenc is passed in, but not litenc.\n\nCan we either pass both in? or use both w.literalEncoding and w.offsetEncoding?",
      "revId": "d032f6d679bedc01ebee7518e14c7bf4ccd6fc4e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7709edae_d236d197",
        "filename": "src/compress/flate/huffman_bit_writer.go",
        "patchSetId": 16
      },
      "lineNbr": 277,
      "author": {
        "id": 8495
      },
      "writtenOn": "2016-03-10T19:29:01Z",
      "side": 1,
      "message": "No action needed now. But writeBits() and writeCode() more or less accomplish the same thing. Only difference is that hcode is optimized for writing 16-bits or less.\n\nI looked at all uses of writeBits() and they never write more than 16-bits at a time. In a future CL, I would recommend nuking one of these functions and use the same one everywhere.",
      "revId": "d032f6d679bedc01ebee7518e14c7bf4ccd6fc4e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7709edae_d24db113",
        "filename": "src/compress/flate/huffman_bit_writer.go",
        "patchSetId": 16
      },
      "lineNbr": 334,
      "author": {
        "id": 8495
      },
      "writtenOn": "2016-03-10T19:29:01Z",
      "side": 1,
      "message": "This comment is stale.",
      "revId": "d032f6d679bedc01ebee7518e14c7bf4ccd6fc4e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7709edae_721725d6",
        "filename": "src/compress/flate/huffman_bit_writer.go",
        "patchSetId": 16
      },
      "lineNbr": 527,
      "author": {
        "id": 8495
      },
      "writtenOn": "2016-03-10T19:29:01Z",
      "side": 1,
      "message": "// writeBlockDynamic encodes a block using a dynamic Huffman table.\n// This should be used if the symbols used have a disproportionate\n// histogram distribution.",
      "revId": "d032f6d679bedc01ebee7518e14c7bf4ccd6fc4e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7709edae_b2aebdc8",
        "filename": "src/compress/flate/huffman_bit_writer.go",
        "patchSetId": 16
      },
      "lineNbr": 582,
      "author": {
        "id": 8495
      },
      "writtenOn": "2016-03-10T19:29:01Z",
      "side": 1,
      "message": "Use :\u003d notation here instead of var.",
      "revId": "d032f6d679bedc01ebee7518e14c7bf4ccd6fc4e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7709edae_d2d25148",
        "filename": "src/compress/flate/huffman_bit_writer.go",
        "patchSetId": 16
      },
      "lineNbr": 625,
      "author": {
        "id": 8495
      },
      "writtenOn": "2016-03-10T19:29:01Z",
      "side": 1,
      "message": "s/will write/encodes/",
      "revId": "d032f6d679bedc01ebee7518e14c7bf4ccd6fc4e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7709edae_1282292d",
        "filename": "src/compress/flate/huffman_bit_writer_test.go",
        "patchSetId": 16
      },
      "lineNbr": 20,
      "author": {
        "id": 8495
      },
      "writtenOn": "2016-03-10T19:29:01Z",
      "side": 1,
      "message": "s/will test/tests/",
      "revId": "d032f6d679bedc01ebee7518e14c7bf4ccd6fc4e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7709edae_92761915",
        "filename": "src/compress/flate/huffman_bit_writer_test.go",
        "patchSetId": 16
      },
      "lineNbr": 108,
      "author": {
        "id": 8495
      },
      "writtenOn": "2016-03-10T19:29:01Z",
      "side": 1,
      "message": "Break these into individual lines.",
      "revId": "d032f6d679bedc01ebee7518e14c7bf4ccd6fc4e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7709edae_c59e0d7d",
        "filename": "src/compress/flate/huffman_bit_writer_test.go",
        "patchSetId": 16
      },
      "lineNbr": 161,
      "author": {
        "id": 8495
      },
      "writtenOn": "2016-03-10T19:29:01Z",
      "side": 1,
      "message": "// TestWriteBlock tests if the writeBlock encoding has changed.",
      "revId": "d032f6d679bedc01ebee7518e14c7bf4ccd6fc4e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7709edae_05954559",
        "filename": "src/compress/flate/huffman_bit_writer_test.go",
        "patchSetId": 16
      },
      "lineNbr": 170,
      "author": {
        "id": 8495
      },
      "writtenOn": "2016-03-10T19:29:01Z",
      "side": 1,
      "message": "// TestWriteBlockDynamic tests if the writeBlockDynamic encoding has changed.",
      "revId": "d032f6d679bedc01ebee7518e14c7bf4ccd6fc4e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7709edae_85a935ab",
        "filename": "src/compress/flate/huffman_bit_writer_test.go",
        "patchSetId": 16
      },
      "lineNbr": 178,
      "author": {
        "id": 8495
      },
      "writtenOn": "2016-03-10T19:29:01Z",
      "side": 1,
      "message": "s/will test/tests/",
      "revId": "d032f6d679bedc01ebee7518e14c7bf4ccd6fc4e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7709edae_65a641d9",
        "filename": "src/compress/flate/huffman_bit_writer_test.go",
        "patchSetId": 16
      },
      "lineNbr": 321,
      "author": {
        "id": 8495
      },
      "writtenOn": "2016-03-10T19:29:01Z",
      "side": 1,
      "message": "s/will test/tests/",
      "revId": "d032f6d679bedc01ebee7518e14c7bf4ccd6fc4e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f7ab1dee_cfbd6195",
        "filename": "src/compress/flate/huffman_code.go",
        "patchSetId": 16
      },
      "lineNbr": 15,
      "author": {
        "id": 9735
      },
      "writtenOn": "2016-03-10T23:02:55Z",
      "side": 1,
      "message": "Is there a huge gain using a uint32 as opposed to:\n\n type hcode struct { code, len uint16 }\n\nhttps://play.golang.org/p/u9p7A0lb_Y\n\nI see no performance difference between these, yet the struct is much more readable.",
      "revId": "d032f6d679bedc01ebee7518e14c7bf4ccd6fc4e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7709edae_b2591d2e",
        "filename": "src/compress/flate/huffman_code.go",
        "patchSetId": 16
      },
      "lineNbr": 55,
      "author": {
        "id": 8495
      },
      "writtenOn": "2016-03-10T19:29:01Z",
      "side": 1,
      "message": "s/will update/updates/",
      "revId": "d032f6d679bedc01ebee7518e14c7bf4ccd6fc4e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7709edae_723cc5c5",
        "filename": "src/compress/flate/huffman_code.go",
        "patchSetId": 16
      },
      "lineNbr": 56,
      "author": {
        "id": 8495
      },
      "writtenOn": "2016-03-10T19:29:01Z",
      "side": 1,
      "message": "s/setBits/setLen/\n\nBits is ambiguous as to whether it is the length or the bit values themselves.",
      "revId": "d032f6d679bedc01ebee7518e14c7bf4ccd6fc4e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7709edae_d22b717a",
        "filename": "src/compress/flate/huffman_code.go",
        "patchSetId": 16
      },
      "lineNbr": 61,
      "author": {
        "id": 8495
      },
      "writtenOn": "2016-03-10T19:29:01Z",
      "side": 1,
      "message": "s/makeHcode/huffCode/\n\nThis would be consistent with the naming of \"matchToken\" from token.go",
      "revId": "d032f6d679bedc01ebee7518e14c7bf4ccd6fc4e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7709edae_5220a191",
        "filename": "src/compress/flate/huffman_code.go",
        "patchSetId": 16
      },
      "lineNbr": 71,
      "author": {
        "id": 8495
      },
      "writtenOn": "2016-03-10T19:29:01Z",
      "side": 1,
      "message": "s/bits/len/",
      "revId": "d032f6d679bedc01ebee7518e14c7bf4ccd6fc4e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}