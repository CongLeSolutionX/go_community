{
  "comments": [
    {
      "key": {
        "uuid": "576229c1_3729b8d0",
        "filename": "src/compress/flate/huffman_bit_writer.go",
        "patchSetId": 16
      },
      "lineNbr": 27,
      "author": {
        "id": 5899
      },
      "writtenOn": "2016-03-11T04:27:13Z",
      "side": 1,
      "message": "Why? What\u0027s the magic 8 for? The answer belongs in the code (as a comment), not just in the code review. For example, assuming that I am correctly guessing why:\n\n// bufferSize is the output byte buffer size: bufferFlushSize plus 8 bytes\n// of room to hold the 64 bits of the huffmanBitWriter.bits field.\n// bufferFlushSize is a multiple of 6 as a huffmanBitWriter transfers all\n// but the final bits of the stream from its bits field to its bytes field\n// 6 bytes (48 bits) at a time. This is only 6 and not 8 because, when\n// transferring non-final bits, the remaining 2 bytes might be incomplete.\nbufferSize      \u003d bufferFlushSize + 8\nbufferFlushSize \u003d 240",
      "revId": "d032f6d679bedc01ebee7518e14c7bf4ccd6fc4e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "576229c1_d7079c68",
        "filename": "src/compress/flate/huffman_bit_writer.go",
        "patchSetId": 16
      },
      "lineNbr": 139,
      "author": {
        "id": 5899
      },
      "writtenOn": "2016-03-11T04:27:13Z",
      "side": 1,
      "message": "FWIW, I\u0027d s/n/n+0/ for symmetry. The code-gen should be the same either way. Ditto below.",
      "revId": "d032f6d679bedc01ebee7518e14c7bf4ccd6fc4e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "576229c1_b7878802",
        "filename": "src/compress/flate/huffman_bit_writer.go",
        "patchSetId": 16
      },
      "lineNbr": 146,
      "author": {
        "id": 5899
      },
      "writtenOn": "2016-03-11T04:27:13Z",
      "side": 1,
      "message": "Instead of the magic (and uncommented) \"-8\" here and below, I\u0027d use a named bufferFlushSize constant (see above). Naming a constant gives a canonical place where we can write a comment to explain the magic \"-8\".",
      "revId": "d032f6d679bedc01ebee7518e14c7bf4ccd6fc4e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "576229c1_970d248f",
        "filename": "src/compress/flate/huffman_bit_writer.go",
        "patchSetId": 16
      },
      "lineNbr": 147,
      "author": {
        "id": 5899
      },
      "writtenOn": "2016-03-11T04:27:13Z",
      "side": 1,
      "message": "This looks wrong:\nw.bytes[:bufferSize-8]\nshould be\nw.bytes[:n]\n\nAh, but it\u0027s OK because bufferSize is 8-plus-a-multiple-of-6. That seems fragile. It\u0027s easier to say \"w.bytes[:n]\", right?",
      "range": {
        "startLine": 147,
        "startChar": 24,
        "endLine": 147,
        "endChar": 46
      },
      "revId": "d032f6d679bedc01ebee7518e14c7bf4ccd6fc4e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7709edae_52d1c16e",
        "filename": "src/compress/flate/huffman_bit_writer.go",
        "patchSetId": 16
      },
      "lineNbr": 154,
      "author": {
        "id": 8495
      },
      "writtenOn": "2016-03-10T19:29:01Z",
      "side": 1,
      "message": "The main difference between writeBytes and flush is that flush auto aligns to the nearest byte edge, while this one assumes that the input is byte-aligned, otherwise the for loop below can infinite loop.\n\nCan we just nuke this whole function and just use flush()+Write() in its stead?",
      "revId": "d032f6d679bedc01ebee7518e14c7bf4ccd6fc4e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7709edae_1254699c",
        "filename": "src/compress/flate/huffman_bit_writer.go",
        "patchSetId": 16
      },
      "lineNbr": 190,
      "author": {
        "id": 8495
      },
      "writtenOn": "2016-03-10T19:29:01Z",
      "side": 1,
      "message": "It asymmetrical now that offenc is passed in, but not litenc.\n\nCan we either pass both in? or use both w.literalEncoding and w.offsetEncoding?",
      "revId": "d032f6d679bedc01ebee7518e14c7bf4ccd6fc4e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7709edae_d236d197",
        "filename": "src/compress/flate/huffman_bit_writer.go",
        "patchSetId": 16
      },
      "lineNbr": 277,
      "author": {
        "id": 8495
      },
      "writtenOn": "2016-03-10T19:29:01Z",
      "side": 1,
      "message": "No action needed now. But writeBits() and writeCode() more or less accomplish the same thing. Only difference is that hcode is optimized for writing 16-bits or less.\n\nI looked at all uses of writeBits() and they never write more than 16-bits at a time. In a future CL, I would recommend nuking one of these functions and use the same one everywhere.",
      "revId": "d032f6d679bedc01ebee7518e14c7bf4ccd6fc4e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "576229c1_d78cfc28",
        "filename": "src/compress/flate/huffman_bit_writer.go",
        "patchSetId": 16
      },
      "lineNbr": 295,
      "author": {
        "id": 5899
      },
      "writtenOn": "2016-03-11T04:27:13Z",
      "side": 1,
      "message": "Ditto re bufferFlushSize.",
      "revId": "d032f6d679bedc01ebee7518e14c7bf4ccd6fc4e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "576229c1_f70ca08f",
        "filename": "src/compress/flate/huffman_bit_writer.go",
        "patchSetId": 16
      },
      "lineNbr": 296,
      "author": {
        "id": 5899
      },
      "writtenOn": "2016-03-11T04:27:13Z",
      "side": 1,
      "message": "Ditto re s/bufferSize-8/n/",
      "revId": "d032f6d679bedc01ebee7518e14c7bf4ccd6fc4e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "576229c1_b71228a8",
        "filename": "src/compress/flate/huffman_bit_writer.go",
        "patchSetId": 16
      },
      "lineNbr": 301,
      "author": {
        "id": 5899
      },
      "writtenOn": "2016-03-11T04:27:13Z",
      "side": 1,
      "message": "Delete the blank line.",
      "revId": "d032f6d679bedc01ebee7518e14c7bf4ccd6fc4e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7709edae_d24db113",
        "filename": "src/compress/flate/huffman_bit_writer.go",
        "patchSetId": 16
      },
      "lineNbr": 334,
      "author": {
        "id": 8495
      },
      "writtenOn": "2016-03-10T19:29:01Z",
      "side": 1,
      "message": "This comment is stale.",
      "revId": "d032f6d679bedc01ebee7518e14c7bf4ccd6fc4e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "576229c1_b735c82e",
        "filename": "src/compress/flate/huffman_bit_writer.go",
        "patchSetId": 16
      },
      "lineNbr": 391,
      "author": {
        "id": 5899
      },
      "writtenOn": "2016-03-11T04:27:13Z",
      "side": 1,
      "message": "FWIW, I wouldn\u0027t bother with the distinction between tokens and tok. I\u0027d call the arg tokens like it used to, and this is just\ntokens \u003d append(tokens, endBlockMarker)",
      "revId": "d032f6d679bedc01ebee7518e14c7bf4ccd6fc4e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7709edae_721725d6",
        "filename": "src/compress/flate/huffman_bit_writer.go",
        "patchSetId": 16
      },
      "lineNbr": 527,
      "author": {
        "id": 8495
      },
      "writtenOn": "2016-03-10T19:29:01Z",
      "side": 1,
      "message": "// writeBlockDynamic encodes a block using a dynamic Huffman table.\n// This should be used if the symbols used have a disproportionate\n// histogram distribution.",
      "revId": "d032f6d679bedc01ebee7518e14c7bf4ccd6fc4e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "576229c1_f791003c",
        "filename": "src/compress/flate/huffman_bit_writer.go",
        "patchSetId": 16
      },
      "lineNbr": 569,
      "author": {
        "id": 5899
      },
      "writtenOn": "2016-03-11T04:27:13Z",
      "side": 1,
      "message": "There seems to be a lot of copy/paste between writeBlock and writeBlockDynamic, such as everything from here up. Can you factor out the common code?\n\nOr should writeBlock simply take an extra \"forceDynamic bool\" parameter, and you can then delete writeDynamicBlock.",
      "revId": "d032f6d679bedc01ebee7518e14c7bf4ccd6fc4e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7709edae_b2aebdc8",
        "filename": "src/compress/flate/huffman_bit_writer.go",
        "patchSetId": 16
      },
      "lineNbr": 582,
      "author": {
        "id": 8495
      },
      "writtenOn": "2016-03-10T19:29:01Z",
      "side": 1,
      "message": "Use :\u003d notation here instead of var.",
      "revId": "d032f6d679bedc01ebee7518e14c7bf4ccd6fc4e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "576229c1_1745948f",
        "filename": "src/compress/flate/huffman_bit_writer.go",
        "patchSetId": 16
      },
      "lineNbr": 589,
      "author": {
        "id": 5899
      },
      "writtenOn": "2016-03-11T04:27:13Z",
      "side": 1,
      "message": "There seems to be a lot of copy/paste between writeBlock and writeBlockDynamic, such as everything from here down. Can you factor out the common code?\n\nOr should writeBlock simply take an extra \"forceDynamic bool\" parameter, and you can then delete writeDynamicBlock.",
      "revId": "d032f6d679bedc01ebee7518e14c7bf4ccd6fc4e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "576229c1_9717e489",
        "filename": "src/compress/flate/huffman_bit_writer.go",
        "patchSetId": 16
      },
      "lineNbr": 615,
      "author": {
        "id": 5899
      },
      "writtenOn": "2016-03-11T04:27:13Z",
      "side": 1,
      "message": "https://github.com/golang/go/wiki/CodeReviewComments#comment-sentences says that \"Comments should begin with the name of the thing being described\". Thus:\n\n// huffOffset is a static offset encoder used etc.\n\nSure, some existing comments don\u0027t follow that style, as they were written many years ago, but new comments should follow that style.",
      "revId": "d032f6d679bedc01ebee7518e14c7bf4ccd6fc4e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "576229c1_b71ce8ae",
        "filename": "src/compress/flate/huffman_bit_writer.go",
        "patchSetId": 16
      },
      "lineNbr": 619,
      "author": {
        "id": 5899
      },
      "writtenOn": "2016-03-11T04:27:13Z",
      "side": 1,
      "message": "I\u0027d say\nw :\u003d etc\ninstead of\nvar w \u003d etc",
      "revId": "d032f6d679bedc01ebee7518e14c7bf4ccd6fc4e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7709edae_d2d25148",
        "filename": "src/compress/flate/huffman_bit_writer.go",
        "patchSetId": 16
      },
      "lineNbr": 625,
      "author": {
        "id": 8495
      },
      "writtenOn": "2016-03-10T19:29:01Z",
      "side": 1,
      "message": "s/will write/encodes/",
      "revId": "d032f6d679bedc01ebee7518e14c7bf4ccd6fc4e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "576229c1_377458d4",
        "filename": "src/compress/flate/huffman_bit_writer.go",
        "patchSetId": 16
      },
      "lineNbr": 706,
      "author": {
        "id": 5899
      },
      "writtenOn": "2016-03-11T04:27:13Z",
      "side": 1,
      "message": "Ditto re bufferFlushSize.",
      "revId": "d032f6d679bedc01ebee7518e14c7bf4ccd6fc4e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "576229c1_d7115c95",
        "filename": "src/compress/flate/huffman_bit_writer.go",
        "patchSetId": 16
      },
      "lineNbr": 709,
      "author": {
        "id": 5899
      },
      "writtenOn": "2016-03-11T04:27:13Z",
      "side": 1,
      "message": "Ditto re :n.",
      "revId": "d032f6d679bedc01ebee7518e14c7bf4ccd6fc4e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7709edae_1282292d",
        "filename": "src/compress/flate/huffman_bit_writer_test.go",
        "patchSetId": 16
      },
      "lineNbr": 20,
      "author": {
        "id": 8495
      },
      "writtenOn": "2016-03-10T19:29:01Z",
      "side": 1,
      "message": "s/will test/tests/",
      "revId": "d032f6d679bedc01ebee7518e14c7bf4ccd6fc4e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "576229c1_5781cce8",
        "filename": "src/compress/flate/huffman_bit_writer_test.go",
        "patchSetId": 16
      },
      "lineNbr": 23,
      "author": {
        "id": 5899
      },
      "writtenOn": "2016-03-11T04:27:13Z",
      "side": 1,
      "message": "s/switch/flag/",
      "revId": "d032f6d679bedc01ebee7518e14c7bf4ccd6fc4e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "576229c1_97fe04ca",
        "filename": "src/compress/flate/huffman_bit_writer_test.go",
        "patchSetId": 16
      },
      "lineNbr": 43,
      "author": {
        "id": 5899
      },
      "writtenOn": "2016-03-11T04:27:13Z",
      "side": 1,
      "message": "I\u0027d say\n\nt.Error(err)\nreturn\n\nsince it\u0027s probably worth knowing whether only one or multiple files can\u0027t be read.",
      "revId": "d032f6d679bedc01ebee7518e14c7bf4ccd6fc4e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "576229c1_97d28479",
        "filename": "src/compress/flate/huffman_bit_writer_test.go",
        "patchSetId": 16
      },
      "lineNbr": 53,
      "author": {
        "id": 5899
      },
      "writtenOn": "2016-03-11T04:27:13Z",
      "side": 1,
      "message": "t.Error(err) is probably sufficient.",
      "revId": "d032f6d679bedc01ebee7518e14c7bf4ccd6fc4e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7709edae_92761915",
        "filename": "src/compress/flate/huffman_bit_writer_test.go",
        "patchSetId": 16
      },
      "lineNbr": 108,
      "author": {
        "id": 8495
      },
      "writtenOn": "2016-03-10T19:29:01Z",
      "side": 1,
      "message": "Break these into individual lines.",
      "revId": "d032f6d679bedc01ebee7518e14c7bf4ccd6fc4e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7709edae_c59e0d7d",
        "filename": "src/compress/flate/huffman_bit_writer_test.go",
        "patchSetId": 16
      },
      "lineNbr": 161,
      "author": {
        "id": 8495
      },
      "writtenOn": "2016-03-10T19:29:01Z",
      "side": 1,
      "message": "// TestWriteBlock tests if the writeBlock encoding has changed.",
      "revId": "d032f6d679bedc01ebee7518e14c7bf4ccd6fc4e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "576229c1_777ed0b5",
        "filename": "src/compress/flate/huffman_bit_writer_test.go",
        "patchSetId": 16
      },
      "lineNbr": 162,
      "author": {
        "id": 5899
      },
      "writtenOn": "2016-03-11T04:27:13Z",
      "side": 1,
      "message": "s/parameter on the test/flag/ and ditto below.",
      "revId": "d032f6d679bedc01ebee7518e14c7bf4ccd6fc4e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7709edae_05954559",
        "filename": "src/compress/flate/huffman_bit_writer_test.go",
        "patchSetId": 16
      },
      "lineNbr": 170,
      "author": {
        "id": 8495
      },
      "writtenOn": "2016-03-10T19:29:01Z",
      "side": 1,
      "message": "// TestWriteBlockDynamic tests if the writeBlockDynamic encoding has changed.",
      "revId": "d032f6d679bedc01ebee7518e14c7bf4ccd6fc4e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7709edae_85a935ab",
        "filename": "src/compress/flate/huffman_bit_writer_test.go",
        "patchSetId": 16
      },
      "lineNbr": 178,
      "author": {
        "id": 8495
      },
      "writtenOn": "2016-03-10T19:29:01Z",
      "side": 1,
      "message": "s/will test/tests/",
      "revId": "d032f6d679bedc01ebee7518e14c7bf4ccd6fc4e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "576229c1_da118195",
        "filename": "src/compress/flate/huffman_bit_writer_test.go",
        "patchSetId": 16
      },
      "lineNbr": 196,
      "author": {
        "id": 5899
      },
      "writtenOn": "2016-03-11T04:27:13Z",
      "side": 1,
      "message": "s/Fatal/Error/ and return like the other error cases here.",
      "revId": "d032f6d679bedc01ebee7518e14c7bf4ccd6fc4e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "576229c1_fa16458a",
        "filename": "src/compress/flate/huffman_bit_writer_test.go",
        "patchSetId": 16
      },
      "lineNbr": 206,
      "author": {
        "id": 5899
      },
      "writtenOn": "2016-03-11T04:27:13Z",
      "side": 1,
      "message": "s/Fatal/Error/ and return like the other error cases here.",
      "revId": "d032f6d679bedc01ebee7518e14c7bf4ccd6fc4e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "576229c1_970b6409",
        "filename": "src/compress/flate/huffman_bit_writer_test.go",
        "patchSetId": 16
      },
      "lineNbr": 317,
      "author": {
        "id": 5899
      },
      "writtenOn": "2016-03-11T04:27:13Z",
      "side": 1,
      "message": "Delete this in this CL, and add it in the CL that needs it (cl/20513). We might not need cl/20513\u0027s custom \"type tokens\" and therefore this shim function in the end, if the underlying performance difference is just a compiler bug, as per golang.org/issue/14758. While the compiler folk discuss this, there\u0027s no need to either hold up this CL, or to submit it with weird no-op (for now) functions.",
      "revId": "d032f6d679bedc01ebee7518e14c7bf4ccd6fc4e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7709edae_65a641d9",
        "filename": "src/compress/flate/huffman_bit_writer_test.go",
        "patchSetId": 16
      },
      "lineNbr": 321,
      "author": {
        "id": 8495
      },
      "writtenOn": "2016-03-10T19:29:01Z",
      "side": 1,
      "message": "s/will test/tests/",
      "revId": "d032f6d679bedc01ebee7518e14c7bf4ccd6fc4e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "576229c1_b76ea802",
        "filename": "src/compress/flate/huffman_bit_writer_test.go",
        "patchSetId": 16
      },
      "lineNbr": 359,
      "author": {
        "id": 5899
      },
      "writtenOn": "2016-03-11T04:27:13Z",
      "side": 1,
      "message": "s/Fatal/Error/ and return like the other error cases here.",
      "revId": "d032f6d679bedc01ebee7518e14c7bf4ccd6fc4e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f7ab1dee_cfbd6195",
        "filename": "src/compress/flate/huffman_code.go",
        "patchSetId": 16
      },
      "lineNbr": 15,
      "author": {
        "id": 9735
      },
      "writtenOn": "2016-03-10T23:02:55Z",
      "side": 1,
      "message": "Is there a huge gain using a uint32 as opposed to:\n\n type hcode struct { code, len uint16 }\n\nhttps://play.golang.org/p/u9p7A0lb_Y\n\nI see no performance difference between these, yet the struct is much more readable.",
      "revId": "d032f6d679bedc01ebee7518e14c7bf4ccd6fc4e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "576229c1_5afbb165",
        "filename": "src/compress/flate/huffman_code.go",
        "patchSetId": 16
      },
      "lineNbr": 21,
      "author": {
        "id": 5899
      },
      "writtenOn": "2016-03-11T04:27:13Z",
      "side": 1,
      "message": "To repeat an earlier comment of mine:\n\nSome comment would be nice that these two fields are to avoid the allocation (I\u0027m guessing) of converting the []literalNode to a sort.Interface, during huffmanEncoder.generate.\n\nOn a related note, do you want to add a b.ReportAllocs call to benchmarkEncoder in writer_test.go, a la reader_test.go?",
      "revId": "d032f6d679bedc01ebee7518e14c7bf4ccd6fc4e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7709edae_b2591d2e",
        "filename": "src/compress/flate/huffman_code.go",
        "patchSetId": 16
      },
      "lineNbr": 55,
      "author": {
        "id": 8495
      },
      "writtenOn": "2016-03-10T19:29:01Z",
      "side": 1,
      "message": "s/will update/updates/",
      "revId": "d032f6d679bedc01ebee7518e14c7bf4ccd6fc4e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7709edae_723cc5c5",
        "filename": "src/compress/flate/huffman_code.go",
        "patchSetId": 16
      },
      "lineNbr": 56,
      "author": {
        "id": 8495
      },
      "writtenOn": "2016-03-10T19:29:01Z",
      "side": 1,
      "message": "s/setBits/setLen/\n\nBits is ambiguous as to whether it is the length or the bit values themselves.",
      "revId": "d032f6d679bedc01ebee7518e14c7bf4ccd6fc4e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7709edae_d22b717a",
        "filename": "src/compress/flate/huffman_code.go",
        "patchSetId": 16
      },
      "lineNbr": 61,
      "author": {
        "id": 8495
      },
      "writtenOn": "2016-03-10T19:29:01Z",
      "side": 1,
      "message": "s/makeHcode/huffCode/\n\nThis would be consistent with the naming of \"matchToken\" from token.go",
      "revId": "d032f6d679bedc01ebee7518e14c7bf4ccd6fc4e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7709edae_5220a191",
        "filename": "src/compress/flate/huffman_code.go",
        "patchSetId": 16
      },
      "lineNbr": 71,
      "author": {
        "id": 8495
      },
      "writtenOn": "2016-03-10T19:29:01Z",
      "side": 1,
      "message": "s/bits/len/",
      "revId": "d032f6d679bedc01ebee7518e14c7bf4ccd6fc4e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "576229c1_ba7dad8f",
        "filename": "src/compress/flate/huffman_code.go",
        "patchSetId": 16
      },
      "lineNbr": 295,
      "author": {
        "id": 5899
      },
      "writtenOn": "2016-03-11T04:27:13Z",
      "side": 1,
      "message": "I\u0027d drop the \u0027quotes\u0027.",
      "range": {
        "startLine": 295,
        "startChar": 32,
        "endLine": 295,
        "endChar": 33
      },
      "revId": "d032f6d679bedc01ebee7518e14c7bf4ccd6fc4e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}