{
  "comments": [
    {
      "key": {
        "uuid": "1f40ea79_d5a87757",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 5167
      },
      "writtenOn": "2018-12-11T23:38:41Z",
      "side": 1,
      "message": "It\u0027s still not actually correct (though it is more correct). We should sample large allocations multiple times if the Poisson process would trigger multiple times for their size. Currently we under-sample large allocations.",
      "revId": "805584cafbc7170c98bbebb6fe6cd397e7a204fb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4ffda395_1abeb4f1",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 5167
      },
      "writtenOn": "2018-12-11T23:38:41Z",
      "side": 1,
      "message": "It\u0027s hard to tell from this paragraph exactly what was wrong with the current code and what this is changing.",
      "revId": "805584cafbc7170c98bbebb6fe6cd397e7a204fb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "82556c82_7a45c8ae",
        "filename": "test/heapsampling.go",
        "patchSetId": 1
      },
      "lineNbr": 33,
      "author": {
        "id": 5167
      },
      "writtenOn": "2018-12-11T23:38:41Z",
      "side": 1,
      "message": "How long does this test take to run now?",
      "revId": "805584cafbc7170c98bbebb6fe6cd397e7a204fb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2e9a71d0_6464950d",
        "filename": "test/heapsampling.go",
        "patchSetId": 1
      },
      "lineNbr": 71,
      "author": {
        "id": 5167
      },
      "writtenOn": "2018-12-11T23:38:41Z",
      "side": 1,
      "message": "This comment needs to explain why this avoids flakes.",
      "revId": "805584cafbc7170c98bbebb6fe6cd397e7a204fb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "38fec394_34f24853",
        "filename": "test/heapsampling.go",
        "patchSetId": 1
      },
      "lineNbr": 84,
      "author": {
        "id": 5167
      },
      "writtenOn": "2018-12-11T23:38:41Z",
      "side": 1,
      "message": "s/alloc/allocSmall/",
      "revId": "805584cafbc7170c98bbebb6fe6cd397e7a204fb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1bbd41af_7dce7ae4",
        "filename": "test/heapsampling.go",
        "patchSetId": 1
      },
      "lineNbr": 126,
      "author": {
        "id": 5190
      },
      "writtenOn": "2018-12-11T19:15:53Z",
      "side": 1,
      "message": "I am confused. how is the firstLine computed fnames[0] relevant to the other in fnames?",
      "revId": "805584cafbc7170c98bbebb6fe6cd397e7a204fb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "76a9357b_6b84fb8c",
        "filename": "test/heapsampling.go",
        "patchSetId": 1
      },
      "lineNbr": 144,
      "author": {
        "id": 5167
      },
      "writtenOn": "2018-12-11T23:38:41Z",
      "side": 1,
      "message": "Typo",
      "range": {
        "startLine": 143,
        "startChar": 66,
        "endLine": 144,
        "endChar": 21
      },
      "revId": "805584cafbc7170c98bbebb6fe6cd397e7a204fb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9c24dbd5_e790d231",
        "filename": "test/heapsampling.go",
        "patchSetId": 1
      },
      "lineNbr": 207,
      "author": {
        "id": 5190
      },
      "writtenOn": "2018-12-11T19:15:53Z",
      "side": 1,
      "message": "why is this change necessary?\nI read that the line is set by the first successfully resolved pc, and count allocation whose stack includes the named function. Previous logic is on the other hand counting only the allocation that occurs exactly in the name function. Is it right? Can you reflect this behavior in the comment?",
      "revId": "805584cafbc7170c98bbebb6fe6cd397e7a204fb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    }
  ]
}