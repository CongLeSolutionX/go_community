{
  "comments": [
    {
      "key": {
        "uuid": "1f40ea79_d5a87757",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 5167
      },
      "writtenOn": "2018-12-11T23:38:41Z",
      "side": 1,
      "message": "It\u0027s still not actually correct (though it is more correct). We should sample large allocations multiple times if the Poisson process would trigger multiple times for their size. Currently we under-sample large allocations.",
      "revId": "805584cafbc7170c98bbebb6fe6cd397e7a204fb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "880d72ff_714e7e53",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 12698
      },
      "writtenOn": "2018-12-12T03:30:19Z",
      "side": 1,
      "message": "Not 100% sure on this. Does it make sense to count the same allocation\nmultiple times? Aren\u0027t the multiple samples represented by the single\nlarge allocation block?\n\nIn any case, I tried this with blocks up to 512K (with the 16K sampling) and the sampling seemed correct, so even if there is an error with extremely large blocks perhaps this is good enough.",
      "parentUuid": "1f40ea79_d5a87757",
      "revId": "805584cafbc7170c98bbebb6fe6cd397e7a204fb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "854a39a0_bf453efd",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 18675
      },
      "writtenOn": "2018-12-14T23:13:04Z",
      "side": 1,
      "message": "I am also not 100% sure what sampling an allocation multiple times means. A given allocation is either sampled or not. The comment on the sampler in C++ tcmalloc says:\n\n// When an allocation occurs, bytes_until_sample_ is reset to\n// a new independtly sampled geometric number of bytes. The\n// memoryless property of the point process means that this may\n// be taken as the number of bytes after the end of the current\n// allocation until the next marked byte. This ensures that\n// very large allocations which would intersect many marked bytes\n// only result in a single call to PickNextSamplingPoint.\n\nwhich I think implies a given allocation is either sampled exactly 0 or 1 times regardless of its size and the next \"bytes until sample\" distance is set to a brand new Poisson distribution sample as the process is memoryless.",
      "parentUuid": "880d72ff_714e7e53",
      "revId": "805584cafbc7170c98bbebb6fe6cd397e7a204fb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "61e32e9b_e8c0337b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-01-16T21:15:23Z",
      "side": 1,
      "message": "Interesting. That\u0027s completely counter-intuitive to me, but clearly someone has thought carefully about this. :)",
      "parentUuid": "854a39a0_bf453efd",
      "revId": "805584cafbc7170c98bbebb6fe6cd397e7a204fb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4ffda395_1abeb4f1",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 5167
      },
      "writtenOn": "2018-12-11T23:38:41Z",
      "side": 1,
      "message": "It\u0027s hard to tell from this paragraph exactly what was wrong with the current code and what this is changing.",
      "revId": "805584cafbc7170c98bbebb6fe6cd397e7a204fb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "33a7478a_cbdc5c38",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 12698
      },
      "writtenOn": "2018-12-12T03:30:19Z",
      "side": 1,
      "message": "Hopefully this is enough? Open to suggestions.",
      "parentUuid": "4ffda395_1abeb4f1",
      "revId": "805584cafbc7170c98bbebb6fe6cd397e7a204fb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "82556c82_7a45c8ae",
        "filename": "test/heapsampling.go",
        "patchSetId": 1
      },
      "lineNbr": 33,
      "author": {
        "id": 5167
      },
      "writtenOn": "2018-12-11T23:38:41Z",
      "side": 1,
      "message": "How long does this test take to run now?",
      "revId": "805584cafbc7170c98bbebb6fe6cd397e7a204fb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bc6a1de8_80553d60",
        "filename": "test/heapsampling.go",
        "patchSetId": 1
      },
      "lineNbr": 33,
      "author": {
        "id": 12698
      },
      "writtenOn": "2018-12-12T03:30:19Z",
      "side": 1,
      "message": "It takes 5 seconds on my linux workstation. The previous version took about .5 seconds.\nWhat would be acceptable?",
      "parentUuid": "82556c82_7a45c8ae",
      "revId": "805584cafbc7170c98bbebb6fe6cd397e7a204fb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e1656c45_82b252cf",
        "filename": "test/heapsampling.go",
        "patchSetId": 1
      },
      "lineNbr": 33,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-01-16T21:15:23Z",
      "side": 1,
      "message": "5 seconds is definitely too long. 1 second is probably okay. Rather than always running three tests, could we instead check the profile after each test and call it good if we get a good profile?",
      "parentUuid": "bc6a1de8_80553d60",
      "revId": "805584cafbc7170c98bbebb6fe6cd397e7a204fb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "34965542_b13e1ea9",
        "filename": "test/heapsampling.go",
        "patchSetId": 1
      },
      "lineNbr": 33,
      "author": {
        "id": 12698
      },
      "writtenOn": "2019-01-17T17:57:48Z",
      "side": 1,
      "message": "Yes, updated the code to pass as soon as one of the experiments shows no errors.\nAlso reduced the size of the large allocations to speed it up further. It is now\nabout 0.8 seconds on average",
      "parentUuid": "e1656c45_82b252cf",
      "revId": "805584cafbc7170c98bbebb6fe6cd397e7a204fb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2e9a71d0_6464950d",
        "filename": "test/heapsampling.go",
        "patchSetId": 1
      },
      "lineNbr": 71,
      "author": {
        "id": 5167
      },
      "writtenOn": "2018-12-11T23:38:41Z",
      "side": 1,
      "message": "This comment needs to explain why this avoids flakes.",
      "revId": "805584cafbc7170c98bbebb6fe6cd397e7a204fb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "699f664b_32d595cb",
        "filename": "test/heapsampling.go",
        "patchSetId": 1
      },
      "lineNbr": 71,
      "author": {
        "id": 12698
      },
      "writtenOn": "2018-12-12T03:30:19Z",
      "side": 1,
      "message": "Updated the comment at the top of the testcase with an explanation.",
      "parentUuid": "2e9a71d0_6464950d",
      "revId": "805584cafbc7170c98bbebb6fe6cd397e7a204fb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "38fec394_34f24853",
        "filename": "test/heapsampling.go",
        "patchSetId": 1
      },
      "lineNbr": 84,
      "author": {
        "id": 5167
      },
      "writtenOn": "2018-12-11T23:38:41Z",
      "side": 1,
      "message": "s/alloc/allocSmall/",
      "revId": "805584cafbc7170c98bbebb6fe6cd397e7a204fb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6da82c57_56b50c0f",
        "filename": "test/heapsampling.go",
        "patchSetId": 1
      },
      "lineNbr": 84,
      "author": {
        "id": 12698
      },
      "writtenOn": "2018-12-12T03:30:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "38fec394_34f24853",
      "revId": "805584cafbc7170c98bbebb6fe6cd397e7a204fb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1bbd41af_7dce7ae4",
        "filename": "test/heapsampling.go",
        "patchSetId": 1
      },
      "lineNbr": 126,
      "author": {
        "id": 5190
      },
      "writtenOn": "2018-12-11T19:15:53Z",
      "side": 1,
      "message": "I am confused. how is the firstLine computed fnames[0] relevant to the other in fnames?",
      "revId": "805584cafbc7170c98bbebb6fe6cd397e7a204fb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6cd56de8_c9e60f0a",
        "filename": "test/heapsampling.go",
        "patchSetId": 1
      },
      "lineNbr": 126,
      "author": {
        "id": 12698
      },
      "writtenOn": "2018-12-12T03:30:19Z",
      "side": 1,
      "message": "They all have the same line numbers, as the allocations happen from the same leaf.\nAdded some comments to explain.",
      "parentUuid": "1bbd41af_7dce7ae4",
      "revId": "805584cafbc7170c98bbebb6fe6cd397e7a204fb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "76a9357b_6b84fb8c",
        "filename": "test/heapsampling.go",
        "patchSetId": 1
      },
      "lineNbr": 144,
      "author": {
        "id": 5167
      },
      "writtenOn": "2018-12-11T23:38:41Z",
      "side": 1,
      "message": "Typo",
      "range": {
        "startLine": 143,
        "startChar": 66,
        "endLine": 144,
        "endChar": 21
      },
      "revId": "805584cafbc7170c98bbebb6fe6cd397e7a204fb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "22aea699_dbe6fbc8",
        "filename": "test/heapsampling.go",
        "patchSetId": 1
      },
      "lineNbr": 144,
      "author": {
        "id": 12698
      },
      "writtenOn": "2018-12-12T03:30:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "76a9357b_6b84fb8c",
      "range": {
        "startLine": 143,
        "startChar": 66,
        "endLine": 144,
        "endChar": 21
      },
      "revId": "805584cafbc7170c98bbebb6fe6cd397e7a204fb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9c24dbd5_e790d231",
        "filename": "test/heapsampling.go",
        "patchSetId": 1
      },
      "lineNbr": 207,
      "author": {
        "id": 5190
      },
      "writtenOn": "2018-12-11T19:15:53Z",
      "side": 1,
      "message": "why is this change necessary?\nI read that the line is set by the first successfully resolved pc, and count allocation whose stack includes the named function. Previous logic is on the other hand counting only the allocation that occurs exactly in the name function. Is it right? Can you reflect this behavior in the comment?",
      "revId": "805584cafbc7170c98bbebb6fe6cd397e7a204fb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0f8d4ff8_9312949d",
        "filename": "test/heapsampling.go",
        "patchSetId": 1
      },
      "lineNbr": 207,
      "author": {
        "id": 12698
      },
      "writtenOn": "2018-12-12T03:30:19Z",
      "side": 1,
      "message": "Because we now are exercising it multiple times, the named function is not the leaf anymore, but one lower in the call stack. We still want to aggregate by the leaf line number, though.",
      "parentUuid": "9c24dbd5_e790d231",
      "revId": "805584cafbc7170c98bbebb6fe6cd397e7a204fb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}