{
  "comments": [
    {
      "key": {
        "uuid": "d81c8875_1e506416",
        "filename": "src/crypto/rsa/pss.go",
        "patchSetId": 1
      },
      "lineNbr": 79,
      "author": {
        "id": 28759
      },
      "writtenOn": "2020-04-01T22:16:05Z",
      "side": 1,
      "message": "Do you just want to define psLen somewhere in this docs and use it, rather than the full equation here (and in 8.)?",
      "range": {
        "startLine": 79,
        "startChar": 50,
        "endLine": 79,
        "endChar": 73
      },
      "revId": "6bc59d5ff0f301665fdec90f8e6fbcf25b07c61e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bdbec758_054e8220",
        "filename": "src/crypto/rsa/pss.go",
        "patchSetId": 1
      },
      "lineNbr": 79,
      "author": {
        "id": 11715
      },
      "writtenOn": "2020-04-01T22:23:42Z",
      "side": 1,
      "message": "These are copied verbatim from the spec. I also disagree with some of their wording choices, but I did my best to keep them as-is, and then make the code resemble the instructions.",
      "parentUuid": "d81c8875_1e506416",
      "range": {
        "startLine": 79,
        "startChar": 50,
        "endLine": 79,
        "endChar": 73
      },
      "revId": "6bc59d5ff0f301665fdec90f8e6fbcf25b07c61e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f4637a44_0e87811b",
        "filename": "src/crypto/rsa/pss.go",
        "patchSetId": 1
      },
      "lineNbr": 97,
      "author": {
        "id": 28759
      },
      "writtenOn": "2020-04-01T22:16:05Z",
      "side": 1,
      "message": "0xff? (or is there a reason to change 0xBC -\u003e 0xbc but not 0xFF -\u003e 0xff)",
      "range": {
        "startLine": 97,
        "startChar": 10,
        "endLine": 97,
        "endChar": 14
      },
      "revId": "6bc59d5ff0f301665fdec90f8e6fbcf25b07c61e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a1f49f90_b0a89d1b",
        "filename": "src/crypto/rsa/pss.go",
        "patchSetId": 1
      },
      "lineNbr": 97,
      "author": {
        "id": 11715
      },
      "writtenOn": "2020-04-01T22:23:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f4637a44_0e87811b",
      "range": {
        "startLine": 97,
        "startChar": 10,
        "endLine": 97,
        "endChar": 14
      },
      "revId": "6bc59d5ff0f301665fdec90f8e6fbcf25b07c61e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ad83a38a_ad4b22b9",
        "filename": "src/crypto/rsa/pss.go",
        "patchSetId": 1
      },
      "lineNbr": 116,
      "author": {
        "id": 28759
      },
      "writtenOn": "2020-04-01T22:16:05Z",
      "side": 1,
      "message": "Why is this not an ErrVerification like the rest?",
      "range": {
        "startLine": 113,
        "startChar": 1,
        "endLine": 116,
        "endChar": 2
      },
      "revId": "6bc59d5ff0f301665fdec90f8e6fbcf25b07c61e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3a312ea6_122b9125",
        "filename": "src/crypto/rsa/pss.go",
        "patchSetId": 1
      },
      "lineNbr": 116,
      "author": {
        "id": 11715
      },
      "writtenOn": "2020-04-01T22:23:42Z",
      "side": 1,
      "message": "This would be a panic, because it should be impossible, as the caller calculates emLen the same way as here. I wanted to anchor that assertion for the reader, but I also learned my lesson about unnecessary panics in DoS-able code.",
      "parentUuid": "ad83a38a_ad4b22b9",
      "range": {
        "startLine": 113,
        "startChar": 1,
        "endLine": 116,
        "endChar": 2
      },
      "revId": "6bc59d5ff0f301665fdec90f8e6fbcf25b07c61e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2d50b6bd_19b95cb4",
        "filename": "src/crypto/rsa/pss.go",
        "patchSetId": 1
      },
      "lineNbr": 147,
      "author": {
        "id": 28759
      },
      "writtenOn": "2020-04-01T22:16:05Z",
      "side": 1,
      "message": "Had to confirm for myself that this math lined up, since it\u0027s calculated slightly differently. Seems okay though: https://play.golang.org/p/bENuC-PIolK",
      "range": {
        "startLine": 146,
        "startChar": 0,
        "endLine": 147,
        "endChar": 25
      },
      "revId": "6bc59d5ff0f301665fdec90f8e6fbcf25b07c61e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0cd88ce5_140e502f",
        "filename": "src/crypto/rsa/pss.go",
        "patchSetId": 1
      },
      "lineNbr": 168,
      "author": {
        "id": 28759
      },
      "writtenOn": "2020-04-01T22:16:05Z",
      "side": 1,
      "message": "Is this explained in the commit message? I\u0027m trying to figure out why we now know to look in 0x01 where we didn\u0027t before.",
      "range": {
        "startLine": 160,
        "startChar": 1,
        "endLine": 168,
        "endChar": 0
      },
      "revId": "6bc59d5ff0f301665fdec90f8e6fbcf25b07c61e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f5f27017_300565fd",
        "filename": "src/crypto/rsa/pss.go",
        "patchSetId": 1
      },
      "lineNbr": 168,
      "author": {
        "id": 11715
      },
      "writtenOn": "2020-04-01T22:23:42Z",
      "side": 1,
      "message": "Heh, we did before too! The FindSaltLength loop used to scan through every byte from the left (by reducing sLen, which makes PS longer, and moves the delimiter to the right) checking if they are 0x01, and if not ensuring they are 0x00. This was at the same time, in a single scan, finding 0x01 and checking that the prefix is all 0x00.\n\nIt was clever. So now it\u0027s gone.\n\nI was trying to write a comment about it and then I realized it would be much clearer to only do the extra part (finding the 0x01) and then reusing the existing code to check the 0x00. This also gave me much more confidence that the 0x00 are being checked appropriately, and that everything is consistent.",
      "parentUuid": "0cd88ce5_140e502f",
      "range": {
        "startLine": 160,
        "startChar": 1,
        "endLine": 168,
        "endChar": 0
      },
      "revId": "6bc59d5ff0f301665fdec90f8e6fbcf25b07c61e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}