{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "1da5fece_5c08f338",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 38854
      },
      "writtenOn": "2021-03-17T00:51:07Z",
      "side": 1,
      "message": "Hi Cherry,\n\nI rebased the CL on the latest version of master. Can you take a look at it?\n\nBest,\nVed",
      "revId": "d9417f09dfca211ee710bba5c9582c7a78a12610",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c75c7a51_a9352d4f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 5021
      },
      "writtenOn": "2021-03-20T12:31:37Z",
      "side": 1,
      "message": "Hi Vedant Roy,\n\nReally great to see how much progress you made here!\n\nI did a little drive-by review and identified some possible improvements you might want to do in this or a follow-up patch set. But nothing that would prevent a merge.",
      "revId": "d9417f09dfca211ee710bba5c9582c7a78a12610",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "20a4be9e_780d41b5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 38854
      },
      "writtenOn": "2021-03-25T04:37:06Z",
      "side": 1,
      "message": "Hi Ingo,\n\nHappy to make these changes once I receive confirmation that the Go team still intends to implement this feature/merge this PR.\n\nBest,\nVed",
      "parentUuid": "c75c7a51_a9352d4f",
      "revId": "d9417f09dfca211ee710bba5c9582c7a78a12610",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3d141f8c_66cde06c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 13620
      },
      "writtenOn": "2021-04-16T21:07:10Z",
      "side": 1,
      "message": "The proposal has been accepted. I would take this as a guarantee that this PR will get merged as soon as it passes code review.",
      "parentUuid": "20a4be9e_780d41b5",
      "revId": "d9417f09dfca211ee710bba5c9582c7a78a12610",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "61ad8213_951045f1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 6330
      },
      "writtenOn": "2021-07-04T01:19:08Z",
      "side": 1,
      "message": "Ved,\n\nWould you like any help finishing up this change? Love to see this land.\n\n\n - Evan",
      "parentUuid": "3d141f8c_66cde06c",
      "revId": "d9417f09dfca211ee710bba5c9582c7a78a12610",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6f1b466e_8ab61068",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 38854
      },
      "writtenOn": "2021-07-06T01:56:03Z",
      "side": 1,
      "message": "Hi Evan,\n\nWould love to get some help here. I think the CL needs to be rebased on main in order for it to be reviewed.\n\nBest,\nVed",
      "parentUuid": "61ad8213_951045f1",
      "revId": "d9417f09dfca211ee710bba5c9582c7a78a12610",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2986a44d_5446fc06",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 6330
      },
      "writtenOn": "2021-07-06T05:00:29Z",
      "side": 1,
      "message": "I have rebased the changeset but I\u0027m unable to submit it with `git codereview mail`, likely because I\u0027m not an author on the changeset? This is basically my first time using gerrit and friends, so I easily could have simply done it wrong. \n\nI don\u0027t see a way to upload a diff, so the output from `git codereview mail -diff` is at https://gist.github.com/evanphx/da7193a9301e2b16e32cb484ee5243e4.",
      "revId": "d9417f09dfca211ee710bba5c9582c7a78a12610",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ccde170b_01504b0c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 6330
      },
      "writtenOn": "2021-07-08T05:31:45Z",
      "side": 1,
      "message": "I see there is a \"follow-up change\" feature. Is that what I should use to submit the revised code?",
      "parentUuid": "2986a44d_5446fc06",
      "revId": "d9417f09dfca211ee710bba5c9582c7a78a12610",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "37a5d374_2e38ae39",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 6005
      },
      "writtenOn": "2021-07-09T21:14:41Z",
      "side": 1,
      "message": "In general it\u0027s not possible to send newer patch sets to a CL that\u0027s authored by someone else. A workaround is to create a new CL, and in the commit message explain that it builds on top of work of the prior CL, and use \u0027Co-authored-by:\u0027 lines to give credit to other authors.\n\nThe \"Create follow-up change\" button is there to create a separate follow-up CL, which I don\u0027t think helps when you want to update an existing CL.",
      "parentUuid": "ccde170b_01504b0c",
      "revId": "d9417f09dfca211ee710bba5c9582c7a78a12610",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bb5a93e7_8fca6226",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 38854
      },
      "writtenOn": "2021-07-10T23:37:50Z",
      "side": 1,
      "message": "Hi Evan,\n\nI tried applying the diff with `git apply wasm.diff` and all the hunks got rejected. Am I doing it wrong?\n\nBest,\nVed",
      "parentUuid": "37a5d374_2e38ae39",
      "revId": "d9417f09dfca211ee710bba5c9582c7a78a12610",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5c44ac37_2faab9f2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 38854
      },
      "writtenOn": "2021-07-10T23:52:00Z",
      "side": 1,
      "message": "Also, happy to have you take this over!",
      "parentUuid": "bb5a93e7_8fca6226",
      "revId": "d9417f09dfca211ee710bba5c9582c7a78a12610",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4fd7d69f_12079a82",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 6330
      },
      "writtenOn": "2021-07-11T04:57:54Z",
      "side": 1,
      "message": "Sounds like the easiest thing is for me to submit a new CL with my patch set. I\u0027ll do that in the next day or 2.",
      "parentUuid": "5c44ac37_2faab9f2",
      "revId": "d9417f09dfca211ee710bba5c9582c7a78a12610",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9f053b25_f8b42632",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 38854
      },
      "writtenOn": "2021-07-31T05:01:23Z",
      "side": 1,
      "message": "Hi Evan,\n\nDid you ever manage to do submit a CL? Otherwise, I\u0027ll take a look again.",
      "parentUuid": "4fd7d69f_12079a82",
      "revId": "d9417f09dfca211ee710bba5c9582c7a78a12610",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7ad512ca_ef9b8e19",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 53843
      },
      "writtenOn": "2021-09-18T02:04:25Z",
      "side": 1,
      "message": "Excellent work here.  As I am personally interested in seeing this code reach a release at some point, I have done some refactoring and minor simplification to help push it along: https://go-review.googlesource.com/c/go/+/350737.",
      "revId": "d9417f09dfca211ee710bba5c9582c7a78a12610",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a1bb69e3_1ddb99c6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 53843
      },
      "writtenOn": "2021-10-04T14:57:30Z",
      "side": 1,
      "message": "Sorry, I said \"refactoring\" but meant \"rebasing\".",
      "parentUuid": "7ad512ca_ef9b8e19",
      "revId": "d9417f09dfca211ee710bba5c9582c7a78a12610",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c03d1022_360c1825",
        "filename": "src/cmd/compile/internal/ir/func.go",
        "patchSetId": 8
      },
      "lineNbr": 125,
      "author": {
        "id": 5021
      },
      "writtenOn": "2021-03-20T12:31:37Z",
      "side": 1,
      "message": "Could you group both of these into a structure you point to?\nI expect most functions that are compiled are not using the wasmimport. So not all functions should pay the 8 or 16 bytes this adds, but 4 and 8 may be ok.",
      "revId": "d9417f09dfca211ee710bba5c9582c7a78a12610",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "05740afb_599e18ae",
        "filename": "src/cmd/compile/internal/ir/func.go",
        "patchSetId": 8
      },
      "lineNbr": 125,
      "author": {
        "id": 6330
      },
      "writtenOn": "2021-07-11T04:57:54Z",
      "side": 1,
      "message": "My patch combines them to save space.",
      "parentUuid": "c03d1022_360c1825",
      "revId": "d9417f09dfca211ee710bba5c9582c7a78a12610",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d8191ac7_71afec0a",
        "filename": "src/cmd/compile/internal/noder/noder.go",
        "patchSetId": 8
      },
      "lineNbr": 1632,
      "author": {
        "id": 5021
      },
      "writtenOn": "2021-03-20T12:31:37Z",
      "side": 1,
      "message": "Maybe also check for objabi.GOARCH \u003d\u003d \"wasm\" here? Then you can make it a fatal condition everywhere else.",
      "revId": "d9417f09dfca211ee710bba5c9582c7a78a12610",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4ed1143e_5c90c9bb",
        "filename": "src/cmd/compile/internal/ssagen/abi.go",
        "patchSetId": 8
      },
      "lineNbr": 156,
      "author": {
        "id": 5021
      },
      "writtenOn": "2021-03-20T12:31:37Z",
      "side": 1,
      "message": "The second condition is a \"should never happen\" condition. Maybe something like \n\nif objabi.GOARCH !\u003d \"wasm\" {\n\tbase.FatalfAt(f.Pos(), \"CreateWasmImportWrapper called not supported on %s: func was %v\", objabi.GOARCH, f)\n}\n\nhelps debugging this, if it happens.",
      "revId": "d9417f09dfca211ee710bba5c9582c7a78a12610",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f77441db_11fa8d84",
        "filename": "src/cmd/compile/internal/ssagen/abi.go",
        "patchSetId": 8
      },
      "lineNbr": 156,
      "author": {
        "id": 6330
      },
      "writtenOn": "2021-07-06T04:42:06Z",
      "side": 1,
      "message": "Looking at the code, that later was will actually handle on all non-warm platforms, as this function is called in the context of compiling any function. Given that I\u0027d say the existing behavior is correct, that it should simply ignore the declaration on non-wasm platforms.",
      "parentUuid": "4ed1143e_5c90c9bb",
      "revId": "d9417f09dfca211ee710bba5c9582c7a78a12610",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3a9ef74c_855baf24",
        "filename": "src/cmd/compile/internal/ssagen/abi.go",
        "patchSetId": 8
      },
      "lineNbr": 439,
      "author": {
        "id": 5021
      },
      "writtenOn": "2021-03-20T12:31:37Z",
      "side": 1,
      "message": "Can the objabi.GOARCH !\u003d \"wasm\" case be made fatal again? It should never happen.",
      "revId": "d9417f09dfca211ee710bba5c9582c7a78a12610",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "37b7c1ab_d9583b0f",
        "filename": "src/cmd/compile/internal/ssagen/abi.go",
        "patchSetId": 8
      },
      "lineNbr": 439,
      "author": {
        "id": 6330
      },
      "writtenOn": "2021-07-06T04:42:06Z",
      "side": 1,
      "message": "The same goes for your my comment on your above comment. the ARCH check will happen on every non-wasm platform that happens to observe the wasmimport function decl. As such, just ignoring it seems like the correct behavior.",
      "parentUuid": "3a9ef74c_855baf24",
      "revId": "d9417f09dfca211ee710bba5c9582c7a78a12610",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "56c6625c_014d34d3",
        "filename": "src/cmd/internal/obj/wasm/wasmobj.go",
        "patchSetId": 8
      },
      "lineNbr": 190,
      "author": {
        "id": 5021
      },
      "writtenOn": "2021-03-20T12:31:37Z",
      "side": 1,
      "message": "Could this huge block inside that if move into an extra function?\n\ne.g. \nif wi !\u003d nil {\n\tinsertWasmWrapper(wi) // please choose a better name here!\n}",
      "revId": "d9417f09dfca211ee710bba5c9582c7a78a12610",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one Code-Review+2 is required. Self review is not allowed."
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Code-Review=MAX,user=non_uploader"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "d9417f09dfca211ee710bba5c9582c7a78a12610",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Do-Not-Review",
        "description": {
          "value": "Changes that have DO NOT REVIEW in their commit message are not submittable."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (R|r)(E|e)(V|v)(I|i)(E|e)(W|w).*\""
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:false"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (R|r)(E|e)(V|v)(I|i)(E|e)(W|w).*\""},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (R|r)(E|e)(V|v)(I|i)(E|e)(W|w).*\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "d9417f09dfca211ee710bba5c9582c7a78a12610",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Do-Not-Submit",
        "description": {
          "value": "Changes that have DO NOT SUBMIT in their commit message are not submittable."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:false"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "d9417f09dfca211ee710bba5c9582c7a78a12610",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "No-Holds",
        "description": {
          "value": "Changes with a Hold+1 vote are not submittable."
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "NOT label:Hold\u003d1"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"NOT label:Hold=1"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Hold=1"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "d9417f09dfca211ee710bba5c9582c7a78a12610",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "No-Unresolved-Comments",
        "description": {
          "value": "Changes that have unresolved comments are not submittable, unless overriden by adding the hashtag allow-unresolved-comments."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:unresolved"
          }
        },
        "submittabilityExpression": {
          "expressionString": "-has:unresolved"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "hashtag:allow-unresolved-comments"
          }
        },
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:unresolved"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:unresolved"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-has:unresolved"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":["has:unresolved"],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"hashtag:allow-unresolved-comments"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["hashtag:allow-unresolved-comments"]}
      },
      "patchSetCommitId": "d9417f09dfca211ee710bba5c9582c7a78a12610",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "d9417f09dfca211ee710bba5c9582c7a78a12610",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "TryBots-Pass",
        "description": {
          "value": "Changes must pass TryBots unless TryBot-Bypass+1 is set."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config -label:TryBot-Result\u003dMAX"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:false"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:TryBot-Bypass\u003dMAX"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config -label:TryBot-Result=MAX"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":["label:TryBot-Result=MAX"],"failingAtoms":["branch:refs/meta/config"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:TryBot-Bypass=MAX"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "patchSetCommitId": "d9417f09dfca211ee710bba5c9582c7a78a12610",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}