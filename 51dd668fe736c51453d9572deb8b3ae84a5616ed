{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "8a75b094_7f8233fe",
        "filename": "src/cmd/link/internal/ld/xcoff.go",
        "patchSetId": 3
      },
      "lineNbr": 768,
      "author": {
        "id": 27994
      },
      "writtenOn": "2021-04-07T10:19:27Z",
      "side": 0,
      "message": "Here is the fix (you can change the comment if it\u0027s not clear enough)\n\n\t// In external linking with trampolines, the alignment added when\n\t// creating a new .text section isn\u0027t added in the size of the\n\t// last symbol of the previous section. Thus, there is a small\n\t// difference between the size of this section and the sum of\n\t// its symbols\u0027 size which we are currently using.\n\t// However, in external linking, we are merging all .text sections\n\t// in a single csect. Thus, we can use the sum of the sections\u0027\n\t// size instead of the sum of the size all the section\u0027s symbols.\n\t// NOTE: This won\u0027t work anymore once external linking generation\n\t// as been fixed (cf TODO in writeSymbolFunc).\n\tif ctxt.LinkMode \u003d\u003d LinkExternal {\n\t\tcurrSymSrcFile.csectSize \u003d 0\n\t\tfor _, s :\u003d range Segtext.Sections {\n\t\t\tif s.Name !\u003d \".text\" {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcurrSymSrcFile.csectSize +\u003d int64(s.Length)\n\t\t}\n\t}",
      "revId": "51dd668fe736c51453d9572deb8b3ae84a5616ed",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "82946a7d_9801f4f6",
        "filename": "src/cmd/link/internal/ld/xcoff.go",
        "patchSetId": 3
      },
      "lineNbr": 768,
      "author": {
        "id": 27994
      },
      "writtenOn": "2021-04-07T12:10:25Z",
      "side": 0,
      "message": "Actually, it doesn\u0027t work. The result is larger than expected.. \nDon\u0027t add this workaround for now.",
      "parentUuid": "8a75b094_7f8233fe",
      "revId": "51dd668fe736c51453d9572deb8b3ae84a5616ed",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "acb3b2e4_9797c86e",
        "filename": "src/cmd/link/internal/ld/xcoff.go",
        "patchSetId": 3
      },
      "lineNbr": 768,
      "author": {
        "id": 36863
      },
      "writtenOn": "2021-04-07T14:54:06Z",
      "side": 0,
      "message": "I notice AIX groups all RO sections into Segtext, thus it contains a bit more than I\u0027d expected.\n\nAre we expecting the sum of all the .text symbol sizes to match the sum of the .text section sizes?  That won\u0027t always be true if we have functions with different alignments (i.e if something is using PCALIGN 32).",
      "parentUuid": "82946a7d_9801f4f6",
      "revId": "51dd668fe736c51453d9572deb8b3ae84a5616ed",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b01cbd04_f09a80aa",
        "filename": "src/cmd/link/internal/ld/xcoff.go",
        "patchSetId": 3
      },
      "lineNbr": 768,
      "author": {
        "id": 27994
      },
      "writtenOn": "2021-04-07T16:39:55Z",
      "side": 0,
      "message": "Well, XCOFF is a complex format. It allows only three main sections \".text\", \".data\" and \".bss\". There is no RO sections. Thus there are including inside the \".text\" sections as XCOFF sections called csect. This csect are quite independent, thus we can considered Segtext as a gathering of RO sections + a Linux-like \".text\" section. However, this Linux-like \".text\" must be compacted. I mean to say that all the symbols (\u003dfunctions) must be all one after another, in a single csect. \n\nFor now, we did that by creating this single csect which have a size equal to the sum of all symbols\u0027 size. It was working pretty well except when several \".text\" sections were created where we have to fill the gap by considering \"runtime.text.X\" as a real symbol. Maybe there are some mistakes especially if new features where added creating alignments since the port was done (with go1.12). But it seems to work pretty well. \n\nNote that it\u0027s a bit easier with internal linking as we are a bit more free to do whatever we want.",
      "parentUuid": "acb3b2e4_9797c86e",
      "revId": "51dd668fe736c51453d9572deb8b3ae84a5616ed",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0b53c938_da49fade",
        "filename": "src/cmd/link/internal/ld/xcoff.go",
        "patchSetId": 3
      },
      "lineNbr": 768,
      "author": {
        "id": 27994
      },
      "writtenOn": "2021-04-08T11:26:10Z",
      "side": 0,
      "message": "The sum of the sections\u0027 size isn\u0027t working because two \".text\" symbols aren\u0027t functions. Thus, they have their own csects, \"rutnime.text\" and \"go.buildid\". \nBut we can actually compute the size directly when we are creating the new \"file\" in the function above. I\u0027ve sent the patch to your address (it\u0027s less confusing than adding some code in comments here.)",
      "parentUuid": "b01cbd04_f09a80aa",
      "revId": "51dd668fe736c51453d9572deb8b3ae84a5616ed",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "36704a18_53c8157b",
        "filename": "src/cmd/link/internal/ld/xcoff.go",
        "patchSetId": 3
      },
      "lineNbr": 768,
      "author": {
        "id": 36863
      },
      "writtenOn": "2021-04-13T13:49:49Z",
      "side": 0,
      "message": "Ack",
      "parentUuid": "0b53c938_da49fade",
      "revId": "51dd668fe736c51453d9572deb8b3ae84a5616ed",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}