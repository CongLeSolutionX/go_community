{
  "comments": [
    {
      "key": {
        "uuid": "5beec834_ca11351e",
        "filename": "src/cmd/compile/internal/gc/escape.go",
        "patchSetId": 7
      },
      "lineNbr": 21,
      "author": {
        "id": 13315
      },
      "writtenOn": "2019-04-08T19:13:35Z",
      "side": 1,
      "message": "Maybe mention early that we build a weighted directed graph. It took me a long time to realize that \"distance\" can be negative (and had a hard time to understand \"distance is bounded at 0\"), until I saw Bellman-Ford algorithm.",
      "revId": "63c945cd3c4a7e470f0a45b426dbf5114f34cf3d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "575f3b82_62e6497c",
        "filename": "src/cmd/compile/internal/gc/escape.go",
        "patchSetId": 7
      },
      "lineNbr": 21,
      "author": {
        "id": 5440
      },
      "writtenOn": "2019-04-12T22:39:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5beec834_ca11351e",
      "revId": "63c945cd3c4a7e470f0a45b426dbf5114f34cf3d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "403f5da8_97a43ca8",
        "filename": "src/cmd/compile/internal/gc/escape.go",
        "patchSetId": 7
      },
      "lineNbr": 59,
      "author": {
        "id": 7061
      },
      "writtenOn": "2019-04-04T17:07:00Z",
      "side": 1,
      "message": "I think this is capturing the same thing as the value/suffixValue distinction in the old escape analysis, and is similarly difficult to explain/understand.\n\nDoes \"shortest path\" refer to the lowest distance value?\n\nIn \"intuitively, if dist(p, q) \u003d\u003d 0\" below, can dist(p,q)\u003d\u003d0 ever be obtained except by an equality chain?\n\nSuppose\n\n//     o \u003d *q     //  1\n//     q \u003d \u0026r     // -1\n//     r \u003d *s     //  1\n\nWhat is dist(o, r)? (I.e., is the trailing dist(q,r)\u003d-1 an intermediate value and thus actually 0?)",
      "range": {
        "startLine": 51,
        "startChar": 0,
        "endLine": 59,
        "endChar": 70
      },
      "revId": "63c945cd3c4a7e470f0a45b426dbf5114f34cf3d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ecab26a8_47b9acb4",
        "filename": "src/cmd/compile/internal/gc/escape.go",
        "patchSetId": 7
      },
      "lineNbr": 59,
      "author": {
        "id": 5440
      },
      "writtenOn": "2019-04-04T17:27:14Z",
      "side": 1,
      "message": "Thanks for the feedback. I\u0027ll think about how to revise the comments to make this clearer. To answer your questions:\n\nYeah, I think it\u0027s serving the same purpose that value/suffixValue did, and yeah, it\u0027s similarly a little tricky to understand.\n\nYes, \"shortest path\" here refers to lowest distance value, not least number of steps.\n\n\"dist(p, q) \u003d 0\" can be obtained a few ways. The trivial way is:\n\n    p \u003d q  // 0\n\nbut it can also be\n\n    p \u003d *a  // 1\n    a \u003d \u0026q  // -1\n\nor\n\n    p \u003d **a  // 2\n    a \u003d \u0026b   // -1\n    b \u003d \u0026q   // -1\n\netc.\n\nIn your example, dist(o, r) is 0. By \"intermediate distance\", I meant distances from the root to vertices along the path. For example,\n\n    p \u003d \u0026q  // -1\n    q \u003d *r  // 1\n\ndist(p, r) \u003d 1, because the intermediate distance dist(p, q) is bounded at 0.",
      "parentUuid": "403f5da8_97a43ca8",
      "range": {
        "startLine": 51,
        "startChar": 0,
        "endLine": 59,
        "endChar": 70
      },
      "revId": "63c945cd3c4a7e470f0a45b426dbf5114f34cf3d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0622a178_97839dfa",
        "filename": "src/cmd/compile/internal/gc/escape.go",
        "patchSetId": 7
      },
      "lineNbr": 59,
      "author": {
        "id": 5440
      },
      "writtenOn": "2019-04-12T22:39:23Z",
      "side": 1,
      "message": "Trimmed this down somewhat and moved the explanations directly into walkOne.",
      "parentUuid": "ecab26a8_47b9acb4",
      "range": {
        "startLine": 51,
        "startChar": 0,
        "endLine": 59,
        "endChar": 70
      },
      "revId": "63c945cd3c4a7e470f0a45b426dbf5114f34cf3d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8500dcc8_9c76f5f8",
        "filename": "src/cmd/compile/internal/gc/escape.go",
        "patchSetId": 7
      },
      "lineNbr": 73,
      "author": {
        "id": 13315
      },
      "writtenOn": "2019-04-08T19:13:35Z",
      "side": 1,
      "message": "If the intent is to remove the old escape analysis code, maybe move the comment about loopDepth (or rewrite).",
      "revId": "63c945cd3c4a7e470f0a45b426dbf5114f34cf3d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "be78ae86_15470d23",
        "filename": "src/cmd/compile/internal/gc/escape.go",
        "patchSetId": 7
      },
      "lineNbr": 73,
      "author": {
        "id": 5440
      },
      "writtenOn": "2019-04-12T22:39:23Z",
      "side": 1,
      "message": "Done\n\nNote also: loopDepth here is somewhat simpler than loopdepth was in esc.go. In particular, there\u0027s not the special handling of globals or return parameters.",
      "parentUuid": "8500dcc8_9c76f5f8",
      "revId": "63c945cd3c4a7e470f0a45b426dbf5114f34cf3d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0a0c7e5a_85c35c51",
        "filename": "src/cmd/compile/internal/gc/escape.go",
        "patchSetId": 7
      },
      "lineNbr": 307,
      "author": {
        "id": 13315
      },
      "writtenOn": "2019-04-08T19:13:35Z",
      "side": 1,
      "message": "ORECV is an expression, not a statement. Does it need to be here?",
      "revId": "63c945cd3c4a7e470f0a45b426dbf5114f34cf3d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7c590689_db8d40b7",
        "filename": "src/cmd/compile/internal/gc/escape.go",
        "patchSetId": 7
      },
      "lineNbr": 307,
      "author": {
        "id": 5440
      },
      "writtenOn": "2019-04-08T19:40:15Z",
      "side": 1,
      "message": "Yeah. In the Node AST, we don\u0027t have an Op to represent ExpressionStmt (https://golang.org/ref/spec#Expression_statements), so those expression Ops can appear in both Stmt or Expr context, and so it\u0027s necessary to have some redundancy to handle that.\n\nI opted to handle ORECV here by falling through to e.value (but using the SkipInit part, since e.stmt already visited Ninit), and to handle the function calls by directly calling e.call.\n\nAt least OCALLFUNC/OCALLINTER/OCALLMETH need to be specially handled at top-level, because they might evaluate to multiple values (where e.value only handles a single-value).\n\nThe builtins that are okay for statement context (close/copy/delete/panic/print/println/recover) can be handled either like ORECV or like OCALL*. I somewhat arbitrarily decided to group them with the latter.",
      "parentUuid": "0a0c7e5a_85c35c51",
      "revId": "63c945cd3c4a7e470f0a45b426dbf5114f34cf3d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "87ccec8c_0fbde280",
        "filename": "src/cmd/compile/internal/gc/escape.go",
        "patchSetId": 7
      },
      "lineNbr": 307,
      "author": {
        "id": 13315
      },
      "writtenOn": "2019-04-08T20:08:02Z",
      "side": 1,
      "message": "Ok, thank you! This makes sense.",
      "parentUuid": "7c590689_db8d40b7",
      "revId": "63c945cd3c4a7e470f0a45b426dbf5114f34cf3d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "44fa34ae_e1352661",
        "filename": "src/cmd/compile/internal/gc/escape.go",
        "patchSetId": 7
      },
      "lineNbr": 340,
      "author": {
        "id": 13315
      },
      "writtenOn": "2019-04-08T19:13:35Z",
      "side": 1,
      "message": "Is there a reason that these builtins are statements whereas OLEN, OREAL, etc. are expressions? I think they are all expressions, right? Because they don\u0027t return values? But OCOPY does return a value.",
      "range": {
        "startLine": 340,
        "startChar": 40,
        "endLine": 340,
        "endChar": 97
      },
      "revId": "63c945cd3c4a7e470f0a45b426dbf5114f34cf3d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8ebca659_a457e915",
        "filename": "src/cmd/compile/internal/gc/escape.go",
        "patchSetId": 7
      },
      "lineNbr": 340,
      "author": {
        "id": 5440
      },
      "writtenOn": "2019-04-08T19:40:15Z",
      "side": 1,
      "message": "Yeah, the Go spec disallows certain builtin functions to be called in statement context: https://golang.org/ref/spec#Expression_statements\n\nBasically, only builtins with side-effects are allowed in statement context.",
      "parentUuid": "44fa34ae_e1352661",
      "range": {
        "startLine": 340,
        "startChar": 40,
        "endLine": 340,
        "endChar": 97
      },
      "revId": "63c945cd3c4a7e470f0a45b426dbf5114f34cf3d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2826072c_4354297c",
        "filename": "src/cmd/compile/internal/gc/escape.go",
        "patchSetId": 7
      },
      "lineNbr": 359,
      "author": {
        "id": 13315
      },
      "writtenOn": "2019-04-08T19:13:35Z",
      "side": 1,
      "message": "Maybe expr is slightly better?",
      "range": {
        "startLine": 359,
        "startChar": 17,
        "endLine": 359,
        "endChar": 22
      },
      "revId": "63c945cd3c4a7e470f0a45b426dbf5114f34cf3d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dd0e5091_91eff0f0",
        "filename": "src/cmd/compile/internal/gc/escape.go",
        "patchSetId": 7
      },
      "lineNbr": 359,
      "author": {
        "id": 5440
      },
      "writtenOn": "2019-04-08T19:40:15Z",
      "side": 1,
      "message": "I was thinking about that. I was concerned about ambiguity because \"lvalues\" are also expressions, but they should be visited with e.addr instead of e.value.\n\nMaybe valueExpr and addrExpr?",
      "parentUuid": "2826072c_4354297c",
      "range": {
        "startLine": 359,
        "startChar": 17,
        "endLine": 359,
        "endChar": 22
      },
      "revId": "63c945cd3c4a7e470f0a45b426dbf5114f34cf3d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "67d36ecb_629418b8",
        "filename": "src/cmd/compile/internal/gc/escape.go",
        "patchSetId": 7
      },
      "lineNbr": 359,
      "author": {
        "id": 13315
      },
      "writtenOn": "2019-04-08T20:08:02Z",
      "side": 1,
      "message": "Thanks. I don\u0027t have a strong preference, value \u0026 addr is ok. cmd/compile/internal/gc/ssa.go uses expr \u0026 addr. I think the situation is similar there.",
      "parentUuid": "dd0e5091_91eff0f0",
      "range": {
        "startLine": 359,
        "startChar": 17,
        "endLine": 359,
        "endChar": 22
      },
      "revId": "63c945cd3c4a7e470f0a45b426dbf5114f34cf3d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "10511559_28827f67",
        "filename": "src/cmd/compile/internal/gc/escape.go",
        "patchSetId": 7
      },
      "lineNbr": 359,
      "author": {
        "id": 5440
      },
      "writtenOn": "2019-04-12T22:39:23Z",
      "side": 1,
      "message": "Decided to go with expr \u0026 addr for consistency with ssa.go.",
      "parentUuid": "67d36ecb_629418b8",
      "range": {
        "startLine": 359,
        "startChar": 17,
        "endLine": 359,
        "endChar": 22
      },
      "revId": "63c945cd3c4a7e470f0a45b426dbf5114f34cf3d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "94842797_e40643a3",
        "filename": "src/cmd/compile/internal/gc/escape.go",
        "patchSetId": 7
      },
      "lineNbr": 435,
      "author": {
        "id": 13315
      },
      "writtenOn": "2019-04-08T19:13:35Z",
      "side": 1,
      "message": "Yeah, one part I would like to improve esc.go is the implicit allocation/dereference for converting to/from interfaces. This causes unnecessary escapes occasionally. I tried ob this very briefly but didn\u0027t make it work. It is nice you get this work!",
      "revId": "63c945cd3c4a7e470f0a45b426dbf5114f34cf3d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9ecbf171_224cef76",
        "filename": "src/cmd/compile/internal/gc/escape.go",
        "patchSetId": 7
      },
      "lineNbr": 435,
      "author": {
        "id": 5440
      },
      "writtenOn": "2019-04-08T19:40:15Z",
      "side": 1,
      "message": "Thanks! Yeah, I think this was a cause for a handful of \"BAD\" results in the regress tests.",
      "parentUuid": "94842797_e40643a3",
      "revId": "63c945cd3c4a7e470f0a45b426dbf5114f34cf3d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f82a14d5_fd7c27f1",
        "filename": "src/cmd/compile/internal/gc/escape.go",
        "patchSetId": 7
      },
      "lineNbr": 475,
      "author": {
        "id": 13315
      },
      "writtenOn": "2019-04-08T19:13:35Z",
      "side": 1,
      "message": "Yes, this is another place I wish to improve. I think in theory we can just treat method values as closures. But the internal representation in the AST is probably different enough that makes this hard.",
      "revId": "63c945cd3c4a7e470f0a45b426dbf5114f34cf3d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3ec5a775_5a1a2401",
        "filename": "src/cmd/compile/internal/gc/escape.go",
        "patchSetId": 7
      },
      "lineNbr": 475,
      "author": {
        "id": 5440
      },
      "writtenOn": "2019-04-08T19:40:15Z",
      "side": 1,
      "message": "Ack.\n\nFWIW, I tried replacing this with just\n\n    e.value(e.spill(k, n), n.Left)\n\nand it seemed to work fine, and improved some more regress tests.\n\nBut I figured I\u0027d wait for a followup CL for that improvement, since there are already enough behavior changes here. :)",
      "parentUuid": "f82a14d5_fd7c27f1",
      "revId": "63c945cd3c4a7e470f0a45b426dbf5114f34cf3d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bb742b0b_06f13c10",
        "filename": "src/cmd/compile/internal/gc/escape.go",
        "patchSetId": 7
      },
      "lineNbr": 885,
      "author": {
        "id": 13315
      },
      "writtenOn": "2019-04-08T19:13:35Z",
      "side": 1,
      "message": "Would be good to have comments on these fields.",
      "range": {
        "startLine": 881,
        "startChar": 0,
        "endLine": 885,
        "endChar": 17
      },
      "revId": "63c945cd3c4a7e470f0a45b426dbf5114f34cf3d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "41427bf3_52f46f43",
        "filename": "src/cmd/compile/internal/gc/escape.go",
        "patchSetId": 7
      },
      "lineNbr": 885,
      "author": {
        "id": 5440
      },
      "writtenOn": "2019-04-12T22:39:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bb742b0b_06f13c10",
      "range": {
        "startLine": 881,
        "startChar": 0,
        "endLine": 885,
        "endChar": 17
      },
      "revId": "63c945cd3c4a7e470f0a45b426dbf5114f34cf3d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "56566fb2_3523a66e",
        "filename": "src/cmd/compile/internal/gc/escape.go",
        "patchSetId": 7
      },
      "lineNbr": 900,
      "author": {
        "id": 7061
      },
      "writtenOn": "2019-04-04T17:07:00Z",
      "side": 1,
      "message": "Would it be better to call this EscContext? It\u0027s also sort of a continuation, but I don\u0027t know if calling it that helps most people understand.  Other choices are \"sink\", \"receiver\", \"recipient\".",
      "range": {
        "startLine": 900,
        "startChar": 5,
        "endLine": 900,
        "endChar": 12
      },
      "revId": "63c945cd3c4a7e470f0a45b426dbf5114f34cf3d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6563c4f1_e6e21c71",
        "filename": "src/cmd/compile/internal/gc/escape.go",
        "patchSetId": 7
      },
      "lineNbr": 900,
      "author": {
        "id": 5440
      },
      "writtenOn": "2019-04-04T17:27:14Z",
      "side": 1,
      "message": "Yeah, I called the variables \"k\" because of continuations (at least that\u0027s what I remember continuations commonly being called in Scheme), but \"EscContinuation\" was too tedious to type everywhere, so I went with EscHole.\n\nEscContext probably is a better name. I\u0027ll try to remember if there was a reason I didn\u0027t pick that instead, and rename otherwise.\n\n\"Sink\" and \"recipient\" seem okay too. I\u0027d probably avoid \"receiver\" to avoid confusion with receiver parameters.",
      "parentUuid": "56566fb2_3523a66e",
      "range": {
        "startLine": 900,
        "startChar": 5,
        "endLine": 900,
        "endChar": 12
      },
      "revId": "63c945cd3c4a7e470f0a45b426dbf5114f34cf3d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9c028c7f_f593676d",
        "filename": "src/cmd/compile/internal/gc/escape.go",
        "patchSetId": 7
      },
      "lineNbr": 900,
      "author": {
        "id": 13315
      },
      "writtenOn": "2019-04-08T19:13:35Z",
      "side": 1,
      "message": "I feel that if we call it \"hole\", it is probably better that other function comments also use \"hole\" and \"flow\" terminology, like, \"this function models XXX flows into the hole k\".",
      "parentUuid": "6563c4f1_e6e21c71",
      "range": {
        "startLine": 900,
        "startChar": 5,
        "endLine": 900,
        "endChar": 12
      },
      "revId": "63c945cd3c4a7e470f0a45b426dbf5114f34cf3d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a295606c_4dd820d4",
        "filename": "src/cmd/compile/internal/gc/escape.go",
        "patchSetId": 7
      },
      "lineNbr": 900,
      "author": {
        "id": 5440
      },
      "writtenOn": "2019-04-12T22:39:23Z",
      "side": 1,
      "message": "I\u0027ve left as EscHole for now, but updated the comments as Cherry suggested.\n\nI\u0027ll continue thinking about better terminology.",
      "parentUuid": "9c028c7f_f593676d",
      "range": {
        "startLine": 900,
        "startChar": 5,
        "endLine": 900,
        "endChar": 12
      },
      "revId": "63c945cd3c4a7e470f0a45b426dbf5114f34cf3d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3dea7c4b_0bc7da01",
        "filename": "src/cmd/compile/internal/gc/escape.go",
        "patchSetId": 7
      },
      "lineNbr": 902,
      "author": {
        "id": 13315
      },
      "writtenOn": "2019-04-08T19:13:35Z",
      "side": 1,
      "message": "Maybe add comment on the range of derefs.",
      "revId": "63c945cd3c4a7e470f0a45b426dbf5114f34cf3d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2e0cb8c4_a3c7786f",
        "filename": "src/cmd/compile/internal/gc/escape.go",
        "patchSetId": 7
      },
      "lineNbr": 902,
      "author": {
        "id": 5440
      },
      "writtenOn": "2019-04-12T22:39:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3dea7c4b_0bc7da01",
      "revId": "63c945cd3c4a7e470f0a45b426dbf5114f34cf3d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8e99b071_047ee88e",
        "filename": "src/cmd/compile/internal/gc/escape.go",
        "patchSetId": 7
      },
      "lineNbr": 929,
      "author": {
        "id": 7061
      },
      "writtenOn": "2019-04-04T17:07:00Z",
      "side": 1,
      "message": "If \"holes\" are \"contexts\", maybe this verb becomes \"join\" (which has lattice-y meaning, and I think it is probably the right one).",
      "range": {
        "startLine": 929,
        "startChar": 23,
        "endLine": 929,
        "endChar": 26
      },
      "revId": "63c945cd3c4a7e470f0a45b426dbf5114f34cf3d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6a003f80_6169f1d2",
        "filename": "src/cmd/compile/internal/gc/escape.go",
        "patchSetId": 7
      },
      "lineNbr": 929,
      "author": {
        "id": 5440
      },
      "writtenOn": "2019-04-04T17:27:14Z",
      "side": 1,
      "message": "I think I\u0027d lean towards \"multi\" or \"tee\" still to avoid math-y jargon, but \"join\" is probably reasonably intuitive too. I think \"meet\" would be confusing though, if that turned out to be the right lattice term.",
      "parentUuid": "8e99b071_047ee88e",
      "range": {
        "startLine": 929,
        "startChar": 23,
        "endLine": 929,
        "endChar": 26
      },
      "revId": "63c945cd3c4a7e470f0a45b426dbf5114f34cf3d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "82040efb_c7338b6d",
        "filename": "src/cmd/compile/internal/gc/escape.go",
        "patchSetId": 7
      },
      "lineNbr": 929,
      "author": {
        "id": 5440
      },
      "writtenOn": "2019-04-12T22:39:23Z",
      "side": 1,
      "message": "Leaving teeHole for now. Will continue thinking about alongside renaming EscHole.",
      "parentUuid": "6a003f80_6169f1d2",
      "range": {
        "startLine": 929,
        "startChar": 23,
        "endLine": 929,
        "endChar": 26
      },
      "revId": "63c945cd3c4a7e470f0a45b426dbf5114f34cf3d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "408cedde_0b6c19e6",
        "filename": "src/cmd/compile/internal/gc/escape.go",
        "patchSetId": 7
      },
      "lineNbr": 1021,
      "author": {
        "id": 13315
      },
      "writtenOn": "2019-04-08T19:13:35Z",
      "side": 1,
      "message": "This is called oldLoc so it is the opposite of newLoc? I think just calling it \"loc\" is probably fine.",
      "range": {
        "startLine": 1021,
        "startChar": 17,
        "endLine": 1021,
        "endChar": 23
      },
      "revId": "63c945cd3c4a7e470f0a45b426dbf5114f34cf3d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6c14c19f_be221d23",
        "filename": "src/cmd/compile/internal/gc/escape.go",
        "patchSetId": 7
      },
      "lineNbr": 1021,
      "author": {
        "id": 5440
      },
      "writtenOn": "2019-04-12T22:39:23Z",
      "side": 1,
      "message": "Ack. I think it\u0027s worth the slightly longer name here for increased clarity.",
      "parentUuid": "408cedde_0b6c19e6",
      "range": {
        "startLine": 1021,
        "startChar": 17,
        "endLine": 1021,
        "endChar": 23
      },
      "revId": "63c945cd3c4a7e470f0a45b426dbf5114f34cf3d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2e98b6bf_4784f514",
        "filename": "src/cmd/compile/internal/gc/escape.go",
        "patchSetId": 7
      },
      "lineNbr": 1093,
      "author": {
        "id": 13315
      },
      "writtenOn": "2019-04-08T19:13:35Z",
      "side": 1,
      "message": "Move this comment to line 1096?",
      "revId": "63c945cd3c4a7e470f0a45b426dbf5114f34cf3d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aff3cc29_1de98268",
        "filename": "src/cmd/compile/internal/gc/escape.go",
        "patchSetId": 7
      },
      "lineNbr": 1093,
      "author": {
        "id": 5440
      },
      "writtenOn": "2019-04-12T22:39:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2e98b6bf_4784f514",
      "revId": "63c945cd3c4a7e470f0a45b426dbf5114f34cf3d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}