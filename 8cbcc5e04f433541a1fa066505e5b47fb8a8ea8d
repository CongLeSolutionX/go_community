{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "dfd2632f_6d1bef10",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-04-14T22:53:15Z",
      "side": 1,
      "message": "Superseded.",
      "parentUuid": "94aeeae9_1415e635",
      "tag": "autogenerated:trybots~beginning",
      "revId": "8cbcc5e04f433541a1fa066505e5b47fb8a8ea8d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5aca94c8_8288b002",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-04-14T22:53:15Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003d8cbcc5e0\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "8cbcc5e04f433541a1fa066505e5b47fb8a8ea8d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1016e1d8_526d4f5c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-04-14T22:54:21Z",
      "side": 1,
      "message": "Superseded.",
      "parentUuid": "5aca94c8_8288b002",
      "tag": "autogenerated:trybots~beginning",
      "revId": "8cbcc5e04f433541a1fa066505e5b47fb8a8ea8d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c8ba919c_4f2140a9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-04-14T22:54:21Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003d8cbcc5e0\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "8cbcc5e04f433541a1fa066505e5b47fb8a8ea8d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "241a619e_229c9bb6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-04-14T23:04:08Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "c8ba919c_4f2140a9",
      "tag": "autogenerated:trybots~happy",
      "revId": "8cbcc5e04f433541a1fa066505e5b47fb8a8ea8d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a9be97e5_880d4e1f",
        "filename": "src/runtime/tagptr_64bit.go",
        "patchSetId": 2
      },
      "lineNbr": 42,
      "author": {
        "id": 6365
      },
      "writtenOn": "2023-04-17T15:32:57Z",
      "side": 1,
      "message": "64 - 57 + 3 \u003d 10 bits, but the comment on `taggedPointer` claims “currently at least 11 bits”.\n\nPerhaps update the comment to be a constant and a static assertion?\n```\n// tagBits is guaranteed to be at least minTagBits, currently 10.\nconst minTagBigs \u003d 10\n\nvar _ [tagBits - minTagBits]byte  // compile-time error if tagBits \u003c minTagBits\n```",
      "revId": "8cbcc5e04f433541a1fa066505e5b47fb8a8ea8d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ff331870_84b9d281",
        "filename": "src/runtime/tagptr_64bit.go",
        "patchSetId": 2
      },
      "lineNbr": 42,
      "author": {
        "id": 5206
      },
      "writtenOn": "2023-04-18T00:22:18Z",
      "side": 1,
      "message": "Whoops, thanks.  Done.",
      "parentUuid": "a9be97e5_880d4e1f",
      "revId": "8cbcc5e04f433541a1fa066505e5b47fb8a8ea8d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d53fd3dd_97ace1b8",
        "filename": "src/runtime/tagptr_64bit.go",
        "patchSetId": 2
      },
      "lineNbr": 63,
      "author": {
        "id": 6365
      },
      "writtenOn": "2023-04-17T15:32:57Z",
      "side": 1,
      "message": "The previous code also had `GOARCH \u003d\u003d \"ppc64\"` here.\n\nPerhaps add something here that will either throw or fail to compile if a different `GOARCH` is used? (We may not currently support `aix` platforms other than `ppc64`, but we should set up to get a useful failure mode if support for some other `GOARCH` is added in the future.)",
      "revId": "8cbcc5e04f433541a1fa066505e5b47fb8a8ea8d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "854fc053_4e91303e",
        "filename": "src/runtime/tagptr_64bit.go",
        "patchSetId": 2
      },
      "lineNbr": 63,
      "author": {
        "id": 5206
      },
      "writtenOn": "2023-04-18T00:22:18Z",
      "side": 1,
      "message": "Added a throw.  Although, realistically, we are never going to support AIX on anything other than PPC64.  That\u0027s the only architecture it supports today, and the chances that it will be ported elsewhere are effectively zero.",
      "parentUuid": "d53fd3dd_97ace1b8",
      "revId": "8cbcc5e04f433541a1fa066505e5b47fb8a8ea8d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}