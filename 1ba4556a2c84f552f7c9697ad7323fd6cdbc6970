{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "4b4ce925_6bb5438a",
        "filename": "src/bytes/buffer.go",
        "patchSetId": 6
      },
      "lineNbr": 21,
      "author": {
        "id": 16006
      },
      "writtenOn": "2017-08-24T07:05:06Z",
      "side": 1,
      "message": "Note that now once bootsrap is not used anymore buffer now needs to occupy/load an additional cache line on most architectures (including x86) to access lastRead.\n\nI will benchmark and send a CL for discussion to either move it before bootstrap with padding or revert back to int and move lastRead before bootstrap.",
      "range": {
        "startLine": 21,
        "startChar": 1,
        "endLine": 21,
        "endChar": 17
      },
      "revId": "1ba4556a2c84f552f7c9697ad7323fd6cdbc6970",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4a89259e_cbef90ac",
        "filename": "src/bytes/buffer.go",
        "patchSetId": 6
      },
      "lineNbr": 21,
      "author": {
        "id": 6365
      },
      "writtenOn": "2017-08-24T14:48:41Z",
      "side": 1,
      "message": "Better still might be to move buf and off *after* lastRead, and perhaps extend (or reduce) the size of the bootstrap array to fill out to an alignment boundary. Then you can tweak the length of the bootstrap array to avoid wasting the alignment padding (https://play.golang.org/p/5n1693s3wG).",
      "parentUuid": "4b4ce925_6bb5438a",
      "range": {
        "startLine": 21,
        "startChar": 1,
        "endLine": 21,
        "endChar": 17
      },
      "revId": "1ba4556a2c84f552f7c9697ad7323fd6cdbc6970",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "100f35ba_88ac39d5",
        "filename": "src/bytes/buffer.go",
        "patchSetId": 6
      },
      "lineNbr": 21,
      "author": {
        "id": 16006
      },
      "writtenOn": "2017-08-24T15:11:48Z",
      "side": 1,
      "message": "b.buf is used often so there can be effects due to additional offset calculation. I observed this when experimenting with fmt buffers.\n\nAt least on quick benchmark run moving buf away from the start results in 4-6% slowdown for Write benchmarks on on my amd64 arch.",
      "parentUuid": "4a89259e_cbef90ac",
      "range": {
        "startLine": 21,
        "startChar": 1,
        "endLine": 21,
        "endChar": 17
      },
      "revId": "1ba4556a2c84f552f7c9697ad7323fd6cdbc6970",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "95391f49_2a893cb8",
        "filename": "src/bytes/buffer.go",
        "patchSetId": 6
      },
      "lineNbr": 21,
      "author": {
        "id": 5206
      },
      "writtenOn": "2024-09-06T00:04:06Z",
      "side": 1,
      "message": "This comment is obsolete, as the bootstrap array was removed in CL 133715.",
      "parentUuid": "100f35ba_88ac39d5",
      "range": {
        "startLine": 21,
        "startChar": 1,
        "endLine": 21,
        "endChar": 17
      },
      "revId": "1ba4556a2c84f552f7c9697ad7323fd6cdbc6970",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}