{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "997e953b_51387e71",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 20
      },
      "lineNbr": 0,
      "author": {
        "id": 5305
      },
      "writtenOn": "2024-10-04T20:49:03Z",
      "side": 1,
      "message": "Thanks for the thorough review, this is very useful.",
      "revId": "c0ef922ddb0b6cae38fe90068de9cd7c8bc6cb21",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3b082877_d8d0ce81",
        "filename": "src/internal/syscall/unix/asm_darwin.s",
        "patchSetId": 20
      },
      "lineNbr": 26,
      "author": {
        "id": 5206
      },
      "writtenOn": "2024-10-04T18:42:10Z",
      "side": 1,
      "message": "Can we move adding readlinkat and mkdirat to internal/syscall/unix into a separate CL?",
      "revId": "c0ef922ddb0b6cae38fe90068de9cd7c8bc6cb21",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f67b06e9_65668ad2",
        "filename": "src/internal/syscall/unix/asm_darwin.s",
        "patchSetId": 20
      },
      "lineNbr": 26,
      "author": {
        "id": 5305
      },
      "writtenOn": "2024-10-04T22:01:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3b082877_d8d0ce81",
      "revId": "c0ef922ddb0b6cae38fe90068de9cd7c8bc6cb21",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "99183d3e_5b2ef2da",
        "filename": "src/os/root.go",
        "patchSetId": 20
      },
      "lineNbr": 13,
      "author": {
        "id": 5206
      },
      "writtenOn": "2024-10-04T18:41:41Z",
      "side": 1,
      "message": "Perhaps\n\n// Root may be used to only access files within a single directory tree.",
      "revId": "c0ef922ddb0b6cae38fe90068de9cd7c8bc6cb21",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "39c0e879_7f952e2f",
        "filename": "src/os/root.go",
        "patchSetId": 20
      },
      "lineNbr": 13,
      "author": {
        "id": 5305
      },
      "writtenOn": "2024-10-04T22:01:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "99183d3e_5b2ef2da",
      "revId": "c0ef922ddb0b6cae38fe90068de9cd7c8bc6cb21",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cdc46b8e_cc6f909e",
        "filename": "src/os/root.go",
        "patchSetId": 20
      },
      "lineNbr": 27,
      "author": {
        "id": 5206
      },
      "writtenOn": "2024-10-04T18:41:41Z",
      "side": 1,
      "message": "Is this also true of the Close method?  Right now on plan9 Close sets the \"closed\" field, but that field is not atomic and is checked by other methods.  So concurrent calls to Root.Close and other Root methods seem likely to trigger reports from the race detector.  They are, of course, semantic races but they aren\u0027t data-corruption races.",
      "revId": "c0ef922ddb0b6cae38fe90068de9cd7c8bc6cb21",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "35c0348f_8143ee33",
        "filename": "src/os/root.go",
        "patchSetId": 20
      },
      "lineNbr": 27,
      "author": {
        "id": 5305
      },
      "writtenOn": "2024-10-04T22:01:17Z",
      "side": 1,
      "message": "Good point. Changed the \"closed\" field to be an atomic.Bool.\n\n(I think it\u0027s simplest if we keep the same concurrency rules as os.File.)",
      "parentUuid": "cdc46b8e_cc6f909e",
      "revId": "c0ef922ddb0b6cae38fe90068de9cd7c8bc6cb21",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b7dc1148_7759ac9e",
        "filename": "src/os/root.go",
        "patchSetId": 20
      },
      "lineNbr": 31,
      "author": {
        "id": 5206
      },
      "writtenOn": "2024-10-04T18:41:41Z",
      "side": 1,
      "message": "reference the original directory in its new location",
      "revId": "c0ef922ddb0b6cae38fe90068de9cd7c8bc6cb21",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "57659f23_25c995e9",
        "filename": "src/os/root.go",
        "patchSetId": 20
      },
      "lineNbr": 31,
      "author": {
        "id": 5305
      },
      "writtenOn": "2024-10-04T22:01:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b7dc1148_7759ac9e",
      "revId": "c0ef922ddb0b6cae38fe90068de9cd7c8bc6cb21",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "65864e52_4a218fea",
        "filename": "src/os/root.go",
        "patchSetId": 20
      },
      "lineNbr": 49,
      "author": {
        "id": 5206
      },
      "writtenOn": "2024-10-04T18:41:41Z",
      "side": 1,
      "message": "s/commonly/common/\n\n(Note that I believe that the default limit on Linux is 40, not 8.  https://github.com/torvalds/linux/blob/master/include/linux/namei.h#L13.  But 8 is fine with me.)",
      "revId": "c0ef922ddb0b6cae38fe90068de9cd7c8bc6cb21",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ea33e394_24cd4ec4",
        "filename": "src/os/root.go",
        "patchSetId": 20
      },
      "lineNbr": 49,
      "author": {
        "id": 5305
      },
      "writtenOn": "2024-10-04T22:01:17Z",
      "side": 1,
      "message": "Done.\n\nI think Linux actually allows more than MAXSYMLINKS these days. I think most non-Linux Unices still use 8, though.",
      "parentUuid": "65864e52_4a218fea",
      "revId": "c0ef922ddb0b6cae38fe90068de9cd7c8bc6cb21",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1c036732_5ae740d3",
        "filename": "src/os/root.go",
        "patchSetId": 20
      },
      "lineNbr": 103,
      "author": {
        "id": 5206
      },
      "writtenOn": "2024-10-04T18:41:41Z",
      "side": 1,
      "message": "s/OpenDir/OpenRoot/",
      "revId": "c0ef922ddb0b6cae38fe90068de9cd7c8bc6cb21",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "331693cf_cbf2f58e",
        "filename": "src/os/root.go",
        "patchSetId": 20
      },
      "lineNbr": 103,
      "author": {
        "id": 5305
      },
      "writtenOn": "2024-10-04T22:01:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1c036732_5ae740d3",
      "revId": "c0ef922ddb0b6cae38fe90068de9cd7c8bc6cb21",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "65db450a_3c56c474",
        "filename": "src/os/root_openat.go",
        "patchSetId": 20
      },
      "lineNbr": 71,
      "author": {
        "id": 5206
      },
      "writtenOn": "2024-10-04T18:41:41Z",
      "side": 1,
      "message": "s/step/element/ ? (twice)",
      "revId": "c0ef922ddb0b6cae38fe90068de9cd7c8bc6cb21",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "67a57834_0a227922",
        "filename": "src/os/root_openat.go",
        "patchSetId": 20
      },
      "lineNbr": 71,
      "author": {
        "id": 5305
      },
      "writtenOn": "2024-10-04T22:01:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "65db450a_3c56c474",
      "revId": "c0ef922ddb0b6cae38fe90068de9cd7c8bc6cb21",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "677e7521_a35dd927",
        "filename": "src/os/root_openat.go",
        "patchSetId": 20
      },
      "lineNbr": 74,
      "author": {
        "id": 5206
      },
      "writtenOn": "2024-10-04T18:41:41Z",
      "side": 1,
      "message": "This seems imprecise.  The rootMkdir function won\u0027t return errSymlink if path refers to a symlink, it will return EEXIST.",
      "revId": "c0ef922ddb0b6cae38fe90068de9cd7c8bc6cb21",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d556431b_0bfc63d8",
        "filename": "src/os/root_openat.go",
        "patchSetId": 20
      },
      "lineNbr": 74,
      "author": {
        "id": 5305
      },
      "writtenOn": "2024-10-04T22:01:17Z",
      "side": 1,
      "message": "Clarified.",
      "parentUuid": "677e7521_a35dd927",
      "revId": "c0ef922ddb0b6cae38fe90068de9cd7c8bc6cb21",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9337578a_3e34f68f",
        "filename": "src/os/root_openat.go",
        "patchSetId": 20
      },
      "lineNbr": 141,
      "author": {
        "id": 5206
      },
      "writtenOn": "2024-10-04T18:41:41Z",
      "side": 1,
      "message": "s/ELOOP/errSymlink/",
      "revId": "c0ef922ddb0b6cae38fe90068de9cd7c8bc6cb21",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7601f4e1_330a0e72",
        "filename": "src/os/root_openat.go",
        "patchSetId": 20
      },
      "lineNbr": 141,
      "author": {
        "id": 5305
      },
      "writtenOn": "2024-10-04T22:01:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9337578a_3e34f68f",
      "revId": "c0ef922ddb0b6cae38fe90068de9cd7c8bc6cb21",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ce7627c1_02f9c936",
        "filename": "src/os/root_openat.go",
        "patchSetId": 20
      },
      "lineNbr": 190,
      "author": {
        "id": 5206
      },
      "writtenOn": "2024-10-04T18:41:41Z",
      "side": 1,
      "message": "panic?",
      "revId": "c0ef922ddb0b6cae38fe90068de9cd7c8bc6cb21",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a3aa8e05_5cee6168",
        "filename": "src/os/root_openat.go",
        "patchSetId": 20
      },
      "lineNbr": 190,
      "author": {
        "id": 5305
      },
      "writtenOn": "2024-10-04T22:01:17Z",
      "side": 1,
      "message": "Done.\n\nI\u0027ll change it back if it proves to be annoying in debugging, where we might want to print out internal errors. Should be fine, though.",
      "parentUuid": "ce7627c1_02f9c936",
      "revId": "c0ef922ddb0b6cae38fe90068de9cd7c8bc6cb21",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "89ab94b5_a9c5fe8d",
        "filename": "src/os/root_test.go",
        "patchSetId": 20
      },
      "lineNbr": 1,
      "author": {
        "id": 5206
      },
      "writtenOn": "2024-10-04T18:41:41Z",
      "side": 1,
      "message": "Missing copyright notice.",
      "revId": "c0ef922ddb0b6cae38fe90068de9cd7c8bc6cb21",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1c8653e8_78032406",
        "filename": "src/os/root_test.go",
        "patchSetId": 20
      },
      "lineNbr": 1,
      "author": {
        "id": 5305
      },
      "writtenOn": "2024-10-04T22:01:17Z",
      "side": 1,
      "message": "Done.\n\nWe probably should have a test for that somewhere.",
      "parentUuid": "89ab94b5_a9c5fe8d",
      "revId": "c0ef922ddb0b6cae38fe90068de9cd7c8bc6cb21",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "21f9451c_82384c35",
        "filename": "src/os/root_unix.go",
        "patchSetId": 20
      },
      "lineNbr": 18,
      "author": {
        "id": 5206
      },
      "writtenOn": "2024-10-04T18:41:41Z",
      "side": 1,
      "message": "Missing doc comment.",
      "revId": "c0ef922ddb0b6cae38fe90068de9cd7c8bc6cb21",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "020ff778_ec3f2d30",
        "filename": "src/os/root_unix.go",
        "patchSetId": 20
      },
      "lineNbr": 18,
      "author": {
        "id": 5305
      },
      "writtenOn": "2024-10-04T22:01:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "21f9451c_82384c35",
      "revId": "c0ef922ddb0b6cae38fe90068de9cd7c8bc6cb21",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a7f57ab7_7df1ef90",
        "filename": "src/os/root_unix.go",
        "patchSetId": 20
      },
      "lineNbr": 31,
      "author": {
        "id": 5206
      },
      "writtenOn": "2024-10-04T18:41:41Z",
      "side": 1,
      "message": "Missing doc comment.",
      "revId": "c0ef922ddb0b6cae38fe90068de9cd7c8bc6cb21",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ecacfdbe_143860c2",
        "filename": "src/os/root_unix.go",
        "patchSetId": 20
      },
      "lineNbr": 31,
      "author": {
        "id": 5305
      },
      "writtenOn": "2024-10-04T22:01:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a7f57ab7_7df1ef90",
      "revId": "c0ef922ddb0b6cae38fe90068de9cd7c8bc6cb21",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b2dbbfe3_e03acf4c",
        "filename": "src/os/root_windows.go",
        "patchSetId": 20
      },
      "lineNbr": 86,
      "author": {
        "id": 34993
      },
      "writtenOn": "2024-10-04T07:39:02Z",
      "side": 1,
      "message": "If you use the following suggestion and also pass `windows.FILE_DIRECTORY_FILE` in `rootOpenDir`, then you can avoid calling `statHandle` (which is quite bloated) in `newRoot`.\n\n```suggestion\n\tfd, err :\u003d openat(syscall.InvalidHandle, path, syscall.O_RDONLY|syscall.O_CLOEXEC, windows.FILE_DIRECTORY_FILE, 0)\n```",
      "revId": "c0ef922ddb0b6cae38fe90068de9cd7c8bc6cb21",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1c3fcec5_eae975b4",
        "filename": "src/os/root_windows.go",
        "patchSetId": 20
      },
      "lineNbr": 86,
      "author": {
        "id": 5305
      },
      "writtenOn": "2024-10-04T20:49:03Z",
      "side": 1,
      "message": "Dropped statHandle, just using syscall.GetFileInformationByHandle now.\n\nCommenting on FILE_DIRECTORY_FILE below.",
      "parentUuid": "b2dbbfe3_e03acf4c",
      "revId": "c0ef922ddb0b6cae38fe90068de9cd7c8bc6cb21",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "92003f57_b2ee63ad",
        "filename": "src/os/root_windows.go",
        "patchSetId": 20
      },
      "lineNbr": 127,
      "author": {
        "id": 34993
      },
      "writtenOn": "2024-10-04T20:16:25Z",
      "side": 1,
      "message": "`openat` could live in `internal\\syscall\\windows`, in the same way `Open` is implemented in `syscall`. This way future refactors won\u0027t \"pollute\" this pure syscall function eith `os` specific code.",
      "revId": "c0ef922ddb0b6cae38fe90068de9cd7c8bc6cb21",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3a54a817_4881b602",
        "filename": "src/os/root_windows.go",
        "patchSetId": 20
      },
      "lineNbr": 148,
      "author": {
        "id": 34993
      },
      "writtenOn": "2024-10-04T07:39:02Z",
      "side": 1,
      "message": "Is this just necessary to call `statHandle` in `newRoot`? Because if that\u0027s the case, then it can be removed if the previous suggestions of using `windows.FILE_DIRECTORY_FILE` are implemented.",
      "revId": "c0ef922ddb0b6cae38fe90068de9cd7c8bc6cb21",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "be681594_3b1249bc",
        "filename": "src/os/root_windows.go",
        "patchSetId": 20
      },
      "lineNbr": 148,
      "author": {
        "id": 5305
      },
      "writtenOn": "2024-10-04T20:49:03Z",
      "side": 1,
      "message": "This is also so File.Stat works on any files we return.",
      "parentUuid": "3a54a817_4881b602",
      "revId": "c0ef922ddb0b6cae38fe90068de9cd7c8bc6cb21",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "514a199c_6169bfd6",
        "filename": "src/os/root_windows.go",
        "patchSetId": 20
      },
      "lineNbr": 151,
      "author": {
        "id": 34993
      },
      "writtenOn": "2024-10-04T07:39:02Z",
      "side": 1,
      "message": "```suggestion\n\t// because it\u0027s the same bit as FILE_GENERIC_READ.\n```",
      "revId": "c0ef922ddb0b6cae38fe90068de9cd7c8bc6cb21",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2c4de711_d234af8a",
        "filename": "src/os/root_windows.go",
        "patchSetId": 20
      },
      "lineNbr": 151,
      "author": {
        "id": 5305
      },
      "writtenOn": "2024-10-04T20:49:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "514a199c_6169bfd6",
      "revId": "c0ef922ddb0b6cae38fe90068de9cd7c8bc6cb21",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8f27cad7_2888af1f",
        "filename": "src/os/root_windows.go",
        "patchSetId": 20
      },
      "lineNbr": 151,
      "author": {
        "id": 5305
      },
      "writtenOn": "2024-10-04T20:49:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "514a199c_6169bfd6",
      "revId": "c0ef922ddb0b6cae38fe90068de9cd7c8bc6cb21",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3e9bb89e_60e297fb",
        "filename": "src/os/root_windows.go",
        "patchSetId": 20
      },
      "lineNbr": 219,
      "author": {
        "id": 34993
      },
      "writtenOn": "2024-10-04T07:39:02Z",
      "side": 1,
      "message": "We should allow reparse points that are not a [surrogate for another entity](https://learn.microsoft.com/en-us/windows/win32/api/winnt/nf-winnt-isreparsetagnamesurrogate) (aka are not a link), for example `IO_REPARSE_TAG_DEDUP`. See `fileStat.isReparseTagNameSurrogate` to know how to detect them. Maybe that function should be generalized a bit so it can be reused here.",
      "revId": "c0ef922ddb0b6cae38fe90068de9cd7c8bc6cb21",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cf7f5a5a_fd8e44b4",
        "filename": "src/os/root_windows.go",
        "patchSetId": 20
      },
      "lineNbr": 219,
      "author": {
        "id": 34993
      },
      "writtenOn": "2024-10-04T07:58:25Z",
      "side": 1,
      "message": "Another alternative is to set [OBJ_DONT_REPARSE](https://learn.microsoft.com/en-us/windows/win32/api/ntdef/ns-ntdef-_object_attributes) in `objAttrs.Attributes`. Looks like this attribute would fit us well:\n\n\u003e OBJ_DONT_REPARSE: If this flag is set, no reparse points will be followed when parsing the name of the associated object. If any reparses are encountered the attempt will fail and return an STATUS_REPARSE_POINT_ENCOUNTERED result. This can be used to determine if there are any reparse points in the object\u0027s path, in security scenarios.",
      "parentUuid": "3e9bb89e_60e297fb",
      "revId": "c0ef922ddb0b6cae38fe90068de9cd7c8bc6cb21",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9388317f_c49ebb2a",
        "filename": "src/os/root_windows.go",
        "patchSetId": 20
      },
      "lineNbr": 219,
      "author": {
        "id": 5305
      },
      "writtenOn": "2024-10-04T20:49:03Z",
      "side": 1,
      "message": "If we set OBJ_DONT_REPARSE, will that prevent traversing mount points?\n\nI suppose we can do a multi-phase process:\n- Open with OBJ_DONT_REPARSE for the common case.\n- If this fails with STATUS_REPARSE_POINT_ENCOUNTERED, open with FILE_OPEN_REPARSE_POINT and examine the file attributes to find the type of reparse point.\n- If this is a non-surrogate mount point...I\u0027m not sure what we do here. Return the handle obtained with FILE_OPEN_REPARSE_POINT? Open it again without OBJ_DONT_REPARSE or FILE_OPEN_REPARSE_POINT? (If we open it again, we need to be careful about TOCTOU races.)\n\nIt\u0027d be nice to have a test which exercises the desired behavior here. Is there any way we can create a temporary non-surrogate reparse point in tests? Or are there any standard examples of non-surrogate reparse points that are likely to exist on the builder machines?",
      "parentUuid": "cf7f5a5a_fd8e44b4",
      "revId": "c0ef922ddb0b6cae38fe90068de9cd7c8bc6cb21",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "864bd925_1e308649",
        "filename": "src/os/root_windows.go",
        "patchSetId": 20
      },
      "lineNbr": 219,
      "author": {
        "id": 34993
      },
      "writtenOn": "2024-10-07T07:48:05Z",
      "side": 1,
      "message": "\u003e If we set OBJ_DONT_REPARSE, will that prevent traversing mount points?\n\nYes, it will return `STATUS_REPARSE_POINT_ENCOUNTERED` if any surrogate reparse point is found, like mount points and symlinks. Note that it will not complain if there is a non-surrogate reparse point in the path.\n\n\u003e I suppose we can do a multi-phase process:\n\nWe can avoid the multi-phase process if we pass `OBJ_DONT_REPARSE` and `FILE_OPEN_REPARSE_POINT`. Both flags are compatible, in fact we want to do this, else we won\u0027t be able to open non-surrogate reparse points. Then your third bullet will never happen.\n\nA nice side effect of this approach is that we can pass `FILE_OVERWRITE` directly to `NtCreateFile` instead of calling `Ftruncate` later, as we will never open a symlink.\n\n\u003e Is there any way we can create a temporary non-surrogate reparse point in tests? \n\nYou can create a Unix Domain Socket file:\n\n```\nfunc TestNonSurrogateReparsePoint(t *testing.T) {\n\tdir :\u003d t.TempDir()\n\taddr :\u003d filepath.Join(dir, \"sock\")\n\tl, err :\u003d net.Listen(\"unix\", addr)\n\tif err !\u003d nil {\n\t\tt.Fatal(err)\n\t}\n\tdefer l.Close()\n\n\tr, err :\u003d os.OpenRoot(dir)\n\tif err !\u003d nil {\n\t\tt.Fatal(err)\n\t}\n\tdefer r.Close()\n\tf, err :\u003d r.Open(\"sock\")\n\tif err !\u003d nil {\n\t\tt.Fatal(err)\n\t}\n\tf.Close()\n}\n```\n\n\u003e Or are there any standard examples of non-surrogate reparse points that are likely to exist on the builder machines?\n\nNot that I know.",
      "parentUuid": "9388317f_c49ebb2a",
      "revId": "c0ef922ddb0b6cae38fe90068de9cd7c8bc6cb21",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "30fcfa3e_7e036ed1",
        "filename": "src/os/root_windows.go",
        "patchSetId": 20
      },
      "lineNbr": 219,
      "author": {
        "id": 34993
      },
      "writtenOn": "2024-10-07T07:49:57Z",
      "side": 1,
      "message": "Clarification: a Unix Domain socket file is a non-surrogate reparse point with the tah `IO_REPARSE_TAG_AF_UNIX`.",
      "parentUuid": "864bd925_1e308649",
      "revId": "c0ef922ddb0b6cae38fe90068de9cd7c8bc6cb21",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5d9a548b_b8429a99",
        "filename": "src/os/root_windows.go",
        "patchSetId": 20
      },
      "lineNbr": 220,
      "author": {
        "id": 34993
      },
      "writtenOn": "2024-10-04T07:39:02Z",
      "side": 1,
      "message": "`readReparseLinkHandle` supports mount moints and symlinks, and we don\u0027t want to return `errSymlink` for a mount point.",
      "revId": "c0ef922ddb0b6cae38fe90068de9cd7c8bc6cb21",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "217dfc68_70f3d28f",
        "filename": "src/os/root_windows.go",
        "patchSetId": 20
      },
      "lineNbr": 220,
      "author": {
        "id": 5305
      },
      "writtenOn": "2024-10-04T20:49:03Z",
      "side": 1,
      "message": "What do we want to do for a mount point? Traverse them, or treat them as escaping the root. Traversing seems most consistent with the Unix behavior (which completely ignores filesystem mounts). It looks like os.Lstat treats mount points like symlinks, though. For consistency with Lstat, should we treat mount points as escaping?",
      "parentUuid": "5d9a548b_b8429a99",
      "revId": "c0ef922ddb0b6cae38fe90068de9cd7c8bc6cb21",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3e78463a_8c6d5af1",
        "filename": "src/os/root_windows.go",
        "patchSetId": 20
      },
      "lineNbr": 220,
      "author": {
        "id": 34993
      },
      "writtenOn": "2024-10-07T07:48:05Z",
      "side": 1,
      "message": "\u003e For consistency with Lstat, should we treat mount points as escaping?\n\nYep, I think we should.",
      "parentUuid": "217dfc68_70f3d28f",
      "revId": "c0ef922ddb0b6cae38fe90068de9cd7c8bc6cb21",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7d0355ea_ee2cab0b",
        "filename": "src/os/root_windows.go",
        "patchSetId": 20
      },
      "lineNbr": 246,
      "author": {
        "id": 34993
      },
      "writtenOn": "2024-10-04T07:39:02Z",
      "side": 1,
      "message": "I think it would make sense to pass \u0027windows.FILE_DIRECTORY_FILE\u0027 in options, we just want to open a directory here, no?",
      "revId": "c0ef922ddb0b6cae38fe90068de9cd7c8bc6cb21",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4d321f2b_0141683b",
        "filename": "src/os/root_windows.go",
        "patchSetId": 20
      },
      "lineNbr": 246,
      "author": {
        "id": 5305
      },
      "writtenOn": "2024-10-04T20:49:03Z",
      "side": 1,
      "message": "We can\u0027t pass both FILE_DIRECTORY_FILE and FILE_OPEN_REPARSE_POINT.\n\nLet\u0027s first figure out the above questions about whether we should use OBJ_DONT_REPARSE or FILE_OPEN_REPARSE_POINT and then revisit this.",
      "parentUuid": "7d0355ea_ee2cab0b",
      "revId": "c0ef922ddb0b6cae38fe90068de9cd7c8bc6cb21",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}