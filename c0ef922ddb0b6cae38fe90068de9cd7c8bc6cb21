{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "3b082877_d8d0ce81",
        "filename": "src/internal/syscall/unix/asm_darwin.s",
        "patchSetId": 20
      },
      "lineNbr": 26,
      "author": {
        "id": 5206
      },
      "writtenOn": "2024-10-04T18:42:10Z",
      "side": 1,
      "message": "Can we move adding readlinkat and mkdirat to internal/syscall/unix into a separate CL?",
      "revId": "c0ef922ddb0b6cae38fe90068de9cd7c8bc6cb21",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "99183d3e_5b2ef2da",
        "filename": "src/os/root.go",
        "patchSetId": 20
      },
      "lineNbr": 13,
      "author": {
        "id": 5206
      },
      "writtenOn": "2024-10-04T18:41:41Z",
      "side": 1,
      "message": "Perhaps\n\n// Root may be used to only access files within a single directory tree.",
      "revId": "c0ef922ddb0b6cae38fe90068de9cd7c8bc6cb21",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cdc46b8e_cc6f909e",
        "filename": "src/os/root.go",
        "patchSetId": 20
      },
      "lineNbr": 27,
      "author": {
        "id": 5206
      },
      "writtenOn": "2024-10-04T18:41:41Z",
      "side": 1,
      "message": "Is this also true of the Close method?  Right now on plan9 Close sets the \"closed\" field, but that field is not atomic and is checked by other methods.  So concurrent calls to Root.Close and other Root methods seem likely to trigger reports from the race detector.  They are, of course, semantic races but they aren\u0027t data-corruption races.",
      "revId": "c0ef922ddb0b6cae38fe90068de9cd7c8bc6cb21",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b7dc1148_7759ac9e",
        "filename": "src/os/root.go",
        "patchSetId": 20
      },
      "lineNbr": 31,
      "author": {
        "id": 5206
      },
      "writtenOn": "2024-10-04T18:41:41Z",
      "side": 1,
      "message": "reference the original directory in its new location",
      "revId": "c0ef922ddb0b6cae38fe90068de9cd7c8bc6cb21",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "65864e52_4a218fea",
        "filename": "src/os/root.go",
        "patchSetId": 20
      },
      "lineNbr": 49,
      "author": {
        "id": 5206
      },
      "writtenOn": "2024-10-04T18:41:41Z",
      "side": 1,
      "message": "s/commonly/common/\n\n(Note that I believe that the default limit on Linux is 40, not 8.  https://github.com/torvalds/linux/blob/master/include/linux/namei.h#L13.  But 8 is fine with me.)",
      "revId": "c0ef922ddb0b6cae38fe90068de9cd7c8bc6cb21",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1c036732_5ae740d3",
        "filename": "src/os/root.go",
        "patchSetId": 20
      },
      "lineNbr": 103,
      "author": {
        "id": 5206
      },
      "writtenOn": "2024-10-04T18:41:41Z",
      "side": 1,
      "message": "s/OpenDir/OpenRoot/",
      "revId": "c0ef922ddb0b6cae38fe90068de9cd7c8bc6cb21",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "65db450a_3c56c474",
        "filename": "src/os/root_openat.go",
        "patchSetId": 20
      },
      "lineNbr": 71,
      "author": {
        "id": 5206
      },
      "writtenOn": "2024-10-04T18:41:41Z",
      "side": 1,
      "message": "s/step/element/ ? (twice)",
      "revId": "c0ef922ddb0b6cae38fe90068de9cd7c8bc6cb21",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "677e7521_a35dd927",
        "filename": "src/os/root_openat.go",
        "patchSetId": 20
      },
      "lineNbr": 74,
      "author": {
        "id": 5206
      },
      "writtenOn": "2024-10-04T18:41:41Z",
      "side": 1,
      "message": "This seems imprecise.  The rootMkdir function won\u0027t return errSymlink if path refers to a symlink, it will return EEXIST.",
      "revId": "c0ef922ddb0b6cae38fe90068de9cd7c8bc6cb21",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9337578a_3e34f68f",
        "filename": "src/os/root_openat.go",
        "patchSetId": 20
      },
      "lineNbr": 141,
      "author": {
        "id": 5206
      },
      "writtenOn": "2024-10-04T18:41:41Z",
      "side": 1,
      "message": "s/ELOOP/errSymlink/",
      "revId": "c0ef922ddb0b6cae38fe90068de9cd7c8bc6cb21",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ce7627c1_02f9c936",
        "filename": "src/os/root_openat.go",
        "patchSetId": 20
      },
      "lineNbr": 190,
      "author": {
        "id": 5206
      },
      "writtenOn": "2024-10-04T18:41:41Z",
      "side": 1,
      "message": "panic?",
      "revId": "c0ef922ddb0b6cae38fe90068de9cd7c8bc6cb21",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "89ab94b5_a9c5fe8d",
        "filename": "src/os/root_test.go",
        "patchSetId": 20
      },
      "lineNbr": 1,
      "author": {
        "id": 5206
      },
      "writtenOn": "2024-10-04T18:41:41Z",
      "side": 1,
      "message": "Missing copyright notice.",
      "revId": "c0ef922ddb0b6cae38fe90068de9cd7c8bc6cb21",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "21f9451c_82384c35",
        "filename": "src/os/root_unix.go",
        "patchSetId": 20
      },
      "lineNbr": 18,
      "author": {
        "id": 5206
      },
      "writtenOn": "2024-10-04T18:41:41Z",
      "side": 1,
      "message": "Missing doc comment.",
      "revId": "c0ef922ddb0b6cae38fe90068de9cd7c8bc6cb21",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a7f57ab7_7df1ef90",
        "filename": "src/os/root_unix.go",
        "patchSetId": 20
      },
      "lineNbr": 31,
      "author": {
        "id": 5206
      },
      "writtenOn": "2024-10-04T18:41:41Z",
      "side": 1,
      "message": "Missing doc comment.",
      "revId": "c0ef922ddb0b6cae38fe90068de9cd7c8bc6cb21",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b2dbbfe3_e03acf4c",
        "filename": "src/os/root_windows.go",
        "patchSetId": 20
      },
      "lineNbr": 86,
      "author": {
        "id": 34993
      },
      "writtenOn": "2024-10-04T07:39:02Z",
      "side": 1,
      "message": "If you use the following suggestion and also pass `windows.FILE_DIRECTORY_FILE` in `rootOpenDir`, then you can avoid calling `statHandle` (which is quite bloated) in `newRoot`.\n\n```suggestion\n\tfd, err :\u003d openat(syscall.InvalidHandle, path, syscall.O_RDONLY|syscall.O_CLOEXEC, windows.FILE_DIRECTORY_FILE, 0)\n```",
      "revId": "c0ef922ddb0b6cae38fe90068de9cd7c8bc6cb21",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3a54a817_4881b602",
        "filename": "src/os/root_windows.go",
        "patchSetId": 20
      },
      "lineNbr": 148,
      "author": {
        "id": 34993
      },
      "writtenOn": "2024-10-04T07:39:02Z",
      "side": 1,
      "message": "Is this just necessary to call `statHandle` in `newRoot`? Because if that\u0027s the case, then it can be removed if the previous suggestions of using `windows.FILE_DIRECTORY_FILE` are implemented.",
      "revId": "c0ef922ddb0b6cae38fe90068de9cd7c8bc6cb21",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "514a199c_6169bfd6",
        "filename": "src/os/root_windows.go",
        "patchSetId": 20
      },
      "lineNbr": 151,
      "author": {
        "id": 34993
      },
      "writtenOn": "2024-10-04T07:39:02Z",
      "side": 1,
      "message": "```suggestion\n\t// because it\u0027s the same bit as FILE_GENERIC_READ.\n```",
      "revId": "c0ef922ddb0b6cae38fe90068de9cd7c8bc6cb21",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3e9bb89e_60e297fb",
        "filename": "src/os/root_windows.go",
        "patchSetId": 20
      },
      "lineNbr": 219,
      "author": {
        "id": 34993
      },
      "writtenOn": "2024-10-04T07:39:02Z",
      "side": 1,
      "message": "We should allow reparse points that are not a [surrogate for another entity](https://learn.microsoft.com/en-us/windows/win32/api/winnt/nf-winnt-isreparsetagnamesurrogate) (aka are not a link), for example `IO_REPARSE_TAG_DEDUP`. See `fileStat.isReparseTagNameSurrogate` to know how to detect them. Maybe that function should be generalized a bit so it can be reused here.",
      "revId": "c0ef922ddb0b6cae38fe90068de9cd7c8bc6cb21",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cf7f5a5a_fd8e44b4",
        "filename": "src/os/root_windows.go",
        "patchSetId": 20
      },
      "lineNbr": 219,
      "author": {
        "id": 34993
      },
      "writtenOn": "2024-10-04T07:58:25Z",
      "side": 1,
      "message": "Another alternative is to set [OBJ_DONT_REPARSE](https://learn.microsoft.com/en-us/windows/win32/api/ntdef/ns-ntdef-_object_attributes) in `objAttrs.Attributes`. Looks like this attribute would fit us well:\n\n\u003e OBJ_DONT_REPARSE: If this flag is set, no reparse points will be followed when parsing the name of the associated object. If any reparses are encountered the attempt will fail and return an STATUS_REPARSE_POINT_ENCOUNTERED result. This can be used to determine if there are any reparse points in the object\u0027s path, in security scenarios.",
      "parentUuid": "3e9bb89e_60e297fb",
      "revId": "c0ef922ddb0b6cae38fe90068de9cd7c8bc6cb21",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5d9a548b_b8429a99",
        "filename": "src/os/root_windows.go",
        "patchSetId": 20
      },
      "lineNbr": 220,
      "author": {
        "id": 34993
      },
      "writtenOn": "2024-10-04T07:39:02Z",
      "side": 1,
      "message": "`readReparseLinkHandle` supports mount moints and symlinks, and we don\u0027t want to return `errSymlink` for a mount point.",
      "revId": "c0ef922ddb0b6cae38fe90068de9cd7c8bc6cb21",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7d0355ea_ee2cab0b",
        "filename": "src/os/root_windows.go",
        "patchSetId": 20
      },
      "lineNbr": 246,
      "author": {
        "id": 34993
      },
      "writtenOn": "2024-10-04T07:39:02Z",
      "side": 1,
      "message": "I think it would make sense to pass \u0027windows.FILE_DIRECTORY_FILE\u0027 in options, we just want to open a directory here, no?",
      "revId": "c0ef922ddb0b6cae38fe90068de9cd7c8bc6cb21",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}