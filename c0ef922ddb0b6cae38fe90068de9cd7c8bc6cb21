{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "b2dbbfe3_e03acf4c",
        "filename": "src/os/root_windows.go",
        "patchSetId": 20
      },
      "lineNbr": 86,
      "author": {
        "id": 34993
      },
      "writtenOn": "2024-10-04T07:39:02Z",
      "side": 1,
      "message": "If you use the following suggestion and also pass `windows.FILE_DIRECTORY_FILE` in `rootOpenDir`, then you can avoid calling `statHandle` (which is quite bloated) in `newRoot`.\n\n```suggestion\n\tfd, err :\u003d openat(syscall.InvalidHandle, path, syscall.O_RDONLY|syscall.O_CLOEXEC, windows.FILE_DIRECTORY_FILE, 0)\n```",
      "revId": "c0ef922ddb0b6cae38fe90068de9cd7c8bc6cb21",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3a54a817_4881b602",
        "filename": "src/os/root_windows.go",
        "patchSetId": 20
      },
      "lineNbr": 148,
      "author": {
        "id": 34993
      },
      "writtenOn": "2024-10-04T07:39:02Z",
      "side": 1,
      "message": "Is this just necessary to call `statHandle` in `newRoot`? Because if that\u0027s the case, then it can be removed if the previous suggestions of using `windows.FILE_DIRECTORY_FILE` are implemented.",
      "revId": "c0ef922ddb0b6cae38fe90068de9cd7c8bc6cb21",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "514a199c_6169bfd6",
        "filename": "src/os/root_windows.go",
        "patchSetId": 20
      },
      "lineNbr": 151,
      "author": {
        "id": 34993
      },
      "writtenOn": "2024-10-04T07:39:02Z",
      "side": 1,
      "message": "```suggestion\n\t// because it\u0027s the same bit as FILE_GENERIC_READ.\n```",
      "revId": "c0ef922ddb0b6cae38fe90068de9cd7c8bc6cb21",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3e9bb89e_60e297fb",
        "filename": "src/os/root_windows.go",
        "patchSetId": 20
      },
      "lineNbr": 219,
      "author": {
        "id": 34993
      },
      "writtenOn": "2024-10-04T07:39:02Z",
      "side": 1,
      "message": "We should allow reparse points that are not a [surrogate for another entity](https://learn.microsoft.com/en-us/windows/win32/api/winnt/nf-winnt-isreparsetagnamesurrogate) (aka are not a link), for example `IO_REPARSE_TAG_DEDUP`. See `fileStat.isReparseTagNameSurrogate` to know how to detect them. Maybe that function should be generalized a bit so it can be reused here.",
      "revId": "c0ef922ddb0b6cae38fe90068de9cd7c8bc6cb21",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5d9a548b_b8429a99",
        "filename": "src/os/root_windows.go",
        "patchSetId": 20
      },
      "lineNbr": 220,
      "author": {
        "id": 34993
      },
      "writtenOn": "2024-10-04T07:39:02Z",
      "side": 1,
      "message": "`readReparseLinkHandle` supports mount moints and symlinks, and we don\u0027t want to return `errSymlink` for a mount point.",
      "revId": "c0ef922ddb0b6cae38fe90068de9cd7c8bc6cb21",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7d0355ea_ee2cab0b",
        "filename": "src/os/root_windows.go",
        "patchSetId": 20
      },
      "lineNbr": 246,
      "author": {
        "id": 34993
      },
      "writtenOn": "2024-10-04T07:39:02Z",
      "side": 1,
      "message": "I think it would make sense to pass \u0027windows.FILE_DIRECTORY_FILE\u0027 in options, we just want to open a directory here, no?",
      "revId": "c0ef922ddb0b6cae38fe90068de9cd7c8bc6cb21",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}