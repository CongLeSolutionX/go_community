{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "9f7bdf6f_6a5500e5",
        "filename": "src/cmd/dist/test.go",
        "patchSetId": 5
      },
      "lineNbr": 1285,
      "author": {
        "id": 5200
      },
      "writtenOn": "2024-03-13T15:48:55Z",
      "side": 1,
      "message": "I don\u0027t see why these channels need buffering. Only one thing is ever going to be sent to them.",
      "revId": "ecdffe1031022dc6f7f389dfedefee5ab3f9b8fb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "82f22185_d7b8e4d9",
        "filename": "src/cmd/dist/test.go",
        "patchSetId": 5
      },
      "lineNbr": 1285,
      "author": {
        "id": 64033
      },
      "writtenOn": "2024-03-14T13:30:00Z",
      "side": 1,
      "message": "Because I\u0027ve found that if don\u0027t, when run tests, there\u0027s actually no added parallelism, and the task manager still sees the runtime testing and not have other packages testing.",
      "parentUuid": "9f7bdf6f_6a5500e5",
      "revId": "ecdffe1031022dc6f7f389dfedefee5ab3f9b8fb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "90cf9ebc_c3bbf730",
        "filename": "src/cmd/dist/test.go",
        "patchSetId": 5
      },
      "lineNbr": 1285,
      "author": {
        "id": 5200
      },
      "writtenOn": "2024-03-15T17:09:18Z",
      "side": 1,
      "message": "I\u0027m afraid that the argument \"I made a random change and it magically fixed something\" is not a good enough reason to accept a change. We need to understand why it is necessary before we check it in.\nParticularly, if it is subtle, like this probably is, we need a comment explaining why it is the way it is so that the next person to modify this code doesn\u0027t undo it accidentally.",
      "parentUuid": "82f22185_d7b8e4d9",
      "revId": "ecdffe1031022dc6f7f389dfedefee5ab3f9b8fb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "62f794db_9bc4116d",
        "filename": "src/cmd/dist/test.go",
        "patchSetId": 5
      },
      "lineNbr": 1285,
      "author": {
        "id": 64033
      },
      "writtenOn": "2024-03-16T03:44:29Z",
      "side": 1,
      "message": "After changing the test order, this is no longer necessary.",
      "parentUuid": "90cf9ebc_c3bbf730",
      "revId": "ecdffe1031022dc6f7f389dfedefee5ab3f9b8fb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bbbfae4e_385545d5",
        "filename": "src/cmd/dist/test.go",
        "patchSetId": 5
      },
      "lineNbr": 1285,
      "author": {
        "id": 64033
      },
      "writtenOn": "2024-03-16T03:44:29Z",
      "side": 1,
      "message": "This is probably the result of strat and end chan send order dependencies, I\u0027ll add comments later.",
      "parentUuid": "90cf9ebc_c3bbf730",
      "revId": "ecdffe1031022dc6f7f389dfedefee5ab3f9b8fb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9c2e7130_3a16da25",
        "filename": "src/cmd/dist/test.go",
        "patchSetId": 5
      },
      "lineNbr": 1285,
      "author": {
        "id": 64033
      },
      "writtenOn": "2024-03-16T04:31:07Z",
      "side": 1,
      "message": "Accidentally sent an outdated draft resulting in an error marked as unresolved, sorry.",
      "parentUuid": "bbbfae4e_385545d5",
      "revId": "ecdffe1031022dc6f7f389dfedefee5ab3f9b8fb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c8ef87dd_94a2f1b9",
        "filename": "src/cmd/dist/test.go",
        "patchSetId": 5
      },
      "lineNbr": 1326,
      "author": {
        "id": 5200
      },
      "writtenOn": "2024-03-13T15:48:55Z",
      "side": 1,
      "message": "I don\u0027t think we should be modifying the global maxbg. It has already been read in util.go and setting it to a different value will not affect the number of goroutines in that work pool.\n\nSetting it here only affects the loop below, so you should probably read maxbg above this loop into a local, and use/modify that local subsequently.",
      "revId": "ecdffe1031022dc6f7f389dfedefee5ab3f9b8fb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dfd9f9fd_c384bc8b",
        "filename": "src/cmd/dist/test.go",
        "patchSetId": 5
      },
      "lineNbr": 1326,
      "author": {
        "id": 5200
      },
      "writtenOn": "2024-03-13T15:48:55Z",
      "side": 1,
      "message": "I still don\u0027t understand why numcpu*2.\nI mean, I understand that you see that it makes your all.bash faster.\nI just don\u0027t understand why. This setting kind of implies that the tasks in the worklist only take 1/2 a CPU (each, on average). Is that really true?",
      "revId": "ecdffe1031022dc6f7f389dfedefee5ab3f9b8fb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4d9217a5_60bb9974",
        "filename": "src/cmd/dist/test.go",
        "patchSetId": 5
      },
      "lineNbr": 1326,
      "author": {
        "id": 64033
      },
      "writtenOn": "2024-03-14T13:30:00Z",
      "side": 1,
      "message": "See https://go-review.googlesource.com/c/go/+/563916/4..5/src/cmd/dist/test.go#b1315\nmany tests are completed in seconds, So before long, there were only six test processes of four packages(runtime,runtime/race,cmd/internal/testdir,cmd/api) consuming CPU.\nAlso, runtime and runtime/race finish faster than the remaining two packages, and then only two packages occupy the CPU.",
      "parentUuid": "dfd9f9fd_c384bc8b",
      "revId": "ecdffe1031022dc6f7f389dfedefee5ab3f9b8fb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9eba0215_ff419280",
        "filename": "src/cmd/dist/test.go",
        "patchSetId": 5
      },
      "lineNbr": 1326,
      "author": {
        "id": 64033
      },
      "writtenOn": "2024-03-14T13:30:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c8ef87dd_94a2f1b9",
      "revId": "ecdffe1031022dc6f7f389dfedefee5ab3f9b8fb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f92c8586_29efbaa2",
        "filename": "src/cmd/dist/test.go",
        "patchSetId": 5
      },
      "lineNbr": 1326,
      "author": {
        "id": 5200
      },
      "writtenOn": "2024-03-15T17:09:18Z",
      "side": 1,
      "message": "Again, I think we need more understanding here beyond \"I made a random change and it helped\". Here, I think you\u0027re actually making some progress on that front.\n\nSo there are a few really long tests that form the long tail of this execution.\n\nWhat would happen if we sorted the worklist to just put those four packages first? That way they would all start immediately so we wouldn\u0027t be in a situation where we started them late and they are the last ones we\u0027re waiting for.\n\nI suspect that making maxbg larger just happens to get those tests started earlier. But it also introduces a lot of other tests running simultaneously, which will slow them down due to sharing the CPU. If we get them started right away and give them full access to the CPU, it might be even better. Additional tasks will only be scheduled when those first heavy ones start completing.",
      "parentUuid": "4d9217a5_60bb9974",
      "revId": "ecdffe1031022dc6f7f389dfedefee5ab3f9b8fb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7b8b9975_f181c585",
        "filename": "src/cmd/dist/test.go",
        "patchSetId": 5
      },
      "lineNbr": 1326,
      "author": {
        "id": 64033
      },
      "writtenOn": "2024-03-16T03:44:29Z",
      "side": 1,
      "message": "As I wrote in the submission information:\nThis CL speeds up the go tool dist test,\nmost of the speed up is due to the fact that the\nthree time-consuming tests\ncmd/internal/testdir and API check and runtime/race\ncan be done in parallel with the GOMAXPROCS\u003d2 runtime\non a machine with enough CPU cores.\nSo it is feasible to adjust the sequence of test runs to solve #65164.\n\nI put these four packages at the end of the test.\nHowever, still need to modify maxbg, otherwise runtime tests will block other package tests, because https://github.com/golang/go/blob/master/src/cmd/dist/test.go#L1320C1-L1324C4\nif maxbg is the default 4, then only one of the other tests can run in parallel with the runtime until all three processes of the runtime have run, at the same time, can\u0027t revert to https://go-review.googlesource.com/c/go/+/560597, the runtime only a testing process.\nBecause if there is only one run time test process, it can execute for a long time until other tests have passed before it is completed.\n\nHowever, it is now possible to set maxbg to runtime.NumCPU(), which is sufficient for all time-consuming tests to run in parallel, resulting in a 100% CPU usage,result is faster running of all tests at once.",
      "parentUuid": "f92c8586_29efbaa2",
      "revId": "ecdffe1031022dc6f7f389dfedefee5ab3f9b8fb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}