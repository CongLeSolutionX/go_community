{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "955aad98_6a128e8e",
        "filename": "doc/go_spec.html",
        "patchSetId": 1
      },
      "lineNbr": 5961,
      "author": {
        "id": 34895
      },
      "writtenOn": "2022-06-22T19:32:05Z",
      "side": 1,
      "message": "A case like\n\nv, ok \u003d x.(T)\n\nisn\u0027t quite \"multiple values to a matching number of variables.\"  It\u0027s mentioned in the \"Type Assertions\" section with a reference to this section.   I wonder if this section should say something about that and the other comma-ok cases.",
      "revId": "c2725db9f27f1887ce16c63523bdd243dac453fe",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "04f6ff5c_4547d167",
        "filename": "doc/go_spec.html",
        "patchSetId": 1
      },
      "lineNbr": 5961,
      "author": {
        "id": 7392
      },
      "writtenOn": "2022-06-22T23:44:27Z",
      "side": 1,
      "message": "I wrote \"values\" rather than \"expressions\" exactly for this reason. For instance\n\na, b, c :\u003d f()\n\nis ok if f() is a multi-valued function. We have the notion of \"multi-value\" multi-ple times in the spec.\n\nWhat do you think?",
      "parentUuid": "955aad98_6a128e8e",
      "revId": "c2725db9f27f1887ce16c63523bdd243dac453fe",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d1b66ef9_128ddd4f",
        "filename": "doc/go_spec.html",
        "patchSetId": 1
      },
      "lineNbr": 5961,
      "author": {
        "id": 5206
      },
      "writtenOn": "2022-06-22T23:53:57Z",
      "side": 1,
      "message": "I\u0027m OK with the test as is.  But at the same time I think that it is confusing.  I don\u0027t think there is any confusion about\n\na, b, c \u003d f()\n\nBut I think there is confusion about\n\nv1 \u003d x.(t)\nv2, ok \u003d x.(t)\n\nHere x.(t) doesn\u0027t seem like a multi-value expression.  x.(t) is a single value (whereas f(), above, is always a tuple of three values).  It\u0027s just that there is this special exception that applies only in an assignment statement in which x.(t) can produce two values.",
      "parentUuid": "04f6ff5c_4547d167",
      "revId": "c2725db9f27f1887ce16c63523bdd243dac453fe",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a06e784b_1b4bf302",
        "filename": "doc/go_spec.html",
        "patchSetId": 1
      },
      "lineNbr": 5961,
      "author": {
        "id": 7392
      },
      "writtenOn": "2022-06-23T01:01:14Z",
      "side": 1,
      "message": "Looking at all the places where this is possible: type assertions, channel receives, and map index expressions. All places explicitly state that the expression (on the RHS of the assignment) yields an additional value. In these cases the RHS clearly produces multiple (as in: two) values.\n\nLeaving this open for a bit, in case a better formulation pops up. But I think the prose as is correct: such assignments do assign multiple values. (It doesn\u0027t refer to the RHS as a multi-valued expression.)",
      "parentUuid": "d1b66ef9_128ddd4f",
      "revId": "c2725db9f27f1887ce16c63523bdd243dac453fe",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}