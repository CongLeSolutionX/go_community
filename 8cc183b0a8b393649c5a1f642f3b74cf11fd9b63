{
  "comments": [
    {
      "key": {
        "uuid": "a6c7de80_597e831f",
        "filename": "src/net/http/server.go",
        "patchSetId": 7
      },
      "lineNbr": 251,
      "author": {
        "id": 10820
      },
      "writtenOn": "2016-10-31T20:49:32Z",
      "side": 1,
      "message": "Any particular reason to use atomic.Value for this, but mu for hijacked?",
      "revId": "8cc183b0a8b393649c5a1f642f3b74cf11fd9b63",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "869f3a79_a942e557",
        "filename": "src/net/http/server.go",
        "patchSetId": 7
      },
      "lineNbr": 251,
      "author": {
        "id": 5065
      },
      "writtenOn": "2016-10-31T21:11:18Z",
      "side": 1,
      "message": "Because atomic.Value is super cheap and connection states change often. Hijacked is never used, so I don\u0027t care there as much, and that code was also written before atomic.Value existed.",
      "parentUuid": "a6c7de80_597e831f",
      "revId": "8cc183b0a8b393649c5a1f642f3b74cf11fd9b63",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a6c7de80_d9717352",
        "filename": "src/net/http/server.go",
        "patchSetId": 7
      },
      "lineNbr": 2290,
      "author": {
        "id": 10820
      },
      "writtenOn": "2016-10-31T20:49:32Z",
      "side": 1,
      "message": "nit: getDoneChanLocked? kind of ugly, but more symmetrical with getDoneChan",
      "range": {
        "startLine": 2290,
        "startChar": 17,
        "endLine": 2290,
        "endChar": 27
      },
      "revId": "8cc183b0a8b393649c5a1f642f3b74cf11fd9b63",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "869f3a79_49523926",
        "filename": "src/net/http/server.go",
        "patchSetId": 7
      },
      "lineNbr": 2290,
      "author": {
        "id": 5065
      },
      "writtenOn": "2016-10-31T21:11:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a6c7de80_d9717352",
      "revId": "8cc183b0a8b393649c5a1f642f3b74cf11fd9b63",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a6c7de80_b976bf46",
        "filename": "src/net/http/server.go",
        "patchSetId": 7
      },
      "lineNbr": 2304,
      "author": {
        "id": 10820
      },
      "writtenOn": "2016-10-31T20:49:32Z",
      "side": 1,
      "message": "nit: do you mean \"mu\", not \"closeMu\"?",
      "range": {
        "startLine": 2304,
        "startChar": 8,
        "endLine": 2304,
        "endChar": 15
      },
      "revId": "8cc183b0a8b393649c5a1f642f3b74cf11fd9b63",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "869f3a79_89584148",
        "filename": "src/net/http/server.go",
        "patchSetId": 7
      },
      "lineNbr": 2304,
      "author": {
        "id": 5065
      },
      "writtenOn": "2016-10-31T21:11:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a6c7de80_b976bf46",
      "revId": "8cc183b0a8b393649c5a1f642f3b74cf11fd9b63",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "86b81af7_987bf530",
        "filename": "src/net/http/server.go",
        "patchSetId": 7
      },
      "lineNbr": 2323,
      "author": {
        "id": 10820
      },
      "writtenOn": "2016-10-31T20:49:32Z",
      "side": 1,
      "message": "nit: no comma needed",
      "range": {
        "startLine": 2323,
        "startChar": 44,
        "endLine": 2323,
        "endChar": 45
      },
      "revId": "8cc183b0a8b393649c5a1f642f3b74cf11fd9b63",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "869f3a79_294ff57f",
        "filename": "src/net/http/server.go",
        "patchSetId": 7
      },
      "lineNbr": 2323,
      "author": {
        "id": 5065
      },
      "writtenOn": "2016-10-31T21:11:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "86b81af7_987bf530",
      "revId": "8cc183b0a8b393649c5a1f642f3b74cf11fd9b63",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a6c7de80_997bfb30",
        "filename": "src/net/http/server.go",
        "patchSetId": 7
      },
      "lineNbr": 2327,
      "author": {
        "id": 10820
      },
      "writtenOn": "2016-10-31T20:49:32Z",
      "side": 1,
      "message": "nit: complete,",
      "range": {
        "startLine": 2327,
        "startChar": 58,
        "endLine": 2327,
        "endChar": 66
      },
      "revId": "8cc183b0a8b393649c5a1f642f3b74cf11fd9b63",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "869f3a79_096f91e2",
        "filename": "src/net/http/server.go",
        "patchSetId": 7
      },
      "lineNbr": 2327,
      "author": {
        "id": 5065
      },
      "writtenOn": "2016-10-31T21:11:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a6c7de80_997bfb30",
      "revId": "8cc183b0a8b393649c5a1f642f3b74cf11fd9b63",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a6c7de80_798147e3",
        "filename": "src/net/http/server.go",
        "patchSetId": 7
      },
      "lineNbr": 2331,
      "author": {
        "id": 10820
      },
      "writtenOn": "2016-10-31T20:49:32Z",
      "side": 1,
      "message": "There is a race if someone calls SetKeepAlivesEnabled concurrently with Shutdown. Although this seems unlikely to happen in practice, the result would be surprising. I think you can fix this by deleting the above two lines and changing one line in writeHeader to:\n\nkeepAlivesEnabled :\u003d w.conn.server.doKeepAlives() || s.getWaitingShutdown()",
      "revId": "8cc183b0a8b393649c5a1f642f3b74cf11fd9b63",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "869f3a79_89cde1c2",
        "filename": "src/net/http/server.go",
        "patchSetId": 7
      },
      "lineNbr": 2331,
      "author": {
        "id": 5065
      },
      "writtenOn": "2016-10-31T21:11:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a6c7de80_798147e3",
      "revId": "8cc183b0a8b393649c5a1f642f3b74cf11fd9b63",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "869f3a79_69ca9daa",
        "filename": "src/net/http/server.go",
        "patchSetId": 7
      },
      "lineNbr": 2331,
      "author": {
        "id": 5065
      },
      "writtenOn": "2016-10-31T21:11:18Z",
      "side": 1,
      "message": "Done, similarly.",
      "parentUuid": "a6c7de80_798147e3",
      "revId": "8cc183b0a8b393649c5a1f642f3b74cf11fd9b63",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a6c7de80_19880b05",
        "filename": "src/net/http/server.go",
        "patchSetId": 7
      },
      "lineNbr": 2343,
      "author": {
        "id": 10820
      },
      "writtenOn": "2016-10-31T20:49:32Z",
      "side": 1,
      "message": "Why is the ticker needed -- is there a potential for lost updates where Shutdown doesn\u0027t learn of connections that have gone idle? Something like the following seems cleaner, although it may not work for some reason:\n\nfunc (c *conn) setState(state) {\n  ...\n  if state \u003d\u003d StateIdle {\n    srv.mu.Lock()\n    if srv.waitingShutdown !\u003d nil {\n      srv.trackConnLocked(c, false)\n    }\n    srv.mu.Unlock()\n  }\n  ...\n}\n\nfunc (s *Server) trackConn(c *conn, add bool) {\n  ...\n  if add \u003d\u003d false {\n    delete(s.activeConn, s)\n    if len(s.activeConn) \u003d\u003d 0 \u0026\u0026 s.waitingShutdown !\u003d nil {\n      close(s.waitingShutdown)\n    }\n  }\n}\n\nfunc (s *Server) Shutdown(ctx) error {\n  s.mu.Lock()\n  s.closeDoneChanLocked()\n  lnerr :\u003d s.closeListenersLocked()\n  ch :\u003d ... s.waitingShutdown\n  haveActive :\u003d len(s.activeConn) \u003e\u003d 0\n  s.mu.Unlock()\n\n  if haveActive {\n    select {\n    case \u003c-ctx.Done():\n      return ctx.Err()\n    case \u003c-ch:  // ch is closed after all idle conns have closed\n    }\n  }\n  return lnerr\n}",
      "revId": "8cc183b0a8b393649c5a1f642f3b74cf11fd9b63",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "869f3a79_89b4c11e",
        "filename": "src/net/http/server.go",
        "patchSetId": 7
      },
      "lineNbr": 2343,
      "author": {
        "id": 5065
      },
      "writtenOn": "2016-10-31T21:11:18Z",
      "side": 1,
      "message": "My first version didn\u0027t even have the waitingShutdown chan. It only had the polling loop. But then I was annoyed by the tests being slow, so added an opportunistic speedup chan.\n\nI don\u0027t want all connection state changes acquiring a mutex. I\u0027m not willing to slow down the common case for a rarely-called function like Shutdown. I\u0027d rather have Shutdown be a little bit slow in some cases, which is why I find the polling loop acceptable here. Especially since it might be minutes before somebody is done downloading some Handler\u0027s big response.",
      "parentUuid": "a6c7de80_19880b05",
      "revId": "8cc183b0a8b393649c5a1f642f3b74cf11fd9b63",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "26aa0e9c_433c5a84",
        "filename": "src/net/http/server.go",
        "patchSetId": 7
      },
      "lineNbr": 2343,
      "author": {
        "id": 10820
      },
      "writtenOn": "2016-10-31T21:28:38Z",
      "side": 1,
      "message": "The state changes already require a mutex, via either src.trackConn() or srv.notifyMaybeShutdown(). The code I proposed above doesn\u0027t seem any slower at first glance, but admittedly I haven\u0027t measured. Your call.",
      "parentUuid": "869f3a79_89b4c11e",
      "revId": "8cc183b0a8b393649c5a1f642f3b74cf11fd9b63",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "46db8268_8e7ddb95",
        "filename": "src/net/http/server.go",
        "patchSetId": 7
      },
      "lineNbr": 2343,
      "author": {
        "id": 5065
      },
      "writtenOn": "2016-10-31T23:05:28Z",
      "side": 1,
      "message": "The trackConn ones were intentional and considered acceptable, since they were only for when connections came \u0026 went, which I considered already kinda heavy, and mostly I couldn\u0027t find an alternative.\n\nBut good find on notifyMaybeShutdown! The notifyMaybeShutdown mutex acquisition on idle was the late addition and exactly the sort of thing I was trying to avoid, acquiring a Server-wide mutex on transitions between idle and active. So let me see about deleting that.\n\nI\u0027m trying to avoid mutex contention with lots of busy connections on a many-CPU machine.",
      "parentUuid": "26aa0e9c_433c5a84",
      "revId": "8cc183b0a8b393649c5a1f642f3b74cf11fd9b63",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "26aa0e9c_0628a0b7",
        "filename": "src/net/http/server.go",
        "patchSetId": 7
      },
      "lineNbr": 2343,
      "author": {
        "id": 10820
      },
      "writtenOn": "2016-10-31T23:08:26Z",
      "side": 1,
      "message": "\u003e My first version didn\u0027t even have the waitingShutdown chan. It only had\n\u003e the polling loop. But then I was annoyed by the tests being slow, so added\n\u003e an opportunistic speedup chan.\n\nHow about going back to the polling loop with a shorter timer? s.waitingShutdown would be completely unnecessary. Or use a short timer in tests and a long timer otherwise.",
      "parentUuid": "46db8268_8e7ddb95",
      "revId": "8cc183b0a8b393649c5a1f642f3b74cf11fd9b63",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}