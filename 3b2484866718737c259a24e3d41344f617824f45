{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "d7a0ffbe_f335faba",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-10-21T17:23:33Z",
      "side": 1,
      "message": "SlowBots beginning. Status page: https://farmer.golang.org/try?commit\u003d3b248486\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "3b2484866718737c259a24e3d41344f617824f45",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a03157ed_22097243",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-10-21T17:23:33Z",
      "side": 1,
      "message": "Superseded.",
      "parentUuid": "abc82686_c0978da6",
      "tag": "autogenerated:trybots~beginning",
      "revId": "3b2484866718737c259a24e3d41344f617824f45",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "012b3c9e_29f3edd3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-10-21T17:43:56Z",
      "side": 1,
      "message": "SlowBots are happy.\n\nSlowBot builds that ran:\n* linux-amd64-longtest\n* windows-amd64-longtest\n",
      "parentUuid": "d7a0ffbe_f335faba",
      "tag": "autogenerated:trybots~happy",
      "revId": "3b2484866718737c259a24e3d41344f617824f45",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "de24acae_1f6674f1",
        "filename": "src/cmd/go/internal/work/buildid.go",
        "patchSetId": 2
      },
      "lineNbr": 421,
      "author": {
        "id": 6365
      },
      "writtenOn": "2022-10-21T19:09:55Z",
      "side": 1,
      "message": "Update this comment?",
      "range": {
        "startLine": 421,
        "startChar": 4,
        "endLine": 421,
        "endChar": 33
      },
      "revId": "3b2484866718737c259a24e3d41344f617824f45",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6067f61d_109ca6e1",
        "filename": "src/cmd/go/internal/work/buildid.go",
        "patchSetId": 2
      },
      "lineNbr": 421,
      "author": {
        "id": 10033
      },
      "writtenOn": "2022-10-21T19:48:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "de24acae_1f6674f1",
      "range": {
        "startLine": 421,
        "startChar": 4,
        "endLine": 421,
        "endChar": 33
      },
      "revId": "3b2484866718737c259a24e3d41344f617824f45",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f0efb5bb_d66dd786",
        "filename": "src/cmd/go/internal/work/buildid.go",
        "patchSetId": 2
      },
      "lineNbr": 424,
      "author": {
        "id": 6365
      },
      "writtenOn": "2022-10-21T19:09:55Z",
      "side": 1,
      "message": "I notice that nearly all of the cases later here are guarded by `!cfg.BuildA`. I wonder if we could restructure to simplify it further, perhaps by pulling the `BuildA` case earlier:\n\n```\nif cfg.BuildA {\n\tif p :\u003d a.Package; p !\u003d nil \u0026\u0026 !p.Stale {\n\t\tp.Stale \u003d true\n\t\tp.StaleReason \u003d \"build -a flag in use\"\n\t}\n\t// Begin saving output for later writing to cache.\n\ta.output \u003d []byte{}\n\treturn false\n}\n```\n\nI think we can also consolidate some of the `target !\u003d \"\"` conditions:\n\n```\nif target !\u003d \"\" {\n\tbuildID, _ :\u003d buildid.ReadFile(target)\n\tif strings.HasPrefix(buildID, actionID+buildIDSeparator) {\n\t\t‚Ä¶\n\t\treturn true\n\t}\n\t// Special case for building a main package: ‚Ä¶\n\tif !b.NeedExport \u0026\u0026 a.Mode \u003d\u003d \"build\" \u0026\u0026 len(a.triggers) \u003d\u003d 1 \u0026\u0026 a.triggers[0].Mode \u003d\u003d \"link\" {\n\t\tif id :\u003d strings.Split(buildID, buildIDSeparator); len(id) \u003d\u003d 4 \u0026\u0026 id[1]  \u003d\u003d actionID {\n\t\t\t‚Ä¶\n\t\t}\n\t}\n}\n```\n\nAnd then with a little restructuring I think we could combine the two ‚Äúhit in build cache‚Äù cases, and also narrow down the amount of code that depends on `b.IsCmdList`:\n\n```\nif c :\u003d cache.Default(); c !\u003d nil {\n\tif file, _, err :\u003d c.GetFile(actionHash); err \u003d\u003d nil {\n\t\tif buildID, err :\u003d buildid.ReadFile(file); err \u003d\u003d nil {\n\t\t\t‚Ä¶\n\t\t\ta.built \u003d file\n\t\t\ta.Target \u003d \"DO NOT USE - using cache\"\n\t\t\ta.buildID \u003d buildID\n\t\t\tif a.json !\u003d nil {\n\t\t\t\ta.json.BUildID \u003d a.buildID\n\t\t\t}\n\t\t\tif p :\u003d a.Package; p !\u003d nil \u0026\u0026 !p.Stale \u0026\u0026 target !\u003d \"\" {\n\t\t\t\tp.Stale \u003d true\n\t\t\t\tp.StaleReason \u003d \"not installed but available in build cache\"\n\t\t\t}\n\t\t}\n\t}\n}\n\nif p :\u003d a.Package; p !\u003d nil \u0026\u0026 !p.Stale {\n\tp.Stale \u003d true\n\tp.StaleReason \u003d \"build ID mismatch\"\n\tif b.IsCmdList {\n\t\t// Since we may end up printing StaleReason, include more detail.\n\t\tfor _, p1 :\u003d range p.Internal.Imports {\n\t\t\t‚Ä¶\n\t\t}\n\t}\n}\n// Begin saving output for later writing to cache.\na.output \u003d []byte{}\nreturn false\n```\n\n(I\u0027m hoping that if we keep simplifying this logic enough, eventually it will get simple enough that I can spot the fix for #49267! üòÖ)",
      "revId": "3b2484866718737c259a24e3d41344f617824f45",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "035bf01d_f8a44871",
        "filename": "src/cmd/go/internal/work/buildid.go",
        "patchSetId": 2
      },
      "lineNbr": 424,
      "author": {
        "id": 10033
      },
      "writtenOn": "2022-10-21T19:53:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f0efb5bb_d66dd786",
      "revId": "3b2484866718737c259a24e3d41344f617824f45",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "18be0465_27cf997c",
        "filename": "src/cmd/go/internal/work/buildid.go",
        "patchSetId": 2
      },
      "lineNbr": 441,
      "author": {
        "id": 6365
      },
      "writtenOn": "2022-10-21T19:09:55Z",
      "side": 1,
      "message": "(discussed out-of-band) I think this call to `showStdout` should be guarded by `if !b.IsCmdList` or similar.\n\n(Strictly speaking, it should be guarded by the [`need`](https://cs.opensource.google/go/go/+/master:src/cmd/go/internal/work/exec.go;l\u003d476-479;drc\u003d01604129aee8bfc9dd3e2fffd2ad8f772a3089ec) variable for build actions, I think.)\n\nThe lack of guard on the other existing calls appears to be a bug, which I\u0027ve filed as #56375.",
      "revId": "3b2484866718737c259a24e3d41344f617824f45",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2e9f1f01_ffd272ea",
        "filename": "src/cmd/go/internal/work/buildid.go",
        "patchSetId": 2
      },
      "lineNbr": 441,
      "author": {
        "id": 10033
      },
      "writtenOn": "2022-10-21T19:48:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "18be0465_27cf997c",
      "revId": "3b2484866718737c259a24e3d41344f617824f45",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}