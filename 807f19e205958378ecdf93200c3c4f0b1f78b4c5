{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "62fd6dc6_b441ca81",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 17092
      },
      "writtenOn": "2021-05-26T19:39:42Z",
      "side": 1,
      "message": "TRY\u003dlinux-amd64-longtest",
      "revId": "807f19e205958378ecdf93200c3c4f0b1f78b4c5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "361c3bbb_f090283a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-05-26T19:39:58Z",
      "side": 1,
      "message": "SlowBots beginning. Status page: https://farmer.golang.org/try?commit\u003d807f19e2",
      "tag": "autogenerated:trybots~beginning",
      "revId": "807f19e205958378ecdf93200c3c4f0b1f78b4c5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fefee059_2404afdc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-05-26T19:51:09Z",
      "side": 1,
      "message": "SlowBots are happy.\n\nSlowBot builds that ran:\n* linux-amd64-longtest\n",
      "parentUuid": "361c3bbb_f090283a",
      "tag": "autogenerated:trybots~happy",
      "revId": "807f19e205958378ecdf93200c3c4f0b1f78b4c5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "88efef14_93e89fe8",
        "filename": "src/cmd/go/internal/modget/get.go",
        "patchSetId": 1
      },
      "lineNbr": 493,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-05-26T21:20:33Z",
      "side": 1,
      "message": "I don\u0027t exactly follow why we need this map. The set of replacements in effect doesn\u0027t change during `go get`, so shouldn\u0027t this be a constant transformation of initialVersion? (If so, why compute it ahead of time?)",
      "revId": "807f19e205958378ecdf93200c3c4f0b1f78b4c5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "160c3251_a579d93b",
        "filename": "src/cmd/go/internal/modget/get.go",
        "patchSetId": 1
      },
      "lineNbr": 493,
      "author": {
        "id": 17092
      },
      "writtenOn": "2021-05-26T22:31:15Z",
      "side": 1,
      "message": "Huh, I suppose modload.Replacement does the job. I was thinking it wouldn\u0027t work after the build list changed.",
      "parentUuid": "88efef14_93e89fe8",
      "revId": "807f19e205958378ecdf93200c3c4f0b1f78b4c5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f83549d5_228d59e1",
        "filename": "src/cmd/go/internal/modget/get.go",
        "patchSetId": 1
      },
      "lineNbr": 1620,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-05-26T21:20:33Z",
      "side": 1,
      "message": "What happens if there was no initial version of m.Path?",
      "range": {
        "startLine": 1620,
        "startChar": 47,
        "endLine": 1620,
        "endChar": 63
      },
      "revId": "807f19e205958378ecdf93200c3c4f0b1f78b4c5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a4fd6196_a23b3cb9",
        "filename": "src/cmd/go/internal/modget/get.go",
        "patchSetId": 1
      },
      "lineNbr": 1620,
      "author": {
        "id": 17092
      },
      "writtenOn": "2021-05-26T22:31:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f83549d5_228d59e1",
      "range": {
        "startLine": 1620,
        "startChar": 47,
        "endLine": 1620,
        "endChar": 63
      },
      "revId": "807f19e205958378ecdf93200c3c4f0b1f78b4c5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cbb80f04_6b3fce58",
        "filename": "src/cmd/go/testdata/script/mod_get_update_unrelated_sum.txt",
        "patchSetId": 1
      },
      "lineNbr": 34,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-05-26T21:20:33Z",
      "side": 1,
      "message": "s/before it before/for it before/",
      "range": {
        "startLine": 34,
        "startChar": 23,
        "endLine": 34,
        "endChar": 40
      },
      "revId": "807f19e205958378ecdf93200c3c4f0b1f78b4c5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "208434a7_58b2c4e4",
        "filename": "src/cmd/go/testdata/script/mod_get_update_unrelated_sum.txt",
        "patchSetId": 1
      },
      "lineNbr": 34,
      "author": {
        "id": 17092
      },
      "writtenOn": "2021-05-26T22:31:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cbb80f04_6b3fce58",
      "range": {
        "startLine": 34,
        "startChar": 23,
        "endLine": 34,
        "endChar": 40
      },
      "revId": "807f19e205958378ecdf93200c3c4f0b1f78b4c5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e4b66098_95cf3d14",
        "filename": "src/cmd/go/testdata/script/mod_get_update_unrelated_sum.txt",
        "patchSetId": 1
      },
      "lineNbr": 65,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-05-26T21:20:33Z",
      "side": 1,
      "message": "I\u0027m curious: what happens if we delete just the zip but not the ziphash?",
      "range": {
        "startLine": 62,
        "startChar": 0,
        "endLine": 65,
        "endChar": 64
      },
      "revId": "807f19e205958378ecdf93200c3c4f0b1f78b4c5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6697ce1e_0fb376ed",
        "filename": "src/cmd/go/testdata/script/mod_get_update_unrelated_sum.txt",
        "patchSetId": 1
      },
      "lineNbr": 65,
      "author": {
        "id": 17092
      },
      "writtenOn": "2021-05-26T22:31:15Z",
      "side": 1,
      "message": "I\u0027m calling modfetch.DownloadZip (which downloads the zip if we don\u0027t have it) before modfetch.Sum (which would only return the ziphash content and not download the zip if it\u0027s missing), so this test works whether that file is there or not. Probably better not to delete it.",
      "parentUuid": "e4b66098_95cf3d14",
      "range": {
        "startLine": 62,
        "startChar": 0,
        "endLine": 65,
        "endChar": 64
      },
      "revId": "807f19e205958378ecdf93200c3c4f0b1f78b4c5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dbe9ef4a_54e8324c",
        "filename": "src/cmd/go/testdata/script/mod_get_update_unrelated_sum.txt",
        "patchSetId": 1
      },
      "lineNbr": 69,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-05-26T21:20:33Z",
      "side": 1,
      "message": "It would be good to verify that we also printed an upgrade message (from some previous version to v1.5.2) so that the user understands _why_ we were trying to fetch this sum.",
      "range": {
        "startLine": 67,
        "startChar": 0,
        "endLine": 69,
        "endChar": 0
      },
      "revId": "807f19e205958378ecdf93200c3c4f0b1f78b4c5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9bc50cca_b075d64d",
        "filename": "src/cmd/go/testdata/script/mod_get_update_unrelated_sum.txt",
        "patchSetId": 1
      },
      "lineNbr": 69,
      "author": {
        "id": 17092
      },
      "writtenOn": "2021-05-26T22:31:15Z",
      "side": 1,
      "message": "Hmm, good idea.\n\nCurrently, we don\u0027t call resolver.reportChanges until after successfully writing go.mod. I think would could call it here if there\u0027s at least one error. We should be able to get the new requirements from modload.LoadModFile at this point.\n\nShould we print the full list of changes here though, since we\u0027re not actually writing go.mod? Might be better to write something like:\n\n  finding sum for rsc.io/quote@v1.5.2 (upgraded from v1.0.0): %v\n\nWDYT?",
      "parentUuid": "dbe9ef4a_54e8324c",
      "range": {
        "startLine": 67,
        "startChar": 0,
        "endLine": 69,
        "endChar": 0
      },
      "revId": "807f19e205958378ecdf93200c3c4f0b1f78b4c5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "91fcb9e9_25e079ca",
        "filename": "src/cmd/go/testdata/script/mod_get_update_unrelated_sum.txt",
        "patchSetId": 1
      },
      "lineNbr": 69,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-05-27T18:21:02Z",
      "side": 1,
      "message": "I\u0027d be ok with either printing the changes before we download sums, or printing the upgrades as part of the checksum errors.\n\nI wonder what the users\u0027 error-recovery story will be for this sort of case, though — if the previous version of a module was needed for tidyness, and the upgrades in `go get` remove the last import of it, then\n• `go mod tidy` before `go get` won\u0027t fix it (because the old version of the module was needed,\n• `go get` before `go mod tidy` won\u0027t fix it (because they can\u0027t push past the `go get` error to get to `go mod tidy`).\n\nI guess they could `exclude` the bad module, then run `go get`, then remove the `exclude` and run `go mod tidy`?\n(Or they could `go mod edit` the new dependency in place without the checksum, I suppose.)\n\nThat\u0027s a pretty complicated fix, although I suppose it\u0027s for a rare failure mode.",
      "parentUuid": "9bc50cca_b075d64d",
      "range": {
        "startLine": 67,
        "startChar": 0,
        "endLine": 69,
        "endChar": 0
      },
      "revId": "807f19e205958378ecdf93200c3c4f0b1f78b4c5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}