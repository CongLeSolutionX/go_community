{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "4fffd192_8c6c650c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 13550
      },
      "writtenOn": "2022-08-19T10:19:03Z",
      "side": 1,
      "message": "Spoke with Egon briefly about this, and it seems like the defer is more costly than expected due to the unpack function (along with the inlined searchInts) having a bounds check, and the defer also becoming a closure for some reason.\n\nI hope that we could improve the compiler here, but this 4% might be enough to warrant merging this change with a TODO, akin to how searchInts inlines sort.Search with a TODO.",
      "revId": "ad9efbdac37fe473c5127e78fe86f5a273ae0106",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a657d6c5_db8d9272",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 13550
      },
      "writtenOn": "2022-08-19T10:20:10Z",
      "side": 1,
      "message": "I also tried to appease the compiler\u0027s bounds check prove pass in searchInts, but could not make it work. Ideally we don\u0027t want searchInts to have bounds checks, though I was not successful in about fifteen minutes of fiddling.",
      "parentUuid": "4fffd192_8c6c650c",
      "revId": "ad9efbdac37fe473c5127e78fe86f5a273ae0106",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "184f1427_53bec1d8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 57259
      },
      "writtenOn": "2022-08-19T13:15:54Z",
      "side": 1,
      "message": "\u003e Why is this the case? Surely a single defer shouldn\u0027t\n\u003e incur such a large cost? Could it be that the naked return is somehow\n\u003e related? Perhaps the compiler people can take a look.\n\nA quick glance at the generated code (ARM in my case) shows that the defer incurs the usual call overhead, including an additional stack check, but also that it defeats the inlining of Mutex.Unlock that is enabled by this CL, thus incurring a second call overhead. I don\u0027t know why defer should defeat inlining, but inlining heuristics are notoriously tricky in any compiler.\n\nStill, I\u0027m surprised that two call overheads are so large relative to the other work done by unpack, but perhaps the common case is for searchInts (an inlined binary search) to be extremely fast and the adjustment logic to be a no-op.\n\nThe compiler folks will certainly know more.\n\n",
      "revId": "ad9efbdac37fe473c5127e78fe86f5a273ae0106",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a8b8a2e9_5803dcdc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 13550
      },
      "writtenOn": "2022-08-22T09:47:00Z",
      "side": 1,
      "message": "CCing a couple of compiler people who can likely point us in the right direction :)",
      "parentUuid": "184f1427_53bec1d8",
      "revId": "ad9efbdac37fe473c5127e78fe86f5a273ae0106",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9c40e7ed_a78622e9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5167
      },
      "writtenOn": "2022-08-22T13:52:29Z",
      "side": 1,
      "message": "I am definitely surprised it makes a significant difference. Not inlining deferred calls is a known issue that we just haven\u0027t gotten to, partly because we didn\u0027t think it was a big win: go.dev/issue/38471. Unfortunately, inlining open-coded defers is tricky because of phase ordering issues (what else? ðŸ˜Š), though I\u0027m not sure we\u0027ve thought too deeply about how we could resolve that.",
      "parentUuid": "a8b8a2e9_5803dcdc",
      "revId": "ad9efbdac37fe473c5127e78fe86f5a273ae0106",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9c2a530e_8af91af8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 13550
      },
      "writtenOn": "2022-08-22T14:00:14Z",
      "side": 1,
      "message": "That makes sense, thank you. Is there an issue I could track for this compiler improvement?\n\nAssuming that there won\u0027t be a fix very soon, and given that go/token.FileSet is a hot path in many packages like go/printer, I reckon that we should apply this change now with a TODO pointing to the compiler issue. With the idea being that we should be able to revert to a regular defer once the cost is negligible.",
      "parentUuid": "9c40e7ed_a78622e9",
      "revId": "ad9efbdac37fe473c5127e78fe86f5a273ae0106",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}