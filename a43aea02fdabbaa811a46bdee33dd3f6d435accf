{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "a4a74a0d_6179f855",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-05-24T15:36:32Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003da43aea02\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "a43aea02fdabbaa811a46bdee33dd3f6d435accf",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a5286617_8b2173b6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-05-24T15:47:47Z",
      "side": 1,
      "message": "Build is still in progress... Status page: https://farmer.golang.org/try?commit\u003da43aea02\nFailed on windows-amd64-2016: https://storage.googleapis.com/go-build-log/a43aea02/windows-amd64-2016_61cb7f7e.log\nOther builds still in progress; subsequent failure notices suppressed until final report.\n\nConsult https://build.golang.org/ to see whether they are new failures. Keep in mind that TryBots currently test *exactly* your git commit, without rebasing. If your commit\u0027s git parent is old, the failure might\u0027ve already been fixed.\n",
      "parentUuid": "a4a74a0d_6179f855",
      "tag": "autogenerated:trybots~progress",
      "revId": "a43aea02fdabbaa811a46bdee33dd3f6d435accf",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "85b5e29f_e4262f30",
        "filename": "src/runtime/pinner.go",
        "patchSetId": 7
      },
      "lineNbr": 99,
      "author": {
        "id": 5167
      },
      "writtenOn": "2023-05-24T15:50:07Z",
      "side": 1,
      "message": "Not for this CL, but there\u0027s a slightly different policy that\u0027s more friendly to application-level reuse: here, just set p.refs \u003d p.refs[:0] (and nil all the refs) and only if we put the pinner in the cache, set p.refs \u003d p.refStore[:0]. That way, if an application does reuse the pinner for a large number of pins, it can reuse the refs array, if it goes back to the cache, we won\u0027t hold a large refs array, and if it gets dropped on the floor, it doesn\u0027t matter because it\u0027ll all get freed anyway.",
      "revId": "a43aea02fdabbaa811a46bdee33dd3f6d435accf",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}