{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "27b37757_abc9a2d9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 52329
      },
      "writtenOn": "2022-10-08T14:00:07Z",
      "side": 1,
      "message": "TRY\u003dlinux-amd64-longtest",
      "revId": "124e2c9dc77f5c93ab5558b1aa36b4cb379802e6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "164dbf95_dd7c0dfd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-10-08T14:00:26Z",
      "side": 1,
      "message": "SlowBots beginning. Status page: https://farmer.golang.org/try?commit\u003d124e2c9d\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "124e2c9dc77f5c93ab5558b1aa36b4cb379802e6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b9d6b904_2369a2cd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-10-08T14:13:44Z",
      "side": 1,
      "message": "SlowBots are happy.\n\nSlowBot builds that ran:\n* linux-amd64-longtest\n",
      "parentUuid": "164dbf95_dd7c0dfd",
      "tag": "autogenerated:trybots~happy",
      "revId": "124e2c9dc77f5c93ab5558b1aa36b4cb379802e6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2bb28085_db6a4c5c",
        "filename": "src/cmd/compile/internal/ssa/_gen/AMD64latelower.rules",
        "patchSetId": 6
      },
      "lineNbr": 7,
      "author": {
        "id": 5200
      },
      "writtenOn": "2022-10-09T20:28:52Z",
      "side": 1,
      "message": "This looks ok, but I think we can do better.\n\nWe might as well not use LEAQ at all here, and handle pointers. Just\n\nif x.Type.IsPtrShaped, then\n  (ADDQ x (ADDQconst [c] y))\nworks, similarly if y is the pointer (or neither are).",
      "range": {
        "startLine": 7,
        "startChar": 75,
        "endLine": 7,
        "endChar": 122
      },
      "revId": "124e2c9dc77f5c93ab5558b1aa36b4cb379802e6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bd097ec1_1f8c13fe",
        "filename": "src/cmd/compile/internal/ssa/_gen/AMD64latelower.rules",
        "patchSetId": 6
      },
      "lineNbr": 8,
      "author": {
        "id": 5200
      },
      "writtenOn": "2022-10-09T20:28:52Z",
      "side": 1,
      "message": "For these I think we still need to avoid pointer computations, because there\u0027s no constant+2*reg instruction.\nBut we can still use ADDQconst for the outer operation.",
      "range": {
        "startLine": 8,
        "startChar": 0,
        "endLine": 8,
        "endChar": 122
      },
      "revId": "124e2c9dc77f5c93ab5558b1aa36b4cb379802e6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}