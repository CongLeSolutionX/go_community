{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "e2c65e8c_94bd8743",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 13640
      },
      "writtenOn": "2022-08-09T06:20:02Z",
      "side": 1,
      "message": "What instructions/features does this provide?\n\nThis seems semi-problematic, given that AFAIK SHA2 includes SHA2-512 in the form of SHA512H/SHA512H2/SHA512SU0/SHA512SU1. If it is the same as these then it is possibly redundant; if it is Apple M1 specific then the name is potentially misleading:\n\nhttps://developer.arm.com/documentation/101800/0201/AArch64-registers/AArch64-Identification-register-summary/ID-AA64ISAR0-EL1--AArch64-Instruction-Set-Attribute-Register-0",
      "revId": "228f891c905af8c01743085a74b2189f58eecba1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "044e77d8_d1ae6640",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 7530
      },
      "writtenOn": "2022-08-09T06:56:51Z",
      "side": 1,
      "message": "It\u0027s origin following the Linux hwcap of arm64\n\nhttps://github.com/torvalds/linux/blob/master/arch/arm64/include/uapi/asm/hwcap.h\n\n```\n#define HWCAP_SHA512\t\t(1 \u003c\u003c 21)\n```\n\nThose variables got deleted in due to lack of \"real hardware support\" at https://github.com/golang/go/commit/3510a1e32cbc86b73db143aefcc00aadc44c27bd\n\nI can only get access to real hardware that comes with `sha512` on M1, so this CL specific M1.",
      "parentUuid": "e2c65e8c_94bd8743",
      "revId": "228f891c905af8c01743085a74b2189f58eecba1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fa76684f_4d16dcca",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 7530
      },
      "writtenOn": "2022-08-09T07:08:25Z",
      "side": 1,
      "message": "cc Eric",
      "revId": "228f891c905af8c01743085a74b2189f58eecba1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7474f7f5_e9795c33",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 24534
      },
      "writtenOn": "2022-08-09T07:35:15Z",
      "side": 1,
      "message": "\u003e AFAIK SHA2 includes SHA2-512 in the form of SHA512H/SHA512H2/SHA512SU0/SHA512SU1.\nI guess you said ID_AA64ISAR0_EL1.SHA2 field, not the HWCAP_SHA2 flag? HWCAP_SHA2 should not contain these instructions.\nHWCAP_SHA512 functionality implied by ID_AA64ISAR0_EL1.SHA2 \u003d\u003d 0b0010, I guess the same is true on m1.",
      "parentUuid": "044e77d8_d1ae6640",
      "revId": "228f891c905af8c01743085a74b2189f58eecba1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b1f90041_1627c392",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 13640
      },
      "writtenOn": "2022-08-09T07:48:05Z",
      "side": 1,
      "message": "Thanks, that makes more sense and I\u0027ve confirmed that is indeed the case - we may want to look at syncing more of golang.org/x/sys/cpu, which has:\n\n  https://github.com/golang/sys/blob/master/cpu/cpu_arm64.go#L80\n\nWith OpenBSD arm64 on M1 both SHA2 and SHA512 get enabled, while on a pine64+ board only SHA2 does.",
      "parentUuid": "7474f7f5_e9795c33",
      "revId": "228f891c905af8c01743085a74b2189f58eecba1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}