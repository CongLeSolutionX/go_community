{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "566ec660_fe0a09e6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-08-27T03:20:54Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003d671097ce\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "671097cec2f70bf3d4b9a72528457e24ec0f1a3c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1229dcb4_c61a12be",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-08-27T03:41:23Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "566ec660_fe0a09e6",
      "tag": "autogenerated:trybots~happy",
      "revId": "671097cec2f70bf3d4b9a72528457e24ec0f1a3c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2645e7b0_32fd35cc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 6480
      },
      "writtenOn": "2022-08-27T04:59:40Z",
      "side": 1,
      "message": "Alex, I\u0027d like to get your opinion on whether this is a valuable change. The basis for it is the use of the `VirtualAddress` and `VirtualSize` in `ImportedSymbols` to find which section contains the import directory table. AFAICS at the moment invalid values could result in failure to find the import directory table when there is an overflow here. I\u0027m not entirely sure that this is a bad enough outcome to prevent loading the whole file. An alternative would be to check for the overflow in `ImportedSymbols` and return an error there if no import directory table was found. WDYT?",
      "revId": "671097cec2f70bf3d4b9a72528457e24ec0f1a3c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "51e88a4c_294af47a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5070
      },
      "writtenOn": "2022-09-11T03:22:22Z",
      "side": 1,
      "message": "I looked at `ImportedSymbols` code and I don\u0027t see any problems. Can you tell more? Perhaps if you can give me an example of section table values that trigger the bug that you describe, I will understand what you are referring to. Perhaps if you can point to the line of code with the problem, it will help.\n\nIt has been many years since I have changed this code. And I did not write the original code, so I had to figure out original author intentions by myself.",
      "parentUuid": "2645e7b0_32fd35cc",
      "revId": "671097cec2f70bf3d4b9a72528457e24ec0f1a3c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "34853a04_ac722444",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5070
      },
      "writtenOn": "2022-09-11T03:22:22Z",
      "side": 1,
      "message": "Thank you for sending this CL.\n\nI am not sure, if you change is needed. Please, see my comment below.\n\nAlex",
      "revId": "671097cec2f70bf3d4b9a72528457e24ec0f1a3c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b7d0a16a_4800f450",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 6480
      },
      "writtenOn": "2022-09-11T03:36:07Z",
      "side": 1,
      "message": "The bug is a hypothetical that could potentially be found by fuzzing and is part of the hardening of the debug packages. In the code here it is possible that `SectionHeader32.VirtualAddress + SectionHeader32.VirtualSize` overflow uin32. The loop in `*File.ImportedSymbols` (debug/pe/file.go:350 in go1.19) would fail to find the import directory table if the values were carefully constructed to cause this. If the Windows PE loader is robust to this we would have a differential behaviour that would allow the constructed PE to be loaded by would prevent the symbol section from being parsed by the debug/pe package.\n\nBy adding the error return, we at least see that the values are not valid.\n\nThis is in the context of using debug/* packages for executable forensics.",
      "parentUuid": "51e88a4c_294af47a",
      "revId": "671097cec2f70bf3d4b9a72528457e24ec0f1a3c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6ea13045_037a724e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5070
      },
      "writtenOn": "2022-09-11T04:10:56Z",
      "side": 1,
      "message": "But we already return from `*File.ImportedSymbols` on line 361. We return nil for both return parameters - function results and error.\n\nSo that makes `*File.ImportedSymbols` report success, but no DLL functions returned for the scenario you described.\n\nWhy do you think it is a problem?\n\nMicrosoft defined `SectionHeader32.VirtualAddress` and `SectionHeader32.VirtualSize` as uint32. I am not sure what Microsoft intended to do when the sum of these values overflow uint32. The error would help callers with corrupted executables with better error message, but it is possible that Microsoft intended not to report error here.\n\nI am not sure what to do.",
      "parentUuid": "b7d0a16a_4800f450",
      "revId": "671097cec2f70bf3d4b9a72528457e24ec0f1a3c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0e73e72e_a5b4c94f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 6480
      },
      "writtenOn": "2022-09-11T05:01:00Z",
      "side": 1,
      "message": "The issue is differential parsing. Let\u0027s say we have a malicious executable (this is the context I\u0027m working in, looking for these) and it does not want to be identified by a program that will obtain signatures from imported symbols, but it knows that it will be loaded by the Windows PE loader even if the sum of virtual address and virtual size overflows uint32 (this part I don\u0027t know; on Linux, I\u0027d just check). In this case it would construct this scenario so that the forensic program does not find the symbol table. This is possible with the current code and this is the problem.\n\nIf pe returns an error in this case, then the forensic program can at least identify the PE as invalid and potentially flag that, even if it can\u0027t use the symbols for obtaining a signature.\n\n\u003e The error would help callers with corrupted executables with better error message, but it is possible that Microsoft intended not to report error here.\n\nUnder normal circumstances you would not expect there to be an overflow, but malicious executables are not normal circumstances. In the context of standard library use of the package, the error should never happen.",
      "parentUuid": "6ea13045_037a724e",
      "revId": "671097cec2f70bf3d4b9a72528457e24ec0f1a3c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eb55d185_2613f12e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 6480
      },
      "writtenOn": "2022-09-11T05:05:10Z",
      "side": 1,
      "message": "An alternative approach would be to error at the loop. This would allow the file to be parsed, but would also signal to the caller of `ImportedSymbols` that something was fishy without loss of information since the loop would already result in a nil `[]string` being returned in that case.",
      "parentUuid": "0e73e72e_a5b4c94f",
      "revId": "671097cec2f70bf3d4b9a72528457e24ec0f1a3c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "52193ca3_8bef4aa3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5070
      },
      "writtenOn": "2022-09-11T05:45:09Z",
      "side": 1,
      "message": "\u003e ... In this case it would construct this scenario so that the forensic program does not find the symbol table.\n\nIf you write malicious program scanner, you should not be using debug/pe package. Or at least use modified copy of the package. debug/pe is limited by bad design + Go backward compatibility promise. I also suspect that there are many existing bugs in the package if you push it hard enough. The package was designed to handle Go executables, not general Win32 executables.\n\n\u003e Under normal circumstances you would not expect there to be an overflow, but malicious executables are not normal circumstances. In the context of standard library use of the package, the error should never happen.\n\nSo at least you agree that not returning error on line 361 has merit.\n\n\u003e An alternative approach would be to error at the loop. This would allow the file to be parsed, but would also signal to the caller of `ImportedSymbols` that something was fishy without loss of information since the loop would already result in a nil `[]string` being returned in that case.\n\nWe could do that. But that changes current behaviour - not returning error vs returning error. And I am not convinced that change of behaviour is warranted (see my previous message).",
      "parentUuid": "eb55d185_2613f12e",
      "revId": "671097cec2f70bf3d4b9a72528457e24ec0f1a3c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "14ae1015_b15bdf95",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 6480
      },
      "writtenOn": "2022-09-11T11:25:27Z",
      "side": 1,
      "message": "The package does a good job at handling the details of PE files that I need and with some of the changes that have been made recently to harden it, the safety of the package is reasonable. I am currently using back-ported changes from master here with some additional changes that have not yet been merged.\n\n\u003e So at least you agree that not returning error on line 361 has merit.\n\nI don\u0027t think that is what I said. It\u0027s certainly not what I meant.",
      "parentUuid": "52193ca3_8bef4aa3",
      "revId": "671097cec2f70bf3d4b9a72528457e24ec0f1a3c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "703e0c51_2f19b1d2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5070
      },
      "writtenOn": "2022-09-12T09:15:49Z",
      "side": 1,
      "message": "\u003e \n\u003e \u003e So at least you agree that not returning error on line 361 has merit.\n\u003e \n\u003e I don\u0027t think that is what I said. It\u0027s certainly not what I meant.\n\nOn 11 of September you said:\n\n... In the context of standard library use of the package, the error should never happen.\n\nI interpreted this as \"It is OK not to return error on line 361\". But that does not matter.\n\nWe can implement what you suggested with\n\n\u003e An alternative approach would be to error at the loop. This would allow the file to be parsed, but would also signal to the caller of  ImportedSymbols  that something was fishy without loss of information since the loop would already result in a nil  []string  being returned in that case.\n\nBut I am still not convinced that Microsoft intended to return error when our overflow happens.\n\nAlex",
      "parentUuid": "14ae1015_b15bdf95",
      "revId": "671097cec2f70bf3d4b9a72528457e24ec0f1a3c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}