{
  "comments": [
    {
      "key": {
        "uuid": "2b69225b_cd26bfbd",
        "filename": "src/runtime/mallocbits.go",
        "patchSetId": 24
      },
      "lineNbr": 135,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-10-25T21:19:33Z",
      "side": 1,
      "message": "n is a bit of an abstraction leakage, since currently mallocBits knows nothing about chunks.\n\nIf you shrink mallocBits to cover exactly one chunk, then n goes away, which is nice.",
      "revId": "12e8a3e02c1fec25773217b6acd25c7058fdcc50",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7a5e0ca5_0cab1c97",
        "filename": "src/runtime/mallocbits_test.go",
        "patchSetId": 24
      },
      "lineNbr": 126,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-10-25T21:19:33Z",
      "side": 1,
      "message": "Consider doing randomized testing, too.",
      "revId": "12e8a3e02c1fec25773217b6acd25c7058fdcc50",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e318ae32_c7a5620f",
        "filename": "src/runtime/mallocbits_test.go",
        "patchSetId": 24
      },
      "lineNbr": 137,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-10-25T21:19:33Z",
      "side": 1,
      "message": "Making mallocBits exactly one chunk also simplifies this test a lot.",
      "revId": "12e8a3e02c1fec25773217b6acd25c7058fdcc50",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6d310d5a_cbdc97aa",
        "filename": "src/runtime/mpagealloc.go",
        "patchSetId": 24
      },
      "lineNbr": 74,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-10-25T21:19:33Z",
      "side": 1,
      "message": "unsafe.Sizeof(mallocSum)\n\nThough, do we actually use this constant anywhere?",
      "revId": "12e8a3e02c1fec25773217b6acd25c7058fdcc50",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c23588df_c3b4b99a",
        "filename": "src/runtime/mpagealloc.go",
        "patchSetId": 24
      },
      "lineNbr": 76,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-10-25T21:19:33Z",
      "side": 1,
      "message": "Doc comment.\n\nConsider moving logMaxPackedValue after maxPackedValue.",
      "revId": "12e8a3e02c1fec25773217b6acd25c7058fdcc50",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "23f2855a_80d6dbe8",
        "filename": "src/runtime/mpagealloc.go",
        "patchSetId": 24
      },
      "lineNbr": 82,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-10-25T21:19:33Z",
      "side": 1,
      "message": "It\u0027s not clear what \"this value\" is referring to.\n\nMaybe \"... each of which may have a maximum value of 2^21-1, or all three may be equal to 2^21. The latter case is represented by setting just the 64th bit.\"?",
      "revId": "12e8a3e02c1fec25773217b6acd25c7058fdcc50",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    }
  ]
}