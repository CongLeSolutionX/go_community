{
  "comments": [
    {
      "key": {
        "uuid": "03bbeef2_98009505",
        "filename": "src/sync/waitgroup.go",
        "patchSetId": 12
      },
      "lineNbr": 18,
      "author": {
        "id": 5206
      },
      "writtenOn": "2015-04-02T00:46:29Z",
      "side": 1,
      "message": "WaitGroup\u0027s are often local variables, and I don\u0027t see anything in particular that will cause them to escape.  Therefore they might be on the stack, and the stack might be copied.  Can we be confident that on a 32-bit system the alignment of a WaitGroup on the stack will remain the same?  If it changes, terrible things will happen.",
      "revId": "79f73bb6676ab537e70892fe505926f69d512a1e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2312b2d8_49f921c2",
        "filename": "src/sync/waitgroup.go",
        "patchSetId": 12
      },
      "lineNbr": 18,
      "author": {
        "id": 5400
      },
      "writtenOn": "2015-04-02T07:24:55Z",
      "side": 1,
      "message": "Address of wg is passed to runtime_Semacquire/Semrelease in wg methods. This causes wg to always escape.\nAlso low 10 or so bits of addresses must be the same after stack copying. Changing low bits would indicate a bug in stack copying. Why any addresses can get an additional offset otherwise?..\n\nIf the rest looks good, I will add a comment and a test for stack copying.",
      "parentUuid": "03bbeef2_98009505",
      "revId": "79f73bb6676ab537e70892fe505926f69d512a1e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "234d525a_a8b1b8d5",
        "filename": "src/sync/waitgroup.go",
        "patchSetId": 12
      },
      "lineNbr": 50,
      "author": {
        "id": 5055
      },
      "writtenOn": "2015-04-10T19:19:37Z",
      "side": 1,
      "message": "the above call to wg.state() would have already\ntriggered nil derefs, so remove this line.\n\n(if wg is nil, then \u0026wg.state1 will panic.)",
      "revId": "79f73bb6676ab537e70892fe505926f69d512a1e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}