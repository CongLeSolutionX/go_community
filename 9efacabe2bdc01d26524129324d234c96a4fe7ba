{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "e12f83d5_2bd0b12f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 13315
      },
      "writtenOn": "2023-09-20T15:14:17Z",
      "side": 1,
      "message": "Looks reasonable to me. Thanks.\nDoes this have any effect on the escape-ness of the reflect APIs? Or the effect is completely covered by the method value handling?",
      "revId": "9efacabe2bdc01d26524129324d234c96a4fe7ba",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2cffeb2e_2a49f411",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 28792
      },
      "writtenOn": "2023-09-21T06:27:13Z",
      "side": 1,
      "message": "Hi Cherry, this CL here by itself has no external impact on the escape-ness of the reflect APIs.\n\nTo see external benefit, it also needs a new CL 530097 I just mailed a few minutes ago. That new CL attempts to address reflect.Value.Interface escaping due to method values. (CL 530097 is now the main CL for that, but it also relies on CL 530095 (runtime) and CL 530096 (compiler), which are now just before CL 530097 in my stack).",
      "parentUuid": "e12f83d5_2bd0b12f",
      "revId": "9efacabe2bdc01d26524129324d234c96a4fe7ba",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "71f07264_b7fe7b79",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 28792
      },
      "writtenOn": "2023-09-22T21:14:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2cffeb2e_2a49f411",
      "revId": "9efacabe2bdc01d26524129324d234c96a4fe7ba",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e6ef4035_8d0960a2",
        "filename": "src/reflect/value.go",
        "patchSetId": 5
      },
      "lineNbr": 147,
      "author": {
        "id": 5056
      },
      "writtenOn": "2023-09-20T00:40:34Z",
      "side": 1,
      "message": "It\u0027s true that this comment is out of date.\nYou can delete everything from \"We\u0027re very careful\" onward.\nThe current GC does not care about partially built interface values.\n(One did, a long time ago.)",
      "revId": "9efacabe2bdc01d26524129324d234c96a4fe7ba",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c40f67d3_bb1a5979",
        "filename": "src/reflect/value.go",
        "patchSetId": 5
      },
      "lineNbr": 147,
      "author": {
        "id": 28792
      },
      "writtenOn": "2023-09-22T21:14:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e6ef4035_8d0960a2",
      "revId": "9efacabe2bdc01d26524129324d234c96a4fe7ba",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}