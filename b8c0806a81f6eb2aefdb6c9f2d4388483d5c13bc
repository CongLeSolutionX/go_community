{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "2e932493_fbcdd168",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 62943
      },
      "writtenOn": "2023-08-14T15:46:53Z",
      "side": 1,
      "message": "Just one quick question.  Looks good otherwise.",
      "revId": "b8c0806a81f6eb2aefdb6c9f2d4388483d5c13bc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "af3fca9e_c99fae7c",
        "filename": "src/crypto/internal/bigmod/nat_riscv64.s",
        "patchSetId": 2
      },
      "lineNbr": 30,
      "author": {
        "id": 62943
      },
      "writtenOn": "2023-08-14T15:46:53Z",
      "side": 1,
      "message": "Will this branch ever be taken?  If I read the code correctly, X30 can only have one of three different values when this instruction is executed, none of which are zero.",
      "revId": "b8c0806a81f6eb2aefdb6c9f2d4388483d5c13bc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "926a7626_074e2dd0",
        "filename": "src/crypto/internal/bigmod/nat_riscv64.s",
        "patchSetId": 2
      },
      "lineNbr": 30,
      "author": {
        "id": 13640
      },
      "writtenOn": "2023-08-14T18:30:08Z",
      "side": 1,
      "message": "I do not believe it is possible to hit with current code - regardless, I added it to match the assembly implementations for other architectures (I suspect it is a remnant from the original crypto/math/big code, which could have been called with length zero - if we do remove the check, we should do it for all architectures.)",
      "parentUuid": "af3fca9e_c99fae7c",
      "revId": "b8c0806a81f6eb2aefdb6c9f2d4388483d5c13bc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1c4cad0b_baeae4a7",
        "filename": "src/crypto/internal/bigmod/nat_riscv64.s",
        "patchSetId": 2
      },
      "lineNbr": 30,
      "author": {
        "id": 62943
      },
      "writtenOn": "2023-08-14T19:47:37Z",
      "side": 1,
      "message": "Fair enough.  Looking at the other implementations the check seems to be missing from amd64, but is present everywhere else.  Note that in the 386, ARM and ARM64 code the check is inside the loop and also serves as the loop condition so can\u0027t be removed without changing the loop.",
      "parentUuid": "926a7626_074e2dd0",
      "revId": "b8c0806a81f6eb2aefdb6c9f2d4388483d5c13bc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7d431ab7_4161cca3",
        "filename": "src/crypto/internal/bigmod/nat_riscv64.s",
        "patchSetId": 2
      },
      "lineNbr": 30,
      "author": {
        "id": 13640
      },
      "writtenOn": "2023-08-15T07:52:30Z",
      "side": 1,
      "message": "Yes, they\u0027re consistently inconsistent :)\n\nThe amd64 code was rewritten and is now generated using avo (see crypto/internal/bigmod/_asm/nat_amd64_asm.go). The 386 and arm versions jump to the condition branch, while arm64 has an extra instruction per loop... I\u0027ll send a follow up.",
      "parentUuid": "1c4cad0b_baeae4a7",
      "revId": "b8c0806a81f6eb2aefdb6c9f2d4388483d5c13bc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}