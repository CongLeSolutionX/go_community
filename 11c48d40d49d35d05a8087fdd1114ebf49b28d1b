{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "8a582802_ccd3f337",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-02-14T05:50:30Z",
      "side": 1,
      "message": "Superseded.",
      "parentUuid": "552896f1_ccdd3af4",
      "tag": "autogenerated:trybots~beginning",
      "revId": "11c48d40d49d35d05a8087fdd1114ebf49b28d1b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4a666327_c0360bca",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-02-14T05:50:30Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003d11c48d40",
      "tag": "autogenerated:trybots~beginning",
      "revId": "11c48d40d49d35d05a8087fdd1114ebf49b28d1b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c686f276_37182ed5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-02-14T06:02:30Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "4a666327_c0360bca",
      "tag": "autogenerated:trybots~happy",
      "revId": "11c48d40d49d35d05a8087fdd1114ebf49b28d1b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "58276e7c_16c5cccd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 13550
      },
      "writtenOn": "2022-02-14T09:49:30Z",
      "side": 1,
      "message": "First and foremost: the biggest regression here is that we unintentionally removed the file closing, thus leaking files. That causes problems with enough input files no matter how we tweak the parallelism. So we definitely want that fix.\n\nAs for the parallelism tweaking:\n\nUsing a minimum weight is a clever way to fix this without adding much more complexity, but it\u0027s also a tradeoff. If we have 50 files with medium weights and 50 files with tiny weights which currently all fit in the semaphore at once, and you raise the weight of the tiny files via the minimum weight, we may now format only 60 or so files at once.\n\nYou are indeed setting a hard limit on 100 files open at once, for the edge case where all the input files are tiny, which is good. It\u0027s just unfortunate that it also reduces parallelism in cases where we weren\u0027t opening too many files to begin with.\n\nI think that tradeoff is reasonable as long as we increase the limit; 100 feels too low. Some users may have a ulimit of 256 due to Mac, so we want to be under 256. We also close the input file before writing its result out, meaning we only hold at most one open file per Go file being processed. So it seems to me like we could get away with a hard limit of 240 or so.\n\nFinally, two thoughts:\n\n1) How have you tested this? Perhaps we should write a test that runs \"gofmt -l\" on five thousand tiny Go files, and ensures that we don\u0027t fail. I don\u0027t see another way to reliably ensure that this works on systems with low limits, such as Mac.\n\n2) Have you benchmarked this? In the CLs that added parallelism, we measured the improvement with benchcmd. I\u0027d like to see that this doesn\u0027t mean a significant regression in terms of performance.",
      "revId": "11c48d40d49d35d05a8087fdd1114ebf49b28d1b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "62f3f545_0d23d5bc",
        "filename": "src/cmd/gofmt/gofmt.go",
        "patchSetId": 2
      },
      "lineNbr": 228,
      "author": {
        "id": 13550
      },
      "writtenOn": "2022-02-14T09:54:45Z",
      "side": 1,
      "message": "you still need a `defer inf.Close()` here, because we may return before reaching the `inf.Close` call below in some cases. closing a *os.File twice is fine.",
      "revId": "11c48d40d49d35d05a8087fdd1114ebf49b28d1b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0e333bac_2e59e519",
        "filename": "src/cmd/gofmt/gofmt.go",
        "patchSetId": 2
      },
      "lineNbr": 269,
      "author": {
        "id": 13550
      },
      "writtenOn": "2022-02-14T09:54:45Z",
      "side": 1,
      "message": "I\u0027d document why we\u0027re closing the file here. I assume it\u0027s because we don\u0027t need it anymore, and to avoid having two versions of the file open at the same time, as we may use WriteFile further down.",
      "revId": "11c48d40d49d35d05a8087fdd1114ebf49b28d1b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}