{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "ef956389_2ef0e7df",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-07-03T20:52:27Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003d47449b17\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "47449b17992b90f0e83feb89e775fba6cc87e0d0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b2fedece_64b95a7b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-07-03T21:03:15Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "ef956389_2ef0e7df",
      "tag": "autogenerated:trybots~happy",
      "revId": "47449b17992b90f0e83feb89e775fba6cc87e0d0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "17700ed5_9b767c2e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5200
      },
      "writtenOn": "2023-07-26T17:35:45Z",
      "side": 1,
      "message": "Ping",
      "revId": "47449b17992b90f0e83feb89e775fba6cc87e0d0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "13af5410_99f01439",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5137
      },
      "writtenOn": "2023-10-31T22:51:01Z",
      "side": 1,
      "message": "Nice work Keith and long time! Just a drive-by alternative comment but otherwise LGTM, thanks for working on the traceback code, I had an interest in it 2 years ago but I got so swamped, so nice to see you touch it up.",
      "revId": "47449b17992b90f0e83feb89e775fba6cc87e0d0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "149b0d5f_5449c336",
        "filename": "src/runtime/traceback.go",
        "patchSetId": 1
      },
      "lineNbr": 1157,
      "author": {
        "id": 13315
      },
      "writtenOn": "2023-11-01T01:02:35Z",
      "side": 1,
      "message": "This doesn\u0027t handle value (non-pointer) receivers. Maybe we don\u0027t have exported value methods?",
      "range": {
        "startLine": 1157,
        "startChar": 0,
        "endLine": 1157,
        "endChar": 20
      },
      "revId": "47449b17992b90f0e83feb89e775fba6cc87e0d0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2eb15052_1fe6c54b",
        "filename": "src/runtime/traceback.go",
        "patchSetId": 1
      },
      "lineNbr": 1162,
      "author": {
        "id": 13315
      },
      "writtenOn": "2023-11-01T01:02:35Z",
      "side": 1,
      "message": "Maybe check that the type is exported? There could be methods starting with uppercase letters but on an unexported type. Not sure if we have any. Technically we could have a non-exported type exported through a global variable, but I don\u0027t think we have any of those in the runtime.",
      "range": {
        "startLine": 1160,
        "startChar": 0,
        "endLine": 1162,
        "endChar": 3
      },
      "revId": "47449b17992b90f0e83feb89e775fba6cc87e0d0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "55516ab9_12614043",
        "filename": "src/runtime/traceback.go",
        "patchSetId": 1
      },
      "lineNbr": 1171,
      "author": {
        "id": 5137
      },
      "writtenOn": "2023-10-31T22:51:01Z",
      "side": 1,
      "message": "Alternatively, for easy reading and natural reading, given that we know majority of the names will be well formatted (except in error), could we perhaps just search from the end until we encounter the closing \".\" so:\n\n\tif name[n] \u003d\u003d \u0027(\u0027 {\n\t\t// Search from the terminal end of the name until we encounter \".\"\n\t\ti :\u003d len(name) - 1\n\t\tfor i \u003e\u003d 0 \u0026\u0026 name[i] !\u003d \u0027.\u0027 {\n\t\t\ti--\n\t\t}\n\t\tif i \u003c 0 || i \u003e\u003d len(name)-1 || name[i] !\u003d \u0027.\u0027 || name[i-1] !\u003d \u0027)\u0027 {\n\t\t\treturn false\n\t\t}\n\t\tn \u003d i + 1\n\t}",
      "range": {
        "startLine": 1155,
        "startChar": 1,
        "endLine": 1171,
        "endChar": 2
      },
      "revId": "47449b17992b90f0e83feb89e775fba6cc87e0d0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "09c70354_dcfac647",
        "filename": "src/runtime/traceback.go",
        "patchSetId": 1
      },
      "lineNbr": 1172,
      "author": {
        "id": 13315
      },
      "writtenOn": "2023-11-01T01:02:35Z",
      "side": 1,
      "message": "Technically there could also be closures, which would be considered as unexported? Maybe it is fine not to handle those. The old code doesn\u0027t either.",
      "revId": "47449b17992b90f0e83feb89e775fba6cc87e0d0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}