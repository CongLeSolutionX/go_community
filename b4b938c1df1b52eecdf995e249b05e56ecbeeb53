{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "be4f63f6_f9ea1ca8",
        "filename": "src/cmd/compile/internal/typecheck/builtin/runtime.go",
        "patchSetId": 1
      },
      "lineNbr": 271,
      "author": {
        "id": 5200
      },
      "writtenOn": "2022-03-02T00:01:11Z",
      "side": 1,
      "message": "Is this something exported from package runtime? I don\u0027t think we want to expose that to random users. We need some sort of unexposed way of calling it, either an internal package or linkname tricks.",
      "revId": "b4b938c1df1b52eecdf995e249b05e56ecbeeb53",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "debbf1d0_63d79677",
        "filename": "src/cmd/compile/internal/typecheck/builtin/runtime.go",
        "patchSetId": 1
      },
      "lineNbr": 271,
      "author": {
        "id": 56363
      },
      "writtenOn": "2022-03-06T14:07:50Z",
      "side": 1,
      "message": "I\u0027ve made this function private and called in in an init function from the runtime library. This makes sure that is properly called when the libFuzzer mode is used. WDYT?",
      "parentUuid": "be4f63f6_f9ea1ca8",
      "revId": "b4b938c1df1b52eecdf995e249b05e56ecbeeb53",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f51a95db_15a1f26d",
        "filename": "src/cmd/compile/internal/typecheck/builtin/runtime.go",
        "patchSetId": 1
      },
      "lineNbr": 271,
      "author": {
        "id": 6875
      },
      "writtenOn": "2022-03-15T21:09:33Z",
      "side": 1,
      "message": "This will work, but I don\u0027t think it is quite what we want. Because it is in an init in the runtime, it will always be called even when we\u0027re not fuzzing. Or even testing. It will be in every Go binary, which I think we want to avoid.\n\nProbably this should be called from an init() in package testing, using linkname tricks to get around visibility. Then the referenced method will only be linked into and run in testing binaries.",
      "parentUuid": "debbf1d0_63d79677",
      "revId": "b4b938c1df1b52eecdf995e249b05e56ecbeeb53",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "168a05ce_186c70b4",
        "filename": "src/cmd/compile/internal/typecheck/builtin/runtime.go",
        "patchSetId": 1
      },
      "lineNbr": 271,
      "author": {
        "id": 56363
      },
      "writtenOn": "2022-03-17T17:20:00Z",
      "side": 1,
      "message": "Would it be always called? If I see it correctly, the file `src/runtime/libfuzzer.go` where I put the `init` function has the libfuzzer build tag. This means that it will only be considered when we are in libfuzzer mode. Or have I missed something?",
      "parentUuid": "f51a95db_15a1f26d",
      "revId": "b4b938c1df1b52eecdf995e249b05e56ecbeeb53",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5d2a88d9_0817d84e",
        "filename": "src/cmd/compile/internal/walk/order.go",
        "patchSetId": 1
      },
      "lineNbr": 454,
      "author": {
        "id": 5200
      },
      "writtenOn": "2022-03-02T00:01:11Z",
      "side": 1,
      "message": "This is unnecessarily convoluted. There\u0027s exactly one entry in init here. You could just do:\n\no.append(mkcall(...))",
      "revId": "b4b938c1df1b52eecdf995e249b05e56ecbeeb53",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0dec7387_5069be7b",
        "filename": "src/cmd/compile/internal/walk/order.go",
        "patchSetId": 1
      },
      "lineNbr": 454,
      "author": {
        "id": 56363
      },
      "writtenOn": "2022-03-06T14:07:50Z",
      "side": 1,
      "message": "Thanks for the tip. I changed that in a dedicated commit.",
      "parentUuid": "5d2a88d9_0817d84e",
      "revId": "b4b938c1df1b52eecdf995e249b05e56ecbeeb53",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "70f75219_497ea0f8",
        "filename": "src/cmd/compile/internal/walk/order.go",
        "patchSetId": 1
      },
      "lineNbr": 454,
      "author": {
        "id": 6875
      },
      "writtenOn": "2022-03-15T21:09:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0dec7387_5069be7b",
      "revId": "b4b938c1df1b52eecdf995e249b05e56ecbeeb53",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ff30a766_02d743d9",
        "filename": "src/cmd/compile/internal/walk/order.go",
        "patchSetId": 1
      },
      "lineNbr": 458,
      "author": {
        "id": 5200
      },
      "writtenOn": "2022-03-02T00:01:11Z",
      "side": 1,
      "message": "This is another case of slowdown, replacing a single instruction with a function call. Do you know how expensive this will be?",
      "revId": "b4b938c1df1b52eecdf995e249b05e56ecbeeb53",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "81429479_ce3d1048",
        "filename": "src/cmd/compile/internal/walk/order.go",
        "patchSetId": 1
      },
      "lineNbr": 458,
      "author": {
        "id": 56363
      },
      "writtenOn": "2022-03-06T14:07:50Z",
      "side": 1,
      "message": "We haven\u0027t performed any profiling to check the slowdown. I\u0027ve replaced the function call with the actual logic. This means that the that function is not needed in the runtime",
      "parentUuid": "ff30a766_02d743d9",
      "revId": "b4b938c1df1b52eecdf995e249b05e56ecbeeb53",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b251af57_1f808401",
        "filename": "src/cmd/compile/internal/walk/order.go",
        "patchSetId": 1
      },
      "lineNbr": 458,
      "author": {
        "id": 6875
      },
      "writtenOn": "2022-03-15T21:09:33Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "81429479_ce3d1048",
      "revId": "b4b938c1df1b52eecdf995e249b05e56ecbeeb53",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9db9b194_1df77996",
        "filename": "src/internal/fuzz/trace.go",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 5200
      },
      "writtenOn": "2022-03-02T00:01:11Z",
      "side": 1,
      "message": "I think here is where you should also handle libfuzzerInitializeCounters so that it doesn\u0027t need to be exported from runtime.",
      "revId": "b4b938c1df1b52eecdf995e249b05e56ecbeeb53",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "18ea0b33_71fbad3e",
        "filename": "src/internal/fuzz/trace.go",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 56363
      },
      "writtenOn": "2022-03-06T14:07:50Z",
      "side": 1,
      "message": "This is fixed by making the function private and calling it in an init function from the runtime package",
      "parentUuid": "9db9b194_1df77996",
      "revId": "b4b938c1df1b52eecdf995e249b05e56ecbeeb53",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e78a12d2_71f577e2",
        "filename": "src/internal/fuzz/trace.go",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 56363
      },
      "writtenOn": "2022-03-17T17:20:00Z",
      "side": 1,
      "message": "This function is now completely removed and replaced by inlining the code that increments the coverage counter.",
      "parentUuid": "18ea0b33_71fbad3e",
      "revId": "b4b938c1df1b52eecdf995e249b05e56ecbeeb53",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8b13a156_3ef73853",
        "filename": "src/runtime/libfuzzer.go",
        "patchSetId": 1
      },
      "lineNbr": 68,
      "author": {
        "id": 5200
      },
      "writtenOn": "2022-03-02T00:01:11Z",
      "side": 1,
      "message": "I\u0027m surprised this is wraparound-to-1 - I would have expected saturating at 0xff. Is there a short explanation you could put here, or does it require reading that paper?",
      "revId": "b4b938c1df1b52eecdf995e249b05e56ecbeeb53",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "493580ea_1c1e5c29",
        "filename": "src/runtime/libfuzzer.go",
        "patchSetId": 1
      },
      "lineNbr": 68,
      "author": {
        "id": 56363
      },
      "writtenOn": "2022-03-06T14:07:50Z",
      "side": 1,
      "message": "I\u0027ve added a comment in the code illustrates the choice.\n\nI\u0027ll post the relevant section from the paper here: \nNeverZero Orthogonally to the backend used for instrumentation, we developed an optimization to the hitcount mechanism of AFL. One problem of using a byte for the\nbitmap entries is, that the count of the edge executions can overflow. When this happens, we observed that if an edge is hit in multiples of 256 — overflowing the corresponding bitmap entry to 0 — the fuzzer is in an inconsistent state. We tried to solve this problem with two solutions, NeverZero, and Saturated Counters. The first avoids the overflow to 0 always adding the carry flag to the bitmap entry and so, if an edge is executed at least one time, the entry is never 0. The second freezes the counter when it reaches the value of 255. In a range of experiments, we observed that NeverZero is very effective and improves AFL in terms of coverage and\nspeed (the seed selection now takes into account edges that were hidden before). Saturated Counters, however, decreases AFL’s overall performance. We opted to make NeverZero the default for AFL++ on most of the available instrumentations. Saturated Counters are still available in a branch of the AFL++ repository for further research or reproduction.",
      "parentUuid": "8b13a156_3ef73853",
      "revId": "b4b938c1df1b52eecdf995e249b05e56ecbeeb53",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "91b39801_b5a35e9c",
        "filename": "src/runtime/libfuzzer.go",
        "patchSetId": 1
      },
      "lineNbr": 68,
      "author": {
        "id": 6875
      },
      "writtenOn": "2022-03-15T21:09:33Z",
      "side": 1,
      "message": "Good, thanks.",
      "parentUuid": "493580ea_1c1e5c29",
      "revId": "b4b938c1df1b52eecdf995e249b05e56ecbeeb53",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d7691a9c_fb138ffb",
        "filename": "src/runtime/libfuzzer_amd64.s",
        "patchSetId": 1
      },
      "lineNbr": 46,
      "author": {
        "id": 5200
      },
      "writtenOn": "2022-03-02T00:01:11Z",
      "side": 1,
      "message": "There\u0027s nothing really \"init\" about this, it is just a generic 2-arg wrapper for calling into libFuzzer. A better name might be appropriate.",
      "revId": "b4b938c1df1b52eecdf995e249b05e56ecbeeb53",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "67dcf51a_ace0067c",
        "filename": "src/runtime/libfuzzer_amd64.s",
        "patchSetId": 1
      },
      "lineNbr": 46,
      "author": {
        "id": 56363
      },
      "writtenOn": "2022-03-06T14:07:50Z",
      "side": 1,
      "message": "I changed it to libfuzzerCallWithTwoByteBuffers. WDYT?",
      "parentUuid": "d7691a9c_fb138ffb",
      "revId": "b4b938c1df1b52eecdf995e249b05e56ecbeeb53",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "026a4f87_3f166b19",
        "filename": "src/runtime/libfuzzer_amd64.s",
        "patchSetId": 1
      },
      "lineNbr": 46,
      "author": {
        "id": 6875
      },
      "writtenOn": "2022-03-15T21:09:33Z",
      "side": 1,
      "message": "Looks fine.",
      "parentUuid": "67dcf51a_ace0067c",
      "revId": "b4b938c1df1b52eecdf995e249b05e56ecbeeb53",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}