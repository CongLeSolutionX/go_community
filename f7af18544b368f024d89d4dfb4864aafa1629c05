{
  "comments": [
    {
      "key": {
        "uuid": "2ba19b5e_62f0123b",
        "filename": "src/path/filepath/path_windows.go",
        "patchSetId": 13
      },
      "lineNbr": 125,
      "author": {
        "id": 5888
      },
      "writtenOn": "2015-01-16T20:06:40Z",
      "side": 1,
      "message": "I believe this is too complex. In addition, this forces an extra call to FromSlash and volumeNameLen during the common case. It still cannot be used to create a UNC path because it requires the first element to be a full UNC path. What does the added complexity fix over patch set 10? I think we should just be fixing the one case where the first element is a slash.",
      "revId": "f7af18544b368f024d89d4dfb4864aafa1629c05",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cbbf1f8b_0cccf7f8",
        "filename": "src/path/filepath/path_windows.go",
        "patchSetId": 13
      },
      "lineNbr": 125,
      "author": {
        "id": 5070
      },
      "writtenOn": "2015-01-18T04:47:17Z",
      "side": 1,
      "message": "I agree the code is bit complicated. It also should be as fast as possible (and do not allocate memory) for most common case. I tried to do something like that here http://play.golang.org/p/uMDqQxjzcH I suggest you use my code instead. Feel free to improve it as you see fit.",
      "parentUuid": "2ba19b5e_62f0123b",
      "revId": "f7af18544b368f024d89d4dfb4864aafa1629c05",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cbd63fdb_34b33ede",
        "filename": "src/path/filepath/path_windows.go",
        "patchSetId": 13
      },
      "lineNbr": 125,
      "author": {
        "id": 5555
      },
      "writtenOn": "2015-01-18T19:32:38Z",
      "side": 1,
      "message": "http://play.golang.org/p/uMDqQxjzcH looks good.\n\nHowever, line 29 will always evaluate to false.\n\nReasoning:\n - at line 29, we know that p is a UNC path\n - at line 29, we know that the first element is NOT a UNC path\n\nHence, we can deduce that the two first elements have created a UNC path.\n\nWe can also deduce that rest[0] !\u003d \u0027\\\\\u0027 on line 29.\nBecause if rest[0] \u003d\u003d \u0027\\\\\u0027, it would have resulted in a `\\\\` prefix for\nelem[1:] on line 16 since we are joining with Separator. That would not\nhave been a UNC path and p would have been returned on line 20.",
      "parentUuid": "cbbf1f8b_0cccf7f8",
      "revId": "f7af18544b368f024d89d4dfb4864aafa1629c05",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}