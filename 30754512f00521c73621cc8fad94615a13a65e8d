{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "2c7bd524_15b35ccc",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 3300238
      },
      "writtenOn": "2024-09-09T19:31:15Z",
      "side": 1,
      "message": "Thank you for the notification!\n\n\u003e This is causing some internal Google tests to fail.\n\nI guess we cannot have more details about them, and what they are doing, right?\n\n\u003e I would be happy to hear suggestions for what to look for.\n\nIt would be good to check the kernel version, and check if it is up to date. Then check what networking features are being used, if there are any socket options being set/checked. Maybe some verifications are too specific to TCP, and need to be adapted when MPTCP is used?\n\n\u003e Those tests pass with GODEBUG\u003dmultipathtcp\u003d0, GODEBUG\u003dmultipathtcp\u003d1, and GODEBUG\u003dmultipathtcp\u003d3\n\nThat\u0027s surprising they pass with 1 (enabled for dialers and listeners), but not with 2 (enabled only for listeners): 2 should be a safe option, because the kernel will create a TCP socket when the client doesn\u0027t request to use MPTCP. In other words, in this case, there is no behaviour changes, only when the client asks to use MPTCP.",
      "revId": "30754512f00521c73621cc8fad94615a13a65e8d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3153a300_399fd2b4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 5206
      },
      "writtenOn": "2024-09-09T21:02:37Z",
      "side": 1,
      "message": "The strange thing is that they aren\u0027t doing anything very complicated.  They are starting a server and connecting to it, and the connect fails.\n\nActually, looking at one of the failures more closely, it looks like this may be a timing problem in the test.  The code is running, essentially\n\n    go func() { httpServer.ListenAndServer() }()\n    http.Get(addr)\n\nBut there isn\u0027t anything that ensures that the server is actually running and listening before the http.Get.  If MPTCP takes noticeably longer to set up in the kernel, then the problem may be that an inherently flaky test becomes significantly more flaky when using MPTCP.\n\nI\u0027ve put this CL on hold while I look further.",
      "parentUuid": "2c7bd524_15b35ccc",
      "revId": "30754512f00521c73621cc8fad94615a13a65e8d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3f483e52_f8aba587",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 6005
      },
      "writtenOn": "2024-09-09T20:12:16Z",
      "side": 1,
      "message": "Thanks.",
      "revId": "30754512f00521c73621cc8fad94615a13a65e8d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}