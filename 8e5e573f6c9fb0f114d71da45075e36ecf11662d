{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "d3b62856_b1b132be",
        "filename": "src/cmd/compile/internal/ir/type.go",
        "patchSetId": 2
      },
      "lineNbr": 56,
      "author": {
        "id": 5440
      },
      "writtenOn": "2020-11-30T17:49:44Z",
      "side": 1,
      "message": "The docs above call this setOTYPE?",
      "range": {
        "startLine": 56,
        "startChar": 19,
        "endLine": 56,
        "endChar": 26
      },
      "revId": "8e5e573f6c9fb0f114d71da45075e36ecf11662d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2a29b077_316d74d9",
        "filename": "src/cmd/compile/internal/ir/type.go",
        "patchSetId": 2
      },
      "lineNbr": 56,
      "author": {
        "id": 5056
      },
      "writtenOn": "2020-12-01T01:46:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d3b62856_b1b132be",
      "range": {
        "startLine": 56,
        "startChar": 19,
        "endLine": 56,
        "endChar": 26
      },
      "revId": "8e5e573f6c9fb0f114d71da45075e36ecf11662d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "553d5f58_54df7dc6",
        "filename": "src/cmd/compile/internal/ir/type.go",
        "patchSetId": 2
      },
      "lineNbr": 96,
      "author": {
        "id": 5440
      },
      "writtenOn": "2020-11-30T17:49:44Z",
      "side": 1,
      "message": "If n is already an OTYPE, won\u0027t this turn it back into an OTCHAN? (Similarly for the DeepCopy methods below.) Or do we only ever DeepCopy type expressions before type-checking?",
      "revId": "8e5e573f6c9fb0f114d71da45075e36ecf11662d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cb1f32fe_2e54afa9",
        "filename": "src/cmd/compile/internal/ir/type.go",
        "patchSetId": 2
      },
      "lineNbr": 96,
      "author": {
        "id": 5056
      },
      "writtenOn": "2020-11-30T17:55:27Z",
      "side": 1,
      "message": "Nice catch, thanks.\n\nThe original use for DeepCopy was making copies of implicit const initializers, which wouldn\u0027t be affected here. But I think maybe I could make a test case that would trigger the difference in the other use of DeepCopy turning L op\u003d R into L \u003d L op R. Will dig into this.",
      "parentUuid": "553d5f58_54df7dc6",
      "revId": "8e5e573f6c9fb0f114d71da45075e36ecf11662d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b5a2b293_25d5efde",
        "filename": "src/cmd/compile/internal/ir/type.go",
        "patchSetId": 2
      },
      "lineNbr": 96,
      "author": {
        "id": 5056
      },
      "writtenOn": "2020-11-30T19:02:58Z",
      "side": 1,
      "message": "I didn\u0027t manage to make a test case but I handled the OTYPE case anyway in each DeepCopy method. (If the node has collapsed to OTYPE, there are no nodes left, so the \"copy\" need not be a copy at all. treecopy never copied OTYPE nodes before.)",
      "parentUuid": "cb1f32fe_2e54afa9",
      "revId": "8e5e573f6c9fb0f114d71da45075e36ecf11662d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3fdd73be_eb4e80a0",
        "filename": "src/cmd/compile/internal/ir/type.go",
        "patchSetId": 2
      },
      "lineNbr": 99,
      "author": {
        "id": 5440
      },
      "writtenOn": "2020-11-30T17:49:44Z",
      "side": 1,
      "message": "nit: typo",
      "range": {
        "startLine": 99,
        "startChar": 52,
        "endLine": 99,
        "endChar": 53
      },
      "revId": "8e5e573f6c9fb0f114d71da45075e36ecf11662d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "92e32b8c_0955dc02",
        "filename": "src/cmd/compile/internal/ir/type.go",
        "patchSetId": 2
      },
      "lineNbr": 99,
      "author": {
        "id": 5056
      },
      "writtenOn": "2020-12-01T01:46:01Z",
      "side": 1,
      "message": "Missed this, will slip into a future CL. Sorry.",
      "parentUuid": "3fdd73be_eb4e80a0",
      "range": {
        "startLine": 99,
        "startChar": 52,
        "endLine": 99,
        "endChar": 53
      },
      "revId": "8e5e573f6c9fb0f114d71da45075e36ecf11662d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c64ad23a_5c565b41",
        "filename": "src/cmd/compile/internal/ir/type.go",
        "patchSetId": 2
      },
      "lineNbr": 188,
      "author": {
        "id": 5440
      },
      "writtenOn": "2020-11-30T17:49:44Z",
      "side": 1,
      "message": "Please name these \"Recv\" and \"Params\" like go/ast.",
      "revId": "8e5e573f6c9fb0f114d71da45075e36ecf11662d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a2cfe999_dd1ff52f",
        "filename": "src/cmd/compile/internal/ir/type.go",
        "patchSetId": 2
      },
      "lineNbr": 188,
      "author": {
        "id": 5056
      },
      "writtenOn": "2020-11-30T17:55:27Z",
      "side": 1,
      "message": "Thanks for pointing this out. I\u0027ll do a pass through all the types in all the CLs comparing against go/ast and updating.",
      "parentUuid": "c64ad23a_5c565b41",
      "revId": "8e5e573f6c9fb0f114d71da45075e36ecf11662d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "677225bf_d29ad64c",
        "filename": "src/cmd/compile/internal/ir/type.go",
        "patchSetId": 2
      },
      "lineNbr": 188,
      "author": {
        "id": 5440
      },
      "writtenOn": "2020-11-30T18:18:43Z",
      "side": 1,
      "message": "SGTM. I\u0027ve been generally trying to slowly move the compiler towards the same names that go/types and go/ast used where appropriate. (Sometimes they\u0027re inconsistent though, and I tend to favor go/types; e.g., \"Elem\" over \"Elt\".)",
      "parentUuid": "a2cfe999_dd1ff52f",
      "revId": "8e5e573f6c9fb0f114d71da45075e36ecf11662d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ed756455_ee924304",
        "filename": "src/cmd/compile/internal/ir/type.go",
        "patchSetId": 2
      },
      "lineNbr": 188,
      "author": {
        "id": 5056
      },
      "writtenOn": "2020-11-30T19:02:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "677225bf_d29ad64c",
      "revId": "8e5e573f6c9fb0f114d71da45075e36ecf11662d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3b937b38_b44dcbf5",
        "filename": "src/cmd/compile/internal/ir/type.go",
        "patchSetId": 2
      },
      "lineNbr": 299,
      "author": {
        "id": 5440
      },
      "writtenOn": "2020-11-30T17:49:44Z",
      "side": 1,
      "message": "Please name this \"Len\" like go/ast. (\"Size\" suggests a byte count.)",
      "range": {
        "startLine": 299,
        "startChar": 1,
        "endLine": 299,
        "endChar": 5
      },
      "revId": "8e5e573f6c9fb0f114d71da45075e36ecf11662d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "449bfaee_1e15ba4f",
        "filename": "src/cmd/compile/internal/ir/type.go",
        "patchSetId": 2
      },
      "lineNbr": 299,
      "author": {
        "id": 5056
      },
      "writtenOn": "2020-12-01T01:46:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3b937b38_b44dcbf5",
      "range": {
        "startLine": 299,
        "startChar": 1,
        "endLine": 299,
        "endChar": 5
      },
      "revId": "8e5e573f6c9fb0f114d71da45075e36ecf11662d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}