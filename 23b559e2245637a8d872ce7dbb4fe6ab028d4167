{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "095733ce_e447814f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 55763
      },
      "writtenOn": "2023-07-29T15:16:52Z",
      "side": 1,
      "message": "Also as an other TODO for a later CL, this code does not work with unsigned integers because findIndVars do not search for unsigned integers.\nI\u0027m not sure why is so, I\u0027ve noticed that prove is able to do BCE for unsigned integers with loops so my guess is that having numbers that start at zero is easier to deal with and do not require findIndVars or something.",
      "revId": "23b559e2245637a8d872ce7dbb4fe6ab028d4167",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ad7fbeb1_8cd09be6",
        "filename": "src/cmd/compile/internal/ssa/loopbce.go",
        "patchSetId": 10
      },
      "lineNbr": 32,
      "author": {
        "id": 5200
      },
      "writtenOn": "2023-07-28T22:46:53Z",
      "side": 1,
      "message": "I think it might be enough to keep track of just direction (increasing or decreasing). The actual step value doesn\u0027t matter.\nThen you could add it to flags?",
      "revId": "23b559e2245637a8d872ce7dbb4fe6ab028d4167",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f1e72cf4_bfbb3df1",
        "filename": "src/cmd/compile/internal/ssa/loopbce.go",
        "patchSetId": 10
      },
      "lineNbr": 32,
      "author": {
        "id": 55763
      },
      "writtenOn": "2023-07-29T15:13:34Z",
      "side": 1,
      "message": "This is a relic of when I tried to rewrite something like this:\n```\nfor i :\u003d 2; i \u003c 10; i +\u003d 2 { ... }\n```\ninto:\n```\nfor i :\u003d 4; 0 \u003c i; i-- { ... }\n```\nI\u0027ll add to flag given I\u0027m not sending this code.",
      "parentUuid": "ad7fbeb1_8cd09be6",
      "revId": "23b559e2245637a8d872ce7dbb4fe6ab028d4167",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8aeb5b66_4fb6e423",
        "filename": "src/cmd/compile/internal/ssa/loopbce.go",
        "patchSetId": 10
      },
      "lineNbr": 32,
      "author": {
        "id": 55763
      },
      "writtenOn": "2023-07-30T10:59:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f1e72cf4_bfbb3df1",
      "revId": "23b559e2245637a8d872ce7dbb4fe6ab028d4167",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7a791aa2_f93244b0",
        "filename": "src/cmd/compile/internal/ssa/prove.go",
        "patchSetId": 10
      },
      "lineNbr": 801,
      "author": {
        "id": 5200
      },
      "writtenOn": "2023-07-28T22:46:53Z",
      "side": 1,
      "message": "Maybe move this to a separate function?\n\nindVars :\u003d buildIndVars(f)",
      "revId": "23b559e2245637a8d872ce7dbb4fe6ab028d4167",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b7550f2f_d46ef5cb",
        "filename": "src/cmd/compile/internal/ssa/prove.go",
        "patchSetId": 10
      },
      "lineNbr": 801,
      "author": {
        "id": 55763
      },
      "writtenOn": "2023-07-30T10:59:39Z",
      "side": 1,
      "message": "I\u0027ve considered it but I don\u0027t think this makes the code clearer.\nIf this code was hoisted out there would be a weird relationship between buildIndVars and prove because this logic do stuff explicitely because it knows prove wont do anything intresting with it.\n\nA better name for this function would be:\n```\nindVars :\u003d buildIndVarsButRewriteAndOmitThemIfTheyCantBeUsedToProveAnything(f)\n```\nwhich is a higher level of coupling than I usually have.\n\nThis loop is also much clearer now, please look again, if you still think should be a function then let\u0027s make a function.",
      "parentUuid": "7a791aa2_f93244b0",
      "revId": "23b559e2245637a8d872ce7dbb4fe6ab028d4167",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "58fd9123_0eef530c",
        "filename": "src/cmd/compile/internal/ssa/prove.go",
        "patchSetId": 10
      },
      "lineNbr": 801,
      "author": {
        "id": 55763
      },
      "writtenOn": "2023-07-31T16:55:38Z",
      "side": 1,
      "message": "https://go-review.googlesource.com/c/go/+/512935/comments/272f8575_e4b5e8bd",
      "parentUuid": "b7550f2f_d46ef5cb",
      "revId": "23b559e2245637a8d872ce7dbb4fe6ab028d4167",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "94e48cf5_6d6051e9",
        "filename": "src/cmd/compile/internal/ssa/prove.go",
        "patchSetId": 10
      },
      "lineNbr": 819,
      "author": {
        "id": 5200
      },
      "writtenOn": "2023-07-28T22:46:53Z",
      "side": 1,
      "message": "Remove \"s\"",
      "range": {
        "startLine": 819,
        "startChar": 33,
        "endLine": 819,
        "endChar": 34
      },
      "revId": "23b559e2245637a8d872ce7dbb4fe6ab028d4167",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "44ff4670_d2c5cff1",
        "filename": "src/cmd/compile/internal/ssa/prove.go",
        "patchSetId": 10
      },
      "lineNbr": 819,
      "author": {
        "id": 55763
      },
      "writtenOn": "2023-07-30T10:59:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "94e48cf5_6d6051e9",
      "range": {
        "startLine": 819,
        "startChar": 33,
        "endLine": 819,
        "endChar": 34
      },
      "revId": "23b559e2245637a8d872ce7dbb4fe6ab028d4167",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "188b4fb0_c2e1597e",
        "filename": "src/cmd/compile/internal/ssa/prove.go",
        "patchSetId": 10
      },
      "lineNbr": 852,
      "author": {
        "id": 5200
      },
      "writtenOn": "2023-07-28T22:46:53Z",
      "side": 1,
      "message": "This might not get so indented if you do\n\nnxt :\u003d v.nxt\nif ind.Uses !\u003d 2 || nxt.Uses !\u003d 1 { continue }\nif start.Op !\u003d .... { continue }",
      "revId": "23b559e2245637a8d872ce7dbb4fe6ab028d4167",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "28333240_924f724c",
        "filename": "src/cmd/compile/internal/ssa/prove.go",
        "patchSetId": 10
      },
      "lineNbr": 852,
      "author": {
        "id": 55763
      },
      "writtenOn": "2023-07-29T15:13:34Z",
      "side": 1,
      "message": "I don\u0027t understand what you mean, your code looks incorrect because AFAIT it never adds any loop induction variables to the facts table.\n\nI agree my if is not very pretty here but we can\u0027t do a simple \"happy left\" with early continue blocks without having either the loop invertion or the facts table update, so at least one, maybe boths needs to be indented.\n\nI\u0027ll invert since now that I think about it I think it\u0027s more readable but I\u0027m not sure I understand what you mean.",
      "parentUuid": "188b4fb0_c2e1597e",
      "revId": "23b559e2245637a8d872ce7dbb4fe6ab028d4167",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "16e987b8_508247e1",
        "filename": "src/cmd/compile/internal/ssa/prove.go",
        "patchSetId": 10
      },
      "lineNbr": 852,
      "author": {
        "id": 5200
      },
      "writtenOn": "2023-07-29T21:06:59Z",
      "side": 1,
      "message": "Yes, sorry, you\u0027re right, they need to go into the indVars map if we don\u0027t rewrite them.\nMaybe there\u0027s some way to make that happen by separating things out into separate function(s). But just my raw suggestion isn\u0027t right.",
      "parentUuid": "28333240_924f724c",
      "revId": "23b559e2245637a8d872ce7dbb4fe6ab028d4167",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a6a4a212_7f9fba5c",
        "filename": "src/cmd/compile/internal/ssa/prove.go",
        "patchSetId": 10
      },
      "lineNbr": 852,
      "author": {
        "id": 55763
      },
      "writtenOn": "2023-07-30T10:59:39Z",
      "side": 1,
      "message": "I\u0027ve inverted most of the if checks, it looks much better now.",
      "parentUuid": "16e987b8_508247e1",
      "revId": "23b559e2245637a8d872ce7dbb4fe6ab028d4167",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "466fca2b_a6da1aba",
        "filename": "src/cmd/compile/internal/ssa/prove.go",
        "patchSetId": 10
      },
      "lineNbr": 854,
      "author": {
        "id": 5200
      },
      "writtenOn": "2023-07-28T23:26:34Z",
      "side": 1,
      "message": "What if both start and end are constants?\n\nfor i :\u003d 2; i \u003c 10; i++ { ... }\n\nProbably want to rewrite to 8-down-to-0.\n(In a separate CL.)",
      "revId": "23b559e2245637a8d872ce7dbb4fe6ab028d4167",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cfd28308_52be78a0",
        "filename": "src/cmd/compile/internal/ssa/prove.go",
        "patchSetId": 10
      },
      "lineNbr": 854,
      "author": {
        "id": 55763
      },
      "writtenOn": "2023-07-29T15:13:34Z",
      "side": 1,
      "message": "Right, the code currently is not smart about that.\nI did thought about doing exactly what you suggest here however it made the code more complex than it already is for little real world value (most programers start at zero and count up until a max in this case, so the current patch gets it right by chance).\n\nI\u0027m unclear about what I should do now, should in the current patch add a check to not do anything if both start and end are constants as a stop gap until someone make it smart about constants ?",
      "parentUuid": "466fca2b_a6da1aba",
      "revId": "23b559e2245637a8d872ce7dbb4fe6ab028d4167",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "48d9b508_5c8f7630",
        "filename": "src/cmd/compile/internal/ssa/prove.go",
        "patchSetId": 10
      },
      "lineNbr": 854,
      "author": {
        "id": 55763
      },
      "writtenOn": "2023-07-29T15:16:52Z",
      "side": 1,
      "message": "Note right in the performance sense, AFAIK this code always generate valid behaviours, if someone would happen to make a thing that count down this code would make it very slightly worse (move the bigger immediate value inside the loop) which is hard to notice.",
      "parentUuid": "cfd28308_52be78a0",
      "revId": "23b559e2245637a8d872ce7dbb4fe6ab028d4167",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cf8acc15_2e8bd293",
        "filename": "src/cmd/compile/internal/ssa/prove.go",
        "patchSetId": 10
      },
      "lineNbr": 854,
      "author": {
        "id": 5200
      },
      "writtenOn": "2023-07-29T21:06:59Z",
      "side": 1,
      "message": "Yeah, this isn\u0027t a huge deal either way, but I would err on the side of not rewriting if it isn\u0027t going thelp.",
      "parentUuid": "48d9b508_5c8f7630",
      "revId": "23b559e2245637a8d872ce7dbb4fe6ab028d4167",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f1d4eeab_9d9bc845",
        "filename": "src/cmd/compile/internal/ssa/prove.go",
        "patchSetId": 10
      },
      "lineNbr": 854,
      "author": {
        "id": 55763
      },
      "writtenOn": "2023-07-30T10:59:39Z",
      "side": 1,
      "message": "I\u0027ve added a skip if this is true and a todo that we could do better.",
      "parentUuid": "cf8acc15_2e8bd293",
      "revId": "23b559e2245637a8d872ce7dbb4fe6ab028d4167",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3b9e2f18_ae365281",
        "filename": "src/cmd/compile/internal/ssa/prove.go",
        "patchSetId": 10
      },
      "lineNbr": 940,
      "author": {
        "id": 5200
      },
      "writtenOn": "2023-07-28T22:46:53Z",
      "side": 1,
      "message": "This sentence is hard to parse. Maybe\n\nSince this induction variable is not used for anything but counting the loop,\nno point in putting it into the facts table.",
      "range": {
        "startLine": 940,
        "startChar": 6,
        "endLine": 940,
        "endChar": 108
      },
      "revId": "23b559e2245637a8d872ce7dbb4fe6ab028d4167",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d275384a_09c5a9b9",
        "filename": "src/cmd/compile/internal/ssa/prove.go",
        "patchSetId": 10
      },
      "lineNbr": 940,
      "author": {
        "id": 55763
      },
      "writtenOn": "2023-07-30T10:59:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3b9e2f18_ae365281",
      "range": {
        "startLine": 940,
        "startChar": 6,
        "endLine": 940,
        "endChar": 108
      },
      "revId": "23b559e2245637a8d872ce7dbb4fe6ab028d4167",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}