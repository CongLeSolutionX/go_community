{
  "comments": [
    {
      "key": {
        "uuid": "affa96d2_a430c7eb",
        "filename": "src/cmd/compile/internal/gc/align.go",
        "patchSetId": 7
      },
      "lineNbr": 183,
      "author": {
        "id": 5440
      },
      "writtenOn": "2020-09-29T01:57:26Z",
      "side": 1,
      "message": "What if we set t.SetBroke(true) after this error message? Does that make handling TFORW easier?\n\nAlso, go/types uses each respective type\u0027s position for the \"refers to\" lines, rather than putting them all at the first type\u0027s line. I recommend cmd/compile do the same.",
      "revId": "ea0c80349316714c0070766d293666066dc51efa",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7ef2d60d_3d9e6358",
        "filename": "src/cmd/compile/internal/gc/align.go",
        "patchSetId": 7
      },
      "lineNbr": 183,
      "author": {
        "id": 14665
      },
      "writtenOn": "2020-09-29T02:52:34Z",
      "side": 1,
      "message": "The main purpose of doing t.SetBroke(true) in this case is for providing us a way to detect that we hit the cycle. Otherwise, we will print errors on all lines in:\n\n```\ntype a b\ntype b c\ntype c b\n```\n\nWhile we only want to print error with b c in the cycle.\n\n\u003e Also, go/types uses each respective type\u0027s position for the \"refers to\" lines, rather than putting them all at the first type\u0027s line. I recommend cmd/compile do the same.\n\nI noticed that, too. But our problem is that when flusherrors will sort errors by line number, so errors will look like this:\n\n```\np.go:3:6: \ta refers to\np.go:4:6: invalid recursive type: b\np.go:4:6: \tb refers to\np.go:4:6: \tb\np.go:5:6: \tc refers to\n```\n\nwithout relying on type\u0027s position, errors will look like:\n\n```\np.go:4:6: invalid recursive type: b\np.go:4:6: \tb refers to\np.go:4:6: \tc refers to\np.go:4:6: \ta refers to\np.go:4:6: \tb\n```\n\nNote that in this case, we detect the cycle starting from b, instead of a like gotype:\n\n```\np.go:3:6: illegal cycle in declaration of a\np.go:3:6: \ta refers to\np.go:4:6: \tb refers to\np.go:5:6: \tc refers to\np.go:3:6: \ta\n\n```",
      "parentUuid": "affa96d2_a430c7eb",
      "revId": "ea0c80349316714c0070766d293666066dc51efa",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "42cc1ec8_ee958060",
        "filename": "src/cmd/compile/internal/gc/align.go",
        "patchSetId": 7
      },
      "lineNbr": 183,
      "author": {
        "id": 5440
      },
      "writtenOn": "2020-09-29T03:15:53Z",
      "side": 1,
      "message": "\u003e The main purpose of doing t.SetBroke(true) in this case is for providing us a way to detect that we hit the cycle.\n\nThe cycle is detected with t.Width\u003d\u003d-2. Setting Broke is to suppress unnecessary reports.\n\n\u003e I noticed that, too. But our problem is that when flusherrors will sort errors by line number\n\nAh, right. It should be fine to use a bytes.Buffer or something to build up a single multi-line string to report so the cycle stays ordered. E.g., see reportInitLoopAndExit in initorder.go.",
      "parentUuid": "7ef2d60d_3d9e6358",
      "revId": "ea0c80349316714c0070766d293666066dc51efa",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b061faa0_9045614d",
        "filename": "src/cmd/compile/internal/gc/align.go",
        "patchSetId": 7
      },
      "lineNbr": 183,
      "author": {
        "id": 14665
      },
      "writtenOn": "2020-09-29T03:29:55Z",
      "side": 1,
      "message": "\u003e The cycle is detected with t.Width\u003d\u003d-2. Setting Broke is to suppress unnecessary reports.\n\nHmm, as I understand, t.Width \u003d\u003d -2 only apply for compound variables, like struct, array ... when you call dowidth nested inside widstruct ...\n\nPrevious this CL, there\u0027re 2 places we detect the cycle, once with t.Width \u003d\u003d -2, once with t.Etype \u003d\u003d TFORW.",
      "parentUuid": "42cc1ec8_ee958060",
      "revId": "ea0c80349316714c0070766d293666066dc51efa",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "41bebd50_c2677c1a",
        "filename": "src/cmd/compile/internal/gc/align.go",
        "patchSetId": 7
      },
      "lineNbr": 204,
      "author": {
        "id": 5440
      },
      "writtenOn": "2020-09-29T01:57:26Z",
      "side": 1,
      "message": "Use a defer for this.",
      "revId": "ea0c80349316714c0070766d293666066dc51efa",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d032438a_1338fdb7",
        "filename": "src/cmd/compile/internal/gc/align.go",
        "patchSetId": 7
      },
      "lineNbr": 204,
      "author": {
        "id": 14665
      },
      "writtenOn": "2020-09-29T02:52:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "41bebd50_c2677c1a",
      "revId": "ea0c80349316714c0070766d293666066dc51efa",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}