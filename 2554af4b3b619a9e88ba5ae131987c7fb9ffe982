{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "21dab647_1abb8be4",
        "filename": "src/cmd/internal/obj/loong64/asm.go",
        "patchSetId": 3
      },
      "lineNbr": 36,
      "author": {
        "id": 13315
      },
      "writtenOn": "2023-03-24T18:24:20Z",
      "side": 1,
      "message": "Should this be reg to match Prog.Reg?",
      "revId": "2554af4b3b619a9e88ba5ae131987c7fb9ffe982",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "afa441e9_7f4eac9c",
        "filename": "src/cmd/internal/obj/loong64/asm.go",
        "patchSetId": 3
      },
      "lineNbr": 36,
      "author": {
        "id": 34360
      },
      "writtenOn": "2023-03-25T03:19:11Z",
      "side": 1,
      "message": "For now, it is corresponding to Reg, but next cycle I plan to change most (if not all) of the Prog.Reg usage to become RestArgs-based instead, so I have chosen the current name for not having to tweak it again afterwards and creating churn.\n\n(I reckon it\u0027s the general trend to move to RestArgs for an eventual big refactor to make all arguments one or two slice(s), as documented in the comments around Prog. amd64 has moved to RestArgs, riscv is RestArgs from day 1, there may be more. A couple of weeks ago I tried eliminating every Reg usage from loong64 code, but mysterious bugs that completely broke toolchain2 build then appeared; maybe some Reg usage has to remain but I believe migrating the other places would make people\u0027s lives easier.)",
      "parentUuid": "21dab647_1abb8be4",
      "revId": "2554af4b3b619a9e88ba5ae131987c7fb9ffe982",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b3efcc72_fa1a2957",
        "filename": "src/cmd/internal/obj/loong64/asm.go",
        "patchSetId": 3
      },
      "lineNbr": 36,
      "author": {
        "id": 34360
      },
      "writtenOn": "2023-03-25T03:32:50Z",
      "side": 1,
      "message": "Thinking about it harder, actually after the asm backend refactor it\u0027s also unlikely that the Optab definition would remain intact (or at all), so maybe renaming it to reflect the status quo wouldn\u0027t create more churn after all. I\u0027ll change it to \"reg\" then, thanks.",
      "parentUuid": "afa441e9_7f4eac9c",
      "revId": "2554af4b3b619a9e88ba5ae131987c7fb9ffe982",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bf85854c_bca00e5d",
        "filename": "src/cmd/internal/obj/loong64/asm.go",
        "patchSetId": 3
      },
      "lineNbr": 36,
      "author": {
        "id": 13315
      },
      "writtenOn": "2023-03-27T15:44:28Z",
      "side": 1,
      "message": "I don\u0027t think replacing Prog.Reg with RestArgs is the right direction. If an operand is known to be always a register, Prog.Reg is a good fit. RestArgs is more CPU- and memory-expensive. I think it is used for replacing From3, but not Reg. E.g. RISCV uses RestArgs in some cases, but uses Reg for a lot more cases (see e.g. in https://cs.opensource.google/go/go/+/master:src/cmd/compile/internal/riscv64/ssa.go).",
      "parentUuid": "b3efcc72_fa1a2957",
      "revId": "2554af4b3b619a9e88ba5ae131987c7fb9ffe982",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}