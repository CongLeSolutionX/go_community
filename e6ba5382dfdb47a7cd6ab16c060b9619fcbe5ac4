{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "86360d2f_566fa3e3",
        "filename": "src/runtime/hash64.go",
        "patchSetId": 2
      },
      "lineNbr": 86,
      "author": {
        "id": 5200
      },
      "writtenOn": "2022-10-14T21:04:29Z",
      "side": 1,
      "message": "I don\u0027t think this is particularly collision resistant. Any values with the same top 5 bits and low N bits will have the same low N bits of result. So you can easily enumerate, say, 2^27 values with the same low 32 bits of hash.",
      "revId": "e6ba5382dfdb47a7cd6ab16c060b9619fcbe5ac4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2ebddbc5_73482847",
        "filename": "src/runtime/hash64.go",
        "patchSetId": 2
      },
      "lineNbr": 86,
      "author": {
        "id": 44188
      },
      "writtenOn": "2022-10-18T08:00:19Z",
      "side": 1,
      "message": "Yes, this algorithm is not designed to prevent collision attacks, but having a random seed can mitigate that. In cases the random seed is not good enough, the collision is truly a problem. Or maybe we could use `seed ^ result` instead of `seed ^ x`?\nIf the random seed mechanism can\u0027t solve this problem, I can abandon this CL :)",
      "parentUuid": "86360d2f_566fa3e3",
      "revId": "e6ba5382dfdb47a7cd6ab16c060b9619fcbe5ac4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a8df8590_798a2822",
        "filename": "src/runtime/hash64.go",
        "patchSetId": 2
      },
      "lineNbr": 86,
      "author": {
        "id": 49673
      },
      "writtenOn": "2022-10-18T14:52:16Z",
      "side": 1,
      "message": "Here is a simple test used to simulate the situation in the hashmap: https://gist.github.com/zhangyunhao116/c2f625dfb2ab7c90fbc26b38fb92311d\n\nIt includes three cases: 1. random inputs (from runtime.fastrand) 2. liner inputs (from 1.. N) 3. shift inputs (from 1\u003c\u003c1 .. 1\u003c\u003cN)\n\nIf the bucket items exceed 8, the `badcases ++`\n\nThe result is\n```\nrandom inputs, overflow-fxhash: 333082 overflow-wyhash: 333709\nlinear inputs(1 .. N), overflow-fxhash: 0 overflow-wyhash: 333782\nshift inputs (1\u003c\u003c1 .. 1\u003c\u003cN), overflow-fxhash: 100 overflow-wyhash: 100\n```\n\nLooks like the fxhash is better in linear inputs, and has the same quality in the other two cases.",
      "parentUuid": "2ebddbc5_73482847",
      "revId": "e6ba5382dfdb47a7cd6ab16c060b9619fcbe5ac4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "113507b7_5aa4b130",
        "filename": "src/runtime/hash64.go",
        "patchSetId": 2
      },
      "lineNbr": 86,
      "author": {
        "id": 49673
      },
      "writtenOn": "2022-10-18T15:12:55Z",
      "side": 1,
      "message": "Sorry to bother. Now the scripts also add memhash, and the shift inputs now become `(1\u003c\u003c1)+1 .. (1\u003c\u003cN)+N`(the previous case is incorrect).\nNow the result is (lower is better):\n```\nrandom inputs, fxhash: 333748 wyhash: 334455 memhash: 333682\nlinear inputs(1 .. N), fxhash: 0 wyhash: 334079 memhash: 667299\nshift inputs (1\u003c\u003c1 + 1 .. 1\u003c\u003cN + N), fxhash: 1400 wyhash: 333904 memhash: 1000631\n```",
      "parentUuid": "a8df8590_798a2822",
      "revId": "e6ba5382dfdb47a7cd6ab16c060b9619fcbe5ac4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d0432e91_edd5a0ef",
        "filename": "src/runtime/hash64.go",
        "patchSetId": 2
      },
      "lineNbr": 86,
      "author": {
        "id": 5200
      },
      "writtenOn": "2022-10-18T15:33:11Z",
      "side": 1,
      "message": "We want at the very least no easy seed-independent collisions. I don\u0027t think changing where the seed is xor\u0027d in will help with that.",
      "parentUuid": "113507b7_5aa4b130",
      "revId": "e6ba5382dfdb47a7cd6ab16c060b9619fcbe5ac4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one Code-Review+2 is required. Self review is not allowed."
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Code-Review=MAX,user=non_uploader"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "e6ba5382dfdb47a7cd6ab16c060b9619fcbe5ac4",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Do-Not-Review",
        "description": {
          "value": "Changes that have DO NOT REVIEW in their commit message are not submittable."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (R|r)(E|e)(V|v)(I|i)(E|e)(W|w).*\""
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:false"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (R|r)(E|e)(V|v)(I|i)(E|e)(W|w).*\""},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (R|r)(E|e)(V|v)(I|i)(E|e)(W|w).*\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "e6ba5382dfdb47a7cd6ab16c060b9619fcbe5ac4",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Do-Not-Submit",
        "description": {
          "value": "Changes that have DO NOT SUBMIT in their commit message are not submittable."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:false"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "e6ba5382dfdb47a7cd6ab16c060b9619fcbe5ac4",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "No-Holds",
        "description": {
          "value": "Changes with a Hold+1 vote are not submittable."
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "NOT label:Hold\u003d1"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"NOT label:Hold=1"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Hold=1"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "e6ba5382dfdb47a7cd6ab16c060b9619fcbe5ac4",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "e6ba5382dfdb47a7cd6ab16c060b9619fcbe5ac4",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}