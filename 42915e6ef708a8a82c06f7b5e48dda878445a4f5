{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "d8217b04_a8ed381f",
        "filename": "src/cmd/internal/obj/objfile.go",
        "patchSetId": 2
      },
      "lineNbr": 414,
      "author": {
        "id": 13315
      },
      "writtenOn": "2024-11-18T02:03:55Z",
      "side": 1,
      "message": "ARM64 MOVD instruction doesn\u0027t really require the address to be 8-byte aligned. There are a few forms of encoding, some (not all) of which requires 8-byte aligned _offset_. Maybe it emits this form and generate a relocation like this? What specific error do you see?\n\nAlso, if this matters, we probably could apply to all architectures. (E.g. PPC64 is probably similar.)",
      "range": {
        "startLine": 414,
        "startChar": 36,
        "endLine": 414,
        "endChar": 62
      },
      "revId": "42915e6ef708a8a82c06f7b5e48dda878445a4f5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "67ce6175_63e45d78",
        "filename": "src/cmd/internal/obj/objfile.go",
        "patchSetId": 2
      },
      "lineNbr": 414,
      "author": {
        "id": 11715
      },
      "writtenOn": "2024-11-18T19:39:54Z",
      "side": 1,
      "message": "It was\n\ncrypto/internal/fips/aes/gcm.init.0.func1: offset for 64-bit load/store has unaligned value 3756",
      "parentUuid": "d8217b04_a8ed381f",
      "range": {
        "startLine": 414,
        "startChar": 36,
        "endLine": 414,
        "endChar": 62
      },
      "revId": "42915e6ef708a8a82c06f7b5e48dda878445a4f5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "49f69f79_64452bdb",
        "filename": "src/cmd/internal/obj/objfile.go",
        "patchSetId": 2
      },
      "lineNbr": 414,
      "author": {
        "id": 5056
      },
      "writtenOn": "2024-11-19T03:56:50Z",
      "side": 1,
      "message": "It\u0027s generating R_ARM64_PCREL_LDST64. From the code, it looks like if you want a PC-relative relocation (and we do), then MOVD has to use that one?",
      "parentUuid": "67ce6175_63e45d78",
      "range": {
        "startLine": 414,
        "startChar": 36,
        "endLine": 414,
        "endChar": 62
      },
      "revId": "42915e6ef708a8a82c06f7b5e48dda878445a4f5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dac44bad_2dec6285",
        "filename": "src/cmd/internal/obj/objfile.go",
        "patchSetId": 2
      },
      "lineNbr": 414,
      "author": {
        "id": 5056
      },
      "writtenOn": "2024-11-19T16:49:55Z",
      "side": 1,
      "message": "Looked into this some more. It looks like the special cases in cmd/internal/obj/arm64.Optab.size are not quite complete and that if certain optimizations are disabled then sometimes there are unaligned .stmp references in addition to unaligned go:string references. I\u0027ll look into a more targeted fix there.",
      "parentUuid": "49f69f79_64452bdb",
      "range": {
        "startLine": 414,
        "startChar": 36,
        "endLine": 414,
        "endChar": 62
      },
      "revId": "42915e6ef708a8a82c06f7b5e48dda878445a4f5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "44b02976_b7bf0b38",
        "filename": "src/cmd/internal/obj/objfile.go",
        "patchSetId": 2
      },
      "lineNbr": 414,
      "author": {
        "id": 13315
      },
      "writtenOn": "2024-11-19T17:01:37Z",
      "side": 1,
      "message": "Yeah, I\u0027m also looking at this code, and Optab.size is what the problem seems to be.\n\nPerhaps it should compute the alignment based on the symbol size consistent with https://cs.opensource.google/go/go/+/master:src/cmd/internal/obj/objfile.go;l\u003d384-408 ?",
      "parentUuid": "dac44bad_2dec6285",
      "range": {
        "startLine": 414,
        "startChar": 36,
        "endLine": 414,
        "endChar": 62
      },
      "revId": "42915e6ef708a8a82c06f7b5e48dda878445a4f5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0cc0db1d_a219c45b",
        "filename": "src/cmd/internal/obj/objfile.go",
        "patchSetId": 2
      },
      "lineNbr": 414,
      "author": {
        "id": 5056
      },
      "writtenOn": "2024-11-19T17:01:38Z",
      "side": 1,
      "message": "Replaced this with a better fix.",
      "parentUuid": "dac44bad_2dec6285",
      "range": {
        "startLine": 414,
        "startChar": 36,
        "endLine": 414,
        "endChar": 62
      },
      "revId": "42915e6ef708a8a82c06f7b5e48dda878445a4f5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4db166b6_39ea5fec",
        "filename": "src/cmd/internal/obj/objfile.go",
        "patchSetId": 2
      },
      "lineNbr": 414,
      "author": {
        "id": 13315
      },
      "writtenOn": "2024-11-19T17:14:16Z",
      "side": 1,
      "message": "Does the patch below work? stmp in FIPS mode is a very targeted fix. In theory it could potentially happen in other cases. Maybe they all optimized out? But that seems we\u0027re playing with luck.\n\nIf you feel strong about a very minimal fix, that is fine. Thanks.\n\n```\ndiff --git a/src/cmd/internal/obj/arm64/asm7.go b/src/cmd/internal/obj/arm64/asm7.go\nindex 37de7706e8..e0a740924f 100644\n--- a/src/cmd/internal/obj/arm64/asm7.go\n+++ b/src/cmd/internal/obj/arm64/asm7.go\n@@ -1074,14 +1074,42 @@ func (o *Optab) size(ctxt *obj.Link, p *obj.Prog) int {\n \t\t// Also symbols with prefix of \"go:string.\" are Go strings, which will go into\n \t\t// the symbol table, their addresses are not necessary aligned, rule this out.\n \t\talign :\u003d int64(1 \u003c\u003c sz)\n-\t\tif o.a1 \u003d\u003d C_ADDR \u0026\u0026 p.From.Offset%align \u003d\u003d 0 \u0026\u0026 !strings.HasPrefix(p.From.Sym.Name, \"go:string.\") ||\n-\t\t\to.a4 \u003d\u003d C_ADDR \u0026\u0026 p.To.Offset%align \u003d\u003d 0 \u0026\u0026 !strings.HasPrefix(p.To.Sym.Name, \"go:string.\") {\n+\t\tif o.a1 \u003d\u003d C_ADDR \u0026\u0026 p.From.Offset%align \u003d\u003d 0 \u0026\u0026 symAlign(p.From.Sym) \u003e\u003d align ||\n+\t\t\to.a4 \u003d\u003d C_ADDR \u0026\u0026 p.To.Offset%align \u003d\u003d 0 \u0026\u0026 symAlign(p.To.Sym) \u003e\u003d align {\n \t\t\treturn 8\n \t\t}\n \t}\n \treturn int(o.size_)\n }\n \n+func symAlign(s *obj.LSym) int64 {\n+\tname :\u003d s.Name\n+\tswitch {\n+\tcase strings.HasPrefix(name, \"go:string.\"),\n+\t\tstrings.HasPrefix(name, \"type:.namedata.\"),\n+\t\tstrings.HasPrefix(name, \"type:.importpath.\"),\n+\t\tstrings.HasSuffix(name, \".opendefer\"),\n+\t\tstrings.HasSuffix(name, \".arginfo0\"),\n+\t\tstrings.HasSuffix(name, \".arginfo1\"),\n+\t\tstrings.HasSuffix(name, \".argliveinfo\"):\n+\t\t// These are just bytes, or varints.\n+\t\treturn 1\n+\tcase strings.HasPrefix(name, \"gclocalsÂ·\"):\n+\t\t// It has 32-bit fields.\n+\t\treturn 4\n+\tdefault:\n+\t\tswitch {\n+\t\tcase s.Size%8 \u003d\u003d 0:\n+\t\t\treturn 8\n+\t\tcase s.Size%4 \u003d\u003d 0:\n+\t\t\treturn 4\n+\t\tcase s.Size%2 \u003d\u003d 0:\n+\t\t\treturn 2\n+\t\t}\n+\t}\n+\treturn 1\n+}\n+\n func span7(ctxt *obj.Link, cursym *obj.LSym, newprog obj.ProgAlloc) {\n \tif ctxt.Retpoline {\n \t\tctxt.Diag(\"-spectre\u003dret not supported on arm64\")\n```",
      "parentUuid": "0cc0db1d_a219c45b",
      "range": {
        "startLine": 414,
        "startChar": 36,
        "endLine": 414,
        "endChar": 62
      },
      "revId": "42915e6ef708a8a82c06f7b5e48dda878445a4f5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}