{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "9eb400bc_6af87f08",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5200
      },
      "writtenOn": "2024-01-15T23:42:50Z",
      "side": 1,
      "message": "goos: darwin\ngoarch: arm64\nname                     old time/op    new time/op    delta\nConcat2-24                 10.6ns Â± 1%    10.0ns Â± 2%  -5.51%  (p\u003d0.000 n\u003d10+10)\nConcat3-24                 13.2ns Â± 2%    12.3ns Â± 1%  -6.91%  (p\u003d0.000 n\u003d10+10)\nConcat4-24                 17.2ns Â± 1%    16.6ns Â± 0%  -3.25%  (p\u003d0.000 n\u003d10+8)\nConcat5-24                 19.9ns Â± 1%    19.5ns Â± 0%  -2.35%  (p\u003d0.000 n\u003d10+10)\nConcat6-24                 34.8ns Â± 1%    34.4ns Â± 2%  -1.17%  (p\u003d0.007 n\u003d10+10)\n\nSo similar results to yours.\n\nIf anyone has bench results on other archs, please post them.\n\nOne minor difference, concat6 is large enough to trigger a heap allocation, so maybe it is a bit different than the one you reported in the issue? (Run with -test.benchmem.)\n\nMy go binary is 0.5% bigger.\n\nUnfortunately I think this falls squarely in the \"not sure if it is worth it\" category. The speed gains aren\u0027t huge, and the space usage is not all that much worse. This makes deciding hard ðŸ˜ž\n\nI would lean toward not doing it, though. Places which concatenate strings a lot are probably not doing string addition. They are doing []byte appends, bytes.Buffer operations, or something else with more control over allocation. But even cold string addition could well pollute the icache.",
      "revId": "806d86b0dbca8e31fcc3324d6ea8a9a0c7a409ef",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a4c1323b_79913556",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 68445
      },
      "writtenOn": "2024-01-15T23:59:53Z",
      "side": 1,
      "message": "Thanks for the quick response!\nShould I just wait now?",
      "parentUuid": "9eb400bc_6af87f08",
      "revId": "806d86b0dbca8e31fcc3324d6ea8a9a0c7a409ef",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c0f0134e_4a693d1f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5200
      },
      "writtenOn": "2024-01-16T00:48:23Z",
      "side": 1,
      "message": "Yes, I think barring better benchmarks and/or a way to get lower space overheads, I\u0027d rather not accept this.\nI\u0027ll bring up the subject at the compiler/runtime meeting tomorrow to see what others think.",
      "parentUuid": "a4c1323b_79913556",
      "revId": "806d86b0dbca8e31fcc3324d6ea8a9a0c7a409ef",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d31b011d_a75a9976",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 15722
      },
      "writtenOn": "2024-03-15T23:06:15Z",
      "side": 1,
      "message": "@khr@golang.org Hi Keith! Sorry for reaching you out directly, but I stumbled upon this CL and may I wonder how the decision on acceptance is going? Can\u0027t this CL fall into the \"housekeeping\" category, removing old and obsolete \"corner-cased\" parts of the code? Thank you in advance!",
      "parentUuid": "c0f0134e_4a693d1f",
      "revId": "806d86b0dbca8e31fcc3324d6ea8a9a0c7a409ef",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3413de29_3a2da2cf",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5200
      },
      "writtenOn": "2024-03-16T00:31:27Z",
      "side": 1,
      "message": "It\u0027s not obsolete if it makes binaries smaller.\nI think my comment earlier stands, code which does string concatenation probably isn\u0027t very hot, so code size is more important than raw speed.",
      "parentUuid": "d31b011d_a75a9976",
      "revId": "806d86b0dbca8e31fcc3324d6ea8a9a0c7a409ef",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dfcad035_b379e7fe",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 68445
      },
      "writtenOn": "2024-11-09T21:21:24Z",
      "side": 1,
      "message": "@khr@golang.org, have you any news of this CL?",
      "parentUuid": "3413de29_3a2da2cf",
      "revId": "806d86b0dbca8e31fcc3324d6ea8a9a0c7a409ef",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "29c15423_a0bbe233",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5200
      },
      "writtenOn": "2024-11-09T21:36:41Z",
      "side": 1,
      "message": "I don\u0027t think this is worth doing. Code size at callsites is more important than removing a bit of code from the runtime package.",
      "parentUuid": "dfcad035_b379e7fe",
      "revId": "806d86b0dbca8e31fcc3324d6ea8a9a0c7a409ef",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0cc978ae_5be53dfe",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 68445
      },
      "writtenOn": "2024-11-09T21:41:02Z",
      "side": 1,
      "message": "Maybe I should just close CL?",
      "parentUuid": "29c15423_a0bbe233",
      "revId": "806d86b0dbca8e31fcc3324d6ea8a9a0c7a409ef",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "28d04acf_015c2b7a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5200
      },
      "writtenOn": "2024-11-09T21:47:21Z",
      "side": 1,
      "message": "Sure.",
      "parentUuid": "0cc978ae_5be53dfe",
      "revId": "806d86b0dbca8e31fcc3324d6ea8a9a0c7a409ef",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}