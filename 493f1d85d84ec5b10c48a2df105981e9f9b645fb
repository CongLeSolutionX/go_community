{
  "comments": [
    {
      "key": {
        "uuid": "2116f94f_0ee70181",
        "filename": "src/cmd/compile/internal/ssa/gen/386.rules",
        "patchSetId": 1
      },
      "lineNbr": 169,
      "author": {
        "id": 5200
      },
      "writtenOn": "2019-03-18T18:21:11Z",
      "side": 1,
      "message": "These rules seem to assume that 0 \u003c\u003d c \u003c bitwidth. I don\u0027t think we should assume that, even though currently the only occurrences have that property. Just do:\n\n(RotateLeft32 x (MOVLconst [c])) -\u003e (ROLLconst [c\u002631] x)\n\n(this is what the ROLX-\u003eROLXconst rules do in AMD64.rules.)",
      "revId": "493f1d85d84ec5b10c48a2df105981e9f9b645fb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6e1a1aaf_b3bc7c16",
        "filename": "src/cmd/compile/internal/ssa/gen/ARM.rules",
        "patchSetId": 1
      },
      "lineNbr": 1228,
      "author": {
        "id": 5200
      },
      "writtenOn": "2019-03-18T18:21:11Z",
      "side": 1,
      "message": "You can use (-c)\u002631 to reverse direction and clamp the values.",
      "range": {
        "startLine": 1228,
        "startChar": 47,
        "endLine": 1228,
        "endChar": 51
      },
      "revId": "493f1d85d84ec5b10c48a2df105981e9f9b645fb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "31f48348_18443342",
        "filename": "src/cmd/compile/internal/ssa/gen/generic.rules",
        "patchSetId": 1
      },
      "lineNbr": 340,
      "author": {
        "id": 11990
      },
      "writtenOn": "2019-03-18T10:56:47Z",
      "side": 1,
      "message": "I think these can be more general (plus this lets you get rid of the first rule):\n\n(RotateLeft64 x (Const64 [c])) \u0026\u0026 c%64 \u003d\u003d 0 -\u003e x",
      "range": {
        "startLine": 337,
        "startChar": 0,
        "endLine": 340,
        "endChar": 1
      },
      "revId": "493f1d85d84ec5b10c48a2df105981e9f9b645fb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "41545a72_43c2b6a8",
        "filename": "src/cmd/compile/internal/ssa/gen/generic.rules",
        "patchSetId": 1
      },
      "lineNbr": 1171,
      "author": {
        "id": 11990
      },
      "writtenOn": "2019-03-18T10:56:47Z",
      "side": 1,
      "message": "On platforms (all except 386 and amd64?) that don\u0027t have 8/16-bit rotates/multiplications do you think it would make sense to promote these to 32-bit operations?\n\nMaybe something as simple as:\n\n(Eq8 (Mod8u  \u003ct\u003e x (Const8  [c])) (Const8 [0]))\n  \u0026\u0026 x.Op !\u003d OpConst8\n  \u0026\u0026 udivisibleOK(8 ,c)\n  \u0026\u0026 !hasRotateLeft8(config)\n  -\u003e (Eq32 (Mod32u \u003ctyp.UInt32\u003e (ZeroExt8to32 \u003ctyp.UInt32\u003e x) (Const32 \u003ctyp.UInt32\u003e [c\u00260xff])) (Const32 \u003ctyp.UInt32\u003e [0]))",
      "range": {
        "startLine": 1151,
        "startChar": 0,
        "endLine": 1171,
        "endChar": 2
      },
      "revId": "493f1d85d84ec5b10c48a2df105981e9f9b645fb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6f043663_0e5d135d",
        "filename": "src/cmd/compile/internal/ssa/magic.go",
        "patchSetId": 1
      },
      "lineNbr": 187,
      "author": {
        "id": 5200
      },
      "writtenOn": "2019-03-18T18:21:11Z",
      "side": 1,
      "message": "Thanks for this very thorough comment.",
      "revId": "493f1d85d84ec5b10c48a2df105981e9f9b645fb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "02827dd1_9b03aba8",
        "filename": "src/cmd/compile/internal/ssa/magic.go",
        "patchSetId": 1
      },
      "lineNbr": 257,
      "author": {
        "id": 5200
      },
      "writtenOn": "2019-03-18T18:21:11Z",
      "side": 1,
      "message": "When k\u003e0, then really m is such that m*(c\u003e\u003ek) mod 2^(n-k) \u003d\u003d 1.\nOr equivalently, m*c mod 2^n \u003d\u003d 2^k?",
      "revId": "493f1d85d84ec5b10c48a2df105981e9f9b645fb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    }
  ]
}