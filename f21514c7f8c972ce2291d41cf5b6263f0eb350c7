{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "c6923725_00c7c025",
        "filename": "src/cmd/compile/internal/reflectdata/reflect.go",
        "patchSetId": 4
      },
      "lineNbr": 2009,
      "author": {
        "id": 59158
      },
      "writtenOn": "2022-11-14T05:24:16Z",
      "side": 1,
      "message": "x.FuncName().Func.Closures may be filled after here as x.FuncName().Func may be walked later.",
      "revId": "f21514c7f8c972ce2291d41cf5b6263f0eb350c7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0f04a9a4_a7a8c30a",
        "filename": "src/cmd/compile/internal/reflectdata/reflect.go",
        "patchSetId": 4
      },
      "lineNbr": 2009,
      "author": {
        "id": 14665
      },
      "writtenOn": "2022-11-14T09:46:42Z",
      "side": 1,
      "message": "No, if `x.FuncName().Func` is not nil, then `x.FuncName().Func.Closures` are already filled.",
      "parentUuid": "c6923725_00c7c025",
      "revId": "f21514c7f8c972ce2291d41cf5b6263f0eb350c7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6266657a_ca2da9ea",
        "filename": "src/cmd/compile/internal/reflectdata/reflect.go",
        "patchSetId": 4
      },
      "lineNbr": 2009,
      "author": {
        "id": 59158
      },
      "writtenOn": "2022-11-16T07:18:23Z",
      "side": 1,
      "message": "No, if `x.FuncName().Func` is not nil, then `x.FuncName().Func.Closures` may not be filled yet.\nI can reproduce by this code:\n```golang\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc create() fmt.Stringer {\n\tvar a A\n\treturn a\n}\n\ntype A int\n\nfunc (a A) String() string {\n\tf :\u003d func() string {\n\t\tfmt.Println(\"make closure heavy.\")\n\t\treturn fmt.Sprint(a)\n\t}\n\treturn f()\n}\n\nfunc main() {\n\tcreate().String()\n}\n```\n\n```dlv\n(dlv) b reflectdata/reflect.go:1995\nBreakpoint 1 set at 0x1028b81a4 for cmd/compile/internal/reflectdata.methodWrapper() /Users/robert/sdk/go1.19.3/src/cmd/compile/internal/reflectdata/reflect.go:1995\n(dlv) c\n\u003e cmd/compile/internal/reflectdata.methodWrapper() /Users/robert/sdk/go1.19.3/src/cmd/compile/internal/reflectdata/reflect.go:1995 (hits goroutine(1):1 total:1) (PC: 0x1028b81a4)\nWarning: debugging optimized function\n  1990:                 switch x :\u003d call.X.(type) {\n  1991:                 case *ir.Name:\n  1992:                         canInline \u003d len(x.Func.Closures) \u003d\u003d 0\n  1993:                 case *ir.SelectorExpr:\n  1994:                         if x.Op() \u003d\u003d ir.OMETHEXPR {\n\u003d\u003e1995:                                 canInline \u003d x.FuncName().Func !\u003d nil \u0026\u0026 len(x.FuncName().Func.Closures) \u003d\u003d 0\n  1996:                         }\n  1997:                 }\n  1998:                 if canInline {\n  1999:                         inline.InlineCalls(fn)\n  2000:                 }\n(dlv) s\n\u003e cmd/compile/internal/ir.(*SelectorExpr).FuncName() /Users/robert/sdk/go1.19.3/src/cmd/compile/internal/ir/expr.go:530 (PC: 0x102764dec)\nWarning: debugging optimized function\n   525: func (n *SelectorExpr) Sym() *types.Sym    { return n.Sel }\n   526: func (n *SelectorExpr) Implicit() bool     { return n.flags\u0026miniExprImplicit !\u003d 0 }\n   527: func (n *SelectorExpr) SetImplicit(b bool) { n.flags.set(miniExprImplicit, b) }\n   528: func (n *SelectorExpr) Offset() int64      { return n.Selection.Offset }\n   529:\n\u003d\u003e 530: func (n *SelectorExpr) FuncName() *Name {\n   531:         if n.Op() !\u003d OMETHEXPR {\n   532:                 panic(n.no(\"FuncName\"))\n   533:         }\n   534:         fn :\u003d NewNameAt(n.Selection.Pos, MethodSym(n.X.Type(), n.Sel))\n   535:         fn.Class \u003d PFUNC\n(dlv) n\n\u003e cmd/compile/internal/ir.(*SelectorExpr).FuncName() /Users/robert/sdk/go1.19.3/src/cmd/compile/internal/ir/expr.go:531 (PC: 0x102764df8)\nWarning: debugging optimized function\n   526: func (n *SelectorExpr) Implicit() bool     { return n.flags\u0026miniExprImplicit !\u003d 0 }\n   527: func (n *SelectorExpr) SetImplicit(b bool) { n.flags.set(miniExprImplicit, b) }\n   528: func (n *SelectorExpr) Offset() int64      { return n.Selection.Offset }\n   529:\n   530: func (n *SelectorExpr) FuncName() *Name {\n\u003d\u003e 531:         if n.Op() !\u003d OMETHEXPR {\n   532:                 panic(n.no(\"FuncName\"))\n   533:         }\n   534:         fn :\u003d NewNameAt(n.Selection.Pos, MethodSym(n.X.Type(), n.Sel))\n   535:         fn.Class \u003d PFUNC\n   536:         fn.SetType(n.Type())\n(dlv)\n\u003e cmd/compile/internal/ir.(*SelectorExpr).FuncName() /Users/robert/sdk/go1.19.3/src/cmd/compile/internal/ir/expr.go:534 (PC: 0x102764e0c)\nWarning: debugging optimized function\n   529:\n   530: func (n *SelectorExpr) FuncName() *Name {\n   531:         if n.Op() !\u003d OMETHEXPR {\n   532:                 panic(n.no(\"FuncName\"))\n   533:         }\n\u003d\u003e 534:         fn :\u003d NewNameAt(n.Selection.Pos, MethodSym(n.X.Type(), n.Sel))\n   535:         fn.Class \u003d PFUNC\n   536:         fn.SetType(n.Type())\n   537:         if n.Selection.Nname !\u003d nil {\n   538:                 // TODO(austin): Nname is nil for interface method\n   539:                 // expressions (I.M), so we can\u0027t attach a Func to\n(dlv) n\n\u003e cmd/compile/internal/ir.(*SelectorExpr).FuncName() /Users/robert/sdk/go1.19.3/src/cmd/compile/internal/ir/expr.go:535 (PC: 0x102764e54)\nWarning: debugging optimized function\n   530: func (n *SelectorExpr) FuncName() *Name {\n   531:         if n.Op() !\u003d OMETHEXPR {\n   532:                 panic(n.no(\"FuncName\"))\n   533:         }\n   534:         fn :\u003d NewNameAt(n.Selection.Pos, MethodSym(n.X.Type(), n.Sel))\n\u003d\u003e 535:         fn.Class \u003d PFUNC\n   536:         fn.SetType(n.Type())\n   537:         if n.Selection.Nname !\u003d nil {\n   538:                 // TODO(austin): Nname is nil for interface method\n   539:                 // expressions (I.M), so we can\u0027t attach a Func to\n   540:                 // those here. reflectdata.methodWrapper generates the\n(dlv) n\n\u003e cmd/compile/internal/ir.(*SelectorExpr).FuncName() /Users/robert/sdk/go1.19.3/src/cmd/compile/internal/ir/expr.go:536 (PC: 0x102764e60)\nWarning: debugging optimized function\n   531:         if n.Op() !\u003d OMETHEXPR {\n   532:                 panic(n.no(\"FuncName\"))\n   533:         }\n   534:         fn :\u003d NewNameAt(n.Selection.Pos, MethodSym(n.X.Type(), n.Sel))\n   535:         fn.Class \u003d PFUNC\n\u003d\u003e 536:         fn.SetType(n.Type())\n   537:         if n.Selection.Nname !\u003d nil {\n   538:                 // TODO(austin): Nname is nil for interface method\n   539:                 // expressions (I.M), so we can\u0027t attach a Func to\n   540:                 // those here. reflectdata.methodWrapper generates the\n   541:                 // Func.\n(dlv) n\n\u003e cmd/compile/internal/ir.(*SelectorExpr).FuncName() /Users/robert/sdk/go1.19.3/src/cmd/compile/internal/ir/expr.go:537 (PC: 0x102764e98)\nWarning: debugging optimized function\n   532:                 panic(n.no(\"FuncName\"))\n   533:         }\n   534:         fn :\u003d NewNameAt(n.Selection.Pos, MethodSym(n.X.Type(), n.Sel))\n   535:         fn.Class \u003d PFUNC\n   536:         fn.SetType(n.Type())\n\u003d\u003e 537:         if n.Selection.Nname !\u003d nil {\n   538:                 // TODO(austin): Nname is nil for interface method\n   539:                 // expressions (I.M), so we can\u0027t attach a Func to\n   540:                 // those here. reflectdata.methodWrapper generates the\n   541:                 // Func.\n   542:                 fn.Func \u003d n.Selection.Nname.(*Name).Func\n(dlv) n\n\u003e cmd/compile/internal/ir.(*SelectorExpr).FuncName() /Users/robert/sdk/go1.19.3/src/cmd/compile/internal/ir/expr.go:542 (PC: 0x102764ea8)\nWarning: debugging optimized function\n   537:         if n.Selection.Nname !\u003d nil {\n   538:                 // TODO(austin): Nname is nil for interface method\n   539:                 // expressions (I.M), so we can\u0027t attach a Func to\n   540:                 // those here. reflectdata.methodWrapper generates the\n   541:                 // Func.\n\u003d\u003e 542:                 fn.Func \u003d n.Selection.Nname.(*Name).Func\n   543:         }\n   544:         return fn\n   545: }\n   546:\n   547: // A SliceExpr is a slice expression X[Low:High] or X[Low:High:Max].\n(dlv) n\n\u003e cmd/compile/internal/ir.(*SelectorExpr).FuncName() /Users/robert/sdk/go1.19.3/src/cmd/compile/internal/ir/expr.go:544 (PC: 0x102764ed4)\nWarning: debugging optimized function\n   539:                 // expressions (I.M), so we can\u0027t attach a Func to\n   540:                 // those here. reflectdata.methodWrapper generates the\n   541:                 // Func.\n   542:                 fn.Func \u003d n.Selection.Nname.(*Name).Func\n   543:         }\n\u003d\u003e 544:         return fn\n   545: }\n   546:\n   547: // A SliceExpr is a slice expression X[Low:High] or X[Low:High:Max].\n   548: type SliceExpr struct {\n   549:         miniExpr\n(dlv) p fn.Func\n*cmd/compile/internal/ir.Func {\n        miniNode: cmd/compile/internal/ir.miniNode {\n                pos: (*\"cmd/internal/src.XPos\")(0x140004ae280),\n                op: ODCLFUNC (47),\n                bits: 1,\n                esc: 3,},\n        Body: cmd/compile/internal/ir.Nodes len: 2, cap: 2, [\n                ...,\n                ...,\n        ],\n        Nname: *cmd/compile/internal/ir.Name {\n                miniExpr: (*\"cmd/compile/internal/ir.miniExpr\")(0x140004ad3f0),\n                BuiltinOp: OXXX (0),\n                Class: PFUNC (7),\n                pragma: 0,\n                flags: 0,\n                DictIndex: 0,\n                sym: *(*\"cmd/compile/internal/types.Sym\")(0x140004bbdc0),\n                Func: *(*\"cmd/compile/internal/ir.Func\")(0x140004ae280),\n                Offset_: 0,\n                val: go/constant.Value nil,\n                Opt: interface {} nil,\n                Embed: *[]cmd/compile/internal/ir.Embed nil,\n                Defn: cmd/compile/internal/ir.Node(*cmd/compile/internal/ir.Func) ...,\n                Curfn: *cmd/compile/internal/ir.Func nil,\n                Heapaddr: *cmd/compile/internal/ir.Name nil,\n                Innermost: *cmd/compile/internal/ir.Name nil,\n                Outer: *cmd/compile/internal/ir.Name nil,},\n        OClosure: *cmd/compile/internal/ir.ClosureExpr nil,\n        Enter: cmd/compile/internal/ir.Nodes len: 0, cap: 0, nil,\n        Exit: cmd/compile/internal/ir.Nodes len: 0, cap: 0, nil,\n        Dcl: []*cmd/compile/internal/ir.Name len: 3, cap: 4, [\n                *(*\"cmd/compile/internal/ir.Name\")(0x140004ad810),\n                *(*\"cmd/compile/internal/ir.Name\")(0x140004ad8c0),\n                *(*\"cmd/compile/internal/ir.Name\")(0x140004adce0),\n        ],\n        ClosureVars: []*cmd/compile/internal/ir.Name len: 0, cap: 0, nil,\n        Closures: []*cmd/compile/internal/ir.Func len: 0, cap: 0, nil,\n        Parents: []cmd/compile/internal/ir.ScopeID len: 0, cap: 0, [],\n        Marks: []cmd/compile/internal/ir.Mark len: 0, cap: 0, [],\n        FieldTrack: map[*cmd/internal/obj.LSym]struct {} nil,\n        DebugInfo: interface {} nil,\n        LSym: *cmd/internal/obj.LSym nil,\n        Inl: *cmd/compile/internal/ir.Inline nil,\n        Closgen: 1,\n        Label: 0,\n        Endlineno: cmd/internal/src.XPos {index: 2, lico: 81936},\n        WBPos: cmd/internal/src.XPos {index: 0, lico: 0},\n        Pragma: 0,\n        flags: 512,\n        ABI: ABIInternal (1),\n        ABIRefs: 2,\n        NumDefers: 0,\n        NumReturns: 0,\n        NWBRCalls: *[]cmd/compile/internal/ir.SymAndPos nil,\n        WrappedFunc: *cmd/compile/internal/ir.Func nil,}\n(dlv) p \u0026*fn.Func\n(\"*cmd/compile/internal/ir.Func\")(0x140004ae280)\n(dlv) b closure.go:93\nBreakpoint 2 set at 0x102c275c8 for cmd/compile/internal/walk.directClosureCall() /Users/robert/sdk/go1.19.3/src/cmd/compile/internal/walk/closure.go:93\n(dlv) b closure.go:118\nBreakpoint 3 set at 0x102c27750 for cmd/compile/internal/walk.walkClosure() /Users/robert/sdk/go1.19.3/src/cmd/compile/internal/walk/closure.go:118\n(dlv) c\n\u003e cmd/compile/internal/walk.walkClosure() /Users/robert/sdk/go1.19.3/src/cmd/compile/internal/walk/closure.go:118 (hits goroutine(1):1 total:1) (PC: 0x102c27750)\nWarning: debugging optimized function\n   113:         //\n   114:         // Don\u0027t add the closure function to compilation queue more than once, since when\n   115:         // compiling a function twice would lead to an ICE.\n   116:         if !clofn.Walked() {\n   117:                 clofn.SetWalked(true)\n\u003d\u003e 118:                 ir.CurFunc.Closures \u003d append(ir.CurFunc.Closures, clofn)\n   119:         }\n   120:\n   121:         typ :\u003d typecheck.ClosureType(clo)\n   122:\n   123:         clos :\u003d ir.NewCompLitExpr(base.Pos, ir.OCOMPLIT, typ, nil)\n(dlv) p \u0026*ir.CurFunc\n(\"*cmd/compile/internal/ir.Func\")(0x140004ae280)\n(dlv)\n```",
      "parentUuid": "0f04a9a4_a7a8c30a",
      "revId": "f21514c7f8c972ce2291d41cf5b6263f0eb350c7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "10c8d0a8_55c9c658",
        "filename": "src/cmd/compile/internal/reflectdata/reflect.go",
        "patchSetId": 4
      },
      "lineNbr": 2009,
      "author": {
        "id": 14665
      },
      "writtenOn": "2022-11-16T09:39:53Z",
      "side": 1,
      "message": "Hmm, you\u0027re right. The doc should be stated that:\n\n\u003e do not contain any *walked* closures\n\nFor example, if you changed the code to:\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc create() fmt.Stringer {\n\tvar a A\n\treturn a\n}\n\ntype A int\n\nfunc g(f func() string) {}\n\nfunc (a A) String() string {\n\tg(func() string { return \"\" })\n\treturn \"\"\n}\n\nfunc main() {\n\tcreate().String()\n}\n```\n\nYou will see the closures there.",
      "parentUuid": "6266657a_ca2da9ea",
      "revId": "f21514c7f8c972ce2291d41cf5b6263f0eb350c7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}