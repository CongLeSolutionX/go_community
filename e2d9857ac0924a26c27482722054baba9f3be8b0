{
  "comments": [
    {
      "key": {
        "uuid": "7b951831_3051f575",
        "filename": "src/runtime/mkpreempt.go",
        "patchSetId": 5
      },
      "lineNbr": 359,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-10-29T14:27:49Z",
      "side": 1,
      "message": "Can we merge these two? From a glance, the only difference I see is the MOV/SUB suffix and the register size. We could just take those as arguments to a common function.",
      "revId": "e2d9857ac0924a26c27482722054baba9f3be8b0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "33b94ca1_58030ff3",
        "filename": "src/runtime/mkpreempt.go",
        "patchSetId": 5
      },
      "lineNbr": 359,
      "author": {
        "id": 13315
      },
      "writtenOn": "2019-10-31T19:45:07Z",
      "side": 1,
      "message": "Good idea. Done.",
      "parentUuid": "7b951831_3051f575",
      "revId": "e2d9857ac0924a26c27482722054baba9f3be8b0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2e7fe2d6_39001cb0",
        "filename": "src/runtime/mkpreempt.go",
        "patchSetId": 5
      },
      "lineNbr": 360,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-10-29T14:27:49Z",
      "side": 1,
      "message": "R1-R22, R24-R25, R28",
      "range": {
        "startLine": 360,
        "startChar": 26,
        "endLine": 360,
        "endChar": 32
      },
      "revId": "e2d9857ac0924a26c27482722054baba9f3be8b0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eb23c565_112f7c23",
        "filename": "src/runtime/mkpreempt.go",
        "patchSetId": 5
      },
      "lineNbr": 360,
      "author": {
        "id": 13315
      },
      "writtenOn": "2019-10-31T19:45:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2e7fe2d6_39001cb0",
      "range": {
        "startLine": 360,
        "startChar": 26,
        "endLine": 360,
        "endChar": 32
      },
      "revId": "e2d9857ac0924a26c27482722054baba9f3be8b0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "74592aa1_ec61df58",
        "filename": "src/runtime/mkpreempt.go",
        "patchSetId": 5
      },
      "lineNbr": 380,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-10-29T14:27:49Z",
      "side": 1,
      "message": "What are FCR0-FCR30?",
      "revId": "e2d9857ac0924a26c27482722054baba9f3be8b0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b265c8ad_123794e6",
        "filename": "src/runtime/mkpreempt.go",
        "patchSetId": 5
      },
      "lineNbr": 380,
      "author": {
        "id": 13315
      },
      "writtenOn": "2019-10-31T19:45:07Z",
      "side": 1,
      "message": "FCR0 is a read-only register, describing what CPU features are implemented. FCR1-FCR30 generally do not exist. On some machines FCR25, FCR26, FCR28 may be alias to some bits of FCR31 (so you could touch some bits without affecting others). FCR31 is enough.",
      "parentUuid": "74592aa1_ec61df58",
      "revId": "e2d9857ac0924a26c27482722054baba9f3be8b0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "94b54a97_3d01b574",
        "filename": "src/runtime/mkpreempt.go",
        "patchSetId": 5
      },
      "lineNbr": 406,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-10-29T14:27:49Z",
      "side": 1,
      "message": "Same",
      "revId": "e2d9857ac0924a26c27482722054baba9f3be8b0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ea18f25d_a5579739",
        "filename": "src/runtime/mkpreempt.go",
        "patchSetId": 5
      },
      "lineNbr": 406,
      "author": {
        "id": 13315
      },
      "writtenOn": "2019-10-31T19:45:07Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "94b54a97_3d01b574",
      "revId": "e2d9857ac0924a26c27482722054baba9f3be8b0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ff6aee48_41d17166",
        "filename": "src/runtime/preempt.go",
        "patchSetId": 5
      },
      "lineNbr": 367,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-10-29T14:27:49Z",
      "side": 1,
      "message": "Yikes. I don\u0027t know enough about MIPS to know what a \"half-executed CALL\" is. Could you expand this just a little to explain that?",
      "revId": "e2d9857ac0924a26c27482722054baba9f3be8b0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7f58f3be_23946884",
        "filename": "src/runtime/preempt.go",
        "patchSetId": 5
      },
      "lineNbr": 367,
      "author": {
        "id": 13315
      },
      "writtenOn": "2019-10-31T19:45:07Z",
      "side": 1,
      "message": "If a signal lands right on the CALL instruction (probably its delay slot actually), we may see that the LR has already updated (pointing to the next instruction), but the PC still points to the CALL instruction. \"Half-executed CALL\" may be not the right terminology, I just call it that way, as it is apparently, a half-executed CALL...\n\nThe ISA manual doesn\u0027t seem to have a terminology for this either. But it does say \"CALL (LR)\" is undefined, as if it is interrupted it cannot be reissued.",
      "parentUuid": "ff6aee48_41d17166",
      "revId": "e2d9857ac0924a26c27482722054baba9f3be8b0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    }
  ]
}