{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "5ce97b82_146085da",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 7061
      },
      "writtenOn": "2022-08-25T16:20:05Z",
      "side": 1,
      "message": "This breaks a protocolbuffers test:\n```\n~/work/protocolbuffers/protobuf-go/encoding/protojson$ go test .\ngo: downloading github.com/google/go-cmp v0.5.5\n--- FAIL: TestUnmarshal (0.01s)\n    --- FAIL: TestUnmarshal/Timestamp_with_nanos_beyond_9_digits (0.00s)\n        decode_test.go:2473: Unmarshal() got nil error, want error \"invalid google.protobuf.Timestamp value\"\nFAIL\nFAIL\tgoogle.golang.org/protobuf/encoding/protojson\t0.037s\nFAIL\n```\n",
      "revId": "4e9183cb14bf58011389c8a8c8ccaecd3ef50451",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6c2071b7_e80a8cdc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 9735
      },
      "writtenOn": "2022-08-25T17:30:19Z",
      "side": 1,
      "message": "Thanks for the heads up. I\u0027ll investigate.\n\nWas this discovered through TGP? Were there other failures related to this change?",
      "parentUuid": "5ce97b82_146085da",
      "revId": "4e9183cb14bf58011389c8a8c8ccaecd3ef50451",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "72b01c59_70753555",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 7061
      },
      "writtenOn": "2022-08-25T17:50:57Z",
      "side": 1,
      "message": "Yes, and there was another test with an unexpected success:\n`unexpected success parsing \"2020-01-02T03:04:05.123456789123Z\"`",
      "parentUuid": "6c2071b7_e80a8cdc",
      "revId": "4e9183cb14bf58011389c8a8c8ccaecd3ef50451",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c3facb97_cdc11110",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 9735
      },
      "writtenOn": "2022-08-25T18:17:18Z",
      "side": 1,
      "message": "Got it. So 2 breakages from this change.\n\nFrom the perspective of the `time` package, this is fixing an internal inconsistency where parsing as `RFC3339` and `RFC3339Nano` differ subtly with regard to this behavior. The currently documented behavior prior to this change is that we allow any number of sub-second digits and truncate the extra precision.\n\nFrom the perspective of RFC 3339, arbitrary precision sub-seconds is allowed by the grammar specified in section 5.6. Furthermore, section 5.7 does not mention anything about implementations being allowed to restrict the grammar to a finite number of sub-second digits.\n\nFrom the perspective of protobuf, they document that:\n\u003e A Timestamp message is serialized to a RFC 3339 date-time string with a few restrictions.\n\nand later on specify:\n\n\u003e Serialization should also fail if the timestamp field is invalid (e.g., the “nanos” field\ncontains a negative value or greater than 999999999).\n\nIn other words, protobuf does not *exactly* use RFC 3339, but rather a sub-set of it. Therefore, it is the responsibility of protobuf to enforce their subset of the RFC 3339 grammar.\n\nI\u0027ll send out a fix for protojson.",
      "parentUuid": "72b01c59_70753555",
      "revId": "4e9183cb14bf58011389c8a8c8ccaecd3ef50451",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eef770bb_830a38ac",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 7061
      },
      "writtenOn": "2022-08-25T18:25:17Z",
      "side": 1,
      "message": "Excellent, tyvm.",
      "parentUuid": "c3facb97_cdc11110",
      "revId": "4e9183cb14bf58011389c8a8c8ccaecd3ef50451",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f6c209b2_dbf36ad6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 9735
      },
      "writtenOn": "2022-08-25T18:37:24Z",
      "side": 1,
      "message": "Sent out https://go-review.googlesource.com/c/protobuf/+/425554.\n\nIs the other failure in open source?",
      "parentUuid": "eef770bb_830a38ac",
      "revId": "4e9183cb14bf58011389c8a8c8ccaecd3ef50451",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e56dcfce_049bcfea",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 7061
      },
      "writtenOn": "2022-08-25T18:50:05Z",
      "side": 1,
      "message": "Doesn\u0027t look like it.  In theory, it is a simple matter of disabling a test, I included your explanation from above to explain why it should be disabled.",
      "parentUuid": "f6c209b2_dbf36ad6",
      "revId": "4e9183cb14bf58011389c8a8c8ccaecd3ef50451",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}