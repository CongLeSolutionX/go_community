{
  "comments": [
    {
      "key": {
        "uuid": "1853f95c_387b2aef",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 6320
      },
      "writtenOn": "2020-07-08T14:56:30Z",
      "side": 1,
      "message": "This looks fine. This is a hot bug because it breaks RH builds on ppc64le after moving to Go 1.14 as their build version.",
      "revId": "457c3cea934db4b8883c9b932912367e02170a61",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5cc26d1f_118c29a7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 27994
      },
      "writtenOn": "2020-07-09T13:35:28Z",
      "side": 1,
      "message": "Trampolines were supposed to work on aix/ppc64 after CL 164009. We used to compile Kubernetes with Go 1.13. There were already some deferreturn at that time no ? \nAnyway, I\u0027ll check if it\u0027s working correctly on AIX too. ",
      "revId": "457c3cea934db4b8883c9b932912367e02170a61",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6a1b84c4_c141be87",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 13640
      },
      "writtenOn": "2020-07-09T14:13:00Z",
      "side": 1,
      "message": "Open-coded defers were only introduced in the Go 1.14 release and this particular issue (#39049) occurs when both open-coded defers are in use and a trampoline is required to reach the deferreturn function.",
      "parentUuid": "5cc26d1f_118c29a7",
      "revId": "457c3cea934db4b8883c9b932912367e02170a61",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ad15b2e0_3a1255fd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 27994
      },
      "writtenOn": "2020-07-09T15:06:38Z",
      "side": 1,
      "message": "Ok, thanks for the precision. \nAnyway, 1.15 (master) is working fine. \nFor 1.14, trampolines are indeed broken, but CL 228479 is enough to fix them (both with and without deferreturn). So I guess we should backport it too.",
      "parentUuid": "6a1b84c4_c141be87",
      "revId": "457c3cea934db4b8883c9b932912367e02170a61",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9fea54b8_2cea90c7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 6005
      },
      "writtenOn": "2020-07-10T18:13:13Z",
      "side": 1,
      "message": "Cherry, I have a question about this 1.14 backport CL. Its parent is currently \"[release-branch.go1.14] cmd/link: fix GC data reading from shared library (attempt 2)\", which means trybots tested this change on top of that one.\n\nDoes this change (which is fixing a 1.14-only regression) depend on the parent CL? Or are they independent and safe to apply without the parent (which is a fix for an issue for both 1.14 and 1.13, also see https://github.com/golang/go/issues/39956#issuecomment-656811090), and you just happened to arrange them one after another for convenience when developing both backport CLs?\n\nThanks.",
      "revId": "457c3cea934db4b8883c9b932912367e02170a61",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "810858d2_03712da3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 13315
      },
      "writtenOn": "2020-07-10T18:20:17Z",
      "side": 1,
      "message": "No, there is no dependency between the two. It\u0027s just convenient for me to do it this way. I could rebase if that helps. Thanks.",
      "parentUuid": "9fea54b8_2cea90c7",
      "revId": "457c3cea934db4b8883c9b932912367e02170a61",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}