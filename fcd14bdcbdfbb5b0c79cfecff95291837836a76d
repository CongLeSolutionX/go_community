{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "7ff0815e_bed49c9a",
        "filename": "src/runtime/malloc.go",
        "patchSetId": 4
      },
      "lineNbr": 824,
      "author": {
        "id": 5167
      },
      "writtenOn": "2022-11-14T19:09:39Z",
      "side": 0,
      "message": "Was this code unnecessary because we already check theBit \u003c 64 above?",
      "revId": "fcd14bdcbdfbb5b0c79cfecff95291837836a76d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5ebed00c_d9c41f7a",
        "filename": "src/runtime/malloc.go",
        "patchSetId": 4
      },
      "lineNbr": 824,
      "author": {
        "id": 13315
      },
      "writtenOn": "2022-11-14T20:05:12Z",
      "side": 0,
      "message": "I think previously if freeidx%64 \u003d\u003d 0 we need to refill allocCache, which the slow path (nextFreeIndex) does. So we return 0 and let nextFreeIndex handle it. Now updateFreeIndex handles it either way, and nextFreeFast and nextFreeIndex are not different in this part. (Maybe we could still have a \"fast path\" to update s.freeindex but skip the call of updateFreeIndex if we know we don\u0027t need refill. Not sure if it\u0027s worth it.)",
      "parentUuid": "7ff0815e_bed49c9a",
      "revId": "fcd14bdcbdfbb5b0c79cfecff95291837836a76d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bf2df8fc_4e8d911f",
        "filename": "src/runtime/mbitmap.go",
        "patchSetId": 4
      },
      "lineNbr": 155,
      "author": {
        "id": 5167
      },
      "writtenOn": "2022-11-14T19:09:39Z",
      "side": 0,
      "message": "Oof, updating freeindex in this case makes for some rough skew...",
      "revId": "fcd14bdcbdfbb5b0c79cfecff95291837836a76d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9f6de740_506456cc",
        "filename": "src/runtime/mcentral.go",
        "patchSetId": 4
      },
      "lineNbr": 149,
      "author": {
        "id": 5167
      },
      "writtenOn": "2022-11-14T19:09:39Z",
      "side": 0,
      "message": "It makes me really uncomfortable that we now drop the result of nextFreeIndex on the floor in this case. Given that it\u0027s now the caller\u0027s responsibility to commit that, I\u0027m not sure how this can be right...",
      "revId": "fcd14bdcbdfbb5b0c79cfecff95291837836a76d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "be1cfe60_9c14d8a9",
        "filename": "src/runtime/mcentral.go",
        "patchSetId": 4
      },
      "lineNbr": 149,
      "author": {
        "id": 13315
      },
      "writtenOn": "2022-11-14T20:05:12Z",
      "side": 0,
      "message": "If I understand correctly, the old code gets the result from nextFreeIndex, and nextFreeIndex increments s.freeindex past it, and this assignment sets it back to the result, undoing the increment. In the new code there is no that increment, so it doesn\u0027t need to be undone. But you\u0027re probably still right that we still want the result of the first part (skipping over the allocated slots).",
      "parentUuid": "9f6de740_506456cc",
      "revId": "fcd14bdcbdfbb5b0c79cfecff95291837836a76d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6810bb15_38dad3ef",
        "filename": "src/runtime/mcentral.go",
        "patchSetId": 4
      },
      "lineNbr": 149,
      "author": {
        "id": 5167
      },
      "writtenOn": "2022-11-14T20:57:54Z",
      "side": 0,
      "message": "Okay, I can believe that it makes sense to \"undo\" the effect of nextFreeIndex. But (in the original code) doesn\u0027t setting s.freeindex *without* setting s.allocCache get those out of sync?",
      "parentUuid": "be1cfe60_9c14d8a9",
      "revId": "fcd14bdcbdfbb5b0c79cfecff95291837836a76d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d10feae4_1884e523",
        "filename": "src/runtime/mcentral.go",
        "patchSetId": 4
      },
      "lineNbr": 149,
      "author": {
        "id": 13315
      },
      "writtenOn": "2022-11-14T21:03:30Z",
      "side": 0,
      "message": "I think the code after the havespan label recompute s.allocCache from s.freeindex.",
      "parentUuid": "6810bb15_38dad3ef",
      "revId": "fcd14bdcbdfbb5b0c79cfecff95291837836a76d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "48504f11_f698317e",
        "filename": "src/runtime/mcentral.go",
        "patchSetId": 4
      },
      "lineNbr": 149,
      "author": {
        "id": 5167
      },
      "writtenOn": "2022-11-15T16:12:07Z",
      "side": 0,
      "message": "Phew, okay, you\u0027re right. That\u0027s still pretty subtle...",
      "parentUuid": "d10feae4_1884e523",
      "revId": "fcd14bdcbdfbb5b0c79cfecff95291837836a76d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "05c06230_7ec6ae23",
        "filename": "src/runtime/mcentral.go",
        "patchSetId": 4
      },
      "lineNbr": 149,
      "author": {
        "id": 13315
      },
      "writtenOn": "2022-11-15T16:33:20Z",
      "side": 0,
      "message": "Yeah, it\u0027s still pretty subtle. Maybe we could have a function for computing the freeindex of next slot but not increment (both freeindex and allocCache) past it... (or not update anything, just a read function?)",
      "parentUuid": "48504f11_f698317e",
      "revId": "fcd14bdcbdfbb5b0c79cfecff95291837836a76d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}