{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "a84edaa7_f3337ad9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-03-16T21:59:17Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003d7696e215",
      "tag": "autogenerated:trybots~beginning",
      "revId": "7696e215d4bd6a330800feadb0dd9830f3eb9c7a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "296df13b_ccde1025",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-03-16T21:59:17Z",
      "side": 1,
      "message": "Superseded.",
      "parentUuid": "e32aa8c1_a4b4df16",
      "tag": "autogenerated:trybots~beginning",
      "revId": "7696e215d4bd6a330800feadb0dd9830f3eb9c7a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "331348bc_f18490b1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-03-16T22:13:52Z",
      "side": 1,
      "message": "1 of 29 TryBots failed.\nFailed on linux-amd64-race: https://storage.googleapis.com/go-build-log/7696e215/linux-amd64-race_d4f83118.log\n\nConsult https://build.golang.org/ to see whether they are new failures. Keep in mind that TryBots currently test *exactly* your git commit, without rebasing. If your commit\u0027s git parent is old, the failure might\u0027ve already been fixed.\n\n",
      "parentUuid": "a84edaa7_f3337ad9",
      "tag": "autogenerated:trybots~failed",
      "revId": "7696e215d4bd6a330800feadb0dd9830f3eb9c7a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "282d3376_707e254e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 13550
      },
      "writtenOn": "2022-03-16T22:20:15Z",
      "side": 1,
      "message": "Bryan/Michael, can you think of any reason why this patch series might make cmd/go race tests slow enough to hit the timeout? Note that the other CL only hit the timeout 1/2 times, whereas for this CL it\u0027s 2/2.\n\nIn #51463 we briefly talk about the overhead of scanning for `//go:embed` comments in all std Go files, but I would be surprised if it really did add that much overhead in total. Maybe I\u0027m misjudging how much go/build is used by cmd/go and its tests?",
      "revId": "7696e215d4bd6a330800feadb0dd9830f3eb9c7a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fee7526f_16862170",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 6365
      },
      "writtenOn": "2022-03-17T15:04:46Z",
      "side": 1,
      "message": "\u003e Bryan/Michael, can you think of any reason why this patch series might make cmd/go race tests slow enough to hit the timeout? Note that the other CL only hit the timeout 1/2 times, whereas for this CL it\u0027s 2/2.\n\nI don\u0027t really know, but I wouldn\u0027t be surprised if it\u0027s just from the amount of additional data being scanned. IIRC the race detector records accesses for all mutable bytes of memory, so reading a lot more data into memory (as is needed to scan for go:embed) may well make the race build a lot slower.\n\n\u003e In #51463 we briefly talk about the overhead of scanning for `//go:embed` comments in all std Go files, but I would be surprised if it really did add that much overhead in total. Maybe I\u0027m misjudging how much go/build is used by cmd/go and its tests?\n\nMaybe! Here\u0027s a thought: maybe for the standard library we could replace the `import \"embed\"` requirement with some `//go:` directive that must appear before the `import` block? (Perhaps `//go:stdembed`?)",
      "parentUuid": "282d3376_707e254e",
      "revId": "7696e215d4bd6a330800feadb0dd9830f3eb9c7a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "609b6610_7f6b2f3a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 13550
      },
      "writtenOn": "2022-03-17T15:09:16Z",
      "side": 1,
      "message": "Yeah, I guess it can\u0027t be a coincidence that I\u0027m running face-first into the data race detector if I\u0027m scanning more bytes for each Go file.\n\nI don\u0027t have a strong feeling in favor or against any alternative, though a `//go:stdembed` feels so close to `internal/embedlite` that we might as well just bite the bullet and go for the import :) the bonus being that it\u0027s going to be more obvious, and the code to find the import will be almost exactly the same as the code which already looks for the `embed` import.",
      "parentUuid": "fee7526f_16862170",
      "revId": "7696e215d4bd6a330800feadb0dd9830f3eb9c7a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}