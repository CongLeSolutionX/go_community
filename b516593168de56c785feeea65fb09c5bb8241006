{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "f5e5f073_38ba0df9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-03-10T01:23:52Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003db5165931",
      "tag": "autogenerated:trybots~beginning",
      "revId": "b516593168de56c785feeea65fb09c5bb8241006",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2fad4498_6325584b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-03-10T01:36:09Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "f5e5f073_38ba0df9",
      "tag": "autogenerated:trybots~happy",
      "revId": "b516593168de56c785feeea65fb09c5bb8241006",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "065fe3ca_68b7b455",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 8495
      },
      "writtenOn": "2022-05-02T18:12:49Z",
      "side": 1,
      "message": "I\u0027ll revisit this in a future cycle. This API was based on slices.Grow, but since that function is not being added to the standard library, it seems a bit odd for new API to be added based on \"existing\" precedence (that does not yet exist).",
      "revId": "b516593168de56c785feeea65fb09c5bb8241006",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c07bbd01_82f2657c",
        "filename": "src/reflect/value.go",
        "patchSetId": 5
      },
      "lineNbr": 2659,
      "author": {
        "id": 5200
      },
      "writtenOn": "2022-04-01T00:43:07Z",
      "side": 1,
      "message": "I think using growslice directly here has a subtle problem. In growslice, we do:\n\n\tif et.ptrdata \u003d\u003d 0 {\n\t\tp \u003d mallocgc(capmem, nil, false)\n\t\t// The append() that calls growslice is going to overwrite from old.len to cap (which will be the new length).\n\t\t// Only clear the part that will not be overwritten.\n\t\tmemclrNoHeapPointers(add(p, newlenmem), capmem-newlenmem)\n\nSo, growslice doesn\u0027t actually erase between oldlen and newlen (for allocations of pointerless data). That\u0027s ok for when the compiler calls it, because it can guarantee that it will initialize that data. But here we expect the user to do the initialization. But a sneaky user can observe uninitialized data there if they try, I think.\n\nI think we need a safer wrapper in the runtime for reflect to use.\n\n(Note that this isn\u0027t a problem with the calls from Append/AppendSlice via extendSlice. Only from Grow. Maybe Grow can do the zeroing after calling grow? It is subtle, though, and I\u0027d like to avoid subtlety like this.)",
      "revId": "b516593168de56c785feeea65fb09c5bb8241006",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a7cf670b_a98302a5",
        "filename": "src/reflect/value.go",
        "patchSetId": 5
      },
      "lineNbr": 2659,
      "author": {
        "id": 8495
      },
      "writtenOn": "2022-06-10T17:23:00Z",
      "side": 1,
      "message": "\u003e I think we need a safer wrapper in the runtime for reflect to use.\n\nI decided to take this approach.\n\nI think we should always clear the memory between `new[len(old):requestedCap]` because it is possible that Append and AppendSlice panic due to mismatching types. If so, the uninitialized memory is still observable.\n\nI added a test to check that the memory is always zero initialized.",
      "parentUuid": "c07bbd01_82f2657c",
      "revId": "b516593168de56c785feeea65fb09c5bb8241006",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "139a2f1c_d1f4f3f4",
        "filename": "src/reflect/value.go",
        "patchSetId": 5
      },
      "lineNbr": 2678,
      "author": {
        "id": 5200
      },
      "writtenOn": "2022-04-01T00:43:07Z",
      "side": 1,
      "message": "Just s.Len +\u003d n?",
      "range": {
        "startLine": 2678,
        "startChar": 1,
        "endLine": 2678,
        "endChar": 34
      },
      "revId": "b516593168de56c785feeea65fb09c5bb8241006",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "45dd7d72_763a8033",
        "filename": "src/reflect/value.go",
        "patchSetId": 5
      },
      "lineNbr": 2678,
      "author": {
        "id": 8495
      },
      "writtenOn": "2022-05-02T18:12:49Z",
      "side": 1,
      "message": "`s` is a `unsafeheader.Slice`, not a `*unsafeheader.Slice`, so the mutation would not be observable.",
      "parentUuid": "139a2f1c_d1f4f3f4",
      "range": {
        "startLine": 2678,
        "startChar": 1,
        "endLine": 2678,
        "endChar": 34
      },
      "revId": "b516593168de56c785feeea65fb09c5bb8241006",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}