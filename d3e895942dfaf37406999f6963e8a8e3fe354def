{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "b0d3b75d_627322bc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 6365
      },
      "writtenOn": "2022-12-02T21:43:08Z",
      "side": 1,
      "message": "TRY\u003dwindows-amd64-longtest",
      "revId": "d3e895942dfaf37406999f6963e8a8e3fe354def",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4d6a78b8_0684b714",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-12-02T21:44:48Z",
      "side": 1,
      "message": "SlowBots beginning. Status page: https://farmer.golang.org/try?commit\u003dd3e89594\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "d3e895942dfaf37406999f6963e8a8e3fe354def",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "483d2d95_580e46cc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-12-02T22:01:08Z",
      "side": 1,
      "message": "1 of 31 SlowBots failed.\nFailed on windows-amd64-longtest: https://storage.googleapis.com/go-build-log/d3e89594/windows-amd64-longtest_315d09df.log\n\nConsult https://build.golang.org/ to see whether they are new failures. Keep in mind that TryBots currently test *exactly* your git commit, without rebasing. If your commit\u0027s git parent is old, the failure might\u0027ve already been fixed.\n\nSlowBot builds that ran:\n* windows-amd64-longtest\n",
      "parentUuid": "4d6a78b8_0684b714",
      "tag": "autogenerated:trybots~failed",
      "revId": "d3e895942dfaf37406999f6963e8a8e3fe354def",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7bdc211b_8a3f0e57",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 6365
      },
      "writtenOn": "2022-12-02T22:03:36Z",
      "side": 1,
      "message": "\u003e 1 of 31 SlowBots failed.\n\u003e Failed on windows-amd64-longtest: https://storage.googleapis.com/go-build-log/d3e89594/windows-amd64-longtest_315d09df.log\n\nRats. Guess we\u0027ve got a little more work to do on the reproducibility front. ðŸ˜ž",
      "parentUuid": "483d2d95_580e46cc",
      "revId": "d3e895942dfaf37406999f6963e8a8e3fe354def",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "542aec18_1aa42fca",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 14020
      },
      "writtenOn": "2022-12-05T14:04:35Z",
      "side": 1,
      "message": "I poked at this a little bit. \n\nComparing the strings in the two binaries it appears that the culprit is the build ID:\n\n$ strings main1.exe \u003e /tmp/s1.txt\n$ strings main.exe \u003e /tmp/s.txt\n$ diff /tmp/s1.txt /tmp/s.txt\n29c29\n\u003c  Go build ID: \"dZHTL-mLNl-75j1PYoxo/6xeQjCD5n1mC5hnYQrOh/9HtIZ0KXlMGp3kJObCKn/n8-pUzSAbddhAbGR81bh\"\n---\n\u003e  Go build ID: \"dZHTL-mLNl-75j1PYoxo/6xeQjCD5n1mC5hnYQrOh/9HtIZ0KXlMGp3kJObCKn/fX3iLpaqUFu7Nu3ILlZ2\"",
      "revId": "d3e895942dfaf37406999f6963e8a8e3fe354def",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f3726cb8_f09a2bd2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 13315
      },
      "writtenOn": "2022-12-05T17:02:26Z",
      "side": 1,
      "message": "The build ID should be a hash of the file content. Usually it indicates something else in the file differs. Are all the other bytes the same?",
      "parentUuid": "542aec18_1aa42fca",
      "revId": "d3e895942dfaf37406999f6963e8a8e3fe354def",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b7d1d906_d63f467f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 14020
      },
      "writtenOn": "2022-12-05T20:38:17Z",
      "side": 1,
      "message": "OK, I dug into this a bit earlier. I ran the two offending builds (the ones that are supposed to produce identical output) with \"-x\" and captured the stderr, then I also ran with -tmpdir\u003d... in both cases to capture the \"go.o\" file being created by the Go linker to feed into the external linking step. \n\nFor the first build, the \"-x\" output shows the build id being set to a specific value, as expected. Here is the link line\n\n```\n\"C:\\\\workdir\\\\go\\\\pkg\\\\tool\\\\windows_amd64\\\\link.exe\" -o \"$WORK\\\\b001\\\\exe\\\\a.out.exe\" -importcfg \"$WORK\\\\b001\\\\importcfg.link\" -buildmode\u003dpie \\\n-buildid\u003dCgyrkNSznQh8Dmld7Se8/5MYNNhjWxvVHM7HZHaf2/9HtIZ0KXlMGp3kJObCKn/CgyrkNSznQh8Dmld7Se8 -linkmode\u003dexternal -tmpdir\u003dC:/workdir/xxx/tmparchive/tmp1 -extld\u003dgcc \"$WORK\\\\b001\\\\_pkg_.a\"\n```\n\nIf I inspect the go.o generated (via llvm-objdump) I see\n\n```\nContents of section .text:\n 0000 ff20476f 20627569 6c642049 443a2022  . Go build ID: \"\n 0010 43677972 6b4e537a 6e516838 446d6c64  CgyrkNSznQh8Dmld\n 0020 37536538 2f354d59 4e4e686a 57787656  7Se8/5MYNNhjWxvV\n 0030 484d3748 5a486166 322f3948 74495a30  HM7HZHaf2/9HtIZ0\n 0040 4b586c4d 4770336b 4a4f6243 4b6e2f43  KXlMGp3kJObCKn/C\n 0050 6779726b 4e537a6e 51683844 6d6c6437  gyrkNSznQh8Dmld7\n 0060 53653822 0a20ffcc cccccccc cccccccc  Se8\". ..........\n```\n\nThis all looks fine. Here\u0027s the \"-x\" output for the second link (where I might add everything is coming out of the cache):\n\n```\n\"C:\\\\workdir\\\\go\\\\pkg\\\\tool\\\\windows_amd64\\\\link.exe\" -o \"$WORK\\\\b001\\\\exe\\\\a.out.exe\" -importcfg \"$WORK\\\\b001\\\\importcfg.link\" -buildmode\u003dpie \\\n -buildid\u003dkWHDvJUprBArDDbOpbwe/KhTbpEhAZTjCW6NhCAPH/9HtIZ0KXlMGp3kJObCKn/kWHDvJUprBArDDbOpbwe -linkmode\u003dexternal -tmpdir\u003dC:/workdir/xxx/tmparchive/tmp3 -extld\u003dgcc \"$WORK\\\\b001\\\\_pkg_.a\"\n```\n\nNote the final segment of the build ID diffs (was CgyrkNSznQh8Dmld7Se8 first time around and now kWHDvJUprBArDDbOpbwe this time). \n\nEven weirder, when I inspect the go.o, I see:\n\n```\nContents of section .text:\n 0000 ff20476f 20627569 6c642049 443a2022  . Go build ID: \"\n 0010 716f6235 35582d31 676b7536 6b354f5a  qob55X-1gku6k5OZ\n 0020 4a677859 2f434b34 7755656c 37782d71  JgxY/CK4wUel7x-q\n 0030 63483246 42595847 432f3948 74495a30  cH2FBYXGC/9HtIZ0\n 0040 4b586c4d 4770336b 4a4f6243 4b6e2f71  KXlMGp3kJObCKn/q\n 0050 6f623535 582d3167 6b75366b 354f5a4a  ob55X-1gku6k5OZJ\n 0060 67785922 0a20ffcc cccccccc cccccccc  gxY\". ..........\n```\n\nFinal segment there (qob55X-1gku6k5OZJgxY) doesn\u0027t seem to match either what appears in the \"-x\" output or the value from the previous run.\n\nI can\u0027t explain this at all for the second link. Could the Go command be somehow printing one thing for the \"-x\" output and sending something else to the linker? This seems impossible.\n\nI\u0027ll try rerunning with GODEBUG\u003dgocachehash\u003d1 maybe.",
      "parentUuid": "f3726cb8_f09a2bd2",
      "revId": "d3e895942dfaf37406999f6963e8a8e3fe354def",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4dcd71a4_dc033db4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 6365
      },
      "writtenOn": "2022-12-05T20:57:38Z",
      "side": 1,
      "message": "The final segment of the build-ID is a hash of the actual binary itself,Â¹ so it will indeed differ from the one passed to the linker.\n\nThat ID update step happens here:\nhttps://cs.opensource.google/go/go/+/master:src/cmd/go/internal/work/exec.go;l\u003d1401-1419;drc\u003d3a7a528c2d7ee0c7b2988a7aee0b9347e973cbed\n\nâ€•\n\nÂ¹https://cs.opensource.google/go/go/+/master:src/cmd/go/internal/work/buildid.go;l\u003d25-33;drc\u003ddb259cdd80eff527e8f344d678031c516167d258",
      "parentUuid": "b7d1d906_d63f467f",
      "revId": "d3e895942dfaf37406999f6963e8a8e3fe354def",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "11df4afc_ca01b19f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 14020
      },
      "writtenOn": "2022-12-06T15:14:22Z",
      "side": 1,
      "message": "Thanks. I tend to fall into the trap of thinking that the transcript from \"go build -x\" is completely accurate, but this is obviously not always the case.\n\nLooks like I have been overthinking this a bit, the difference seems to be right there staring me in the face once I diff the output of \"llvm-objdump-14 --wide --all-headers -s -r\": the PE file header has a timestamp (e.g. [this field](https://go.googlesource.com/go/+/1eb0465fa596a2d6e9c1a632499989544f0d7e68/src/debug/pe/pe.go#10), and the differences there are going to trigger a difference in the build ID.\n\n```\n$ llvm-objdump-14 --wide --all-headers -s -r xxx/main.exe \u003e oda.txt\n$ llvm-objdump-14 --wide --all-headers -s -r xxx/main1.exe \u003e oda1.txt\n$ diff oda.txt oda1.txt\n2c2\n\u003c xxx/main.exe:\tfile format coff-x86-64\n---\n\u003e xxx/main1.exe:\tfile format coff-x86-64\n9c9\n\u003c Time/Date               Tue Dec  6 09:55:52 2022\n---\n\u003e Time/Date               Tue Dec  6 09:55:41 2022\n2324,2326c2324,2326\n\u003c  1400014c0 31356c74 52546545 72423337 69382f6f  15ltRTeErB37i8/o\n\u003c  1400014d0 357a5664 30784462 6c5a4639 6969775f  5zVd0xDblZF9iiw_\n\u003c  1400014e0 30386922 0a20ffcc cccccccc cccccccc  08i\". ..........\n---\n\u003e  1400014c0 31356c74 52546545 72423337 69382f48  15ltRTeErB37i8/H\n\u003e  1400014d0 324d6c64 6f2d3751 6b614973 45494c63  2Mldo-7QkaIsEILc\n\u003e  1400014e0 66547622 0a20ffcc cccccccc cccccccc  fTv\". ..........\n58151c58151\n\u003c  1400dc000 00000000 f8578f63 00000000 02000000  .....W.c........\n---\n\u003e  1400dc000 00000000 ed578f63 00000000 02000000  .....W.c........\n```\n\nFor internal linking we [zero the timestamp](https://go.googlesource.com/go/+/1eb0465fa596a2d6e9c1a632499989544f0d7e68/src/cmd/link/internal/ld/pe.go#885), but without telling the external linker otherwise, we\u0027ll get a timestamp. I verified that the diff goes away if I add `-ldflags\u003d\"-extldflags\u003d-Wl,--no-insert-timestamp\"`, so I think that\u0027s probably the right option to pursue.",
      "parentUuid": "4dcd71a4_dc033db4",
      "revId": "d3e895942dfaf37406999f6963e8a8e3fe354def",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f6af5c4b_0dc847b3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 13315
      },
      "writtenOn": "2022-12-06T15:20:48Z",
      "side": 1,
      "message": "Interesting. Good observation! Yeah, this sounds like the right thing to do.",
      "parentUuid": "11df4afc_ca01b19f",
      "revId": "d3e895942dfaf37406999f6963e8a8e3fe354def",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}