{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "c9cef2ce_d0160579",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-08-30T17:43:07Z",
      "side": 1,
      "message": "Superseded.",
      "parentUuid": "396ee288_d91da2f0",
      "tag": "autogenerated:trybots~beginning",
      "revId": "4355e610e824f95c6262bdf90279c1ca33b82443",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "502b964e_82ca3c5c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-08-30T17:43:07Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003d4355e610",
      "tag": "autogenerated:trybots~beginning",
      "revId": "4355e610e824f95c6262bdf90279c1ca33b82443",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "69fecdae_75b9ae1c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-08-30T17:55:11Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "502b964e_82ca3c5c",
      "tag": "autogenerated:trybots~happy",
      "revId": "4355e610e824f95c6262bdf90279c1ca33b82443",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f91c8e1b_1cace19b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5200
      },
      "writtenOn": "2021-08-30T19:28:21Z",
      "side": 1,
      "message": "LGTM.\nThe fix for sha512 was CL 211617.",
      "revId": "4355e610e824f95c6262bdf90279c1ca33b82443",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "505eaee2_e0e401b5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 11715
      },
      "writtenOn": "2021-08-31T11:16:15Z",
      "side": 1,
      "message": "TRY\u003dnoopt, arm64",
      "revId": "4355e610e824f95c6262bdf90279c1ca33b82443",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ff64aad3_72bb824b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-08-31T11:16:31Z",
      "side": 1,
      "message": "SlowBots beginning. Status page: https://farmer.golang.org/try?commit\u003d4355e610",
      "tag": "autogenerated:trybots~beginning",
      "revId": "4355e610e824f95c6262bdf90279c1ca33b82443",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c6e9f9b4_5dd2024a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 11715
      },
      "writtenOn": "2021-08-31T11:18:04Z",
      "side": 1,
      "message": "Hmm, this didn\u0027t do what I wanted.\n\nLast time I added an AllocsPerRun test, it broke the noopt builder. Try running the test with optimizations turned off?",
      "parentUuid": "505eaee2_e0e401b5",
      "revId": "4355e610e824f95c6262bdf90279c1ca33b82443",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "18b544ef_85a1d19e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-08-31T11:27:17Z",
      "side": 1,
      "message": "SlowBots are happy.\n\nSlowBot builds that ran:\n* linux-arm64-aws\n",
      "parentUuid": "ff64aad3_72bb824b",
      "tag": "autogenerated:trybots~happy",
      "revId": "4355e610e824f95c6262bdf90279c1ca33b82443",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "08072dcb_882fe656",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 8495
      },
      "writtenOn": "2021-08-31T16:31:24Z",
      "side": 1,
      "message": "I tried running the following and it passed:\n\n  $ GOARCH\u003darm go.dev test -c -gcflags\u003d\"-N -l\"\n  $ qemu-arm ./sha256.test -test.run\u003dAlloc --test.v\n  \u003d\u003d\u003d RUN   TestAllocations\n  --- PASS: TestAllocations (0.01s)\n  PASS\n\nAccording to the `-gcflags` help output, \"-N -l\" should be sufficient to disable all optimizations and inlining. I though escape analysis was a form of optimization, so I\u0027m not sure exactly what \"-N\" disables.",
      "parentUuid": "c6e9f9b4_5dd2024a",
      "revId": "4355e610e824f95c6262bdf90279c1ca33b82443",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4d966569_30ab0723",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 8495
      },
      "writtenOn": "2021-09-11T04:49:09Z",
      "side": 1,
      "message": "@filippo: Ping! Does this CL look good to you?",
      "parentUuid": "08072dcb_882fe656",
      "revId": "4355e610e824f95c6262bdf90279c1ca33b82443",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2c5fee1c_4fb1c41a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 11715
      },
      "writtenOn": "2021-09-23T16:14:02Z",
      "side": 1,
      "message": "Oh, this is different from https://golang.org/issue/46134 because inlining here is not instrumental to avoiding the allocation, plain simple escape analysis is! So yep, this is great.",
      "parentUuid": "4d966569_30ab0723",
      "revId": "4355e610e824f95c6262bdf90279c1ca33b82443",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}