{
  "comments": [
    {
      "key": {
        "uuid": "d73042e3_7376351d",
        "filename": "src/cmd/compile/internal/gc/escape.go",
        "patchSetId": 2
      },
      "lineNbr": 283,
      "author": {
        "id": 5440
      },
      "writtenOn": "2019-09-05T17:17:12Z",
      "side": 0,
      "message": "This assignment is important so that we cleanup n.Sym.Label before escape analysis finishes. If we leave n.Sym.Label set to \u0026nonlooping, it could affect escape analysis of subsequent functions that use the same symbols.",
      "revId": "aae0b5b0b26bf4fd26cad0111535d703691a9083",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e824c935_6f1cc56d",
        "filename": "src/cmd/compile/internal/gc/escape.go",
        "patchSetId": 2
      },
      "lineNbr": 283,
      "author": {
        "id": 14665
      },
      "writtenOn": "2019-09-05T17:21:30Z",
      "side": 0,
      "message": "Ack",
      "parentUuid": "d73042e3_7376351d",
      "revId": "aae0b5b0b26bf4fd26cad0111535d703691a9083",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a4ef5e0_69b462f3",
        "filename": "src/cmd/compile/internal/gc/escape.go",
        "patchSetId": 2
      },
      "lineNbr": 401,
      "author": {
        "id": 5440
      },
      "writtenOn": "2019-09-05T17:17:12Z",
      "side": 0,
      "message": "What I had in mind here was adding a function like:\n\n    func (e *Escape) block(l Nodes) {\n        old :\u003d e.loopDepth\n        e.stmts(l)\n        e.loopDepth \u003d old\n    }\n\nand then replacing calls to e.stmts with e.block where it\u0027s safe.\n\nI\u0027m pretty sure all of the calls to e.stmts(x.Nbody) and e.stmts(x.Rlist) are safe.",
      "revId": "aae0b5b0b26bf4fd26cad0111535d703691a9083",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a31970e9_3486188e",
        "filename": "src/cmd/compile/internal/gc/escape.go",
        "patchSetId": 2
      },
      "lineNbr": 401,
      "author": {
        "id": 14665
      },
      "writtenOn": "2019-09-05T17:21:30Z",
      "side": 0,
      "message": "Ah right, I did try preserve loopDepth inside this stmts, it solved the first test, but not the second.",
      "parentUuid": "7a4ef5e0_69b462f3",
      "revId": "aae0b5b0b26bf4fd26cad0111535d703691a9083",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ce18b972_d4c37056",
        "filename": "src/cmd/compile/internal/gc/escape.go",
        "patchSetId": 2
      },
      "lineNbr": 401,
      "author": {
        "id": 5440
      },
      "writtenOn": "2019-09-05T17:38:38Z",
      "side": 0,
      "message": "Don\u0027t worry about the second case. No one writes Go code like that.\n\nThe third case is actually interesting, but will require more sophisticated control flow analysis.\n\n[Aside: The reason the second case doesn\u0027t work is because of all the \"n.Op \u003d\u003d OBLOCK \u0026\u0026 n.Ninit.Len() \u003d\u003d 0\" special case logic in noder.go. Theoretically, we should be able to just remove that logic, but I\u0027m concerned it would have other undesirable consequences. So I wouldn\u0027t recommend spending time on it.]",
      "parentUuid": "a31970e9_3486188e",
      "revId": "aae0b5b0b26bf4fd26cad0111535d703691a9083",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    }
  ]
}