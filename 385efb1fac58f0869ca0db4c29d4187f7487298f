{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "f092eb16_fd2873c0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 13
      },
      "lineNbr": 0,
      "author": {
        "id": 34993
      },
      "writtenOn": "2022-12-19T13:29:48Z",
      "side": 1,
      "message": "windows/arm64 and windows/arm builders are down, but I\u0027ve verified locally that tests are passing.",
      "revId": "385efb1fac58f0869ca0db4c29d4187f7487298f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "909cf423_24537fd4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 13
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-12-19T13:30:04Z",
      "side": 1,
      "message": "SlowBots beginning. Status page: https://farmer.golang.org/try?commit\u003d385efb1f\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "385efb1fac58f0869ca0db4c29d4187f7487298f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "80980d01_ac97ffac",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 13
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-12-19T13:30:04Z",
      "side": 1,
      "message": "Superseded.",
      "parentUuid": "5adbaaa4_12c71736",
      "tag": "autogenerated:trybots~beginning",
      "revId": "385efb1fac58f0869ca0db4c29d4187f7487298f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1c295cfc_87255d58",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 13
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-12-19T13:47:05Z",
      "side": 1,
      "message": "SlowBots are happy.\n\nSlowBot builds that ran:\n* windows-amd64-longtest\n",
      "parentUuid": "909cf423_24537fd4",
      "tag": "autogenerated:trybots~happy",
      "revId": "385efb1fac58f0869ca0db4c29d4187f7487298f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8b786828_d5d30505",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 13
      },
      "lineNbr": 0,
      "author": {
        "id": 12120
      },
      "writtenOn": "2022-12-19T21:20:47Z",
      "side": 1,
      "message": "Thanks, this Go code is so much more readable than the old assembly!",
      "revId": "385efb1fac58f0869ca0db4c29d4187f7487298f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c3837127_658d89cf",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 13
      },
      "lineNbr": 0,
      "author": {
        "id": 34993
      },
      "writtenOn": "2022-12-19T21:48:42Z",
      "side": 1,
      "message": "This was the intent ðŸ˜Ž",
      "parentUuid": "8b786828_d5d30505",
      "revId": "385efb1fac58f0869ca0db4c29d4187f7487298f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f9678155_c151c741",
        "filename": "src/runtime/signal_windows.go",
        "patchSetId": 13
      },
      "lineNbr": 138,
      "author": {
        "id": 12120
      },
      "writtenOn": "2022-12-19T21:20:47Z",
      "side": 1,
      "message": "systemstack keeps the stack as-is and calls fn if it is already on the g0 stack. So I don\u0027t think you need the conditional; just unconditionally use systemstack().",
      "revId": "385efb1fac58f0869ca0db4c29d4187f7487298f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "345ee392_ad1864a2",
        "filename": "src/runtime/signal_windows.go",
        "patchSetId": 13
      },
      "lineNbr": 138,
      "author": {
        "id": 34993
      },
      "writtenOn": "2022-12-19T21:48:42Z",
      "side": 1,
      "message": "Neat!",
      "parentUuid": "f9678155_c151c741",
      "revId": "385efb1fac58f0869ca0db4c29d4187f7487298f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "23c8b009_7752c939",
        "filename": "src/runtime/signal_windows.go",
        "patchSetId": 13
      },
      "lineNbr": 138,
      "author": {
        "id": 34993
      },
      "writtenOn": "2022-12-19T22:12:15Z",
      "side": 1,
      "message": "Hmm, not I remember why I did not unconditionally use systemstack(). It sometimes fail with `fatal: morestack on g0` https://storage.googleapis.com/go-build-log/452ae817/windows-amd64-2016_d7223721.log.\n\nWill investigate more.",
      "parentUuid": "345ee392_ad1864a2",
      "revId": "385efb1fac58f0869ca0db4c29d4187f7487298f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1177608c_c5bc9a54",
        "filename": "src/runtime/signal_windows.go",
        "patchSetId": 13
      },
      "lineNbr": 138,
      "author": {
        "id": 12120
      },
      "writtenOn": "2022-12-19T22:57:26Z",
      "side": 1,
      "message": "Oh blegh. I think what is happening is that TestG0StackOverflow is overflowing the g0 stack (as it should!), and then ending up in the signal handler [1]. The closure you pass to `systemstack()` must have a `morestack()` preamble call, which triggers because the g0 stack is at the guard.\n\nThe \"right\" answer is that that closure should be marked `//go:nosplit` in order to omit the preamble. But there is no way to add `//go:nosplit` to a closure, only top-level functions.\n\nI can\u0027t think of other workarounds off the top of my head. You may need to switch back to what you had before...\n\n[1] I\u0027m not entirely sure exactly why this happens? [2] should throw() in a morestack() call in stackOverflow() when it reaches the stack guard. That throw should be a successful fatal throw that just exits with `exit(2)`. But maybe `GOTRACEBACK\u003dcrash` is set and it is trying to crash instead of cleanly exiting?\n[2] https://cs.opensource.google/go/go/+/master:src/runtime/export_test.go;l\u003d559-568",
      "parentUuid": "23c8b009_7752c939",
      "revId": "385efb1fac58f0869ca0db4c29d4187f7487298f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fb080756_58297a68",
        "filename": "src/runtime/signal_windows.go",
        "patchSetId": 13
      },
      "lineNbr": 138,
      "author": {
        "id": 34993
      },
      "writtenOn": "2022-12-20T09:45:03Z",
      "side": 1,
      "message": "Found the culprit: on 386 and amd64 `abort()` is implemented as a breakpoint instruction [1], which dispatches a hardware exception catch by `sigtrampgo`.\n\nWe better don\u0027t create the closure when running on g0 as we can\u0027t afford growing the stack in `sigtrampgo`.\n\n[1] https://cs.opensource.google/go/go/+/master:src/runtime/asm_amd64.s;l\u003d1060-1063",
      "parentUuid": "1177608c_c5bc9a54",
      "revId": "385efb1fac58f0869ca0db4c29d4187f7487298f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "12f8dd92_ffde0b0f",
        "filename": "src/runtime/sys_windows_386.s",
        "patchSetId": 13
      },
      "lineNbr": 86,
      "author": {
        "id": 12120
      },
      "writtenOn": "2022-12-19T21:20:47Z",
      "side": 1,
      "message": "of",
      "range": {
        "startLine": 86,
        "startChar": 18,
        "endLine": 86,
        "endChar": 20
      },
      "revId": "385efb1fac58f0869ca0db4c29d4187f7487298f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b564a1e8_0c2eb112",
        "filename": "src/runtime/sys_windows_386.s",
        "patchSetId": 13
      },
      "lineNbr": 86,
      "author": {
        "id": 34993
      },
      "writtenOn": "2022-12-19T21:48:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "12f8dd92_ffde0b0f",
      "range": {
        "startLine": 86,
        "startChar": 18,
        "endLine": 86,
        "endChar": 20
      },
      "revId": "385efb1fac58f0869ca0db4c29d4187f7487298f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6b54defc_c0fb7bff",
        "filename": "src/runtime/sys_windows_amd64.s",
        "patchSetId": 13
      },
      "lineNbr": 112,
      "author": {
        "id": 12120
      },
      "writtenOn": "2022-12-19T21:20:47Z",
      "side": 1,
      "message": "of",
      "range": {
        "startLine": 112,
        "startChar": 18,
        "endLine": 112,
        "endChar": 20
      },
      "revId": "385efb1fac58f0869ca0db4c29d4187f7487298f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "87e2b260_a0853fcd",
        "filename": "src/runtime/sys_windows_amd64.s",
        "patchSetId": 13
      },
      "lineNbr": 112,
      "author": {
        "id": 12120
      },
      "writtenOn": "2022-12-19T21:20:47Z",
      "side": 1,
      "message": "of",
      "range": {
        "startLine": 112,
        "startChar": 18,
        "endLine": 112,
        "endChar": 20
      },
      "revId": "385efb1fac58f0869ca0db4c29d4187f7487298f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0167e71b_883b3ece",
        "filename": "src/runtime/sys_windows_amd64.s",
        "patchSetId": 13
      },
      "lineNbr": 112,
      "author": {
        "id": 34993
      },
      "writtenOn": "2022-12-19T21:48:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6b54defc_c0fb7bff",
      "range": {
        "startLine": 112,
        "startChar": 18,
        "endLine": 112,
        "endChar": 20
      },
      "revId": "385efb1fac58f0869ca0db4c29d4187f7487298f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7a15ad51_7ef5d9c9",
        "filename": "src/runtime/sys_windows_amd64.s",
        "patchSetId": 13
      },
      "lineNbr": 112,
      "author": {
        "id": 34993
      },
      "writtenOn": "2022-12-19T21:48:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "87e2b260_a0853fcd",
      "range": {
        "startLine": 112,
        "startChar": 18,
        "endLine": 112,
        "endChar": 20
      },
      "revId": "385efb1fac58f0869ca0db4c29d4187f7487298f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1d190f35_a2223b90",
        "filename": "src/runtime/sys_windows_arm.s",
        "patchSetId": 13
      },
      "lineNbr": 112,
      "author": {
        "id": 12120
      },
      "writtenOn": "2022-12-19T21:20:47Z",
      "side": 1,
      "message": "of",
      "range": {
        "startLine": 112,
        "startChar": 18,
        "endLine": 112,
        "endChar": 20
      },
      "revId": "385efb1fac58f0869ca0db4c29d4187f7487298f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fab3e441_7077dd56",
        "filename": "src/runtime/sys_windows_arm.s",
        "patchSetId": 13
      },
      "lineNbr": 112,
      "author": {
        "id": 34993
      },
      "writtenOn": "2022-12-19T21:48:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1d190f35_a2223b90",
      "range": {
        "startLine": 112,
        "startChar": 18,
        "endLine": 112,
        "endChar": 20
      },
      "revId": "385efb1fac58f0869ca0db4c29d4187f7487298f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9c9e0c60_198e9c4a",
        "filename": "src/runtime/sys_windows_arm.s",
        "patchSetId": 13
      },
      "lineNbr": 126,
      "author": {
        "id": 12120
      },
      "writtenOn": "2022-12-19T21:20:47Z",
      "side": 1,
      "message": "We don\u0027t have ABIInternal for arm32 (hence the use of stack slots), so this is misleading. Switch to a normal ABI0 call?",
      "range": {
        "startLine": 126,
        "startChar": 22,
        "endLine": 126,
        "endChar": 35
      },
      "revId": "385efb1fac58f0869ca0db4c29d4187f7487298f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e55632e2_cbd2b4e5",
        "filename": "src/runtime/sys_windows_arm.s",
        "patchSetId": 13
      },
      "lineNbr": 126,
      "author": {
        "id": 34993
      },
      "writtenOn": "2022-12-19T21:48:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9c9e0c60_198e9c4a",
      "range": {
        "startLine": 126,
        "startChar": 22,
        "endLine": 126,
        "endChar": 35
      },
      "revId": "385efb1fac58f0869ca0db4c29d4187f7487298f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}