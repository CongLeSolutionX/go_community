{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "7265c8ad_4998f688",
        "filename": "src/cmd/link/internal/loadelf/ldelf.go",
        "patchSetId": 19
      },
      "lineNbr": 608,
      "author": {
        "id": 54019
      },
      "writtenOn": "2024-08-05T03:30:06Z",
      "side": 1,
      "message": "I think it would be better to write a separate function for filtering symbol prefixes",
      "revId": "ccde7dfb55afd7d44601af8a19651ce29e8c0fee",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a7ff0c06_3c09ba2c",
        "filename": "src/cmd/link/internal/loadelf/ldelf.go",
        "patchSetId": 19
      },
      "lineNbr": 608,
      "author": {
        "id": 54318
      },
      "writtenOn": "2024-08-07T06:55:13Z",
      "side": 1,
      "message": "Thanks, but I think it\u0027s best to keep it as is. A new function to filter symbols wouldn\u0027t make the code here any cleaner.",
      "parentUuid": "7265c8ad_4998f688",
      "revId": "ccde7dfb55afd7d44601af8a19651ce29e8c0fee",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cf0a2a91_9a0c9c9f",
        "filename": "src/cmd/link/internal/loadelf/ldelf.go",
        "patchSetId": 19
      },
      "lineNbr": 693,
      "author": {
        "id": 13315
      },
      "writtenOn": "2024-08-19T15:42:04Z",
      "side": 1,
      "message": "Why do we need to skip here? Is that the code above skips label symbols that are not in any section, whereas this skips ones in a section? It seems weird that a label symbol is not in any section. Also why we don\u0027t need this on other platforms? GCC on other platforms generate label symbols, too.",
      "range": {
        "startLine": 690,
        "startChar": 0,
        "endLine": 693,
        "endChar": 5
      },
      "revId": "ccde7dfb55afd7d44601af8a19651ce29e8c0fee",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1b8e7e3e_9ec2b80a",
        "filename": "src/cmd/link/internal/loadelf/ldelf.go",
        "patchSetId": 19
      },
      "lineNbr": 693,
      "author": {
        "id": 54318
      },
      "writtenOn": "2024-08-21T08:27:31Z",
      "side": 1,
      "message": "Thank you. We skip here because there are too many of these label symbols starting with L0 or .L, and they make ctxt.Textp too big, which will cause an error when generating findfunctab: too many functions in a findfunc bucket!",
      "parentUuid": "cf0a2a91_9a0c9c9f",
      "range": {
        "startLine": 690,
        "startChar": 0,
        "endLine": 693,
        "endChar": 5
      },
      "revId": "ccde7dfb55afd7d44601af8a19651ce29e8c0fee",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c035b219_d2cf6e07",
        "filename": "src/cmd/link/internal/loadelf/ldelf.go",
        "patchSetId": 19
      },
      "lineNbr": 693,
      "author": {
        "id": 13315
      },
      "writtenOn": "2024-08-21T15:35:27Z",
      "side": 1,
      "message": "Interesting... Does loong64 GCC create many more such symbols than other architectures?\n\nIs the skip above still necessary? Is there any such symbol not in any section?",
      "parentUuid": "1b8e7e3e_9ec2b80a",
      "range": {
        "startLine": 690,
        "startChar": 0,
        "endLine": 693,
        "endChar": 5
      },
      "revId": "ccde7dfb55afd7d44601af8a19651ce29e8c0fee",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7d2a0916_9f03deeb",
        "filename": "src/cmd/link/internal/loadelf/ldelf.go",
        "patchSetId": 19
      },
      "lineNbr": 693,
      "author": {
        "id": 54318
      },
      "writtenOn": "2024-09-11T08:20:09Z",
      "side": 1,
      "message": "Sorry, I replied late. \n\nThese symbols are all generated by the relax feature of gcc. I don\u0027t know if loong64 generates much more of these symbols than other architectures, because I don\u0027t have other platforms with relax feature turned on for testing, I guess other architectures are similar when relax is turned on.\n\nThere will be no symbols starting with .L or L0 that do not belong to any section. A large part of them belong to sections whose sect.sym is 0, and the elfsym.Type of these symbols is 0. This part of symbols must be ignored.",
      "parentUuid": "c035b219_d2cf6e07",
      "range": {
        "startLine": 690,
        "startChar": 0,
        "endLine": 693,
        "endChar": 5
      },
      "revId": "ccde7dfb55afd7d44601af8a19651ce29e8c0fee",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d3912ea4_784321eb",
        "filename": "src/cmd/link/internal/loadelf/ldelf.go",
        "patchSetId": 19
      },
      "lineNbr": 693,
      "author": {
        "id": 13315
      },
      "writtenOn": "2024-09-11T18:25:06Z",
      "side": 1,
      "message": "Okay, I\u0027ll take another look. Thanks.",
      "parentUuid": "7d2a0916_9f03deeb",
      "range": {
        "startLine": 690,
        "startChar": 0,
        "endLine": 693,
        "endChar": 5
      },
      "revId": "ccde7dfb55afd7d44601af8a19651ce29e8c0fee",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "07d68bf6_028b07be",
        "filename": "src/cmd/link/internal/loadelf/ldelf.go",
        "patchSetId": 19
      },
      "lineNbr": 693,
      "author": {
        "id": 54318
      },
      "writtenOn": "2024-10-10T12:50:16Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "d3912ea4_784321eb",
      "range": {
        "startLine": 690,
        "startChar": 0,
        "endLine": 693,
        "endChar": 5
      },
      "revId": "ccde7dfb55afd7d44601af8a19651ce29e8c0fee",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7eabaced_82c2c703",
        "filename": "src/cmd/link/internal/loadelf/ldelf.go",
        "patchSetId": 19
      },
      "lineNbr": 693,
      "author": {
        "id": 13315
      },
      "writtenOn": "2024-10-10T19:23:12Z",
      "side": 1,
      "message": "I still don\u0027t quite understand. I think sect.sym being 0 means the symbol does not belong to any section. Also, why it needs to be skipped in two places? What symbols are covered in one place but not another? Could you share a C object file for an example?",
      "parentUuid": "07d68bf6_028b07be",
      "range": {
        "startLine": 690,
        "startChar": 0,
        "endLine": 693,
        "endChar": 5
      },
      "revId": "ccde7dfb55afd7d44601af8a19651ce29e8c0fee",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "754f4214_e8152327",
        "filename": "src/cmd/link/internal/loadelf/ldelf.go",
        "patchSetId": 19
      },
      "lineNbr": 693,
      "author": {
        "id": 13315
      },
      "writtenOn": "2024-10-10T19:23:43Z",
      "side": 1,
      "message": "(Please keep the comment unresolved until we understand. Thanks.)",
      "parentUuid": "7eabaced_82c2c703",
      "range": {
        "startLine": 690,
        "startChar": 0,
        "endLine": 693,
        "endChar": 5
      },
      "revId": "ccde7dfb55afd7d44601af8a19651ce29e8c0fee",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8b8c1f1c_cb9eb733",
        "filename": "src/cmd/link/internal/loadelf/ldelf.go",
        "patchSetId": 19
      },
      "lineNbr": 693,
      "author": {
        "id": 54318
      },
      "writtenOn": "2024-10-15T11:55:45Z",
      "side": 1,
      "message": "We ignore these symbols starting with \".L\" or \"L0\" in two places, but for different reasons, and the symbols ignored in the two places are not overlapping.\n\nThe first place ignores these symbols whose sect.sym is 0, and these symbols will not appear in the second place.\nThe symbols ignored in the second place have sect.sym that is not 0 (most of them belong to the text segment). We ignore them here because there are too many of them, which makes findfunc bucket unable to fit.\n\nHere is an example file: https://github.com/limeidan/share/blob/main/_x005.o\n\nI don\u0027t know if this can solve your question. We can continue to discuss. Thank you.",
      "parentUuid": "754f4214_e8152327",
      "range": {
        "startLine": 690,
        "startChar": 0,
        "endLine": 693,
        "endChar": 5
      },
      "revId": "ccde7dfb55afd7d44601af8a19651ce29e8c0fee",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7c30ed35_3750f780",
        "filename": "src/cmd/link/internal/loadelf/ldelf.go",
        "patchSetId": 19
      },
      "lineNbr": 693,
      "author": {
        "id": 13315
      },
      "writtenOn": "2024-10-18T13:27:38Z",
      "side": 1,
      "message": "Thanks for the example. From objdump, it looks like all these symbols have a section:\n\n```\n0000000000000004 l       .text  0000000000000000 .LVL0\n0000000000000004 l       .text  0000000000000000 .LFB31\n0000000000000004 l       .text  0000000000000000 .hidden L0^A\n0000000000000004 l       .text  0000000000000000 .hidden L0^A\n```\n\nWhat symbols do not have section?\n\nIt probably makes sense to skip pctable entries for them.\n\nThe \"^A\" is interesting. Why does it has such a character? Are all such symbols named exactly \"L0^A\"? If so, we can do an exact match instead of prefix match, or a prefix match of \"L0^A\".",
      "parentUuid": "8b8c1f1c_cb9eb733",
      "range": {
        "startLine": 690,
        "startChar": 0,
        "endLine": 693,
        "endChar": 5
      },
      "revId": "ccde7dfb55afd7d44601af8a19651ce29e8c0fee",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c7ee1e17_81a40321",
        "filename": "src/cmd/link/internal/loadelf/ldelf.go",
        "patchSetId": 19
      },
      "lineNbr": 693,
      "author": {
        "id": 54318
      },
      "writtenOn": "2024-10-22T12:49:10Z",
      "side": 1,
      "message": "The for-loop in lines 477 to 547 of the `ldelf.go` file creates symbols corresponding to the section name and assigns them to the corresponding sect.sym. Line 498 checks the section flags. If flag SHF_ALLOC is not included, the sect.sym of will not be assigned (symbols named with sect.name will not be created, and sect.sym defaults to 0)\n\nStill in the file _x005.o, check its section information:\n\n```\nThere are 24 section headers, starting at offset 0xbf98:                                                                                                                                      \n\nSection Headers:\n  [Nr] Name              Type             Address           Offset\n       Size              EntSize          Flags  Link  Info  Align\n  [ 0]                   NULL             0000000000000000  00000000\n       0000000000000000  0000000000000000           0     0     0   \n  [ 1] .text             PROGBITS         0000000000000000  00000040\n       00000000000003f8  0000000000000000  AX       0     0     32  \n  [ 2] .rela.text        RELA             0000000000000000  000064a0\n       0000000000000bb8  0000000000000018   I      21     1     8   \n  [ 3] .data             PROGBITS         0000000000000000  00000438\n       0000000000000000  0000000000000000  WA       0     0     1   \n  [ 4] .bss              NOBITS           0000000000000000  00000438\n       0000000000000080  0000000000000000  WA       0     0     8   \n  [ 5] .rodata.str1.8    PROGBITS         0000000000000000  00000438\n       000000000000004a  0000000000000001 AMS       0     0     8   \n  [ 6] .debug_info       PROGBITS         0000000000000000  00000482\n       0000000000000d85  0000000000000000           0     0     1   \n  [ 7] .rela.debug_info  RELA             0000000000000000  00007058\n       00000000000017e8  0000000000000018   I      21     6     8   \n  [ 8] .debug_abbrev     PROGBITS         0000000000000000  00001207\n       0000000000000338  0000000000000000           0     0     1   \n  [ 9] .debug_loclists   PROGBITS         0000000000000000  0000153f\n       0000000000000217  0000000000000000           0     0     1   \n  [10] .rela.debug_[...] RELA             0000000000000000  00008840\n       0000000000001140  0000000000000018   I      21     9     8   \n  [11] .debug_aranges    PROGBITS         0000000000000000  00001756\n       0000000000000030  0000000000000000           0     0     1   \n  [12] .rela.debug_[...] RELA             0000000000000000  00009980\n       0000000000000060  0000000000000018   I      21    11     8   \n  [13] .debug_line       PROGBITS         0000000000000000  00001786\n       00000000000005d9  0000000000000000           0     0     1   \n  [14] .rela.debug_line  RELA             0000000000000000  000099e0\n       00000000000020a0  0000000000000018   I      21    13     8   \n  [15] .debug_str        PROGBITS         0000000000000000  00001d5f\n       0000000000000797  0000000000000001  MS       0     0     1   \n  [16] .debug_line_str   PROGBITS         0000000000000000  000024f6\n       0000000000000185  0000000000000001  MS       0     0     1   \n  [17] .comment          PROGBITS         0000000000000000  0000267b\n       000000000000002f  0000000000000001  MS       0     0     1   \n  [18] .note.GNU-stack   PROGBITS         0000000000000000  000026aa\n       0000000000000000  0000000000000000           0     0     1\n  [19] .eh_frame         PROGBITS         0000000000000000  000026b0\n       0000000000000150  0000000000000000   A       0     0     8\n  [20] .rela.eh_frame    RELA             0000000000000000  0000ba80\n       0000000000000438  0000000000000018   I      21    19     8\n  [21] .symtab           SYMTAB           0000000000000000  00002800\n       0000000000003258  0000000000000018          22   512     8\n  [22] .strtab           STRTAB           0000000000000000  00005a58\n       0000000000000a48  0000000000000000           0     0     1\n  [23] .shstrtab         STRTAB           0000000000000000  0000beb8\n       00000000000000dc  0000000000000000           0     0     1\nKey to Flags:\n  W (write), A (alloc), X (execute), M (merge), S (strings), I (info),\n  L (link order), O (extra OS processing required), G (group), T (TLS),\n  C (compressed), x (unknown), o (OS specific), E (exclude),\n  D (mbind), p (processor specific)                                      \n```\n\nYou can see that only `.text`, `.data`, `.bss`, and `.en_frame` have ALLOC in the flags, then the sect.sym of other sections is 0, so the symbols belonging to these sections, such as these symbols:\n\n```\n   300: 000000000000015b     0 NOTYPE  LOCAL  HIDDEN    16 L0^A\n   301: 0000000000000164     0 NOTYPE  LOCAL  HIDDEN    16 L0^A\n   302: 000000000000016c     0 NOTYPE  LOCAL  HIDDEN    16 L0^A\n   303: 0000000000000173     0 NOTYPE  LOCAL  HIDDEN    16 L0^A\n   304: 000000000000017c     0 NOTYPE  LOCAL  HIDDEN    16 L0^A\n   305: 00000000000003f8     0 NOTYPE  LOCAL  HIDDEN     1 L0^A\n\t... ...\n   320: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT    8 .Ldebug_abbrev0\n   321: 000000000000032a     0 NOTYPE  LOCAL  DEFAULT   15 .LASF138\n   322: 000000000000001a     0 NOTYPE  LOCAL  DEFAULT   16 .LASF0\n   323: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT   16 .LASF1\n```\nThey all need to be ignored.\n\nAre these symbols with sect.sym 0 the symbols that you said \"do not have section\"?",
      "parentUuid": "7c30ed35_3750f780",
      "range": {
        "startLine": 690,
        "startChar": 0,
        "endLine": 693,
        "endChar": 5
      },
      "revId": "ccde7dfb55afd7d44601af8a19651ce29e8c0fee",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ea0f70a9_5b7ec02b",
        "filename": "src/cmd/link/internal/loadelf/ldelf.go",
        "patchSetId": 19
      },
      "lineNbr": 693,
      "author": {
        "id": 54318
      },
      "writtenOn": "2024-10-22T12:53:38Z",
      "side": 1,
      "message": "I have confirmed with the binutils developer that `L0^A` is a fixed character. In fact, it is not the string `\"L0^A\"` as it seems on the surface. It contains special control character. It is defined as `\"L0\\001\"` in binutils. I have used exact matching to ignore them.",
      "parentUuid": "c7ee1e17_81a40321",
      "range": {
        "startLine": 690,
        "startChar": 0,
        "endLine": 693,
        "endChar": 5
      },
      "revId": "ccde7dfb55afd7d44601af8a19651ce29e8c0fee",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}