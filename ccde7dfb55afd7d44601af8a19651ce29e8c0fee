{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "7265c8ad_4998f688",
        "filename": "src/cmd/link/internal/loadelf/ldelf.go",
        "patchSetId": 19
      },
      "lineNbr": 608,
      "author": {
        "id": 54019
      },
      "writtenOn": "2024-08-05T03:30:06Z",
      "side": 1,
      "message": "I think it would be better to write a separate function for filtering symbol prefixes",
      "revId": "ccde7dfb55afd7d44601af8a19651ce29e8c0fee",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a7ff0c06_3c09ba2c",
        "filename": "src/cmd/link/internal/loadelf/ldelf.go",
        "patchSetId": 19
      },
      "lineNbr": 608,
      "author": {
        "id": 54318
      },
      "writtenOn": "2024-08-07T06:55:13Z",
      "side": 1,
      "message": "Thanks, but I think it\u0027s best to keep it as is. A new function to filter symbols wouldn\u0027t make the code here any cleaner.",
      "parentUuid": "7265c8ad_4998f688",
      "revId": "ccde7dfb55afd7d44601af8a19651ce29e8c0fee",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cf0a2a91_9a0c9c9f",
        "filename": "src/cmd/link/internal/loadelf/ldelf.go",
        "patchSetId": 19
      },
      "lineNbr": 693,
      "author": {
        "id": 13315
      },
      "writtenOn": "2024-08-19T15:42:04Z",
      "side": 1,
      "message": "Why do we need to skip here? Is that the code above skips label symbols that are not in any section, whereas this skips ones in a section? It seems weird that a label symbol is not in any section. Also why we don\u0027t need this on other platforms? GCC on other platforms generate label symbols, too.",
      "range": {
        "startLine": 690,
        "startChar": 0,
        "endLine": 693,
        "endChar": 5
      },
      "revId": "ccde7dfb55afd7d44601af8a19651ce29e8c0fee",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1b8e7e3e_9ec2b80a",
        "filename": "src/cmd/link/internal/loadelf/ldelf.go",
        "patchSetId": 19
      },
      "lineNbr": 693,
      "author": {
        "id": 54318
      },
      "writtenOn": "2024-08-21T08:27:31Z",
      "side": 1,
      "message": "Thank you. We skip here because there are too many of these label symbols starting with L0 or .L, and they make ctxt.Textp too big, which will cause an error when generating findfunctab: too many functions in a findfunc bucket!",
      "parentUuid": "cf0a2a91_9a0c9c9f",
      "range": {
        "startLine": 690,
        "startChar": 0,
        "endLine": 693,
        "endChar": 5
      },
      "revId": "ccde7dfb55afd7d44601af8a19651ce29e8c0fee",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c035b219_d2cf6e07",
        "filename": "src/cmd/link/internal/loadelf/ldelf.go",
        "patchSetId": 19
      },
      "lineNbr": 693,
      "author": {
        "id": 13315
      },
      "writtenOn": "2024-08-21T15:35:27Z",
      "side": 1,
      "message": "Interesting... Does loong64 GCC create many more such symbols than other architectures?\n\nIs the skip above still necessary? Is there any such symbol not in any section?",
      "parentUuid": "1b8e7e3e_9ec2b80a",
      "range": {
        "startLine": 690,
        "startChar": 0,
        "endLine": 693,
        "endChar": 5
      },
      "revId": "ccde7dfb55afd7d44601af8a19651ce29e8c0fee",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7d2a0916_9f03deeb",
        "filename": "src/cmd/link/internal/loadelf/ldelf.go",
        "patchSetId": 19
      },
      "lineNbr": 693,
      "author": {
        "id": 54318
      },
      "writtenOn": "2024-09-11T08:20:09Z",
      "side": 1,
      "message": "Sorry, I replied late. \n\nThese symbols are all generated by the relax feature of gcc. I don\u0027t know if loong64 generates much more of these symbols than other architectures, because I don\u0027t have other platforms with relax feature turned on for testing, I guess other architectures are similar when relax is turned on.\n\nThere will be no symbols starting with .L or L0 that do not belong to any section. A large part of them belong to sections whose sect.sym is 0, and the elfsym.Type of these symbols is 0. This part of symbols must be ignored.",
      "parentUuid": "c035b219_d2cf6e07",
      "range": {
        "startLine": 690,
        "startChar": 0,
        "endLine": 693,
        "endChar": 5
      },
      "revId": "ccde7dfb55afd7d44601af8a19651ce29e8c0fee",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d3912ea4_784321eb",
        "filename": "src/cmd/link/internal/loadelf/ldelf.go",
        "patchSetId": 19
      },
      "lineNbr": 693,
      "author": {
        "id": 13315
      },
      "writtenOn": "2024-09-11T18:25:06Z",
      "side": 1,
      "message": "Okay, I\u0027ll take another look. Thanks.",
      "parentUuid": "7d2a0916_9f03deeb",
      "range": {
        "startLine": 690,
        "startChar": 0,
        "endLine": 693,
        "endChar": 5
      },
      "revId": "ccde7dfb55afd7d44601af8a19651ce29e8c0fee",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "07d68bf6_028b07be",
        "filename": "src/cmd/link/internal/loadelf/ldelf.go",
        "patchSetId": 19
      },
      "lineNbr": 693,
      "author": {
        "id": 54318
      },
      "writtenOn": "2024-10-10T12:50:16Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "d3912ea4_784321eb",
      "range": {
        "startLine": 690,
        "startChar": 0,
        "endLine": 693,
        "endChar": 5
      },
      "revId": "ccde7dfb55afd7d44601af8a19651ce29e8c0fee",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7eabaced_82c2c703",
        "filename": "src/cmd/link/internal/loadelf/ldelf.go",
        "patchSetId": 19
      },
      "lineNbr": 693,
      "author": {
        "id": 13315
      },
      "writtenOn": "2024-10-10T19:23:12Z",
      "side": 1,
      "message": "I still don\u0027t quite understand. I think sect.sym being 0 means the symbol does not belong to any section. Also, why it needs to be skipped in two places? What symbols are covered in one place but not another? Could you share a C object file for an example?",
      "parentUuid": "07d68bf6_028b07be",
      "range": {
        "startLine": 690,
        "startChar": 0,
        "endLine": 693,
        "endChar": 5
      },
      "revId": "ccde7dfb55afd7d44601af8a19651ce29e8c0fee",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "754f4214_e8152327",
        "filename": "src/cmd/link/internal/loadelf/ldelf.go",
        "patchSetId": 19
      },
      "lineNbr": 693,
      "author": {
        "id": 13315
      },
      "writtenOn": "2024-10-10T19:23:43Z",
      "side": 1,
      "message": "(Please keep the comment unresolved until we understand. Thanks.)",
      "parentUuid": "7eabaced_82c2c703",
      "range": {
        "startLine": 690,
        "startChar": 0,
        "endLine": 693,
        "endChar": 5
      },
      "revId": "ccde7dfb55afd7d44601af8a19651ce29e8c0fee",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8b8c1f1c_cb9eb733",
        "filename": "src/cmd/link/internal/loadelf/ldelf.go",
        "patchSetId": 19
      },
      "lineNbr": 693,
      "author": {
        "id": 54318
      },
      "writtenOn": "2024-10-15T11:55:45Z",
      "side": 1,
      "message": "We ignore these symbols starting with \".L\" or \"L0\" in two places, but for different reasons, and the symbols ignored in the two places are not overlapping.\n\nThe first place ignores these symbols whose sect.sym is 0, and these symbols will not appear in the second place.\nThe symbols ignored in the second place have sect.sym that is not 0 (most of them belong to the text segment). We ignore them here because there are too many of them, which makes findfunc bucket unable to fit.\n\nHere is an example file: https://github.com/limeidan/share/blob/main/_x005.o\n\nI don\u0027t know if this can solve your question. We can continue to discuss. Thank you.",
      "parentUuid": "754f4214_e8152327",
      "range": {
        "startLine": 690,
        "startChar": 0,
        "endLine": 693,
        "endChar": 5
      },
      "revId": "ccde7dfb55afd7d44601af8a19651ce29e8c0fee",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}