{
  "comments": [
    {
      "key": {
        "uuid": "98bb4251_82d8cea5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 5137
      },
      "writtenOn": "2020-08-13T11:30:32Z",
      "side": 1,
      "message": "Perhaps we can further make this title more precise by describing the problem being solved and not necessarily how it is being solved:\n\ndatabase/sql: make Rows.Scan properly wrap underlying errors",
      "revId": "0e3ac280cbeb3dfb61009845fd69e9934aec5b76",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d55b0800_d99ee1b8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5137
      },
      "writtenOn": "2020-08-13T11:30:32Z",
      "side": 1,
      "message": "Thank you for working on this change Timothy, I’ve posted some suggestions, but otherwise LGTM.",
      "revId": "0e3ac280cbeb3dfb61009845fd69e9934aec5b76",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3b157fd0_01818e9b",
        "filename": "src/database/sql/sql_test.go",
        "patchSetId": 2
      },
      "lineNbr": 4154,
      "author": {
        "id": 5137
      },
      "writtenOn": "2020-08-13T11:30:32Z",
      "side": 1,
      "message": "Perhaps we could improve this name a bit to say:\n\ntype alwaysErrScanner int\n\nand then we won’t need any further docs too.",
      "revId": "0e3ac280cbeb3dfb61009845fd69e9934aec5b76",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "46f69353_594f9c55",
        "filename": "src/database/sql/sql_test.go",
        "patchSetId": 2
      },
      "lineNbr": 4162,
      "author": {
        "id": 5137
      },
      "writtenOn": "2020-08-13T11:30:32Z",
      "side": 1,
      "message": "Perhaps let’s make this more informative of a name and add some docs:\n\n// Issue 38099: Ensure that Rows.Scan properly wraps underlying errors.\nfunc TestRowsScanProperlyWrapsErrors(t *testing.T)",
      "revId": "0e3ac280cbeb3dfb61009845fd69e9934aec5b76",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "64c01087_4d88e185",
        "filename": "src/database/sql/sql_test.go",
        "patchSetId": 2
      },
      "lineNbr": 4174,
      "author": {
        "id": 5137
      },
      "writtenOn": "2020-08-13T11:30:32Z",
      "side": 1,
      "message": "We could perhaps procedural check just that the correct error is returned, so perhaps let’s remove the switch and turn it into:\nif err \u003d\u003d nil {\n    t.Fatal(“expecting back an error”)\n}\nif !errors.Is(err, errBadScan) {\n    t.Fatalf(“errors.Is mismatch\\n%v\\nWant: %v”, err, errBadScan)\n}\n// Ensure that error substring matching still correctly works.\nif !strings.Contains(err.Error(), errBadScan.Error()) {\n    t.Fatalf(“Error %v does not contain %v\", err, errBadScanner)\n}",
      "revId": "0e3ac280cbeb3dfb61009845fd69e9934aec5b76",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    }
  ]
}