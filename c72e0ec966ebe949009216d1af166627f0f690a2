{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "83e6233d_aa553d89",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 7,
      "author": {
        "id": 5440
      },
      "writtenOn": "2021-01-15T22:44:34Z",
      "side": 1,
      "message": "nit: lower case and one space",
      "range": {
        "startLine": 7,
        "startChar": 25,
        "endLine": 7,
        "endChar": 28
      },
      "revId": "c72e0ec966ebe949009216d1af166627f0f690a2",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a827de60_cbc4e019",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 5440
      },
      "writtenOn": "2021-01-15T22:44:34Z",
      "side": 1,
      "message": "LGTM, just some nits.",
      "revId": "c72e0ec966ebe949009216d1af166627f0f690a2",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c8294563_9256d416",
        "filename": "src/cmd/compile/internal/inline/inl.go",
        "patchSetId": 7
      },
      "lineNbr": 245,
      "author": {
        "id": 5440
      },
      "writtenOn": "2021-01-15T22:44:34Z",
      "side": 1,
      "message": "I don\u0027t think the ir.Nodes conversions here and on L252 are necessary anymore. They\u0027re probably just an artifact of earlier automated refactorings.",
      "range": {
        "startLine": 245,
        "startChar": 16,
        "endLine": 245,
        "endChar": 24
      },
      "revId": "c72e0ec966ebe949009216d1af166627f0f690a2",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1a221ace_3d129d9a",
        "filename": "src/cmd/compile/internal/inline/inl.go",
        "patchSetId": 7
      },
      "lineNbr": 362,
      "author": {
        "id": 5440
      },
      "writtenOn": "2021-01-15T22:44:34Z",
      "side": 1,
      "message": "Closure expressions themselves don\u0027t actually involve any calls. They\u0027re just creating a data structure, like OSTRUCTLIT. So maybe `v.budget -\u003d len(n.(*ir.ClosureExpr).Func.ClosureVars)` would reasonably approximate that cost?",
      "revId": "c72e0ec966ebe949009216d1af166627f0f690a2",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "62c85a33_57983ef7",
        "filename": "src/cmd/compile/internal/inline/inl.go",
        "patchSetId": 7
      },
      "lineNbr": 458,
      "author": {
        "id": 5440
      },
      "writtenOn": "2021-01-15T22:44:34Z",
      "side": 1,
      "message": "Nit: I\u0027ve been favoring writing loops like these as:\n\n    s :\u003d make([]ir.Node, len(ll))\n    for i, n :\u003d range ll {\n        s[i] \u003d ...\n    }\n\nto avoid the extra code necessary for `append`, since the compiler can\u0027t yet tell these appends never need to grow the slice length.",
      "revId": "c72e0ec966ebe949009216d1af166627f0f690a2",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a17256c1_3d1c07de",
        "filename": "src/cmd/compile/internal/inline/inl.go",
        "patchSetId": 7
      },
      "lineNbr": 1082,
      "author": {
        "id": 5440
      },
      "writtenOn": "2021-01-15T22:44:34Z",
      "side": 1,
      "message": "nit: blank line after edit",
      "revId": "c72e0ec966ebe949009216d1af166627f0f690a2",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f2441312_c90a0761",
        "filename": "src/cmd/compile/internal/inline/inl.go",
        "patchSetId": 7
      },
      "lineNbr": 1108,
      "author": {
        "id": 5440
      },
      "writtenOn": "2021-01-15T22:44:34Z",
      "side": 1,
      "message": "This can be `*ir.Name`. types.Field.Nname is always `*ir.Name` if non-nil, and concrete type assertions are more efficient than interface-to-interface assertions.",
      "range": {
        "startLine": 1108,
        "startChar": 55,
        "endLine": 1108,
        "endChar": 62
      },
      "revId": "c72e0ec966ebe949009216d1af166627f0f690a2",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a41afe11_91978022",
        "filename": "test/closure5.dir/a.go",
        "patchSetId": 7
      },
      "lineNbr": 1,
      "author": {
        "id": 5440
      },
      "writtenOn": "2021-01-15T22:44:34Z",
      "side": 1,
      "message": "nit: copyright and gofmt",
      "revId": "c72e0ec966ebe949009216d1af166627f0f690a2",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "89f44424_14b58550",
        "filename": "test/closure5.dir/main.go",
        "patchSetId": 7
      },
      "lineNbr": 1,
      "author": {
        "id": 5440
      },
      "writtenOn": "2021-01-15T22:44:34Z",
      "side": 1,
      "message": "nit: copyright and gofmt",
      "revId": "c72e0ec966ebe949009216d1af166627f0f690a2",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}