{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "3a1ecf4d_fdb79caa",
        "filename": "src/internal/goexperiment/flags.go",
        "patchSetId": 1
      },
      "lineNbr": 33,
      "author": {
        "id": 5440
      },
      "writtenOn": "2021-04-07T00:52:15Z",
      "side": 1,
      "message": "I think \"default experiments\" here refers to DefaultFlags below, but on L10 above it refers to make.bash-time.\n\nI\u0027m also wondering now if \"none\" should actually mean DefaultFlags, rather than all-flags-zero?",
      "range": {
        "startLine": 33,
        "startChar": 48,
        "endLine": 33,
        "endChar": 71
      },
      "revId": "ca65b777ecf1be6913ade306232c8735ab6125e4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "920a1078_71caf401",
        "filename": "src/internal/goexperiment/flags.go",
        "patchSetId": 1
      },
      "lineNbr": 33,
      "author": {
        "id": 5167
      },
      "writtenOn": "2021-04-07T16:33:47Z",
      "side": 1,
      "message": "You\u0027re right, this is all pretty confusing.\n\nWe have three potential sources for experiment configuration:\n\n1. The static set of defaults (goexperiment.DefaultFlags)\n\n2. make.bash-time GOEXPERIMENT (defaultGOEXPERIMENT)\n\n3. build-time GOEXPERIMENT\n\nRight now 3 overrides 2. That makes sense for things like GOARCH that aren\u0027t cumulative, but for GOEXPERIMENT it results in the weird rule 1 + (3 || 2).\n\nSince GOEXPERIMENT is cumulative, maybe it makes more sense to just accumulate all of these sources: 1 + 2 + 3. That would work especially well if \"none\" (or maybe \"default\") in the list means \"override everything\".\n\nWDYT?\n\n\u003e I\u0027m also wondering now if \"none\" should actually mean DefaultFlags, rather than all-flags-zero?\n\nThat would be consistent with the interpretation that once an experiment is statically enabled, it becomes the control and the noX version becomes the experiment.\n\nOr maybe \"none\" is the wrong word? \"default\"?",
      "parentUuid": "3a1ecf4d_fdb79caa",
      "range": {
        "startLine": 33,
        "startChar": 48,
        "endLine": 33,
        "endChar": 71
      },
      "revId": "ca65b777ecf1be6913ade306232c8735ab6125e4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c40bae50_38f09dc5",
        "filename": "src/internal/goexperiment/flags.go",
        "patchSetId": 1
      },
      "lineNbr": 33,
      "author": {
        "id": 5167
      },
      "writtenOn": "2021-04-07T18:01:38Z",
      "side": 1,
      "message": "Matthew pointed out elsewhere the cmd/go wants to incorporate GOEXPERIMENT from GOENV (https://go-review.googlesource.com/c/go/+/304350). Since the GOENV logic is in cmd/go and overrides what variables get passing in to cmd/compile, etc, we\u0027d need to somehow incorporate GOENV into the experiment accumulation, too. This gets really messy really fast.\n\nSo I\u0027m going to stick with \"GOEXPERIMENT environment variables override each other\" and just rename goexperiment.DefaultFlags to BaselineFlags to clear up the ambiguity around \"default\".",
      "parentUuid": "920a1078_71caf401",
      "range": {
        "startLine": 33,
        "startChar": 48,
        "endLine": 33,
        "endChar": 71
      },
      "revId": "ca65b777ecf1be6913ade306232c8735ab6125e4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}