{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "7e6404d8_5fdcbbed",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5206
      },
      "writtenOn": "2023-04-05T19:36:27Z",
      "side": 1,
      "message": "Thanks, but new API like this has to go through the proposal process: https://go.dev/s/proposal.\n\nIn general we\u0027ve avoided adding this kind of function to the slices package, because we want to get a clear idea of how iterators should work for general purpose containers.  If we have a good iterator implementation, then a function like this would apply to a general iterator, and would not belong in the slices package.",
      "revId": "3a78945e37e3ae24dbafb72e44a6b9c1c7115871",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8b4be684_68592e0f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 11680
      },
      "writtenOn": "2023-04-08T15:09:12Z",
      "side": 1,
      "message": "Different opinions, now some functions in the slices package can also be replaced by generic iterators, like: Equal(Func) can be replaced by iterate over two iterator and do compare one by one, Index(Func) can be replaced by iterate over an iterator and perform equal operation, Contains(Func) can be replaced by Index(Func). But they are still in the slices package. Do these functions need to be rethought?\nIs there a clear standard for which functions are in slices and which are in generic iterators?",
      "revId": "3a78945e37e3ae24dbafb72e44a6b9c1c7115871",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f6ed249b_7b5ad528",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5206
      },
      "writtenOn": "2023-04-11T03:56:21Z",
      "side": 1,
      "message": "The rough standard is how often we find these functions re-implemented for specific slice types.  For example, we found that there are many different copies of Contains in older Go code, so it seemed clearly useful to provide as a function in the slices package.\n\nThe Transform function is not widely found in existing code, because people just write a loop.  And there is nothing wrong with that.  So we\u0027re not rushing into a slices Transform function until we understand iterators.  See also comments like https://github.com/golang/go/issues/45955#issuecomment-880091874 in the discussion of the slices package.",
      "parentUuid": "8b4be684_68592e0f",
      "revId": "3a78945e37e3ae24dbafb72e44a6b9c1c7115871",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9021db65_da997de2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 11680
      },
      "writtenOn": "2023-04-11T05:00:23Z",
      "side": 1,
      "message": "Got it! After introducing the iterator, how to treat the slices package, then there will be a lot of duplicate functions, whether to deprecate it or create an alias to iterator api.\n\nSorry not very familiar with the use of Gerrit, so created a new comment.",
      "revId": "3a78945e37e3ae24dbafb72e44a6b9c1c7115871",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1845e901_67618483",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 62228
      },
      "writtenOn": "2023-04-11T12:47:32Z",
      "side": 1,
      "message": "Thanks for everyone’s consideration.\n\nHaving come to Go from Perl \u0026 JS, I’ve missed quick-and-easy array/list iteration patterns. The `slices` package definitely helps, but the absence of a “map”-like function in particular seemed odd. (I suppose filter also, though I somehow miss that a bit less.) Thank you for the link to prior discussion on the topic.\n\nWhen/if `slices` adds such a function, please consider _not_ naming it “Map”, in order to avoid confusion with Go’s data type of the same name.",
      "revId": "3a78945e37e3ae24dbafb72e44a6b9c1c7115871",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}