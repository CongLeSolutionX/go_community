{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "15eef563_add350ec",
        "filename": "src/cmd/link/internal/mips64/asm.go",
        "patchSetId": 4
      },
      "lineNbr": 346,
      "author": {
        "id": 13315
      },
      "writtenOn": "2022-08-02T23:05:24Z",
      "side": 1,
      "message": "I\u0027m not sure if this (or part of this) needs to be done in the linker. I think it is probably better to do this in the assembly code in the runtime (which the next CL adds), which are already named _trampoline.\n\nThose functions are always called from asmcgocall, which is called via R25, so you can assume R25 has the right value on entry. This is better than getting the it from a BAL instruction. Also, the assembly function can just make the call via R25 itself, so it doesn\u0027t need the linker rewrite.\n\nI\u0027m not sure about the GP register part. I don\u0027t think the ABI requires R28 to be a certain value at call entry. So I don\u0027t know why this code sets R28. Even if it does, it probably can be done in the assembly code as well (with necessary relocations that the linker applies).\n\nAlso, maybe not use the system register name. Names like R25 and R23 are pretty clear.",
      "revId": "4b81ce97c1360f84679ddf4df3bd4c1c8277fa77",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "276480fb_96f6079f",
        "filename": "src/cmd/link/internal/mips64/asm.go",
        "patchSetId": 4
      },
      "lineNbr": 346,
      "author": {
        "id": 13640
      },
      "writtenOn": "2022-08-03T19:46:21Z",
      "side": 1,
      "message": "I think you\u0027re correct re having the trampoline address in R25 - I\u0027ll check and revise accordingly.\n\nThe reason for needing/using the trampoline and linker rewrites is that we need the address of the external function, or PLT entry, to be loaded into R25. The external linker applies the relocations to the below instructions, at which point it will refer to the PLT. Are you suggesting doing all of this in the assembler (and if so, how can we identify an SDYNIMPORT)?\n\nRe the global pointer (GP), non-Go code expects the global pointer to refer to the global offset table and will have code that references memory off this register - in the n64 ABI it is callee save. Given that Go clobbers this register, we have to restore it before calling into external code - one of the options to do this is to layout GPREL relocations so that the linker lets us load it directly (which is what is done here). Other alternatives would be to stop using R23 in Go or to save the register value in rt0 and restore it on calls.",
      "parentUuid": "15eef563_add350ec",
      "revId": "4b81ce97c1360f84679ddf4df3bd4c1c8277fa77",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}