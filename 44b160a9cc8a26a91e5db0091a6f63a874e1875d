{
  "comments": [
    {
      "key": {
        "uuid": "2e50b210_450e2cf2",
        "filename": "src/testing/benchmark.go",
        "patchSetId": 1
      },
      "lineNbr": 362,
      "author": {
        "id": 5143
      },
      "writtenOn": "2019-03-11T15:40:40Z",
      "side": 1,
      "message": "Do we also need to check for tabs, etc?",
      "revId": "44b160a9cc8a26a91e5db0091a6f63a874e1875d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6c61a558_557e059f",
        "filename": "src/testing/benchmark.go",
        "patchSetId": 1
      },
      "lineNbr": 362,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-03-11T17:21:04Z",
      "side": 1,
      "message": "Ah, yes. According to https://github.com/golang/proposal/blob/master/design/14313-benchmark-format.md fields are separated by unicode.IsSpace, so we can\u0027t allow anything that matches that.\n\nFixed.",
      "parentUuid": "2e50b210_450e2cf2",
      "revId": "44b160a9cc8a26a91e5db0091a6f63a874e1875d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "65b34558_b7ec346c",
        "filename": "src/testing/benchmark.go",
        "patchSetId": 1
      },
      "lineNbr": 427,
      "author": {
        "id": 5143
      },
      "writtenOn": "2019-03-11T15:40:40Z",
      "side": 1,
      "message": "\u0027buf :\u003d new(strings.Builder)\u0027 and remove \u0027\u0026\u0027 everywhere below. More readable and harder to accidentally copy the value when refactoring.",
      "revId": "44b160a9cc8a26a91e5db0091a6f63a874e1875d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4a6448b9_fa38a007",
        "filename": "src/testing/benchmark.go",
        "patchSetId": 1
      },
      "lineNbr": 427,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-03-11T17:21:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "65b34558_b7ec346c",
      "revId": "44b160a9cc8a26a91e5db0091a6f63a874e1875d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4b1063e0_9957e40b",
        "filename": "src/testing/benchmark.go",
        "patchSetId": 1
      },
      "lineNbr": 429,
      "author": {
        "id": 5143
      },
      "writtenOn": "2019-03-11T15:40:40Z",
      "side": 1,
      "message": "Suppress when 0. This will require moving the \\t from the previous line to this one. (Should printing the tab go into prettyPrint?)",
      "revId": "44b160a9cc8a26a91e5db0091a6f63a874e1875d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ac5f7920_1db55812",
        "filename": "src/testing/benchmark.go",
        "patchSetId": 1
      },
      "lineNbr": 429,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-03-11T17:21:04Z",
      "side": 1,
      "message": "Done, though I\u0027m not sure how to document this. Presumably we want to print other metrics that are zero. Certainly this is true of, say, allocs/op, and probably true of other custom metrics.",
      "parentUuid": "4b1063e0_9957e40b",
      "revId": "44b160a9cc8a26a91e5db0091a6f63a874e1875d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2c5bfc04_21b5abf7",
        "filename": "src/testing/benchmark.go",
        "patchSetId": 1
      },
      "lineNbr": 429,
      "author": {
        "id": 5143
      },
      "writtenOn": "2019-03-11T17:39:45Z",
      "side": 1,
      "message": "For custom metrics, the programmer can decide not to add them if they are zero.\n\nFor our metrics, we can do the right thing.\n\nAs for how to document that you can suppress ns/op by setting it to zero, we could add some docs to this String method. Here\u0027s a draft, for you to edit as you see fit:\n\n// String returns a summary of the benchmark results.\n// It is formatted in accordance with https://github.com/golang/proposal/blob/master/design/14313-benchmark-format.md. (Is there a shorter URL we can use?)\n// It includes ns/op and MB/s if they are non-zero\n// and all metrics from Extra.\n// Note that Extra metrics always override built-in metrics with the same name.\n// It does not include allocs/op or B/op\n// (unless those are present in Extra).",
      "parentUuid": "ac5f7920_1db55812",
      "revId": "44b160a9cc8a26a91e5db0091a6f63a874e1875d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "838c92de_d8ebc029",
        "filename": "src/testing/benchmark.go",
        "patchSetId": 1
      },
      "lineNbr": 429,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-03-11T18:18:49Z",
      "side": 1,
      "message": "That could work, though I think I\u0027d rather see it documented on ReportMetric. In a sense, users don\u0027t know that String() is used to actually print the benchmark results, they just know they\u0027re calling ReportMetric.\n\nI don\u0027t mind saying that all custom metrics are printed. My main concern is that we can\u0027t just say \"0 values for built-in metrics hide them\" because of \"allocs/op\" and \"B/op\". We could change that so if those disappear if you *override* them with a 0 value, but if the benchmark framework measured them as 0 we still show them.",
      "parentUuid": "2c5bfc04_21b5abf7",
      "revId": "44b160a9cc8a26a91e5db0091a6f63a874e1875d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c9505000_a6b02774",
        "filename": "src/testing/benchmark_test.go",
        "patchSetId": 1
      },
      "lineNbr": 85,
      "author": {
        "id": 5143
      },
      "writtenOn": "2019-03-11T15:40:40Z",
      "side": 1,
      "message": "Same nit: \u0027buf :\u003d new(strings.Builder)\u0027",
      "revId": "44b160a9cc8a26a91e5db0091a6f63a874e1875d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9afed436_65faf756",
        "filename": "src/testing/benchmark_test.go",
        "patchSetId": 1
      },
      "lineNbr": 85,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-03-11T17:21:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c9505000_a6b02774",
      "revId": "44b160a9cc8a26a91e5db0091a6f63a874e1875d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f4b33635_d182832c",
        "filename": "src/testing/benchmark_test.go",
        "patchSetId": 1
      },
      "lineNbr": 172,
      "author": {
        "id": 5143
      },
      "writtenOn": "2019-03-11T15:40:40Z",
      "side": 1,
      "message": "s/is/it/",
      "revId": "44b160a9cc8a26a91e5db0091a6f63a874e1875d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f40e6a84_ac88e7bd",
        "filename": "src/testing/benchmark_test.go",
        "patchSetId": 1
      },
      "lineNbr": 172,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-03-11T17:21:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f4b33635_d182832c",
      "revId": "44b160a9cc8a26a91e5db0091a6f63a874e1875d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}