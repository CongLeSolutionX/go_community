{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "bd7fce45_6ad1582c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 11500
      },
      "writtenOn": "2021-08-13T23:49:35Z",
      "side": 1,
      "message": "\u003e Patch Set 2:\n\u003e \n\u003e \u003e \u003e If we use\n\u003e \u003e \u003e     state1 uint64\n\u003e \u003e \u003e     state2 uint32\n\u003e \u003e \u003e then we can keep the struct the same size on 32-bit systems.\n\u003e \u003e \n\u003e \u003e I was not sure this would be safe (the access in the unaligned case would straddle two fields, instead of two elements of the same array). If that\u0027s safe, then it\u0027s definitely doable.\n\u003e \n\u003e None of this is safe, exactly.  With [3]uint32 we were straddling two fields in an array.  Straddling two fields in a struct is equally safe, especially since these values cannot be copied safely.\n\nDone",
      "revId": "21591d8b78c396873201491942c50be89037ef0e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}