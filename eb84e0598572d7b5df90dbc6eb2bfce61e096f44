{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "4cfa8c20_4b323f43",
        "filename": "src/internal/syscall/unix/getrandom.go",
        "patchSetId": 9
      },
      "lineNbr": 32,
      "author": {
        "id": 11715
      },
      "writtenOn": "2024-09-23T11:59:35Z",
      "side": 1,
      "message": "Note that returning an error that\u0027s not ENOSYS or EINTR from here will crash the program after CL 608175 and friends (and returning 0, nil in a loop will cause an infinite loop). Is that an ok assumption for the vDSO?",
      "revId": "eb84e0598572d7b5df90dbc6eb2bfce61e096f44",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "da5d52ce_9504de4b",
        "filename": "src/internal/syscall/unix/getrandom.go",
        "patchSetId": 9
      },
      "lineNbr": 32,
      "author": {
        "id": 20556
      },
      "writtenOn": "2024-09-23T12:24:50Z",
      "side": 1,
      "message": "The vDSO at the moment returns ENOSYS, succeeds, or passes its arguments along to the syscall and returns whatever the syscall does.\n\nI\u0027m not sure I want to commit to that forever, for any of the interfaces. I\u0027d be hesitant to encourage ossifying the apis like that.",
      "parentUuid": "4cfa8c20_4b323f43",
      "revId": "eb84e0598572d7b5df90dbc6eb2bfce61e096f44",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "408d11ad_d50e386a",
        "filename": "src/internal/syscall/unix/getrandom.go",
        "patchSetId": 9
      },
      "lineNbr": 32,
      "author": {
        "id": 11715
      },
      "writtenOn": "2024-09-23T13:14:51Z",
      "side": 1,
      "message": "How are we supposed to handle unknown errors? We used to fall back to /dev/urandom and that turned out to be masking EINTR which we should have been handling by looping instead, so I am not a fan of going back to that. (Also the fallback might not stay around forever. Maybe one day Synology will update their kernels.)",
      "parentUuid": "da5d52ce_9504de4b",
      "revId": "eb84e0598572d7b5df90dbc6eb2bfce61e096f44",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cdffbd4b_285128e5",
        "filename": "src/internal/syscall/unix/getrandom.go",
        "patchSetId": 9
      },
      "lineNbr": 34,
      "author": {
        "id": 11715
      },
      "writtenOn": "2024-09-23T11:59:35Z",
      "side": 1,
      "message": "```suggestion\n\t\tif ret \u003c 0 {\n\t\t\treturn 0, syscall.Errno(-ret)\n\t\t}\n\t\treturn ret, nil\n```\n\nnit: return n \u003d 0 on error. It\u0027s not required, but the safer these code paths the better.",
      "range": {
        "startLine": 30,
        "startChar": 0,
        "endLine": 34,
        "endChar": 8
      },
      "revId": "eb84e0598572d7b5df90dbc6eb2bfce61e096f44",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1e59312a_4a967f85",
        "filename": "src/internal/syscall/unix/getrandom.go",
        "patchSetId": 9
      },
      "lineNbr": 34,
      "author": {
        "id": 20556
      },
      "writtenOn": "2024-09-23T12:24:50Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "cdffbd4b_285128e5",
      "range": {
        "startLine": 30,
        "startChar": 0,
        "endLine": 34,
        "endChar": 8
      },
      "revId": "eb84e0598572d7b5df90dbc6eb2bfce61e096f44",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fd408521_6f687bb9",
        "filename": "src/runtime/vgetrandom_linux.go",
        "patchSetId": 9
      },
      "lineNbr": 77,
      "author": {
        "id": 11715
      },
      "writtenOn": "2024-09-23T11:59:35Z",
      "side": 1,
      "message": "I think this exposes it to applications, which isn\u0027t great. Do we have a within-stdlib-only mechanism for linkname? (See https://go.dev/doc/go1.23#linker)",
      "revId": "eb84e0598572d7b5df90dbc6eb2bfce61e096f44",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "df9a23ba_aca4ba22",
        "filename": "src/runtime/vgetrandom_linux.go",
        "patchSetId": 9
      },
      "lineNbr": 77,
      "author": {
        "id": 20556
      },
      "writtenOn": "2024-09-23T12:24:50Z",
      "side": 1,
      "message": "That\u0027s what the vDSO code already does for sharing its symbol resolutions from runtime to syscall. So I think this is fine. It\u0027s not actually exposing it in a sanctioned way; it\u0027s still the normal linkname internal glue, which I see you\u0027ve used too for your fatal handlers, because that\u0027s how these things are done within the runtime.",
      "parentUuid": "fd408521_6f687bb9",
      "revId": "eb84e0598572d7b5df90dbc6eb2bfce61e096f44",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8093a31c_3803e993",
        "filename": "src/runtime/vgetrandom_linux.go",
        "patchSetId": 9
      },
      "lineNbr": 77,
      "author": {
        "id": 20556
      },
      "writtenOn": "2024-09-23T12:55:08Z",
      "side": 1,
      "message": "Also x/sys/unix is gonna have to hook up to it in the same way.",
      "parentUuid": "df9a23ba_aca4ba22",
      "revId": "eb84e0598572d7b5df90dbc6eb2bfce61e096f44",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "74e0020e_1f91d5e8",
        "filename": "src/runtime/vgetrandom_linux.go",
        "patchSetId": 9
      },
      "lineNbr": 77,
      "author": {
        "id": 11715
      },
      "writtenOn": "2024-09-23T13:14:51Z",
      "side": 1,
      "message": "I figured we\u0027d not want to expand the set of pushed symbols after Go 1.23, but fair enough on x/sys/unix.",
      "parentUuid": "8093a31c_3803e993",
      "revId": "eb84e0598572d7b5df90dbc6eb2bfce61e096f44",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}