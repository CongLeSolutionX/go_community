{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "9b30dd11_f85171df",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-01-24T21:40:51Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003d6340d172\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "6340d172c63e0ed1a5a23d9892f8fdf5e2b752e2",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1dea42d8_6513fd5d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-01-24T21:40:51Z",
      "side": 1,
      "message": "Superseded.",
      "parentUuid": "820d925b_8c8084d4",
      "tag": "autogenerated:trybots~beginning",
      "revId": "6340d172c63e0ed1a5a23d9892f8fdf5e2b752e2",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7e9441f9_fe7696f3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-01-24T22:00:40Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "9b30dd11_f85171df",
      "tag": "autogenerated:trybots~happy",
      "revId": "6340d172c63e0ed1a5a23d9892f8fdf5e2b752e2",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8765ef35_f404238a",
        "filename": "src/cmd/compile/internal/devirtualize/devirtualize.go",
        "patchSetId": 10
      },
      "lineNbr": 88,
      "author": {
        "id": 5440
      },
      "writtenOn": "2023-01-24T21:52:15Z",
      "side": 1,
      "message": "I think these -m changes are fine, but they\u0027re kind of distracting while trying to read the rest of the CL. I think they\u0027d be nice to split out separately.",
      "revId": "6340d172c63e0ed1a5a23d9892f8fdf5e2b752e2",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ca98422a_f4b3f997",
        "filename": "src/cmd/compile/internal/devirtualize/devirtualize.go",
        "patchSetId": 10
      },
      "lineNbr": 88,
      "author": {
        "id": 7061
      },
      "writtenOn": "2023-01-25T17:13:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8765ef35_f404238a",
      "revId": "6340d172c63e0ed1a5a23d9892f8fdf5e2b752e2",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0c170cd2_42e6f820",
        "filename": "src/cmd/compile/internal/gc/main.go",
        "patchSetId": 10
      },
      "lineNbr": 279,
      "author": {
        "id": 5440
      },
      "writtenOn": "2023-01-24T21:52:15Z",
      "side": 1,
      "message": "This is being applied after inlining, so how does this make sure we get the right loop semantics when cross-package inlining is applied?\n\nI think we need to record during unified IR writing which loop semantics a function needs; and then during unified IR reading, we create the appropriate loop.",
      "revId": "6340d172c63e0ed1a5a23d9892f8fdf5e2b752e2",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "aba0d985_f6a9296d",
        "filename": "src/cmd/compile/internal/gc/main.go",
        "patchSetId": 10
      },
      "lineNbr": 279,
      "author": {
        "id": 7061
      },
      "writtenOn": "2023-01-25T17:13:14Z",
      "side": 1,
      "message": "That happens in a later CL; this CL is for the basic GOEXPERIMENT, which normally applies to an entire build.",
      "parentUuid": "0c170cd2_42e6f820",
      "revId": "6340d172c63e0ed1a5a23d9892f8fdf5e2b752e2",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "15495d4a_cdc66af1",
        "filename": "src/cmd/compile/internal/gc/main.go",
        "patchSetId": 10
      },
      "lineNbr": 279,
      "author": {
        "id": 5440
      },
      "writtenOn": "2023-01-25T18:54:56Z",
      "side": 1,
      "message": "I think it\u0027s fine if the GOEXPERIMENT turns on the new semantics unconditionally, but we will ultimately need a solution that *can* be sensitive to per-package (and perhaps per-function) language compatibility in the presence of inlining. I\u0027m concerned that I don\u0027t see how we do that robustly with this approach. How do you envision that working?",
      "parentUuid": "aba0d985_f6a9296d",
      "revId": "6340d172c63e0ed1a5a23d9892f8fdf5e2b752e2",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "73d11161_0a43fd5f",
        "filename": "src/cmd/compile/internal/loopvar/loopvar.go",
        "patchSetId": 10
      },
      "lineNbr": 35,
      "author": {
        "id": 5440
      },
      "writtenOn": "2023-01-24T22:24:48Z",
      "side": 1,
      "message": "This seems more complex than I expected. I imagined:\n\n1. A new bool-typed field for ForStmt/RangeStmt to indicate which scoping semantics it expects for declared variables.\n2. A new OREDCL statement node, so that `OREDCL x` for heap-allocated x means effectively: `tmp :\u003d new(T); *tmp \u003d x; \u0026x \u003d tmp`. (Analogous to how `ODCL x` for heap-allocated x means `\u0026x \u003d new(T)`, and is a nop otherwise.) We\u0027d insert these nodes at the start of the post-body statements.\n3. Escape analysis just tweaks the loopDepth computations as appropriate for ForStmt/RangeStmt\u0027s Init.",
      "revId": "6340d172c63e0ed1a5a23d9892f8fdf5e2b752e2",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a432ed35_b8172e58",
        "filename": "src/cmd/compile/internal/loopvar/loopvar.go",
        "patchSetId": 10
      },
      "lineNbr": 35,
      "author": {
        "id": 7061
      },
      "writtenOn": "2023-01-25T17:13:14Z",
      "side": 1,
      "message": "My goal at this stage -- when the proposal has not yet been officially accepted, though the discussion and all the testing has pointed towards \"let\u0027s please do this\" -- was to modify less of the compiler.  And, because this can be modeled as a source-to-source transformation, doing it this way let me check my work not just against \"did it work as expected?\" but also against what AST gets generated from corresponding source changes (all the transformation work was done last year).\n\nI\u0027m also transforming only a subset of loops because that is lower risk to code generation and debugging, plus if someone has a loop that changes badly, knowing where the change was applied makes it easier to debug that problem.\n\nThe next step (next CL) is to add that bool field to For/Range Stmts, set it appropriately, and use it to govern what gets transformed instead.",
      "parentUuid": "73d11161_0a43fd5f",
      "revId": "6340d172c63e0ed1a5a23d9892f8fdf5e2b752e2",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0cbaceba_89fa9fd0",
        "filename": "src/cmd/compile/internal/loopvar/loopvar.go",
        "patchSetId": 10
      },
      "lineNbr": 35,
      "author": {
        "id": 5440
      },
      "writtenOn": "2023-01-25T18:54:56Z",
      "side": 1,
      "message": "Sorry, but I don\u0027t share your risk assessment here. IR is already hard enough to even construct correctly, and we have a worse track record with implementing transforms correctly. E.g., the static initializer optimization (CL 450136) is the most recent IR transformation to be added (back in November), it still needed multiple fixes (CLs 451376, 451555, 452676, 453315, 461686). Or recall we stopped backporting generics fixes to Go 1.18, because each time we tried to fix an issue with its transforms, we\u0027d break something else.\n\nThat\u0027s why the defining essence of the unified frontend\u0027s design was to avoid transforms, and instead to favor simple, universal IR constructs. I think that\u0027s the right approach to apply here too.",
      "parentUuid": "a432ed35_b8172e58",
      "revId": "6340d172c63e0ed1a5a23d9892f8fdf5e2b752e2",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0806d331_067b79f3",
        "filename": "src/cmd/compile/internal/loopvar/loopvar.go",
        "patchSetId": 10
      },
      "lineNbr": 64,
      "author": {
        "id": 5440
      },
      "writtenOn": "2023-01-24T22:24:48Z",
      "side": 1,
      "message": "nit: Compiler diagnostics start with a lower-case letter.",
      "revId": "6340d172c63e0ed1a5a23d9892f8fdf5e2b752e2",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2348894b_c26643a2",
        "filename": "src/cmd/compile/internal/loopvar/loopvar.go",
        "patchSetId": 10
      },
      "lineNbr": 64,
      "author": {
        "id": 7061
      },
      "writtenOn": "2023-01-25T17:13:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0806d331_067b79f3",
      "revId": "6340d172c63e0ed1a5a23d9892f8fdf5e2b752e2",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}