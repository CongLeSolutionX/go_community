{
  "comments": [
    {
      "key": {
        "uuid": "9950993f_42259ba8",
        "filename": "src/internal/poll/fd_windows.go",
        "patchSetId": 2
      },
      "lineNbr": 452,
      "author": {
        "id": 5206
      },
      "writtenOn": "2019-03-05T01:39:15Z",
      "side": 1,
      "message": "In fd_unix.go we have an isBlocking field set in the Init method.  I think I would prefer that to calling GetFileType.",
      "revId": "f98d4fd6533e4e58fbacc7c63a0dcee69d2a8587",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "71903c34_e3aea938",
        "filename": "src/internal/poll/fd_windows.go",
        "patchSetId": 2
      },
      "lineNbr": 452,
      "author": {
        "id": 5070
      },
      "writtenOn": "2019-03-05T08:18:03Z",
      "side": 1,
      "message": "I suggest we add\n\n// Whether this is a pipe.\nisPipe bool\n\nthat is set in Init\n\nft, err :\u003d fd.GetFileType()\nfd.isPipe \u003d err \u003d\u003d nil \u0026\u0026 ft \u003d\u003d syscall.FILE_TYPE_PIPE\n\nand then we could use it everywhere we need it.",
      "parentUuid": "9950993f_42259ba8",
      "revId": "f98d4fd6533e4e58fbacc7c63a0dcee69d2a8587",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "21c84294_6d8110cf",
        "filename": "src/internal/poll/fd_windows.go",
        "patchSetId": 2
      },
      "lineNbr": 452,
      "author": {
        "id": 22895
      },
      "writtenOn": "2019-03-05T09:50:44Z",
      "side": 1,
      "message": "CL 165257 was also submitted by me via GitHub Pull Request.\nI think it\u0027s bad to have many isSomething or `isOne||isTwo||isThree`\nAnd isFile is not correct in this file.\n\nIf a new field is needed in this case, I think it\u0027s better to clean up these problems first.\nPlease review CL 165257 before this one, thanks.",
      "parentUuid": "71903c34_e3aea938",
      "revId": "f98d4fd6533e4e58fbacc7c63a0dcee69d2a8587",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5ddad13a_f3cebf3f",
        "filename": "src/internal/poll/fd_windows.go",
        "patchSetId": 2
      },
      "lineNbr": 452,
      "author": {
        "id": 5070
      },
      "writtenOn": "2019-03-05T10:18:22Z",
      "side": 1,
      "message": "I disagree. Lets fix this code first. With minimal changes possible.\n\nWe can make code pretty later, once it is working. And once we have plenty of tests.\n\nAlex",
      "parentUuid": "21c84294_6d8110cf",
      "revId": "f98d4fd6533e4e58fbacc7c63a0dcee69d2a8587",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6adf08e9_de173c21",
        "filename": "src/internal/poll/fd_windows.go",
        "patchSetId": 2
      },
      "lineNbr": 458,
      "author": {
        "id": 5070
      },
      "writtenOn": "2019-03-05T08:18:03Z",
      "side": 1,
      "message": "Why do you need to call fd.pd.evict after syscall.CancelIoEx call? IS that safe to call fd.pd.evict after syscall.CancelIoEx call?",
      "revId": "f98d4fd6533e4e58fbacc7c63a0dcee69d2a8587",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bffeecb1_856d6ef8",
        "filename": "src/internal/poll/fd_windows.go",
        "patchSetId": 2
      },
      "lineNbr": 500,
      "author": {
        "id": 5070
      },
      "writtenOn": "2019-03-05T08:18:03Z",
      "side": 1,
      "message": "Why do you need to call fd.fdmu.closed here? You should document it in the code.",
      "range": {
        "startLine": 500,
        "startChar": 48,
        "endLine": 500,
        "endChar": 64
      },
      "revId": "f98d4fd6533e4e58fbacc7c63a0dcee69d2a8587",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "23dc49eb_bfa52a35",
        "filename": "src/internal/poll/fd_windows.go",
        "patchSetId": 2
      },
      "lineNbr": 500,
      "author": {
        "id": 5070
      },
      "writtenOn": "2019-03-05T08:18:03Z",
      "side": 1,
      "message": "I am not sure, it is safe to convert ERROR_OPERATION_ABORTED into ErrFileClosing. Perhaps it is OK to do it for pipes, but not for files / sockets in general.",
      "range": {
        "startLine": 500,
        "startChar": 13,
        "endLine": 500,
        "endChar": 44
      },
      "revId": "f98d4fd6533e4e58fbacc7c63a0dcee69d2a8587",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c4a529f3_9418cb03",
        "filename": "src/internal/poll/fd_windows.go",
        "patchSetId": 2
      },
      "lineNbr": 688,
      "author": {
        "id": 5070
      },
      "writtenOn": "2019-03-05T08:18:03Z",
      "side": 1,
      "message": "Same as on line 500.",
      "revId": "f98d4fd6533e4e58fbacc7c63a0dcee69d2a8587",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dc289ba7_b441d2b3",
        "filename": "src/os/pipe_unix_test.go",
        "patchSetId": 2
      },
      "lineNbr": 5,
      "author": {
        "id": 5206
      },
      "writtenOn": "2019-03-05T01:39:15Z",
      "side": 1,
      "message": "Instead of splitting up pipe_test.go, can we just add t.Skip calls for the tests that don\u0027t run on Windows?",
      "revId": "f98d4fd6533e4e58fbacc7c63a0dcee69d2a8587",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d485abd6_f9376c5b",
        "filename": "src/os/pipe_unix_test.go",
        "patchSetId": 2
      },
      "lineNbr": 5,
      "author": {
        "id": 22895
      },
      "writtenOn": "2019-03-05T03:16:48Z",
      "side": 1,
      "message": "The type of fd is syscall.Handle on Windows, but it is int on Unix.\n\nSo these lines can\u0027t compile on both.\n\n    syscall.SetNonblock(fd, true)\n    syscall.Pipe(p[:])",
      "parentUuid": "dc289ba7_b441d2b3",
      "revId": "f98d4fd6533e4e58fbacc7c63a0dcee69d2a8587",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "43f56ab8_a1823908",
        "filename": "src/os/pipe_unix_test.go",
        "patchSetId": 2
      },
      "lineNbr": 5,
      "author": {
        "id": 5206
      },
      "writtenOn": "2019-03-05T03:46:21Z",
      "side": 1,
      "message": "We should be able to use the existing type syscallDescriptor, defined in os_unix_test.go and os_windows_test.go.",
      "parentUuid": "d485abd6_f9376c5b",
      "revId": "f98d4fd6533e4e58fbacc7c63a0dcee69d2a8587",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f9d4a3eb_c2991a80",
        "filename": "src/os/pipe_unix_test.go",
        "patchSetId": 2
      },
      "lineNbr": 5,
      "author": {
        "id": 22895
      },
      "writtenOn": "2019-03-05T10:08:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "43f56ab8_a1823908",
      "revId": "f98d4fd6533e4e58fbacc7c63a0dcee69d2a8587",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}