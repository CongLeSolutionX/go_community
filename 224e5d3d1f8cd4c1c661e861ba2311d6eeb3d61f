{
  "comments": [
    {
      "key": {
        "uuid": "5f658364_0e3c4330",
        "filename": "src/image/draw/draw.go",
        "patchSetId": 2
      },
      "lineNbr": 312,
      "author": {
        "id": 5810
      },
      "writtenOn": "2018-09-24T14:13:50Z",
      "side": 1,
      "message": "just a drive-by comment...\n\nwhy do we also cap the resulting sub-slice?\nwe don\u0027t append to it and actually only read from it, so there\u0027s no possibility to fiddle with data outside the `i+4` range.\n\nis it \"just\" for symmetry with the \u0027d\u0027 slice below ?",
      "revId": "224e5d3d1f8cd4c1c661e861ba2311d6eeb3d61f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7bf8d0c3_bbcdce0b",
        "filename": "src/image/draw/draw.go",
        "patchSetId": 2
      },
      "lineNbr": 312,
      "author": {
        "id": 5890
      },
      "writtenOn": "2018-09-24T14:38:27Z",
      "side": 1,
      "message": "It is perhaps not strictly necessary but it conveys the information that the subslice is restricted to the 4 elements and no more.",
      "parentUuid": "5f658364_0e3c4330",
      "revId": "224e5d3d1f8cd4c1c661e861ba2311d6eeb3d61f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "10854a3c_81b350f0",
        "filename": "src/image/draw/draw.go",
        "patchSetId": 2
      },
      "lineNbr": 312,
      "author": {
        "id": 5065
      },
      "writtenOn": "2018-09-24T16:05:00Z",
      "side": 1,
      "message": "I\u0027d remove the cap part here and elsewhere.",
      "parentUuid": "7bf8d0c3_bbcdce0b",
      "revId": "224e5d3d1f8cd4c1c661e861ba2311d6eeb3d61f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fb22b8e5_f0c5ea6e",
        "filename": "src/image/draw/draw.go",
        "patchSetId": 2
      },
      "lineNbr": 312,
      "author": {
        "id": 5890
      },
      "writtenOn": "2018-09-24T16:28:14Z",
      "side": 1,
      "message": "I just did some tests to check this. It seems that caps are required on both the source and destination subslices to give the compiler the necessary hints. \n\nBenchmarks are compared to master\n\nBoth src and dest slices have caps (i.e. this CL):\n\nNRGBAOver-8   697µs ± 1%   650µs ± 1%   -6.75%  (p\u003d0.000 n\u003d10+10)\nNRGBASrc-8    405µs ± 1%   346µs ± 0%  -14.69%  (p\u003d0.000 n\u003d10+9)\n\nJust src slice has caps:\n\nname         old time/op  new time/op  delta\nNRGBAOver-8   697µs ± 1%   670µs ± 1%  -3.90%  (p\u003d0.000 n\u003d10+9)\nNRGBASrc-8    405µs ± 1%   378µs ± 0%  -6.71%  (p\u003d0.000 n\u003d10+10)\n\nJust dest slice has caps:\n\nNRGBAOver-8   697µs ± 1%   696µs ± 1%    ~     (p\u003d0.393 n\u003d10+10)\nNRGBASrc-8    405µs ± 1%   384µs ± 1%  -5.11%  (p\u003d0.000 n\u003d10+10)\n\nNeither slices have caps:\n\nNRGBAOver-8   697µs ± 1%   738µs ± 1%  +5.82%  (p\u003d0.000 n\u003d10+10)\nNRGBASrc-8    405µs ± 1%   424µs ± 1%  +4.70%  (p\u003d0.000 n\u003d10+9)",
      "parentUuid": "10854a3c_81b350f0",
      "revId": "224e5d3d1f8cd4c1c661e861ba2311d6eeb3d61f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "aaa08a88_83ba9942",
        "filename": "src/image/draw/draw.go",
        "patchSetId": 2
      },
      "lineNbr": 312,
      "author": {
        "id": 5065
      },
      "writtenOn": "2018-09-24T16:36:15Z",
      "side": 1,
      "message": "Okay, I\u0027m fine +2\u0027ing this if you find or file a compiler bug about this and reference it from the commit message.\n\nMaybe also a little comment:\n\n  s :\u003d spix[i : i+4 : i+4] // cap set for Issue NNNN",
      "parentUuid": "fb22b8e5_f0c5ea6e",
      "revId": "224e5d3d1f8cd4c1c661e861ba2311d6eeb3d61f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b4f786b2_cfe3700a",
        "filename": "src/image/draw/draw.go",
        "patchSetId": 2
      },
      "lineNbr": 312,
      "author": {
        "id": 5890
      },
      "writtenOn": "2018-09-24T17:46:54Z",
      "side": 1,
      "message": "The best I can find is a reference in https://docs.google.com/document/d/1vdAEAjYdzjnPA9WDOQ1e4e05cYVMpqSxJYZT33Cqw2g/edit that says:\n\n  a \u003d a[:3:len(a)] // one bound check\n  use a[1], a[2], a[3] // no bound checks\n\n(that example seems to use 1-based indices for some reason)\n\nSo we get one bound check for the subslicing action to eliminate the four following ones. This is confirmed by running\n\n  go build -gcflags\u003d\"-d\u003dssa/check_bce/debug\u003d1\" \n\nFor this function it shows\n\n  ./draw.go:309:18: Found IsSliceInBounds\n  ./draw.go:310:18: Found IsSliceInBounds\n  ./draw.go:312:13: Found IsSliceInBounds\n  ./draw.go:321:13: Found IsSliceInBounds\n\nRemoving the cap expressions does not change this output, but removing the len of the subslice reintroduces bounds checks for each element being accessed. So I think there is something else going on here, not just bounds elimination. I did notice that the assembly is smaller with the cap present and has different instructions in this area but I\u0027m not proficient enough with reading it to describe what is going on. I\u0027ll file an issue with the assembly output.",
      "parentUuid": "aaa08a88_83ba9942",
      "revId": "224e5d3d1f8cd4c1c661e861ba2311d6eeb3d61f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "06b3e0e9_32c9356f",
        "filename": "src/image/draw/draw.go",
        "patchSetId": 2
      },
      "lineNbr": 312,
      "author": {
        "id": 5340
      },
      "writtenOn": "2018-09-24T22:04:14Z",
      "side": 1,
      "message": "If you don\u0027t specify the cap, the compiler needs to calculate it computing newcap \u003d oldcap - offset. If you specify it with the same value of len, it does less work.\n\nSubslices are not optimal wrt code generation. An idea I had is to lower non-escaping subslices to field operations, and then DCE/CSE should see that there is no need to actually build a slice, and simply access the parent slice.",
      "parentUuid": "b4f786b2_cfe3700a",
      "revId": "224e5d3d1f8cd4c1c661e861ba2311d6eeb3d61f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b36e540f_e3387e81",
        "filename": "src/image/draw/draw.go",
        "patchSetId": 2
      },
      "lineNbr": 382,
      "author": {
        "id": 5340
      },
      "writtenOn": "2018-09-24T22:04:14Z",
      "side": 1,
      "message": "I might be wrong, but isn\u0027t sufficient to just always accessing [3] first, before the other elements? That is, it might be enough to swap lines here, without using subslices.",
      "revId": "224e5d3d1f8cd4c1c661e861ba2311d6eeb3d61f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    }
  ]
}