{
  "comments": [
    {
      "key": {
        "uuid": "455c5c66_e1c77591",
        "filename": "src/debug/dwarf/line.go",
        "patchSetId": 1
      },
      "lineNbr": 642,
      "author": {
        "id": 5206
      },
      "writtenOn": "2017-05-24T22:12:04Z",
      "side": 1,
      "message": "Perhaps this should be\n    len(path) \u003e 3 \u0026\u0026 (path[0] \u003d\u003d \u0027\\\\\u0027 || path[0] \u003d\u003d \u0027/\u0027) \u0026\u0026 path[1] \u003d\u003d path[0]",
      "revId": "214e20aec3d703f7a082c919e31fc19f2ec3011a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "826947a1_cd3ad92a",
        "filename": "src/debug/dwarf/line.go",
        "patchSetId": 1
      },
      "lineNbr": 642,
      "author": {
        "id": 5167
      },
      "writtenOn": "2017-05-25T00:18:59Z",
      "side": 1,
      "message": "According to my and Quentin\u0027s read of MSDN, it\u0027s actually possible for the two slashes to differ. Though we haven\u0027t tested this and it may be sufficiently unpalatable that we don\u0027t want to accept it anyway.",
      "parentUuid": "455c5c66_e1c77591",
      "revId": "214e20aec3d703f7a082c919e31fc19f2ec3011a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f8459d90_e23069ec",
        "filename": "src/debug/dwarf/line.go",
        "patchSetId": 1
      },
      "lineNbr": 644,
      "author": {
        "id": 5206
      },
      "writtenOn": "2017-05-24T22:12:04Z",
      "side": 1,
      "message": "Here you could reasonably use raw string literals to avoid the backslash quoting.",
      "range": {
        "startLine": 644,
        "startChar": 33,
        "endLine": 644,
        "endChar": 42
      },
      "revId": "214e20aec3d703f7a082c919e31fc19f2ec3011a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "11eceda6_294b7c96",
        "filename": "src/debug/dwarf/line.go",
        "patchSetId": 1
      },
      "lineNbr": 644,
      "author": {
        "id": 5167
      },
      "writtenOn": "2017-05-25T00:18:59Z",
      "side": 1,
      "message": "Done. Also changed in pathJoin",
      "parentUuid": "f8459d90_e23069ec",
      "range": {
        "startLine": 644,
        "startChar": 33,
        "endLine": 644,
        "endChar": 42
      },
      "revId": "214e20aec3d703f7a082c919e31fc19f2ec3011a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "340c9066_be044bbe",
        "filename": "src/debug/dwarf/line_test.go",
        "patchSetId": 1
      },
      "lineNbr": 50,
      "author": {
        "id": 5070
      },
      "writtenOn": "2017-05-25T01:44:05Z",
      "side": 1,
      "message": "I am not sure what ELF stands for in here. gcc generates \"Portable Executable and Common Object File Format\" on Windows, not ELF.\n\nMaybe just:\n\ns/TestLineELFGCCWindows/TestLineGCCWindows/\n\n?",
      "range": {
        "startLine": 50,
        "startChar": 5,
        "endLine": 50,
        "endChar": 26
      },
      "revId": "214e20aec3d703f7a082c919e31fc19f2ec3011a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a0679187_ff6e85e3",
        "filename": "src/debug/dwarf/line_test.go",
        "patchSetId": 1
      },
      "lineNbr": 50,
      "author": {
        "id": 5167
      },
      "writtenOn": "2017-05-25T17:37:18Z",
      "side": 1,
      "message": "Oops. Copy-paste error.",
      "parentUuid": "340c9066_be044bbe",
      "range": {
        "startLine": 50,
        "startChar": 5,
        "endLine": 50,
        "endChar": 26
      },
      "revId": "214e20aec3d703f7a082c919e31fc19f2ec3011a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e09c78c6_f9c0b5d0",
        "filename": "src/debug/dwarf/line_test.go",
        "patchSetId": 1
      },
      "lineNbr": 293,
      "author": {
        "id": 5070
      },
      "writtenOn": "2017-05-25T01:44:05Z",
      "side": 1,
      "message": "I suspect you took these out of path/filepath.TestJoin. But you did not copy tests like:\n\n{[]string{`C:a`, `b`}, `C:a\\b`}\n\nThe `C:a` is actually `C:.\\a`, and, because of the \u0027.\u0027, this path is not absolute - it depends on what your current directory on C: is. I suspect this subtlety is not important here. But than should you document it somewhere?",
      "revId": "214e20aec3d703f7a082c919e31fc19f2ec3011a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "50b93f6d_6dec00de",
        "filename": "src/debug/dwarf/line_test.go",
        "patchSetId": 1
      },
      "lineNbr": 293,
      "author": {
        "id": 5167
      },
      "writtenOn": "2017-05-25T17:37:18Z",
      "side": 1,
      "message": "I left out the tests with a relative base directory since the base directory should always be absolute in DWARF. But it\u0027s good to test these things anyway, so I\u0027ve added some \"best effort\" tests where it\u0027s not totally clear what the right answer is, but pathJoin at least shouldn\u0027t crash. Let me know if you think they\u0027re reasonable.",
      "parentUuid": "e09c78c6_f9c0b5d0",
      "revId": "214e20aec3d703f7a082c919e31fc19f2ec3011a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}