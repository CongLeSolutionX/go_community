{
  "comments": [
    {
      "key": {
        "uuid": "8dfe5d21_2afc4fa9",
        "filename": "src/sync/waitgroup.go",
        "patchSetId": 1
      },
      "lineNbr": 66,
      "author": {
        "id": 5206
      },
      "writtenOn": "2018-10-10T00:13:40Z",
      "side": 1,
      "message": "Since delta can be negative, you should also check for negative overflow.",
      "revId": "25437a38db410e2a8ba45c50b450be71fa70d36a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "25b1d20a_73b27264",
        "filename": "src/sync/waitgroup.go",
        "patchSetId": 1
      },
      "lineNbr": 66,
      "author": {
        "id": 26506
      },
      "writtenOn": "2018-10-10T12:28:19Z",
      "side": 1,
      "message": "Agreed, however it is probably more unlikely to hit the negative overflow, since the delta itself needs to exceed the range.\n\nPatchset 2 has the check and a test, but the test will only work on 64 bit machines. Is there a way to skip tests on 32 bit machines?",
      "parentUuid": "8dfe5d21_2afc4fa9",
      "revId": "25437a38db410e2a8ba45c50b450be71fa70d36a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ada1af9e_9309b204",
        "filename": "src/sync/waitgroup.go",
        "patchSetId": 1
      },
      "lineNbr": 77,
      "author": {
        "id": 5206
      },
      "writtenOn": "2018-10-10T00:13:40Z",
      "side": 1,
      "message": "It seems to me that we should be consistent about panic and throw in this function.  Maybe this CL should use panic and a separate CL should convert the panic\u0027s to throw\u0027s.",
      "revId": "25437a38db410e2a8ba45c50b450be71fa70d36a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "75ce000e_481c5a19",
        "filename": "src/sync/waitgroup.go",
        "patchSetId": 1
      },
      "lineNbr": 77,
      "author": {
        "id": 26506
      },
      "writtenOn": "2018-10-10T12:28:19Z",
      "side": 1,
      "message": "Sure, i can split the CL. Are there any conventions for \"linking\" dependent CL\u0027s?",
      "parentUuid": "ada1af9e_9309b204",
      "revId": "25437a38db410e2a8ba45c50b450be71fa70d36a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "48525536_716cc295",
        "filename": "src/sync/waitgroup.go",
        "patchSetId": 1
      },
      "lineNbr": 77,
      "author": {
        "id": 26506
      },
      "writtenOn": "2018-10-10T12:36:12Z",
      "side": 1,
      "message": "The documentation states: \"If the counter goes negative, Add panics.\"\nWouldn\u0027t changing that behavior break compatibility?",
      "parentUuid": "75ce000e_481c5a19",
      "revId": "25437a38db410e2a8ba45c50b450be71fa70d36a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d05fb276_398fdd91",
        "filename": "src/sync/waitgroup.go",
        "patchSetId": 1
      },
      "lineNbr": 77,
      "author": {
        "id": 6365
      },
      "writtenOn": "2018-10-10T13:02:44Z",
      "side": 1,
      "message": "\u003e Sure, i can split the CL. Are there any conventions for \"linking\" dependent CL\u0027s?\n\nMake them on the same local git branch, and Gerrit should preserve the branch history when it uploads.\n\n\u003e The documentation states: \"If the counter goes negative, Add panics.\"\n\u003e Wouldn\u0027t changing that behavior break compatibility?\n\nI tend to agree. Panicking is fine as long as it leaves the WaitGroup in some consistent state. In particular, an error in Add usage should never cause a call to Wait to unblock prematurely.\n\nIn this case, if I understand correctly, a negative count should leave the Wait calls blocked until an Add sets the count to exactly zero.\n\nThe “Add called concurrently with Wait” panics do not seem so benign. In the first one, the caller has no way to know whether the Add call was observed by Wait, so it\u0027s possible that the Add call had no effect on the count (and subsequent Wait calls will wake too early). In the second one, Add may fail to wake some newly-added Waiter (since it is not reflected in the value of `w`).\n\nSo I think this particular panic is fine, but the other ones should probably become throws.",
      "parentUuid": "48525536_716cc295",
      "revId": "25437a38db410e2a8ba45c50b450be71fa70d36a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "26153dbd_d0465925",
        "filename": "src/sync/waitgroup_test.go",
        "patchSetId": 1
      },
      "lineNbr": 230,
      "author": {
        "id": 5206
      },
      "writtenOn": "2018-10-10T00:13:40Z",
      "side": 1,
      "message": "No need to print anything here, and it seems slightly misleading to print \"test completed\" when this line should never be executed.  I think you can just call os.Exit(0).",
      "revId": "25437a38db410e2a8ba45c50b450be71fa70d36a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "66bce148_43542b53",
        "filename": "src/sync/waitgroup_test.go",
        "patchSetId": 1
      },
      "lineNbr": 230,
      "author": {
        "id": 26506
      },
      "writtenOn": "2018-10-10T12:28:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "26153dbd_d0465925",
      "revId": "25437a38db410e2a8ba45c50b450be71fa70d36a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}