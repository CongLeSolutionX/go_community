{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "213c8465_ef9bc0d0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-12-05T19:59:24Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003df4ba2324\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "f4ba2324e4aab03757dd3a8bb7ea9ba6cf49dd8f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3f22bdf9_78c643a5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-12-05T20:14:36Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "213c8465_ef9bc0d0",
      "tag": "autogenerated:trybots~happy",
      "revId": "f4ba2324e4aab03757dd3a8bb7ea9ba6cf49dd8f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4dadbf11_df0a2837",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 30738
      },
      "writtenOn": "2022-12-05T20:40:12Z",
      "side": 1,
      "message": "regarding the e.Cap()/4 comparison- does the compiler transform this into an *4 comparison the other way round or are divisions faster these days?",
      "revId": "f4ba2324e4aab03757dd3a8bb7ea9ba6cf49dd8f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "54d7fdd4_68864f57",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 8495
      },
      "writtenOn": "2022-12-05T20:42:02Z",
      "side": 1,
      "message": "That optimization is in place:\n```\nsink \u003d src.Cap() / 4\n```\ncompiles to:\n```\n0x0000 00000 (/tmp/sandbox2160700864/main.go:12)\tMOVQ\tmain.src+16(SB), AX\n0x0007 00007 (/tmp/sandbox2160700864/main.go:12)\tSHRQ\t$2, AX\n0x000b 00011 (/tmp/sandbox2160700864/main.go:12)\tMOVQ\tAX, main.sink(SB)\n```",
      "parentUuid": "4dadbf11_df0a2837",
      "revId": "f4ba2324e4aab03757dd3a8bb7ea9ba6cf49dd8f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7b4f41ae_e010d45d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 8495
      },
      "writtenOn": "2022-12-05T20:44:27Z",
      "side": 1,
      "message": "To be specific, it doesn\u0027t translate it into a *4 otherwise that can overflow. Instead it performs a right bit-shift by 2.",
      "parentUuid": "54d7fdd4_68864f57",
      "revId": "f4ba2324e4aab03757dd3a8bb7ea9ba6cf49dd8f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "54a29f4e_d603e2a3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 30738
      },
      "writtenOn": "2022-12-05T20:48:08Z",
      "side": 1,
      "message": "With this CL, the size of the buffers in the pool will likely be in the „utilized“ size. That size (maybe the size of the last buffer put back into the pool) might be used to pre-allocate the buffer‘s buf memory before putting an un-utilised recycled buffer back into the pool to save on future allocations for buffer growth?",
      "revId": "f4ba2324e4aab03757dd3a8bb7ea9ba6cf49dd8f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7a62ceb3_72ab9f1a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 8495
      },
      "writtenOn": "2022-12-05T20:54:00Z",
      "side": 1,
      "message": "That can be future optimization. I left it out because the addition of another field to track the previous length increases the size of `encodeState` past 128B, which bumps it up to the next allocation size class (see https://commaok.xyz/post/discovering-size-classes/). This has other effects on memory cache locality and what not.\n\nThere\u0027s other work that can be done to optimize this further. For example, the scratch buffer is redundant with the fact that `bytes.Buffer` itself has a scratch buffer. Removing that will reduce the size of `encodeState`, which allows us to track other statistics.",
      "parentUuid": "54a29f4e_d603e2a3",
      "revId": "f4ba2324e4aab03757dd3a8bb7ea9ba6cf49dd8f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "58e84a0d_87d9a472",
        "filename": "src/encoding/json/encode.go",
        "patchSetId": 1
      },
      "lineNbr": 325,
      "author": {
        "id": 34561
      },
      "writtenOn": "2022-12-05T21:37:02Z",
      "side": 1,
      "message": "However... If you solve for max memory held by the pool, it\u0027s still unbounded, no? And I think that is more important than utilization when we\u0027re worried about memory problems. (put another way, everything in the pool actually has zero utilization while it\u0027s in the pool)\n\nThis is a significant improvement, but have you considered instead something like:\n* keep a running average and std dev (of the buffer len) in global memory\n* drop buffers with caps larger than e.g average + 3 * stddev\n\nI can suggest various ways of adjusting that cap if you want more ideas along these lines.",
      "revId": "f4ba2324e4aab03757dd3a8bb7ea9ba6cf49dd8f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}