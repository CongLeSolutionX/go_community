{
  "comments": [
    {
      "key": {
        "uuid": "cd9caada_ed1ae52e",
        "filename": "src/go/types/testdata/stmt0.src",
        "patchSetId": 1
      },
      "lineNbr": 537,
      "author": {
        "id": 5195
      },
      "writtenOn": "2015-07-28T17:30:37Z",
      "side": 1,
      "message": "Where is this behavior specified?  I find it very odd that \u0027x\u003d\u003dx\u0027 does not behave like \u0027true\u0027 here.  Although one is non-constant and the other constant, both are untyped booleans.\n\nIt also breaks symmetry with \u0027if tag \u003d\u003d casevalue\u0027:\n\nhttp://play.golang.org/p/b-lCYhoBxx",
      "revId": "f0103803fa0d293e079a42ed52c3ac3842f436fc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2db8e63c_d326a6ea",
        "filename": "src/go/types/testdata/stmt0.src",
        "patchSetId": 1
      },
      "lineNbr": 537,
      "author": {
        "id": 5210
      },
      "writtenOn": "2015-07-28T17:35:37Z",
      "side": 1,
      "message": "It does behave like true. But, as all other untyped types, that will assume assume the default type, which is bool. Which then conflicts later.\n\nThis is based on gc\u0027s current behavior, and on the pending spec change.",
      "parentUuid": "cd9caada_ed1ae52e",
      "revId": "f0103803fa0d293e079a42ed52c3ac3842f436fc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cd9caada_90deda52",
        "filename": "src/go/types/testdata/stmt0.src",
        "patchSetId": 1
      },
      "lineNbr": 537,
      "author": {
        "id": 5195
      },
      "writtenOn": "2015-07-28T22:03:26Z",
      "side": 1,
      "message": "You\u0027re quite right, it does behave like true; the symmetry between \u0027switch\u0027 and \u0027if\u0027 was already broken.",
      "parentUuid": "2db8e63c_d326a6ea",
      "revId": "f0103803fa0d293e079a42ed52c3ac3842f436fc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}