{
  "comments": [
    {
      "key": {
        "uuid": "a13a6853_c1f1627b",
        "filename": "src/mime/multipart/multipart.go",
        "patchSetId": 1
      },
      "lineNbr": 179,
      "author": {
        "id": 5056
      },
      "writtenOn": "2016-10-25T20:37:43Z",
      "side": 1,
      "message": "can probably delete the TODO now",
      "revId": "04cf3a0957ae6c0d648e9a0ee4805678970cdaeb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a13a6853_e157c673",
        "filename": "src/mime/multipart/multipart.go",
        "patchSetId": 1
      },
      "lineNbr": 217,
      "author": {
        "id": 5056
      },
      "writtenOn": "2016-10-25T20:37:43Z",
      "side": 1,
      "message": "This seems wrong. Why is +1 going to make the remaining code safe to execute? I would believe this if it was going to go back around the loop and retest all these conditions.",
      "revId": "04cf3a0957ae6c0d648e9a0ee4805678970cdaeb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a1dd08a2_c916f12d",
        "filename": "src/mime/multipart/multipart.go",
        "patchSetId": 1
      },
      "lineNbr": 217,
      "author": {
        "id": 13020
      },
      "writtenOn": "2016-10-26T16:27:06Z",
      "side": 1,
      "message": "The rest of the code services the Read from p.buffer, which contains data previously confirmed to be valid. So the remaining code is safe to execute either way.\n\nThe +1 here forces another read from the underlying input stream, which will cause us to find more in the bufReader to work with the next time Read is called.",
      "parentUuid": "a13a6853_e157c673",
      "revId": "04cf3a0957ae6c0d648e9a0ee4805678970cdaeb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "61ba3039_6f39d105",
        "filename": "src/mime/multipart/multipart_test.go",
        "patchSetId": 1
      },
      "lineNbr": 125,
      "author": {
        "id": 5056
      },
      "writtenOn": "2016-10-26T03:34:33Z",
      "side": 1,
      "message": "I assume this is some kind of debugging?\nIf you are debugging a hang, you can type ctrl-\\ at the hung process and get stacks. No need for runtime/trace.",
      "revId": "04cf3a0957ae6c0d648e9a0ee4805678970cdaeb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a1dd08a2_a9f0dde9",
        "filename": "src/mime/multipart/multipart_test.go",
        "patchSetId": 1
      },
      "lineNbr": 125,
      "author": {
        "id": 13020
      },
      "writtenOn": "2016-10-26T16:27:06Z",
      "side": 1,
      "message": "Yeah, whoops. I didn\u0027t mean to leave this in (obviously).\n\nStacks at hang did not contain enough information for me, which is why I used the runtime trace.",
      "parentUuid": "61ba3039_6f39d105",
      "revId": "04cf3a0957ae6c0d648e9a0ee4805678970cdaeb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "461c62af_06f51a65",
        "filename": "src/mime/multipart/multipart_test.go",
        "patchSetId": 1
      },
      "lineNbr": 125,
      "author": {
        "id": 5056
      },
      "writtenOn": "2016-10-28T23:44:56Z",
      "side": 1,
      "message": "I\u0027m curious: what extra information did the runtime trace have?",
      "parentUuid": "a1dd08a2_a9f0dde9",
      "revId": "04cf3a0957ae6c0d648e9a0ee4805678970cdaeb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a13a6853_21728e04",
        "filename": "src/mime/multipart/multipart_test.go",
        "patchSetId": 1
      },
      "lineNbr": 333,
      "author": {
        "id": 15057
      },
      "writtenOn": "2016-10-25T20:56:09Z",
      "side": 1,
      "message": "s/sentinal/sentinel/",
      "revId": "04cf3a0957ae6c0d648e9a0ee4805678970cdaeb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "61ba3039_af0f3951",
        "filename": "src/mime/multipart/multipart_test.go",
        "patchSetId": 1
      },
      "lineNbr": 333,
      "author": {
        "id": 5056
      },
      "writtenOn": "2016-10-26T03:34:33Z",
      "side": 1,
      "message": "Even better:\n\ntype didRead bool\n\nfunc (r *didRead) Read([]byte) (int, error) {\n   *r \u003d true\n   return 0, io.EOF\n}",
      "parentUuid": "a13a6853_21728e04",
      "revId": "04cf3a0957ae6c0d648e9a0ee4805678970cdaeb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a1dd08a2_6906e5fa",
        "filename": "src/mime/multipart/multipart_test.go",
        "patchSetId": 1
      },
      "lineNbr": 333,
      "author": {
        "id": 13020
      },
      "writtenOn": "2016-10-26T16:27:06Z",
      "side": 1,
      "message": "Doesn\u0027t your didRead formulation have a possible data race?",
      "parentUuid": "61ba3039_af0f3951",
      "revId": "04cf3a0957ae6c0d648e9a0ee4805678970cdaeb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "461c62af_66ea0e89",
        "filename": "src/mime/multipart/multipart_test.go",
        "patchSetId": 1
      },
      "lineNbr": 333,
      "author": {
        "id": 5056
      },
      "writtenOn": "2016-10-28T23:44:56Z",
      "side": 1,
      "message": "What is the race you are concerned about?\nI\u0027m pretty sure there\u0027s only one goroutine executing.",
      "parentUuid": "a1dd08a2_6906e5fa",
      "revId": "04cf3a0957ae6c0d648e9a0ee4805678970cdaeb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "61ba3039_8f14f568",
        "filename": "src/mime/multipart/multipart_test.go",
        "patchSetId": 1
      },
      "lineNbr": 360,
      "author": {
        "id": 5056
      },
      "writtenOn": "2016-10-26T03:34:33Z",
      "side": 1,
      "message": "var tooFar bool",
      "revId": "04cf3a0957ae6c0d648e9a0ee4805678970cdaeb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "61ba3039_ef19419f",
        "filename": "src/mime/multipart/multipart_test.go",
        "patchSetId": 1
      },
      "lineNbr": 364,
      "author": {
        "id": 5056
      },
      "writtenOn": "2016-10-26T03:34:33Z",
      "side": 1,
      "message": "(*didRead)(\u0026tooFar),",
      "revId": "04cf3a0957ae6c0d648e9a0ee4805678970cdaeb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "61ba3039_4f0b2d40",
        "filename": "src/mime/multipart/multipart_test.go",
        "patchSetId": 1
      },
      "lineNbr": 370,
      "author": {
        "id": 5056
      },
      "writtenOn": "2016-10-26T03:34:33Z",
      "side": 1,
      "message": "You can assume part !\u003d nil if err \u003d\u003d nil.\nUse t.Fatal instead of t.Error+return.\nShow the actual errors returned.\nCheck all the returned results together so you can show them all in the failure output.\nPull repetitive parts into a local helper func to make the final test logic clearer. Tables are good too, but a table is overkill here.\nWhen it makes sense (returned from something like Read), check returned data in addition to (usually before) error.\n\nPutting all that together:\n\nreadPart :\u003d func(hdr textproto.MIMEHeader, body string) {\n    part, err :\u003d reader.NextPart()\n    if err !\u003d nil {\n        t.Fatalf(\"NextPart: %v\", err)\n    }\n    data, err :\u003d ioutil.ReadAll(part)\n    if !reflect.DeepEqual(part.Header, hdr) || string(data) !\u003d body {\n       t.Errorf(\"Part \u003d %v, %q, want %v, %q\", part.Header, data, hdr, body)\n    }\n    if err !\u003d nil {\n       t.Fatalf(\"reading Part: %v\", err)\n    }\n}\n\nreadPart(textproto.MIMEHeader{\"foo-bar\": {\"baz\"}}, \"Body\")\nif tooFar {\n    t.Errorf(\"read too far during Part1\")\n}\nreadPart(textproto.MIMEHeader{\"foo-bar\": {\"bop\"}}, \"Body 2\")",
      "revId": "04cf3a0957ae6c0d648e9a0ee4805678970cdaeb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a1dd08a2_490321e9",
        "filename": "src/mime/multipart/multipart_test.go",
        "patchSetId": 1
      },
      "lineNbr": 370,
      "author": {
        "id": 13020
      },
      "writtenOn": "2016-10-26T16:27:06Z",
      "side": 1,
      "message": "The tests I\u0027m using here are exact copies of the tests used in the rest of this file; I prefer matching the style over making this test more compact.",
      "parentUuid": "61ba3039_4f0b2d40",
      "revId": "04cf3a0957ae6c0d648e9a0ee4805678970cdaeb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "461c62af_a6036673",
        "filename": "src/mime/multipart/multipart_test.go",
        "patchSetId": 1
      },
      "lineNbr": 370,
      "author": {
        "id": 5056
      },
      "writtenOn": "2016-10-28T23:44:56Z",
      "side": 1,
      "message": "In general that\u0027s good but the rest of the file is not particularly ideal code. In addition to collapsing a few lines the formulation above also avoids a 2X copy-paste. Since you can\u0027t reuse the helpers in the rest of the file, might as well write clear code here.",
      "parentUuid": "a1dd08a2_490321e9",
      "revId": "04cf3a0957ae6c0d648e9a0ee4805678970cdaeb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}