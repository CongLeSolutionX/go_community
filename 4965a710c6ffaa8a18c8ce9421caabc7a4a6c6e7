{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "c0e5e7b3_23aad77c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 64694
      },
      "writtenOn": "2024-02-08T11:45:14Z",
      "side": 1,
      "message": "Why not just use go/version in the std?\nI think it has covered this corner case.",
      "revId": "4965a710c6ffaa8a18c8ce9421caabc7a4a6c6e7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "213595d2_f368381b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5440
      },
      "writtenOn": "2024-02-08T20:58:37Z",
      "side": 1,
      "message": "\u003e Why not just use go/version in the std?\n\ngo/version\u0027s package docs say \"Package version provides operations on Go versions in **Go toolchain name syntax**.\" But the -lang flag takes a \"Go language version\". According to https://go.dev/doc/toolchain, these are separate. If it\u0027s correct to use go/version here for parsing a Go language version, that\u0027s not apparent to me from the docs.\n\nAlso, this fix needs to be backported for release. I\u0027d rather do something simple than invasive. If you know how to change this code to use go/version, patches welcome. Thanks.",
      "parentUuid": "c0e5e7b3_23aad77c",
      "revId": "4965a710c6ffaa8a18c8ce9421caabc7a4a6c6e7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b9253727_0fe1e487",
        "filename": "src/cmd/go/testdata/script/build_issue_65528.txt",
        "patchSetId": 2
      },
      "lineNbr": 6,
      "author": {
        "id": 5440
      },
      "writtenOn": "2024-02-08T01:57:17Z",
      "side": 1,
      "message": "Changing this to \"go 1\" fails:\n\n```\n    --- FAIL: TestScript/build_issue_65528 (0.00s)\n        script_test.go:132: 2024-02-08T01:55:56Z\n        script_test.go:134: $WORK\u003d/tmp/cmd-go-test-94948116/tmpdir2457780215/build_issue_655283045474140\n        script_test.go:156: \n            \u003e go build\n            [stderr]\n            go: errors parsing go.mod:\n            go.mod:3: invalid go version \u00271\u0027: must match format 1.23.0\n        script_test.go:156: FAIL: testdata/script/build_issue_65528.txt:1: go build: exit status 1\n```",
      "revId": "4965a710c6ffaa8a18c8ce9421caabc7a4a6c6e7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eacfc5ac_5ac8b6bb",
        "filename": "src/cmd/go/testdata/script/build_issue_65528.txt",
        "patchSetId": 2
      },
      "lineNbr": 6,
      "author": {
        "id": 6365
      },
      "writtenOn": "2024-02-08T20:46:40Z",
      "side": 1,
      "message": "That is as expected ‚Äî `go 1.0` is not the canonical name for that version.\n\nThe module in the original issue report used `go 1.0`:\nhttps://github.com/danjacques/gofslock/blob/ae8f59f9e88bc8752912b4cfd6de339288b6738d/go.mod#L3",
      "parentUuid": "b9253727_0fe1e487",
      "revId": "4965a710c6ffaa8a18c8ce9421caabc7a4a6c6e7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8058f588_66606f4d",
        "filename": "src/cmd/go/testdata/script/build_issue_65528.txt",
        "patchSetId": 2
      },
      "lineNbr": 6,
      "author": {
        "id": 5440
      },
      "writtenOn": "2024-02-08T20:58:37Z",
      "side": 1,
      "message": "If \"go 1.0\" is not the canonical name for that version, and cmd/go doesn\u0027t allow users to write \"go 1\", why did it start spelling \"-lang\u003dgo1.0\" as \"-lang\u003dgo1\"? What was wrong with the original spelling? Why does cmd/compile need to support both spellings? Wouldn\u0027t it be simpler for cmd/go to just stick to the original and canonical spelling?",
      "parentUuid": "eacfc5ac_5ac8b6bb",
      "revId": "4965a710c6ffaa8a18c8ce9421caabc7a4a6c6e7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b1adaabc_b843cd10",
        "filename": "src/cmd/go/testdata/script/build_issue_65528.txt",
        "patchSetId": 2
      },
      "lineNbr": 6,
      "author": {
        "id": 6365
      },
      "writtenOn": "2024-02-08T21:27:50Z",
      "side": 1,
      "message": "\u003e If \"go 1.0\" is not the canonical name for that version, and cmd/go doesn\u0027t allow users to write \"go 1\", why did it start spelling \"-lang\u003dgo1.0\" as \"-lang\u003dgo1\"?\n\n`cmd/go` started using a library for determining the language version (https://pkg.go.dev/go/version#Lang). Russ implemented the library, and made it return `go1` because that\u0027s what the release notes for that version actually called it (https://go.dev/doc/devel/release#go1). (If you\u0027d rather make a change in `go/version` instead, I have no objection ‚Äî just please coordinate with Russ on that.)\n\nI don\u0027t think we ever really made a conscious decision about accepting `go 1.0` in `go.mod` files, because it\u0027s nonsensical: nothing below `go 1.11` even interprets the `go.mod` file, and the compiler doesn\u0027t enforce any semantic changes for versions below some threshold (re-reading #28221, possibly Go 1.8?).\n\nUnfortunately, we didn\u0027t enforce that the versions listed in `go.mod` files actually make sense, and Hyrum\u0027s Law took hold. (There were no integration tests that covered this edge case ‚Äî if there were, we would have caught #65528 before `go1.22rc2`!)\n\n\u003e What was wrong with the original spelling? Why does cmd/compile need to support both spellings?\n\nWhat was wrong with it, I suppose, is that it was underspecified..?\n\nBut I would be surprised if `cmd/compile` actually needs to support both spellings, given that only `cmd/go` seems to be passing this version in flags. (Maybe `go1` alone suffices?)\n\n\u003e Wouldn\u0027t it be simpler for cmd/go to just stick to the original and canonical spelling?\n\nUnfortunately the ‚Äúoriginal‚Äù and ‚Äúcanonical‚Äù are apparently two different spellings. ü´†",
      "parentUuid": "8058f588_66606f4d",
      "revId": "4965a710c6ffaa8a18c8ce9421caabc7a4a6c6e7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one Code-Review+2 is required. Self review is not allowed."
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "4965a710c6ffaa8a18c8ce9421caabc7a4a6c6e7",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Do-Not-Review",
        "description": {
          "value": "Changes that have DO NOT REVIEW in their commit message are not submittable."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (R|r)(E|e)(V|v)(I|i)(E|e)(W|w).*\""
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:false"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (R|r)(E|e)(V|v)(I|i)(E|e)(W|w).*\""},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (R|r)(E|e)(V|v)(I|i)(E|e)(W|w).*\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "4965a710c6ffaa8a18c8ce9421caabc7a4a6c6e7",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Do-Not-Submit",
        "description": {
          "value": "Changes that have DO NOT SUBMIT in their commit message are not submittable."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:false"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "4965a710c6ffaa8a18c8ce9421caabc7a4a6c6e7",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "LUCI-Pass",
        "description": {
          "value": "Changes on release branches must pass LUCI unless TryBot-Bypass+1 is set."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "branch:\"^refs/heads/release-branch.+\""
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:LUCI-TryBot-Result\u003dMAX"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:TryBot-Bypass\u003dMAX"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"branch:\"^refs/heads/release-branch.+\""},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:\"^refs/heads/release-branch.+\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:LUCI-TryBot-Result=MAX"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:TryBot-Bypass=MAX"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "patchSetCommitId": "4965a710c6ffaa8a18c8ce9421caabc7a4a6c6e7",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Matching-Subject-Prefix",
        "description": {
          "value": "Changes on release branches must have a matching [release-branch.go1.nn] subject prefix."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "branch:\"^refs/heads/release-branch.+\" -prefixsubject:\"[release-branch\""
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:false"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"branch:\"^refs/heads/release-branch.+\" -prefixsubject:\"[release-branch\""},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:\"^refs/heads/release-branch.+\"","prefixsubject:\"[release-branch\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "4965a710c6ffaa8a18c8ce9421caabc7a4a6c6e7",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "No-Holds",
        "description": {
          "value": "Changes with a Hold+1 vote are not submittable."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "label:Hold\u003d1"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:false"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Hold=1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Hold=1"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "4965a710c6ffaa8a18c8ce9421caabc7a4a6c6e7",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "No-Unresolved-Comments",
        "description": {
          "value": "Changes that have unresolved comments are not submittable, unless overriden by adding the hashtag allow-unresolved-comments."
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "-has:unresolved"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "hashtag:allow-unresolved-comments"
          }
        },
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-has:unresolved"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["has:unresolved"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"hashtag:allow-unresolved-comments"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["hashtag:allow-unresolved-comments"]}
      },
      "patchSetCommitId": "4965a710c6ffaa8a18c8ce9421caabc7a4a6c6e7",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "No-Wait-Release",
        "description": {
          "value": "Changes with the hashtag wait-release cannot be submitted."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "hashtag:wait-release"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:false"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"hashtag:wait-release"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["hashtag:wait-release"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "4965a710c6ffaa8a18c8ce9421caabc7a4a6c6e7",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforcement-satisfied_gerrit"],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "4965a710c6ffaa8a18c8ce9421caabc7a4a6c6e7",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "TryBots-Pass",
        "description": {
          "value": "Changes must pass TryBots unless TryBot-Bypass+1 is set."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:LUCI-TryBot-Result\u003dMAX OR label:TryBot-Result\u003dMAX"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:TryBot-Bypass\u003dMAX"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:LUCI-TryBot-Result=MAX OR label:TryBot-Result=MAX"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:LUCI-TryBot-Result=MAX"],"failingAtoms":["label:TryBot-Result=MAX"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:TryBot-Bypass=MAX"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:TryBot-Bypass=MAX"]}
      },
      "patchSetCommitId": "4965a710c6ffaa8a18c8ce9421caabc7a4a6c6e7",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}