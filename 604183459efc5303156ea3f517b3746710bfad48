{
  "comments": [
    {
      "key": {
        "uuid": "91e9db11_c76d872f",
        "filename": "src/runtime/proc.go",
        "patchSetId": 23
      },
      "lineNbr": 2291,
      "author": {
        "id": 25391
      },
      "writtenOn": "2019-10-07T21:31:09Z",
      "side": 1,
      "message": "could this have any negative effects on scheduling since we will no longer \"steal\" from our own P? I\u0027m worried that we unnecessarily end up return the P and block when we previously wouldn\u0027t have.\n\nThis is somewhat related to Chris Hines\u0027 concerns where this loop could take a long time, except there are other ways a G could be added to the local runqueue (I think...).",
      "range": {
        "startLine": 2289,
        "startChar": 3,
        "endLine": 2291,
        "endChar": 4
      },
      "revId": "604183459efc5303156ea3f517b3746710bfad48",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fd30438a_34908393",
        "filename": "src/runtime/proc.go",
        "patchSetId": 23
      },
      "lineNbr": 2291,
      "author": {
        "id": 5206
      },
      "writtenOn": "2019-10-09T03:10:31Z",
      "side": 1,
      "message": "If we get here, then our local run queue is empty.  If it weren\u0027t empty, the call to runqget above would have returned something.  So there will never be anything to steal from our own P.  I don\u0027t see any code that ever adds a goroutine to the local run queue of a different P.  There\u0027s no real reason to do that.",
      "parentUuid": "91e9db11_c76d872f",
      "range": {
        "startLine": 2289,
        "startChar": 3,
        "endLine": 2291,
        "endChar": 4
      },
      "revId": "604183459efc5303156ea3f517b3746710bfad48",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ddc98ffb_34c9336b",
        "filename": "src/runtime/proc.go",
        "patchSetId": 23
      },
      "lineNbr": 2291,
      "author": {
        "id": 25391
      },
      "writtenOn": "2019-10-09T20:40:48Z",
      "side": 1,
      "message": "ah, got it. I was afraid maybe a G in _Gsyscall could somehow end up on the local runqueue but that doesn\u0027t seem to be possible. It either gets its original P back or puts itself on the global runqueue (for a non-locked G, anyway).",
      "parentUuid": "fd30438a_34908393",
      "range": {
        "startLine": 2289,
        "startChar": 3,
        "endLine": 2291,
        "endChar": 4
      },
      "revId": "604183459efc5303156ea3f517b3746710bfad48",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0ed45388_68c1c651",
        "filename": "src/runtime/proc.go",
        "patchSetId": 23
      },
      "lineNbr": 2629,
      "author": {
        "id": 25391
      },
      "writtenOn": "2019-10-07T21:31:09Z",
      "side": 1,
      "message": "while this may be true, is there a way to maintain the spirit of the original check? if there\u0027s some condition under which having local work and spinning is still bad, could we still retain the check for that, or would it be too expensive to do so?",
      "range": {
        "startLine": 2628,
        "startChar": 2,
        "endLine": 2629,
        "endChar": 56
      },
      "revId": "604183459efc5303156ea3f517b3746710bfad48",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f23f570f_9761c4d6",
        "filename": "src/runtime/proc.go",
        "patchSetId": 23
      },
      "lineNbr": 2629,
      "author": {
        "id": 5206
      },
      "writtenOn": "2019-10-09T03:10:31Z",
      "side": 1,
      "message": "Added a check before the call to checkTimers.",
      "parentUuid": "0ed45388_68c1c651",
      "range": {
        "startLine": 2628,
        "startChar": 2,
        "endLine": 2629,
        "endChar": 56
      },
      "revId": "604183459efc5303156ea3f517b3746710bfad48",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b1f9f6cc_6e39e87c",
        "filename": "src/runtime/time.go",
        "patchSetId": 23
      },
      "lineNbr": 332,
      "author": {
        "id": 25391
      },
      "writtenOn": "2019-10-07T21:31:09Z",
      "side": 1,
      "message": "should there be a go:systemstack annotation? same for runtimer.",
      "range": {
        "startLine": 332,
        "startChar": 34,
        "endLine": 332,
        "endChar": 69
      },
      "revId": "604183459efc5303156ea3f517b3746710bfad48",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e215326c_f5d32189",
        "filename": "src/runtime/time.go",
        "patchSetId": 23
      },
      "lineNbr": 332,
      "author": {
        "id": 5206
      },
      "writtenOn": "2019-10-09T03:10:31Z",
      "side": 1,
      "message": "I\u0027m not sure.  Do we have a general guideline for that?  It\u0027s not important that these functions be called on the system stack.  They will work correctly if called on the regular stack.  It just happens to be the case that they are called on the system stack.",
      "parentUuid": "b1f9f6cc_6e39e87c",
      "range": {
        "startLine": 332,
        "startChar": 34,
        "endLine": 332,
        "endChar": 69
      },
      "revId": "604183459efc5303156ea3f517b3746710bfad48",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7b2f5046_fc729f35",
        "filename": "src/runtime/time.go",
        "patchSetId": 23
      },
      "lineNbr": 332,
      "author": {
        "id": 25391
      },
      "writtenOn": "2019-10-09T20:40:48Z",
      "side": 1,
      "message": "I think the guideline is just if the function must be called on the system stack. I misunderstood this comment to mean that adjusttimers isn\u0027t safe to call off the system stack.\n\nMy preference would be to remove this comment here and elsewhere because it has a higher than normal chance of growing stale (it references uses at call sites that aren\u0027t a strict requirement).",
      "parentUuid": "e215326c_f5d32189",
      "range": {
        "startLine": 332,
        "startChar": 34,
        "endLine": 332,
        "endChar": 69
      },
      "revId": "604183459efc5303156ea3f517b3746710bfad48",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "68837d77_92a2a0f1",
        "filename": "src/runtime/time.go",
        "patchSetId": 23
      },
      "lineNbr": 332,
      "author": {
        "id": 5206
      },
      "writtenOn": "2019-10-09T22:07:16Z",
      "side": 1,
      "message": "OK, removed the comment.",
      "parentUuid": "7b2f5046_fc729f35",
      "range": {
        "startLine": 332,
        "startChar": 34,
        "endLine": 332,
        "endChar": 69
      },
      "revId": "604183459efc5303156ea3f517b3746710bfad48",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}