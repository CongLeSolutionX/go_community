{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "d03d908f_eff087eb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-11-21T13:02:05Z",
      "side": 1,
      "message": "I spotted some possible problems.\n\nThese findings are based on simple heuristics. If a finding appears wrong, briefly reply here saying so. Otherwise, please address any problems and update the GitHub PR. When complete, mark this comment as \u0027Done\u0027 and click the [blue \u0027Reply\u0027 button](https://go.dev/wiki/GerritBot#i-left-a-reply-to-a-comment-in-gerrit-but-no-one-but-me-can-see-it) above.\n\nPossible problems detected:\n  1. Lines in the commit message should be wrapped at ~76 characters unless needed for things like URLs or tables. You have a 200 character line.\n\nThe commit title and commit message body come from the GitHub PR title and description, and must be edited in the GitHub web interface (not via git). For instructions, see [here](https://go.dev/wiki/GerritBot/#how-does-gerritbot-determine-the-final-commit-message). For guidelines on commit messages for the Go project, see [here](https://go.dev/doc/contribute#commit_messages).\n\n\n(In general for Gerrit code reviews, the change author is expected to [log in to Gerrit](https://go-review.googlesource.com/login/) with a Gmail or other Google account and then close out each piece of feedback by marking it as \u0027Done\u0027 if implemented as suggested or otherwise reply to each review comment. See the [Review](https://go.dev/doc/contribute#review) section of the Contributing Guide for details.)",
      "revId": "068dd93eaada694707e4279baf22888225a9c243",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3996d2d0_3bbdf9c4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 37209
      },
      "writtenOn": "2023-11-21T13:05:25Z",
      "side": 1,
      "message": "I am adding you as a reviewer because you helped with my other CL on ServeContent and ranges.",
      "revId": "068dd93eaada694707e4279baf22888225a9c243",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8b09b180_37a7361f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 37209
      },
      "writtenOn": "2023-11-21T13:10:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d03d908f_eff087eb",
      "revId": "068dd93eaada694707e4279baf22888225a9c243",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "40850d1f_a012b84a",
        "filename": "src/net/http/fs.go",
        "patchSetId": 1
      },
      "lineNbr": 576,
      "author": {
        "id": 37209
      },
      "writtenOn": "2023-11-21T13:10:20Z",
      "side": 1,
      "message": "@dneil: I started on this to fix responses on invalid range request, but I realized the issue is much wider and it is about all errors returned from ServeContent API. This fix makes a list of common headers but maybe a better approach would be to simply wipe all pre-set headers before calling Error?\n\nAnyway, I am opening this to get feedback. I also have to add some tests but I am not sure how detailed should they be. Should I just make another test function to check if headers are removed on an error, or should I check response headers in all existing tests which return errors?",
      "revId": "068dd93eaada694707e4279baf22888225a9c243",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8aa88660_4929cea2",
        "filename": "src/net/http/fs.go",
        "patchSetId": 1
      },
      "lineNbr": 576,
      "author": {
        "id": 5305
      },
      "writtenOn": "2023-11-21T18:03:01Z",
      "side": 1,
      "message": "Zeroing out all headers in error responses seems reasonable to me. (Probably `http.Error` should have done that, but it\u0027s far too late to change now.)\n\nI\u0027d make just one test that triggers an error response and verifies that only expected headers are present. No need to modify every existing test.",
      "parentUuid": "40850d1f_a012b84a",
      "revId": "068dd93eaada694707e4279baf22888225a9c243",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "41c9ad5c_36fb7a82",
        "filename": "src/net/http/fs.go",
        "patchSetId": 1
      },
      "lineNbr": 576,
      "author": {
        "id": 37209
      },
      "writtenOn": "2023-11-21T21:25:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8aa88660_4929cea2",
      "revId": "068dd93eaada694707e4279baf22888225a9c243",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "575b2ba6_cba679e8",
        "filename": "src/net/http/fs.go",
        "patchSetId": 1
      },
      "lineNbr": 576,
      "author": {
        "id": 37209
      },
      "writtenOn": "2023-12-06T00:14:42Z",
      "side": 1,
      "message": "After more thought I am thinking that zeroing out all headers might be too much. It might zero out other headers which are not problematic, like nosniff header, request tracing headers, or server timing headers (examples from my own code). I think removing a list of content-related headers while keeping other headers might be more reasonable?",
      "parentUuid": "41c9ad5c_36fb7a82",
      "revId": "068dd93eaada694707e4279baf22888225a9c243",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "90cfe02e_b13f87fa",
        "filename": "src/net/http/fs.go",
        "patchSetId": 1
      },
      "lineNbr": 576,
      "author": {
        "id": 5305
      },
      "writtenOn": "2024-01-05T22:55:24Z",
      "side": 1,
      "message": "Not removing tracing headers seems like a good thing.\n\nIn #50905, there\u0027s one unquestionably wrong header in the error response, and one arguably wrong one:\n\n- The `Content-Length` in the response is unambiguously wrong. I think the right thing to do here is to fix `http.Error` to remove any existing `Content-Length` before calling `WriteHeader`.\n\n- The `ETag` header is probably wrong, since (as you say) it doesn\u0027t really hold for the error content. `ServeContent` expects the caller to set the `ETag` header, so perhaps the right thing is for it to delete this header before writing any errors.\n\nAre there any other headers that would need to be stripped from an error response?",
      "parentUuid": "575b2ba6_cba679e8",
      "revId": "068dd93eaada694707e4279baf22888225a9c243",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "12ff474f_8cd8fe6c",
        "filename": "src/net/http/fs.go",
        "patchSetId": 1
      },
      "lineNbr": 576,
      "author": {
        "id": 5305
      },
      "writtenOn": "2024-01-06T00:14:53Z",
      "side": 1,
      "message": "I put together https://go.dev/cl/554216 to strip `Content-Length` in `Error`, which addresses the most unquestionably wrong case.\n\nWe should possibly still do something to remove `ETag` at least when `ServeContent` produces an error.",
      "parentUuid": "90cfe02e_b13f87fa",
      "revId": "068dd93eaada694707e4279baf22888225a9c243",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "25dd66bb_be13e46f",
        "filename": "src/net/http/fs.go",
        "patchSetId": 1
      },
      "lineNbr": 576,
      "author": {
        "id": 37209
      },
      "writtenOn": "2024-01-06T10:37:38Z",
      "side": 1,
      "message": "My first draft of this CL has included a set of headers. I suggest I revert (or you use the same set of headers I made) to https://github.com/golang/go/commit/0c3b04c66c9266ecc274349a597d1ae686d182b1 for errors from ServeContent where I suggest we fix this directly and not try to fix in more general http.Error (which has to keep more of the backwards compatibility). So I think this CL should fix a broader set of headers here, while your CL should probably fix a narrower set of headers in http.Error. But maybe we can just do all of them in http.Error?",
      "parentUuid": "12ff474f_8cd8fe6c",
      "revId": "068dd93eaada694707e4279baf22888225a9c243",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "94fd000b_cf77e7de",
        "filename": "src/net/http/fs.go",
        "patchSetId": 1
      },
      "lineNbr": 576,
      "author": {
        "id": 5305
      },
      "writtenOn": "2024-03-04T17:30:50Z",
      "side": 1,
      "message": "The original set of headers you were stripping is:\n\n```\nContent-Type\nContent-Length\nContent-Encoding\nEtag\nLast-Modified\nVary\n```\n\nAnd also adding:\n\n```\nCache-Control: no-cache\n```\n\nDoing all of that in `http.Error` seems reasonable to me. Want to either send me a CL for that or update this one to strip them in `Error`? (Or I can make a CL if you prefer.)",
      "parentUuid": "25dd66bb_be13e46f",
      "revId": "068dd93eaada694707e4279baf22888225a9c243",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}