{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "bef511eb_60df3778",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-07-20T19:29:46Z",
      "side": 1,
      "message": "SlowBots beginning. Status page: https://farmer.golang.org/try?commit\u003d5a57ca1c\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "5a57ca1c292695042d6ab864716f129f36ba73b6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ab6728ed_c756c815",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-07-20T19:42:24Z",
      "side": 1,
      "message": "SlowBots are happy.\n\nSlowBot builds that ran:\n* linux-amd64-longtest\n",
      "parentUuid": "bef511eb_60df3778",
      "tag": "autogenerated:trybots~happy",
      "revId": "5a57ca1c292695042d6ab864716f129f36ba73b6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "22c61ac9_6cad7021",
        "filename": "src/testing/testing.go",
        "patchSetId": 5
      },
      "lineNbr": 964,
      "author": {
        "id": 62748
      },
      "writtenOn": "2023-07-20T21:35:58Z",
      "side": 1,
      "message": "This doesn\u0027t seem to be necessary, the check is already done by `c.checkRaces()`.",
      "range": {
        "startLine": 964,
        "startChar": 15,
        "endLine": 964,
        "endChar": 61
      },
      "revId": "5a57ca1c292695042d6ab864716f129f36ba73b6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9e315436_39801f15",
        "filename": "src/testing/testing.go",
        "patchSetId": 5
      },
      "lineNbr": 970,
      "author": {
        "id": 62748
      },
      "writtenOn": "2023-07-20T21:35:58Z",
      "side": 1,
      "message": "I don\u0027t see `c.lastRaceErrors()` setting `c.failed` to true anywhere, so wouldn\u0027t we also need to check `c.raceErrorLogged` here?",
      "range": {
        "startLine": 970,
        "startChar": 8,
        "endLine": 970,
        "endChar": 16
      },
      "revId": "5a57ca1c292695042d6ab864716f129f36ba73b6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "14a37dc1_b87dd635",
        "filename": "src/testing/testing.go",
        "patchSetId": 5
      },
      "lineNbr": 1361,
      "author": {
        "id": 62748
      },
      "writtenOn": "2023-07-20T21:35:58Z",
      "side": 1,
      "message": "I get why this loop is necessary, but would it be bad to just acquire `c`\u0027s mutex instead?\n\n```go\nc.mu.Lock()\nif raceErrors \u003c\u003d c.lastRaceErrors.Load() {\n  c.mu.Unlock()\n  return raceErrors\n}\nc.lastRaceErrors.Store(raceErrors)\nc.mu.Unlock()\n```\n\n(And also below.)\n\nThen you don\u0027t even need atomic types anymore.",
      "range": {
        "startLine": 1361,
        "startChar": 1,
        "endLine": 1361,
        "endChar": 4
      },
      "revId": "5a57ca1c292695042d6ab864716f129f36ba73b6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}