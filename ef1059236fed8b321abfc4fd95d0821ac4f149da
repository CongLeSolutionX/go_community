{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "a456d1bd_b4167b72",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2024-05-18T16:23:56Z",
      "side": 1,
      "message": "I spotted some possible problems.\n\nThese findings are based on simple heuristics. If a finding appears wrong, briefly reply here saying so. Otherwise, please address any problems and update the GitHub PR. When complete, mark this comment as \u0027Done\u0027 and click the [blue \u0027Reply\u0027 button](https://go.dev/wiki/GerritBot#i-left-a-reply-to-a-comment-in-gerrit-but-no-one-but-me-can-see-it) above.\n\nPossible problems detected:\n  1. You usually need to reference a bug number for all but trivial or cosmetic fixes. For this repo, the format is usually \u0027Fixes #12345\u0027 or \u0027Updates #12345\u0027 at the end of the commit message. Should you have a bug reference?\n\nThe commit title and commit message body come from the GitHub PR title and description, and must be edited in the GitHub web interface (not via git). For instructions, see [here](https://go.dev/wiki/GerritBot/#how-does-gerritbot-determine-the-final-commit-message). For guidelines on commit messages for the Go project, see [here](https://go.dev/doc/contribute#commit_messages).\n\n\n(In general for Gerrit code reviews, the change author is expected to [log in to Gerrit](https://go-review.googlesource.com/login/) with a Gmail or other Google account and then close out each piece of feedback by marking it as \u0027Done\u0027 if implemented as suggested or otherwise reply to each review comment. See the [Review](https://go.dev/doc/contribute#review) section of the Contributing Guide for details.)",
      "revId": "ef1059236fed8b321abfc4fd95d0821ac4f149da",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1122cff4_5a76379d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 51461
      },
      "writtenOn": "2024-05-18T16:24:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a456d1bd_b4167b72",
      "revId": "ef1059236fed8b321abfc4fd95d0821ac4f149da",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8baecd38_e8333934",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5015
      },
      "writtenOn": "2024-05-18T21:01:19Z",
      "side": 1,
      "message": "Contradicting my comment from the last CL somewhat, I don\u0027t think this materially changes the tree because fmt uses reflect, which pulls in runtime, which ends up pulling in everything anyway.\n\nThis change is OK in isolation, but it would be a tax on the maintainers to deal with a thousand little CLs like this to inject the new packages. Instead, I would like to see a policy developed about how to handle changes like this, and the effect of that policy to be a single CL that applies the sort-\u003eslice change, for example, over the whole tree in one go.",
      "revId": "ef1059236fed8b321abfc4fd95d0821ac4f149da",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "37ee2529_e4cde881",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5015
      },
      "writtenOn": "2024-05-18T21:10:22Z",
      "side": 1,
      "message": "https://github.com/golang/go/issues/67510",
      "revId": "ef1059236fed8b321abfc4fd95d0821ac4f149da",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}