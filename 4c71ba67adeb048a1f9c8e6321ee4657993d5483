{
  "comments": [
    {
      "key": {
        "uuid": "21230060_863666f5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 8
      },
      "lineNbr": 16,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-08-30T21:43:53Z",
      "side": 1,
      "message": "An alternative way of thinking about this is that assembly files don\u0027t belong to *any* Go package as far as the toolchain is concerned. After all, they can declare whatever symbols they want with whatever package prefixes they want (though build conventions constrain this). To the extent that those symbols belong to a Go package, they must be declared as bodyless functions in the Go source and *that\u0027s* really what puts them in a Go package.\n\n(Not saying to update the commit message; just pointing this out.)",
      "revId": "4c71ba67adeb048a1f9c8e6321ee4657993d5483",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9668139f_867510ca",
        "filename": "src/cmd/link/internal/ld/dwarf.go",
        "patchSetId": 8
      },
      "lineNbr": 861,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-08-30T21:43:53Z",
      "side": 1,
      "message": "Perhaps \"Find a suitable CU DIE ...\"? Otherwise you may be talking about the DIE for the global, rather than its parent.",
      "revId": "4c71ba67adeb048a1f9c8e6321ee4657993d5483",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "37e51729_062b5514",
        "filename": "src/cmd/link/internal/ld/dwarf.go",
        "patchSetId": 8
      },
      "lineNbr": 861,
      "author": {
        "id": 32560
      },
      "writtenOn": "2019-09-03T19:55:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9668139f_867510ca",
      "revId": "4c71ba67adeb048a1f9c8e6321ee4657993d5483",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9be891a7_e0e16a98",
        "filename": "src/cmd/link/internal/ld/dwarf.go",
        "patchSetId": 8
      },
      "lineNbr": 864,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-08-30T21:43:53Z",
      "side": 1,
      "message": "In this context, it\u0027s not clear what Textp has to do with anything. IIRC, the more fundamental issue is a global in a package with no retained text symbols doesn\u0027t get assigned a Unit (or maybe doesn\u0027t get assigned a Lib). Consider explaining that here instead.\n\nOTOH, that seems like a bug. :)",
      "revId": "4c71ba67adeb048a1f9c8e6321ee4657993d5483",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ec396aed_ce1bd03f",
        "filename": "src/cmd/link/internal/ld/dwarf.go",
        "patchSetId": 8
      },
      "lineNbr": 864,
      "author": {
        "id": 32560
      },
      "writtenOn": "2019-09-03T19:55:57Z",
      "side": 1,
      "message": "Ok, with the removal of compUnitsByLibrary, we\u0027re back to old performance, and this code is a bit more readable.",
      "parentUuid": "9be891a7_e0e16a98",
      "revId": "4c71ba67adeb048a1f9c8e6321ee4657993d5483",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c0f5379f_c786fb60",
        "filename": "src/cmd/link/internal/ld/dwarf.go",
        "patchSetId": 8
      },
      "lineNbr": 864,
      "author": {
        "id": 13315
      },
      "writtenOn": "2019-09-04T15:26:08Z",
      "side": 1,
      "message": "Is this saying that we deadcode CUs if there is no reachable text symbols from it? I think we should only deadcode CU if there is no _any_ reachable symbol. In another word, if a data symbol is reachable, we should retain the CU. What does the old do? (This may be fine if the old code didn\u0027t do the \"right\" thing. But perhaps we should fix it at some point.)\n\nThat makes me think when should we get here with a global without a CU. Perhaps linker generated globals?",
      "parentUuid": "ec396aed_ce1bd03f",
      "revId": "4c71ba67adeb048a1f9c8e6321ee4657993d5483",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5e0bc080_cdd7e863",
        "filename": "src/cmd/link/internal/ld/dwarf.go",
        "patchSetId": 8
      },
      "lineNbr": 864,
      "author": {
        "id": 32560
      },
      "writtenOn": "2019-09-04T15:29:09Z",
      "side": 1,
      "message": "Old code would only have a CU if we had reachable code.\n\nIn the current form, we retain that behavior: we only have CUs if we have reachable code. If a global variable (for instance) is imported in an otherwise dead piece CU, the variable will be under a runtime CU.\n\nI could be convinced to move to a different approach if enough people feel strongly.",
      "parentUuid": "c0f5379f_c786fb60",
      "revId": "4c71ba67adeb048a1f9c8e6321ee4657993d5483",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a17ecaa1_9f182e5d",
        "filename": "src/cmd/link/internal/ld/dwarf.go",
        "patchSetId": 8
      },
      "lineNbr": 864,
      "author": {
        "id": 13315
      },
      "writtenOn": "2019-09-04T15:50:33Z",
      "side": 1,
      "message": "Emmm. I tried this example:\n\n// p.go\npackage p; var X \u003d 42\n\n// main.go\npackage main; import \"p\"; func main() { println(p.X) }\n\nOn the current tip, the p.X DIE is in the CU of package p, which has only one DIE. Built with this CL, the p.X DIE belongs to the runtime CU, and package p\u0027s CU is gone.\n\nI don\u0027t have a strong preference on this, as in the end CU is a more-or-less artificial concept. But deadcoding CU based on text but not data symbols does feel a bit weird to me. (Maybe we should check with the users who actually use the CUs?)\n\nLGTM besides this. Thanks.",
      "parentUuid": "5e0bc080_cdd7e863",
      "revId": "4c71ba67adeb048a1f9c8e6321ee4657993d5483",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "975ac5b3_623197b1",
        "filename": "src/cmd/link/internal/ld/dwarf.go",
        "patchSetId": 8
      },
      "lineNbr": 864,
      "author": {
        "id": 32560
      },
      "writtenOn": "2019-09-04T18:38:30Z",
      "side": 1,
      "message": "Ok. Not sure why I thought it was all globals. With all the thoughts on this, I\u0027ve gone back to empty compunits. Latest upload should fix which compunit a global is declared in.",
      "parentUuid": "a17ecaa1_9f182e5d",
      "revId": "4c71ba67adeb048a1f9c8e6321ee4657993d5483",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4e7b9411_8cc2e7f1",
        "filename": "src/cmd/link/internal/ld/dwarf.go",
        "patchSetId": 8
      },
      "lineNbr": 871,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-08-30T21:43:53Z",
      "side": 1,
      "message": "I\u0027m confused by how this is possible if lib !\u003d nil. If lib !\u003d nil, then s.Unit !\u003d nil and s.Unit.Lib !\u003d nil; why doesn\u0027t that mean that compUnitsByPackage includes s.Unit?",
      "range": {
        "startLine": 871,
        "startChar": 18,
        "endLine": 871,
        "endChar": 56
      },
      "revId": "4c71ba67adeb048a1f9c8e6321ee4657993d5483",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dcf96df3_449331f9",
        "filename": "src/cmd/link/internal/ld/dwarf.go",
        "patchSetId": 8
      },
      "lineNbr": 871,
      "author": {
        "id": 32560
      },
      "writtenOn": "2019-09-03T19:55:57Z",
      "side": 1,
      "message": "Yeah, I can see how that would be confusing, but this right. I\u0027ll drop a comment here, but it follows from the above. If we\u0027re a symbol that isn\u0027t in a unit with live code, there might not be any live CUs. In other words, compUnitsByPackage have been deadcoded, and for a given package, there might not be any live code, only live variables.",
      "parentUuid": "4e7b9411_8cc2e7f1",
      "range": {
        "startLine": 871,
        "startChar": 18,
        "endLine": 871,
        "endChar": 56
      },
      "revId": "4c71ba67adeb048a1f9c8e6321ee4657993d5483",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d19df5ab_a11123dd",
        "filename": "src/cmd/link/internal/ld/dwarf.go",
        "patchSetId": 8
      },
      "lineNbr": 1772,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-08-30T21:43:53Z",
      "side": 1,
      "message": "This map seems really fishy to me. The code never looks at all of the compilation units of a library, which is what this is tracking.\n\nWe need to keep track of the sym.CompilationUnit of runtime to use as our dumping ground (or we should just make a new CU for that), but I don\u0027t think we need this for anything else. If a symbol has a Unit, then we know what Unit to use; and if a symbol doesn\u0027t have a Unit, then it doesn\u0027t have a Lib, and then this map doesn\u0027t help.",
      "revId": "4c71ba67adeb048a1f9c8e6321ee4657993d5483",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c6760e83_6b73fd10",
        "filename": "src/cmd/link/internal/ld/dwarf.go",
        "patchSetId": 8
      },
      "lineNbr": 1772,
      "author": {
        "id": 32560
      },
      "writtenOn": "2019-09-03T19:55:57Z",
      "side": 1,
      "message": "You will be happy to know I\u0027ve yanked it out.",
      "parentUuid": "d19df5ab_a11123dd",
      "revId": "4c71ba67adeb048a1f9c8e6321ee4657993d5483",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2a65185a_c18ecdac",
        "filename": "src/cmd/link/internal/ld/dwarf.go",
        "patchSetId": 8
      },
      "lineNbr": 1827,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-08-30T21:43:53Z",
      "side": 1,
      "message": "Consider lifting this into the ctxt.Library loop and instead setting the first unit.Consts that you come across.",
      "revId": "4c71ba67adeb048a1f9c8e6321ee4657993d5483",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ef59bcd7_a5db8c22",
        "filename": "src/cmd/link/internal/ld/dwarf.go",
        "patchSetId": 8
      },
      "lineNbr": 1827,
      "author": {
        "id": 32560
      },
      "writtenOn": "2019-09-03T19:55:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2a65185a_c18ecdac",
      "revId": "4c71ba67adeb048a1f9c8e6321ee4657993d5483",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dfc01561_bb271c50",
        "filename": "src/cmd/link/internal/ld/dwarf.go",
        "patchSetId": 8
      },
      "lineNbr": 1836,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-08-30T21:43:53Z",
      "side": 1,
      "message": "This name is rather unfortunate. Unfortunately, we use this to set both DW_AT_name and the put this in the symbol table. We already hack around this slightly for DW_ABRV_COMPUNIT, so we could hack around it more. We could also/alternatively abuse the version argument.",
      "revId": "4c71ba67adeb048a1f9c8e6321ee4657993d5483",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "88b0f3b6_6dffec0c",
        "filename": "src/cmd/link/internal/ld/dwarf.go",
        "patchSetId": 8
      },
      "lineNbr": 1836,
      "author": {
        "id": 32560
      },
      "writtenOn": "2019-09-03T19:55:57Z",
      "side": 1,
      "message": "I\u0027ve tweaked the naming somewhat, as I had promised Alessandro I would. I agree it\u0027s kinda terrible tho.",
      "parentUuid": "dfc01561_bb271c50",
      "revId": "4c71ba67adeb048a1f9c8e6321ee4657993d5483",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "543b1323_effb360c",
        "filename": "src/cmd/link/internal/ld/dwarf.go",
        "patchSetId": 8
      },
      "lineNbr": 1836,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-09-10T13:47:47Z",
      "side": 1,
      "message": "Could we just set DW_AT_name to the right thing (the package path)? We could do something like searching for \".compunit-\" in newdie and stripping the name.\n\nOr do we actually need the comp unit names to be distinct?",
      "parentUuid": "88b0f3b6_6dffec0c",
      "revId": "4c71ba67adeb048a1f9c8e6321ee4657993d5483",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2728bc12_e4c26594",
        "filename": "src/cmd/link/internal/ld/dwarf.go",
        "patchSetId": 8
      },
      "lineNbr": 1836,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-09-11T20:18:37Z",
      "side": 1,
      "message": "I suspect these names don\u0027t matter at all, so we could even strip this attribute.\n\nCheck with Alessandro what, if anything, Delve does with this name.",
      "parentUuid": "543b1323_effb360c",
      "revId": "4c71ba67adeb048a1f9c8e6321ee4657993d5483",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ef2be90f_3b0c0124",
        "filename": "src/cmd/link/internal/ld/dwarf.go",
        "patchSetId": 8
      },
      "lineNbr": 1836,
      "author": {
        "id": 14020
      },
      "writtenOn": "2019-09-11T20:23:33Z",
      "side": 1,
      "message": "My 2 cents: it is useful as a developer looking through DWARF dumps to have a name on the comp unit, so that I can locate the right package.... I\u0027d vote against getting rid of this completely.",
      "parentUuid": "2728bc12_e4c26594",
      "revId": "4c71ba67adeb048a1f9c8e6321ee4657993d5483",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "15b103a2_9c434b36",
        "filename": "src/cmd/link/internal/ld/dwarf.go",
        "patchSetId": 8
      },
      "lineNbr": 1836,
      "author": {
        "id": 5821
      },
      "writtenOn": "2019-09-13T17:21:33Z",
      "side": 1,
      "message": "Delve uses the DW_AT_name of compile units to construct a map of packages in the program. That\u0027s used to let users type \u0027print blah.X\u0027 to print variable \u0027github.com/blee/blah.X\u0027 without having to type the full package path. My preference would be for DW_AT_name to stay and remain what it is now, without suffixes, but an easily removed suffix (or prefix) is also fine.\n\nWith a small amount of effort I think you could get rid of the unit.DWInfo object and its symbol entirely and write the attributes of the compilation unit directly in writeinfo.",
      "parentUuid": "ef2be90f_3b0c0124",
      "revId": "4c71ba67adeb048a1f9c8e6321ee4657993d5483",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6bebc476_95d4e87c",
        "filename": "src/cmd/link/internal/ld/dwarf.go",
        "patchSetId": 8
      },
      "lineNbr": 1867,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-08-30T21:43:53Z",
      "side": 1,
      "message": "This will never be true. I\u0027m not sure if that means this code should go, or there\u0027s something off with the len(unit.Textp) check at the top of the loop.",
      "revId": "4c71ba67adeb048a1f9c8e6321ee4657993d5483",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e28949f7_7bed91bd",
        "filename": "src/cmd/link/internal/ld/dwarf.go",
        "patchSetId": 8
      },
      "lineNbr": 1867,
      "author": {
        "id": 32560
      },
      "writtenOn": "2019-09-03T19:55:57Z",
      "side": 1,
      "message": "This is dead.",
      "parentUuid": "6bebc476_95d4e87c",
      "revId": "4c71ba67adeb048a1f9c8e6321ee4657993d5483",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d6064d33_403d937e",
        "filename": "src/cmd/link/internal/objfile/objfile.go",
        "patchSetId": 8
      },
      "lineNbr": 410,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-08-30T21:43:53Z",
      "side": 1,
      "message": "I think this is no longer the previous def, as claimed in the text.",
      "range": {
        "startLine": 410,
        "startChar": 157,
        "endLine": 410,
        "endChar": 162
      },
      "revId": "4c71ba67adeb048a1f9c8e6321ee4657993d5483",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "431db94a_211b641f",
        "filename": "src/cmd/link/internal/objfile/objfile.go",
        "patchSetId": 8
      },
      "lineNbr": 410,
      "author": {
        "id": 32560
      },
      "writtenOn": "2019-09-03T19:55:57Z",
      "side": 1,
      "message": "hmm. that\u0027s a sad change that lived too long.",
      "parentUuid": "d6064d33_403d937e",
      "range": {
        "startLine": 410,
        "startChar": 157,
        "endLine": 410,
        "endChar": 162
      },
      "revId": "4c71ba67adeb048a1f9c8e6321ee4657993d5483",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b7092c06_df0af65a",
        "filename": "src/cmd/link/internal/sym/compilation_unit.go",
        "patchSetId": 8
      },
      "lineNbr": 11,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-08-30T21:43:53Z",
      "side": 1,
      "message": "Go",
      "range": {
        "startLine": 11,
        "startChar": 32,
        "endLine": 11,
        "endChar": 34
      },
      "revId": "4c71ba67adeb048a1f9c8e6321ee4657993d5483",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d0c966dd_5bd6bd56",
        "filename": "src/cmd/link/internal/sym/compilation_unit.go",
        "patchSetId": 8
      },
      "lineNbr": 11,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-08-30T21:43:53Z",
      "side": 1,
      "message": "library",
      "range": {
        "startLine": 11,
        "startChar": 3,
        "endLine": 11,
        "endChar": 10
      },
      "revId": "4c71ba67adeb048a1f9c8e6321ee4657993d5483",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7c656291_3d6136a8",
        "filename": "src/cmd/link/internal/sym/compilation_unit.go",
        "patchSetId": 8
      },
      "lineNbr": 11,
      "author": {
        "id": 32560
      },
      "writtenOn": "2019-09-03T19:55:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b7092c06_df0af65a",
      "range": {
        "startLine": 11,
        "startChar": 32,
        "endLine": 11,
        "endChar": 34
      },
      "revId": "4c71ba67adeb048a1f9c8e6321ee4657993d5483",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7d18ffe9_18bdac9d",
        "filename": "src/cmd/link/internal/sym/compilation_unit.go",
        "patchSetId": 8
      },
      "lineNbr": 11,
      "author": {
        "id": 32560
      },
      "writtenOn": "2019-09-03T19:55:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d0c966dd_5bd6bd56",
      "range": {
        "startLine": 11,
        "startChar": 3,
        "endLine": 11,
        "endChar": 10
      },
      "revId": "4c71ba67adeb048a1f9c8e6321ee4657993d5483",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d8f07220_1a726897",
        "filename": "src/cmd/link/internal/sym/library.go",
        "patchSetId": 8
      },
      "lineNbr": 20,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-08-30T21:43:53Z",
      "side": 1,
      "message": "Now I extra don\u0027t think we need ctxt.compUnitsByPackage!\n\nIt looks like the only consumer of this is objfile.Load. Can we just pass the unit to it? Or have it create the unit?",
      "revId": "4c71ba67adeb048a1f9c8e6321ee4657993d5483",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b07879c0_f4c48688",
        "filename": "src/cmd/link/internal/sym/library.go",
        "patchSetId": 8
      },
      "lineNbr": 20,
      "author": {
        "id": 32560
      },
      "writtenOn": "2019-09-03T19:55:57Z",
      "side": 1,
      "message": "Per conversations online, and offline, it\u0027s gone. :P",
      "parentUuid": "d8f07220_1a726897",
      "revId": "4c71ba67adeb048a1f9c8e6321ee4657993d5483",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}