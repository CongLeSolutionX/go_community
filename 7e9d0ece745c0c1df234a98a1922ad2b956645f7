{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "79806ed3_1636470c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 54613
      },
      "writtenOn": "2021-11-05T04:15:29Z",
      "side": 1,
      "message": "Very sorry, the test file should in typeparam folder, fixed.",
      "revId": "7e9d0ece745c0c1df234a98a1922ad2b956645f7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d236e7bd_757ccdaa",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 54613
      },
      "writtenOn": "2021-11-05T04:27:18Z",
      "side": 1,
      "message": "Tt\u0027s \"ALL TESTS PASSED\" on my local, could please try again? very sorry for bother you.",
      "revId": "7e9d0ece745c0c1df234a98a1922ad2b956645f7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "80da58f0_0b923939",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-11-05T05:13:44Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003d7e9d0ece",
      "tag": "autogenerated:trybots~beginning",
      "revId": "7e9d0ece745c0c1df234a98a1922ad2b956645f7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a88fc556_42338952",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-11-05T05:27:25Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "80da58f0_0b923939",
      "tag": "autogenerated:trybots~happy",
      "revId": "7e9d0ece745c0c1df234a98a1922ad2b956645f7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "06889314_1862f9cf",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 7061
      },
      "writtenOn": "2021-11-05T16:28:17Z",
      "side": 1,
      "message": "Still looking at this, it seems like the actual bug is something slightly different but perhaps this still fixes it.",
      "revId": "7e9d0ece745c0c1df234a98a1922ad2b956645f7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "57b65a23_dc1da809",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 14665
      },
      "writtenOn": "2021-11-05T17:00:27Z",
      "side": 1,
      "message": "I think what Keith said in the issue is reasonable. The VarDef/VarLive pair masked the fact that two memory arguments are the same. I wonder whether we can elide VarDef for args the same way as we did for results?",
      "parentUuid": "06889314_1862f9cf",
      "revId": "7e9d0ece745c0c1df234a98a1922ad2b956645f7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "28663596_1ef985d5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 54613
      },
      "writtenOn": "2021-11-05T18:27:52Z",
      "side": 1,
      "message": "Since there is float64touint converting arg in the LECall arg list，when processing that convert value it will change the entry block from plain kind block to a control kind block and also add a phi value in that “after” block，so the mem args before and after of that float arg will be splited into different blocks，and unfortunately there is a openDefer which will insert VarDef/VarLive into entry block for keeping some values alive，that VarDef/VarLive sneak into those mem args sequence without maintain dependencies. It‘s not easy to fix the mem dependencies after that happens but start a new block before processing the LECall args is cheaper.",
      "parentUuid": "57b65a23_dc1da809",
      "revId": "7e9d0ece745c0c1df234a98a1922ad2b956645f7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fe997124_37ce78cf",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 7061
      },
      "writtenOn": "2021-11-05T19:06:35Z",
      "side": 1,
      "message": "I\u0027m a little worried that it\u0027s the control flow that\u0027s the problem, and with a clever example this bug could occur some other way.  But I am playing with it in the non-generic reproducer.",
      "parentUuid": "28663596_1ef985d5",
      "revId": "7e9d0ece745c0c1df234a98a1922ad2b956645f7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7879dd3c_c3692171",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 7061
      },
      "writtenOn": "2021-11-05T19:43:04Z",
      "side": 1,
      "message": "LGTM.  I\u0027ll ask somebody else for a Trust vote, don\u0027t think I\u0027m supposed to do both.",
      "revId": "7e9d0ece745c0c1df234a98a1922ad2b956645f7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c24cece8_89d66191",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 7061
      },
      "writtenOn": "2021-11-05T19:52:18Z",
      "side": 1,
      "message": "Chaoqun -- it looks like you\u0027re \"new\" here, probably don\u0027t have submit rights yet.  If you could fix that comment, one of us can submit.\nIf you want to replace the test with the non-generic one in the issue (not in typeparam), even better.\n(https://github.com/golang/go/issues/49282#issuecomment-962116393 )\n\nThanks for the fix.\n",
      "revId": "7e9d0ece745c0c1df234a98a1922ad2b956645f7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "28f2ee5e_5e93220b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 54613
      },
      "writtenOn": "2021-11-05T22:03:35Z",
      "side": 1,
      "message": "Thank you very much for reviewing the code. I will go back to my desk to resolve it in a few hours. Thanks again for providing the test case code.",
      "parentUuid": "c24cece8_89d66191",
      "revId": "7e9d0ece745c0c1df234a98a1922ad2b956645f7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1ccc828e_837aecda",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 54613
      },
      "writtenOn": "2021-11-06T02:29:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "28f2ee5e_5e93220b",
      "revId": "7e9d0ece745c0c1df234a98a1922ad2b956645f7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "59a86636_e2c6b138",
        "filename": "src/cmd/compile/internal/ssagen/ssa.go",
        "patchSetId": 3
      },
      "lineNbr": 5079,
      "author": {
        "id": 7061
      },
      "writtenOn": "2021-11-05T19:06:35Z",
      "side": 1,
      "message": "This needs a comment explaining why this is here, at least mention the bug number(#49282).",
      "range": {
        "startLine": 5079,
        "startChar": 2,
        "endLine": 5079,
        "endChar": 54
      },
      "revId": "7e9d0ece745c0c1df234a98a1922ad2b956645f7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6dbb44d2_a2cb3216",
        "filename": "src/cmd/compile/internal/ssagen/ssa.go",
        "patchSetId": 3
      },
      "lineNbr": 5079,
      "author": {
        "id": 7061
      },
      "writtenOn": "2021-11-05T19:43:04Z",
      "side": 1,
      "message": "I think the improved comment might say\n\n// split the entry block if there are open defers, because later calls to openDeferSave may cause a mismatch between the mem for an OpDereference and the call site which uses it.  See #49282.",
      "parentUuid": "59a86636_e2c6b138",
      "range": {
        "startLine": 5079,
        "startChar": 2,
        "endLine": 5079,
        "endChar": 54
      },
      "revId": "7e9d0ece745c0c1df234a98a1922ad2b956645f7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4a723420_dbfffd74",
        "filename": "src/cmd/compile/internal/ssagen/ssa.go",
        "patchSetId": 3
      },
      "lineNbr": 5079,
      "author": {
        "id": 54613
      },
      "writtenOn": "2021-11-06T02:05:25Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6dbb44d2_a2cb3216",
      "range": {
        "startLine": 5079,
        "startChar": 2,
        "endLine": 5079,
        "endChar": 54
      },
      "revId": "7e9d0ece745c0c1df234a98a1922ad2b956645f7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}