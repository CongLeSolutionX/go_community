{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "79806ed3_1636470c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 54613
      },
      "writtenOn": "2021-11-05T04:15:29Z",
      "side": 1,
      "message": "Very sorry, the test file should in typeparam folder, fixed.",
      "revId": "7e9d0ece745c0c1df234a98a1922ad2b956645f7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d236e7bd_757ccdaa",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 54613
      },
      "writtenOn": "2021-11-05T04:27:18Z",
      "side": 1,
      "message": "Tt\u0027s \"ALL TESTS PASSED\" on my local, could please try again? very sorry for bother you.",
      "revId": "7e9d0ece745c0c1df234a98a1922ad2b956645f7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "80da58f0_0b923939",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-11-05T05:13:44Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003d7e9d0ece",
      "tag": "autogenerated:trybots~beginning",
      "revId": "7e9d0ece745c0c1df234a98a1922ad2b956645f7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a88fc556_42338952",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-11-05T05:27:25Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "80da58f0_0b923939",
      "tag": "autogenerated:trybots~happy",
      "revId": "7e9d0ece745c0c1df234a98a1922ad2b956645f7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "06889314_1862f9cf",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 7061
      },
      "writtenOn": "2021-11-05T16:28:17Z",
      "side": 1,
      "message": "Still looking at this, it seems like the actual bug is something slightly different but perhaps this still fixes it.",
      "revId": "7e9d0ece745c0c1df234a98a1922ad2b956645f7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "57b65a23_dc1da809",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 14665
      },
      "writtenOn": "2021-11-05T17:00:27Z",
      "side": 1,
      "message": "I think what Keith said in the issue is reasonable. The VarDef/VarLive pair masked the fact that two memory arguments are the same. I wonder whether we can elide VarDef for args the same way as we did for results?",
      "parentUuid": "06889314_1862f9cf",
      "revId": "7e9d0ece745c0c1df234a98a1922ad2b956645f7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "28663596_1ef985d5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 54613
      },
      "writtenOn": "2021-11-05T18:27:52Z",
      "side": 1,
      "message": "Since there is float64touint converting arg in the LECall arg list，when processing that convert value it will change the entry block from plain kind block to a control kind block and also add a phi value in that “after” block，so the mem args before and after of that float arg will be splited into different blocks，and unfortunately there is a openDefer which will insert VarDef/VarLive into entry block for keeping some values alive，that VarDef/VarLive sneak into those mem args sequence without maintain dependencies. It‘s not easy to fix the mem dependencies after that happens but start a new block before processing the LECall args is cheaper.",
      "parentUuid": "57b65a23_dc1da809",
      "revId": "7e9d0ece745c0c1df234a98a1922ad2b956645f7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}