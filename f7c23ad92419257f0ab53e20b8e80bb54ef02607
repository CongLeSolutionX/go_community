{
  "comments": [
    {
      "key": {
        "uuid": "50efb36f_c02d7e03",
        "filename": "src/os/os_windows_test.go",
        "patchSetId": 5
      },
      "lineNbr": 125,
      "author": {
        "id": 11631
      },
      "writtenOn": "2016-09-16T04:03:53Z",
      "side": 1,
      "message": "will it be removed on the same time including the fix?",
      "revId": "f7c23ad92419257f0ab53e20b8e80bb54ef02607",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b052afc4_63ae6289",
        "filename": "src/os/os_windows_test.go",
        "patchSetId": 5
      },
      "lineNbr": 125,
      "author": {
        "id": 5070
      },
      "writtenOn": "2016-09-23T06:39:40Z",
      "side": 1,
      "message": "Yes. We will remove this code once fix is in. It is similar to what we do with t.Skip.",
      "parentUuid": "50efb36f_c02d7e03",
      "revId": "f7c23ad92419257f0ab53e20b8e80bb54ef02607",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0b1eea17_3606f82c",
        "filename": "src/os/os_windows_test.go",
        "patchSetId": 5
      },
      "lineNbr": 130,
      "author": {
        "id": 11631
      },
      "writtenOn": "2016-09-16T04:03:53Z",
      "side": 1,
      "message": "I want see os.Readlink here instead of this.\nWe want to fix syscall.Readlink, not os.Stat.\nThis line makes me confusing again.",
      "revId": "f7c23ad92419257f0ab53e20b8e80bb54ef02607",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b052afc4_03abee77",
        "filename": "src/os/os_windows_test.go",
        "patchSetId": 5
      },
      "lineNbr": 130,
      "author": {
        "id": 5070
      },
      "writtenOn": "2016-09-23T06:39:40Z",
      "side": 1,
      "message": "This line came from old TestStatJunctionLink. And os.Stat is calling syscall.Readlink, so we are effectively testing syscall.Readlink here. What exactly do you propose we do here instead of calling os.Stat?",
      "parentUuid": "0b1eea17_3606f82c",
      "revId": "f7c23ad92419257f0ab53e20b8e80bb54ef02607",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e530e7ea_8cec4781",
        "filename": "src/os/os_windows_test.go",
        "patchSetId": 5
      },
      "lineNbr": 130,
      "author": {
        "id": 11631
      },
      "writtenOn": "2016-09-23T17:13:38Z",
      "side": 1,
      "message": "\u003e And os.Stat is calling syscall.Readlink, so we are effectively testing syscall.Readlink here\n\nThat means, readers/reviewers who try to understand this code must have known that os.Stat are implemented on top of os.Readlink. I don\u0027t think that\u0027s a common knowlege nor the spec.\nI bet most of them don\u0027t know a such thing, so they will misunderstand that these tests are just for os.Stat.\nGenerally speaking, the test should be performed against the spec, not the implementation. What you were saying is too much detail for me. The future implementation of os.Stat might not call os.Readlink, so it\u0027s weak for future changes. We can test os.Readlink directly, instead, which is a clear way, I think. \nAnd if you think current tests for os.Stat are poor, you can do after finishing this CL, that\u0027s the different issue.\n\n\u003e What exactly do you propose we do here instead of calling os.Stat?\n\nFor example:\n\ntarget, err :\u003d os.Readlink(link)\nif err !\u003d nil {\n  t.Fatal(err)\n}\n\nif target !\u003d test.expected {\n  t.Errorf(\"Readlink(%s): got %s, want %s\", link, target, test.expected)\n}",
      "parentUuid": "b052afc4_03abee77",
      "revId": "f7c23ad92419257f0ab53e20b8e80bb54ef02607",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0b1eea17_b604c820",
        "filename": "src/os/os_windows_test.go",
        "patchSetId": 5
      },
      "lineNbr": 137,
      "author": {
        "id": 11631
      },
      "writtenOn": "2016-09-16T04:03:53Z",
      "side": 1,
      "message": "Also, this is unreliable. If we want to identify the file, we should use os.SameFile. (but I disagree about using os.Stat)",
      "revId": "f7c23ad92419257f0ab53e20b8e80bb54ef02607",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b052afc4_23a86a78",
        "filename": "src/os/os_windows_test.go",
        "patchSetId": 5
      },
      "lineNbr": 137,
      "author": {
        "id": 5070
      },
      "writtenOn": "2016-09-23T06:39:40Z",
      "side": 1,
      "message": "Again this is old code from TestStatJunctionLink. I think it is fine as is.",
      "parentUuid": "0b1eea17_b604c820",
      "revId": "f7c23ad92419257f0ab53e20b8e80bb54ef02607",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0b1eea17_762350b7",
        "filename": "src/os/os_windows_test.go",
        "patchSetId": 5
      },
      "lineNbr": 145,
      "author": {
        "id": 11631
      },
      "writtenOn": "2016-09-16T04:03:53Z",
      "side": 1,
      "message": "It\u0027s not true. This is not a reparse data.\nI\u0027m not a wordsmith, but XXXBuilder or something.",
      "revId": "f7c23ad92419257f0ab53e20b8e80bb54ef02607",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b052afc4_a3ed3ab6",
        "filename": "src/os/os_windows_test.go",
        "patchSetId": 5
      },
      "lineNbr": 145,
      "author": {
        "id": 5070
      },
      "writtenOn": "2016-09-23T06:39:40Z",
      "side": 1,
      "message": "\u003e It\u0027s not true. This is not a reparse data.\n\nI did not say it is reparse data. I said it \"is used to build reparse data\".\n\n \u003e I\u0027m not a wordsmith, but XXXBuilder or something.\n\nI am not wordsmith myself. I cannot come up with anything better than reparseData. But if you make suggestion better than XXXBuilder I will consider it.",
      "parentUuid": "0b1eea17_762350b7",
      "revId": "f7c23ad92419257f0ab53e20b8e80bb54ef02607",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e530e7ea_6c891bda",
        "filename": "src/os/os_windows_test.go",
        "patchSetId": 5
      },
      "lineNbr": 145,
      "author": {
        "id": 11631
      },
      "writtenOn": "2016-09-23T17:13:38Z",
      "side": 1,
      "message": "So, how about:\n\n// pathBufBuilder builds a data format which is commonly used inside reparse data buffer for representing file paths.\ntype pathBufBuilder struct {\n}\n\n?\n\nI just want to eliminate naming conflicts. I\u0027m not persistent in \u0027how\u0027.",
      "parentUuid": "b052afc4_a3ed3ab6",
      "revId": "f7c23ad92419257f0ab53e20b8e80bb54ef02607",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0b1eea17_d62a2486",
        "filename": "src/os/os_windows_test.go",
        "patchSetId": 5
      },
      "lineNbr": 156,
      "author": {
        "id": 11631
      },
      "writtenOn": "2016-09-16T04:03:53Z",
      "side": 1,
      "message": "how about appendUTF16?",
      "revId": "f7c23ad92419257f0ab53e20b8e80bb54ef02607",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e530e7ea_ec118bb8",
        "filename": "src/os/os_windows_test.go",
        "patchSetId": 5
      },
      "lineNbr": 156,
      "author": {
        "id": 5070
      },
      "writtenOn": "2016-09-23T06:39:40Z",
      "side": 1,
      "message": "I changed to addUTF16s to make it more consistent with others.",
      "parentUuid": "0b1eea17_d62a2486",
      "revId": "f7c23ad92419257f0ab53e20b8e80bb54ef02607",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0b1eea17_b62b288d",
        "filename": "src/os/os_windows_test.go",
        "patchSetId": 5
      },
      "lineNbr": 195,
      "author": {
        "id": 11631
      },
      "writtenOn": "2016-09-16T04:03:53Z",
      "side": 1,
      "message": "Why is this useful? Can you inline it?",
      "revId": "f7c23ad92419257f0ab53e20b8e80bb54ef02607",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b052afc4_c3c5d635",
        "filename": "src/os/os_windows_test.go",
        "patchSetId": 5
      },
      "lineNbr": 195,
      "author": {
        "id": 5070
      },
      "writtenOn": "2016-09-23T06:39:40Z",
      "side": 1,
      "message": "\u003e Why is this useful? \n\nI use this so I can create both \"symlinks\" and \"mount points\" by calling createDirLink.\n\n \u003e Can you inline it?\n\nI am not sure what you propose here.",
      "parentUuid": "0b1eea17_b62b288d",
      "revId": "f7c23ad92419257f0ab53e20b8e80bb54ef02607",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e530e7ea_ec7cebbe",
        "filename": "src/os/os_windows_test.go",
        "patchSetId": 5
      },
      "lineNbr": 195,
      "author": {
        "id": 11631
      },
      "writtenOn": "2016-09-23T17:13:38Z",
      "side": 1,
      "message": "Comments on 221 includes this.",
      "parentUuid": "b052afc4_c3c5d635",
      "revId": "f7c23ad92419257f0ab53e20b8e80bb54ef02607",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0b1eea17_5620d4a8",
        "filename": "src/os/os_windows_test.go",
        "patchSetId": 5
      },
      "lineNbr": 221,
      "author": {
        "id": 11631
      },
      "writtenOn": "2016-09-16T04:03:53Z",
      "side": 1,
      "message": "I assume you were trying to eliminate raw offset calculation. But it\u0027s not clear code to me.\nIt\u0027s too much separating and adding unneeded new types.\n\nI like the code like:\n\n rdbuf :\u003d rdbuf :\u003d make([]byte, syscall.MAXIMUM_REPARSE_DATA_BUFFER_SIZE)\n\n rdb :\u003d (*windows.MountPointReparseDataBuffer(unsafe.Pointer(\u0026rdbuf[0])) // I assumes REPARSE_DATA_BUFFER_HEADER is already embeded into MountPointReparseBuffer here.\n\n // rdb.SubstituteNameOffset \u003d ...\n // ...\n\n // rdbuf \u003d rdbuf[:unsafe.Sizeof(rdb.REPARSE_DATA_BUFFER_HEADER)+rdb.ReparseDataLength]\n\n return createDirLink(link, rdbuf)\n\nSo the flow of the code will be simple.\nallocate buffer \u003d\u003e encode buffer \u003d\u003e use buffer.",
      "revId": "f7c23ad92419257f0ab53e20b8e80bb54ef02607",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b052afc4_63b742d3",
        "filename": "src/os/os_windows_test.go",
        "patchSetId": 5
      },
      "lineNbr": 221,
      "author": {
        "id": 5070
      },
      "writtenOn": "2016-09-23T06:39:40Z",
      "side": 1,
      "message": "\u003e It\u0027s too much separating and adding unneeded new types.\n\nIt is complicated code. Fair enough. But I don\u0027t see easier way to do it. Feel free to propose this bit of code and I will replace mine.\n\n \u003e \n \u003e I like the code like:\n \u003e \n \u003e // I assumes REPARSE_DATA_BUFFER_HEADER is already embeded into\n \u003e MountPointReparseBuffer here.\n\nBut you cannot, because REPARSE_DATA_BUFFER_HEADER does not include MountPointReparseBuffer.",
      "parentUuid": "0b1eea17_5620d4a8",
      "revId": "f7c23ad92419257f0ab53e20b8e80bb54ef02607",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e530e7ea_4c8e5fe4",
        "filename": "src/os/os_windows_test.go",
        "patchSetId": 5
      },
      "lineNbr": 221,
      "author": {
        "id": 11631
      },
      "writtenOn": "2016-09-23T17:13:38Z",
      "side": 1,
      "message": "\u003e But you cannot, because REPARSE_DATA_BUFFER_HEADER does not include MountPointReparseBuffer.\n\nIt\u0027s possible. Please see my comments on reparse_windows.go\nAlso, I feel introducing the helper function is better.\n\nrdbuf :\u003d make([]byte, syscall.MAXIMUM_REPARSE_DATA_BUFFER_SIZE)\n\nn, err :\u003d encodeMountPoint(rdbuf, pathBuf)\nif err !\u003d nil {\n  return err\n}\n\nreturn createDirLink(link, rdbuf[:n])",
      "parentUuid": "b052afc4_63b742d3",
      "revId": "f7c23ad92419257f0ab53e20b8e80bb54ef02607",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0b1eea17_f625a0b6",
        "filename": "src/os/os_windows_test.go",
        "patchSetId": 5
      },
      "lineNbr": 239,
      "author": {
        "id": 11631
      },
      "writtenOn": "2016-09-16T04:03:53Z",
      "side": 1,
      "message": "TestReadlinkJunction or TestReadJunction.",
      "revId": "f7c23ad92419257f0ab53e20b8e80bb54ef02607",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b052afc4_03c44e31",
        "filename": "src/os/os_windows_test.go",
        "patchSetId": 5
      },
      "lineNbr": 239,
      "author": {
        "id": 5070
      },
      "writtenOn": "2016-09-23T06:39:40Z",
      "side": 1,
      "message": "I use term \"Directory Junction\" that mklink uses. I think it is fine as is.",
      "parentUuid": "0b1eea17_f625a0b6",
      "revId": "f7c23ad92419257f0ab53e20b8e80bb54ef02607",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0b1eea17_563734e7",
        "filename": "src/os/os_windows_test.go",
        "patchSetId": 5
      },
      "lineNbr": 242,
      "author": {
        "id": 11631
      },
      "writtenOn": "2016-09-16T04:03:53Z",
      "side": 1,
      "message": "it lacks explaination about this format.",
      "revId": "f7c23ad92419257f0ab53e20b8e80bb54ef02607",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e530e7ea_cc0ecf96",
        "filename": "src/os/os_windows_test.go",
        "patchSetId": 5
      },
      "lineNbr": 242,
      "author": {
        "id": 5070
      },
      "writtenOn": "2016-09-23T06:39:40Z",
      "side": 1,
      "message": "Added comment. I hope it is ok.",
      "parentUuid": "0b1eea17_563734e7",
      "revId": "f7c23ad92419257f0ab53e20b8e80bb54ef02607",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0b1eea17_9630acf6",
        "filename": "src/os/os_windows_test.go",
        "patchSetId": 5
      },
      "lineNbr": 250,
      "author": {
        "id": 11631
      },
      "writtenOn": "2016-09-16T04:03:53Z",
      "side": 1,
      "message": "I prefer to delete it now.",
      "revId": "f7c23ad92419257f0ab53e20b8e80bb54ef02607",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b052afc4_23c14a22",
        "filename": "src/os/os_windows_test.go",
        "patchSetId": 5
      },
      "lineNbr": 250,
      "author": {
        "id": 5070
      },
      "writtenOn": "2016-09-23T06:39:40Z",
      "side": 1,
      "message": "You want to delete test below? Why?",
      "parentUuid": "0b1eea17_9630acf6",
      "revId": "f7c23ad92419257f0ab53e20b8e80bb54ef02607",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e530e7ea_cc792fcd",
        "filename": "src/os/os_windows_test.go",
        "patchSetId": 5
      },
      "lineNbr": 250,
      "author": {
        "id": 11631
      },
      "writtenOn": "2016-09-23T17:13:38Z",
      "side": 1,
      "message": "As I said on the top comment of previous change,\nthe fix for #16145 affects UNC paths which we don\u0027t have related tests yet. So I think we should include tests about UNC paths when/by the time we\u0027ll fix that. However I don\u0027t want to add new kind of tests to this CL now and I want to review UNC tests and this at the same time. Thus I want to postpone it.",
      "parentUuid": "b052afc4_23c14a22",
      "revId": "f7c23ad92419257f0ab53e20b8e80bb54ef02607",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0b1eea17_3640b837",
        "filename": "src/os/os_windows_test.go",
        "patchSetId": 5
      },
      "lineNbr": 332,
      "author": {
        "id": 11631
      },
      "writtenOn": "2016-09-16T04:03:53Z",
      "side": 1,
      "message": "TestReadlinkSymbolicLink, TestReadSymlink or something.",
      "revId": "f7c23ad92419257f0ab53e20b8e80bb54ef02607",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b052afc4_c3ee36b4",
        "filename": "src/os/os_windows_test.go",
        "patchSetId": 5
      },
      "lineNbr": 332,
      "author": {
        "id": 5070
      },
      "writtenOn": "2016-09-23T06:39:40Z",
      "side": 1,
      "message": "Again, I use term \"Directory Symbolic Link\" that mklink uses. I think it is fine as is.",
      "parentUuid": "0b1eea17_3640b837",
      "revId": "f7c23ad92419257f0ab53e20b8e80bb54ef02607",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0b1eea17_163dbcc9",
        "filename": "src/os/os_windows_test.go",
        "patchSetId": 5
      },
      "lineNbr": 354,
      "author": {
        "id": 11631
      },
      "writtenOn": "2016-09-16T04:03:53Z",
      "side": 1,
      "message": "Yes, please. or GetCurrentThread + ImpersonateSelf + RevertToSelf (CL 28010 uses that approach)",
      "revId": "f7c23ad92419257f0ab53e20b8e80bb54ef02607",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b052afc4_e3f33299",
        "filename": "src/os/os_windows_test.go",
        "patchSetId": 5
      },
      "lineNbr": 354,
      "author": {
        "id": 5070
      },
      "writtenOn": "2016-09-23T06:39:40Z",
      "side": 1,
      "message": "\u003e Yes, please. \n\nI think this CL is complicated enough already for that.\n\n \u003e or GetCurrentThread + ImpersonateSelf + RevertToSelf\n \u003e (CL 28010 uses that approach)\n\nI do not see how CL 28010 is any better. This CL changes privileges of the whole process. While CL 28010 change privileges of the random thread within process. I see more confusion caused by CL 28010 approach.\n\nWhy do you think CL 28010 approach is better?",
      "parentUuid": "0b1eea17_163dbcc9",
      "revId": "f7c23ad92419257f0ab53e20b8e80bb54ef02607",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e530e7ea_ac86e3c2",
        "filename": "src/os/os_windows_test.go",
        "patchSetId": 5
      },
      "lineNbr": 354,
      "author": {
        "id": 11631
      },
      "writtenOn": "2016-09-23T17:13:38Z",
      "side": 1,
      "message": "It calls `LockOSThread` and `RevertToSelf` which means that privileges will be reverted before exiting the function body. So no other processes/threads will get side effects.",
      "parentUuid": "b052afc4_e3f33299",
      "revId": "f7c23ad92419257f0ab53e20b8e80bb54ef02607",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0b1eea17_b65688fc",
        "filename": "src/os/os_windows_test.go",
        "patchSetId": 5
      },
      "lineNbr": 366,
      "author": {
        "id": 11631
      },
      "writtenOn": "2016-09-16T04:03:53Z",
      "side": 1,
      "message": "need explain",
      "revId": "f7c23ad92419257f0ab53e20b8e80bb54ef02607",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e530e7ea_ac0b8384",
        "filename": "src/os/os_windows_test.go",
        "patchSetId": 5
      },
      "lineNbr": 366,
      "author": {
        "id": 5070
      },
      "writtenOn": "2016-09-23T06:39:40Z",
      "side": 1,
      "message": "Added comment. I hope it is ok.",
      "parentUuid": "0b1eea17_b65688fc",
      "revId": "f7c23ad92419257f0ab53e20b8e80bb54ef02607",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0b1eea17_763a30d3",
        "filename": "src/os/os_windows_test.go",
        "patchSetId": 5
      },
      "lineNbr": 385,
      "author": {
        "id": 11631
      },
      "writtenOn": "2016-09-16T04:03:53Z",
      "side": 1,
      "message": "supports testFileLinks.",
      "revId": "f7c23ad92419257f0ab53e20b8e80bb54ef02607",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b052afc4_83e83ea7",
        "filename": "src/os/os_windows_test.go",
        "patchSetId": 5
      },
      "lineNbr": 385,
      "author": {
        "id": 5070
      },
      "writtenOn": "2016-09-23T06:39:40Z",
      "side": 1,
      "message": "I do not understand what you suggest I do here.",
      "parentUuid": "0b1eea17_763a30d3",
      "revId": "f7c23ad92419257f0ab53e20b8e80bb54ef02607",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}