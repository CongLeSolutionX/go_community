{
  "comments": [
    {
      "key": {
        "uuid": "dd4a4e2f_72f1d506",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 5015
      },
      "writtenOn": "2020-09-29T00:34:10Z",
      "side": 1,
      "message": "I\u0027m not happy with that, sorry. You should be able to write a test that illustrates the bug locally. If not, perhaps it\u0027s a bug in html/template and that is where the fix should go.\n\nIn any case, if the test is only in html/template, someone working on text/template might break it without realizing.",
      "revId": "8899ee22054decaa6a27be1858267c6a30b3eaa9",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "035c6b6b_e1afa497",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 42173
      },
      "writtenOn": "2020-09-29T17:25:52Z",
      "side": 1,
      "message": "Well, sorry for making your day worse ;-) I agree about the test location, it was a compromise.\n\nI moved the test case to text/template and changed it to reproduce the data race that parallel runs of html/template.Execute() trigger: a write in AddParseTree() and a read in Execute().\n\nIt doesn\u0027t work out 100% (here we go again ;-) as there is now an earlier race between concurrent invocations of just AddParseTree(), which both reads and writes. But running the test without the race detector enabled frequently triggers the same concurrent map read and write crash that was originally observed: a write in AddParseTree() and a read in Execute(). The underlying variable that needs a lock is the same.",
      "parentUuid": "dd4a4e2f_72f1d506",
      "revId": "8899ee22054decaa6a27be1858267c6a30b3eaa9",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}