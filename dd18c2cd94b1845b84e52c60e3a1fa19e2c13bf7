{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "b310c24f_c8a7bf89",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-08-17T02:48:24Z",
      "side": 1,
      "message": "Superseded.",
      "parentUuid": "fd885116_e67d8772",
      "tag": "autogenerated:trybots~beginning",
      "revId": "dd18c2cd94b1845b84e52c60e3a1fa19e2c13bf7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e12473b1_984293c6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-08-17T02:48:24Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003ddd18c2cd",
      "tag": "autogenerated:trybots~beginning",
      "revId": "dd18c2cd94b1845b84e52c60e3a1fa19e2c13bf7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9e1199c1_2fca64fc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-08-17T03:14:05Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "e12473b1_984293c6",
      "tag": "autogenerated:trybots~happy",
      "revId": "dd18c2cd94b1845b84e52c60e3a1fa19e2c13bf7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a7bba77a_64d9eab7",
        "filename": "src/cmd/compile/internal/typecheck/subr.go",
        "patchSetId": 10
      },
      "lineNbr": 88,
      "author": {
        "id": 5200
      },
      "writtenOn": "2021-08-17T21:59:30Z",
      "side": 1,
      "message": "What\u0027s wrong with just the unconditional set here?",
      "revId": "dd18c2cd94b1845b84e52c60e3a1fa19e2c13bf7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b275225f_02b0321c",
        "filename": "src/cmd/compile/internal/walk/walk.go",
        "patchSetId": 10
      },
      "lineNbr": 407,
      "author": {
        "id": 5200
      },
      "writtenOn": "2021-08-17T21:59:30Z",
      "side": 1,
      "message": "I think we would have to handle PPARAM and PPARAMOUT classes as well.\nNot sure about PAUTOHEAP.\n\nOr maybe we only ever call this with autos currently? In which case, an assert that it doesn\u0027t happen would work.",
      "revId": "dd18c2cd94b1845b84e52c60e3a1fa19e2c13bf7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0c96c70e_3d120a6c",
        "filename": "test/live.go",
        "patchSetId": 10
      },
      "lineNbr": 732,
      "author": {
        "id": 5200
      },
      "writtenOn": "2021-08-17T21:59:30Z",
      "side": 1,
      "message": "Hm, the whole point here is to make sure x gets a stack object, even if we pass \u0026x to the map routine. But if we\u0027re making a copy into an autotmp first and passing the address of that autotmp, then the careful recording of who needs a stack object and who doesn\u0027t is kind of pointless. The autotmps for map accesses would never need stack objects.\n\nMaybe we can\u0027t arrange to pass the address of a user variable to the map routines?\nConsider this code:\n\npackage main\n\ntype T struct {\n\ta, b int\n}\n\nfunc f(m map[T]bool) {\n\tvar x T\n\tg(\u0026x)\n\tm[x] \u003d true\n}\n\nfunc h(m map[T]bool, p *T) {\n\tg(p)\n\tm[*p] \u003d true\n}\n\n//go:noescape\nfunc g(t *T)\n\nIn f, the compiler makes an autotmp to pass to the map routine. In h, it doesn\u0027t - it passes p directly to the map routine. Maybe something that calls h, and h gets inlined, would cause a situation where the address of something the user declared (and thus could have its address taken in other ways that require a stack object) could happen.",
      "revId": "dd18c2cd94b1845b84e52c60e3a1fa19e2c13bf7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "85ea320c_9f6ff550",
        "filename": "test/live.go",
        "patchSetId": 10
      },
      "lineNbr": 732,
      "author": {
        "id": 5200
      },
      "writtenOn": "2021-08-17T23:03:56Z",
      "side": 1,
      "message": "Yes, this code:\n\nfunc i(m map[T]bool) {\n\tvar x T\n\th(m, \u0026x)\n}\n\npasses the address of x to both g and to mapassign.",
      "parentUuid": "0c96c70e_3d120a6c",
      "revId": "dd18c2cd94b1845b84e52c60e3a1fa19e2c13bf7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}