{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "4cf3d522_814ca9ab",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 36863
      },
      "writtenOn": "2022-04-13T22:19:18Z",
      "side": 1,
      "message": "TRY\u003daix,ppc64,ppc64le,ppc64lep9",
      "revId": "d0e6214a766b2a97ea7edcfa2237c9d631d29ec4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dcac8053_1b7357e7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-04-13T22:19:37Z",
      "side": 1,
      "message": "SlowBots beginning. Status page: https://farmer.golang.org/try?commit\u003dd0e6214a",
      "tag": "autogenerated:trybots~beginning",
      "revId": "d0e6214a766b2a97ea7edcfa2237c9d631d29ec4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8dfeadc9_9eb33c2f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-04-13T22:26:56Z",
      "side": 1,
      "message": "Build is still in progress... Status page: https://farmer.golang.org/try?commit\u003dd0e6214a\nFailed on android-amd64-emu: https://storage.googleapis.com/go-build-log/d0e6214a/android-amd64-emu_64568372.log\nOther builds still in progress; subsequent failure notices suppressed until final report.\n\nConsult https://build.golang.org/ to see whether they are new failures. Keep in mind that TryBots currently test *exactly* your git commit, without rebasing. If your commit\u0027s git parent is old, the failure might\u0027ve already been fixed.\n",
      "parentUuid": "dcac8053_1b7357e7",
      "tag": "autogenerated:trybots~progress",
      "revId": "d0e6214a766b2a97ea7edcfa2237c9d631d29ec4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "029d511a_20241278",
        "filename": "src/cmd/link/internal/ppc64/asm.go",
        "patchSetId": 1
      },
      "lineNbr": 830,
      "author": {
        "id": 36863
      },
      "writtenOn": "2022-04-13T22:25:52Z",
      "side": 1,
      "message": "The expected behavior when modifying a symbol wasn\u0027t clear to me (or if this is really what I should be doing). I\u0027ll adjust this based on feedback.",
      "range": {
        "startLine": 826,
        "startChar": 3,
        "endLine": 830,
        "endChar": 58
      },
      "revId": "d0e6214a766b2a97ea7edcfa2237c9d631d29ec4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c4f46bf6_39b33bd0",
        "filename": "src/cmd/link/internal/ppc64/asm.go",
        "patchSetId": 1
      },
      "lineNbr": 830,
      "author": {
        "id": 13315
      },
      "writtenOn": "2022-04-13T23:39:55Z",
      "side": 1,
      "message": "Symbol updater probably should keep the attributes that are coded in the object file. I think loader.cloneToExternal should do that.\n\nOn the other hand, I\u0027m not sure we should check the shared attribute on symbols at all. I think the shared attribute should be set either for all Go objects (in PIE and a few other build modes) or none. Do we need to handle the case that some symbol has shared attribute but some others don\u0027t?",
      "parentUuid": "029d511a_20241278",
      "range": {
        "startLine": 826,
        "startChar": 3,
        "endLine": 830,
        "endChar": 58
      },
      "revId": "d0e6214a766b2a97ea7edcfa2237c9d631d29ec4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "85a7e567_5b8bd441",
        "filename": "src/cmd/link/internal/ppc64/asm.go",
        "patchSetId": 1
      },
      "lineNbr": 830,
      "author": {
        "id": 36863
      },
      "writtenOn": "2022-04-14T13:40:44Z",
      "side": 1,
      "message": "It happens that trampolines aren\u0027t marked as shared, so R_CALLPOWER is correctly resolved as not having a local-entry.\n\nIt would be nicer to support a symbol attribute like ELF\u0027s local entry on PPC64 so we don\u0027t need to use heuristics. It seemed like a fairly invasive change to encode such an attribute at the time, maybe it is time to revisit that (ISA3.1 PC-rel addressing will further complicate those heuristics).\n\nMaybe checking for TOC regeneration at the start of the target text symbol is a more reliable mechanism.",
      "parentUuid": "c4f46bf6_39b33bd0",
      "range": {
        "startLine": 826,
        "startChar": 3,
        "endLine": 830,
        "endChar": 58
      },
      "revId": "d0e6214a766b2a97ea7edcfa2237c9d631d29ec4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "079438b0_0c59ef35",
        "filename": "src/cmd/link/internal/ppc64/asm.go",
        "patchSetId": 1
      },
      "lineNbr": 830,
      "author": {
        "id": 36863
      },
      "writtenOn": "2022-04-14T16:38:27Z",
      "side": 1,
      "message": "Hrm, checking for TOC regeneration isn\u0027t reliable at the point where R_CALLPOWER is resolved as the target symbol data may be freed after it is written.",
      "parentUuid": "85a7e567_5b8bd441",
      "range": {
        "startLine": 826,
        "startChar": 3,
        "endLine": 830,
        "endChar": 58
      },
      "revId": "d0e6214a766b2a97ea7edcfa2237c9d631d29ec4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}