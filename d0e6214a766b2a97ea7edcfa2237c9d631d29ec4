{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "4cf3d522_814ca9ab",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 36863
      },
      "writtenOn": "2022-04-13T22:19:18Z",
      "side": 1,
      "message": "TRY\u003daix,ppc64,ppc64le,ppc64lep9",
      "revId": "d0e6214a766b2a97ea7edcfa2237c9d631d29ec4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dcac8053_1b7357e7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-04-13T22:19:37Z",
      "side": 1,
      "message": "SlowBots beginning. Status page: https://farmer.golang.org/try?commit\u003dd0e6214a",
      "tag": "autogenerated:trybots~beginning",
      "revId": "d0e6214a766b2a97ea7edcfa2237c9d631d29ec4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8dfeadc9_9eb33c2f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-04-13T22:26:56Z",
      "side": 1,
      "message": "Build is still in progress... Status page: https://farmer.golang.org/try?commit\u003dd0e6214a\nFailed on android-amd64-emu: https://storage.googleapis.com/go-build-log/d0e6214a/android-amd64-emu_64568372.log\nOther builds still in progress; subsequent failure notices suppressed until final report.\n\nConsult https://build.golang.org/ to see whether they are new failures. Keep in mind that TryBots currently test *exactly* your git commit, without rebasing. If your commit\u0027s git parent is old, the failure might\u0027ve already been fixed.\n",
      "parentUuid": "dcac8053_1b7357e7",
      "tag": "autogenerated:trybots~progress",
      "revId": "d0e6214a766b2a97ea7edcfa2237c9d631d29ec4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "029d511a_20241278",
        "filename": "src/cmd/link/internal/ppc64/asm.go",
        "patchSetId": 1
      },
      "lineNbr": 830,
      "author": {
        "id": 36863
      },
      "writtenOn": "2022-04-13T22:25:52Z",
      "side": 1,
      "message": "The expected behavior when modifying a symbol wasn\u0027t clear to me (or if this is really what I should be doing). I\u0027ll adjust this based on feedback.",
      "range": {
        "startLine": 826,
        "startChar": 3,
        "endLine": 830,
        "endChar": 58
      },
      "revId": "d0e6214a766b2a97ea7edcfa2237c9d631d29ec4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c4f46bf6_39b33bd0",
        "filename": "src/cmd/link/internal/ppc64/asm.go",
        "patchSetId": 1
      },
      "lineNbr": 830,
      "author": {
        "id": 13315
      },
      "writtenOn": "2022-04-13T23:39:55Z",
      "side": 1,
      "message": "Symbol updater probably should keep the attributes that are coded in the object file. I think loader.cloneToExternal should do that.\n\nOn the other hand, I\u0027m not sure we should check the shared attribute on symbols at all. I think the shared attribute should be set either for all Go objects (in PIE and a few other build modes) or none. Do we need to handle the case that some symbol has shared attribute but some others don\u0027t?",
      "parentUuid": "029d511a_20241278",
      "range": {
        "startLine": 826,
        "startChar": 3,
        "endLine": 830,
        "endChar": 58
      },
      "revId": "d0e6214a766b2a97ea7edcfa2237c9d631d29ec4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "85a7e567_5b8bd441",
        "filename": "src/cmd/link/internal/ppc64/asm.go",
        "patchSetId": 1
      },
      "lineNbr": 830,
      "author": {
        "id": 36863
      },
      "writtenOn": "2022-04-14T13:40:44Z",
      "side": 1,
      "message": "It happens that trampolines aren\u0027t marked as shared, so R_CALLPOWER is correctly resolved as not having a local-entry.\n\nIt would be nicer to support a symbol attribute like ELF\u0027s local entry on PPC64 so we don\u0027t need to use heuristics. It seemed like a fairly invasive change to encode such an attribute at the time, maybe it is time to revisit that (ISA3.1 PC-rel addressing will further complicate those heuristics).\n\nMaybe checking for TOC regeneration at the start of the target text symbol is a more reliable mechanism.",
      "parentUuid": "c4f46bf6_39b33bd0",
      "range": {
        "startLine": 826,
        "startChar": 3,
        "endLine": 830,
        "endChar": 58
      },
      "revId": "d0e6214a766b2a97ea7edcfa2237c9d631d29ec4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "079438b0_0c59ef35",
        "filename": "src/cmd/link/internal/ppc64/asm.go",
        "patchSetId": 1
      },
      "lineNbr": 830,
      "author": {
        "id": 36863
      },
      "writtenOn": "2022-04-14T16:38:27Z",
      "side": 1,
      "message": "Hrm, checking for TOC regeneration isn\u0027t reliable at the point where R_CALLPOWER is resolved as the target symbol data may be freed after it is written.",
      "parentUuid": "85a7e567_5b8bd441",
      "range": {
        "startLine": 826,
        "startChar": 3,
        "endLine": 830,
        "endChar": 58
      },
      "revId": "d0e6214a766b2a97ea7edcfa2237c9d631d29ec4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "38f95ca2_16ae970f",
        "filename": "src/cmd/link/internal/ppc64/asm.go",
        "patchSetId": 1
      },
      "lineNbr": 830,
      "author": {
        "id": 13315
      },
      "writtenOn": "2022-04-14T19:20:01Z",
      "side": 1,
      "message": "Yeah, we could definitely add an attribute if this is necessary (and of course not in this CL). My question is, do we need a per-symbol attribute? Or it is all or nothing?\n\nI can look into fixing the symbol updater to preserve attributes.",
      "parentUuid": "079438b0_0c59ef35",
      "range": {
        "startLine": 826,
        "startChar": 3,
        "endLine": 830,
        "endChar": 58
      },
      "revId": "d0e6214a766b2a97ea7edcfa2237c9d631d29ec4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eed01537_6edf015f",
        "filename": "src/cmd/link/internal/ppc64/asm.go",
        "patchSetId": 1
      },
      "lineNbr": 830,
      "author": {
        "id": 36863
      },
      "writtenOn": "2022-04-14T20:28:41Z",
      "side": 1,
      "message": "It is essentially all-or-nothing (the duff machines being the only exceptions). per-symbol seems like substantial overhead to catch the few exceptions in go objects.\n\nI assume the go tooling prohibits mixing of go object compiled with different buildmodes and GOPPC64 flags too?",
      "parentUuid": "38f95ca2_16ae970f",
      "range": {
        "startLine": 826,
        "startChar": 3,
        "endLine": 830,
        "endChar": 58
      },
      "revId": "d0e6214a766b2a97ea7edcfa2237c9d631d29ec4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "13eed7b8_dc79770b",
        "filename": "src/cmd/link/internal/ppc64/asm.go",
        "patchSetId": 1
      },
      "lineNbr": 830,
      "author": {
        "id": 13315
      },
      "writtenOn": "2022-04-14T20:39:20Z",
      "side": 1,
      "message": "Thanks. Then could we do a check on build mode instead? (Probably special-casing Duff\u0027s devices.)\n\nYes, the go command always build things with consistent flags. Directly invoking the linker with a bunch of .o\u0027s with mixed flags is unsupported.",
      "parentUuid": "eed01537_6edf015f",
      "range": {
        "startLine": 826,
        "startChar": 3,
        "endLine": 830,
        "endChar": 58
      },
      "revId": "d0e6214a766b2a97ea7edcfa2237c9d631d29ec4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a27bebfb_8979df27",
        "filename": "src/cmd/link/internal/ppc64/asm.go",
        "patchSetId": 1
      },
      "lineNbr": 830,
      "author": {
        "id": 36863
      },
      "writtenOn": "2022-04-14T21:43:56Z",
      "side": 1,
      "message": "Almost, the linker generated symbols (plt stubs, trampolines, glink) do not have a distinct local entry. Checking for those cases seems more frail (unless I\u0027ve overlooked such a check).",
      "parentUuid": "13eed7b8_dc79770b",
      "range": {
        "startLine": 826,
        "startChar": 3,
        "endLine": 830,
        "endChar": 58
      },
      "revId": "d0e6214a766b2a97ea7edcfa2237c9d631d29ec4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a6944e4a_5a6d2294",
        "filename": "src/cmd/link/internal/ppc64/asm.go",
        "patchSetId": 1
      },
      "lineNbr": 830,
      "author": {
        "id": 13315
      },
      "writtenOn": "2022-04-15T17:10:29Z",
      "side": 1,
      "message": "Interesting. Do those functions need different entires? They are either always called locally or always non-locally, right? We can keep using the shared flag in this CL and think of better solution.\n\nDoes CL 400574 help preserve the flag? Thanks.",
      "parentUuid": "a27bebfb_8979df27",
      "range": {
        "startLine": 826,
        "startChar": 3,
        "endLine": 830,
        "endChar": 58
      },
      "revId": "d0e6214a766b2a97ea7edcfa2237c9d631d29ec4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7e80114d_cb209b4a",
        "filename": "src/cmd/link/internal/ppc64/asm.go",
        "patchSetId": 1
      },
      "lineNbr": 830,
      "author": {
        "id": 36863
      },
      "writtenOn": "2022-04-15T19:01:44Z",
      "side": 1,
      "message": "None of the current linker generated functions from the ppc64 code need them. It seems there is some plumbing already for using a localentry (for external objects), maybe that can be expanded.\n\nCL 400574 resolves the need for explicitly preserving the Shared attribute here.",
      "parentUuid": "a6944e4a_5a6d2294",
      "range": {
        "startLine": 826,
        "startChar": 3,
        "endLine": 830,
        "endChar": 58
      },
      "revId": "d0e6214a766b2a97ea7edcfa2237c9d631d29ec4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "999943a9_e09455d1",
        "filename": "src/cmd/link/internal/ppc64/asm.go",
        "patchSetId": 1
      },
      "lineNbr": 830,
      "author": {
        "id": 13315
      },
      "writtenOn": "2022-04-15T19:02:42Z",
      "side": 1,
      "message": "Thanks.",
      "parentUuid": "7e80114d_cb209b4a",
      "range": {
        "startLine": 826,
        "startChar": 3,
        "endLine": 830,
        "endChar": 58
      },
      "revId": "d0e6214a766b2a97ea7edcfa2237c9d631d29ec4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3910a511_f46133f9",
        "filename": "src/cmd/link/internal/ppc64/asm.go",
        "patchSetId": 1
      },
      "lineNbr": 830,
      "author": {
        "id": 36863
      },
      "writtenOn": "2022-04-19T15:08:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "999943a9_e09455d1",
      "range": {
        "startLine": 826,
        "startChar": 3,
        "endLine": 830,
        "endChar": 58
      },
      "revId": "d0e6214a766b2a97ea7edcfa2237c9d631d29ec4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}