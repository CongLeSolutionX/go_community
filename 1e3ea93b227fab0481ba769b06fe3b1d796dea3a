{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "df010b40_52276517",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5206
      },
      "writtenOn": "2023-05-09T00:41:30Z",
      "side": 1,
      "message": "Thanks, but I don\u0027t think this is worth doing.  Is there even a measurable performance difference for the normal case of a small number of errors?",
      "revId": "1e3ea93b227fab0481ba769b06fe3b1d796dea3a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f4cff67c_f7c4f183",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5305
      },
      "writtenOn": "2023-05-16T15:01:54Z",
      "side": 1,
      "message": "There will be one less allocation for the case of one error, where this avoids copying that error\u0027s text. I\u0027d expect the difference in that case to be measurable, although I don\u0027t know if it\u0027s worth optimizing for.",
      "parentUuid": "df010b40_52276517",
      "revId": "1e3ea93b227fab0481ba769b06fe3b1d796dea3a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "264a4035_2dd37e8d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 62853
      },
      "writtenOn": "2023-05-17T14:39:28Z",
      "side": 1,
      "message": "For the case of one error, I did a simple test. This error is created from a string of length 1024.\n\n```text\ngoos: darwin\ngoarch: arm64\nBenchmark_Old_Error-8            5531764               208.1 ns/op          2048 B/op          2 allocs/op\nBenchmark_New_Error-8           510634675                2.181 ns/op           0 B/op          0 allocs/op\n```",
      "parentUuid": "f4cff67c_f7c4f183",
      "revId": "1e3ea93b227fab0481ba769b06fe3b1d796dea3a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "585c6d5a_897fa16f",
        "filename": "src/errors/join.go",
        "patchSetId": 1
      },
      "lineNbr": 41,
      "author": {
        "id": 5206
      },
      "writtenOn": "2023-05-09T00:41:30Z",
      "side": 1,
      "message": "Why is this a good idea?  Why not just do something reasonable for len(e.errs) \u003d\u003d 0, as the current code does?",
      "revId": "1e3ea93b227fab0481ba769b06fe3b1d796dea3a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8e8991dd_4e3ef04b",
        "filename": "src/errors/join.go",
        "patchSetId": 1
      },
      "lineNbr": 41,
      "author": {
        "id": 62853
      },
      "writtenOn": "2023-05-15T12:50:08Z",
      "side": 1,
      "message": "\"Join returns nil if every value in errs is nil.\"\n\nThe comment above is from errors.Join.\nSo the return of errors.Join has two cases:\n1. nil, the string representation is \"\u003cnil\u003e\".\n2. a *joinError, the \"errs\" in it must not be empty.\n\nIt\u0027s unnecessary to handle the empty errs of e, even though it seems unreasonable.",
      "parentUuid": "585c6d5a_897fa16f",
      "revId": "1e3ea93b227fab0481ba769b06fe3b1d796dea3a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b17e5b1e_510682a2",
        "filename": "src/errors/join.go",
        "patchSetId": 1
      },
      "lineNbr": 41,
      "author": {
        "id": 5206
      },
      "writtenOn": "2023-05-16T05:08:04Z",
      "side": 1,
      "message": "OK, thanks, but I still don\u0027t think this is worth doing.",
      "parentUuid": "8e8991dd_4e3ef04b",
      "revId": "1e3ea93b227fab0481ba769b06fe3b1d796dea3a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}