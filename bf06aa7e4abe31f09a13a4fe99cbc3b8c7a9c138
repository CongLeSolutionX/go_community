{
  "comments": [
    {
      "key": {
        "uuid": "00d46d34_0fdb06d9",
        "filename": "src/go/ast/import.go",
        "patchSetId": 3
      },
      "lineNbr": 113,
      "author": {
        "id": 5210
      },
      "writtenOn": "2019-03-06T20:57:22Z",
      "side": 1,
      "message": "factor out firstLine as well (declare before lastLine) and use on line 118\n\nbut see comment below first",
      "range": {
        "startLine": 113,
        "startChar": 1,
        "endLine": 113,
        "endChar": 9
      },
      "revId": "bf06aa7e4abe31f09a13a4fe99cbc3b8c7a9c138",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6911363a_cce49829",
        "filename": "src/go/ast/import.go",
        "patchSetId": 3
      },
      "lineNbr": 113,
      "author": {
        "id": 24096
      },
      "writtenOn": "2019-03-07T04:51:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "00d46d34_0fdb06d9",
      "range": {
        "startLine": 113,
        "startChar": 1,
        "endLine": 113,
        "endChar": 9
      },
      "revId": "bf06aa7e4abe31f09a13a4fe99cbc3b8c7a9c138",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5bb45567_6b3ffdba",
        "filename": "src/go/ast/import.go",
        "patchSetId": 3
      },
      "lineNbr": 117,
      "author": {
        "id": 5210
      },
      "writtenOn": "2019-03-06T20:57:22Z",
      "side": 1,
      "message": "s/at/on/",
      "range": {
        "startLine": 117,
        "startChar": 41,
        "endLine": 117,
        "endChar": 43
      },
      "revId": "bf06aa7e4abe31f09a13a4fe99cbc3b8c7a9c138",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e1817c08_6a63e99d",
        "filename": "src/go/ast/import.go",
        "patchSetId": 3
      },
      "lineNbr": 117,
      "author": {
        "id": 24096
      },
      "writtenOn": "2019-03-07T04:51:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5bb45567_6b3ffdba",
      "range": {
        "startLine": 117,
        "startChar": 41,
        "endLine": 117,
        "endChar": 43
      },
      "revId": "bf06aa7e4abe31f09a13a4fe99cbc3b8c7a9c138",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "217d5926_4da18e04",
        "filename": "src/go/ast/import.go",
        "patchSetId": 3
      },
      "lineNbr": 118,
      "author": {
        "id": 5210
      },
      "writtenOn": "2019-03-06T20:57:22Z",
      "side": 1,
      "message": "why is the g.Pos() \u003c f.Package needed?\n\nAlso, now that I read this again more carefully, I fail to see why we need to compare lines here. Why is it not sufficient to compare positions?",
      "range": {
        "startLine": 118,
        "startChar": 17,
        "endLine": 118,
        "endChar": 24
      },
      "revId": "bf06aa7e4abe31f09a13a4fe99cbc3b8c7a9c138",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b9e374ef_3bc73c81",
        "filename": "src/go/ast/import.go",
        "patchSetId": 3
      },
      "lineNbr": 118,
      "author": {
        "id": 24096
      },
      "writtenOn": "2019-03-07T04:51:41Z",
      "side": 1,
      "message": "Right, so this is the most important part of the CL. Let me explain.\n\n\u003e Why is it not sufficient to compare positions?\n\nThis loop computes the start and end indices of the comments to take and compare with import specs. The issue arises when a block comment appears on the left of the first spec on the same line. If we just compare positions, then while sorting, the block comment is not considered and remains on the same line which is incorrect. For eg- \n\nimport (\n  /* comment */ io1 \"io\"\n  \"fmt\" // for Printf\n)\n\nwould have become\n\nimport (\n  /* comment */ \"fmt\" // for Printf\n  io1 \"io\"\n)\n\nwith this logic. To fix this, we need to include \"/* comment */\" in our comment slice.\n\nAnd then it becomes\n\nimport (\n  \"fmt\" // for Printf\n  /* comment */ io1 \"io\"\n)\n\nYou can look at the tests to see this in action.\n\n\u003e why is the g.Pos() \u003c f.Package needed?\n\nYeah, this one stumped me too. Initially, I was just comparing line nos. and that was it. But then TestAll failed. Apparently, the line numbering starts only from the package statement. And for comments, it gets reset if there are comments before the package statement ! This was an eye-opener to me :)\n\nFor eg. (The line nos. are for the comment tokens)\n\n// one -- L1\n// two -- L2\npackage main\n\nimport (\n  \"fmt\" // for Printf -- L4 The counter got reset after the package statement !\n)\n\nSo when I was considering all comments, the line no. calculation was getting messed up, and some files in TestAll were failing the idempotency test. Hence we ignore comments before the package statement.\n\nI tried to explain it in a comment but perhaps it was too concise ?",
      "parentUuid": "217d5926_4da18e04",
      "range": {
        "startLine": 118,
        "startChar": 17,
        "endLine": 118,
        "endChar": 24
      },
      "revId": "bf06aa7e4abe31f09a13a4fe99cbc3b8c7a9c138",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6acdce7f_2a7e18e1",
        "filename": "src/go/ast/import.go",
        "patchSetId": 3
      },
      "lineNbr": 118,
      "author": {
        "id": 5210
      },
      "writtenOn": "2019-03-11T21:27:43Z",
      "side": 1,
      "message": "I am not convinced by your line of arguments:\n\n1) Regarding the block comment that is ignored: It is only ignored if you use as start position the position of the first spec. If you use the position of the beginning of the line, it will work. It will require a bit more work to find that,\nbut in turn you can avoid computing the line for each comment: Given a position pos, and a token.File f, one can get the start of the line position via f.LineStart(fset.Position(pos).Line); and one can get the file via fset.File(pos). Thus, in this code is should be something like:\n\nbeg :\u003d fset.File(pos[0].Start).LineStart(firstLine)\nend :\u003d fset.File(pos[len(pos)-1].End).LineStart(lastLine+1) // beginning of next line\n\nand then one can just compare against beg and end (see below). (It probably makes sense to factor out begSpecs \u003d pos[0].Start and endSpecs \u003d pos[len(pos)-1 rather than firstLine and lastLine, and use those to compute beg and end. It may make a difference because there can be quite a few comments in a program file.\n\n2) Regarding the lines being reset after the package statement: That seems very odd. Does this happen in this code somewhere? The AST\u0027s line numbers shouldn\u0027t magically be reset after a package statement. That would be a bug. Can you write a simple reproducible test case that shows that this is indeed the case? I think this needs to be traced down, we shouldn\u0027t add spurious work-arounds for something that shouldn\u0027t happen in the first place.\n\nI\u0027m sorry for harping on this small piece of code, but this loop should in principle look like this:\n\ncstart :\u003d len(f.Comments)\ncend :\u003d 0\nfor i, g :\u003d range f.Comments {\n   if beg \u003c\u003d g.Pos() \u0026\u0026 g.End() \u003c end {\n      // comment is within the range [beg, end[ of import declarations\n      if i \u003c cstart {\n         cstart \u003d i\n      }\n      if i \u003e cend {\n         cend \u003d i\n   }\n}\n\nThe algorithm is clear:\nfor all comments do\n   check if they are in bounds\n   if they are in bounds then\n      lower the lower comment index if needed\n      increase the upper comment index if needed\n\nAnything beyond this needs to justified somehow. What we have at the moment appears to work, but it\u0027s not clear to me why it\u0027s more complicated than this. Admittedly, the difference is small: instead of positions, the code compares lines, and then there\u0027s some additional work-arounds which seem odd. But we should really get to the bottom of this because the next time somebody is looking at this code, maybe 1/2 year from now, they will scratch their heads trying to reason exactly why things are as they are.",
      "parentUuid": "b9e374ef_3bc73c81",
      "range": {
        "startLine": 118,
        "startChar": 17,
        "endLine": 118,
        "endChar": 24
      },
      "revId": "bf06aa7e4abe31f09a13a4fe99cbc3b8c7a9c138",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ca8bb34b_47dbb420",
        "filename": "src/go/ast/import.go",
        "patchSetId": 3
      },
      "lineNbr": 118,
      "author": {
        "id": 24096
      },
      "writtenOn": "2019-03-12T05:56:27Z",
      "side": 1,
      "message": "Oh nice ! I did not know about the LineStart API.\n\nYour new logic did not work exactly. In some cases, both Pos() and End() were not satisfying at the same time, so cstart and cend was coming out incorrect. The old logic with the new pos values work fine, but the TestAll failed again. Possibly due to the line nos. getting reset. I updated the code with this, so you can see where it\u0027s going wrong.\n\n\u003e That would be a bug. Can you write a simple reproducible test case that shows that this is indeed the case?\n\nYep of course. Filed https://github.com/golang/go/issues/30761",
      "parentUuid": "6acdce7f_2a7e18e1",
      "range": {
        "startLine": 118,
        "startChar": 17,
        "endLine": 118,
        "endChar": 24
      },
      "revId": "bf06aa7e4abe31f09a13a4fe99cbc3b8c7a9c138",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "91959c9a_eb6efedc",
        "filename": "src/go/ast/import.go",
        "patchSetId": 3
      },
      "lineNbr": 124,
      "author": {
        "id": 5210
      },
      "writtenOn": "2019-03-06T20:57:22Z",
      "side": 1,
      "message": "Here would should be able to only compare positions as well, but it\u0027s a bit more tricky (computing the line is not cheap). Ok for now.",
      "range": {
        "startLine": 124,
        "startChar": 24,
        "endLine": 124,
        "endChar": 25
      },
      "revId": "bf06aa7e4abe31f09a13a4fe99cbc3b8c7a9c138",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8520fe72_550f81c2",
        "filename": "src/go/ast/import.go",
        "patchSetId": 3
      },
      "lineNbr": 124,
      "author": {
        "id": 24096
      },
      "writtenOn": "2019-03-07T04:51:41Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "91959c9a_eb6efedc",
      "range": {
        "startLine": 124,
        "startChar": 24,
        "endLine": 124,
        "endChar": 25
      },
      "revId": "bf06aa7e4abe31f09a13a4fe99cbc3b8c7a9c138",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cb22aabe_69d62b9d",
        "filename": "src/go/ast/import.go",
        "patchSetId": 3
      },
      "lineNbr": 142,
      "author": {
        "id": 5210
      },
      "writtenOn": "2019-03-06T20:57:22Z",
      "side": 1,
      "message": "s/at/on/\n\n(on the left)",
      "revId": "bf06aa7e4abe31f09a13a4fe99cbc3b8c7a9c138",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8aafda0d_74fd8b24",
        "filename": "src/go/ast/import.go",
        "patchSetId": 3
      },
      "lineNbr": 142,
      "author": {
        "id": 5210
      },
      "writtenOn": "2019-03-06T20:57:22Z",
      "side": 1,
      "message": "s/also//\n\n(it can only appear in one place)",
      "range": {
        "startLine": 142,
        "startChar": 53,
        "endLine": 142,
        "endChar": 57
      },
      "revId": "bf06aa7e4abe31f09a13a4fe99cbc3b8c7a9c138",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4fa074e9_aebf152d",
        "filename": "src/go/ast/import.go",
        "patchSetId": 3
      },
      "lineNbr": 142,
      "author": {
        "id": 24096
      },
      "writtenOn": "2019-03-07T04:51:41Z",
      "side": 1,
      "message": "This was in continuation from the first comment of the if statement - \"A block comment can appear before the first import spec\". So then it naturally sounds that it can \"also\" appear on the left of an import spec. Anyways, removed it.",
      "parentUuid": "8aafda0d_74fd8b24",
      "range": {
        "startLine": 142,
        "startChar": 53,
        "endLine": 142,
        "endChar": 57
      },
      "revId": "bf06aa7e4abe31f09a13a4fe99cbc3b8c7a9c138",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "438cfaab_aae26514",
        "filename": "src/go/ast/import.go",
        "patchSetId": 3
      },
      "lineNbr": 142,
      "author": {
        "id": 24096
      },
      "writtenOn": "2019-03-07T04:51:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cb22aabe_69d62b9d",
      "revId": "bf06aa7e4abe31f09a13a4fe99cbc3b8c7a9c138",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}