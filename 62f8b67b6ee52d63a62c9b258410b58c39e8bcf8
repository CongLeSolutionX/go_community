{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "c8c16be3_9e715452",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-05-13T21:40:04Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003d62f8b67b",
      "tag": "autogenerated:trybots~beginning",
      "revId": "62f8b67b6ee52d63a62c9b258410b58c39e8bcf8",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "32105d1a_06b50d93",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-05-13T21:51:32Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "c8c16be3_9e715452",
      "tag": "autogenerated:trybots~happy",
      "revId": "62f8b67b6ee52d63a62c9b258410b58c39e8bcf8",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "de0e7ed0_93abc350",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 28783
      },
      "writtenOn": "2021-05-13T21:59:14Z",
      "side": 1,
      "message": "Moved this, the main export/import change to dev.typeparams.  I was able to put the instantiated functions/methods in the source package now, by adding an extra fix in writeType() based on advice from Cherry.  \n\nResponded to all your \u0026 Matthew\u0027s comments so far.  No rush on this review, but let me know if you want to have another GVC session to go over it.  I\u0027m happy with the current state of the CL, and have several more CLs ready that address some limitations and add a bunch more tests.\n\nThe following CL in the stack adds the needed export/import version.  I kept it separate from the current CL because it\u0027s somewhat separate implementation issues, but let me know if you just want me to merge that CL into this one.",
      "revId": "62f8b67b6ee52d63a62c9b258410b58c39e8bcf8",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "986d3c3d_77a8b659",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 28783
      },
      "writtenOn": "2021-05-14T00:15:38Z",
      "side": 1,
      "message": "Keith: This is the big export/import CL of generics that is ready to checkin.  I have several follow up CLs that add a bunch more tests (with a few needed fixes) and export add ability to export/import a few missing node types (e.g. OFUNCINST, OSELRECV2).  Comments welcome.\n\nImmediately following CL in the stack adds in the needed export version, let me know what you think.  I separate it out just to make this CL slightly smaller.",
      "revId": "62f8b67b6ee52d63a62c9b258410b58c39e8bcf8",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "03890f63_9aeeb5b6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5200
      },
      "writtenOn": "2021-05-14T16:56:41Z",
      "side": 1,
      "message": "Looks pretty good. I\u0027m less sure about the non-compiler importer stuff.\n",
      "revId": "62f8b67b6ee52d63a62c9b258410b58c39e8bcf8",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c631b4f5_86e45cca",
        "filename": "src/cmd/compile/internal/importer/iimport.go",
        "patchSetId": 1
      },
      "lineNbr": 603,
      "author": {
        "id": 5200
      },
      "writtenOn": "2021-05-14T16:56:41Z",
      "side": 1,
      "message": "import",
      "range": {
        "startLine": 603,
        "startChar": 9,
        "endLine": 603,
        "endChar": 15
      },
      "revId": "62f8b67b6ee52d63a62c9b258410b58c39e8bcf8",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f3056332_8f4a7712",
        "filename": "src/cmd/compile/internal/importer/iimport.go",
        "patchSetId": 1
      },
      "lineNbr": 603,
      "author": {
        "id": 28783
      },
      "writtenOn": "2021-05-16T00:41:44Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c631b4f5_86e45cca",
      "range": {
        "startLine": 603,
        "startChar": 9,
        "endLine": 603,
        "endChar": 15
      },
      "revId": "62f8b67b6ee52d63a62c9b258410b58c39e8bcf8",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "09fcd3f4_536283fb",
        "filename": "src/cmd/compile/internal/importer/iimport.go",
        "patchSetId": 1
      },
      "lineNbr": 622,
      "author": {
        "id": 5200
      },
      "writtenOn": "2021-05-14T16:56:41Z",
      "side": 1,
      "message": "Is a subscript of 0 allowed? Might be safer to use startsub \u003e\u003d 0 here.",
      "revId": "62f8b67b6ee52d63a62c9b258410b58c39e8bcf8",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "26154263_31e22900",
        "filename": "src/cmd/compile/internal/importer/iimport.go",
        "patchSetId": 1
      },
      "lineNbr": 622,
      "author": {
        "id": 28783
      },
      "writtenOn": "2021-05-16T00:41:44Z",
      "side": 1,
      "message": "I think types2.nextId() always starts at 1, but that could change, so yes, seems reasonable to change to \u0027startsub \u003e\u003d 0\u0027.  Thanks!",
      "parentUuid": "09fcd3f4_536283fb",
      "revId": "62f8b67b6ee52d63a62c9b258410b58c39e8bcf8",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ccff6ece_94131f7e",
        "filename": "src/cmd/compile/internal/typecheck/iexport.go",
        "patchSetId": 1
      },
      "lineNbr": 868,
      "author": {
        "id": 5200
      },
      "writtenOn": "2021-05-14T16:56:41Z",
      "side": 1,
      "message": "These wouldn\u0027t be \"new\" here, right? They would be a type param from an outer scope.",
      "range": {
        "startLine": 868,
        "startChar": 65,
        "endLine": 868,
        "endChar": 68
      },
      "revId": "62f8b67b6ee52d63a62c9b258410b58c39e8bcf8",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c37fdd09_4584fc47",
        "filename": "src/cmd/compile/internal/typecheck/iexport.go",
        "patchSetId": 1
      },
      "lineNbr": 868,
      "author": {
        "id": 28783
      },
      "writtenOn": "2021-05-16T00:41:44Z",
      "side": 1,
      "message": "Good point, it could be either.  I\u0027ll fix. It could be new in the sense of this case:\n\nfunc (v *Value[T2]) set(...) {\n}\n\nwhere T2 is new in this method header scope and is re-instantianting Value with a (new) typeparam T2.  Or it could be a use of Value[T3] in a function/method body, where T3 is a typeparam in an outer scope from a generic function or method.",
      "parentUuid": "ccff6ece_94131f7e",
      "range": {
        "startLine": 868,
        "startChar": 65,
        "endLine": 868,
        "endChar": 68
      },
      "revId": "62f8b67b6ee52d63a62c9b258410b58c39e8bcf8",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b45bf723_945cd5c0",
        "filename": "src/cmd/compile/internal/types/type.go",
        "patchSetId": 1
      },
      "lineNbr": 193,
      "author": {
        "id": 5200
      },
      "writtenOn": "2021-05-14T16:56:41Z",
      "side": 1,
      "message": "Is the intention that we put instantiated types in the source package at some point?",
      "revId": "62f8b67b6ee52d63a62c9b258410b58c39e8bcf8",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9422d60e_e15431e5",
        "filename": "src/cmd/compile/internal/types/type.go",
        "patchSetId": 1
      },
      "lineNbr": 193,
      "author": {
        "id": 28783
      },
      "writtenOn": "2021-05-16T00:41:44Z",
      "side": 1,
      "message": "I figured out how to put the instantiated types and functions/methods in the source package.  I fixed most of the comments, but missed this one, so I\u0027ll fix it.  The OrigSym is still useful (we sometimes need to go from an instantiated type to its base type).  We could remove it eventually if it\u0027s not that useful (in which case we would go from instantiated type to its base type by parsing its symbol name).",
      "parentUuid": "b45bf723_945cd5c0",
      "revId": "62f8b67b6ee52d63a62c9b258410b58c39e8bcf8",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}