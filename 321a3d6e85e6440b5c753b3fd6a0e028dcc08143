{
  "comments": [
    {
      "key": {
        "uuid": "d2b5007e_9b885675",
        "filename": "src/syscall/sockcmsg_unix.go",
        "patchSetId": 2
      },
      "lineNbr": 21,
      "author": {
        "id": 19560
      },
      "writtenOn": "2018-12-12T16:20:03Z",
      "side": 0,
      "message": "Why not just\n\n  else if runtime.GOOS \u003d\u003d \"openbsd\" \u0026\u0026 runtime.GOARCH \u003d\u003d \"arm\" {\n          // OpenBSD armv7 requires 64-bit alignment.\n          salign \u003d 8\n  }\n\ninstead of moving everything to func init()?",
      "range": {
        "startLine": 21,
        "startChar": 1,
        "endLine": 21,
        "endChar": 2
      },
      "revId": "321a3d6e85e6440b5c753b3fd6a0e028dcc08143",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "70db83d7_9f95d4f9",
        "filename": "src/syscall/sockcmsg_unix.go",
        "patchSetId": 2
      },
      "lineNbr": 21,
      "author": {
        "id": 13640
      },
      "writtenOn": "2018-12-12T17:26:20Z",
      "side": 0,
      "message": "This would require evaluating runtime.GOOS and runtime.GOARCH on every cmsgAlignOf invocation for every platform, which seemed less than ideal - moving it to an init means that we only ever evaluate it once. That said, looking more closely at the generated code it seems that the compiler is optimising this far more than I expected, since they\u0027re constants.\n\nFWIW this is also the method that is now being used in golang.org/x/sys/unix, so if we decide to do it differently here we should probably be consistent.",
      "parentUuid": "d2b5007e_9b885675",
      "range": {
        "startLine": 21,
        "startChar": 1,
        "endLine": 21,
        "endChar": 2
      },
      "revId": "321a3d6e85e6440b5c753b3fd6a0e028dcc08143",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "df9cfcfb_b68829f1",
        "filename": "src/syscall/sockcmsg_unix.go",
        "patchSetId": 2
      },
      "lineNbr": 21,
      "author": {
        "id": 5206
      },
      "writtenOn": "2018-12-12T23:02:00Z",
      "side": 0,
      "message": "Looks like you\u0027ve changed it to not use an init function, so I\u0027ll just note for the record that runtime.GOOS and runtime.GOARCH are constants, so all the comparisons disappear at compile time.",
      "parentUuid": "70db83d7_9f95d4f9",
      "range": {
        "startLine": 21,
        "startChar": 1,
        "endLine": 21,
        "endChar": 2
      },
      "revId": "321a3d6e85e6440b5c753b3fd6a0e028dcc08143",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6ed9a62f_2a953628",
        "filename": "src/syscall/sockcmsg_unix.go",
        "patchSetId": 2
      },
      "lineNbr": 21,
      "author": {
        "id": 19560
      },
      "writtenOn": "2018-12-13T07:32:49Z",
      "side": 0,
      "message": "\u003e FWIW this is also the method that is now being used in golang.org/x/sys/unix, so if we decide to do it differently here we should probably be consistent.\n\nYes, let\u0027s make it consistent. I sent CL 153837 doing that.",
      "parentUuid": "df9cfcfb_b68829f1",
      "range": {
        "startLine": 21,
        "startChar": 1,
        "endLine": 21,
        "endChar": 2
      },
      "revId": "321a3d6e85e6440b5c753b3fd6a0e028dcc08143",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}