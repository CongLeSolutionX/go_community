{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "b2a4195a_eb9ef8a8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 68008
      },
      "writtenOn": "2024-11-14T13:04:13Z",
      "side": 1,
      "message": "Hello,\nI\u0027ve re-run rebased version on X86 Xeon machine. It seems also to reproduce improvement on FPAQ test, and for StdlibJSON the difference is smaller. Here is other tests result:\n```\nshortname: ajstarks_deck_generate\ntoolchain: Cse3-rand\ngoos: linux\ngoarch: amd64\npkg: github.com/ajstarks/deck/generate\ncpu: Intel(R) Xeon(R) CPU E5-2690 v3 @ 2.60GHz\n          │ Orig-rand.stdout │          Cse3-rand.stdout          │\n          │      sec/op      │   sec/op     vs base               │\nArc-4            4.471µ ± 1%   4.447µ ± 1%  -0.54% (p\u003d0.008 n\u003d25)\nPolygon-4        8.243µ ± 0%   8.165µ ± 0%  -0.95% (p\u003d0.000 n\u003d25)\ngeomean          6.071µ        6.026µ       -0.74%\n\nshortname: aws_jsonutil\npkg: github.com/aws/aws-sdk-go/private/protocol/json/jsonutil\n             │ Orig-rand.stdout │          Cse3-rand.stdout          │\n             │      sec/op      │   sec/op     vs base               │\nBuildJSON-4         4.803µ ± 0%   4.813µ ± 0%  +0.21% (p\u003d0.000 n\u003d25)\nStdlibJSON-4        3.826µ ± 0%   3.807µ ± 0%  -0.50% (p\u003d0.000 n\u003d25)\ngeomean             4.287µ        4.281µ       -0.14%\n\nshortname: benhoyt_goawk_1_18\npkg: github.com/benhoyt/goawk/interp\n                      │ Orig-rand.stdout │          Cse3-rand.stdout          │\n                      │      sec/op      │   sec/op     vs base               │\nRecursiveFunc-4              15.52µ ± 0%   15.29µ ± 1%  -1.48% (p\u003d0.000 n\u003d25)\nRegexMatch-4                 1.453µ ± 0%   1.474µ ± 0%  +1.45% (p\u003d0.000 n\u003d25)\nRepeatExecProgram-4          15.64µ ± 0%   15.64µ ± 0%       ~ (p\u003d0.634 n\u003d25)\nRepeatNew-4                  152.5n ± 0%   154.6n ± 0%  +1.38% (p\u003d0.000 n\u003d25)\nRepeatIOExecProgram-4        28.66µ ± 1%   28.42µ ± 1%  -0.81% (p\u003d0.000 n\u003d25)\nRepeatIONew-4                1.185µ ± 0%   1.172µ ± 0%  -1.10% (p\u003d0.000 n\u003d25)\ngeomean                      3.496µ        3.493µ       -0.10%\n\nshortname: bindata\npkg: github.com/kevinburke/go-bindata\n          │ Orig-rand.stdout │          Cse3-rand.stdout          │\n          │      sec/op      │   sec/op     vs base               │\nBindata-4        335.1m ± 0%   333.5m ± 0%  -0.46% (p\u003d0.014 n\u003d25)\n\n          │ Orig-rand.stdout │        Cse3-rand.stdout        │\n          │       B/op       │     B/op      vs base          │\nBindata-4       183.0Mi ± 0%   183.0Mi ± 0%  ~ (p\u003d0.600 n\u003d25)\n\n          │ Orig-rand.stdout │       Cse3-rand.stdout        │\n          │    allocs/op     │  allocs/op   vs base          │\nBindata-4        5.695k ± 0%   5.694k ± 0%  ~ (p\u003d0.774 n\u003d25)\n\n          │ Orig-rand.stdout │          Cse3-rand.stdout           │\n          │       B/s        │     B/s       vs base               │\nBindata-4       19.54Mi ± 0%   19.63Mi ± 0%  +0.44% (p\u003d0.015 n\u003d25)\n\nshortname: bloom_bloom\npkg: github.com/bits-and-blooms/bloom/v3\n                     │ Orig-rand.stdout │          Cse3-rand.stdout          │\n                     │      sec/op      │   sec/op     vs base               │\nSeparateTestAndAdd-4        531.6n ± 0%   531.7n ± 0%       ~ (p\u003d0.173 n\u003d25)\nCombinedTestAndAdd-4        548.7n ± 0%   549.0n ± 0%  +0.05% (p\u003d0.013 n\u003d25)\ngeomean                     540.1n        540.3n       +0.04%\n\nshortname: capnproto2\npkg: zombiezen.com/go/capnproto2\n                              │ Orig-rand.stdout │          Cse3-rand.stdout          │\n                              │      sec/op      │   sec/op     vs base               │\nTextMovementBetweenSegments-4        548.2µ ± 0%   549.8µ ± 0%  +0.28% (p\u003d0.009 n\u003d25)\nGrowth_MultiSegment-4                15.68m ± 0%   15.66m ± 0%  -0.13% (p\u003d0.000 n\u003d25)\ngeomean                              2.932m        2.935m       +0.08%\n\n                      │ Orig-rand.stdout │          Cse3-rand.stdout           │\n                      │       B/op       │     B/op      vs base               │\nGrowth_MultiSegment-4       1.572Mi ± 0%   1.572Mi ± 0%  +0.00% (p\u003d0.011 n\u003d25)\n\n                      │ Orig-rand.stdout │        Cse3-rand.stdout        │\n                      │    allocs/op     │ allocs/op   vs base            │\nGrowth_MultiSegment-4         21.00 ± 0%   21.00 ± 0%  ~ (p\u003d1.000 n\u003d25) ¹\n¹ all samples are equal\n\n                      │ Orig-rand.stdout │          Cse3-rand.stdout           │\n                      │       B/s        │     B/s       vs base               │\nGrowth_MultiSegment-4       63.76Mi ± 0%   63.84Mi ± 0%  +0.12% (p\u003d0.000 n\u003d25)\n\nshortname: commonmark_markdown\npkg: gitlab.com/golang-commonmark/markdown\n                         │ Orig-rand.stdout │          Cse3-rand.stdout          │\n                         │      sec/op      │   sec/op     vs base               │\nRenderSpecNoHTML-4              6.763m ± 0%   6.753m ± 0%       ~ (p\u003d0.773 n\u003d25)\nRenderSpec-4                    6.768m ± 0%   6.780m ± 0%  +0.18% (p\u003d0.032 n\u003d25)\nRenderSpecBlackFriday2-4        4.442m ± 0%   4.431m ± 0%       ~ (p\u003d0.216 n\u003d25)\ngeomean                         5.880m        5.876m       -0.07%\n\nshortname: dustin_broadcast\npkg: github.com/dustin/go-broadcast\n                     │ Orig-rand.stdout │          Cse3-rand.stdout          │\n                     │      sec/op      │   sec/op     vs base               │\nDirectSend-4                500.3n ± 0%   501.6n ± 0%       ~ (p\u003d0.485 n\u003d25)\nParallelDirectSend-4        501.4n ± 0%   503.0n ± 0%  +0.32% (p\u003d0.032 n\u003d25)\nParallelBrodcast-4          749.9n ± 0%   751.3n ± 0%       ~ (p\u003d0.174 n\u003d25)\nMuxBrodcast-4               778.3n ± 5%   781.8n ± 3%       ~ (p\u003d0.973 n\u003d25)\ngeomean                     618.6n        620.5n       +0.30%\n\nshortname: dustin_humanize\npkg: github.com/dustin/go-humanize\n                │ Orig-rand.stdout │       Cse3-rand.stdout        │\n                │      sec/op      │   sec/op     vs base          │\nParseBigBytes-4        1.947µ ± 0%   1.941µ ± 1%  ~ (p\u003d0.291 n\u003d25)\n\nshortname: ericlagergren_decimal\npkg: github.com/ericlagergren/decimal/benchmarks\n                                      │ Orig-rand.stdout │          Cse3-rand.stdout          │\n                                      │      sec/op      │   sec/op     vs base               │\nPi/foo\u003dericlagergren_(Go)/prec\u003d100-4         189.5µ ± 1%   188.8µ ± 0%       ~ (p\u003d0.397 n\u003d25)\nPi/foo\u003dericlagergren_(GDA)/prec\u003d100-4        396.7µ ± 0%   398.0µ ± 0%       ~ (p\u003d0.059 n\u003d25)\nPi/foo\u003dshopspring/prec\u003d100-4                 509.7µ ± 1%   508.6µ ± 1%       ~ (p\u003d0.136 n\u003d25)\nPi/foo\u003dapmckinlay/prec\u003d100-4                 4.515µ ± 0%   4.563µ ± 0%  +1.06% (p\u003d0.000 n\u003d25)\nPi/foo\u003dgo-inf/prec\u003d100-4                     156.7µ ± 1%   155.6µ ± 1%       ~ (p\u003d0.121 n\u003d25)\nPi/foo\u003dfloat64/prec\u003d100-4                    8.104µ ± 1%   8.104µ ± 0%       ~ (p\u003d0.889 n\u003d25)\ngeomean                                      77.68µ        77.69µ       +0.01%\n\nshortname: ethereum_core\npkg: github.com/ethereum/go-ethereum/core\n                            │ Orig-rand.stdout │          Cse3-rand.stdout          │\n                            │      sec/op      │   sec/op     vs base               │\nPendingDemotion10000-4             195.7n ± 0%   197.5n ± 0%  +0.92% (p\u003d0.000 n\u003d25)\nPoolBatchInsert10000-4              1.194 ± 0%    1.195 ± 0%  +0.12% (p\u003d0.000 n\u003d25)\nPoolBatchLocalInsert10000-4         1.171 ± 0%    1.172 ± 0%  +0.14% (p\u003d0.001 n\u003d25)\ngeomean                            6.491m        6.516m       +0.39%\n\nshortname: ethereum_ecies\npkg: github.com/ethereum/go-ethereum/crypto/ecies\n                   │ Orig-rand.stdout │          Cse3-rand.stdout          │\n                   │      sec/op      │   sec/op     vs base               │\nGenerateKeyP256-4         24.11µ ± 0%   24.14µ ± 0%  +0.14% (p\u003d0.000 n\u003d25)\nGenSharedKeyP256-4        96.56µ ± 0%   96.17µ ± 0%  -0.40% (p\u003d0.000 n\u003d25)\nGenSharedKeyS256-4        92.18µ ± 0%   92.20µ ± 0%       ~ (p\u003d0.747 n\u003d25)\ngeomean                   59.87µ        59.82µ       -0.08%\n\nshortname: gonum_topo\npkg: gonum.org/v1/gonum/graph/topo\n                         │ Orig-rand.stdout │          Cse3-rand.stdout          │\n                         │      sec/op      │   sec/op     vs base               │\nTarjanSCCGnp_10_tenth-4         9.428µ ± 0%   9.321µ ± 1%  -1.13% (p\u003d0.000 n\u003d25)\nTarjanSCCGnp_1000_half-4        88.81m ± 1%   89.40m ± 1%  +0.67% (p\u003d0.005 n\u003d25)\ngeomean                         915.0µ        912.8µ       -0.24%\n\nshortname: gonum_traverse\npkg: gonum.org/v1/gonum/graph/traverse\n                                    │ Orig-rand.stdout │          Cse3-rand.stdout          │\n                                    │      sec/op      │   sec/op     vs base               │\nWalkAllBreadthFirstGnp_10_tenth-4          4.663µ ± 0%   4.636µ ± 1%  -0.58% (p\u003d0.004 n\u003d25)\nWalkAllBreadthFirstGnp_1000_tenth-4        12.51m ± 0%   12.39m ± 0%  -0.93% (p\u003d0.000 n\u003d25)\ngeomean                                    241.5µ        239.7µ       -0.75%\n\nshortname: gtank_blake2s\npkg: github.com/gtank/blake2s\n         │ Orig-rand.stdout │          Cse3-rand.stdout          │\n         │      sec/op      │   sec/op     vs base               │\nHash8K-4        33.80µ ± 0%   33.90µ ± 0%  +0.30% (p\u003d0.000 n\u003d25)\n\n         │ Orig-rand.stdout │          Cse3-rand.stdout           │\n         │       B/s        │     B/s       vs base               │\nHash8K-4       231.1Mi ± 0%   230.4Mi ± 0%  -0.31% (p\u003d0.000 n\u003d25)\n\nshortname: k8s_cache\npkg: k8s.io/client-go/tools/cache\n                          │ Orig-rand.stdout │          Cse3-rand.stdout          │\n                          │      sec/op      │   sec/op     vs base               │\nListener-4                       1.130µ ± 1%   1.129µ ± 1%       ~ (p\u003d0.950 n\u003d25)\nReflectorResyncChanMany-4        677.1n ± 3%   647.0n ± 5%       ~ (p\u003d0.309 n\u003d25)\ngeomean                          874.7n        854.7n       -2.29%\n\nshortname: k8s_workqueue\npkg: k8s.io/client-go/util/workqueue\n                                                        │ Orig-rand.stdout │          Cse3-rand.stdout          │\n                                                        │      sec/op      │   sec/op     vs base               │\nParallelizeUntil/pieces:1000,workers:10,chunkSize:1-4          325.0µ ± 1%   327.4µ ± 1%       ~ (p\u003d0.164 n\u003d25)\nParallelizeUntil/pieces:1000,workers:10,chunkSize:10-4         55.07µ ± 1%   54.78µ ± 3%       ~ (p\u003d0.859 n\u003d25)\nParallelizeUntil/pieces:1000,workers:10,chunkSize:100-4        43.49µ ± 1%   43.58µ ± 1%       ~ (p\u003d0.603 n\u003d25)\nParallelizeUntil/pieces:999,workers:10,chunkSize:13-4          50.97µ ± 1%   51.22µ ± 2%       ~ (p\u003d0.939 n\u003d25)\ngeomean                                                        79.36µ        79.54µ       +0.23%\n\nshortname: kanzi\npkg: github.com/flanglet/kanzi-go/benchmark\n        │ Orig-rand.stdout │          Cse3-rand.stdout          │\n        │      sec/op      │   sec/op     vs base               │\nFPAQ-4         24.23m ± 0%   23.96m ± 0%  -1.09% (p\u003d0.000 n\u003d25)\nLZ-4           1.736m ± 0%   1.735m ± 0%       ~ (p\u003d0.893 n\u003d25)\nMTFT-4         1.321m ± 3%   1.317m ± 2%       ~ (p\u003d0.551 n\u003d25)\ngeomean        3.815m        3.797m       -0.48%\n\nshortname: semver\npkg: github.com/Masterminds/semver\n                           │ Orig-rand.stdout │          Cse3-rand.stdout          │\n                           │      sec/op      │   sec/op     vs base               │\nValidateVersionTildeFail-4        773.2n ± 0%   776.1n ± 0%  +0.38% (p\u003d0.000 n\u003d25)\n\nshortname: shopify_sarama\npkg: github.com/Shopify/sarama\n                         │ Orig-rand.stdout │          Cse3-rand.stdout          │\n                         │      sec/op      │   sec/op     vs base               │\nBroker_Open-4                   214.4µ ± 1%   216.1µ ± 0%       ~ (p\u003d0.059 n\u003d25)\nBroker_No_Metrics_Open-4        144.6µ ± 1%   150.2µ ± 1%  +3.85% (p\u003d0.000 n\u003d25)\ngeomean                         176.1µ        180.1µ       +2.31%\n\nshortname: spexs2\npkg: github.com/egonelbre/spexs2/_benchmark\n             │ Orig-rand.stdout │         Cse3-rand.stdout          │\n             │      sec/op      │   sec/op    vs base               │\nRun/10k/1-4          27.87 ± 0%   27.88 ± 0%       ~ (p\u003d0.773 n\u003d25)\nRun/10k/16-4         10.52 ± 1%   10.52 ± 1%       ~ (p\u003d0.773 n\u003d25)\ngeomean              17.13        17.13       +0.02%\n\nshortname: toml\npkg: github.com/BurntSushi/toml\n                   │ Orig-rand.stdout │          Cse3-rand.stdout          │\n                   │      sec/op      │   sec/op     vs base               │\nDecode/large-doc-4        2.801m ± 0%   2.790m ± 0%  -0.39% (p\u003d0.000 n\u003d25)\n\nshortname: uber_tally\npkg: github.com/uber-go/tally\n                               │ Orig-rand.stdout │          Cse3-rand.stdout          │\n                               │      sec/op      │   sec/op     vs base               │\nScopeTaggedNoCachedSubscopes-4        4.463µ ± 1%   4.412µ ± 2%  -1.14% (p\u003d0.018 n\u003d25)\nHistogramAllocation-4                 1.959µ ± 2%   1.967µ ± 2%       ~ (p\u003d0.237 n\u003d25)\ngeomean                               2.957µ        2.946µ       -0.37%\n\n                      │ Orig-rand.stdout │        Cse3-rand.stdout        │\n                      │       B/op       │     B/op      vs base          │\nHistogramAllocation-4       1.121Ki ± 0%   1.121Ki ± 0%  ~ (p\u003d0.874 n\u003d25)\n\n                      │ Orig-rand.stdout │        Cse3-rand.stdout        │\n                      │    allocs/op     │ allocs/op   vs base            │\nHistogramAllocation-4         20.00 ± 0%   20.00 ± 0%  ~ (p\u003d1.000 n\u003d25) ¹\n¹ all samples are equal\n\nshortname: uber_zap\npkg: go.uber.org/zap/zapcore\n                                             │ Orig-rand.stdout │          Cse3-rand.stdout          │\n                                             │      sec/op      │   sec/op     vs base               │\nBufferedWriteSyncer/write_file_with_buffer-4       223.1n ±  5%   224.0n ± 4%       ~ (p\u003d0.792 n\u003d25)\nMultiWriteSyncer/2_discarder-4                     13.50n ±  1%   13.57n ± 1%       ~ (p\u003d0.085 n\u003d25)\nMultiWriteSyncer/4_discarder-4                     18.31n ±  0%   18.00n ± 0%  -1.69% (p\u003d0.000 n\u003d25)\nMultiWriteSyncer/4_discarder_with_buffer-4         218.5n ±  2%   219.9n ± 3%       ~ (p\u003d0.676 n\u003d25)\nWriteSyncer/write_file_with_no_buffer-4            1.184µ ±  1%   1.152µ ± 1%  -2.70% (p\u003d0.000 n\u003d25)\nZapConsole-4                                       939.3n ±  0%   930.2n ± 0%  -0.97% (p\u003d0.000 n\u003d25)\nJSONLogMarshalerFunc-4                             617.7n ±  0%   620.8n ± 0%  +0.50% (p\u003d0.002 n\u003d25)\nZapJSON-4                                          570.1n ±  1%   569.1n ± 1%       ~ (p\u003d0.641 n\u003d25)\nStandardJSON-4                                     1.182µ ±  0%   1.180µ ± 0%       ~ (p\u003d0.950 n\u003d25)\nSampler_Check/7_keys-4                             33.60n ±  2%   33.28n ± 3%       ~ (p\u003d0.450 n\u003d25)\nSampler_Check/50_keys-4                            35.86n ±  1%   35.76n ± 1%       ~ (p\u003d0.726 n\u003d25)\nSampler_Check/100_keys-4                           35.61n ±  1%   35.34n ± 1%       ~ (p\u003d0.171 n\u003d25)\nSampler_CheckWithHook/7_keys-4                     72.06n ± 31%   89.70n ± 5%       ~ (p\u003d0.145 n\u003d25)\nSampler_CheckWithHook/50_keys-4                    75.83n ± 32%   92.85n ± 8%       ~ (p\u003d0.168 n\u003d25)\nSampler_CheckWithHook/100_keys-4                   76.04n ± 29%   91.07n ± 8%       ~ (p\u003d0.300 n\u003d25)\nTeeCheck-4                                         348.7n ±  3%   346.4n ± 3%       ~ (p\u003d0.919 n\u003d25)\ngeomean                                            144.1n         149.1n       +3.42%\n\nshortname: wazero\npkg: github.com/tetratelabs/wazero/internal/integration_test/bench\n                                                     │ Orig-rand.stdout │          Cse3-rand.stdout          │\n                                                     │      sec/op      │   sec/op     vs base               │\nInvocation/interpreter/fib_for_20-4                         3.544m ± 0%   3.568m ± 0%  +0.69% (p\u003d0.000 n\u003d25)\nInvocation/interpreter/string_manipulation_size_50-4        1.481m ± 0%   1.493m ± 0%  +0.78% (p\u003d0.000 n\u003d25)\nInvocation/interpreter/random_mat_mul_size_20-4             10.34m ± 0%   10.44m ± 0%  +0.98% (p\u003d0.000 n\u003d25)\nCompilation/with_extern_cache-4                             649.8µ ± 0%   652.4µ ± 0%  +0.41% (p\u003d0.000 n\u003d25)\nCompilation/without_extern_cache-4                          27.32m ± 0%   27.30m ± 0%       ~ (p\u003d0.365 n\u003d25)\ngeomean                                                     3.951m        3.973m       +0.56%\n```",
      "revId": "4bb528d1245ac9033428d3afc14a619fb015fe0d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}