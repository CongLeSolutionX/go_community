{
  "comments": [
    {
      "key": {
        "uuid": "4435e636_9ded6c51",
        "filename": "src/hash/empty.s",
        "patchSetId": 2
      },
      "lineNbr": 1,
      "author": {
        "id": 5810
      },
      "writtenOn": "2018-12-20T07:58:41Z",
      "side": 1,
      "message": "copyright header?",
      "revId": "05a4cebd5ab0419ba01410e6166dedff564056a4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "98a0d80f_ff3a4453",
        "filename": "src/hash/empty.s",
        "patchSetId": 2
      },
      "lineNbr": 3,
      "author": {
        "id": 16006
      },
      "writtenOn": "2018-12-19T21:47:07Z",
      "side": 1,
      "message": "Maybe the other way around is cleaner. Add two adapter functions calling memhash into runtime/alg.go and linkname them there? Then this hack is not needed. IIRC reflect functions are also linknamed from the runtime.",
      "range": {
        "startLine": 1,
        "startChar": 0,
        "endLine": 3,
        "endChar": 59
      },
      "revId": "05a4cebd5ab0419ba01410e6166dedff564056a4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b1f868be_4ae8c353",
        "filename": "src/hash/runtime.go",
        "patchSetId": 2
      },
      "lineNbr": 1,
      "author": {
        "id": 5810
      },
      "writtenOn": "2018-12-20T07:58:41Z",
      "side": 1,
      "message": "also here?",
      "revId": "05a4cebd5ab0419ba01410e6166dedff564056a4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "42c83bef_1fbcb072",
        "filename": "src/hash/runtime.go",
        "patchSetId": 2
      },
      "lineNbr": 5,
      "author": {
        "id": 5615
      },
      "writtenOn": "2018-12-20T01:19:57Z",
      "side": 1,
      "message": "typo \"crypographic\"",
      "range": {
        "startLine": 5,
        "startChar": 21,
        "endLine": 5,
        "endChar": 32
      },
      "revId": "05a4cebd5ab0419ba01410e6166dedff564056a4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "09553764_4ef4c578",
        "filename": "src/hash/runtime.go",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 5200
      },
      "writtenOn": "2018-12-28T17:43:01Z",
      "side": 1,
      "message": "I don\u0027t like calling this \"Runtime\". At an API level it has nothing to do with the runtime. It just happens to share its implementation with the runtime.\nWe need a \"fast but unspecified\" name.",
      "range": {
        "startLine": 10,
        "startChar": 5,
        "endLine": 10,
        "endChar": 12
      },
      "revId": "05a4cebd5ab0419ba01410e6166dedff564056a4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "54f0e08f_a9d78756",
        "filename": "src/hash/runtime.go",
        "patchSetId": 2
      },
      "lineNbr": 14,
      "author": {
        "id": 5200
      },
      "writtenOn": "2018-12-28T17:43:01Z",
      "side": 1,
      "message": "There\u0027s no seeding of the hash here, so it\u0027s completely deterministic.\nWe should assign something random to the x field.\n\nThat will prevent people from depending on the exact result, and hopefully also help prevent hash collision attacks on the users of this API.",
      "range": {
        "startLine": 14,
        "startChar": 29,
        "endLine": 14,
        "endChar": 48
      },
      "revId": "05a4cebd5ab0419ba01410e6166dedff564056a4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dfae8d31_84082a17",
        "filename": "src/hash/runtime.go",
        "patchSetId": 2
      },
      "lineNbr": 20,
      "author": {
        "id": 5200
      },
      "writtenOn": "2018-12-28T17:43:01Z",
      "side": 1,
      "message": "Same thing about seeding here.  I\u0027m not sure how to solve it, The Reset API doesn\u0027t provide a way to specify a seed.\nMaybe we should remember the initial seed we used in the constructor?",
      "revId": "05a4cebd5ab0419ba01410e6166dedff564056a4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "58c716e1_597ba5d5",
        "filename": "src/hash/runtime.go",
        "patchSetId": 2
      },
      "lineNbr": 26,
      "author": {
        "id": 5615
      },
      "writtenOn": "2018-12-20T01:19:57Z",
      "side": 1,
      "message": "IIRC this idiom was optimized last cycle:\n\n  append(b, make([]byte, wordsize)...)",
      "range": {
        "startLine": 26,
        "startChar": 8,
        "endLine": 26,
        "endChar": 43
      },
      "revId": "05a4cebd5ab0419ba01410e6166dedff564056a4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "302fa968_e532c642",
        "filename": "src/hash/runtime.go",
        "patchSetId": 2
      },
      "lineNbr": 56,
      "author": {
        "id": 16006
      },
      "writtenOn": "2018-12-19T21:47:07Z",
      "side": 1,
      "message": "I think runtime.strhash is better here as it the version used also by typ algs and not the test adapter function.",
      "range": {
        "startLine": 56,
        "startChar": 32,
        "endLine": 56,
        "endChar": 50
      },
      "revId": "05a4cebd5ab0419ba01410e6166dedff564056a4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c025282e_e4c8aa79",
        "filename": "src/hash/runtime.go",
        "patchSetId": 2
      },
      "lineNbr": 57,
      "author": {
        "id": 16006
      },
      "writtenOn": "2018-12-19T21:47:07Z",
      "side": 1,
      "message": "why not uint? Nowadays size of uint and uintptr should always match. We could change the runtime internals too to use uint without breakage but this will be a public API so not easily changed later.",
      "range": {
        "startLine": 57,
        "startChar": 38,
        "endLine": 57,
        "endChar": 45
      },
      "revId": "05a4cebd5ab0419ba01410e6166dedff564056a4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c1ff68b3_67d78942",
        "filename": "src/hash/runtime.go",
        "patchSetId": 2
      },
      "lineNbr": 57,
      "author": {
        "id": 16006
      },
      "writtenOn": "2018-12-20T21:43:49Z",
      "side": 1,
      "message": "please disregard my earlier comment here. This uintptr only mirrors the runtime but is not exported so can be adjusted later to uint if the runtime\u0027s type used for hashes changes.",
      "parentUuid": "c025282e_e4c8aa79",
      "range": {
        "startLine": 57,
        "startChar": 38,
        "endLine": 57,
        "endChar": 45
      },
      "revId": "05a4cebd5ab0419ba01410e6166dedff564056a4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8b595827_660e480e",
        "filename": "src/hash/runtime_test.go",
        "patchSetId": 2
      },
      "lineNbr": 1,
      "author": {
        "id": 5810
      },
      "writtenOn": "2018-12-20T07:58:41Z",
      "side": 1,
      "message": "ditto",
      "revId": "05a4cebd5ab0419ba01410e6166dedff564056a4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "544a4d59_510fe275",
        "filename": "src/hash/runtime_test.go",
        "patchSetId": 2
      },
      "lineNbr": 37,
      "author": {
        "id": 5615
      },
      "writtenOn": "2018-12-20T01:19:57Z",
      "side": 1,
      "message": "Would this be better as a test that just asserts there are no allocs (with testing.AllocsPerRun)? We have a bunch of those elsewhere.",
      "revId": "05a4cebd5ab0419ba01410e6166dedff564056a4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    }
  ]
}