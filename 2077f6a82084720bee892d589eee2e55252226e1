{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "346f3462_6181e978",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 15
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-08-23T17:56:29Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003d2077f6a8",
      "tag": "autogenerated:trybots~beginning",
      "revId": "2077f6a82084720bee892d589eee2e55252226e1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "39708eee_3fa1f811",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 15
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-08-23T18:23:57Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "346f3462_6181e978",
      "tag": "autogenerated:trybots~happy",
      "revId": "2077f6a82084720bee892d589eee2e55252226e1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "198d23e2_cfe29039",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 15
      },
      "lineNbr": 0,
      "author": {
        "id": 9210
      },
      "writtenOn": "2021-08-23T18:28:27Z",
      "side": 1,
      "message": "Hi Michael, could you help me find a reviewer for this set of patches please?",
      "revId": "2077f6a82084720bee892d589eee2e55252226e1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8821df7a_940fccb8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 15
      },
      "lineNbr": 0,
      "author": {
        "id": 9210
      },
      "writtenOn": "2021-08-26T15:27:49Z",
      "side": 1,
      "message": "Hi Austin, this is the profiler fix you suggested in https://github.com/golang/go/issues/14434#issuecomment-256649735 (timer_create and how to use it). Would you be able to review this set of changes, or delegate to someone who can? Thanks.",
      "revId": "2077f6a82084720bee892d589eee2e55252226e1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6d927baa_ae0d2bba",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 15
      },
      "lineNbr": 0,
      "author": {
        "id": 9210
      },
      "writtenOn": "2021-08-31T15:36:15Z",
      "side": 1,
      "message": "PTAL",
      "revId": "2077f6a82084720bee892d589eee2e55252226e1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "77d8ed06_d3d9ca3b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 15
      },
      "lineNbr": 0,
      "author": {
        "id": 12120
      },
      "writtenOn": "2021-09-09T20:22:02Z",
      "side": 1,
      "message": "Comments mostly about style and whether we need all the flags, but the overall approach looks good!",
      "revId": "2077f6a82084720bee892d589eee2e55252226e1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "577528be_49cb867c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 15
      },
      "lineNbr": 0,
      "author": {
        "id": 9210
      },
      "writtenOn": "2021-09-15T22:56:19Z",
      "side": 1,
      "message": "Thanks for the review! I aim to send a fresh revision by the end of the week. If you have time ahead of that, I\u0027ve asked for clarifications on a couple points -- but if not, I have a plan for how to move forward on each.",
      "revId": "2077f6a82084720bee892d589eee2e55252226e1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "69e63ce0_529ec3b3",
        "filename": "src/runtime/os_linux.go",
        "patchSetId": 15
      },
      "lineNbr": 21,
      "author": {
        "id": 12120
      },
      "writtenOn": "2021-09-09T20:22:02Z",
      "side": 1,
      "message": "See my comment below about whether or not we need flags (particularly the shutdown flag), but if so I think the flags can go in a dedicated word separate from the timer ID. The timer ID is only accessed by the owning thread, so it doesn\u0027t need to be part of the atomic word.",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 21,
        "endChar": 35
      },
      "revId": "2077f6a82084720bee892d589eee2e55252226e1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8338f1ac_d5e5aabd",
        "filename": "src/runtime/os_linux.go",
        "patchSetId": 15
      },
      "lineNbr": 21,
      "author": {
        "id": 9210
      },
      "writtenOn": "2021-09-15T22:56:19Z",
      "side": 1,
      "message": "Yes, it looks like the shutdown flag can go away. That means no atomics here! So less need to pack this all into a single value.\n\nThe valid flag lets us see when we have a valid timer with id 0. An early revision of this added 1 to the OS\u0027s timer id before storing it in a field here. Is that the right move, or is it OK to have a separate field for the flag? (We won\u0027t have so many runtime.m structs in a process, a few extra bytes is fine, right?)",
      "parentUuid": "69e63ce0_529ec3b3",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 21,
        "endChar": 35
      },
      "revId": "2077f6a82084720bee892d589eee2e55252226e1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "17632046_6191424e",
        "filename": "src/runtime/os_linux.go",
        "patchSetId": 15
      },
      "lineNbr": 565,
      "author": {
        "id": 12120
      },
      "writtenOn": "2021-09-09T20:22:02Z",
      "side": 1,
      "message": "nit: the negative nature of this function makes a bit harder to follow. Consider calling it validSIGPROF or something like that to make it positive.",
      "revId": "2077f6a82084720bee892d589eee2e55252226e1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ea4a6abd_0ff37654",
        "filename": "src/runtime/os_linux.go",
        "patchSetId": 15
      },
      "lineNbr": 565,
      "author": {
        "id": 9210
      },
      "writtenOn": "2021-09-15T22:56:19Z",
      "side": 1,
      "message": "Will do.",
      "parentUuid": "17632046_6191424e",
      "revId": "2077f6a82084720bee892d589eee2e55252226e1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2e8f5fc2_067abd7d",
        "filename": "src/runtime/os_linux.go",
        "patchSetId": 15
      },
      "lineNbr": 566,
      "author": {
        "id": 12120
      },
      "writtenOn": "2021-09-09T20:22:02Z",
      "side": 1,
      "message": "Should we ignore SI_USER signals as well (i.e., manually sent from another process)?",
      "revId": "2077f6a82084720bee892d589eee2e55252226e1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "29255848_f17d63e1",
        "filename": "src/runtime/os_linux.go",
        "patchSetId": 15
      },
      "lineNbr": 566,
      "author": {
        "id": 9210
      },
      "writtenOn": "2021-09-15T22:56:19Z",
      "side": 1,
      "message": "How about this position: SI_USER wasn\u0027t ignored before, so the behavior around it shouldn\u0027t change. When using the dual mechanisms (setitimer and timer_create), the profiler will only ignore the signals that it knows it generates itself. That means using code\u003d\u003dSI_KERNEL as a positive signal to ignore when we have an M and it has a timer, and code\u003d\u003dSI_TIMER as a positive signal to ignore when we don\u0027t have an M.\n\nDoes that sound good to you? If we\u0027re going to look for two sigcode values, looking specifically for the two we expect seems best. And since there was no filtering by sigcode before, using them only to reject specific signal deliveries seems like less of a change than using them to only allow specific signal deliveries.",
      "parentUuid": "2e8f5fc2_067abd7d",
      "revId": "2077f6a82084720bee892d589eee2e55252226e1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "40624d96_ee003781",
        "filename": "src/runtime/os_linux.go",
        "patchSetId": 15
      },
      "lineNbr": 601,
      "author": {
        "id": 12120
      },
      "writtenOn": "2021-09-09T20:22:02Z",
      "side": 1,
      "message": "next \u0026^\u003d profileTimerShutdown",
      "revId": "2077f6a82084720bee892d589eee2e55252226e1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e4ed6b3e_85e3266b",
        "filename": "src/runtime/os_linux.go",
        "patchSetId": 15
      },
      "lineNbr": 634,
      "author": {
        "id": 12120
      },
      "writtenOn": "2021-09-09T20:22:02Z",
      "side": 1,
      "message": "\u0026^\u003d",
      "range": {
        "startLine": 633,
        "startChar": 0,
        "endLine": 634,
        "endChar": 34
      },
      "revId": "2077f6a82084720bee892d589eee2e55252226e1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3f20deb2_bdb156b4",
        "filename": "src/runtime/os_linux.go",
        "patchSetId": 15
      },
      "lineNbr": 637,
      "author": {
        "id": 12120
      },
      "writtenOn": "2021-09-09T20:22:02Z",
      "side": 1,
      "message": "Check for errors",
      "revId": "2077f6a82084720bee892d589eee2e55252226e1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eb6e7108_54d9c70a",
        "filename": "src/runtime/os_linux.go",
        "patchSetId": 15
      },
      "lineNbr": 648,
      "author": {
        "id": 12120
      },
      "writtenOn": "2021-09-09T20:22:02Z",
      "side": 1,
      "message": "If we already have a timer why can\u0027t we reuse it?",
      "revId": "2077f6a82084720bee892d589eee2e55252226e1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1b75a652_7ab86827",
        "filename": "src/runtime/os_linux.go",
        "patchSetId": 15
      },
      "lineNbr": 648,
      "author": {
        "id": 9210
      },
      "writtenOn": "2021-09-15T22:56:19Z",
      "side": 1,
      "message": "This seems like it allows all of the code paths to get regular exercise: We know we can destroy a timer that exists, and we know that attempting to destroy a timer when there isn\u0027t one works too. Trying to create a timer when one already exists would be rare, so bugs there could survive for a long time.",
      "parentUuid": "eb6e7108_54d9c70a",
      "revId": "2077f6a82084720bee892d589eee2e55252226e1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0378e6c2_da7e61a7",
        "filename": "src/runtime/os_linux.go",
        "patchSetId": 15
      },
      "lineNbr": 655,
      "author": {
        "id": 12120
      },
      "writtenOn": "2021-09-09T20:22:02Z",
      "side": 1,
      "message": "I haven\u0027t fully thought through this, but it seems like we don\u0027t need this flag? If we move the assignment of mp.profilehz into this function, then I think we could check if mp.profilehz !\u003d hz to determine if we need to do timer creation/deletion/modification.\n\nIf this function races with another thread disabling profiling, that is ok: the next time we go through execute we\u0027ll disable the timer.",
      "revId": "2077f6a82084720bee892d589eee2e55252226e1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3e8a9bb2_7b1a83b7",
        "filename": "src/runtime/os_linux.go",
        "patchSetId": 15
      },
      "lineNbr": 655,
      "author": {
        "id": 9210
      },
      "writtenOn": "2021-09-15T22:56:19Z",
      "side": 1,
      "message": "The shutdown flag lets the assignment of mp.profilehz stay out of this function, which gives some sense of the timer_create path being separate from the setitimer path, and for the go118UseTimerCreateProfiler flag to mainly control which functions get called rather than finer-grained detail of how those functions act. I erred towards that approach to limit how much the Linux implementation diverged from the other unix-style OSes.\n\nIt looks like that\u0027s the sole driver for the shutdown flag. I\u0027ll try ripping it out, at the cost of marginally more Linux-specific behavior.",
      "parentUuid": "0378e6c2_da7e61a7",
      "revId": "2077f6a82084720bee892d589eee2e55252226e1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6b9c8bbe_ecba8f9c",
        "filename": "src/runtime/os_linux.go",
        "patchSetId": 15
      },
      "lineNbr": 668,
      "author": {
        "id": 12120
      },
      "writtenOn": "2021-09-09T20:22:02Z",
      "side": 1,
      "message": "Do we have a reason to expect this to fail? If not, I think we should throw() on errors like this. Silently ignoring errors will make bug difficult to diagnose.",
      "revId": "2077f6a82084720bee892d589eee2e55252226e1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5aaa8625_5506d267",
        "filename": "src/runtime/os_linux.go",
        "patchSetId": 15
      },
      "lineNbr": 668,
      "author": {
        "id": 9210
      },
      "writtenOn": "2021-09-15T22:56:19Z",
      "side": 1,
      "message": "The man page describes a way it could fail from resource limits, and this is a limit that the Go runtime hasn\u0027t (to my knowledge) consumed before. What\u0027s the appropriate response?\n\n\"\"\"\nThe kernel preallocates a \"queued real-time signal\" for each\ntimer created using timer_create().  Consequently, the number of\ntimers is limited by the RLIMIT_SIGPENDING resource limit (see\nsetrlimit(2)).\n\"\"\"",
      "parentUuid": "6b9c8bbe_ecba8f9c",
      "revId": "2077f6a82084720bee892d589eee2e55252226e1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3b37e260_ff5adeb7",
        "filename": "src/runtime/os_linux.go",
        "patchSetId": 15
      },
      "lineNbr": 697,
      "author": {
        "id": 12120
      },
      "writtenOn": "2021-09-09T20:22:02Z",
      "side": 1,
      "message": "Same comment re: throw",
      "revId": "2077f6a82084720bee892d589eee2e55252226e1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7208d808_eede247d",
        "filename": "src/runtime/os_linux.go",
        "patchSetId": 15
      },
      "lineNbr": 697,
      "author": {
        "id": 9210
      },
      "writtenOn": "2021-09-15T22:56:19Z",
      "side": 1,
      "message": "I do not expect this one to fail; I\u0027ll make it throw.",
      "parentUuid": "3b37e260_ff5adeb7",
      "revId": "2077f6a82084720bee892d589eee2e55252226e1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cf72371e_fbbdd688",
        "filename": "src/runtime/os_linux.go",
        "patchSetId": 15
      },
      "lineNbr": 719,
      "author": {
        "id": 12120
      },
      "writtenOn": "2021-09-09T20:22:02Z",
      "side": 1,
      "message": "Does this matter? What is this lock protecting? If yes, please add assertLockHeld(\u0026cpuprof.lock).",
      "range": {
        "startLine": 719,
        "startChar": 3,
        "endLine": 719,
        "endChar": 35
      },
      "revId": "2077f6a82084720bee892d589eee2e55252226e1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "abbdb004_602c185d",
        "filename": "src/runtime/os_linux.go",
        "patchSetId": 15
      },
      "lineNbr": 719,
      "author": {
        "id": 9210
      },
      "writtenOn": "2021-09-15T22:56:19Z",
      "side": 1,
      "message": "This is the same preamble as in setProcessCPUProfiler, added in CL 34018. At the time, the CAS lock that protects prof.hz and indicates to the SIGPROF handlers that cpuprof.log is ready to use was called \"prof.lock\". That CL specifically placed the call to the new setProcessCPUProfiler function inside the few lines of code where the CAS lock is held. I don\u0027t fully understand why, and whether it\u0027s a key component of the fix for #18220.\n\nCL 36712 renamed the CAS lock to \"prof.signalLock\", but didn\u0027t catch the comment. I\u0027ll update the comment here and in signal_unix.go to reflect the new name.",
      "parentUuid": "cf72371e_fbbdd688",
      "range": {
        "startLine": 719,
        "startChar": 3,
        "endLine": 719,
        "endChar": 35
      },
      "revId": "2077f6a82084720bee892d589eee2e55252226e1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "adc9cb17_7799d78f",
        "filename": "src/runtime/os_linux.go",
        "patchSetId": 15
      },
      "lineNbr": 721,
      "author": {
        "id": 12120
      },
      "writtenOn": "2021-09-09T20:22:02Z",
      "side": 1,
      "message": "Perhaps note in a comment that new Ms will start with timers allowed (!profileTimerShutdown) even if sched.profilehz \u003d\u003d 0. This is OK because those threads won\u0027t try to create a timer anyways.",
      "revId": "2077f6a82084720bee892d589eee2e55252226e1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}