{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "483690b3_e4383988",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 50449
      },
      "writtenOn": "2024-09-07T15:56:23Z",
      "side": 1,
      "message": "This fixes another bug I noticed while working on the fix for the GoroutineProfile null padding. I\u0027m putting it ahead in the CL chain b/c it simplifies writing the test for the mutex profile in the following CL.",
      "revId": "35f06098ba1234d888157bd83be86aaa4d8ec26c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "518a8b83_63a4b751",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 57733
      },
      "writtenOn": "2024-09-09T12:41:11Z",
      "side": 1,
      "message": "Thanks! The fix looks good. I wonder if we could make the test more reliable?",
      "revId": "35f06098ba1234d888157bd83be86aaa4d8ec26c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bc256728_f0af8222",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 57733
      },
      "writtenOn": "2024-09-11T12:27:05Z",
      "side": 1,
      "message": "I was looking at this again while contemplating corner cases for CL 611241 and think I\u0027ve found an off-by-one error. PTAL at my new comment, and sorry for not looking at this more closely the first time around.",
      "revId": "35f06098ba1234d888157bd83be86aaa4d8ec26c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bc18db71_83d44c71",
        "filename": "src/runtime/mprof.go",
        "patchSetId": 2
      },
      "lineNbr": 1154,
      "author": {
        "id": 57733
      },
      "writtenOn": "2024-09-11T12:27:05Z",
      "side": 1,
      "message": "This will be off by one if the above loop exits when `j \u003d\u003d cap(expandedStack)`, i.e. if `more` is never false above. I think the fully correct version would be something like\n\n```\nfor i :\u003d range p {\n\tcf :\u003d CallersFrames(p[i].Stack())\n\tj :\u003d 0\n\tfor j \u003c len(expandedStack) {\n\t\tf, more :\u003d cf.Next()\n\t\t// f.PC is a \"call PC\", but later consumers will expect\n\t\t// \"return PCs\"\n\t\texpandedStack[j] \u003d f.PC + 1\n\t\tj++\n\t\tif !more {\n\t\t\tbreak\n\t\t}\n\t}\n\tk :\u003d copy(p[i].Stack0[:], expandedStack[:j])\n\tclear(p[i].Stack0[k:])\n}\n```\n\nI don\u0027t think this will break users in practice since the default stack depth of 128 is a lot bigger than 32, the size of the `BlockProfileRecord` stack. But for example if I run the unit tests with `GODEBUG\u003dprofstackdepth\u003d4` I get an out-of-bounds panic.",
      "revId": "35f06098ba1234d888157bd83be86aaa4d8ec26c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "41160c39_2b98a76a",
        "filename": "src/runtime/pprof/pprof_test.go",
        "patchSetId": 2
      },
      "lineNbr": 1332,
      "author": {
        "id": 57733
      },
      "writtenOn": "2024-09-09T12:41:11Z",
      "side": 1,
      "message": "I notice this tests passes consistently for me with `GOMAXPROCS\u003d1`, if I revert the fix. I guess because there isn\u0027t necessarily any runtime lock contention, and this test is relying on `runtime._LostContendedRuntimeLock` being in the profile? Not sure of a better way to do it, though. I guess as long as at least one of the runners reliably triggers runtime lock contention (and we do `runtime._LostContendedRuntimeLock` rather than the full stack) this test should catch a future regression? Or we could assert that `MutexProfile` stacks have `runtime.goexit` as the root frame?",
      "revId": "35f06098ba1234d888157bd83be86aaa4d8ec26c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e03b27ae_ae41a5c8",
        "filename": "src/runtime/pprof/pprof_test.go",
        "patchSetId": 2
      },
      "lineNbr": 1334,
      "author": {
        "id": 63983
      },
      "writtenOn": "2024-09-09T11:40:19Z",
      "side": 1,
      "message": "```suggestion\n\t\t// the proto profile.\n```",
      "revId": "35f06098ba1234d888157bd83be86aaa4d8ec26c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c35fc38d_e72947f8",
        "filename": "src/runtime/pprof/pprof_test.go",
        "patchSetId": 2
      },
      "lineNbr": 1387,
      "author": {
        "id": 57733
      },
      "writtenOn": "2024-09-09T12:41:11Z",
      "side": 1,
      "message": "If I revert the fix, the failure message here is `MutexProfile stack \";\" not found in proto:`. It\u0027s not clear to me what\u0027s missing just from that message. Perhaps also log the stacks from the `MutexProfile` on failure so it\u0027s easier to compare the outputs?",
      "revId": "35f06098ba1234d888157bd83be86aaa4d8ec26c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}