{
  "comments": [
    {
      "key": {
        "uuid": "18a442b9_961f4ce6",
        "filename": "doc/go_spec.html",
        "patchSetId": 5
      },
      "lineNbr": 150,
      "author": {
        "id": 5015
      },
      "writtenOn": "2015-07-15T04:20:54Z",
      "side": 1,
      "message": "not clear from this text what the status is of the newline at the end of a // comment.\nthe comment \"stops at the end of the line\" but is that before or after the \\n byte?",
      "revId": "4991f8a4a477d897d6b6617f1a54c27c693e9989",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d83d4aa0_14959c0e",
        "filename": "doc/go_spec.html",
        "patchSetId": 5
      },
      "lineNbr": 150,
      "author": {
        "id": 5210
      },
      "writtenOn": "2015-07-21T00:29:13Z",
      "side": 1,
      "message": "I tried to avoid answering this question by making the next sentence independent of the answer: A //-style comment acts like a newline whether it ends with it or before it.\n\nIt only matters for programs dealing with comments. In the AST, //-style comments don\u0027t contain the newline at the end.\n\nIn support of this behavior is the fact that a //-style comment may end with EOF (with the newline missing). For instance, the program\n\npackage main // foo\n\n(with no newline at the end) is valid; the // foo comment ends in EOF but behaves like a newline and causes the (mandatory) semicolon to be inserted.\n\nI could say:\n\nLine comments start with the character sequence // and stop with the last character before the end of the line.\n\nNot sure it\u0027s better.",
      "parentUuid": "18a442b9_961f4ce6",
      "revId": "4991f8a4a477d897d6b6617f1a54c27c693e9989",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "18a442b9_d629d416",
        "filename": "doc/go_spec.html",
        "patchSetId": 5
      },
      "lineNbr": 438,
      "author": {
        "id": 5015
      },
      "writtenOn": "2015-07-15T04:20:54Z",
      "side": 1,
      "message": "\u0027\\\u0027\u0027 // rune constant containing single quote character",
      "revId": "4991f8a4a477d897d6b6617f1a54c27c693e9989",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d83d4aa0_7430a0f0",
        "filename": "doc/go_spec.html",
        "patchSetId": 5
      },
      "lineNbr": 438,
      "author": {
        "id": 5210
      },
      "writtenOn": "2015-07-21T00:29:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "18a442b9_d629d416",
      "revId": "4991f8a4a477d897d6b6617f1a54c27c693e9989",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "18a442b9_b61c50f2",
        "filename": "doc/go_spec.html",
        "patchSetId": 5
      },
      "lineNbr": 497,
      "author": {
        "id": 5015
      },
      "writtenOn": "2015-07-15T04:20:54Z",
      "side": 1,
      "message": "there should be an example with an escaped \"",
      "revId": "4991f8a4a477d897d6b6617f1a54c27c693e9989",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d83d4aa0_94cd0c5e",
        "filename": "doc/go_spec.html",
        "patchSetId": 5
      },
      "lineNbr": 497,
      "author": {
        "id": 5210
      },
      "writtenOn": "2015-07-21T00:29:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "18a442b9_b61c50f2",
      "revId": "4991f8a4a477d897d6b6617f1a54c27c693e9989",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}