{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "3d157a9f_daa33f9b",
        "filename": "src/os/os_windows_test.go",
        "patchSetId": 4
      },
      "lineNbr": 432,
      "author": {
        "id": 34993
      },
      "writtenOn": "2023-07-26T07:32:48Z",
      "side": 1,
      "message": "The `net` command might not be found if the test is executed within a program with restricted permissions, or that doesn\u0027t have system32 in the PATH. I would query the service status using a programmatic way, like this (ommiting errors for clarity):\n\n```\n\tadvapi32, _ :\u003d syscall.LoadDLL(\"advapi32.dll\")\n\tmgrproc, _ :\u003d advapi32.FindProc(\"OpenSCManagerW\")\n\tsrvproc, _ :\u003d advapi32.FindProc(\"OpenServiceW\")\n\tstatusproc, _ :\u003d advapi32.FindProc(\"QueryServiceStatus\")\n\n\tconst (\n\t\tSERVICE_RUNNING      \u003d 4\n\t\tSERVICE_QUERY_STATUS \u003d 4\n\t)\n\tvar status struct {\n\t\t_            int32\n\t\tCurrentState int32\n\t\t_            int32\n\t\t_            int32\n\t\t_            int32\n\t\t_            int32\n\t\t_            int32\n\t}\n\tname :\u003d syscall.StringToUTF16Ptr(\"LanmanWorkstation\")\n\n\tmgr, _, _ :\u003d mgrproc.Call(0, 0, 0)\n\tsrv, _, _ :\u003d srvproc.Call(mgr, uintptr(unsafe.Pointer(name)), SERVICE_QUERY_STATUS)\n\tok, _, _ :\u003d statusproc.Call(srv, uintptr(unsafe.Pointer(\u0026status)))\n\n\tenabled :\u003d ok !\u003d 0 \u0026\u0026 status.CurrentState \u003d\u003d SERVICE_RUNNING\n```",
      "revId": "8dbac2767806ee34b67d48b3cc91e21d3c1313b6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dc46bae8_4e442317",
        "filename": "src/os/os_windows_test.go",
        "patchSetId": 4
      },
      "lineNbr": 432,
      "author": {
        "id": 64033
      },
      "writtenOn": "2023-07-26T08:22:19Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "3d157a9f_daa33f9b",
      "revId": "8dbac2767806ee34b67d48b3cc91e21d3c1313b6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ecf5da01_caf58f6c",
        "filename": "src/os/os_windows_test.go",
        "patchSetId": 4
      },
      "lineNbr": 432,
      "author": {
        "id": 34993
      },
      "writtenOn": "2023-07-26T09:44:06Z",
      "side": 1,
      "message": "Don\u0027t use x/sys/windows here. The standard library has its own internal windows wrappers in syscall/internal/windows. Go ahead and add thr missing functions.",
      "parentUuid": "dc46bae8_4e442317",
      "revId": "8dbac2767806ee34b67d48b3cc91e21d3c1313b6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d3196dad_43bca427",
        "filename": "src/os/os_windows_test.go",
        "patchSetId": 4
      },
      "lineNbr": 432,
      "author": {
        "id": 64033
      },
      "writtenOn": "2023-07-26T12:00:38Z",
      "side": 1,
      "message": "Added to src/os/os_windows_test.go or somewhere else?",
      "parentUuid": "ecf5da01_caf58f6c",
      "revId": "8dbac2767806ee34b67d48b3cc91e21d3c1313b6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d4142195_c8446424",
        "filename": "src/os/os_windows_test.go",
        "patchSetId": 4
      },
      "lineNbr": 432,
      "author": {
        "id": 34993
      },
      "writtenOn": "2023-07-26T12:26:33Z",
      "side": 1,
      "message": "Add them to https://github.com/golang/go/tree/master/src/internal/syscall/windows/syscall_windows.go using `//sys` comments. Once the comment is added, there functions will be autogenerated when running the `//go:generate` command in mksyscall.go (same folder).",
      "parentUuid": "d3196dad_43bca427",
      "revId": "8dbac2767806ee34b67d48b3cc91e21d3c1313b6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}