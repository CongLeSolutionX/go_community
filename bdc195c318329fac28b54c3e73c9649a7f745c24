{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "870c0a2e_21d1deea",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-06-23T23:47:17Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003dbdc195c3\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "bdc195c318329fac28b54c3e73c9649a7f745c24",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "559e7d44_cfbb47b9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-06-24T00:00:49Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "870c0a2e_21d1deea",
      "tag": "autogenerated:trybots~happy",
      "revId": "bdc195c318329fac28b54c3e73c9649a7f745c24",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5d55ffc0_73a7d259",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 6365
      },
      "writtenOn": "2022-06-24T14:46:30Z",
      "side": 1,
      "message": "TRY\u003dlongtest,windows-amd64-longtest,x/tools@windows-amd64-longtest,x/tools@windows-386-longtest",
      "revId": "bdc195c318329fac28b54c3e73c9649a7f745c24",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4fa9e1b4_6f69d35e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-06-24T14:46:43Z",
      "side": 1,
      "message": "SlowBots beginning. Status page: https://farmer.golang.org/try?commit\u003dbdc195c3\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "bdc195c318329fac28b54c3e73c9649a7f745c24",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e0e90a03_e807107f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-06-24T15:01:52Z",
      "side": 1,
      "message": "SlowBots are happy.\n\nSlowBot builds that ran:\n* linux-amd64-longtest\n* windows-amd64-longtest\nAlso tested the following repos:\n* (x/tools) windows-amd64-longtest\n",
      "parentUuid": "4fa9e1b4_6f69d35e",
      "tag": "autogenerated:trybots~happy",
      "revId": "bdc195c318329fac28b54c3e73c9649a7f745c24",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d777e160_5b70a110",
        "filename": "src/cmd/go/internal/modindex/read.go",
        "patchSetId": 1
      },
      "lineNbr": 78,
      "author": {
        "id": 6365
      },
      "writtenOn": "2022-06-24T16:52:17Z",
      "side": 1,
      "message": "(nit) doubled spaces",
      "range": {
        "startLine": 78,
        "startChar": 33,
        "endLine": 78,
        "endChar": 34
      },
      "revId": "bdc195c318329fac28b54c3e73c9649a7f745c24",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d62645c7_30d3bdaa",
        "filename": "src/cmd/go/internal/modindex/read.go",
        "patchSetId": 1
      },
      "lineNbr": 78,
      "author": {
        "id": 10033
      },
      "writtenOn": "2022-06-24T18:17:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d777e160_5b70a110",
      "range": {
        "startLine": 78,
        "startChar": 33,
        "endLine": 78,
        "endChar": 34
      },
      "revId": "bdc195c318329fac28b54c3e73c9649a7f745c24",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eda77588_cf1db1b7",
        "filename": "src/cmd/go/internal/modindex/read.go",
        "patchSetId": 1
      },
      "lineNbr": 88,
      "author": {
        "id": 6365
      },
      "writtenOn": "2022-06-24T16:52:17Z",
      "side": 1,
      "message": "(doubled spaces)",
      "range": {
        "startLine": 88,
        "startChar": 27,
        "endLine": 88,
        "endChar": 29
      },
      "revId": "bdc195c318329fac28b54c3e73c9649a7f745c24",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f5287975_749555b6",
        "filename": "src/cmd/go/internal/modindex/read.go",
        "patchSetId": 1
      },
      "lineNbr": 88,
      "author": {
        "id": 10033
      },
      "writtenOn": "2022-06-24T18:17:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "eda77588_cf1db1b7",
      "range": {
        "startLine": 88,
        "startChar": 27,
        "endLine": 88,
        "endChar": 29
      },
      "revId": "bdc195c318329fac28b54c3e73c9649a7f745c24",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b0929081_1ec32834",
        "filename": "src/cmd/go/internal/modindex/read.go",
        "patchSetId": 1
      },
      "lineNbr": 110,
      "author": {
        "id": 6365
      },
      "writtenOn": "2022-06-24T16:52:17Z",
      "side": 1,
      "message": "(nit)\n\nIIRC `time.Since` makes a fairly expensive syscall. Since the current time shouldn\u0027t change by very much during the loop, consider hoisting this call out:\n\n```\n\tcutoff :\u003d time.Now().Sub(modTimeCutoff)\n\tfor … {\n\t\t…\n\t\tif info.ModTime().After(cutoff) {\n```",
      "range": {
        "startLine": 110,
        "startChar": 5,
        "endLine": 110,
        "endChar": 15
      },
      "revId": "bdc195c318329fac28b54c3e73c9649a7f745c24",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "45f14b14_6bea6952",
        "filename": "src/cmd/go/internal/modindex/read.go",
        "patchSetId": 1
      },
      "lineNbr": 110,
      "author": {
        "id": 10033
      },
      "writtenOn": "2022-06-24T18:17:22Z",
      "side": 1,
      "message": "Sub seems to get the difference between two durations. So I think I have to add -1 * the duration.",
      "parentUuid": "b0929081_1ec32834",
      "range": {
        "startLine": 110,
        "startChar": 5,
        "endLine": 110,
        "endChar": 15
      },
      "revId": "bdc195c318329fac28b54c3e73c9649a7f745c24",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8b2c9556_b4ee6b07",
        "filename": "src/cmd/go/internal/modindex/read.go",
        "patchSetId": 1
      },
      "lineNbr": 110,
      "author": {
        "id": 6365
      },
      "writtenOn": "2022-06-24T18:51:10Z",
      "side": 1,
      "message": "Ah, yep! Or just `Add(-modTimeCutoff)`.",
      "parentUuid": "45f14b14_6bea6952",
      "range": {
        "startLine": 110,
        "startChar": 5,
        "endLine": 110,
        "endChar": 15
      },
      "revId": "bdc195c318329fac28b54c3e73c9649a7f745c24",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ff18785d_2bd064cf",
        "filename": "src/cmd/go/internal/modindex/read.go",
        "patchSetId": 1
      },
      "lineNbr": 110,
      "author": {
        "id": 10033
      },
      "writtenOn": "2022-06-24T19:07:25Z",
      "side": 1,
      "message": "Woah! Amazing!",
      "parentUuid": "8b2c9556_b4ee6b07",
      "range": {
        "startLine": 110,
        "startChar": 5,
        "endLine": 110,
        "endChar": 15
      },
      "revId": "bdc195c318329fac28b54c3e73c9649a7f745c24",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "91883e20_d4588389",
        "filename": "src/cmd/go/internal/modindex/read.go",
        "patchSetId": 1
      },
      "lineNbr": 123,
      "author": {
        "id": 6365
      },
      "writtenOn": "2022-06-24T16:52:17Z",
      "side": 1,
      "message": "Since `GetIndex` and `Get` seem to share some logic, I wonder if it would be clearer to keep this check in `GetIndex` and explicitly write `Get` in terms of that.\n\nSince we use `errors.Is` to check for `ErrNotIndexed` elsewhere, we could use distinct errors wrapping that for the different reasons for not indexing.\n\nPerhaps something like:\n```\n\nvar (\n\terrDisabled \u003d fmt.Errorf(\"%w: module indexing disabled\", ErrNotIndexed)\n\terrNotFromModuleCache \u003d fmt.Errorf(\"%w: not from module cache\", ErrNotIndexed)\n)\n\n\nfunc Get(modroot, pkgdir string) (*IndexPackage, error) {\n\tmi, err :\u003d GetIndex(modroot)\n\tif err \u003d\u003d nil {\n\t\treturn mi.Package(relPath(pkgdir, modroot)), nil\n\t}\n\tif !errors.Is(err, errNotFromModuleCache) {\n\t\treturn nil, err\n\t}\n\treturn openIndexPackage(modroot, pkgdir)\n}\n\n// Get returns the ModuleIndex for the given modroot.\n// It will return ErrNotIndexed if the directory should be read without\n// using the index, for instance because the index is disabled, or the packgae\n// is not in a module.\nfunc GetIndex(modroot string) (*ModuleIndex, error) {\n\tif !enabled || cache.DefaultDir() \u003d\u003d \"off\" {\n\t\treturn nil, errDisabled\n\t}\n\tif modroot \u003d\u003d \"\" {\n\t\tpanic(\"modindex.Get called with empty modroot\")\n\t}\n\tif cfg.BuildMod \u003d\u003d \"vendor\" {\n\t\t// Even if the main module is in the module cache,\n\t\t// its vendored dependencies are not loaded from their\n\t\t// usual cached locations.\n\t\treturn nil, errNotFromModuleCache\n\t}\n\tmodroot \u003d filepath.Clean(modroot)\n\tif !str.HasFilePathPrefix(modroot, cfg.GOMODCACHE) {\n\t\treturn nil, errNotFromModuleCache\n\t}\n\treturn openIndex(modroot, isModCache)\n}\n```",
      "revId": "bdc195c318329fac28b54c3e73c9649a7f745c24",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "86e37a81_8359b69f",
        "filename": "src/cmd/go/internal/modindex/read.go",
        "patchSetId": 1
      },
      "lineNbr": 123,
      "author": {
        "id": 10033
      },
      "writtenOn": "2022-06-24T18:17:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "91883e20_d4588389",
      "revId": "bdc195c318329fac28b54c3e73c9649a7f745c24",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "31fc3c2e_78f43a40",
        "filename": "src/cmd/go/internal/modindex/read.go",
        "patchSetId": 1
      },
      "lineNbr": 124,
      "author": {
        "id": 6365
      },
      "writtenOn": "2022-06-24T16:52:17Z",
      "side": 1,
      "message": "With the switch to per-package indexing, I think we should now be able to index vendored packages as well.",
      "range": {
        "startLine": 124,
        "startChar": 47,
        "endLine": 124,
        "endChar": 71
      },
      "revId": "bdc195c318329fac28b54c3e73c9649a7f745c24",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "420262fb_000eb4e4",
        "filename": "src/cmd/go/internal/modindex/read.go",
        "patchSetId": 1
      },
      "lineNbr": 124,
      "author": {
        "id": 10033
      },
      "writtenOn": "2022-06-24T18:17:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "31fc3c2e_78f43a40",
      "range": {
        "startLine": 124,
        "startChar": 47,
        "endLine": 124,
        "endChar": 71
      },
      "revId": "bdc195c318329fac28b54c3e73c9649a7f745c24",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dde1599a_2140c987",
        "filename": "src/cmd/go/internal/modindex/read.go",
        "patchSetId": 1
      },
      "lineNbr": 166,
      "author": {
        "id": 6365
      },
      "writtenOn": "2022-06-24T16:52:17Z",
      "side": 1,
      "message": "Would it make sense to give these functions and the corresponding types parallel names?\n\nMaybe:\n`Get` → `GetPackage`\n`GetIndex` → `GetModule`\n`IndexPackage` → `Package` (becomes `modindex.Package`)\n`ModuleIndex` → `Module` (becomes `modindex.Module`)",
      "range": {
        "startLine": 135,
        "startChar": 0,
        "endLine": 166,
        "endChar": 1
      },
      "revId": "bdc195c318329fac28b54c3e73c9649a7f745c24",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ffa35dd2_9c8547e6",
        "filename": "src/cmd/go/internal/modindex/read.go",
        "patchSetId": 1
      },
      "lineNbr": 166,
      "author": {
        "id": 10033
      },
      "writtenOn": "2022-06-24T18:17:22Z",
      "side": 1,
      "message": "Done, except for Package (since our copy of build.Package has the same name).",
      "parentUuid": "dde1599a_2140c987",
      "range": {
        "startLine": 135,
        "startChar": 0,
        "endLine": 166,
        "endChar": 1
      },
      "revId": "bdc195c318329fac28b54c3e73c9649a7f745c24",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f5062576_aacb8f3c",
        "filename": "src/cmd/go/internal/modindex/read.go",
        "patchSetId": 1
      },
      "lineNbr": 207,
      "author": {
        "id": 6365
      },
      "writtenOn": "2022-06-24T16:52:17Z",
      "side": 1,
      "message": "The `modroot` passed to `openIndex` and `pkgdir` here both have type `string`, and packages frequently exist at the root of modules.\n\nIn theory we should never attempt a package-index lookup for an indexable module path, but if that were to happen as of this patchset we would panic with a fairly cryptic type-assertion failure at line 226.\n\nPerhaps we could use a separate `par.Cache` for modules and for indices, or explicitly check for collisions and fail with a more informative `internal error` message of some sort?",
      "range": {
        "startLine": 207,
        "startChar": 16,
        "endLine": 207,
        "endChar": 22
      },
      "revId": "bdc195c318329fac28b54c3e73c9649a7f745c24",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "461aabc6_ccf21c3f",
        "filename": "src/cmd/go/internal/modindex/read.go",
        "patchSetId": 1
      },
      "lineNbr": 207,
      "author": {
        "id": 10033
      },
      "writtenOn": "2022-06-24T18:17:22Z",
      "side": 1,
      "message": "Switched to using separate `par.Cache`s.",
      "parentUuid": "f5062576_aacb8f3c",
      "range": {
        "startLine": 207,
        "startChar": 16,
        "endLine": 207,
        "endChar": 22
      },
      "revId": "bdc195c318329fac28b54c3e73c9649a7f745c24",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "221a03b8_4ee862ea",
        "filename": "src/cmd/go/internal/modindex/read.go",
        "patchSetId": 1
      },
      "lineNbr": 289,
      "author": {
        "id": 6365
      },
      "writtenOn": "2022-06-24T16:52:17Z",
      "side": 1,
      "message": "Update comment?\n\n(Maybe also rename `fromBytes` to `modFromBytes` or similar for clarity?)",
      "range": {
        "startLine": 289,
        "startChar": 24,
        "endLine": 289,
        "endChar": 35
      },
      "revId": "bdc195c318329fac28b54c3e73c9649a7f745c24",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3ca298d3_8cedf65d",
        "filename": "src/cmd/go/internal/modindex/read.go",
        "patchSetId": 1
      },
      "lineNbr": 289,
      "author": {
        "id": 10033
      },
      "writtenOn": "2022-06-24T18:17:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "221a03b8_4ee862ea",
      "range": {
        "startLine": 289,
        "startChar": 24,
        "endLine": 289,
        "endChar": 35
      },
      "revId": "bdc195c318329fac28b54c3e73c9649a7f745c24",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3eaf057a_0cf26f38",
        "filename": "src/cmd/go/internal/modindex/read.go",
        "patchSetId": 1
      },
      "lineNbr": 292,
      "author": {
        "id": 6365
      },
      "writtenOn": "2022-06-24T16:52:17Z",
      "side": 1,
      "message": "Maybe expand this panic message a bit?\n(`\"use of package index when not enabled\"`?)",
      "revId": "bdc195c318329fac28b54c3e73c9649a7f745c24",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4bb1ac6d_cba32bad",
        "filename": "src/cmd/go/internal/modindex/read.go",
        "patchSetId": 1
      },
      "lineNbr": 292,
      "author": {
        "id": 10033
      },
      "writtenOn": "2022-06-24T18:17:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3eaf057a_0cf26f38",
      "revId": "bdc195c318329fac28b54c3e73c9649a7f745c24",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a5705c4e_7f51f06b",
        "filename": "src/cmd/go/internal/modindex/read.go",
        "patchSetId": 1
      },
      "lineNbr": 341,
      "author": {
        "id": 6365
      },
      "writtenOn": "2022-06-24T16:52:17Z",
      "side": 1,
      "message": "Is the `modroot` for a given `IndexPackage` always the same? If so, would it make sense to add it as a field in the `IndexPackage` type instead of passing it separately?\n\n(That would make the `IndexPackage` type a bit larger, but for multiple packages within a given module they would presumably share the same underlying string value.)",
      "range": {
        "startLine": 341,
        "startChar": 33,
        "endLine": 341,
        "endChar": 40
      },
      "revId": "bdc195c318329fac28b54c3e73c9649a7f745c24",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b991e16b_990262fa",
        "filename": "src/cmd/go/internal/modindex/read.go",
        "patchSetId": 1
      },
      "lineNbr": 341,
      "author": {
        "id": 6365
      },
      "writtenOn": "2022-06-24T16:52:17Z",
      "side": 1,
      "message": "It looks like `rp` is always required to be non-nil — would it make sense to make `Import` a method on `*IndexPackage` instead of a free function?",
      "range": {
        "startLine": 341,
        "startChar": 49,
        "endLine": 341,
        "endChar": 68
      },
      "revId": "bdc195c318329fac28b54c3e73c9649a7f745c24",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6a8ea644_de7073c9",
        "filename": "src/cmd/go/internal/modindex/read.go",
        "patchSetId": 1
      },
      "lineNbr": 341,
      "author": {
        "id": 10033
      },
      "writtenOn": "2022-06-24T18:17:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b991e16b_990262fa",
      "range": {
        "startLine": 341,
        "startChar": 49,
        "endLine": 341,
        "endChar": 68
      },
      "revId": "bdc195c318329fac28b54c3e73c9649a7f745c24",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b489fd98_66c0b595",
        "filename": "src/cmd/go/internal/modindex/read.go",
        "patchSetId": 1
      },
      "lineNbr": 341,
      "author": {
        "id": 10033
      },
      "writtenOn": "2022-06-24T18:17:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a5705c4e_7f51f06b",
      "range": {
        "startLine": 341,
        "startChar": 33,
        "endLine": 341,
        "endChar": 40
      },
      "revId": "bdc195c318329fac28b54c3e73c9649a7f745c24",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "02007f3e_a6474bf3",
        "filename": "src/cmd/go/internal/modindex/read.go",
        "patchSetId": 1
      },
      "lineNbr": 657,
      "author": {
        "id": 6365
      },
      "writtenOn": "2022-06-24T16:52:17Z",
      "side": 1,
      "message": "Maybe add a comment here? I was wondering whether this should call down through `IsDirWithGoFiles`, but it appears that `goroot.IsStandardPackage` doesn\u0027t check for Go source files either. 🤔",
      "revId": "bdc195c318329fac28b54c3e73c9649a7f745c24",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "acf4a9d0_7b4c1efd",
        "filename": "src/cmd/go/internal/modindex/read.go",
        "patchSetId": 1
      },
      "lineNbr": 657,
      "author": {
        "id": 10033
      },
      "writtenOn": "2022-06-24T18:17:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "02007f3e_a6474bf3",
      "revId": "bdc195c318329fac28b54c3e73c9649a7f745c24",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c922abd1_014c5a42",
        "filename": "src/cmd/go/internal/modindex/read.go",
        "patchSetId": 1
      },
      "lineNbr": 667,
      "author": {
        "id": 6365
      },
      "writtenOn": "2022-06-24T16:52:17Z",
      "side": 1,
      "message": "Hmm... If `rp` might represent a directory without Go files, then perhaps we should name the type `Dir` or `Directory` instead of `Package`.\n\n(A directory that does not contain any Go files is not really a Go package per se.)",
      "range": {
        "startLine": 667,
        "startChar": 26,
        "endLine": 667,
        "endChar": 38
      },
      "revId": "bdc195c318329fac28b54c3e73c9649a7f745c24",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0c038957_bb140a85",
        "filename": "src/cmd/go/internal/modindex/read.go",
        "patchSetId": 1
      },
      "lineNbr": 667,
      "author": {
        "id": 10033
      },
      "writtenOn": "2022-06-24T18:17:22Z",
      "side": 1,
      "message": "That\u0027s true, but IndexPackage is named because it gets inflated into a build.Package. I feel like naming it Dir or Directory doesn\u0027t convey how closely they\u0027re related.",
      "parentUuid": "c922abd1_014c5a42",
      "range": {
        "startLine": 667,
        "startChar": 26,
        "endLine": 667,
        "endChar": 38
      },
      "revId": "bdc195c318329fac28b54c3e73c9649a7f745c24",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3463e2b5_8f7e8f0e",
        "filename": "src/cmd/go/internal/modindex/read.go",
        "patchSetId": 1
      },
      "lineNbr": 667,
      "author": {
        "id": 6365
      },
      "writtenOn": "2022-06-24T18:51:10Z",
      "side": 1,
      "message": "That\u0027s fair. Maybe make the `IndexPackage` doc a bit more precise then?\n\nPerhaps:\n\n```\n// IndexPackage holds the information needed to access information in the\n// index needed to load a package in a specific directory.\n``\n?",
      "parentUuid": "0c038957_bb140a85",
      "range": {
        "startLine": 667,
        "startChar": 26,
        "endLine": 667,
        "endChar": 38
      },
      "revId": "bdc195c318329fac28b54c3e73c9649a7f745c24",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "12c183e4_3cd0399e",
        "filename": "src/cmd/go/internal/modindex/read.go",
        "patchSetId": 1
      },
      "lineNbr": 667,
      "author": {
        "id": 10033
      },
      "writtenOn": "2022-06-24T19:07:25Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3463e2b5_8f7e8f0e",
      "range": {
        "startLine": 667,
        "startChar": 26,
        "endLine": 667,
        "endChar": 38
      },
      "revId": "bdc195c318329fac28b54c3e73c9649a7f745c24",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "db90649b_2db2c258",
        "filename": "src/cmd/go/internal/modindex/read.go",
        "patchSetId": 1
      },
      "lineNbr": 682,
      "author": {
        "id": 6365
      },
      "writtenOn": "2022-06-24T16:52:17Z",
      "side": 1,
      "message": "Similarly for these functions — if `rp` is required to be non-nil, make it a method receiver?",
      "range": {
        "startLine": 666,
        "startChar": 0,
        "endLine": 682,
        "endChar": 31
      },
      "revId": "bdc195c318329fac28b54c3e73c9649a7f745c24",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7520e9d3_5a28a234",
        "filename": "src/cmd/go/internal/modindex/read.go",
        "patchSetId": 1
      },
      "lineNbr": 682,
      "author": {
        "id": 10033
      },
      "writtenOn": "2022-06-24T18:17:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "db90649b_2db2c258",
      "range": {
        "startLine": 666,
        "startChar": 0,
        "endLine": 682,
        "endChar": 31
      },
      "revId": "bdc195c318329fac28b54c3e73c9649a7f745c24",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6195bae5_9250d080",
        "filename": "src/cmd/go/internal/modindex/write.go",
        "patchSetId": 1
      },
      "lineNbr": 42,
      "author": {
        "id": 6365
      },
      "writtenOn": "2022-06-24T16:52:17Z",
      "side": 1,
      "message": "Briefly describe this variant in `index_format.txt`?\n\n(It looks like it\u0027s the same as the module format but without the `n`, `dirnames`, and `packages` fields?)",
      "revId": "bdc195c318329fac28b54c3e73c9649a7f745c24",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "45b0b73e_5d9840f2",
        "filename": "src/cmd/go/internal/modindex/write.go",
        "patchSetId": 1
      },
      "lineNbr": 42,
      "author": {
        "id": 10033
      },
      "writtenOn": "2022-06-24T18:17:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6195bae5_9250d080",
      "revId": "bdc195c318329fac28b54c3e73c9649a7f745c24",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}