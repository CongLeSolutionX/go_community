{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "25e0d8ea_1bb8a960",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 57858
      },
      "writtenOn": "2023-12-21T09:34:37Z",
      "side": 1,
      "message": "Can this bugfix be cherry-picked to version 1.20? I believe the impact is quite significant.",
      "revId": "6b643fd7c152e96fd5b69f01386e7a9689e04ea2",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ae280370_eb4110c6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 64033
      },
      "writtenOn": "2023-12-21T13:29:25Z",
      "side": 1,
      "message": "please see https://go.dev/wiki/MinorReleases",
      "parentUuid": "25e0d8ea_1bb8a960",
      "revId": "6b643fd7c152e96fd5b69f01386e7a9689e04ea2",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e673c2eb_ebfae550",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-12-21T13:29:45Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003d6b643fd7\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "6b643fd7c152e96fd5b69f01386e7a9689e04ea2",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0ce4eec9_ef787b5a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-12-21T13:42:35Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "e673c2eb_ebfae550",
      "tag": "autogenerated:trybots~happy",
      "revId": "6b643fd7c152e96fd5b69f01386e7a9689e04ea2",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "87f445de_620bd55e",
        "filename": "src/net/dnsclient_unix.go",
        "patchSetId": 5
      },
      "lineNbr": 207,
      "author": {
        "id": 5305
      },
      "writtenOn": "2024-01-05T18:46:53Z",
      "side": 1,
      "message": "It\u0027s really unfortunate that `dnsmessage.Parser` doesn\u0027t expose the number of records in each section, which would be simpler than making `extractExtendedRCode` do double duty like this.\n\nHowever, I don\u0027t see a simpler option that doesn\u0027t involve changing `dnsmessage`, so LGTM.",
      "revId": "6b643fd7c152e96fd5b69f01386e7a9689e04ea2",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ae4c0a44_2294ea94",
        "filename": "src/net/dnsclient_unix.go",
        "patchSetId": 5
      },
      "lineNbr": 266,
      "author": {
        "id": 55874
      },
      "writtenOn": "2024-01-05T19:08:42Z",
      "side": 1,
      "message": "is that correct? what if err is some kind of parsing error? Shouldn\u0027t this be `err \u003d\u003d nil`?\n\n```\nfunc extractExtendedRCode(p dnsmessage.Parser, hdr dnsmessage.Header) (dnsmessage.RCode, bool) {\n\tp.SkipAllAnswers()\n\tp.SkipAllAuthorities()\n\thasAdd :\u003d false\n\tfor {\n\t\tahdr, err :\u003d p.AdditionalHeader()\n\t\tif err !\u003d nil {\n\t\t\treturn hdr.RCode, hasAdd\n\t\t}\n\t\thasAdd \u003d true\n\t\tif ahdr.Type \u003d\u003d dnsmessage.TypeOPT {\n\t\t\treturn ahdr.ExtendedRCode(hdr.RCode), hasAdd\n\t\t}\n\t\tp.SkipAdditional()\n\t}\n}\n\n```",
      "range": {
        "startLine": 266,
        "startChar": 21,
        "endLine": 266,
        "endChar": 53
      },
      "revId": "6b643fd7c152e96fd5b69f01386e7a9689e04ea2",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7b0c4931_e3cddddb",
        "filename": "src/net/dnsclient_unix.go",
        "patchSetId": 5
      },
      "lineNbr": 266,
      "author": {
        "id": 57858
      },
      "writtenOn": "2024-01-06T01:45:52Z",
      "side": 1,
      "message": "Perhaps I should add another check for ErrNotStarted? Because I believe that even if there is a parsing error, it still indicates the presence of an Additional section. The absence of it would only be possible if there is an error in Parser.checkAdvance.",
      "parentUuid": "ae4c0a44_2294ea94",
      "range": {
        "startLine": 266,
        "startChar": 21,
        "endLine": 266,
        "endChar": 53
      },
      "revId": "6b643fd7c152e96fd5b69f01386e7a9689e04ea2",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1a0739e9_06ae615e",
        "filename": "src/net/dnsclient_unix.go",
        "patchSetId": 5
      },
      "lineNbr": 266,
      "author": {
        "id": 55874
      },
      "writtenOn": "2024-01-06T08:47:27Z",
      "side": 1,
      "message": "\u003e Perhaps I should add another check for ErrNotStarted? Because I believe that even if there is a parsing error, it still indicates the presence of an Additional section. \n\nI might be wrong, but I belive that `ErrNotStarted` is only returned when using invalid `*Header` method, that is not bound to the current parsing section. In this case it shouldn\u0027t be returned, because we skip the answers and authorities section.\n\nIt is even documented as such:\n```\n// ErrNotStarted indicates that the prerequisite information isn\u0027t\n// available yet because the previous records haven\u0027t been appropriately\n// parsed, skipped or finished.\nErrNotStarted \u003d errors.New(\"parsing/packing of this type isn\u0027t available yet\")\n```",
      "parentUuid": "7b0c4931_e3cddddb",
      "range": {
        "startLine": 266,
        "startChar": 21,
        "endLine": 266,
        "endChar": 53
      },
      "revId": "6b643fd7c152e96fd5b69f01386e7a9689e04ea2",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4faf7938_3fd5f93c",
        "filename": "src/net/dnsclient_unix.go",
        "patchSetId": 5
      },
      "lineNbr": 266,
      "author": {
        "id": 57858
      },
      "writtenOn": "2024-01-06T09:04:11Z",
      "side": 1,
      "message": "For this reason, and since the SkipAllAnswers and SkipAllAuthorities called at the beginning of the function do not check for errors, I believe that encountering ErrNotStarted or ErrSectionDone here can both be considered as having no additional section. Should I add a check for ErrNotStarted, or is the current implementation sufficient?",
      "parentUuid": "1a0739e9_06ae615e",
      "range": {
        "startLine": 266,
        "startChar": 21,
        "endLine": 266,
        "endChar": 53
      },
      "revId": "6b643fd7c152e96fd5b69f01386e7a9689e04ea2",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "457dad84_ae09cc8b",
        "filename": "src/net/dnsclient_unix.go",
        "patchSetId": 5
      },
      "lineNbr": 266,
      "author": {
        "id": 57858
      },
      "writtenOn": "2024-01-06T09:11:50Z",
      "side": 1,
      "message": "Sorry, I was mistaken. The error handling in Resolver.exchange -\u003e SkipQuestion already covers this scenario. Therefore, I believe the current implementation is sufficient.",
      "parentUuid": "4faf7938_3fd5f93c",
      "range": {
        "startLine": 266,
        "startChar": 21,
        "endLine": 266,
        "endChar": 53
      },
      "revId": "6b643fd7c152e96fd5b69f01386e7a9689e04ea2",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}