{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "529afe43_e4ffdbb5",
        "filename": "src/cmd/compile/internal/gc/sinit.go",
        "patchSetId": 2
      },
      "lineNbr": 154,
      "author": {
        "id": 5440
      },
      "writtenOn": "2020-12-15T10:08:17Z",
      "side": 1,
      "message": "This code has bothered me as iffy for a while, but seeing these now emphasized as ir.Name copies just really makes it stand out as wrong even more.",
      "revId": "a088cc9c37e147085ea3167cb360f259f38307db",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ff26b34e_576cfa3b",
        "filename": "src/cmd/compile/internal/gc/sinit.go",
        "patchSetId": 2
      },
      "lineNbr": 164,
      "author": {
        "id": 5440
      },
      "writtenOn": "2020-12-15T10:08:17Z",
      "side": 1,
      "message": "It looks like this is the only staticcopy call that passes an ir.Node as the rhs argument. You could move the ONAME/OMETHEXPR checks here if you wanted to tighten down the parameter type to *ir.Name.",
      "revId": "a088cc9c37e147085ea3167cb360f259f38307db",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6f9e797c_b96a93d1",
        "filename": "src/cmd/compile/internal/gc/typecheck.go",
        "patchSetId": 2
      },
      "lineNbr": 2410,
      "author": {
        "id": 5440
      },
      "writtenOn": "2020-12-15T10:08:17Z",
      "side": 1,
      "message": "I think you can just use me.Method.Nname.(*ir.Name) instead of adding me.FuncName.",
      "range": {
        "startLine": 2406,
        "startChar": 0,
        "endLine": 2410,
        "endChar": 16
      },
      "revId": "a088cc9c37e147085ea3167cb360f259f38307db",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f58b3b5e_5fcacdc7",
        "filename": "src/cmd/compile/internal/ir/expr.go",
        "patchSetId": 2
      },
      "lineNbr": 529,
      "author": {
        "id": 5440
      },
      "writtenOn": "2020-12-15T10:08:17Z",
      "side": 1,
      "message": "It\u0027s actually a method expression, and X here *is* a type. CallPart represents method values.\n\n(Sorry, I remember pointing out it should be \"method value\". I evidently just took at face value that the comment about X being an expression was correct.)",
      "range": {
        "startLine": 529,
        "startChar": 21,
        "endLine": 529,
        "endChar": 76
      },
      "revId": "a088cc9c37e147085ea3167cb360f259f38307db",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ea29aa74_ac3b5d97",
        "filename": "src/cmd/compile/internal/ir/expr.go",
        "patchSetId": 2
      },
      "lineNbr": 532,
      "author": {
        "id": 5440
      },
      "writtenOn": "2020-12-15T10:08:17Z",
      "side": 1,
      "message": "We should be able to change this from Node to *types.Type, since it\u0027s always an OTYPE. This would also break toolstash though.",
      "revId": "a088cc9c37e147085ea3167cb360f259f38307db",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}