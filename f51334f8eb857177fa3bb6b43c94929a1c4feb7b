{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "b577df86_d1097421",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-08-23T06:04:32Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003df51334f8\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "f51334f8eb857177fa3bb6b43c94929a1c4feb7b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "58ef5e3c_89924c0c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-08-23T06:16:30Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "b577df86_d1097421",
      "tag": "autogenerated:trybots~happy",
      "revId": "f51334f8eb857177fa3bb6b43c94929a1c4feb7b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e56f2dab_5fd5c153",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5200
      },
      "writtenOn": "2022-08-23T22:26:44Z",
      "side": 1,
      "message": "If we\u0027re going to do this, I think we\u0027d want to enforce it. That means adding to the description of ADDconst in ARM64Ops.go the condition that its auxint must satisfy isaddcon(c). Then check that invariant in cmd/compile/internal/ssa/check.go (and arm64/ssa.go also?).\n\nIt sounds like a lot of work for all the opcodes affected, though.\n\n",
      "revId": "f51334f8eb857177fa3bb6b43c94929a1c4feb7b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2df1bef9_1b7b7696",
        "filename": "src/cmd/compile/internal/ssa/gen/ARM64.rules",
        "patchSetId": 1
      },
      "lineNbr": 1200,
      "author": {
        "id": 5200
      },
      "writtenOn": "2022-08-23T22:26:44Z",
      "side": 1,
      "message": "There are a lot of rules that use ADDconst that now need a (ADD (MOVDconst ...)) variant. For example:\n\n(ADDconst [c] (ADDconst [d] x)) \u003d\u003e (ADDconst [c+d] x)\n\nWe still want to constant fold the add if c and/or d are not in the isaddcon range.",
      "revId": "f51334f8eb857177fa3bb6b43c94929a1c4feb7b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9fc93088_757b7198",
        "filename": "src/cmd/compile/internal/ssa/gen/ARM64.rules",
        "patchSetId": 1
      },
      "lineNbr": 1227,
      "author": {
        "id": 5200
      },
      "writtenOn": "2022-08-23T22:26:44Z",
      "side": 1,
      "message": "I don\u0027t think you need the select ops wrappers here. Just the single rule\n\n(ADDSflags x (MOVDconst [c])) \u0026\u0026 isaddcon(c) \u003d\u003e (ADDSconstflags [c] x)",
      "revId": "f51334f8eb857177fa3bb6b43c94929a1c4feb7b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ea030d80_48fc7c7e",
        "filename": "src/cmd/compile/internal/ssa/gen/ARM64.rules",
        "patchSetId": 1
      },
      "lineNbr": 1459,
      "author": {
        "id": 5200
      },
      "writtenOn": "2022-08-23T22:26:44Z",
      "side": 1,
      "message": "Do we also need rules to not generate ADDconst here? Like\n\n(MADD  a (MOVDconst [c]) (MOVDconst [d])) \u0026\u0026  isaddcon(c*d) \u003d\u003e (ADDconst [c*d] a)\n(MADD  a (MOVDconst [c]) (MOVDconst [d])) \u0026\u0026 !isaddcon(c*d) \u003d\u003e (ADD a (MOVDconst [c*d]))\n\nI think there are lots of places in these rules that take or generate an *const op that will need modification.",
      "revId": "f51334f8eb857177fa3bb6b43c94929a1c4feb7b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "11b380b5_7c087041",
        "filename": "test/codegen/bits.go",
        "patchSetId": 1
      },
      "lineNbr": 376,
      "author": {
        "id": 5200
      },
      "writtenOn": "2022-08-23T22:26:44Z",
      "side": 1,
      "message": "d1 isn\u0027t testing anything. Just return d here and get rid of the b argument?",
      "revId": "f51334f8eb857177fa3bb6b43c94929a1c4feb7b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}