{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "93b5eb12_622990b0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 25391
      },
      "writtenOn": "2024-06-20T19:33:47Z",
      "side": 1,
      "message": "This will fill a gap for us, but it\u0027s odd that this was the case for so long. I\u0027m worried about both the performance impact as well as whether there are some cases where this isn\u0027t actually safe (though I\u0027d be surprised about that).\n\nIn any case, early in cycle for next release.",
      "revId": "c17f7da56b750ce77f894bae63d36a97d1c506c4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b1e67655_039e4eaf",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 25391
      },
      "writtenOn": "2024-06-20T19:33:55Z",
      "side": 1,
      "message": "needs tests",
      "revId": "c17f7da56b750ce77f894bae63d36a97d1c506c4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "18750e77_0db9bd7c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 25391
      },
      "writtenOn": "2024-06-20T19:45:43Z",
      "side": 1,
      "message": "before the trybots even failed, I realized the problem with this CL: it uses running on the thread stack as a signal that it should try to find the goroutine that transitioned _to_ the thread stack and take *its* backtrace. in many cases the behavior in this CL is actually wrong.\n\nwhat we really need to do is refactor the stack trace acquisition code to have the caller be much more explicit about what is the right choice.",
      "parentUuid": "93b5eb12_622990b0",
      "revId": "c17f7da56b750ce77f894bae63d36a97d1c506c4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8cee254a_56dc83aa",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 25391
      },
      "writtenOn": "2024-06-20T20:11:34Z",
      "side": 1,
      "message": "OK, that\u0027s actually not true, there\u0027s an easy workaround.\n\nmy original comment here stands, and in addition, what\u0027s implemented here appears to grab way more than necessary. in particular, it doesn\u0027t stop at mcall but continues through to the last goroutine that was executing (since mcall still has that association), which is probably going to be buggy.",
      "parentUuid": "18750e77_0db9bd7c",
      "revId": "c17f7da56b750ce77f894bae63d36a97d1c506c4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4532b51b_cb63d484",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 25391
      },
      "writtenOn": "2024-06-20T20:31:23Z",
      "side": 1,
      "message": "aaaaand I spoke too soon. I guess there are quite a few situations where this isn\u0027t safe.",
      "parentUuid": "8cee254a_56dc83aa",
      "revId": "c17f7da56b750ce77f894bae63d36a97d1c506c4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}