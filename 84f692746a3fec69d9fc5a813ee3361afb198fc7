{
  "comments": [
    {
      "key": {
        "uuid": "2b9e0b15_428eaf8b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-02-05T16:06:12Z",
      "side": 1,
      "message": "functions",
      "range": {
        "startLine": 9,
        "startChar": 11,
        "endLine": 9,
        "endChar": 20
      },
      "revId": "84f692746a3fec69d9fc5a813ee3361afb198fc7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "90191434_7d55264b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 20,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-02-05T16:06:12Z",
      "side": 1,
      "message": "Interesting. This is, of course, not how function calls normally work. And it would have some odd consequences, like if you did a stack trace while in g, it would look like f called g.\n\nIs the reason for this to let debugCall open up the argument frame for f so that there\u0027s a place to put g\u0027s result? Why not do something more like a typical function call:\n\n1. Initiate the call to g. When debugCall has opened g\u0027s argument frame, copy x in. Resume until debugCall indicates g has returned.\n2. Read g\u0027s result off the stack into debugger memory.\n3. Let g return all the way and stop it at a breakpoint in the current frame.\n4. Initiate the call to f. When debugCall has opened f\u0027s argument frame, copy g\u0027s result out of debugger memory and into f\u0027s argument.\n5. Complete the call to f.\n\nIs there a reason this doesn\u0027t work? (Or am I totally missing what problem this is solving? :)",
      "revId": "84f692746a3fec69d9fc5a813ee3361afb198fc7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "128b9a37_1794d2ae",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 30,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-02-05T16:06:12Z",
      "side": 1,
      "message": "return",
      "range": {
        "startLine": 30,
        "startChar": 39,
        "endLine": 30,
        "endChar": 45
      },
      "revId": "84f692746a3fec69d9fc5a813ee3361afb198fc7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dbd85723_23afe02c",
        "filename": "src/runtime/debugcall.go",
        "patchSetId": 1
      },
      "lineNbr": 51,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-02-05T16:06:12Z",
      "side": 1,
      "message": "Document here why we\u0027re whitelisting these.\n\nAlso, document at the \"#define DEBUG_CALL_FN...\" that we assume the debug call wrappers are safe points to inject another call at. That\u0027s true right now, but that will help ensure that stays true.",
      "revId": "84f692746a3fec69d9fc5a813ee3361afb198fc7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    }
  ]
}