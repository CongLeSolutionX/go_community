{
  "comments": [
    {
      "key": {
        "uuid": "69a34cd8_d8d0a28e",
        "filename": "src/internal/syscall/unix/copy_file_range_linux_riscv64.go",
        "patchSetId": 3
      },
      "lineNbr": 7,
      "author": {
        "id": 19560
      },
      "writtenOn": "2020-04-22T08:07:04Z",
      "side": 1,
      "message": "This uses the same number as arm64 because both arches use asm-generic in the kernel, so their syscall numbers are always guaranteed to be the same. The getrandom syscall number for arm64 and riscv64 are thus defined in getrandom_linux_generic.go. I\u0027d suggest to use a similar scheme for this syscall number (i.e. copy_file_range_linux_generic.go with arm64 and riscv64 build tags).\n\nOr even better, rename the getrandom_linux_*.go files to something like sysnum_linux_*.go and define all the syscall numbers in there rather than creating a new file per GOARCH just to hold the syscall number.",
      "revId": "edaf4187277ef312b60da27353bdee31cd9a98a2",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1303aef2_b900a79d",
        "filename": "src/internal/syscall/unix/copy_file_range_linux_riscv64.go",
        "patchSetId": 3
      },
      "lineNbr": 7,
      "author": {
        "id": 27279
      },
      "writtenOn": "2020-04-22T17:02:19Z",
      "side": 1,
      "message": "Done. I merged the getrandom(2) numbers with the copy_file_range(2) ones as you described.",
      "parentUuid": "69a34cd8_d8d0a28e",
      "revId": "edaf4187277ef312b60da27353bdee31cd9a98a2",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}