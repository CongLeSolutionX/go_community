From bfc3a78d5a739e6b78f739357c7a6f3376a703da Mon Sep 17 00:00:00 2001
From: liuxiaodong <liuxiaodong@loongson.cn>
Date: Thu, 26 Aug 2021 14:05:36 +0800
Subject: [PATCH 07/10] api: fix api check error
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Change-Id: I770786e4443895f905fe80ba1e79a633abb17f8b
Reviewed-on: http://rd.loongson.cn:8081/19327
Tested-by: 刘小东 <liuxiaodong@loongson.cn>
Reviewed-by: 陆伟宁 <luweining@loongson.cn>
---
 api/next.txt | 151 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 151 insertions(+)

diff --git a/api/next.txt b/api/next.txt
index e69de29..85c849a 100644
--- a/api/next.txt
+++ b/api/next.txt
@@ -0,0 +1,151 @@
+pkg debug/elf, const EM_LOONGARCH = 258
+pkg debug/elf, const EM_LOONGARCH Machine
+pkg debug/elf, const R_LARCH_32 = 1
+pkg debug/elf, const R_LARCH_32 R_LARCH
+pkg debug/elf, const R_LARCH_64 = 2
+pkg debug/elf, const R_LARCH_64 R_LARCH
+pkg debug/elf, const R_LARCH_ADD16 = 48
+pkg debug/elf, const R_LARCH_ADD16 R_LARCH
+pkg debug/elf, const R_LARCH_ADD24 = 49
+pkg debug/elf, const R_LARCH_ADD24 R_LARCH
+pkg debug/elf, const R_LARCH_ADD32 = 50
+pkg debug/elf, const R_LARCH_ADD32 R_LARCH
+pkg debug/elf, const R_LARCH_ADD64 = 51
+pkg debug/elf, const R_LARCH_ADD64 R_LARCH
+pkg debug/elf, const R_LARCH_ADD8 = 47
+pkg debug/elf, const R_LARCH_ADD8 R_LARCH
+pkg debug/elf, const R_LARCH_COPY = 4
+pkg debug/elf, const R_LARCH_COPY R_LARCH
+pkg debug/elf, const R_LARCH_IRELATIVE = 12
+pkg debug/elf, const R_LARCH_IRELATIVE R_LARCH
+pkg debug/elf, const R_LARCH_JUMP_SLOT = 5
+pkg debug/elf, const R_LARCH_JUMP_SLOT R_LARCH
+pkg debug/elf, const R_LARCH_MARK_LA = 20
+pkg debug/elf, const R_LARCH_MARK_LA R_LARCH
+pkg debug/elf, const R_LARCH_MARK_PCREL = 21
+pkg debug/elf, const R_LARCH_MARK_PCREL R_LARCH
+pkg debug/elf, const R_LARCH_NONE = 0
+pkg debug/elf, const R_LARCH_NONE R_LARCH
+pkg debug/elf, const R_LARCH_RELATIVE = 3
+pkg debug/elf, const R_LARCH_RELATIVE R_LARCH
+pkg debug/elf, const R_LARCH_SOP_ADD = 35
+pkg debug/elf, const R_LARCH_SOP_ADD R_LARCH
+pkg debug/elf, const R_LARCH_SOP_AND = 36
+pkg debug/elf, const R_LARCH_SOP_AND R_LARCH
+pkg debug/elf, const R_LARCH_SOP_ASSERT = 30
+pkg debug/elf, const R_LARCH_SOP_ASSERT R_LARCH
+pkg debug/elf, const R_LARCH_SOP_IF_ELSE = 37
+pkg debug/elf, const R_LARCH_SOP_IF_ELSE R_LARCH
+pkg debug/elf, const R_LARCH_SOP_NOT = 31
+pkg debug/elf, const R_LARCH_SOP_NOT R_LARCH
+pkg debug/elf, const R_LARCH_SOP_POP_32_S_0_10_10_16_S2 = 45
+pkg debug/elf, const R_LARCH_SOP_POP_32_S_0_10_10_16_S2 R_LARCH
+pkg debug/elf, const R_LARCH_SOP_POP_32_S_0_5_10_16_S2 = 44
+pkg debug/elf, const R_LARCH_SOP_POP_32_S_0_5_10_16_S2 R_LARCH
+pkg debug/elf, const R_LARCH_SOP_POP_32_S_10_12 = 40
+pkg debug/elf, const R_LARCH_SOP_POP_32_S_10_12 R_LARCH
+pkg debug/elf, const R_LARCH_SOP_POP_32_S_10_16 = 41
+pkg debug/elf, const R_LARCH_SOP_POP_32_S_10_16 R_LARCH
+pkg debug/elf, const R_LARCH_SOP_POP_32_S_10_16_S2 = 42
+pkg debug/elf, const R_LARCH_SOP_POP_32_S_10_16_S2 R_LARCH
+pkg debug/elf, const R_LARCH_SOP_POP_32_S_10_5 = 38
+pkg debug/elf, const R_LARCH_SOP_POP_32_S_10_5 R_LARCH
+pkg debug/elf, const R_LARCH_SOP_POP_32_S_5_20 = 43
+pkg debug/elf, const R_LARCH_SOP_POP_32_S_5_20 R_LARCH
+pkg debug/elf, const R_LARCH_SOP_POP_32_U = 46
+pkg debug/elf, const R_LARCH_SOP_POP_32_U R_LARCH
+pkg debug/elf, const R_LARCH_SOP_POP_32_U_10_12 = 39
+pkg debug/elf, const R_LARCH_SOP_POP_32_U_10_12 R_LARCH
+pkg debug/elf, const R_LARCH_SOP_PUSH_ABSOLUTE = 23
+pkg debug/elf, const R_LARCH_SOP_PUSH_ABSOLUTE R_LARCH
+pkg debug/elf, const R_LARCH_SOP_PUSH_DUP = 24
+pkg debug/elf, const R_LARCH_SOP_PUSH_DUP R_LARCH
+pkg debug/elf, const R_LARCH_SOP_PUSH_GPREL = 25
+pkg debug/elf, const R_LARCH_SOP_PUSH_GPREL R_LARCH
+pkg debug/elf, const R_LARCH_SOP_PUSH_PCREL = 22
+pkg debug/elf, const R_LARCH_SOP_PUSH_PCREL R_LARCH
+pkg debug/elf, const R_LARCH_SOP_PUSH_PLT_PCREL = 29
+pkg debug/elf, const R_LARCH_SOP_PUSH_PLT_PCREL R_LARCH
+pkg debug/elf, const R_LARCH_SOP_PUSH_TLS_GD = 28
+pkg debug/elf, const R_LARCH_SOP_PUSH_TLS_GD R_LARCH
+pkg debug/elf, const R_LARCH_SOP_PUSH_TLS_GOT = 27
+pkg debug/elf, const R_LARCH_SOP_PUSH_TLS_GOT R_LARCH
+pkg debug/elf, const R_LARCH_SOP_PUSH_TLS_TPREL = 26
+pkg debug/elf, const R_LARCH_SOP_PUSH_TLS_TPREL R_LARCH
+pkg debug/elf, const R_LARCH_SOP_SL = 33
+pkg debug/elf, const R_LARCH_SOP_SL R_LARCH
+pkg debug/elf, const R_LARCH_SOP_SR = 34
+pkg debug/elf, const R_LARCH_SOP_SR R_LARCH
+pkg debug/elf, const R_LARCH_SOP_SUB = 32
+pkg debug/elf, const R_LARCH_SOP_SUB R_LARCH
+pkg debug/elf, const R_LARCH_SUB16 = 53
+pkg debug/elf, const R_LARCH_SUB16 R_LARCH
+pkg debug/elf, const R_LARCH_SUB24 = 54
+pkg debug/elf, const R_LARCH_SUB24 R_LARCH
+pkg debug/elf, const R_LARCH_SUB32 = 55
+pkg debug/elf, const R_LARCH_SUB32 R_LARCH
+pkg debug/elf, const R_LARCH_SUB64 = 56
+pkg debug/elf, const R_LARCH_SUB64 R_LARCH
+pkg debug/elf, const R_LARCH_SUB8 = 52
+pkg debug/elf, const R_LARCH_SUB8 R_LARCH
+pkg debug/elf, const R_LARCH_TLS_DTPMOD32 = 6
+pkg debug/elf, const R_LARCH_TLS_DTPMOD32 R_LARCH
+pkg debug/elf, const R_LARCH_TLS_DTPMOD64 = 7
+pkg debug/elf, const R_LARCH_TLS_DTPMOD64 R_LARCH
+pkg debug/elf, const R_LARCH_TLS_DTPREL32 = 8
+pkg debug/elf, const R_LARCH_TLS_DTPREL32 R_LARCH
+pkg debug/elf, const R_LARCH_TLS_DTPREL64 = 9
+pkg debug/elf, const R_LARCH_TLS_DTPREL64 R_LARCH
+pkg debug/elf, const R_LARCH_TLS_TPREL32 = 10
+pkg debug/elf, const R_LARCH_TLS_TPREL32 R_LARCH
+pkg debug/elf, const R_LARCH_TLS_TPREL64 = 11
+pkg debug/elf, const R_LARCH_TLS_TPREL64 R_LARCH
+pkg debug/elf, method (R_LARCH) GoString() string
+pkg debug/elf, method (R_LARCH) String() string
+pkg debug/elf, type R_LARCH int
+pkg go/ast, method (*MultiIndexExpr) End() token.Pos
+pkg go/ast, method (*MultiIndexExpr) Pos() token.Pos
+pkg go/ast, type FuncType struct, TParams *FieldList
+pkg go/ast, type MultiIndexExpr struct
+pkg go/ast, type MultiIndexExpr struct, Indices []Expr
+pkg go/ast, type MultiIndexExpr struct, Lbrack token.Pos
+pkg go/ast, type MultiIndexExpr struct, Rbrack token.Pos
+pkg go/ast, type MultiIndexExpr struct, X Expr
+pkg go/ast, type TypeSpec struct, TParams *FieldList
+pkg go/constant, method (Kind) String() string
+pkg go/token, const TILDE = 88
+pkg go/token, const TILDE Token
+pkg go/types, func NewUnion([]Type, []bool) *Union
+pkg go/types, method (*Checker) Instantiate(token.Pos, Type, []Type, []token.Pos, bool) Type
+pkg go/types, method (*Checker) InstantiateLazy(token.Pos, Type, []Type, []token.Pos, bool) Type
+pkg go/types, method (*Checker) NewTypeParam(*TypeName, Type) *TypeParam
+pkg go/types, method (*Interface) IsComparable() bool
+pkg go/types, method (*Interface) IsConstraint() bool
+pkg go/types, method (*Named) NumTArgs() int
+pkg go/types, method (*Named) SetTArgs([]Type)
+pkg go/types, method (*Named) SetTParams([]*TypeName)
+pkg go/types, method (*Named) TArg(int) Type
+pkg go/types, method (*Named) TParams() *TypeParams
+pkg go/types, method (*Signature) RParams() *TypeParams
+pkg go/types, method (*Signature) SetRParams([]*TypeName)
+pkg go/types, method (*Signature) SetTParams([]*TypeName)
+pkg go/types, method (*Signature) TParams() *TypeParams
+pkg go/types, method (*TypeParam) Constraint() Type
+pkg go/types, method (*TypeParam) SetConstraint(Type)
+pkg go/types, method (*TypeParam) String() string
+pkg go/types, method (*TypeParam) Underlying() Type
+pkg go/types, method (*TypeParams) At(int) *TypeName
+pkg go/types, method (*TypeParams) Len() int
+pkg go/types, method (*Union) IsEmpty() bool
+pkg go/types, method (*Union) NumTerms() int
+pkg go/types, method (*Union) String() string
+pkg go/types, method (*Union) Term(int) (Type, bool)
+pkg go/types, method (*Union) Underlying() Type
+pkg go/types, type Config struct, GoVersion string
+pkg go/types, type Inferred struct
+pkg go/types, type Inferred struct, Sig *Signature
+pkg go/types, type Inferred struct, TArgs []Type
+pkg go/types, type Info struct, Inferred map[ast.Expr]Inferred
+pkg go/types, type TypeParam struct
+pkg go/types, type TypeParams struct
+pkg go/types, type Union struct
-- 
2.1.0

