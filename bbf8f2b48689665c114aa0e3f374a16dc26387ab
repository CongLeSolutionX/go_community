{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "13c7016a_ba9619c7",
        "filename": "src/cmd/compile/internal/ssa/reassociate.go",
        "patchSetId": 4
      },
      "lineNbr": 11,
      "author": {
        "id": 5200
      },
      "writtenOn": "2023-05-08T15:17:02Z",
      "side": 1,
      "message": "This might be easier if you just forget about the original nodes, except for the root one.\nJust build a binary tree from all the leaves. The old nodes will be removed by deadcode.",
      "revId": "bbf8f2b48689665c114aa0e3f374a16dc26387ab",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "745839da_f77c304b",
        "filename": "src/cmd/compile/internal/ssa/reassociate.go",
        "patchSetId": 4
      },
      "lineNbr": 11,
      "author": {
        "id": 62691
      },
      "writtenOn": "2023-05-08T21:21:43Z",
      "side": 1,
      "message": "For ILP work this may be more appropriate, but my eventual goal is to preserve block positioning rather than moving nodes from other blocks in. Forgetting about the original nodes would mean I need to keep track of the old nodes\u0027 blocks. This helps preserve loop invariant expressions as currently it could possibly pull invariant expressions in.\n\nWe can always forget the nodes for now but then be more careful after I can spend some more time to refactor.",
      "parentUuid": "13c7016a_ba9619c7",
      "revId": "bbf8f2b48689665c114aa0e3f374a16dc26387ab",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5ef484df_6382ceb4",
        "filename": "src/cmd/compile/internal/ssa/reassociate.go",
        "patchSetId": 4
      },
      "lineNbr": 11,
      "author": {
        "id": 5200
      },
      "writtenOn": "2023-05-09T16:32:21Z",
      "side": 1,
      "message": "I\u0027m not sure there\u0027s any general way to keep the block of the nodes.\n\nv1:(x + v2:(y + v3:(z + w)))\n\nb1:\n  v3: z+w\n  v2: y+v3\nb2:\n  v1: x+v2\n\nIf you\u0027re going to reassociate to (x+y)+(z+w), then we can\u0027t have anything but v3 in b1. If we reuse v2 to do (x+y), it needs to move to b2.",
      "parentUuid": "745839da_f77c304b",
      "revId": "bbf8f2b48689665c114aa0e3f374a16dc26387ab",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7161d68c_27cd4288",
        "filename": "src/cmd/compile/internal/ssa/reassociate.go",
        "patchSetId": 4
      },
      "lineNbr": 11,
      "author": {
        "id": 62691
      },
      "writtenOn": "2023-05-09T18:24:29Z",
      "side": 1,
      "message": "I believe LLVM calculates a `rank` to correctly reassociate so it doesn\u0027t pull up/pull down instructions it shouldn\u0027t.\n\nI think I want to go back to the drawing board on this pass, though. Reassociation !\u003d ILP",
      "parentUuid": "5ef484df_6382ceb4",
      "revId": "bbf8f2b48689665c114aa0e3f374a16dc26387ab",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e05f0359_6e4cc3df",
        "filename": "src/cmd/compile/internal/ssa/reassociate.go",
        "patchSetId": 4
      },
      "lineNbr": 42,
      "author": {
        "id": 5200
      },
      "writtenOn": "2023-05-08T15:17:02Z",
      "side": 1,
      "message": "This file needs gofmt-ing, there is a bunch of extraneous whitespace.",
      "revId": "bbf8f2b48689665c114aa0e3f374a16dc26387ab",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "88c640f5_a159f8ba",
        "filename": "src/cmd/compile/internal/ssa/reassociate.go",
        "patchSetId": 4
      },
      "lineNbr": 42,
      "author": {
        "id": 62691
      },
      "writtenOn": "2023-05-08T21:21:43Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "e05f0359_6e4cc3df",
      "revId": "bbf8f2b48689665c114aa0e3f374a16dc26387ab",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "03a92b75_6a06762c",
        "filename": "src/cmd/compile/internal/ssa/reassociate.go",
        "patchSetId": 4
      },
      "lineNbr": 73,
      "author": {
        "id": 5200
      },
      "writtenOn": "2023-05-08T15:17:02Z",
      "side": 1,
      "message": "Is this still a problem with the new memcombine pass?\nI think it should handle reassociation just fine.\n\nhttps://go-review.googlesource.com/c/go/+/478475",
      "revId": "bbf8f2b48689665c114aa0e3f374a16dc26387ab",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eee83e5b_d3cf8988",
        "filename": "src/cmd/compile/internal/ssa/reassociate.go",
        "patchSetId": 4
      },
      "lineNbr": 73,
      "author": {
        "id": 62691
      },
      "writtenOn": "2023-05-08T21:21:43Z",
      "side": 1,
      "message": "It appears that it is still a problem.\n\nmemcombine looks for a zero extension in the first argument to an or, and then a sub-expression that is also an or. Once the tree gets balanced however, all sub-expressions that aren\u0027t leaves are ors.\n\n\nI think that a) we should probably fix the problem in memcombine so that it can handle reassociate and b) keep this check in since balanceExprTree would get called a whole lot when it doesn\u0027t need to be otherwise. \n\nAlso, this heuristic is good enough, but wouldn\u0027t handle something odd like:\n```\nexprToMemcombine :\u003d l[0] | l[1] \u003c\u003c 8 | l[2] \u003c\u003c 16 | l[3] \u003c\u003c 24\nbitwiseAndLoad :\u003d a | b | c | d | e | exprToMemcombine\n```\n\nreassociate needs to run very early on to be helpful, so I don\u0027t think moving it after memcombine is a good idea either.",
      "parentUuid": "03a92b75_6a06762c",
      "revId": "bbf8f2b48689665c114aa0e3f374a16dc26387ab",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cc9c1061_896e3d98",
        "filename": "src/cmd/compile/internal/ssa/reassociate.go",
        "patchSetId": 4
      },
      "lineNbr": 73,
      "author": {
        "id": 5200
      },
      "writtenOn": "2023-05-09T16:32:21Z",
      "side": 1,
      "message": "\u003e memcombine looks for a zero extension in the first argument to an or, and then a sub-expression that is also an or. Once the tree gets balanced however, all sub-expressions that aren\u0027t leaves are ors.\n\nI see. I will try to fix that.\n\n\u003e Also, this heuristic is good enough, but wouldn\u0027t handle something odd like:\n\u003e \n\u003e exprToMemcombine :\u003d l[0] | l[1] \u003c\u003c 8 | l[2] \u003c\u003c 16 | l[3] \u003c\u003c 24\n\u003e bitwiseAndLoad :\u003d a | b | c | d | e | exprToMemcombine\n\nThat\u0027s a good point. We don\u0027t want to mix up the memcombine expressions with other things in a big OR.\n\n\u003e reassociate needs to run very early on to be helpful, so I don\u0027t think moving it after memcombine is a good idea either.\n\nI think there are 2 goals here, which are somewhat conflated. Reassociating for better ILP can happen later than memcombine, I think.\nReassociating to move constants together to enable constant folding, for example, probably needs to happen earlier. Maybe those are distinct passes or pass variants. For this CL whose only current benefit is ILP, I\u0027d lean toward running after memcombine.\n\nSave that chunk of code though, we may want it later.",
      "parentUuid": "eee83e5b_d3cf8988",
      "revId": "bbf8f2b48689665c114aa0e3f374a16dc26387ab",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fd0fdf44_c60354e6",
        "filename": "src/cmd/compile/internal/ssa/reassociate.go",
        "patchSetId": 4
      },
      "lineNbr": 73,
      "author": {
        "id": 62691
      },
      "writtenOn": "2023-05-09T18:24:29Z",
      "side": 1,
      "message": "\u003e I think there are 2 goals here, which are somewhat conflated. Reassociating for better ILP can happen later than memcombine, I think.\n\nA few hours after writing this last night, I also came to same conclusion. I think that I was mixing up LLVM\u0027s reassociation pass with an ILP pass.\n\nThis should now definitely run after memcombine, then no need for the memcombine heuristic I had.\n\nIf you could mark this as a Hold +1, I\u0027d like to go do some more research on how to best run an ILP-only pass, submit that in a different CL, and then come back to this because there\u0027s good stuff to be had here. \n\nIt might even be a good idea to kill this CL and re-open it since it references the wrong issue now.",
      "parentUuid": "cc9c1061_896e3d98",
      "revId": "bbf8f2b48689665c114aa0e3f374a16dc26387ab",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0b97251c_20e62a64",
        "filename": "src/cmd/compile/internal/ssa/reassociate.go",
        "patchSetId": 4
      },
      "lineNbr": 100,
      "author": {
        "id": 5200
      },
      "writtenOn": "2023-05-08T15:17:02Z",
      "side": 1,
      "message": "v3 isn\u0027t defined here. Maybe do\n\nv1:(a + v2:(b + v3:(c + d))\n\nabove",
      "range": {
        "startLine": 100,
        "startChar": 60,
        "endLine": 100,
        "endChar": 62
      },
      "revId": "bbf8f2b48689665c114aa0e3f374a16dc26387ab",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "75fe5b38_1c21508b",
        "filename": "src/cmd/compile/internal/ssa/reassociate.go",
        "patchSetId": 4
      },
      "lineNbr": 100,
      "author": {
        "id": 62691
      },
      "writtenOn": "2023-05-08T21:21:43Z",
      "side": 1,
      "message": "Thanks for the catch. I had some ASCII art of v1/v2/v3 but gofmt wasn\u0027t particularly kind to it so I removed it. I\u0027ll use the above",
      "parentUuid": "0b97251c_20e62a64",
      "range": {
        "startLine": 100,
        "startChar": 60,
        "endLine": 100,
        "endChar": 62
      },
      "revId": "bbf8f2b48689665c114aa0e3f374a16dc26387ab",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b4030498_e941f8a9",
        "filename": "src/cmd/compile/internal/ssa/reassociate.go",
        "patchSetId": 4
      },
      "lineNbr": 110,
      "author": {
        "id": 5200
      },
      "writtenOn": "2023-05-08T15:17:02Z",
      "side": 1,
      "message": "what is \"log math\"?",
      "range": {
        "startLine": 110,
        "startChar": 75,
        "endLine": 110,
        "endChar": 83
      },
      "revId": "bbf8f2b48689665c114aa0e3f374a16dc26387ab",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "02dc8edf_8984a84a",
        "filename": "src/cmd/compile/internal/ssa/reassociate.go",
        "patchSetId": 4
      },
      "lineNbr": 110,
      "author": {
        "id": 62691
      },
      "writtenOn": "2023-05-08T21:21:43Z",
      "side": 1,
      "message": "I\u0027ll remove this comment since I\u0027ve thought about it more and I don\u0027t need \"log math\".\n\nThe idea the comment is based of is that for a binary op you need a minimum of 4 leaves to trigger reassociation, but given an n-ary op you need n^2 leaves to trigger it. Initially I thought this would require a call to log_n() to help preallocate `leaves` and `nodes` so I hardcoded 2 args, but I think it would be best to do:\n\n```\nminLeaves :\u003d len(v.Args) * len(v.Args)\nif len(leaves) \u003c minLeaves\n...  \n```\n\nNo log_n call and allows 3 arg ops such as ADC to be reassociated, and not worry about the leaves/nodes list not being perfectly preallocated",
      "parentUuid": "b4030498_e941f8a9",
      "range": {
        "startLine": 110,
        "startChar": 75,
        "endLine": 110,
        "endChar": 83
      },
      "revId": "bbf8f2b48689665c114aa0e3f374a16dc26387ab",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e1c049e2_af59f4d0",
        "filename": "src/cmd/compile/internal/ssa/reassociate.go",
        "patchSetId": 4
      },
      "lineNbr": 112,
      "author": {
        "id": 5200
      },
      "writtenOn": "2023-05-08T15:17:02Z",
      "side": 1,
      "message": "It is ok if the root value is used in more than one place. It\u0027s just the intermediate values that need to be used only once.",
      "revId": "bbf8f2b48689665c114aa0e3f374a16dc26387ab",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "669a33e6_ec158f00",
        "filename": "src/cmd/compile/internal/ssa/reassociate.go",
        "patchSetId": 4
      },
      "lineNbr": 112,
      "author": {
        "id": 62691
      },
      "writtenOn": "2023-05-08T21:21:43Z",
      "side": 1,
      "message": "Nice catch. I\u0027ve updated it accordingly",
      "parentUuid": "e1c049e2_af59f4d0",
      "revId": "bbf8f2b48689665c114aa0e3f374a16dc26387ab",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "44891a25_8ca28fe9",
        "filename": "src/cmd/compile/internal/ssa/reassociate.go",
        "patchSetId": 4
      },
      "lineNbr": 124,
      "author": {
        "id": 5200
      },
      "writtenOn": "2023-05-08T15:17:02Z",
      "side": 1,
      "message": "This seems overly complicated. Can\u0027t we just keep appending to the haystack slice and keep an integer which is our search position?\nSee, e.g., the BFS in memcombine.go:memcombineLoads",
      "revId": "bbf8f2b48689665c114aa0e3f374a16dc26387ab",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "07283dcf_257bff85",
        "filename": "src/cmd/compile/internal/ssa/reassociate.go",
        "patchSetId": 4
      },
      "lineNbr": 124,
      "author": {
        "id": 62691
      },
      "writtenOn": "2023-05-08T21:21:43Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "44891a25_8ca28fe9",
      "revId": "bbf8f2b48689665c114aa0e3f374a16dc26387ab",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b7b04444_0ad62cee",
        "filename": "src/cmd/compile/internal/ssa/reassociate.go",
        "patchSetId": 4
      },
      "lineNbr": 157,
      "author": {
        "id": 5200
      },
      "writtenOn": "2023-05-08T15:17:02Z",
      "side": 1,
      "message": "Start the file with this function. It helps readers find the top-level doc comment easily.",
      "revId": "bbf8f2b48689665c114aa0e3f374a16dc26387ab",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e64f1fc0_f2c6b2be",
        "filename": "src/cmd/compile/internal/ssa/reassociate.go",
        "patchSetId": 4
      },
      "lineNbr": 157,
      "author": {
        "id": 62691
      },
      "writtenOn": "2023-05-08T21:21:43Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "b7b04444_0ad62cee",
      "revId": "bbf8f2b48689665c114aa0e3f374a16dc26387ab",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ff35c364_0103f248",
        "filename": "src/cmd/compile/internal/ssa/reassociate.go",
        "patchSetId": 4
      },
      "lineNbr": 159,
      "author": {
        "id": 5200
      },
      "writtenOn": "2023-05-08T15:17:02Z",
      "side": 1,
      "message": "My understanding was this was just to improve ILP. What are these other benefits? Can you write some tests for those?",
      "range": {
        "startLine": 158,
        "startChar": 3,
        "endLine": 159,
        "endChar": 49
      },
      "revId": "bbf8f2b48689665c114aa0e3f374a16dc26387ab",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ce7052e9_19172f4d",
        "filename": "src/cmd/compile/internal/ssa/reassociate.go",
        "patchSetId": 4
      },
      "lineNbr": 159,
      "author": {
        "id": 62691
      },
      "writtenOn": "2023-05-08T21:21:43Z",
      "side": 1,
      "message": "If reassociate tries to rebalance in a deterministic fashion (i.e. pushing all constant expressions to one side, grouping common terms together, etc) then it helps expose optimizations such as (a + ... + a + ... + a) \u003d\u003e (3*a + ...), or (a + ..... (-a)) \u003d\u003e (0 + ....) that rewrite rules might struggle to find.\n\nIt also resolves/untangles dependencies between expressions and linearizes it so that if you wanted to vectorize it, do an easy CSE, or loop invariance analysis it makes things much more recognizable. With a bit of extra work it can also tell if an expression has all its uses within the parent expression which would allow:\n```\nx :\u003d a + a\ny :\u003d x + x\nz :\u003d y + b + c + d\n```\n\nto get optimized to something like:\n```\nz :\u003d 4*a + b + c + d\n```\n\nRight now it doesn\u0027t try to rebalance deterministically or do other analysis as it is mostly for ILP as Josh mentioned, but I thought I would document its other uses if others (or, more likely, I) wanted to pick this work up. Would a TODO be appropriate instead? I did mention it as a TODO on L121, but I can mention it again.\n\n\nTLDR; it does but not yet so document the possibility and no tests?",
      "parentUuid": "ff35c364_0103f248",
      "range": {
        "startLine": 158,
        "startChar": 3,
        "endLine": 159,
        "endChar": 49
      },
      "revId": "bbf8f2b48689665c114aa0e3f374a16dc26387ab",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aabd44d5_839493a8",
        "filename": "src/cmd/compile/internal/ssa/reassociate.go",
        "patchSetId": 4
      },
      "lineNbr": 159,
      "author": {
        "id": 5200
      },
      "writtenOn": "2023-05-09T16:32:21Z",
      "side": 1,
      "message": "If we\u0027re just doing reassociation for ILP right now, then the comment here should just say that. Anything it doesn\u0027t do yet should be marked TODO.\n\n\tx :\u003d a + (-a)\n\ty :\u003d b + (-b)\n\tz :\u003d x + y + c + d\n\nCurrently this can eval to c+d because this associates by default in a way that the rewrite rules can see the i+-i pattern. Will this CL reassociate in a different way that will hide the i+-i opportunity from rewrite rules?",
      "parentUuid": "ce7052e9_19172f4d",
      "range": {
        "startLine": 158,
        "startChar": 3,
        "endLine": 159,
        "endChar": 49
      },
      "revId": "bbf8f2b48689665c114aa0e3f374a16dc26387ab",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1d6e6ab7_ee0464aa",
        "filename": "src/cmd/compile/internal/ssa/reassociate.go",
        "patchSetId": 4
      },
      "lineNbr": 161,
      "author": {
        "id": 5200
      },
      "writtenOn": "2023-05-08T15:17:02Z",
      "side": 1,
      "message": "Use f.newSparseSet. See other uses in this directory for examples.",
      "revId": "bbf8f2b48689665c114aa0e3f374a16dc26387ab",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0f92b099_725b28c7",
        "filename": "src/cmd/compile/internal/ssa/reassociate.go",
        "patchSetId": 4
      },
      "lineNbr": 161,
      "author": {
        "id": 62691
      },
      "writtenOn": "2023-05-08T21:21:43Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "1d6e6ab7_ee0464aa",
      "revId": "bbf8f2b48689665c114aa0e3f374a16dc26387ab",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9b3fea73_9dd34a2e",
        "filename": "src/cmd/compile/internal/ssa/reassociate.go",
        "patchSetId": 4
      },
      "lineNbr": 170,
      "author": {
        "id": 5200
      },
      "writtenOn": "2023-05-08T15:17:02Z",
      "side": 1,
      "message": "This is unnecessary, visitied is about to go dead.",
      "revId": "bbf8f2b48689665c114aa0e3f374a16dc26387ab",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8665a9cd_2bb884d5",
        "filename": "src/cmd/compile/internal/ssa/reassociate.go",
        "patchSetId": 4
      },
      "lineNbr": 170,
      "author": {
        "id": 62691
      },
      "writtenOn": "2023-05-08T21:21:43Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "9b3fea73_9dd34a2e",
      "revId": "bbf8f2b48689665c114aa0e3f374a16dc26387ab",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8abccc9d_255af5a9",
        "filename": "test/codegen/reassociate.go",
        "patchSetId": 4
      },
      "lineNbr": 11,
      "author": {
        "id": 5200
      },
      "writtenOn": "2023-05-08T15:17:02Z",
      "side": 1,
      "message": "This seems pretty fragile, encoding exact registers used. In particular, I would have expected this code to be:\n  ADD R2, R3, R2\n  ADD R0, R1, R0\n  ADD R0, R2, R0\nWhich is also ok.\n\nAny way we can make this less fragile?",
      "revId": "bbf8f2b48689665c114aa0e3f374a16dc26387ab",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "adfac7e5_00e2342a",
        "filename": "test/codegen/reassociate.go",
        "patchSetId": 4
      },
      "lineNbr": 11,
      "author": {
        "id": 62691
      },
      "writtenOn": "2023-05-08T21:21:43Z",
      "side": 1,
      "message": "Agreed it does seem to be fragile, it is a bit hard with the current test harness setup to guarantee that the expressions are balanced without referencing concrete registers. I\u0027m open to suggestions if there\u0027s a better way to test this other than codegen.\n\nAlso note that the test uses ADD R0, R1, R1 since I search operands in order from left to right rather than right to left, then rebalance backwards. (a + (b + (c + d))) turns into (c + d) + (b + a)\n\nThe only case I have for keeping it the way it is is that using 4 integers on ARM64 will make use of the register-based ABI so we have some guarantee that a-\u003eR0, b-\u003eR1, ... which I can document in case of test flaky-ness.",
      "parentUuid": "8abccc9d_255af5a9",
      "revId": "bbf8f2b48689665c114aa0e3f374a16dc26387ab",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "af1198e3_c703bf8b",
        "filename": "test/codegen/reassociate.go",
        "patchSetId": 4
      },
      "lineNbr": 11,
      "author": {
        "id": 5200
      },
      "writtenOn": "2023-05-09T16:32:21Z",
      "side": 1,
      "message": "Yeah, I don\u0027t have any great ideas here. Something to think about...",
      "parentUuid": "adfac7e5_00e2342a",
      "revId": "bbf8f2b48689665c114aa0e3f374a16dc26387ab",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}