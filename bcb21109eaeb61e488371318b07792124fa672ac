{
  "comments": [
    {
      "key": {
        "uuid": "a3f2c4c5_cd347bec",
        "filename": "src/runtime/chan.go",
        "patchSetId": 8
      },
      "lineNbr": 177,
      "author": {
        "id": 5167
      },
      "writtenOn": "2018-07-11T02:31:05Z",
      "side": 1,
      "message": "// TODO: Relaxed load?",
      "revId": "bcb21109eaeb61e488371318b07792124fa672ac",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dd7b96fb_1626fcb5",
        "filename": "src/runtime/chan.go",
        "patchSetId": 8
      },
      "lineNbr": 177,
      "author": {
        "id": 15760
      },
      "writtenOn": "2018-07-11T14:11:05Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "a3f2c4c5_cd347bec",
      "revId": "bcb21109eaeb61e488371318b07792124fa672ac",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "49421eae_0091c3e8",
        "filename": "src/runtime/chan.go",
        "patchSetId": 8
      },
      "lineNbr": 452,
      "author": {
        "id": 5167
      },
      "writtenOn": "2018-07-11T02:31:05Z",
      "side": 1,
      "message": "// TODO: Relaxed load?",
      "revId": "bcb21109eaeb61e488371318b07792124fa672ac",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "50f26371_4c889e4b",
        "filename": "src/runtime/chan.go",
        "patchSetId": 8
      },
      "lineNbr": 452,
      "author": {
        "id": 15760
      },
      "writtenOn": "2018-07-11T14:11:05Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "49421eae_0091c3e8",
      "revId": "bcb21109eaeb61e488371318b07792124fa672ac",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "15854691_11168b8d",
        "filename": "src/runtime/mcentral.go",
        "patchSetId": 8
      },
      "lineNbr": 61,
      "author": {
        "id": 5167
      },
      "writtenOn": "2018-07-11T02:31:05Z",
      "side": 1,
      "message": "Hmm. This is very subtle. Why does this load need to be atomic but the load of s.sweepgen above doesn\u0027t need to be?\n\nI can see the argument being something like: the first load is ultimately synchronized by the Cas, and if we were to observe an out-of-order read or tearing of sweepgen, it would mean there had to be another write to it, and hence it can\u0027t possibly equal sg-2. However, if we get past that first condition, then we may be racing with another sweep of this span, at which point we need to synchronize the load to make sure we didn\u0027t reorder the read of sweepgen before the concurrent sweep happened.\n\nGiven that we\u0027re either going to do the Cas or the atomic Load, I can\u0027t imagine this subtlety actually having any useful effect on performance. Perhaps this should just be\n\nssweepgen :\u003d atomic.Load(\u0026s.sweepgen)\nif ssweepgen \u003d\u003d sg-2 \u0026\u0026 atomic.Cas(\u0026s.sweepgen, sg-2, sg-1) { ... }\nif ssweepgen \u003d\u003d sg-1 { ... }",
      "revId": "bcb21109eaeb61e488371318b07792124fa672ac",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "94694dff_1c4ef2e4",
        "filename": "src/runtime/mcentral.go",
        "patchSetId": 8
      },
      "lineNbr": 61,
      "author": {
        "id": 15760
      },
      "writtenOn": "2018-07-11T14:11:05Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "15854691_11168b8d",
      "revId": "bcb21109eaeb61e488371318b07792124fa672ac",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9b4532ea_63c0f0ac",
        "filename": "src/runtime/mcentral.go",
        "patchSetId": 8
      },
      "lineNbr": 61,
      "author": {
        "id": 15760
      },
      "writtenOn": "2018-07-12T08:19:17Z",
      "side": 1,
      "message": "Can\u0027t be\n\nssweepgen :\u003d atomic.Load(\u0026s.sweepgen)\nif ssweepgen \u003d\u003d sg-2 \u0026\u0026 atomic.Cas(\u0026s.sweepgen, sg-2, sg-1) { ... }\nif ssweepgen \u003d\u003d sg-1 { ... }\n\ns.sweepgen can be modified from sg-2 to sg-1 by another goroutine between line 1 and line 2. If so, this mspan will be swept twice incorrectly and throw a \"fatal error: freeSpan given cached span\".",
      "parentUuid": "94694dff_1c4ef2e4",
      "revId": "bcb21109eaeb61e488371318b07792124fa672ac",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8c6005de_035c6f3a",
        "filename": "src/runtime/mcentral.go",
        "patchSetId": 8
      },
      "lineNbr": 61,
      "author": {
        "id": 5167
      },
      "writtenOn": "2018-08-17T20:16:19Z",
      "side": 1,
      "message": "Hmm. I don\u0027t understand your argument. If s.sweepgen is modified from sg-2 to sg-1 by another goroutine between line 1 and line 2, then the CAS will fail and this goroutine won\u0027t sweep it. (Are you positive you didn\u0027t pass \u0026ssweepgen instead of \u0026s.sweepgen to Cas? That would be an easy typo that could lead to that throw.)",
      "parentUuid": "9b4532ea_63c0f0ac",
      "revId": "bcb21109eaeb61e488371318b07792124fa672ac",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e361f7b8_d5523b5b",
        "filename": "src/runtime/mcentral.go",
        "patchSetId": 8
      },
      "lineNbr": 61,
      "author": {
        "id": 15760
      },
      "writtenOn": "2018-08-26T14:57:23Z",
      "side": 1,
      "message": "I\u0027m pretty sure that there is no typo. If s.sweepgen is changed from sg-2 to sg-1 between line 1 and line 2, line 2 and line 3 will both fail, then this span will be swept twice, \"fatal error: freeSpan given cached span\" will be thrown.\nUse this patch to reproduce:\ndiff --git a/src/runtime/mcentral.go b/src/runtime/mcentral.go\nindex fbf3cb590f..937f91e546 100644\n--- a/src/runtime/mcentral.go\n+++ b/src/runtime/mcentral.go\n@@ -51,14 +51,15 @@ func (c *mcentral) cacheSpan() *mspan {\n retry:\n        var s *mspan\n        for s \u003d c.nonempty.first; s !\u003d nil; s \u003d s.next {\n-               if atomic.Load(\u0026s.sweepgen) \u003d\u003d sg-2 \u0026\u0026 atomic.Cas(\u0026s.sweepgen, sg-2, sg-1) {\n+               ssweepgen :\u003d atomic.Load(\u0026s.sweepgen)\n+               if ssweepgen \u003d\u003d sg-2 \u0026\u0026 atomic.Cas(\u0026s.sweepgen, sg-2, sg-1) {\n                        c.nonempty.remove(s)\n                        c.empty.insertBack(s)\n                        unlock(\u0026c.lock)\n                        s.sweep(true)\n                        goto havespan\n                }\n-               if atomic.Load(\u0026s.sweepgen) \u003d\u003d sg-1 {\n+               if ssweepgen \u003d\u003d sg-1 {\n                        // the span is being swept by background sweeper, skip\n                        continue\n                }",
      "parentUuid": "8c6005de_035c6f3a",
      "revId": "bcb21109eaeb61e488371318b07792124fa672ac",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f7c7d60b_3ae3d40c",
        "filename": "src/runtime/mcentral.go",
        "patchSetId": 8
      },
      "lineNbr": 91,
      "author": {
        "id": 5167
      },
      "writtenOn": "2018-07-11T02:31:05Z",
      "side": 1,
      "message": "Same comment.",
      "revId": "bcb21109eaeb61e488371318b07792124fa672ac",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e12e1d73_35dd7792",
        "filename": "src/runtime/mcentral.go",
        "patchSetId": 8
      },
      "lineNbr": 91,
      "author": {
        "id": 15760
      },
      "writtenOn": "2018-07-11T14:11:05Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "f7c7d60b_3ae3d40c",
      "revId": "bcb21109eaeb61e488371318b07792124fa672ac",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d743487d_e75de4a0",
        "filename": "src/runtime/mfinal.go",
        "patchSetId": 8
      },
      "lineNbr": 129,
      "author": {
        "id": 5167
      },
      "writtenOn": "2018-07-11T02:31:05Z",
      "side": 1,
      "message": "Document that iterate_finq requires \"The world must be stopped.\" and drop this atomic.Load. (There\u0027s no way this could be safe otherwise, since you could read fb.cnt, then something else decrements fb.cnt, then this uses a now-bad index into fb.fin.)",
      "revId": "bcb21109eaeb61e488371318b07792124fa672ac",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "557ef499_28cf74a8",
        "filename": "src/runtime/mfinal.go",
        "patchSetId": 8
      },
      "lineNbr": 129,
      "author": {
        "id": 15760
      },
      "writtenOn": "2018-07-11T14:11:05Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "d743487d_e75de4a0",
      "revId": "bcb21109eaeb61e488371318b07792124fa672ac",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "95a85225_9b7eb93a",
        "filename": "src/runtime/mgcmark.go",
        "patchSetId": 8
      },
      "lineNbr": 360,
      "author": {
        "id": 5167
      },
      "writtenOn": "2018-07-11T02:31:05Z",
      "side": 1,
      "message": "This shouldn\u0027t be necessary because there was a global synchronization between when the last sweep happened and here, but, OTOH, this is supposed to detect if that has failed. Perhaps\n\n// sweepgen should not be changing at this point, but it could be if something went wrong. Hence, we defensively do an atomic load.",
      "revId": "bcb21109eaeb61e488371318b07792124fa672ac",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9eddb72b_46b3b44b",
        "filename": "src/runtime/mgcmark.go",
        "patchSetId": 8
      },
      "lineNbr": 360,
      "author": {
        "id": 15760
      },
      "writtenOn": "2018-07-11T14:11:05Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "95a85225_9b7eb93a",
      "revId": "bcb21109eaeb61e488371318b07792124fa672ac",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ffbcfe20_7c0f39f6",
        "filename": "src/runtime/mgcmark.go",
        "patchSetId": 8
      },
      "lineNbr": 361,
      "author": {
        "id": 5167
      },
      "writtenOn": "2018-07-11T02:31:05Z",
      "side": 1,
      "message": "Use \"if sweepgen :\u003d atomic.Load(\u0026s.sweepgen); ...\" to avoid over-scoping sweepgen.",
      "revId": "bcb21109eaeb61e488371318b07792124fa672ac",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ef4c4b8e_bb34dbea",
        "filename": "src/runtime/mgcmark.go",
        "patchSetId": 8
      },
      "lineNbr": 361,
      "author": {
        "id": 15760
      },
      "writtenOn": "2018-07-11T14:11:05Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "ffbcfe20_7c0f39f6",
      "revId": "bcb21109eaeb61e488371318b07792124fa672ac",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7452d88f_7524ef6b",
        "filename": "src/runtime/mgcsweep.go",
        "patchSetId": 8
      },
      "lineNbr": 104,
      "author": {
        "id": 5167
      },
      "writtenOn": "2018-07-11T02:31:05Z",
      "side": 1,
      "message": "if sweepgen :\u003d atomic.Load(\u0026s.sweepgen); ...",
      "revId": "bcb21109eaeb61e488371318b07792124fa672ac",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "40f1775e_3927efeb",
        "filename": "src/runtime/mgcsweep.go",
        "patchSetId": 8
      },
      "lineNbr": 104,
      "author": {
        "id": 15760
      },
      "writtenOn": "2018-07-11T14:11:05Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "7452d88f_7524ef6b",
      "revId": "bcb21109eaeb61e488371318b07792124fa672ac",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c9aff395_3b1b9fba",
        "filename": "src/runtime/mgcsweepbuf.go",
        "patchSetId": 8
      },
      "lineNbr": 90,
      "author": {
        "id": 5167
      },
      "writtenOn": "2018-07-11T02:31:05Z",
      "side": 1,
      "message": "This access is protected by b.spineLock.",
      "revId": "bcb21109eaeb61e488371318b07792124fa672ac",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "efa547cf_42e99837",
        "filename": "src/runtime/mgcsweepbuf.go",
        "patchSetId": 8
      },
      "lineNbr": 90,
      "author": {
        "id": 15760
      },
      "writtenOn": "2018-07-11T14:11:05Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "c9aff395_3b1b9fba",
      "revId": "bcb21109eaeb61e488371318b07792124fa672ac",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "74ee158b_6ed90b31",
        "filename": "src/runtime/mgcsweepbuf.go",
        "patchSetId": 8
      },
      "lineNbr": 106,
      "author": {
        "id": 5167
      },
      "writtenOn": "2018-07-11T02:31:05Z",
      "side": 1,
      "message": "Same.",
      "revId": "bcb21109eaeb61e488371318b07792124fa672ac",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "20f85cc8_8d362506",
        "filename": "src/runtime/mgcsweepbuf.go",
        "patchSetId": 8
      },
      "lineNbr": 106,
      "author": {
        "id": 15760
      },
      "writtenOn": "2018-07-11T14:11:05Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "74ee158b_6ed90b31",
      "revId": "bcb21109eaeb61e488371318b07792124fa672ac",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ec34211d_222cab6b",
        "filename": "src/runtime/mgcsweepbuf.go",
        "patchSetId": 8
      },
      "lineNbr": 130,
      "author": {
        "id": 5167
      },
      "writtenOn": "2018-07-11T02:31:05Z",
      "side": 1,
      "message": "See the comment on line 128.",
      "revId": "bcb21109eaeb61e488371318b07792124fa672ac",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "631cf41e_b61f8279",
        "filename": "src/runtime/mgcsweepbuf.go",
        "patchSetId": 8
      },
      "lineNbr": 130,
      "author": {
        "id": 15760
      },
      "writtenOn": "2018-07-11T14:11:05Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "ec34211d_222cab6b",
      "revId": "bcb21109eaeb61e488371318b07792124fa672ac",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4a1c10d4_d64b708e",
        "filename": "src/runtime/mheap.go",
        "patchSetId": 8
      },
      "lineNbr": 606,
      "author": {
        "id": 5167
      },
      "writtenOn": "2018-07-11T02:31:05Z",
      "side": 1,
      "message": "See my comments in mcentral.go.",
      "revId": "bcb21109eaeb61e488371318b07792124fa672ac",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8bdcf9c2_0aced9fd",
        "filename": "src/runtime/mheap.go",
        "patchSetId": 8
      },
      "lineNbr": 606,
      "author": {
        "id": 15760
      },
      "writtenOn": "2018-07-11T14:11:05Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "4a1c10d4_d64b708e",
      "revId": "bcb21109eaeb61e488371318b07792124fa672ac",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "699ad28c_8eaa4687",
        "filename": "src/runtime/os_windows.go",
        "patchSetId": 8
      },
      "lineNbr": 724,
      "author": {
        "id": 5167
      },
      "writtenOn": "2018-07-11T02:31:05Z",
      "side": 1,
      "message": "Something\u0027s not right here. The type of tp changed from *uintptr to uintptr. But also this can\u0027t possibly race with minit (the only store to m.thread), so the atomic isn\u0027t necessary.",
      "revId": "bcb21109eaeb61e488371318b07792124fa672ac",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "18862a4f_b49f1f10",
        "filename": "src/runtime/os_windows.go",
        "patchSetId": 8
      },
      "lineNbr": 724,
      "author": {
        "id": 15760
      },
      "writtenOn": "2018-07-11T14:11:05Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "699ad28c_8eaa4687",
      "revId": "bcb21109eaeb61e488371318b07792124fa672ac",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5303c39f_789cd4d6",
        "filename": "src/runtime/os_windows.go",
        "patchSetId": 8
      },
      "lineNbr": 726,
      "author": {
        "id": 5167
      },
      "writtenOn": "2018-07-11T02:31:05Z",
      "side": 1,
      "message": "This should probably be an atomic store (to synchronize with profileloop).",
      "revId": "bcb21109eaeb61e488371318b07792124fa672ac",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6c7cd8af_7c0ea5a2",
        "filename": "src/runtime/os_windows.go",
        "patchSetId": 8
      },
      "lineNbr": 726,
      "author": {
        "id": 15760
      },
      "writtenOn": "2018-07-11T14:11:05Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "5303c39f_789cd4d6",
      "revId": "bcb21109eaeb61e488371318b07792124fa672ac",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6f4b3c7c_d49805fb",
        "filename": "src/runtime/os_windows.go",
        "patchSetId": 8
      },
      "lineNbr": 866,
      "author": {
        "id": 5167
      },
      "writtenOn": "2018-07-11T02:31:05Z",
      "side": 1,
      "message": "This may actually be unsafe. I think profileloop1 needs to re-check mp.thread !\u003d 0 after the SuspendThread. That doesn\u0027t need to be atomic since the thread is suspended, but it could have transitioned from non-0 to 0 while suspending the thread.",
      "range": {
        "startLine": 866,
        "startChar": 29,
        "endLine": 866,
        "endChar": 38
      },
      "revId": "bcb21109eaeb61e488371318b07792124fa672ac",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "83e4a331_e9d2e394",
        "filename": "src/runtime/os_windows.go",
        "patchSetId": 8
      },
      "lineNbr": 866,
      "author": {
        "id": 15760
      },
      "writtenOn": "2018-07-11T14:11:05Z",
      "side": 1,
      "message": "How could mp.thread transition from non-0 to 0 while the thread is suspending? unminit cannot happen during suspending.",
      "parentUuid": "6f4b3c7c_d49805fb",
      "range": {
        "startLine": 866,
        "startChar": 29,
        "endLine": 866,
        "endChar": 38
      },
      "revId": "bcb21109eaeb61e488371318b07792124fa672ac",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "be53fdff_2ad57ff2",
        "filename": "src/runtime/os_windows.go",
        "patchSetId": 8
      },
      "lineNbr": 866,
      "author": {
        "id": 5167
      },
      "writtenOn": "2018-08-17T20:16:19Z",
      "side": 1,
      "message": "unminit can happen during suspending. For example,\n\nT1 is running profileloop1, T2 is another thread\nT1: thread :\u003d atomic.Loaduintptr(\u0026T2.thread)\nT2: calls unminit\nT2: assigns T2.thread to 0 (actually, the CloseHandle is probably enough to cause trouble, too)\nT1: suspends T2\nT1: does thread :\u003d atomic.Loaduintptr(\u0026T2.thread), but T2.thread \u003d\u003d 0.\n\nThis bug wasn\u0027t introduced by this CL, obviously, so it probably makes more sense to fix in a separate CL. I think I was just thinking about this because you changed other uses of m.thread to be atomic. This use doesn\u0027t have to be atomic because the thread is suspended.\n\nAnyway, I\u0027ll send a follow-up to fix this race, so don\u0027t worry about it here.",
      "parentUuid": "83e4a331_e9d2e394",
      "range": {
        "startLine": 866,
        "startChar": 29,
        "endLine": 866,
        "endChar": 38
      },
      "revId": "bcb21109eaeb61e488371318b07792124fa672ac",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4420dcd6_e2743eb4",
        "filename": "src/runtime/sigqueue.go",
        "patchSetId": 8
      },
      "lineNbr": 203,
      "author": {
        "id": 5167
      },
      "writtenOn": "2018-07-11T02:31:05Z",
      "side": 1,
      "message": "Why does sig.wanted need this but sig.ignored doesn\u0027t?",
      "revId": "bcb21109eaeb61e488371318b07792124fa672ac",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "17b9756b_eef582b5",
        "filename": "src/runtime/sigqueue.go",
        "patchSetId": 8
      },
      "lineNbr": 203,
      "author": {
        "id": 15760
      },
      "writtenOn": "2018-07-11T14:11:05Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "4420dcd6_e2743eb4",
      "revId": "bcb21109eaeb61e488371318b07792124fa672ac",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}