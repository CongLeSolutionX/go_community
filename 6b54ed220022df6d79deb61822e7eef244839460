{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "ffe4c0c8_9f82b3a8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 55763
      },
      "writtenOn": "2022-11-16T02:21:40Z",
      "side": 1,
      "message": "I have multiple questions about submitting such changes:\n1. what kind of tests should be there ? (except the obvious codegen ones such as `for i :\u003d x; i \u003c x+4; i++ { /* do some stuff */ }`)\n2. what kind of benchmarks ? is `go test -bench ./...` in `./src` and show some improvements (and no degradation) would be enough ?",
      "revId": "6b54ed220022df6d79deb61822e7eef244839460",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a0a79392_1adbf96c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 55763
      },
      "writtenOn": "2022-11-16T02:23:18Z",
      "side": 1,
      "message": "I think this is still buggy and might also do miss compilations in some edge cases.",
      "parentUuid": "ffe4c0c8_9f82b3a8",
      "revId": "6b54ed220022df6d79deb61822e7eef244839460",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6aa01a77_931ad148",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 55763
      },
      "writtenOn": "2022-11-16T03:20:20Z",
      "side": 1,
      "message": "I would like to know what you would like to see to review such change. thx",
      "revId": "6b54ed220022df6d79deb61822e7eef244839460",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a10fbd4b_60cc73a8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-11-16T15:30:31Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003d6b54ed22\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "6b54ed220022df6d79deb61822e7eef244839460",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1ae5afe7_aa3c1894",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-11-16T15:35:23Z",
      "side": 1,
      "message": "Build is still in progress... Status page: https://farmer.golang.org/try?commit\u003d6b54ed22\nFailed on (x/tools) linux-amd64: https://storage.googleapis.com/go-build-log/6b54ed22/linux-amd64_b8d33311.log\nOther builds still in progress; subsequent failure notices suppressed until final report.\n\nConsult https://build.golang.org/ to see whether they are new failures. Keep in mind that TryBots currently test *exactly* your git commit, without rebasing. If your commit\u0027s git parent is old, the failure might\u0027ve already been fixed.\n",
      "parentUuid": "a10fbd4b_60cc73a8",
      "tag": "autogenerated:trybots~progress",
      "revId": "6b54ed220022df6d79deb61822e7eef244839460",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "29d8e2b3_17261a2e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-11-16T15:42:41Z",
      "side": 1,
      "message": "14 of 30 TryBots failed.\nFailed on (x/tools) linux-amd64: https://storage.googleapis.com/go-build-log/6b54ed22/linux-amd64_b8d33311.log\nFailed on freebsd-amd64-12_3: https://storage.googleapis.com/go-build-log/6b54ed22/freebsd-amd64-12_3_008b7cac.log\nFailed on linux-amd64-nounified: https://storage.googleapis.com/go-build-log/6b54ed22/linux-amd64-nounified_2009b519.log\nFailed on linux-amd64: https://storage.googleapis.com/go-build-log/6b54ed22/linux-amd64_80f9c015.log\nFailed on linux-amd64-boringcrypto: https://storage.googleapis.com/go-build-log/6b54ed22/linux-amd64-boringcrypto_dd5578c2.log\nFailed on linux-arm64-aws: https://storage.googleapis.com/go-build-log/6b54ed22/linux-arm64-aws_7b354fe7.log\nFailed on linux-amd64-unified: https://storage.googleapis.com/go-build-log/6b54ed22/linux-amd64-unified_f2c91c0d.log\nFailed on linux-386: https://storage.googleapis.com/go-build-log/6b54ed22/linux-386_0b1d3615.log\nFailed on windows-amd64-2016: https://storage.googleapis.com/go-build-log/6b54ed22/windows-amd64-2016_9814b420.log\nFailed on linux-amd64-race: https://storage.googleapis.com/go-build-log/6b54ed22/linux-amd64-race_119e71ad.log\nFailed on linux-arm-aws: https://storage.googleapis.com/go-build-log/6b54ed22/linux-arm-aws_013d936c.log\nFailed on openbsd-amd64-70: https://storage.googleapis.com/go-build-log/6b54ed22/openbsd-amd64-70_e3ed98a8.log\nFailed on windows-386-2012: https://storage.googleapis.com/go-build-log/6b54ed22/windows-386-2012_2d2d37d5.log\nFailed on windows-386-2008: https://storage.googleapis.com/go-build-log/6b54ed22/windows-386-2008_57384622.log\n\nConsult https://build.golang.org/ to see whether they are new failures. Keep in mind that TryBots currently test *exactly* your git commit, without rebasing. If your commit\u0027s git parent is old, the failure might\u0027ve already been fixed.\n\n",
      "parentUuid": "a10fbd4b_60cc73a8",
      "tag": "autogenerated:trybots~failed",
      "revId": "6b54ed220022df6d79deb61822e7eef244839460",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "117101a7_1602ddb4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5200
      },
      "writtenOn": "2022-11-16T23:16:33Z",
      "side": 1,
      "message": "1. I think we\u0027d need to understand the performance implications. How much faster do the unrolled loops get? How much bigger is the code? And to a lesser extent, how much slower is the compiler?\n2. I worry generally about correctness. How can we ensure that this doesn\u0027t break some weird corner case? SSA graph surgery isn\u0027t easy to get right.\n\nThis is something that may be better paired with the PGO framework that will be available in 1.20, so we\u0027re not unrolling lots of cold loops. Not that we should just wait for that, just that we might want to be very conservative to start (low unroll count, low threshold for #instructions) and open it up with larger thresholds when we have PGO information.",
      "parentUuid": "6aa01a77_931ad148",
      "revId": "6b54ed220022df6d79deb61822e7eef244839460",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a050510e_3105b39f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5200
      },
      "writtenOn": "2022-11-16T23:18:43Z",
      "side": 1,
      "message": "One idea about correctness: have an alternate compiler mode that unrolls *every* loop at least once. Then we can really hammer on the implementation with lots of different loop bodies.",
      "parentUuid": "117101a7_1602ddb4",
      "revId": "6b54ed220022df6d79deb61822e7eef244839460",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "43c08770_3312f226",
        "filename": "src/cmd/compile/internal/ssa/prove.go",
        "patchSetId": 1
      },
      "lineNbr": 812,
      "author": {
        "id": 55763
      },
      "writtenOn": "2022-11-16T02:21:40Z",
      "side": 1,
      "message": "This was implemented as piggingback from prove\u0027s loopbce analysis, `unroll` will fail fast and thus this is tries to be extremely cheap if the loop cannot be unrolled.\n\nThis would probably be better if this was runned before `opt` because now we are relying on `lower` to fix the code generated, it\u0027s fine in most cases but `opt` + `lower` would be better.\n\nSo:\n3. What are the expected results to get a new pass, how much ~ns is too much to add a new pass ?",
      "revId": "6b54ed220022df6d79deb61822e7eef244839460",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "26af1d8f_c82d4b73",
        "filename": "src/cmd/compile/internal/ssa/prove.go",
        "patchSetId": 1
      },
      "lineNbr": 812,
      "author": {
        "id": 55763
      },
      "writtenOn": "2022-11-16T02:52:39Z",
      "side": 1,
      "message": "Actually this is missing the original optimisation I wrote it for:\n```\n  func Add256(a, b [4]uint64) (r [4]uint64) {\n    var carry uint64\n    for i :\u003d range b {\n      r[i], carry \u003d bits.Add64(a[i], b[i], carry)\n    }\n    return\n  }\n```\nInto:\n```\n  func Add256(a, b [4]uint64) (r [4]uint64) {\n    var carry uint64\n    r[0], carry \u003d bits.Add64(a[0], b[0], carry)\n    r[1], carry \u003d bits.Add64(a[1], b[1], carry)\n    r[2], carry \u003d bits.Add64(a[2], b[2], carry)\n    r[3], carry \u003d bits.Add64(a[3], b[3], carry)\n    return\n  }\n```\nBecause before `prove` is runned after, and so the body of the loop is still an `If` block that contains bounds checks.\nI see why passes scheduling is such a hard problem now.",
      "parentUuid": "43c08770_3312f226",
      "revId": "6b54ed220022df6d79deb61822e7eef244839460",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}