{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "23ad57c7_3f0e4ee1",
        "filename": "src/cmd/compile/internal/inline/inlheur/analyze_func_callsites.go",
        "patchSetId": 4
      },
      "lineNbr": 139,
      "author": {
        "id": 5440
      },
      "writtenOn": "2023-11-15T00:43:28Z",
      "side": 1,
      "message": "Consider refactoring into a `propsForArg(arg ir.Node) (ActualExprPropBits, bool)\u0027 helper method, so that this function is:\n\n```\nprops :\u003d make([]ActualExprPropBits, len(ce.Args))\nkeep :\u003d false\nfor i, arg :\u003d range ce.Args {\n  var ok bool\n  props[i], ok \u003d csa.propsForArg(arg)\n  if ok {\n    keep \u003d true\n  }\n}\nif !keep {\n  return nil\n}\nreturn props\n```",
      "revId": "9f57664e4180ff87cb29ddc73fee203ade6a6a69",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6f8587c6_2cf0693e",
        "filename": "src/cmd/compile/internal/inline/inlheur/analyze_func_callsites.go",
        "patchSetId": 4
      },
      "lineNbr": 169,
      "author": {
        "id": 5440
      },
      "writtenOn": "2023-11-15T00:43:28Z",
      "side": 1,
      "message": "nit: rename \"argProps\" for clarity and consistency with the struct field name",
      "revId": "9f57664e4180ff87cb29ddc73fee203ade6a6a69",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0cc5494a_820a972f",
        "filename": "src/cmd/compile/internal/inline/inlheur/callsite.go",
        "patchSetId": 4
      },
      "lineNbr": 49,
      "author": {
        "id": 5440
      },
      "writtenOn": "2023-11-15T00:43:28Z",
      "side": 1,
      "message": "nit: Please adhere to Go spec terminology when possible. The expressions that appears within the arguments list of a call expression are called \"arguments\".\n\nhttps://go.dev/ref/spec#Calls",
      "range": {
        "startLine": 48,
        "startChar": 49,
        "endLine": 49,
        "endChar": 48
      },
      "revId": "9f57664e4180ff87cb29ddc73fee203ade6a6a69",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2bd358ee_92f2e456",
        "filename": "src/cmd/compile/internal/inline/inlheur/scoring.go",
        "patchSetId": 4
      },
      "lineNbr": 331,
      "author": {
        "id": 5440
      },
      "writtenOn": "2023-11-15T00:43:28Z",
      "side": 1,
      "message": "nit: \"isLit\", \"isFunc\", etc\n\nOr just have a single \"argProps\" value, and compare that against the constants as needed. Or add helper methods on it, if you anticipate wanting to be able to easily classify different cases.",
      "revId": "9f57664e4180ff87cb29ddc73fee203ade6a6a69",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2c9cff78_d3ffe70e",
        "filename": "src/cmd/compile/internal/inline/inlheur/scoring.go",
        "patchSetId": 4
      },
      "lineNbr": 602,
      "author": {
        "id": 5440
      },
      "writtenOn": "2023-11-15T00:43:28Z",
      "side": 1,
      "message": "Why is `computeCallSiteScore` returning values, if they\u0027re only going to be stored back into `cs`? Can it stores those values itself?\n\nWould it make sense as a method instead (e.g., `cs.computeScore(cprops)`)?",
      "range": {
        "startLine": 602,
        "startChar": 2,
        "endLine": 602,
        "endChar": 59
      },
      "revId": "9f57664e4180ff87cb29ddc73fee203ade6a6a69",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}