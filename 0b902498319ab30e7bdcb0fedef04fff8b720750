{
  "comments": [
    {
      "key": {
        "uuid": "cdaf93ab_2fe0110b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 20,
      "author": {
        "id": 13315
      },
      "writtenOn": "2016-12-06T14:40:14Z",
      "side": 1,
      "message": "Do we consider this as a bug?\n        _ \u003d *p\n        _ \u003d *q\n        _ \u003d *p\nIn the randomized mode this code may either panic on p or panic on q, randomly, if both p and q are nil (which could be different nil, e.g. p\u003d0x0, q\u003d0x1). Do we care?",
      "revId": "0b902498319ab30e7bdcb0fedef04fff8b720750",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cd24f349_f64a1e9d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 20,
      "author": {
        "id": 5200
      },
      "writtenOn": "2016-12-06T18:22:32Z",
      "side": 1,
      "message": "This is a good point.  Currently on a nil panic the compiler just makes sure that the memory state at the panic is correct.  It does not enforce any ordering between two nil panics that might occur at the same memory state.\nI lean toward that being a reasonable if somewhat surprising behavior.  It does make nil check removal testing harder.",
      "parentUuid": "cdaf93ab_2fe0110b",
      "revId": "0b902498319ab30e7bdcb0fedef04fff8b720750",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6d894777_d3bda60c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 20,
      "author": {
        "id": 5056
      },
      "writtenOn": "2016-12-07T15:29:21Z",
      "side": 1,
      "message": "It\u0027s good that the memory state at the panic is correct. I wonder if we care that the line number is correct too. If people have p\u003dq and *p and then *q and the compiler reorders, they might be confused about why *q is panicking when *p did not. I think we could be justified in saying that the line number is not guaranteed; we just need to make sure we know we\u0027re saying that.\n\nFor the test, can you do something like call a extern (body-less) function between the two checks? If p is a local then hopefully the fact that it is non-nil will be remembered across the call.",
      "parentUuid": "cd24f349_f64a1e9d",
      "revId": "0b902498319ab30e7bdcb0fedef04fff8b720750",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4d4003d4_62f17824",
        "filename": "src/cmd/compile/internal/ssa/compile.go",
        "patchSetId": 1
      },
      "lineNbr": 31,
      "author": {
        "id": 7061
      },
      "writtenOn": "2016-12-06T13:48:21Z",
      "side": 1,
      "message": "Do we want this always, or just under a testing flag? I think we should save the RNG seed and print it out if the compiler has a panic, so we can more easily reproduce the panic.",
      "range": {
        "startLine": 31,
        "startChar": 1,
        "endLine": 31,
        "endChar": 13
      },
      "revId": "0b902498319ab30e7bdcb0fedef04fff8b720750",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cdaf93ab_0f52f5f9",
        "filename": "src/cmd/compile/internal/ssa/compile.go",
        "patchSetId": 1
      },
      "lineNbr": 31,
      "author": {
        "id": 13315
      },
      "writtenOn": "2016-12-06T14:40:14Z",
      "side": 1,
      "message": "Agree. (also need a mechanism to feed in the seed)",
      "parentUuid": "4d4003d4_62f17824",
      "revId": "0b902498319ab30e7bdcb0fedef04fff8b720750",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}