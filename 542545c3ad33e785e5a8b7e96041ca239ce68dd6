{
  "comments": [
    {
      "key": {
        "uuid": "ce3acdc4_14c85a34",
        "filename": "src/math/big/int.go",
        "patchSetId": 1
      },
      "lineNbr": 740,
      "author": {
        "id": 5210
      },
      "writtenOn": "2015-01-05T22:11:56Z",
      "side": 1,
      "message": "just:\n\nn must be \u003e 0.\n\n(probably fits on the previous line).\n\nThis is more in sync with the other documentation in this package, we usually don\u0027t say a function panics. Also, \u003e 0 less ambiguous than \"must be positive\".",
      "revId": "542545c3ad33e785e5a8b7e96041ca239ce68dd6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ce3acdc4_94ea0a7d",
        "filename": "src/math/big/int.go",
        "patchSetId": 1
      },
      "lineNbr": 743,
      "author": {
        "id": 5210
      },
      "writtenOn": "2015-01-05T22:11:56Z",
      "side": 1,
      "message": "The other panics in this package don\u0027t mention the package - it\u0027s also evident from the stack trace. Just:\n\npanic(\"non-positive n for ProbablyPrime\")",
      "range": {
        "startLine": 743,
        "startChar": 2,
        "endLine": 743,
        "endChar": 7
      },
      "revId": "542545c3ad33e785e5a8b7e96041ca239ce68dd6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ce3acdc4_3490feda",
        "filename": "src/math/big/int_test.go",
        "patchSetId": 1
      },
      "lineNbr": 994,
      "author": {
        "id": 5210
      },
      "writtenOn": "2015-01-05T22:11:56Z",
      "side": 1,
      "message": "This seems more complicated than necessary. Why not simply pass the n in and then call c.ProbablyPrime(n) inside. There\u0027s no need to pass a closure.",
      "revId": "542545c3ad33e785e5a8b7e96041ca239ce68dd6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ce3acdc4_f48956b9",
        "filename": "src/math/big/int_test.go",
        "patchSetId": 1
      },
      "lineNbr": 996,
      "author": {
        "id": 5210
      },
      "writtenOn": "2015-01-05T22:11:56Z",
      "side": 1,
      "message": "if n \u003c\u003d 0 \u0026\u0026 recover() \u003d\u003d nil { ...\n\nand then we can test also valid n\u0027s",
      "range": {
        "startLine": 996,
        "startChar": 3,
        "endLine": 996,
        "endChar": 5
      },
      "revId": "542545c3ad33e785e5a8b7e96041ca239ce68dd6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ce3acdc4_54370282",
        "filename": "src/math/big/int_test.go",
        "patchSetId": 1
      },
      "lineNbr": 1002,
      "author": {
        "id": 5210
      },
      "writtenOn": "2015-01-05T22:11:56Z",
      "side": 1,
      "message": "c :\u003d NewInt(11)",
      "range": {
        "startLine": 1002,
        "startChar": 0,
        "endLine": 1002,
        "endChar": 1
      },
      "revId": "542545c3ad33e785e5a8b7e96041ca239ce68dd6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}