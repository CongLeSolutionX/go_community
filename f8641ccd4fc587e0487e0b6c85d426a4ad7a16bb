{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "cdf99778_0ac2930e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-02-11T22:57:55Z",
      "side": 1,
      "message": "Superseded.",
      "parentUuid": "adacec64_6ad16d3d",
      "tag": "autogenerated:trybots~beginning",
      "revId": "f8641ccd4fc587e0487e0b6c85d426a4ad7a16bb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6f0a5871_b7f88c95",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-02-11T22:57:55Z",
      "side": 1,
      "message": "SlowBots beginning. Status page: https://farmer.golang.org/try?commit\u003df8641ccd",
      "tag": "autogenerated:trybots~beginning",
      "revId": "f8641ccd4fc587e0487e0b6c85d426a4ad7a16bb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c7125c5e_3b7bcbdf",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-02-11T23:15:03Z",
      "side": 1,
      "message": "SlowBots are happy.\n\nSlowBot builds that ran:\n* linux-amd64-nocgo\n",
      "parentUuid": "6f0a5871_b7f88c95",
      "tag": "autogenerated:trybots~happy",
      "revId": "f8641ccd4fc587e0487e0b6c85d426a4ad7a16bb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9f5cbeae_c1a70c62",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 34636
      },
      "writtenOn": "2022-02-13T17:52:01Z",
      "side": 1,
      "message": "[-1 because of the failing test in legacy code.]",
      "revId": "f8641ccd4fc587e0487e0b6c85d426a4ad7a16bb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9ce1a612_195c7afc",
        "filename": "src/runtime/os_aix.go",
        "patchSetId": 9
      },
      "lineNbr": 377,
      "author": {
        "id": 5167
      },
      "writtenOn": "2022-02-14T17:53:05Z",
      "side": 1,
      "message": "Unless I\u0027m mistaken, we only use this in os_linux.go, so it doesn\u0027t need to be defined on any other OS.",
      "revId": "f8641ccd4fc587e0487e0b6c85d426a4ad7a16bb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1e82d34b_d533be5f",
        "filename": "src/runtime/os_aix.go",
        "patchSetId": 9
      },
      "lineNbr": 377,
      "author": {
        "id": 12120
      },
      "writtenOn": "2022-02-14T20:13:17Z",
      "side": 1,
      "message": "We check for this in sighandler in signal_unix.go, so unfortunately it is needed (or some alternative, like an unconditional function call defined everywhere).",
      "parentUuid": "9ce1a612_195c7afc",
      "revId": "f8641ccd4fc587e0487e0b6c85d426a4ad7a16bb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b03daaa3_d68e68f1",
        "filename": "src/runtime/os_linux.go",
        "patchSetId": 9
      },
      "lineNbr": 707,
      "author": {
        "id": 34636
      },
      "writtenOn": "2022-02-13T17:52:01Z",
      "side": 1,
      "message": "This change at present fails the unit test of some \"legacy\" code:\n\n  [ cd go/src ]\n  ../bin/go get kernel.org/pub/linux/libs/security/libcap/psx\n  CGO_ENABLED\u003d0 ../bin/go test -mod\u003dreadonly \\\n     kernel.org/pub/linux/libs/security/libcap/psx\n\nThe failure (`fatal error: schedule: holding locks`) seems to be somewhere in the generic test setup code and not in the unit tests themselves (https://git.kernel.org/pub/scm/libs/libcap/libcap.git/tree/psx/psx_test.go).\n\nFor reference, when the test is compiled with `CGO_ENABLED\u003d0` the `psx` package is a simple wrapper around this `syscall.AllThreadsSyscall()` mechanism:\n\nhttps://git.kernel.org/pub/scm/libs/libcap/libcap.git/tree/psx/psx.go",
      "revId": "f8641ccd4fc587e0487e0b6c85d426a4ad7a16bb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c9abed11_0e6c41f1",
        "filename": "src/runtime/os_linux.go",
        "patchSetId": 9
      },
      "lineNbr": 707,
      "author": {
        "id": 12120
      },
      "writtenOn": "2022-02-14T20:09:06Z",
      "side": 1,
      "message": "Thanks for this. I forgot to releasem and starttheworld in the errno case.\n\nI\u0027ve also added TestAllThreadsSyscallError to cover simply error returns like this.",
      "parentUuid": "b03daaa3_d68e68f1",
      "revId": "f8641ccd4fc587e0487e0b6c85d426a4ad7a16bb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e56e0453_47cfff73",
        "filename": "src/runtime/os_linux.go",
        "patchSetId": 9
      },
      "lineNbr": 719,
      "author": {
        "id": 34636
      },
      "writtenOn": "2022-02-13T17:52:01Z",
      "side": 1,
      "message": "I find this comment a little chatty and somewhat vague. It seems to be watering down user expectations. The original implementation for this functionality (https://go-review.googlesource.com/c/go/+/210639) declared:\n\n...The wrappers serialize execution of the\nruntime to ensure no race conditions where any Go code observes\na non-atomic OS state change....\n\nIt was certainly my intent that this function not allow go code to ever see old -\u003e new -\u003e old -\u003e new sequences; just old -\u003e new.",
      "range": {
        "startLine": 713,
        "startChar": 0,
        "endLine": 719,
        "endChar": 40
      },
      "revId": "f8641ccd4fc587e0487e0b6c85d426a4ad7a16bb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1e3817a5_c37d2b45",
        "filename": "src/runtime/os_linux.go",
        "patchSetId": 9
      },
      "lineNbr": 719,
      "author": {
        "id": 12120
      },
      "writtenOn": "2022-02-14T20:09:06Z",
      "side": 1,
      "message": "I want to explain the how and why and ensure the internal vs external requirements are clear to future runtime developers. Otherwise I expect myself to come back in a few years and think this doesn\u0027t need STW anymore.\n\nI\u0027ve reworded a bit to try to make the guarantee we provide to users more clear.",
      "parentUuid": "e56e0453_47cfff73",
      "range": {
        "startLine": 713,
        "startChar": 0,
        "endLine": 719,
        "endChar": 40
      },
      "revId": "f8641ccd4fc587e0487e0b6c85d426a4ad7a16bb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3ab8ecd4_40703239",
        "filename": "src/runtime/os_linux.go",
        "patchSetId": 9
      },
      "lineNbr": 814,
      "author": {
        "id": 34636
      },
      "writtenOn": "2022-02-13T17:52:01Z",
      "side": 1,
      "message": "Again this seems chatty. Could it read something like this(?):\n\nNot all system calls are idempotent, so we only execute the system call once on each thread.",
      "range": {
        "startLine": 811,
        "startChar": 0,
        "endLine": 814,
        "endChar": 0
      },
      "revId": "f8641ccd4fc587e0487e0b6c85d426a4ad7a16bb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7b8bfe57_2c7e51ef",
        "filename": "src/runtime/os_linux.go",
        "patchSetId": 9
      },
      "lineNbr": 814,
      "author": {
        "id": 12120
      },
      "writtenOn": "2022-02-14T20:09:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3ab8ecd4_40703239",
      "range": {
        "startLine": 811,
        "startChar": 0,
        "endLine": 814,
        "endChar": 0
      },
      "revId": "f8641ccd4fc587e0487e0b6c85d426a4ad7a16bb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "85173934_56dad6f3",
        "filename": "src/runtime/proc.go",
        "patchSetId": 9
      },
      "lineNbr": 2075,
      "author": {
        "id": 5167
      },
      "writtenOn": "2022-02-14T17:53:05Z",
      "side": 1,
      "message": "Maybe \"starting the new thread\"? \"Thread creation\" feels a bit ambiguous because it could either mean OS thread creation, or it could refer to everything newm is doing.",
      "range": {
        "startLine": 2075,
        "startChar": 45,
        "endLine": 2075,
        "endChar": 60
      },
      "revId": "f8641ccd4fc587e0487e0b6c85d426a4ad7a16bb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "008fea3d_3e26d509",
        "filename": "src/runtime/proc.go",
        "patchSetId": 9
      },
      "lineNbr": 2075,
      "author": {
        "id": 12120
      },
      "writtenOn": "2022-02-14T20:13:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "85173934_56dad6f3",
      "range": {
        "startLine": 2075,
        "startChar": 45,
        "endLine": 2075,
        "endChar": 60
      },
      "revId": "f8641ccd4fc587e0487e0b6c85d426a4ad7a16bb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "002fc834_3c1b7c9d",
        "filename": "src/runtime/signal_unix.go",
        "patchSetId": 9
      },
      "lineNbr": 74,
      "author": {
        "id": 5206
      },
      "writtenOn": "2022-02-12T02:11:22Z",
      "side": 1,
      "message": "Is this comment still accurate?",
      "revId": "f8641ccd4fc587e0487e0b6c85d426a4ad7a16bb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "806d2d0a_d51de0f9",
        "filename": "src/runtime/signal_unix.go",
        "patchSetId": 9
      },
      "lineNbr": 74,
      "author": {
        "id": 12120
      },
      "writtenOn": "2022-02-14T20:09:06Z",
      "side": 1,
      "message": "Nope, thanks.",
      "parentUuid": "002fc834_3c1b7c9d",
      "revId": "f8641ccd4fc587e0487e0b6c85d426a4ad7a16bb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}