{
  "comments": [
    {
      "key": {
        "uuid": "b8239a88_b582a6ad",
        "filename": "src/runtime/proc.go",
        "patchSetId": 3
      },
      "lineNbr": 1016,
      "author": {
        "id": 5206
      },
      "writtenOn": "2019-03-11T23:20:17Z",
      "side": 1,
      "message": "Won\u0027t the atomic.Store on the next line ensure that this store is pushed out to all processors?  Or, for that matter, the unlock(\u0026sched.lock) below?\n\nI can see the use of the atomic.Load below, since it is called when sched.lock is not held.  Similarly I can see the use of an atomic.Load in exitsyscallfast, though this CL doesn\u0027t have that.  But I can\u0027t see the use of an atomic.Store here.",
      "revId": "b745b516153f1918d34265adb24a4b76a8f8cf07",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b81b88a0_5810e337",
        "filename": "src/runtime/proc.go",
        "patchSetId": 3
      },
      "lineNbr": 1016,
      "author": {
        "id": 27994
      },
      "writtenOn": "2019-03-12T07:54:17Z",
      "side": 1,
      "message": "That was my guess too. But Martin suggested that it could be safer to have it.",
      "parentUuid": "b8239a88_b582a6ad",
      "revId": "b745b516153f1918d34265adb24a4b76a8f8cf07",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "111df3df_ff17327d",
        "filename": "src/runtime/proc.go",
        "patchSetId": 3
      },
      "lineNbr": 1016,
      "author": {
        "id": 16006
      },
      "writtenOn": "2019-03-18T10:54:50Z",
      "side": 1,
      "message": "While the other atomic stores/locks might impose an ordering/visibility sufficient for shed.stopwait it looks to be only implicit. Future additions of code or refactoring might miss that sched.stopwait needs to be atomically stored as its otherwise not explicitly stated locally if the atomic.Store is simply removed. If the unlock(\u0026sched.lock) is sufficient to provide all memory guarantees it might be good to document that and also why it is not sufficient for sched.gcwaiting.",
      "parentUuid": "b81b88a0_5810e337",
      "revId": "b745b516153f1918d34265adb24a4b76a8f8cf07",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "93158980_f7ac01c2",
        "filename": "src/runtime/proc.go",
        "patchSetId": 3
      },
      "lineNbr": 1345,
      "author": {
        "id": 5206
      },
      "writtenOn": "2019-03-11T23:20:17Z",
      "side": 1,
      "message": "I don\u0027t see the use of this atomic.Store either, since sched.lock is held.  The atomic.Load below makes sense.",
      "revId": "b745b516153f1918d34265adb24a4b76a8f8cf07",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4b9d4e0d_4dc0a7a4",
        "filename": "src/runtime/proc.go",
        "patchSetId": 3
      },
      "lineNbr": 1345,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-04-11T19:12:46Z",
      "side": 1,
      "message": "I agree. All sched.safePointWait reads and writes except the one below are protected by sched.lock.",
      "parentUuid": "93158980_f7ac01c2",
      "revId": "b745b516153f1918d34265adb24a4b76a8f8cf07",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "738dc459_58cad53c",
        "filename": "src/runtime/proc.go",
        "patchSetId": 3
      },
      "lineNbr": 1403,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-04-11T19:12:46Z",
      "side": 1,
      "message": "Add a comment saying why this one is an atomic load.\n\nOr move it into the block that holds sched.lock a few lines down.",
      "revId": "b745b516153f1918d34265adb24a4b76a8f8cf07",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    }
  ]
}