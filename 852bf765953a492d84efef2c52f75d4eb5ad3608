{
  "comments": [
    {
      "key": {
        "uuid": "94903e87_4a38bab2",
        "filename": "src/encoding/hex/hex.go",
        "patchSetId": 2
      },
      "lineNbr": 67,
      "author": {
        "id": 16006
      },
      "writtenOn": "2017-08-18T19:35:12Z",
      "side": 1,
      "message": "maybe making i a uint and using i/2 (and avoiding the j+1 and extra loop variable)\nhere makes a slight difference for better or worse.",
      "range": {
        "startLine": 67,
        "startChar": 6,
        "endLine": 67,
        "endChar": 8
      },
      "revId": "852bf765953a492d84efef2c52f75d4eb5ad3608",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c12fc33e_caa51128",
        "filename": "src/encoding/hex/hex.go",
        "patchSetId": 2
      },
      "lineNbr": 67,
      "author": {
        "id": 19925
      },
      "writtenOn": "2017-08-21T10:49:37Z",
      "side": 1,
      "message": "There was no real difference with the uint approach on my host.\n\nI had:\n\n    ulen :\u003d uint(len(src))\n    for i :\u003d uint(0); i \u003c ulen; i +\u003d 2 {\n        a :\u003d decodeMap[src[i]]\n        if a \u003d\u003d 0xFF {\n            return 0, InvalidByteError(src[i])\n        }\n        b :\u003d decodeMap[src[i+1]]\n        if b \u003d\u003d 0xFF {\n            return 0, InvalidByteError(src[i+1])\n        }\n        dst[i/2] \u003d (a \u003c\u003c 4) | b\n    }",
      "parentUuid": "94903e87_4a38bab2",
      "range": {
        "startLine": 67,
        "startChar": 6,
        "endLine": 67,
        "endChar": 8
      },
      "revId": "852bf765953a492d84efef2c52f75d4eb5ad3608",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1b92763e_7be3ec57",
        "filename": "src/encoding/hex/hex.go",
        "patchSetId": 2
      },
      "lineNbr": 73,
      "author": {
        "id": 5206
      },
      "writtenOn": "2017-08-18T18:22:42Z",
      "side": 1,
      "message": "I would prefer to see this table statically initialized, to save startup time.  That can be done by hand, or using a go:generate program.",
      "revId": "852bf765953a492d84efef2c52f75d4eb5ad3608",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "58d48c44_a9433677",
        "filename": "src/encoding/hex/hex.go",
        "patchSetId": 2
      },
      "lineNbr": 73,
      "author": {
        "id": 16006
      },
      "writtenOn": "2017-08-18T19:35:12Z",
      "side": 1,
      "message": "Could even be a string so it can be de-duplicated if the same string in other places is used for fast hex decoding.",
      "parentUuid": "1b92763e_7be3ec57",
      "revId": "852bf765953a492d84efef2c52f75d4eb5ad3608",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "19a5c231_c43a005f",
        "filename": "src/encoding/hex/hex.go",
        "patchSetId": 2
      },
      "lineNbr": 73,
      "author": {
        "id": 19925
      },
      "writtenOn": "2017-08-21T10:19:49Z",
      "side": 1,
      "message": "I\u0027m coding up both approaches now (string and generate) to see which one looks more reasonable.",
      "parentUuid": "58d48c44_a9433677",
      "revId": "852bf765953a492d84efef2c52f75d4eb5ad3608",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "43497e58_5d1df0b8",
        "filename": "src/encoding/hex/hex_test.go",
        "patchSetId": 2
      },
      "lineNbr": 173,
      "author": {
        "id": 16006
      },
      "writtenOn": "2017-08-18T19:35:12Z",
      "side": 1,
      "message": "[]byte(\"059ADFaf\")\nmakes it more readable what is decoded.",
      "range": {
        "startLine": 173,
        "startChar": 22,
        "endLine": 173,
        "endChar": 61
      },
      "revId": "852bf765953a492d84efef2c52f75d4eb5ad3608",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1b64f5e1_cefb1f13",
        "filename": "src/encoding/hex/hex_test.go",
        "patchSetId": 2
      },
      "lineNbr": 173,
      "author": {
        "id": 19925
      },
      "writtenOn": "2017-08-21T10:19:49Z",
      "side": 1,
      "message": "I will make this change.",
      "parentUuid": "43497e58_5d1df0b8",
      "range": {
        "startLine": 173,
        "startChar": 22,
        "endLine": 173,
        "endChar": 61
      },
      "revId": "852bf765953a492d84efef2c52f75d4eb5ad3608",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "743fe00e_ae5a1fc7",
        "filename": "src/encoding/hex/hex_test.go",
        "patchSetId": 2
      },
      "lineNbr": 174,
      "author": {
        "id": 24096
      },
      "writtenOn": "2017-08-20T16:43:34Z",
      "side": 1,
      "message": "IMO, this can be better written as \"sink \u003d make([]byte, DecodedLen(size))\", so as to not leak any abstractions.\n\nAnd maybe we can do the same thing in BenchmarkEncode too.",
      "revId": "852bf765953a492d84efef2c52f75d4eb5ad3608",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ffbe5f5f_ce564765",
        "filename": "src/encoding/hex/hex_test.go",
        "patchSetId": 2
      },
      "lineNbr": 174,
      "author": {
        "id": 19925
      },
      "writtenOn": "2017-08-21T10:19:49Z",
      "side": 1,
      "message": "I\u0027m neutral about this change.  Though if it\u0027s made I agree it should be done in the BenchmarkEncode() too",
      "parentUuid": "743fe00e_ae5a1fc7",
      "revId": "852bf765953a492d84efef2c52f75d4eb5ad3608",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    }
  ]
}