{
  "comments": [
    {
      "key": {
        "uuid": "aaef03d3_8ea877ba",
        "filename": "src/cmd/go/alldocs.go",
        "patchSetId": 3
      },
      "lineNbr": 445,
      "author": {
        "id": 5015
      },
      "writtenOn": "2019-01-22T00:57:42Z",
      "side": 1,
      "message": "\"conventionally early\" is odd writing. how about \n\nTo convey to humans and machine tools that code is generated,\ngenerated source should have a line near the beginning of the\nfile that matches the following regular expression (in Go syntax):\n\n...",
      "revId": "aa5e7a0fd0a73aea84e979b8d353a72301d7b913",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bc66aaae_4d84a64f",
        "filename": "src/cmd/go/alldocs.go",
        "patchSetId": 3
      },
      "lineNbr": 445,
      "author": {
        "id": 6005
      },
      "writtenOn": "2019-01-22T02:05:59Z",
      "side": 1,
      "message": "\u003e \"conventionally early\" is odd writing.\n\nI can see that now. What if it said \"generally early\" or \"typically early\", would that still be odd?\n\n\u003e how about\n\u003e\n\u003e ... generated source should have a line near the beginning of the\nfile ...\n\nI\u0027m afraid such phrasing suffers from a similar lack of clarity about whether a matching line counts, if it appears not very early in the file. The goal of this CL is to make it very clear that the line still counts when found anywhere in the file, as the original specification explicitly said.\n\nHow about one of these 2 new proposals:\n\n\u003e To convey to humans and machine tools that code is generated,\n\u003e generated source should have a line, which is typically placed\n\u003e near the beginning of the file, that matches the following\n\u003e regular expression (in Go syntax):\n\u003e\n\u003e     ^// Code generated .* DO NOT EDIT\\.$\n\nOr:\n\n\u003e To convey to humans and machine tools that code is generated,\n\u003e generated source should have a line that matches the following\n\u003e regular expression (in Go syntax):\n\u003e \n\u003e     ^// Code generated .* DO NOT EDIT\\.$\n\u003e \n\u003e The line may appear anywhere in the file, but is typically\n\u003e placed near the beginning for human findability.",
      "parentUuid": "aaef03d3_8ea877ba",
      "revId": "aa5e7a0fd0a73aea84e979b8d353a72301d7b913",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "43366362_e4ff37f0",
        "filename": "src/cmd/go/alldocs.go",
        "patchSetId": 3
      },
      "lineNbr": 445,
      "author": {
        "id": 5015
      },
      "writtenOn": "2019-01-22T03:22:37Z",
      "side": 1,
      "message": "I like the last version, but \"human findability\"? Doesn\u0027t that mean how findable humans are? Think \"bug findability\", for example. But who cares who\u0027s doing the finding?\n\nTo convey to humans and machine tools that code is generated,\ngenerated source should have a line that matches the following\nregular expression (in Go syntax):\n\n    ^// Code generated .* DO NOT EDIT\\.$\n\nThe line may appear anywhere in the file, but is typically\nplaced near the beginning so it is easy to find.",
      "parentUuid": "bc66aaae_4d84a64f",
      "revId": "aa5e7a0fd0a73aea84e979b8d353a72301d7b913",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9293d1a3_1d8cf23e",
        "filename": "src/cmd/go/alldocs.go",
        "patchSetId": 3
      },
      "lineNbr": 445,
      "author": {
        "id": 6005
      },
      "writtenOn": "2019-01-22T05:10:02Z",
      "side": 1,
      "message": "Thanks for helping iterate towards a better copy. I think this sounds good, and addresses the issue.\n\nI\u0027ve updated the code to match. PTAL.",
      "parentUuid": "43366362_e4ff37f0",
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "aa5e7a0fd0a73aea84e979b8d353a72301d7b913",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}