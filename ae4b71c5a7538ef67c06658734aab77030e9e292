{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "085f1397_feb3e75f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 6545
      },
      "writtenOn": "2023-11-10T11:11:53Z",
      "side": 1,
      "message": "LGTM",
      "revId": "ae4b71c5a7538ef67c06658734aab77030e9e292",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "158c26d7_dd923289",
        "filename": "src/internal/zstd/zstd.go",
        "patchSetId": 1
      },
      "lineNbr": 342,
      "author": {
        "id": 6365
      },
      "writtenOn": "2023-11-10T16:04:20Z",
      "side": 1,
      "message": "It looks like this is setting up to do a length-1 `Read` in the loop below?\n\nI wonder if it would be clearer (and possibly more efficient) to instead use multiple seeks, so that we don\u0027t have to actually fetch bytes (potentially from disk) for a block that we\u0027re going to ignore anyway. Perhaps something like:\n\n```go\n\tr.blockOffset +\u003d int64(relativeOffset)\n\t\n\t// Implementations of Seeker do not always detect invalid offsets,\n\t// so check that the new offset is valid by comparing to the end.\n\tprev, err :\u003d seeker.Seek(0, io.SeekCurrent)\n\tif err !\u003d nil {\n\t\treturn r.wrapError(0, err)\n\t}\n\tend, err :\u003d seeker.Seek(0, io.SeekEnd)\n\tif err !\u003d nil {\n\t\tseeker.Seek(prev, io.SeekStart)\n\t\treturn r.wrapError(0, err)\n\t}\n\tif prev \u003e end - int64(size) {\n\t\tseeker.Seek(prev, io.SeekStart)\n\t\treturn r.wrapError(0, â€¦)\n\t}\n\n\t// The new offset is valid, so seek to it.\n\t_, err \u003d seeker.Seek(prev+int64(size), io.SeekStart)\n\tif err !\u003d nil {\n\t\treturn r.wrapError(0, err)\n\t}\n\tr.blockoffset +\u003d int64(size)\n\treturn nil\n```",
      "range": {
        "startLine": 335,
        "startChar": 0,
        "endLine": 342,
        "endChar": 10
      },
      "revId": "ae4b71c5a7538ef67c06658734aab77030e9e292",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3fada576_29954542",
        "filename": "src/internal/zstd/zstd.go",
        "patchSetId": 1
      },
      "lineNbr": 342,
      "author": {
        "id": 6545
      },
      "writtenOn": "2023-11-10T16:19:47Z",
      "side": 1,
      "message": "Doesn\u0027t it just do a 1 byte read at the end of the skip? Maybe I am misreading.",
      "parentUuid": "158c26d7_dd923289",
      "range": {
        "startLine": 335,
        "startChar": 0,
        "endLine": 342,
        "endChar": 10
      },
      "revId": "ae4b71c5a7538ef67c06658734aab77030e9e292",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2d7299ba_63ee0c81",
        "filename": "src/internal/zstd/zstd.go",
        "patchSetId": 1
      },
      "lineNbr": 342,
      "author": {
        "id": 51461
      },
      "writtenOn": "2023-11-11T02:44:13Z",
      "side": 1,
      "message": "Your suggestion makes the logic a lot clearer, I don\u0027t know much about seek yet, and if three seek syscalls consume less than one seek + reading 1 byte, it\u0027s a great suggestion!",
      "parentUuid": "3fada576_29954542",
      "range": {
        "startLine": 335,
        "startChar": 0,
        "endLine": 342,
        "endChar": 10
      },
      "revId": "ae4b71c5a7538ef67c06658734aab77030e9e292",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1bb6eef7_4d2ca3a9",
        "filename": "src/internal/zstd/zstd.go",
        "patchSetId": 1
      },
      "lineNbr": 342,
      "author": {
        "id": 51461
      },
      "writtenOn": "2023-11-11T16:27:35Z",
      "side": 1,
      "message": "I wrote a simple Benchmark and there\u0027s about a 10% performance difference between them, maybe it\u0027s because my drive is an SSD?",
      "parentUuid": "2d7299ba_63ee0c81",
      "range": {
        "startLine": 335,
        "startChar": 0,
        "endLine": 342,
        "endChar": 10
      },
      "revId": "ae4b71c5a7538ef67c06658734aab77030e9e292",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}