{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "a9b7842a_5e651123",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 9,
      "author": {
        "id": 5200
      },
      "writtenOn": "2024-04-23T16:31:44Z",
      "side": 1,
      "message": "this?",
      "range": {
        "startLine": 9,
        "startChar": 18,
        "endLine": 9,
        "endChar": 22
      },
      "revId": "bbacb963143ea64ea17b65b9958b9601bf2896f5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7f5789ec_d7991e44",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 5200
      },
      "writtenOn": "2024-04-23T16:31:44Z",
      "side": 1,
      "message": "I feel like this is kind of over-aligning, in cases like\n\nfunc f() {\n   for { hotCall() }\n   for { coldCall() }\n}\n\nThis will align both loops, when really only the first one matters.\nIs there more fine-grained info available about which loops are hot or not?\nMaybe we could walk hot-ness up the dominator tree or something, so only loops with hot calls in them would get aligned, instead of this CL which does \"hot call anywhere, align everywhere\".",
      "revId": "bbacb963143ea64ea17b65b9958b9601bf2896f5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0db81b38_4f212a8f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 7061
      },
      "writtenOn": "2024-04-23T16:41:33Z",
      "side": 1,
      "message": "Thanks for the review, I need to add, compare with https://go.dev/cl/577935 , these are alternatives -- and both only matter, as far as I can tell, on AMD64.  The other CL substantially overlaps thjs one from the POV of applicable comments.\n\nThe two CLs have both been benchmarked relatively thoroughly (especially this one) and as they are, this produces about a 1.2-1.3% performance improvement for PGO binaries (this is geomean of bent, and also compilebench).\n\nThe other CL produces a bit better performance (about 1.5%) and smaller increase in binary size, but requires a new conditional-align assembly instruction that is currently only implemented on amd64 and arm64 (where I benchmarked and saw no improvement).",
      "revId": "bbacb963143ea64ea17b65b9958b9601bf2896f5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "79860046_170e2141",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 7061
      },
      "writtenOn": "2024-05-07T17:38:44Z",
      "side": 1,
      "message": "Fixed these in remarks in the version of the CL that we want to keep.",
      "revId": "bbacb963143ea64ea17b65b9958b9601bf2896f5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "29bcaab2_8922bf2d",
        "filename": "src/cmd/compile/internal/inline/inl.go",
        "patchSetId": 5
      },
      "lineNbr": 250,
      "author": {
        "id": 5200
      },
      "writtenOn": "2024-04-23T16:31:44Z",
      "side": 1,
      "message": "I don\u0027t think you need the profile!\u003dnil wrapper any more.",
      "revId": "bbacb963143ea64ea17b65b9958b9601bf2896f5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b9c78de1_4d0d97d4",
        "filename": "src/cmd/compile/internal/inline/inl.go",
        "patchSetId": 5
      },
      "lineNbr": 250,
      "author": {
        "id": 7061
      },
      "writtenOn": "2024-05-07T17:38:44Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "29bcaab2_8922bf2d",
      "revId": "bbacb963143ea64ea17b65b9958b9601bf2896f5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bcef722d_fa9630f4",
        "filename": "src/cmd/compile/internal/inline/inl.go",
        "patchSetId": 5
      },
      "lineNbr": 935,
      "author": {
        "id": 5200
      },
      "writtenOn": "2024-04-23T16:31:44Z",
      "side": 1,
      "message": "Also describe the 3rd return value here.",
      "revId": "bbacb963143ea64ea17b65b9958b9601bf2896f5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0a94a687_0dddff9e",
        "filename": "src/cmd/compile/internal/inline/inl.go",
        "patchSetId": 5
      },
      "lineNbr": 935,
      "author": {
        "id": 7061
      },
      "writtenOn": "2024-05-07T17:38:44Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bcef722d_fa9630f4",
      "revId": "bbacb963143ea64ea17b65b9958b9601bf2896f5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2a7094fa_64688337",
        "filename": "src/cmd/compile/internal/ssa/block.go",
        "patchSetId": 5
      },
      "lineNbr": 34,
      "author": {
        "id": 5200
      },
      "writtenOn": "2024-04-23T16:31:44Z",
      "side": 1,
      "message": "Kind of unfortunate this bumps Block up in size.\nWe could have a flags uint8 field instead to share space with FlagsLiveAtEnd.\nWe could also make BlockKind a uint8 instead of an int16.",
      "revId": "bbacb963143ea64ea17b65b9958b9601bf2896f5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d232d6f7_24665ce4",
        "filename": "src/cmd/compile/internal/ssa/block.go",
        "patchSetId": 5
      },
      "lineNbr": 34,
      "author": {
        "id": 7061
      },
      "writtenOn": "2024-05-07T17:38:44Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2a7094fa_64688337",
      "revId": "bbacb963143ea64ea17b65b9958b9601bf2896f5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9adbac9c_8d9ce5ee",
        "filename": "src/cmd/compile/internal/ssa/looprotate.go",
        "patchSetId": 5
      },
      "lineNbr": 62,
      "author": {
        "id": 5200
      },
      "writtenOn": "2024-04-23T16:31:44Z",
      "side": 1,
      "message": "We\u0027re using \"head\" in two different senses here. Perhaps we should use a different name.\nCurrently \"head\" \u003d first block of the loop to be executed.\n\nI kind of lead towards\n\"initial\" \u003d first block of the loop to be executed\n\"head\" \u003d first block of the loop in PC order\nbut that\u0027s kind of a confusing rename given the current meaning. Other suggestions welcome.",
      "range": {
        "startLine": 62,
        "startChar": 10,
        "endLine": 62,
        "endChar": 14
      },
      "revId": "bbacb963143ea64ea17b65b9958b9601bf2896f5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ab9c3ce5_520eb367",
        "filename": "src/cmd/compile/internal/ssa/looprotate.go",
        "patchSetId": 5
      },
      "lineNbr": 62,
      "author": {
        "id": 7061
      },
      "writtenOn": "2024-05-07T17:38:44Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9adbac9c_8d9ce5ee",
      "range": {
        "startLine": 62,
        "startChar": 10,
        "endLine": 62,
        "endChar": 14
      },
      "revId": "bbacb963143ea64ea17b65b9958b9601bf2896f5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}