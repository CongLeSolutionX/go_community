{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "887fe3a9_c72630da",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 61858
      },
      "writtenOn": "2023-12-22T07:12:33Z",
      "side": 1,
      "message": "Hi, does this patch really do what it claims to do? It seems loop body hasn\u0027t been placed after loop header? i.e. the result looks like:\n\n//\t  JMP entry\n//\tloopHeader:\n//        ...\n//\tentry:\n//\t  CMPQ ...\n//\t  JLT loopExit\n//      loopBody:\n//        ...\n//        jmp loopHeader\n//      loopExit:",
      "revId": "39ce5907ca334fc5c10c6212a9a15f9225dc4877",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "06d53f8f_a8268040",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5200
      },
      "writtenOn": "2023-12-22T16:47:35Z",
      "side": 1,
      "message": "Could you show a concrete example where it isn\u0027t working? It seems to work in obvious cases, like\n\nfunc f(a []int) int {\n\ts :\u003d 0\n\tfor _, x :\u003d range a {\n\t\ts +\u003d x\n\t}\n\treturn s\n}\n\n\t0x000c 00012 (/Users/khr/gowork/tmp1.go:5)\tJMP\t28\n\t0x0010 00016 (/Users/khr/gowork/tmp1.go:5)\tMOVD\t(R0)(R2\u003c\u003c3), R4\n\t0x0014 00020 (/Users/khr/gowork/tmp1.go:5)\tADD\t$1, R2, R2\n\t0x0018 00024 (/Users/khr/gowork/tmp1.go:6)\tADD\tR3, R4, R3\n\t0x001c 00028 (/Users/khr/gowork/tmp1.go:5)\tCMP\tR2, R1\n\t0x0020 00032 (/Users/khr/gowork/tmp1.go:5)\tBGT\t16",
      "parentUuid": "887fe3a9_c72630da",
      "revId": "39ce5907ca334fc5c10c6212a9a15f9225dc4877",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d9068d16_a728417f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 61858
      },
      "writtenOn": "2023-12-25T02:44:35Z",
      "side": 1,
      "message": "\u003e Could you show a concrete example where it isn\u0027t working?\n\ne.g.\n```\nfunc main() {\n\ts :\u003d 0\n\tfor i :\u003d 0; i \u003c 10; i++ {\n\t\tif i \u003c 5 {\n\t\t\tpanic(\"FF\")\n\t\t}\n\t\ts +\u003d i\n\n\t}\n\tprintln(s)\n}\n\n...\n00020  XORL    AX, AX\n00022  XORL    CX, CX\n00024  JMP     36\n00026  LEAQ    1(AX), DX\n00030  ADDQ    AX, CX\n00033  MOVQ    DX, AX\n00036  CMPQ    AX, $10\n00040  JGE     50   ;;header\n00042  CMPQ    AX, $5 ;;loop body\n00046  JGE     26 \n00048  JMP     90\n00050  MOVQ    CX, main.s+16(SP) ;;exit\n...\n```\n`s+\u003di` is well placed, but `if\u003c5` stmt is placed after loop header",
      "parentUuid": "06d53f8f_a8268040",
      "revId": "39ce5907ca334fc5c10c6212a9a15f9225dc4877",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "83dd322b_1baef5b9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5200
      },
      "writtenOn": "2023-12-26T16:58:08Z",
      "side": 1,
      "message": "Yeah, I guess a better way to describe this optimization is that it moves the last block of the body to the top of the loop. Not the whole body.\n\nIt still succeeds in what it is intended to do - get rid of the unconditional branch at the end of the loop.",
      "parentUuid": "d9068d16_a728417f",
      "revId": "39ce5907ca334fc5c10c6212a9a15f9225dc4877",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "913a3f4b_a4c5d9c2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 61858
      },
      "writtenOn": "2023-12-27T01:28:58Z",
      "side": 1,
      "message": "\u003e Yeah, I guess a better way to describe this optimization is that it moves the last block of the body to the top of the loop. Not the whole body.\n\u003e \n\u003e It still succeeds in what it is intended to do - get rid of the unconditional branch at the end of the loop.\n\nOkay, at least it moved one of unconditional branch to top of the loop. Maybe we can move the whole loop body in other CL, to further eliminate redundant unconditional jmp.",
      "parentUuid": "83dd322b_1baef5b9",
      "revId": "39ce5907ca334fc5c10c6212a9a15f9225dc4877",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "453a24d7_8d2c5f96",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5200
      },
      "writtenOn": "2023-12-29T01:41:20Z",
      "side": 1,
      "message": "\u003e to further eliminate redundant unconditional jmp.\n\nWhat other unconditional jump? There isn\u0027t one in the case just described. Maybe you mean there is a case where the second-to-last block ended with an unconditional jump? What source generates that case?",
      "parentUuid": "913a3f4b_a4c5d9c2",
      "revId": "39ce5907ca334fc5c10c6212a9a15f9225dc4877",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}