{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "887fe3a9_c72630da",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 61858
      },
      "writtenOn": "2023-12-22T07:12:33Z",
      "side": 1,
      "message": "Hi, does this patch really do what it claims to do? It seems loop body hasn\u0027t been placed after loop header? i.e. the result looks like:\n\n//\t  JMP entry\n//\tloopHeader:\n//        ...\n//\tentry:\n//\t  CMPQ ...\n//\t  JLT loopExit\n//      loopBody:\n//        ...\n//        jmp loopHeader\n//      loopExit:",
      "revId": "39ce5907ca334fc5c10c6212a9a15f9225dc4877",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "06d53f8f_a8268040",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5200
      },
      "writtenOn": "2023-12-22T16:47:35Z",
      "side": 1,
      "message": "Could you show a concrete example where it isn\u0027t working? It seems to work in obvious cases, like\n\nfunc f(a []int) int {\n\ts :\u003d 0\n\tfor _, x :\u003d range a {\n\t\ts +\u003d x\n\t}\n\treturn s\n}\n\n\t0x000c 00012 (/Users/khr/gowork/tmp1.go:5)\tJMP\t28\n\t0x0010 00016 (/Users/khr/gowork/tmp1.go:5)\tMOVD\t(R0)(R2\u003c\u003c3), R4\n\t0x0014 00020 (/Users/khr/gowork/tmp1.go:5)\tADD\t$1, R2, R2\n\t0x0018 00024 (/Users/khr/gowork/tmp1.go:6)\tADD\tR3, R4, R3\n\t0x001c 00028 (/Users/khr/gowork/tmp1.go:5)\tCMP\tR2, R1\n\t0x0020 00032 (/Users/khr/gowork/tmp1.go:5)\tBGT\t16",
      "parentUuid": "887fe3a9_c72630da",
      "revId": "39ce5907ca334fc5c10c6212a9a15f9225dc4877",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d9068d16_a728417f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 61858
      },
      "writtenOn": "2023-12-25T02:44:35Z",
      "side": 1,
      "message": "\u003e Could you show a concrete example where it isn\u0027t working?\n\ne.g.\n```\nfunc main() {\n\ts :\u003d 0\n\tfor i :\u003d 0; i \u003c 10; i++ {\n\t\tif i \u003c 5 {\n\t\t\tpanic(\"FF\")\n\t\t}\n\t\ts +\u003d i\n\n\t}\n\tprintln(s)\n}\n\n...\n00020  XORL    AX, AX\n00022  XORL    CX, CX\n00024  JMP     36\n00026  LEAQ    1(AX), DX\n00030  ADDQ    AX, CX\n00033  MOVQ    DX, AX\n00036  CMPQ    AX, $10\n00040  JGE     50   ;;header\n00042  CMPQ    AX, $5 ;;loop body\n00046  JGE     26 \n00048  JMP     90\n00050  MOVQ    CX, main.s+16(SP) ;;exit\n...\n```\n`s+\u003di` is well placed, but `if\u003c5` stmt is placed after loop header",
      "parentUuid": "06d53f8f_a8268040",
      "revId": "39ce5907ca334fc5c10c6212a9a15f9225dc4877",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "83dd322b_1baef5b9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5200
      },
      "writtenOn": "2023-12-26T16:58:08Z",
      "side": 1,
      "message": "Yeah, I guess a better way to describe this optimization is that it moves the last block of the body to the top of the loop. Not the whole body.\n\nIt still succeeds in what it is intended to do - get rid of the unconditional branch at the end of the loop.",
      "parentUuid": "d9068d16_a728417f",
      "revId": "39ce5907ca334fc5c10c6212a9a15f9225dc4877",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "913a3f4b_a4c5d9c2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 61858
      },
      "writtenOn": "2023-12-27T01:28:58Z",
      "side": 1,
      "message": "\u003e Yeah, I guess a better way to describe this optimization is that it moves the last block of the body to the top of the loop. Not the whole body.\n\u003e \n\u003e It still succeeds in what it is intended to do - get rid of the unconditional branch at the end of the loop.\n\nOkay, at least it moved one of unconditional branch to top of the loop. Maybe we can move the whole loop body in other CL, to further eliminate redundant unconditional jmp.",
      "parentUuid": "83dd322b_1baef5b9",
      "revId": "39ce5907ca334fc5c10c6212a9a15f9225dc4877",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "453a24d7_8d2c5f96",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5200
      },
      "writtenOn": "2023-12-29T01:41:20Z",
      "side": 1,
      "message": "\u003e to further eliminate redundant unconditional jmp.\n\nWhat other unconditional jump? There isn\u0027t one in the case just described. Maybe you mean there is a case where the second-to-last block ended with an unconditional jump? What source generates that case?",
      "parentUuid": "913a3f4b_a4c5d9c2",
      "revId": "39ce5907ca334fc5c10c6212a9a15f9225dc4877",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fec68d86_1152e0fa",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 61858
      },
      "writtenOn": "2023-12-29T06:32:38Z",
      "side": 1,
      "message": "\u003e \u003e to further eliminate redundant unconditional jmp.\n\u003e \n\u003e What other unconditional jump? There isn\u0027t one in the case just described. Maybe you mean there is a case where the second-to-last block ended with an unconditional jump? What source generates that case?\n\nSorry in this example the second-to-last block is not an unconditional jump, but we cannot assume that such a situation will not arise after IR optimization. The second approach seems better because it eliminates one jmp on the last time of loop iterations, reducing a potential icache miss + itlb miss, and also results in a slightly smaller final program size.\n\n\u003d\u003d\u003d source\n```\nfunc main() {\n    s :\u003d 0\n    for i :\u003d 0; i \u003c 10; i++ {\n        if i \u003d\u003d 5 {\n            panic(\"FF\")\n        }\n        s +\u003d i\n\n    }\n    println(s)\n}\n```\n\n\u003d\u003d\u003d now\n    0x0012 00018 (/Users/y1yang/GolandProjects/test/test.go:5)  JMP 32 ;; goto loop header\n    0x0014 00020 (/Users/y1yang/GolandProjects/test/test.go:5)  LEAQ    1(AX), DX\n    0x0018 00024 (/Users/y1yang/GolandProjects/test/test.go:9)  ADDQ    AX, CX\n    0x001b 00027 (/Users/y1yang/GolandProjects/test/test.go:5)  MOVQ    DX, AX\n    0x001e 00030 (/Users/y1yang/GolandProjects/test/test.go:5)  NOP \n    0x0020 00032 (/Users/y1yang/GolandProjects/test/test.go:5)  CMPQ    AX, $10 ;; i\u003c10\n    0x0024 00036 (/Users/y1yang/GolandProjects/test/test.go:5)  JGE 46 ;; goto exit or fallthrough to loop body\n    0x0026 00038 (/Users/y1yang/GolandProjects/test/test.go:6)  CMPQ    AX, $5 ;; i \u003d\u003d 5\n    0x002a 00042 (/Users/y1yang/GolandProjects/test/test.go:6)  JNE 20 ;; jmp loop body or\n    0x002c 00044 (/Users/y1yang/GolandProjects/test/test.go:6)  JMP 85 ;; jmp panic\n\n\u003d\u003d\u003d all_body_above_header\n    0x0012 00018 (/home/admin/go/mytest/test.go:5)  JMP 36 ;;goto loop header\n    0x0014 00020 (/home/admin/go/mytest/test.go:6)  CMPQ    AX, $5 ;; i\u003c5\n    0x0018 00024 (/home/admin/go/mytest/test.go:6)  JEQ 80 ;; goto panic\n    0x001a 00026 (/home/admin/go/mytest/test.go:5)  LEAQ    1(AX), DX \n    0x001e 00030 (/home/admin/go/mytest/test.go:9)  ADDQ    AX, CX\n    0x0021 00033 (/home/admin/go/mytest/test.go:5)  MOVQ    DX, AX\n    0x0024 00036 (/home/admin/go/mytest/test.go:5)  CMPQ    AX, $10 ;;i\u003c10\n    0x0028 00040 (/home/admin/go/mytest/test.go:5)  JLT 20 ;; jmp body or fall through to exit",
      "parentUuid": "453a24d7_8d2c5f96",
      "revId": "39ce5907ca334fc5c10c6212a9a15f9225dc4877",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2ed1d3ff_467eb098",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5200
      },
      "writtenOn": "2023-12-29T20:30:46Z",
      "side": 1,
      "message": "\u003e Sorry in this example the second-to-last block is not an unconditional jump, but we cannot assume that such a situation will not arise after IR optimization.\n\nYes, it seems possible to me also, just really unlikely. I was wondering if you had run into such a case.\n\n\u003e The second approach seems better because it eliminates one jmp on the last time of loop iterations\n\nThat is a good benefit, sure. This will help when the block following the loop in the block ordering is also the block immediately following the loop in the program. Which I think would be the common case, but I\u0027m not sure quite how common. But in some sense it is relying on unspecified behavior of the layout pass. Maybe we should rotate the loop so that the last block in the loop has a loop-exit edge to the next block after the loop in the schedule? That way we always get rid of one JMP (unless the block following the loop is completely unrelated).",
      "parentUuid": "fec68d86_1152e0fa",
      "revId": "39ce5907ca334fc5c10c6212a9a15f9225dc4877",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}