{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "7d8ffd8c_7f0d8b86",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 25391
      },
      "writtenOn": "2024-08-12T15:26:37Z",
      "side": 1,
      "message": "LGTM overall, just one question re: the checkdead exception for Wasm",
      "revId": "ec16dedf5f300558464c03ffc6e29607f6e96e3a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "91bb7a1f_d597e55f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 13315
      },
      "writtenOn": "2024-08-13T21:27:47Z",
      "side": 1,
      "message": "Thanks.",
      "revId": "ec16dedf5f300558464c03ffc6e29607f6e96e3a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ca2a796b_a6514e71",
        "filename": "src/cmd/link/internal/wasm/asm.go",
        "patchSetId": 5
      },
      "lineNbr": 432,
      "author": {
        "id": 12980
      },
      "writtenOn": "2024-08-12T14:52:03Z",
      "side": 1,
      "message": "Is there a condition under which _rt0_wasm_wasip1_lib wouldn\u0027t be defined?",
      "revId": "ec16dedf5f300558464c03ffc6e29607f6e96e3a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "db6e6bf7_30c47ff3",
        "filename": "src/cmd/link/internal/wasm/asm.go",
        "patchSetId": 5
      },
      "lineNbr": 432,
      "author": {
        "id": 13315
      },
      "writtenOn": "2024-08-12T16:15:05Z",
      "side": 1,
      "message": "No. It should always be defined, unless something in the toolchain is wrong. Here it is just a sanity check. When I started working on this, I forgot to define the symbol, and the link succeeded but generated a weird binary. I\u0027d rather it fail loud here, instead of some weird failure later.",
      "parentUuid": "ca2a796b_a6514e71",
      "revId": "ec16dedf5f300558464c03ffc6e29607f6e96e3a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "27824862_884beac0",
        "filename": "src/cmd/link/internal/wasm/asm.go",
        "patchSetId": 5
      },
      "lineNbr": 432,
      "author": {
        "id": 13315
      },
      "writtenOn": "2024-08-12T16:18:21Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "db6e6bf7_30c47ff3",
      "revId": "ec16dedf5f300558464c03ffc6e29607f6e96e3a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4bb489bf_17e51920",
        "filename": "src/runtime/proc.go",
        "patchSetId": 5
      },
      "lineNbr": 5928,
      "author": {
        "id": 25391
      },
      "writtenOn": "2024-08-12T15:26:37Z",
      "side": 1,
      "message": "is this just because there\u0027s no means of returning to the host? I would\u0027ve expected that if all goroutines are blocked that we would return to the host (via the scheduler; in beforeIdle I think?) on the assumption that some goroutine is waiting for the host to trigger some event.",
      "range": {
        "startLine": 5928,
        "startChar": 29,
        "endLine": 5928,
        "endChar": 54
      },
      "revId": "ec16dedf5f300558464c03ffc6e29607f6e96e3a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "63cc430a_48880958",
        "filename": "src/runtime/proc.go",
        "patchSetId": 5
      },
      "lineNbr": 5928,
      "author": {
        "id": 13315
      },
      "writtenOn": "2024-08-12T16:15:05Z",
      "side": 1,
      "message": "Maybe. We might be able to return to the host. But that is weird, too, in that it looks like the wasmexport function returns, except not really.\n\nI think the current proposed semantic is that the wasmexport call is synchronous.\n\nWe probably could relax and remove the check if we want and have a better design. I\u0027d have to think more.",
      "parentUuid": "4bb489bf_17e51920",
      "range": {
        "startLine": 5928,
        "startChar": 29,
        "endLine": 5928,
        "endChar": 54
      },
      "revId": "ec16dedf5f300558464c03ffc6e29607f6e96e3a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c4b7b4b5_51695fd6",
        "filename": "src/runtime/proc.go",
        "patchSetId": 5
      },
      "lineNbr": 5928,
      "author": {
        "id": 25391
      },
      "writtenOn": "2024-08-12T16:41:07Z",
      "side": 1,
      "message": "ah, understood. yeah, this seems fine to me in that case. the check seems important to enforce those semantics.",
      "parentUuid": "63cc430a_48880958",
      "range": {
        "startLine": 5928,
        "startChar": 29,
        "endLine": 5928,
        "endChar": 54
      },
      "revId": "ec16dedf5f300558464c03ffc6e29607f6e96e3a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d671d9f0_5888a055",
        "filename": "src/runtime/rt0_wasip1_wasm.s",
        "patchSetId": 5
      },
      "lineNbr": 18,
      "author": {
        "id": 12980
      },
      "writtenOn": "2024-08-12T14:52:03Z",
      "side": 1,
      "message": "I don\u0027t quite understand why we need this indirection, nor what prevents main.main from being called when the entry point is _initialize if we simply delegate to _rt0_wasm_wasip1.\n\nIs this still just a placeholder?",
      "revId": "ec16dedf5f300558464c03ffc6e29607f6e96e3a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d94b1a77_6ef2eb66",
        "filename": "src/runtime/rt0_wasip1_wasm.s",
        "patchSetId": 5
      },
      "lineNbr": 18,
      "author": {
        "id": 25391
      },
      "writtenOn": "2024-08-12T15:26:37Z",
      "side": 1,
      "message": "I suspect that, at the very least, this is for consistency with other platforms. for instance, there\u0027s an `_rt0_amd64` and `_rt0_amd64_lib`.",
      "parentUuid": "d671d9f0_5888a055",
      "revId": "ec16dedf5f300558464c03ffc6e29607f6e96e3a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2b681986_d3483177",
        "filename": "src/runtime/rt0_wasip1_wasm.s",
        "patchSetId": 5
      },
      "lineNbr": 18,
      "author": {
        "id": 13315
      },
      "writtenOn": "2024-08-12T16:15:05Z",
      "side": 1,
      "message": "The _lib is just a convention. The linker looks for _rt0_GOARCH_GOOS_lib sybmol as the start symbol for library mode. We could set _initialize to point to _rt0_wasm_wasip1, but I\u0027d rather keep consistency.\n\nWhat prevents main.main from being called is at https://go-review.googlesource.com/c/go/+/604316/5/src/runtime/proc.go#266. The linker sets `islibrary` to true, so it stops after init.",
      "parentUuid": "d94b1a77_6ef2eb66",
      "revId": "ec16dedf5f300558464c03ffc6e29607f6e96e3a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ed694211_c096aae6",
        "filename": "src/runtime/rt0_wasip1_wasm.s",
        "patchSetId": 5
      },
      "lineNbr": 18,
      "author": {
        "id": 12980
      },
      "writtenOn": "2024-08-13T16:28:41Z",
      "side": 1,
      "message": "Thanks for taking the time to answer!",
      "parentUuid": "2b681986_d3483177",
      "revId": "ec16dedf5f300558464c03ffc6e29607f6e96e3a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one Code-Review+2 is required. Self review is not allowed."
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "ec16dedf5f300558464c03ffc6e29607f6e96e3a",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Do-Not-Review",
        "description": {
          "value": "Changes that have DO NOT REVIEW in their commit message are not submittable."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (R|r)(E|e)(V|v)(I|i)(E|e)(W|w).*\""
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:false"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (R|r)(E|e)(V|v)(I|i)(E|e)(W|w).*\""},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (R|r)(E|e)(V|v)(I|i)(E|e)(W|w).*\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "ec16dedf5f300558464c03ffc6e29607f6e96e3a",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Do-Not-Submit",
        "description": {
          "value": "Changes that have DO NOT SUBMIT in their commit message are not submittable."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:false"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "ec16dedf5f300558464c03ffc6e29607f6e96e3a",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Legacy-TryBots-Pass",
        "description": {
          "value": "Legacy TryBots must pass if requested, unless TryBot-Bypass+1 is set."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "label:Run-TryBot\u003dMAX"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:TryBot-Result\u003dMAX"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:TryBot-Bypass\u003dMAX"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Run-TryBot=MAX"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Run-TryBot=MAX"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:TryBot-Result=MAX"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:TryBot-Bypass=MAX"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "patchSetCommitId": "ec16dedf5f300558464c03ffc6e29607f6e96e3a",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Matching-Subject-Prefix",
        "description": {
          "value": "Changes on release branches must have a matching [release-branch.go1.nn] subject prefix."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "branch:\"^refs/heads/release-branch.+\" -prefixsubject:\"[release-branch\""
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:false"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"branch:\"^refs/heads/release-branch.+\" -prefixsubject:\"[release-branch\""},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:\"^refs/heads/release-branch.+\"","prefixsubject:\"[release-branch\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "ec16dedf5f300558464c03ffc6e29607f6e96e3a",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "No-Holds",
        "description": {
          "value": "Changes with a Hold+1 vote are not submittable."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "label:Hold\u003d1"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:false"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Hold=1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Hold=1"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "ec16dedf5f300558464c03ffc6e29607f6e96e3a",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "No-Signed-off-by-Footer",
        "description": {
          "value": "Changes with a Signed-off-by footer are not submittable. See https://go.dev/wiki/CommitMessage."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "hasfooter:Signed-off-by"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:false"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"hasfooter:Signed-off-by"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["hasfooter:Signed-off-by"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "ec16dedf5f300558464c03ffc6e29607f6e96e3a",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "No-Unresolved-Comments",
        "description": {
          "value": "Changes that have unresolved comments are not submittable, unless overriden by adding the hashtag allow-unresolved-comments."
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "-has:unresolved"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "hashtag:allow-unresolved-comments"
          }
        },
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-has:unresolved"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["has:unresolved"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"hashtag:allow-unresolved-comments"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["hashtag:allow-unresolved-comments"]}
      },
      "patchSetCommitId": "ec16dedf5f300558464c03ffc6e29607f6e96e3a",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "No-Wait-Release",
        "description": {
          "value": "Changes with the hashtag wait-release cannot be submitted."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "hashtag:wait-release"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:false"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"hashtag:wait-release"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["hashtag:wait-release"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "ec16dedf5f300558464c03ffc6e29607f6e96e3a",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforcement-satisfied_gerrit"],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "ec16dedf5f300558464c03ffc6e29607f6e96e3a",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "TryBots-Pass",
        "description": {
          "value": "Changes must pass LUCI TryBots unless TryBot-Bypass+1 is set. Vote Commit-Queue+1 to trigger TryBots."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:LUCI-TryBot-Result\u003dMAX"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:TryBot-Bypass\u003dMAX"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:LUCI-TryBot-Result=MAX"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:LUCI-TryBot-Result=MAX"],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:TryBot-Bypass=MAX"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:TryBot-Bypass=MAX"]}
      },
      "patchSetCommitId": "ec16dedf5f300558464c03ffc6e29607f6e96e3a",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}