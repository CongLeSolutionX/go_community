{
  "comments": [
    {
      "key": {
        "uuid": "ef7cc328_a1ba3bda",
        "filename": "src/os/env_windows.go",
        "patchSetId": 8
      },
      "lineNbr": 14,
      "author": {
        "id": 5070
      },
      "writtenOn": "2019-05-15T09:24:33Z",
      "side": 1,
      "message": "Should you have this function return error instead and handle that error in startProcess?\n\nThis CL is claiming to fix issue #32000, but you bailing out when CreateEnvironmentBlock fails makes that untrue.",
      "revId": "a84d0899449aff1a269c05d9d058b7fe016d6d4f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "df25d030_f56ba32c",
        "filename": "src/os/env_windows.go",
        "patchSetId": 8
      },
      "lineNbr": 14,
      "author": {
        "id": 20556
      },
      "writtenOn": "2019-05-15T10:49:17Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "ef7cc328_a1ba3bda",
      "revId": "a84d0899449aff1a269c05d9d058b7fe016d6d4f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b607d14d_8d471a86",
        "filename": "src/os/env_windows.go",
        "patchSetId": 8
      },
      "lineNbr": 25,
      "author": {
        "id": 5070
      },
      "writtenOn": "2019-05-15T09:24:33Z",
      "side": 1,
      "message": "Why do you need `(1 \u003c\u003c 30) - 1`? Why cannot it be round number like `1 \u003c\u003c 30`?",
      "range": {
        "startLine": 25,
        "startChar": 14,
        "endLine": 25,
        "endChar": 27
      },
      "revId": "a84d0899449aff1a269c05d9d058b7fe016d6d4f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7f06e56b_a9cc926a",
        "filename": "src/os/env_windows.go",
        "patchSetId": 8
      },
      "lineNbr": 25,
      "author": {
        "id": 20556
      },
      "writtenOn": "2019-05-15T10:49:17Z",
      "side": 1,
      "message": "Because sizeof(uint16_t)*(1\u003c\u003c30) \u003e INT_MAX.",
      "parentUuid": "b607d14d_8d471a86",
      "range": {
        "startLine": 25,
        "startChar": 14,
        "endLine": 25,
        "endChar": 27
      },
      "revId": "a84d0899449aff1a269c05d9d058b7fe016d6d4f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "16aedc6c_139c22ac",
        "filename": "src/os/env_windows.go",
        "patchSetId": 8
      },
      "lineNbr": 25,
      "author": {
        "id": 5070
      },
      "writtenOn": "2019-05-15T11:05:57Z",
      "side": 1,
      "message": "It has been long hard day here. You have to try and explain it again. Sorry.",
      "parentUuid": "7f06e56b_a9cc926a",
      "range": {
        "startLine": 25,
        "startChar": 14,
        "endLine": 25,
        "endChar": 27
      },
      "revId": "a84d0899449aff1a269c05d9d058b7fe016d6d4f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6327e628_8a9ee710",
        "filename": "src/os/env_windows.go",
        "patchSetId": 8
      },
      "lineNbr": 25,
      "author": {
        "id": 20556
      },
      "writtenOn": "2019-05-15T11:15:06Z",
      "side": 1,
      "message": "Golang can\u0027t have arrays with a total byte length greater than (1\u003c\u003c31)-1, because this is the maximum size of a signed integer on 32-bit machines. If we put your proposed 1\u003c\u003c30, then the uint16 would make the number of bytes 1\u003c\u003c31, and 1\u003c\u003c31 is bigger than (1\u003c\u003c31)-1. So we instead give it (1\u003c\u003c30)-1, which is the maximum value such that when multiplied by the size of a uint16 will give a number less than or equal to (1\u003c\u003c31)-1, in this case (1\u003c\u003c31)-2.",
      "parentUuid": "16aedc6c_139c22ac",
      "range": {
        "startLine": 25,
        "startChar": 14,
        "endLine": 25,
        "endChar": 27
      },
      "revId": "a84d0899449aff1a269c05d9d058b7fe016d6d4f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "36433525_2c0219b3",
        "filename": "src/os/env_windows.go",
        "patchSetId": 8
      },
      "lineNbr": 25,
      "author": {
        "id": 5070
      },
      "writtenOn": "2019-05-15T12:02:51Z",
      "side": 1,
      "message": "Sorry but I am still confused.\n\n\u003e Golang can\u0027t have arrays with a total byte length greater than (1\u003c\u003c31)-1, because this is the maximum size of a signed integer on 32-bit machines.\n\nNot true. Go arrays are index with int. And int on 32-bit CPU is int32. So largest array index you can have (that will work on all different OSes) is max value of int32. Any array, not just []byte.\n\nBut why does this needs to be max possible value? Any large enough value should do. 1\u003c\u003c30 is 1073741824 (about 1 GB of uint16s). I think it large enough to cover larges environment possible. If not, lets go with 1\u003c\u003c31. But why -1 in `(1 \u003c\u003c 30) - 1` ? I still do not see why -1 helps.\n\nI am happy to go as is, but I am worried that future reader will be as confused as I am.",
      "parentUuid": "6327e628_8a9ee710",
      "range": {
        "startLine": 25,
        "startChar": 14,
        "endLine": 25,
        "endChar": 27
      },
      "revId": "a84d0899449aff1a269c05d9d058b7fe016d6d4f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a917e24_2897310c",
        "filename": "src/os/env_windows.go",
        "patchSetId": 8
      },
      "lineNbr": 25,
      "author": {
        "id": 20556
      },
      "writtenOn": "2019-05-15T12:33:33Z",
      "side": 1,
      "message": "INT_MAX\u003d2147483647\nsizeof(uint16)\u003d2\n(1\u003c\u003c30)*2\u003d2147483648\n((1\u003c\u003c30)-1)*2\u003d2147483646",
      "parentUuid": "36433525_2c0219b3",
      "range": {
        "startLine": 25,
        "startChar": 14,
        "endLine": 25,
        "endChar": 27
      },
      "revId": "a84d0899449aff1a269c05d9d058b7fe016d6d4f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a45b893f_d4591264",
        "filename": "src/os/env_windows.go",
        "patchSetId": 8
      },
      "lineNbr": 25,
      "author": {
        "id": 5070
      },
      "writtenOn": "2019-05-16T10:23:49Z",
      "side": 1,
      "message": "I still do not understand your point.",
      "parentUuid": "3a917e24_2897310c",
      "range": {
        "startLine": 25,
        "startChar": 14,
        "endLine": 25,
        "endChar": 27
      },
      "revId": "a84d0899449aff1a269c05d9d058b7fe016d6d4f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e198707c_fc2f1200",
        "filename": "src/os/env_windows.go",
        "patchSetId": 8
      },
      "lineNbr": 25,
      "author": {
        "id": 20556
      },
      "writtenOn": "2019-05-16T10:32:46Z",
      "side": 1,
      "message": "zx2c4@thinkpad /tmp/alexbrainman $ cat hum.go\npackage main\nimport \"fmt\"\nfunc main() {\n        var a [(1\u003c\u003c30)-1]uint16\n        fmt.Println(len(a))\n}\nzx2c4@thinkpad /tmp/alexbrainman $ GOARCH\u003d386 go run hum.go\n1073741823\nzx2c4@thinkpad /tmp/alexbrainman $ vim hum.go\nzx2c4@thinkpad /tmp/alexbrainman $ cat hum.go\npackage main\nimport \"fmt\"\nfunc main() {\n        var a [1\u003c\u003c30]uint16\n        fmt.Println(len(a))\n}\nzx2c4@thinkpad /tmp/alexbrainman $ GOARCH\u003d386 go run hum.go\n# command-line-arguments\n./hum.go:4:8: type [1073741824]uint16 too large",
      "parentUuid": "a45b893f_d4591264",
      "range": {
        "startLine": 25,
        "startChar": 14,
        "endLine": 25,
        "endChar": 27
      },
      "revId": "a84d0899449aff1a269c05d9d058b7fe016d6d4f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "14e44f90_f2b98937",
        "filename": "src/os/env_windows.go",
        "patchSetId": 8
      },
      "lineNbr": 25,
      "author": {
        "id": 5070
      },
      "writtenOn": "2019-05-16T10:59:33Z",
      "side": 1,
      "message": "You are correct. My code will not compile on windows-386. That is how go compiler works.",
      "parentUuid": "e198707c_fc2f1200",
      "range": {
        "startLine": 25,
        "startChar": 14,
        "endLine": 25,
        "endChar": 27
      },
      "revId": "a84d0899449aff1a269c05d9d058b7fe016d6d4f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9cb7efa3_7a10029d",
        "filename": "src/os/env_windows.go",
        "patchSetId": 8
      },
      "lineNbr": 38,
      "author": {
        "id": 5070
      },
      "writtenOn": "2019-05-15T09:24:33Z",
      "side": 1,
      "message": "I would have called DestroyEnvironmentBlock from defer after line 22. Like\n\ndefer DestroyEnvironmentBlock()\n\n. Why did not you?",
      "revId": "a84d0899449aff1a269c05d9d058b7fe016d6d4f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d62532d8_aed4b252",
        "filename": "src/os/env_windows.go",
        "patchSetId": 8
      },
      "lineNbr": 38,
      "author": {
        "id": 20556
      },
      "writtenOn": "2019-05-15T10:49:17Z",
      "side": 1,
      "message": "The function has no other avenues of return. What\u0027s the point in adding the overhead of a defer?",
      "parentUuid": "9cb7efa3_7a10029d",
      "revId": "a84d0899449aff1a269c05d9d058b7fe016d6d4f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3bf6c0c0_17667fc6",
        "filename": "src/os/env_windows.go",
        "patchSetId": 8
      },
      "lineNbr": 38,
      "author": {
        "id": 5070
      },
      "writtenOn": "2019-05-15T11:05:57Z",
      "side": 1,
      "message": "I can see other people adjusting this function later. It is easy enough to add return statement somewhere between lines 23 and 37. If they forget to move call to DestroyEnvironmentBlock then, we will be leaking memory.\n\nI would rather have defer in my code, then leaking memory.",
      "parentUuid": "d62532d8_aed4b252",
      "revId": "a84d0899449aff1a269c05d9d058b7fe016d6d4f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d9a64ba6_e407e214",
        "filename": "src/os/env_windows.go",
        "patchSetId": 8
      },
      "lineNbr": 38,
      "author": {
        "id": 20556
      },
      "writtenOn": "2019-05-15T11:15:06Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "3bf6c0c0_17667fc6",
      "revId": "a84d0899449aff1a269c05d9d058b7fe016d6d4f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}