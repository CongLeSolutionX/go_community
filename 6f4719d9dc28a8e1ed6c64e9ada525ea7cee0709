{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "57548890_01c36256",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-05-02T18:00:03Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003d6f4719d9",
      "tag": "autogenerated:trybots~beginning",
      "revId": "6f4719d9dc28a8e1ed6c64e9ada525ea7cee0709",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "69d21fbc_da47fbe1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-05-02T18:12:30Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "57548890_01c36256",
      "tag": "autogenerated:trybots~happy",
      "revId": "6f4719d9dc28a8e1ed6c64e9ada525ea7cee0709",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c6d2d4e8_67690d7d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5206
      },
      "writtenOn": "2022-06-24T20:35:00Z",
      "side": 1,
      "message": "Baokun, there are some comments here that are awaiting an updated patch.  Thanks.",
      "revId": "6f4719d9dc28a8e1ed6c64e9ada525ea7cee0709",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b33c1a0f_55722357",
        "filename": "src/cmd/go/internal/modfetch/proxy.go",
        "patchSetId": 2
      },
      "lineNbr": 192,
      "author": {
        "id": 6365
      },
      "writtenOn": "2022-05-04T20:35:31Z",
      "side": 1,
      "message": "I don\u0027t think this needs to be a pointer — two fields in the `proxyRepo` ought to suffice:\n\n```\n\tlistLatestOnce sync.Once\n\tlistLatest *RevInfo\n\tlistLatestErr error\n```",
      "revId": "6f4719d9dc28a8e1ed6c64e9ada525ea7cee0709",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "952fb8ae_7c2fbb87",
        "filename": "src/cmd/go/internal/modfetch/proxy.go",
        "patchSetId": 2
      },
      "lineNbr": 282,
      "author": {
        "id": 6365
      },
      "writtenOn": "2022-05-04T20:35:31Z",
      "side": 1,
      "message": "The store to `p.latestRevInfo` needs to be under the `sync.Once` — the `Versions` method is conceptually read-only, and nothing in the documented API prohibits the caller from invoking it concurrently.\n\nProbably something like:\n\n```\nfunc (p *proxyRepo) Versions(prefix string) ([]string, error) {\n\tdata, err :\u003d p.getBytes(\"@v/list\")\n\n\tvar list []string\n\tfor _, line :\u003d range strings.Split(string(data), \"\\n\") {\n\t\tf :\u003d strings.Fields(line)\n\t\tif len(f) \u003e\u003d 1 \u0026\u0026 semver.IsValid(f[0]) \u0026\u0026 strings.HasPrefix(f[0], prefix) \u0026\u0026 !module.IsPseudoVersion(f[0]) {\n\t\t\tlist \u003d append(list, f[0])\n\t\t}\n\t}\n\tsemver.Sort(list)\n\n\tp.listLatestOnce.Do(func() {\n\t\tif err !\u003d nil {\n\t\t\tp.listLatestErr \u003d err\n\t\t\treturn\n\t\t}\n\t\tp.listLatest, p.listLatestErr \u003d latestFromList(list)\n\t})\n\treturn list, nil\n}\n```\n\nAnd then:\n```\nfunc (p *proxyRepo) latest() (*RevInfo, error) {\n\tp.listLatestOnce.Do(func() {\n\t\tdata, err :\u003d p.getBytes(\"@v/list\")\n\t\tif err !\u003d nil {\n\t\t\tp.listLatestErr \u003d err\n\t\t\treturn\n\t\t}\n\t\tlist :\u003d strings.Split(string(data), \"\\n\")\n\t\tp.listLatest, p.listLatestErr \u003d latestFromList(list)\n\t})\n\treturn p.listLatest, p.listLatestErr\n}\n```",
      "revId": "6f4719d9dc28a8e1ed6c64e9ada525ea7cee0709",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}