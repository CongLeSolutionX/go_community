{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "106412e2_720ac24a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 68008
      },
      "writtenOn": "2024-05-23T18:56:11Z",
      "side": 1,
      "message": "Hello,\nI\u0027ve run several bent testcases locally with the patch to evaluate how it affects performance. Please find the results below:\n```\nshortname: ajstarks_deck_generatetoolchain: Orig\ngoos: linux\ngoarch: amd64\npkg: github.com/ajstarks/deck/generate\ncpu: AMD Ryzen 9 7945HX with Radeon Graphics\n\n\n          │ 20240523T075224.Orig.stdout │    20240523T075224.Tail.stdout     │\n          │           sec/op            │   sec/op     vs base               │\nArc-4                       2.383µ ± 0%   2.382µ ± 0%       ~ (p\u003d0.707 n\u003d50)\nPolygon-4                   3.798µ ± 0%   3.803µ ± 0%       ~ (p\u003d0.728 n\u003d50)\ngeomean                     3.008µ        3.010µ       +0.05%\n\nshortname: aws_jsonutil\npkg: github.com/aws/aws-sdk-go/private/protocol/json/jsonutil\n             │ 20240523T075224.Orig.stdout │    20240523T075224.Tail.stdout     │\n             │           sec/op            │   sec/op     vs base               │\nBuildJSON-4                    2.254µ ± 1%   2.247µ ± 0%       ~ (p\u003d0.140 n\u003d50)\nStdlibJSON-4                   1.439µ ± 1%   1.427µ ± 0%  -0.80% (p\u003d0.004 n\u003d50)\ngeomean                        1.801µ        1.790µ       -0.57%\n\nshortname: benhoyt_goawk_1_18\npkg: github.com/benhoyt/goawk/interp\n                      │ 20240523T075224.Orig.stdout │    20240523T075224.Tail.stdout     │\n                      │           sec/op            │   sec/op     vs base               │\nRecursiveFunc-4                         7.439µ ± 1%   7.471µ ± 2%       ~ (p\u003d0.313 n\u003d50)\nRegexMatch-4                            490.2n ± 1%   465.7n ± 1%  -5.00% (p\u003d0.000 n\u003d50)\nRepeatExecProgram-4                     8.587µ ± 0%   8.593µ ± 0%       ~ (p\u003d0.918 n\u003d50)\nRepeatNew-4                             38.00n ± 2%   38.22n ± 2%  +0.61% (p\u003d0.009 n\u003d50)\nRepeatIOExecProgram-4                   17.63µ ± 1%   17.66µ ± 1%       ~ (p\u003d0.615 n\u003d50)\nRepeatIONew-4                           452.2n ± 0%   450.9n ± 0%       ~ (p\u003d0.199 n\u003d50)\ngeomean                                 1.455µ        1.445µ       -0.68%\n\nshortname: cespare_mph\npkg: github.com/cespare/mph\n        │ 20240523T075224.Orig.stdout │    20240523T075224.Tail.stdout     │\n        │           sec/op            │   sec/op     vs base               │\nBuild-4                   14.61m ± 0%   14.51m ± 0%  -0.71% (p\u003d0.011 n\u003d50)\n\nshortname: ethereum_bitutil\npkg: github.com/ethereum/go-ethereum/common/bitutil\n                        │ 20240523T075224.Orig.stdout │    20240523T075224.Tail.stdout     │\n                        │           sec/op            │   sec/op     vs base               │\nFastTest2KB-4                             85.72n ± 1%   79.02n ± 2%  -7.82% (n\u003d50)\nBaseTest2KB-4                             388.3n ± 3%   386.0n ± 3%       ~ (p\u003d0.651 n\u003d50)\nEncoding4KBVerySparse-4                   7.843µ ± 0%   7.773µ ± 0%  -0.89% (p\u003d0.000 n\u003d50)\ngeomean                                   639.1n        619.0n       -3.15%\n\nshortname: ethereum_core\npkg: github.com/ethereum/go-ethereum/core\n                            │ 20240523T075224.Orig.stdout │    20240523T075224.Tail.stdout     │\n                            │           sec/op            │   sec/op     vs base               │\nPendingDemotion10000-4                        62.31n ± 1%   62.48n ± 2%       ~ (p\u003d0.068 n\u003d50)\nFuturePromotion10000-4                        1.480n ± 2%   1.413n ± 1%  -4.46% (n\u003d50)\nPoolBatchInsert10000-4                        542.5m ± 0%   540.0m ± 1%  -0.46% (p\u003d0.042 n\u003d50)\nPoolBatchLocalInsert10000-4                   653.0m ± 0%   653.0m ± 0%       ~ (p\u003d0.464 n\u003d50)\ngeomean                                       75.60µ        74.70µ       -1.18%\n\nshortname: ethereum_corevm\npkg: github.com/ethereum/go-ethereum/core/vm\n           │ 20240523T075224.Orig.stdout │  20240523T075224.Tail.stdout  │\n           │           sec/op            │   sec/op     vs base          │\nOpDiv128-4                   56.95n ± 1%   56.59n ± 1%  ~ (p\u003d0.118 n\u003d50)\n\nshortname: ethereum_ecies\npkg: github.com/ethereum/go-ethereum/crypto/ecies\n                   │ 20240523T075224.Orig.stdout │    20240523T075224.Tail.stdout     │\n                   │           sec/op            │   sec/op     vs base               │\nGenerateKeyP256-4                    9.583µ ± 0%   9.586µ ± 0%       ~ (p\u003d0.844 n\u003d50)\nGenSharedKeyP256-4                   36.25µ ± 1%   36.49µ ± 0%       ~ (p\u003d0.117 n\u003d50)\nGenSharedKeyS256-4                   41.65µ ± 0%   41.61µ ± 1%       ~ (p\u003d0.334 n\u003d50)\ngeomean                              24.37µ        24.42µ       +0.20%\n\nshortname: ethereum_ethash\npkg: github.com/ethereum/go-ethereum/consensus/ethash\n                 │ 20240523T075224.Orig.stdout │  20240523T075224.Tail.stdout  │\n                 │           sec/op            │   sec/op     vs base          │\nHashimotoLight-4                   666.8µ ± 2%   669.6µ ± 2%  ~ (p\u003d0.604 n\u003d50)\n\nshortname: ethereum_trie\npkg: github.com/ethereum/go-ethereum/trie\n                               │ 20240523T075224.Orig.stdout │    20240523T075224.Tail.stdout     │\n                               │           sec/op            │   sec/op     vs base               │\nHashFixedSize/10K-4                              7.640m ± 0%   7.553m ± 0%  -1.15% (p\u003d0.000 n\u003d50)\nCommitAfterHashFixedSize/10K-4                   10.33m ± 0%   10.26m ± 0%  -0.68% (p\u003d0.000 n\u003d50)\ngeomean                                          8.882m        8.801m       -0.92%\n\nshortname: gonum_blas_native\npkg: gonum.org/v1/gonum/blas/gonum\n                        │ 20240523T075224.Orig.stdout │    20240523T075224.Tail.stdout     │\n                        │           sec/op            │   sec/op     vs base               │\nDnrm2MediumPosInc-4                       1.221µ ± 2%   1.204µ ± 2%  -1.43% (p\u003d0.003 n\u003d50)\nDasumMediumUnitaryInc-4                   572.2n ± 3%   570.8n ± 3%  -0.24% (p\u003d0.039 n\u003d50)\ngeomean                                   835.9n        828.8n       -0.84%\n\nshortname: gonum_lapack_native\npkg: gonum.org/v1/gonum/lapack/gonum\n                     │ 20240523T075224.Orig.stdout │    20240523T075224.Tail.stdout     │\n                     │           sec/op            │   sec/op     vs base               │\nDgeev/Circulant10-4                    20.51µ ± 2%   19.92µ ± 2%  -2.88% (p\u003d0.003 n\u003d50)\nDgeev/Circulant100-4                   6.020m ± 1%   5.714m ± 1%  -5.08% (p\u003d0.000 n\u003d50)\ngeomean                                351.3µ        337.4µ       -3.98%\n\nshortname: gonum_mat\npkg: gonum.org/v1/gonum/mat\n                                 │ 20240523T075224.Orig.stdout │    20240523T075224.Tail.stdout     │\n                                 │           sec/op            │   sec/op     vs base               │\nMulWorkspaceDense1000Hundredth-4                   217.3m ± 0%   217.8m ± 0%       ~ (p\u003d0.638 n\u003d50)\nScaleVec10000Inc20-4                               5.974µ ± 1%   5.935µ ± 1%       ~ (p\u003d0.102 n\u003d50)\ngeomean                                            1.139m        1.137m       -0.21%\n\nshortname: gonum_topo\npkg: gonum.org/v1/gonum/graph/topo\n                         │ 20240523T075224.Orig.stdout │    20240523T075224.Tail.stdout     │\n                         │           sec/op            │   sec/op     vs base               │\nTarjanSCCGnp_10_tenth-4                    3.956µ ± 1%   3.977µ ± 0%  +0.53% (p\u003d0.025 n\u003d50)\nTarjanSCCGnp_1000_half-4                   45.95m ± 0%   46.41m ± 0%  +1.00% (p\u003d0.000 n\u003d50)\ngeomean                                    426.3µ        429.6µ       +0.76%\n\nshortname: gonum_traverse\npkg: gonum.org/v1/gonum/graph/traverse\n                                    │ 20240523T075224.Orig.stdout │    20240523T075224.Tail.stdout     │\n                                    │           sec/op            │   sec/op     vs base               │\nWalkAllBreadthFirstGnp_10_tenth-4                     1.946µ ± 1%   1.986µ ± 1%  +2.06% (p\u003d0.000 n\u003d50)\nWalkAllBreadthFirstGnp_1000_tenth-4                   6.671m ± 0%   6.735m ± 0%  +0.96% (p\u003d0.000 n\u003d50)\ngeomean                                               113.9µ        115.6µ       +1.51%\n\nshortname: gtank_blake2s\npkg: github.com/gtank/blake2s\n         │ 20240523T075224.Orig.stdout │    20240523T075224.Tail.stdout     │\n         │           sec/op            │   sec/op     vs base               │\nHash8K-4                   12.81µ ± 0%   12.90µ ± 0%  +0.75% (p\u003d0.000 n\u003d50)\n\n         │ 20240523T075224.Orig.stdout │     20240523T075224.Tail.stdout     │\n         │             B/s             │     B/s       vs base               │\nHash8K-4                  610.0Mi ± 1%   605.4Mi ± 0%  -0.74% (p\u003d0.000 n\u003d50)\n\nshortname: hugo_hugolib\npkg: github.com/gohugoio/hugo/hugolib\n                           │ 20240523T075224.Orig.stdout │    20240523T075224.Tail.stdout     │\n                           │           sec/op            │   sec/op     vs base               │\nMergeByLanguage-4                            289.0n ± 0%   289.5n ± 1%       ~ (p\u003d0.610 n\u003d50)\nResourceChainPostProcess-4                   53.53m ± 0%   54.23m ± 1%  +1.30% (p\u003d0.000 n\u003d50)\nReplaceShortcodeTokens-4                     1.747µ ± 2%   1.733µ ± 3%       ~ (p\u003d0.216 n\u003d50)\ngeomean                                      30.01µ        30.07µ       +0.21%\n\nshortname: k8s_cache\npkg: k8s.io/client-go/tools/cache\n                          │ 20240523T075224.Orig.stdout │    20240523T075224.Tail.stdout     │\n                          │           sec/op            │   sec/op     vs base               │\nListener-4                                  1.281µ ± 3%   1.286µ ± 3%       ~ (p\u003d0.901 n\u003d50)\nReflectorResyncChanMany-4                   1.369µ ± 0%   1.359µ ± 1%  -0.73% (p\u003d0.003 n\u003d50)\ngeomean                                     1.324µ        1.322µ       -0.19%\n\nshortname: k8s_workqueue\npkg: k8s.io/client-go/util/workqueue\n                                                        │ 20240523T075224.Orig.stdout │    20240523T075224.Tail.stdout     │\n                                                        │           sec/op            │   sec/op     vs base               │\nParallelizeUntil/pieces:1000,workers:10,chunkSize:1-4                     86.81µ ± 1%   84.74µ ± 1%  -2.39% (p\u003d0.000 n\u003d50)\nParallelizeUntil/pieces:1000,workers:10,chunkSize:10-4                    23.28µ ± 1%   23.29µ ± 1%       ~ (p\u003d0.379 n\u003d50)\nParallelizeUntil/pieces:1000,workers:10,chunkSize:100-4                   16.46µ ± 1%   16.48µ ± 0%       ~ (p\u003d0.839 n\u003d50)\nParallelizeUntil/pieces:999,workers:10,chunkSize:13-4                     22.27µ ± 1%   22.07µ ± 1%  -0.91% (p\u003d0.002 n\u003d50)\ngeomean                                                                   29.34µ        29.10µ       -0.80%\n\nshortname: kanzi\npkg: github.com/flanglet/kanzi-go/benchmark\n        │ 20240523T075224.Orig.stdout │     20240523T075224.Tail.stdout     │\n        │           sec/op            │    sec/op     vs base               │\nBWTS-4                   0.2392n ± 1%   0.2367n ± 1%  -1.05% (p\u003d0.003 n\u003d50)\nFPAQ-4                    9.073m ± 0%    9.170m ± 0%  +1.07% (p\u003d0.000 n\u003d50)\nLZ-4                      479.2µ ± 0%    488.6µ ± 1%  +1.96% (p\u003d0.000 n\u003d50)\nMTFT-4                    484.6µ ± 2%    498.4µ ± 2%  +2.85% (p\u003d0.000 n\u003d50)\ngeomean                   26.64µ         26.96µ       +1.20%\n\nshortname: minio\npkg: github.com/minio/minio/cmd\n                               │ 20240523T075224.Orig.stdout │     20240523T075224.Tail.stdout     │\n                               │           sec/op            │    sec/op     vs base               │\nDecodehealingTracker-4                           546.5n ± 1%    540.7n ± 1%       ~ (p\u003d0.190 n\u003d50)\nAppendMsgReplicateDecision-4                    0.1937n ± 3%   0.1940n ± 3%       ~ (p\u003d0.241 n\u003d50)\nAppendMsgResyncTargetsInfo-4                     2.970n ± 2%    2.949n ± 1%       ~ (p\u003d0.940 n\u003d50)\nDataUpdateTracker-4                              1.915µ ± 2%    1.918µ ± 3%       ~ (p\u003d0.228 n\u003d50)\nMarshalMsgdataUsageCacheInfo-4                   71.50n ± 1%    71.53n ± 1%       ~ (p\u003d0.866 n\u003d50)\ngeomean                                          33.63n         33.54n       -0.28%\n\n                             │ 20240523T075224.Orig.stdout │     20240523T075224.Tail.stdout     │\n                             │             B/s             │     B/s       vs base               │\nDecodehealingTracker-4                        542.7Mi ± 1%   548.5Mi ± 1%       ~ (p\u003d0.195 n\u003d50)\nAppendMsgReplicateDecision-4                  4.807Gi ± 3%   4.800Gi ± 3%       ~ (p\u003d0.232 n\u003d50)\nAppendMsgResyncTargetsInfo-4                  3.135Gi ± 2%   3.158Gi ± 1%       ~ (p\u003d0.951 n\u003d50)\nDataUpdateTracker-4                           507.8Ki ± 2%   507.8Ki ± 2%       ~ (p\u003d0.300 n\u003d50)\ngeomean                                       255.4Mi        256.4Mi       +0.41%\n\nshortname: semver\npkg: github.com/Masterminds/semver\n                           │ 20240523T075224.Orig.stdout │    20240523T075224.Tail.stdout     │\n                           │           sec/op            │   sec/op     vs base               │\nValidateVersionTildeFail-4                   381.9n ± 1%   389.7n ± 1%  +2.02% (p\u003d0.000 n\u003d50)\n\nshortname: shopify_sarama\npkg: github.com/Shopify/sarama\n                         │ 20240523T075224.Orig.stdout │    20240523T075224.Tail.stdout     │\n                         │           sec/op            │   sec/op     vs base               │\nBroker_Open-4                              120.3µ ± 0%   120.3µ ± 0%       ~ (p\u003d0.099 n\u003d50)\nBroker_No_Metrics_Open-4                   78.83µ ± 0%   78.48µ ± 0%  -0.44% (p\u003d0.000 n\u003d50)\ngeomean                                    97.39µ        97.16µ       -0.23%\n\nshortname: spexs2\npkg: github.com/egonelbre/spexs2/_benchmark\n             │ 20240523T075224.Orig.stdout │    20240523T075224.Tail.stdout    │\n             │           sec/op            │   sec/op    vs base               │\nRun/10k/1-4                     12.95 ± 0%   12.89 ± 0%  -0.51% (p\u003d0.000 n\u003d50)\nRun/10k/16-4                    6.793 ± 0%   6.800 ± 0%       ~ (p\u003d0.385 n\u003d50)\ngeomean                         9.380        9.361       -0.21%\n\nshortname: uber_zap\npkg: go.uber.org/zap/zapcore\n                                             │ 20240523T075224.Orig.stdout │    20240523T075224.Tail.stdout     │\n                                             │           sec/op            │   sec/op     vs base               │\nBufferedWriteSyncer/write_file_with_buffer-4                   68.08n ± 1%   67.57n ± 1%       ~ (p\u003d0.225 n\u003d50)\nMultiWriteSyncer/2_discarder-4                                 12.96n ± 0%   13.06n ± 0%  +0.73% (p\u003d0.000 n\u003d50)\nMultiWriteSyncer/4_discarder-4                                 16.19n ± 0%   16.36n ± 0%  +1.05% (p\u003d0.000 n\u003d50)\nMultiWriteSyncer/4_discarder_with_buffer-4                     53.51n ± 1%   53.44n ± 1%       ~ (p\u003d0.728 n\u003d50)\nWriteSyncer/write_file_with_no_buffer-4                        2.292µ ± 0%   2.286µ ± 1%       ~ (p\u003d0.222 n\u003d50)\nZapConsole-4                                                   757.0n ± 0%   760.0n ± 0%  +0.40% (p\u003d0.013 n\u003d50)\nJSONLogMarshalerFunc-4                                         430.3n ± 0%   430.4n ± 0%       ~ (p\u003d0.986 n\u003d50)\nZapJSON-4                                                      493.0n ± 0%   494.0n ± 0%       ~ (p\u003d0.265 n\u003d50)\nStandardJSON-4                                                 838.1n ± 0%   834.2n ± 0%  -0.46% (p\u003d0.000 n\u003d50)\nSampler_Check/7_keys-4                                         38.12n ± 0%   38.30n ± 0%  +0.49% (p\u003d0.002 n\u003d50)\nSampler_Check/50_keys-4                                        43.92n ± 0%   43.75n ± 0%  -0.38% (p\u003d0.012 n\u003d50)\nSampler_Check/100_keys-4                                       44.42n ± 0%   44.22n ± 0%  -0.46% (p\u003d0.002 n\u003d50)\nSampler_CheckWithHook/7_keys-4                                 62.54n ± 1%   62.55n ± 1%       ~ (p\u003d0.812 n\u003d50)\nSampler_CheckWithHook/50_keys-4                                69.06n ± 0%   69.14n ± 0%       ~ (p\u003d0.232 n\u003d50)\nSampler_CheckWithHook/100_keys-4                               70.91n ± 0%   70.82n ± 0%       ~ (p\u003d0.257 n\u003d50)\nTeeCheck-4                                                     210.6n ± 2%   211.8n ± 2%       ~ (p\u003d0.237 n\u003d50)\ngeomean                                                        116.4n        116.4n       +0.06%\n```",
      "revId": "8a372f4523f66648b46988f7a49913482ba3461b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "128eb141_c2a25caa",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 68008
      },
      "writtenOn": "2024-06-04T15:48:30Z",
      "side": 1,
      "message": "Gentle ping! Please have a look when you have time.",
      "revId": "8a372f4523f66648b46988f7a49913482ba3461b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "76420599_65c6d5a5",
        "filename": "src/cmd/compile/internal/noder/reader.go",
        "patchSetId": 2
      },
      "lineNbr": 3930,
      "author": {
        "id": 5200
      },
      "writtenOn": "2024-06-05T17:44:50Z",
      "side": 1,
      "message": "This comment needs updating, as we now *do* leave the wrapper bit unset for tail calls.\n\nBut stepping back, why would we not mark this as a wrapper? AFAIU a wrapper mark just elides something in tracebacks unless it is the final frame (is it used for anything else? I\u0027m not sure). This is never going to be a non-final frame, so maybe it doesn\u0027t matter, but I would still consider it a wrapper.",
      "revId": "8a372f4523f66648b46988f7a49913482ba3461b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "690fa430_3179efbf",
        "filename": "src/cmd/compile/internal/noder/reader.go",
        "patchSetId": 2
      },
      "lineNbr": 3930,
      "author": {
        "id": 68008
      },
      "writtenOn": "2024-06-06T19:48:43Z",
      "side": 1,
      "message": "In addition to eliding in tracebacks the wrapper mark on a function enables generation of target-specific assembly code to update the `argp` field in `g._panic` structure. It is used by the gorecover function and I expect it should be never needed in our case with immediate tail call. I\u0027m not sure if such update might be still be sometimes avoided in general case, e.g. do we need the `g._panic` update when the wrapper has its own frame and it\u0027s a method wrapper... But we still want to elide it in traceback so it seems the TODO may be removed here.",
      "parentUuid": "76420599_65c6d5a5",
      "revId": "8a372f4523f66648b46988f7a49913482ba3461b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bd7d27f3_7cd696e2",
        "filename": "test/codegen/tailcall.go",
        "patchSetId": 2
      },
      "lineNbr": 25,
      "author": {
        "id": 5200
      },
      "writtenOn": "2024-06-05T17:44:50Z",
      "side": 1,
      "message": "So is it this anonymous type that is getting a wrapper generated for it?\n\nI think I\u0027d rather have this type explicitly defined, if that\u0027s possible. Then we can put a reasonable comment on it.",
      "range": {
        "startLine": 21,
        "startChar": 9,
        "endLine": 25,
        "endChar": 3
      },
      "revId": "8a372f4523f66648b46988f7a49913482ba3461b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3b5037d8_419a5281",
        "filename": "test/codegen/tailcall.go",
        "patchSetId": 2
      },
      "lineNbr": 25,
      "author": {
        "id": 68008
      },
      "writtenOn": "2024-06-06T19:48:43Z",
      "side": 1,
      "message": "Yes, it works fine. The new version looks more readable, thank you for suggestion.",
      "parentUuid": "bd7d27f3_7cd696e2",
      "range": {
        "startLine": 21,
        "startChar": 9,
        "endLine": 25,
        "endChar": 3
      },
      "revId": "8a372f4523f66648b46988f7a49913482ba3461b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "72151c50_27695810",
        "filename": "test/codegen/tailcall.go",
        "patchSetId": 2
      },
      "lineNbr": 26,
      "author": {
        "id": 5200
      },
      "writtenOn": "2024-06-05T17:44:50Z",
      "side": 1,
      "message": "Can\u0027t we just do this for the test?\n\nvar i any\nfunc init() {\n    i \u003d struct{int64, *Foo, string}{1, f, \"first\"}\n}\n\nWhy do we need to wrap things in closures?",
      "revId": "8a372f4523f66648b46988f7a49913482ba3461b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "074b8f41_1e4fb5df",
        "filename": "test/codegen/tailcall.go",
        "patchSetId": 2
      },
      "lineNbr": 26,
      "author": {
        "id": 68008
      },
      "writtenOn": "2024-06-06T19:48:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "72151c50_27695810",
      "revId": "8a372f4523f66648b46988f7a49913482ba3461b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}