{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "e5213bd4_892e86c8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-10-19T10:07:26Z",
      "side": 1,
      "message": "SlowBots beginning. Status page: https://farmer.golang.org/try?commit\u003dcdc8fbb0",
      "tag": "autogenerated:trybots~beginning",
      "revId": "cdc8fbb07df719babf50f5c8616cc5442f3d0fbe",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9034db46_a43822ad",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-10-19T10:07:26Z",
      "side": 1,
      "message": "Superseded.",
      "parentUuid": "9261bb29_d119e34e",
      "tag": "autogenerated:trybots~beginning",
      "revId": "cdc8fbb07df719babf50f5c8616cc5442f3d0fbe",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3dd8d43c_d04acc83",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-10-19T10:52:16Z",
      "side": 1,
      "message": "SlowBots are happy.\n\nSlowBot builds that ran:\n* darwin-amd64-race\n* freebsd-amd64-race\n* linux-386-longtest\n* linux-amd64-longtest\n* linux-amd64-race\n* windows-amd64-longtest\n* windows-amd64-race\n",
      "parentUuid": "e5213bd4_892e86c8",
      "tag": "autogenerated:trybots~happy",
      "revId": "cdc8fbb07df719babf50f5c8616cc5442f3d0fbe",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9cfffc54_6cf7b39e",
        "filename": "src/reflect/value.go",
        "patchSetId": 2
      },
      "lineNbr": 2492,
      "author": {
        "id": 13315
      },
      "writtenOn": "2021-10-19T14:20:50Z",
      "side": 1,
      "message": "You can just cast code (an uintptr) to unsafe.Pointer without taking address and indirection.",
      "range": {
        "startLine": 2492,
        "startChar": 10,
        "endLine": 2492,
        "endChar": 51
      },
      "revId": "cdc8fbb07df719babf50f5c8616cc5442f3d0fbe",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b4e31ac3_cc8311ec",
        "filename": "src/reflect/value.go",
        "patchSetId": 2
      },
      "lineNbr": 2492,
      "author": {
        "id": 14665
      },
      "writtenOn": "2021-10-19T14:35:35Z",
      "side": 1,
      "message": "I wonder is it safe? Since when \"go vet\" will complain if I do that.",
      "parentUuid": "9cfffc54_6cf7b39e",
      "range": {
        "startLine": 2492,
        "startChar": 10,
        "endLine": 2492,
        "endChar": 51
      },
      "revId": "cdc8fbb07df719babf50f5c8616cc5442f3d0fbe",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "65a02c07_385ac51a",
        "filename": "src/reflect/value.go",
        "patchSetId": 2
      },
      "lineNbr": 2492,
      "author": {
        "id": 13315
      },
      "writtenOn": "2021-10-19T14:40:06Z",
      "side": 1,
      "message": "Okay, it is fine if this is to appease vet.\n\nBut I don\u0027t understand why we cannot cast a uintptr to unsafe.Pointer.",
      "parentUuid": "b4e31ac3_cc8311ec",
      "range": {
        "startLine": 2492,
        "startChar": 10,
        "endLine": 2492,
        "endChar": 51
      },
      "revId": "cdc8fbb07df719babf50f5c8616cc5442f3d0fbe",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6404f2ed_14f736be",
        "filename": "src/reflect/value.go",
        "patchSetId": 2
      },
      "lineNbr": 2492,
      "author": {
        "id": 14665
      },
      "writtenOn": "2021-10-19T15:02:36Z",
      "side": 1,
      "message": "AFAICT, \"code\" holds a pointer value, but \"code\" is a uintptr, thus it\u0027s invisible to stack copying and garbage collector, so converting it to unsafe.Pointer is considered invalid.\n\nWith the indirection version, we\u0027re ok because \"\u0026code\" give us pointer semantic.",
      "parentUuid": "65a02c07_385ac51a",
      "range": {
        "startLine": 2492,
        "startChar": 10,
        "endLine": 2492,
        "endChar": 51
      },
      "revId": "cdc8fbb07df719babf50f5c8616cc5442f3d0fbe",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dd507036_b92e7cac",
        "filename": "src/reflect/value.go",
        "patchSetId": 2
      },
      "lineNbr": 2492,
      "author": {
        "id": 13315
      },
      "writtenOn": "2021-10-19T15:09:49Z",
      "side": 1,
      "message": "Stack copying and GC are irrelevant here as \"code\" points to a global address  (which is always alive and cannot be moved).  (Vet doesn\u0027t know it is a global. But I\u0027m still not sure it wants to simply reject uintptr to unsafe.Pointer casts.)\n\nMaybe we could make the intrinsics to return an unsafe.Pointer instead of uintptr (not necessarily in this CL).",
      "parentUuid": "6404f2ed_14f736be",
      "range": {
        "startLine": 2492,
        "startChar": 10,
        "endLine": 2492,
        "endChar": 51
      },
      "revId": "cdc8fbb07df719babf50f5c8616cc5442f3d0fbe",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "07449cb3_54551e68",
        "filename": "src/reflect/value.go",
        "patchSetId": 2
      },
      "lineNbr": 2492,
      "author": {
        "id": 14665
      },
      "writtenOn": "2021-10-19T15:18:40Z",
      "side": 1,
      "message": "\u003e Stack copying and GC are irrelevant here as \"code\" points to a global address  (which is always alive and cannot be moved).  (Vet doesn\u0027t know it is a global. But I\u0027m still not sure it wants to simply reject uintptr to unsafe.Pointer casts.)\n\nYeah, that\u0027s what vet is doing IIRC.\n\n\u003e Maybe we could make the intrinsics to return an unsafe.Pointer instead of uintptr (not necessarily in this CL).\n\nðŸ‘Œ",
      "parentUuid": "dd507036_b92e7cac",
      "range": {
        "startLine": 2492,
        "startChar": 10,
        "endLine": 2492,
        "endChar": 51
      },
      "revId": "cdc8fbb07df719babf50f5c8616cc5442f3d0fbe",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}