{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "08770466_490ea92d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2024-08-09T19:08:54Z",
      "side": 1,
      "message": "I spotted some possible problems.\n\nThese findings are based on simple heuristics. If a finding appears wrong, briefly reply here saying so. Otherwise, please address any problems and update the GitHub PR. When complete, mark this comment as \u0027Done\u0027 and click the [blue \u0027Reply\u0027 button](https://go.dev/wiki/GerritBot#i-left-a-reply-to-a-comment-in-gerrit-but-no-one-but-me-can-see-it) above.\n\nPossible problems detected:\n  1. The commit message body is very brief. That can be OK if the change is trivial like correcting spelling or fixing a broken link, but usually the description should provide context for the change and explain what it does in complete sentences.\n  2. Do you have the right bug reference format? For this repo, the format is usually \u0027Fixes #12345\u0027 or \u0027Updates #12345\u0027 at the end of the commit message.\n\nThe commit title and commit message body come from the GitHub PR title and description, and must be edited in the GitHub web interface (not via git). For instructions, see [here](https://go.dev/wiki/GerritBot/#how-does-gerritbot-determine-the-final-commit-message). For guidelines on commit messages for the Go project, see [here](https://go.dev/doc/contribute#commit_messages).\n\n\n(In general for Gerrit code reviews, the change author is expected to [log in to Gerrit](https://go-review.googlesource.com/login/) with a Gmail or other Google account and then close out each piece of feedback by marking it as \u0027Done\u0027 if implemented as suggested or otherwise reply to each review comment. See the [Review](https://go.dev/doc/contribute#review) section of the Contributing Guide for details.)",
      "revId": "fc63eb250d533df7113ed30e1e3fa7ec5c34193d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5ec70dff_40bc453f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 64694
      },
      "writtenOn": "2024-08-09T19:16:30Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "08770466_490ea92d",
      "revId": "fc63eb250d533df7113ed30e1e3fa7ec5c34193d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dffc4e07_f27b788d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 64694
      },
      "writtenOn": "2024-08-09T19:16:30Z",
      "side": 1,
      "message": "Let me add some additional notes here: this patch is a follow-up to https://golang.org/cl/61019, and I hope to expose string constants in DWARF as well, which will help debuggers and other analysis tools to understand the exact composition of the rodata segment.\nHowever, I had some difficulty writing the patch, and the current commit doesn\u0027t really work; specifically, I can\u0027t use gdb to check out string values in DWARF, which is likely a problem with my implementation. However, I am not familiar with the Go compiler\u0027s code repository, so I was hoping to get some help from the Go Team on this issue. Thanks!",
      "revId": "fc63eb250d533df7113ed30e1e3fa7ec5c34193d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}