{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "5d382681_2888f77c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-09-11T17:16:47Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003ddbf6da80\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "dbf6da80e9a8b62f21545142e593c1f15390026f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6836cda6_5b89fb01",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-09-11T17:37:07Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "5d382681_2888f77c",
      "tag": "autogenerated:trybots~happy",
      "revId": "dbf6da80e9a8b62f21545142e593c1f15390026f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2d065f00_bb10f4b8",
        "filename": "src/net/http/routing_tree.go",
        "patchSetId": 2
      },
      "lineNbr": 71,
      "author": {
        "id": 5305
      },
      "writtenOn": "2023-09-12T19:01:50Z",
      "side": 1,
      "message": "Minor: set panics if the node contains a pattern, so you can skip the check for an existing \"*\" node and avoid a redundant findChild with:\n\n```\nif seg.multi {\n  if len(segs) !\u003d 1 {\n    panic(\"multi wildcard not last\")\n  }\n  n.addChild(\"*\").set(p, h)\n}\n```",
      "revId": "dbf6da80e9a8b62f21545142e593c1f15390026f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "be5adc24_9604a87b",
        "filename": "src/net/http/routing_tree.go",
        "patchSetId": 2
      },
      "lineNbr": 71,
      "author": {
        "id": 14570
      },
      "writtenOn": "2023-09-12T19:12:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2d065f00_bb10f4b8",
      "revId": "dbf6da80e9a8b62f21545142e593c1f15390026f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d45808d8_8181f157",
        "filename": "src/net/http/routing_tree.go",
        "patchSetId": 2
      },
      "lineNbr": 108,
      "author": {
        "id": 5305
      },
      "writtenOn": "2023-09-12T19:01:50Z",
      "side": 1,
      "message": "This won\u0027t find the child \"\".\n\nIf it\u0027s worth optimizing the single-wildcard case by storing its node outside the map, then I think it\u0027ll be clearer to stop pretending it has a key: Drop the `key \u003d\u003d \"\"` special case in `addChild` and have `addSegments` set `n.emptyChild` directly:\n\n```\n} else if seg.wild {\n  if n.emptyChild \u003d\u003d nil {\n    n.emptyChild \u003d \u0026routingNode\n  }\n  n.emptyChild.addSegments(sets[1:], p, h)\n```\n\nMaybe also rename `emptyChild` to `singleWildcard`.",
      "revId": "dbf6da80e9a8b62f21545142e593c1f15390026f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "16ee8d7f_3e0d236b",
        "filename": "src/net/http/routing_tree.go",
        "patchSetId": 2
      },
      "lineNbr": 108,
      "author": {
        "id": 14570
      },
      "writtenOn": "2023-09-12T19:12:48Z",
      "side": 1,
      "message": "The emptiness check in addChild also matters in addPattern, for the host and method. It seems useful to keep it there.\nInstead I added a check to findChild.",
      "parentUuid": "d45808d8_8181f157",
      "revId": "dbf6da80e9a8b62f21545142e593c1f15390026f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}