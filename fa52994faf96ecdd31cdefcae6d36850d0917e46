{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "f5338ad2_ddd8d9da",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 14665
      },
      "writtenOn": "2021-01-07T17:24:05Z",
      "side": 1,
      "message": "TRY\u003dppc64",
      "revId": "fa52994faf96ecdd31cdefcae6d36850d0917e46",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ceca7921_25d62d90",
        "filename": "src/cmd/compile/internal/ssa/gen/PPC64.rules",
        "patchSetId": 1
      },
      "lineNbr": 582,
      "author": {
        "id": 6320
      },
      "writtenOn": "2021-01-07T18:43:45Z",
      "side": 1,
      "message": "If you are going to use a MOVDstore there needs to be alignment check as is done in other MOVD rules. If it is not aligned to 4 then it must be done with 2 MOVWstore instructions or the assembler will issue an error. When it was checking for 64 bit integers and pointers, then the alignment checks weren\u0027t needed.",
      "revId": "fa52994faf96ecdd31cdefcae6d36850d0917e46",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0ca6830f_a24bad60",
        "filename": "src/cmd/compile/internal/ssa/gen/PPC64.rules",
        "patchSetId": 1
      },
      "lineNbr": 582,
      "author": {
        "id": 14665
      },
      "writtenOn": "2021-01-07T21:25:37Z",
      "side": 1,
      "message": "Thanks. Is this specific to ppc64 only? I don\u0027t see other arch do alignment check.",
      "parentUuid": "ceca7921_25d62d90",
      "revId": "fa52994faf96ecdd31cdefcae6d36850d0917e46",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "41ad1fa3_9461714a",
        "filename": "src/cmd/compile/internal/ssa/gen/PPC64.rules",
        "patchSetId": 1
      },
      "lineNbr": 583,
      "author": {
        "id": 36863
      },
      "writtenOn": "2021-01-07T18:00:42Z",
      "side": 1,
      "message": "Should the removed conditions be changed to t.IsInteger() instead?",
      "revId": "fa52994faf96ecdd31cdefcae6d36850d0917e46",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d516a47d_50aa38cd",
        "filename": "src/cmd/compile/internal/ssa/gen/PPC64.rules",
        "patchSetId": 1
      },
      "lineNbr": 583,
      "author": {
        "id": 14665
      },
      "writtenOn": "2021-01-07T18:05:42Z",
      "side": 1,
      "message": "Any reason to restrict it to integer only? Other archs just make the different rules for \"float\" vs \"non-float\".\n\nAlso, do you mean val.Type.IsInteger()?",
      "parentUuid": "41ad1fa3_9461714a",
      "revId": "fa52994faf96ecdd31cdefcae6d36850d0917e46",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9ec40f0a_5797f6f8",
        "filename": "src/cmd/compile/internal/ssa/gen/PPC64.rules",
        "patchSetId": 1
      },
      "lineNbr": 583,
      "author": {
        "id": 36863
      },
      "writtenOn": "2021-01-07T21:35:05Z",
      "side": 1,
      "message": "My comment wasn\u0027t quite correct, that probably wouldn\u0027t cover the case you\u0027ve found. I think David\u0027s patch https://go-review.googlesource.com/c/go/+/282315 is the appropriate solution.",
      "parentUuid": "d516a47d_50aa38cd",
      "revId": "fa52994faf96ecdd31cdefcae6d36850d0917e46",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}