{
  "comments": [
    {
      "key": {
        "uuid": "5efe8764_30c09a60",
        "filename": "src/syscall/security_windows.go",
        "patchSetId": 1
      },
      "lineNbr": 168,
      "author": {
        "id": 5070
      },
      "writtenOn": "2019-10-30T05:46:26Z",
      "side": 1,
      "message": "You still did not explain what was wrong with original version of this code. Until you do, I insist we restore original version\n\ns/SecurityMaxSidSize/256/\n\nI think 256 is nice and round number, and it does not need introduction of const and a comment pointing to some Internet groups thread. I don\u0027t see why 184 is better than 256 here.",
      "revId": "c6efb80209f2f5055213a82797c04820946bc6e4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f17ff662_7c37e9e2",
        "filename": "src/syscall/security_windows.go",
        "patchSetId": 1
      },
      "lineNbr": 168,
      "author": {
        "id": 14665
      },
      "writtenOn": "2019-10-30T05:52:37Z",
      "side": 1,
      "message": "I don\u0027t have a Windows environment to test this, but the main motivation is that we should not violate the unsafe pointer rule. Can you help testing this function with all\u003d-d\u003dcheckptr? If 256 is ok for the compiler, I will restore it and leave it for other Windows experts to take a look.",
      "parentUuid": "5efe8764_30c09a60",
      "revId": "c6efb80209f2f5055213a82797c04820946bc6e4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "424a4837_6c99946d",
        "filename": "src/syscall/security_windows.go",
        "patchSetId": 1
      },
      "lineNbr": 168,
      "author": {
        "id": 5070
      },
      "writtenOn": "2019-10-30T06:12:54Z",
      "side": 1,
      "message": "\u003e I don\u0027t have a Windows environment to test this, but the main motivation is that we should not violate the unsafe pointer rule.\n\nYou changed 256 with 184. I don\u0027t know anything about new all\u003d-d\u003dcheckptr checker, but I don\u0027t see your how your change can make this code more correct.\n\nI just submitted CL 203442 which replaced [:x] slice operation with [:x:x]. Perhaps you want to do the same. But I don\u0027t really know.\n\nAnd unlike CL 203442, the memory you are referring lives outside of Go memory. ConvertSidToStringSid returns memory explicitly allocated by Windows. I am not sure, if it makes any difference here.\n\n\u003e Can you help testing this function with all\u003d-d\u003dcheckptr? \n\nSure. How do I test it?",
      "parentUuid": "f17ff662_7c37e9e2",
      "revId": "c6efb80209f2f5055213a82797c04820946bc6e4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6f11e40f_10985094",
        "filename": "src/syscall/security_windows.go",
        "patchSetId": 1
      },
      "lineNbr": 168,
      "author": {
        "id": 14665
      },
      "writtenOn": "2019-10-30T06:32:54Z",
      "side": 1,
      "message": "\u003e Sure. How do I test it?\n\nJust write some code which does use SID.String method, then build that call with -gcflags\u003dall\u003d-d\u003dcheckptr, then run the binary.",
      "parentUuid": "424a4837_6c99946d",
      "revId": "c6efb80209f2f5055213a82797c04820946bc6e4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9647ac7e_b87b0f11",
        "filename": "src/syscall/security_windows.go",
        "patchSetId": 1
      },
      "lineNbr": 168,
      "author": {
        "id": 5440
      },
      "writtenOn": "2019-10-30T06:40:27Z",
      "side": 1,
      "message": "\u003e Sure. How do I test it?\n\nJust specify -gcflags\u003dall\u003d-d\u003dcheckptr when building or testing. (Make sure to include \"all\u003d\".) For example:\n\n    $ go test -gcflags\u003dall\u003d-d\u003dcheckptr std cmd\n\nYou can also try running:\n\n    $ go test -gcflags\u003dall\u003d-d\u003dcheckptr\u003d2 std cmd\n\nWhen checkptr\u003d2 is specified, escape analysis is tweaked so some objects are heap allocated when normally we would stack allocate them. This allows better runtime checking of unsafe.Pointer code (because we generally have finer-grained information about heap objects than stack objects), but it does lead to false positives with performance tests that measure the number of heap allocations.",
      "parentUuid": "424a4837_6c99946d",
      "revId": "c6efb80209f2f5055213a82797c04820946bc6e4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    }
  ]
}