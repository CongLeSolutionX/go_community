{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "488dcfcc_4092d048",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-10-14T09:32:28Z",
      "side": 1,
      "message": "I spotted some possible problems.\n\nThese findings are based on simple heuristics. If a finding appears wrong, briefly reply here saying so. Otherwise, please address any problems and update the GitHub PR. When complete, mark this comment as \u0027Done\u0027 and click the [blue \u0027Reply\u0027 button](https://go.dev/wiki/GerritBot#i-left-a-reply-to-a-comment-in-gerrit-but-no-one-but-me-can-see-it) above.\n\nPossible problems detected:\n  1. You usually need to reference a bug number for all but trivial or cosmetic fixes. For this repo, the format is usually \u0027Fixes #12345\u0027 or \u0027Updates #12345\u0027 at the end of the commit message. Should you have a bug reference?\n\nThe commit title and commit message body come from the GitHub PR title and description, and must be edited in the GitHub web interface (not via git). For instructions, see [here](https://go.dev/wiki/GerritBot/#how-does-gerritbot-determine-the-final-commit-message). For guidelines on commit messages for the Go project, see [here](https://go.dev/doc/contribute#commit_messages).\n\n\n(In general for Gerrit code reviews, the change author is expected to [log in to Gerrit](https://go-review.googlesource.com/login/) with a Gmail or other Google account and then close out each piece of feedback by marking it as \u0027Done\u0027 if implemented as suggested or otherwise reply to each review comment. See the [Review](https://go.dev/doc/contribute#review) section of the Contributing Guide for details.)",
      "revId": "49ebb0eaaf516e8eb37bb9fed2f6f41bb2fd3438",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "23d7c52b_c5e9a135",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 8495
      },
      "writtenOn": "2023-10-14T17:45:37Z",
      "side": 1,
      "message": "It\u0027s not clear to me the benefit of this. Some of the reflect.Value methods have been carefully written to be inlineable, while reflect.Value.IsZero is too complex to inline. This means we\u0027re now going through an extra method call.\n\nHave we benchmarked the impact of this on a struct with `omitempty` applied on many fields of the type captured in the modified case statements?",
      "revId": "49ebb0eaaf516e8eb37bb9fed2f6f41bb2fd3438",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0f7cc556_188e09fb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 54466
      },
      "writtenOn": "2023-10-14T18:25:48Z",
      "side": 1,
      "message": "the exact same change has been done on encoding/xml hence I‘m a bit puzzled by the question. I can try a benchmark…",
      "parentUuid": "23d7c52b_c5e9a135",
      "revId": "49ebb0eaaf516e8eb37bb9fed2f6f41bb2fd3438",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "83e0b023_b4dec831",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 9735
      },
      "writtenOn": "2023-10-14T19:18:16Z",
      "side": 1,
      "message": "xml is not as performance sensitive, so we don’t think about these things as much.",
      "parentUuid": "0f7cc556_188e09fb",
      "revId": "49ebb0eaaf516e8eb37bb9fed2f6f41bb2fd3438",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "abf3663f_c0da20c3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 30738
      },
      "writtenOn": "2023-10-14T19:40:35Z",
      "side": 1,
      "message": "I ran \n\n\tfor i :\u003d 0; i \u003c b.N; i++ {\n\t\t_, _ \u003d Marshal(s)\n\t}\n\t\non s which has 1024 public fields of type string with omitempty on dc12cb179a3fb97bf9a12155c742f1737e858f7c. Results before:\n\n/Users/andig/htdocs/go/bin/go test -bench Omit -run ^# -count 5\ngoos: darwin\ngoarch: arm64\npkg: encoding/json\nBenchmarkOmitempty-8   \t  125240\t      9571 ns/op\nBenchmarkOmitempty-8   \t  124993\t      9596 ns/op\nBenchmarkOmitempty-8   \t  124968\t      9571 ns/op\nBenchmarkOmitempty-8   \t  124927\t      9588 ns/op\nBenchmarkOmitempty-8   \t  125980\t      9560 ns/op\nPASS\nok  \tencoding/json\t7.690s\n\nResults after:\n\n/Users/andig/htdocs/go/bin/go test -bench Omit -run ^# -count 5\ngoos: darwin\ngoarch: arm64\npkg: encoding/json\nBenchmarkOmitempty-8   \t  110044\t      9369 ns/op\nBenchmarkOmitempty-8   \t  128212\t      9363 ns/op\nBenchmarkOmitempty-8   \t  128359\t      9301 ns/op\nBenchmarkOmitempty-8   \t  128770\t      9309 ns/op\nBenchmarkOmitempty-8   \t  129285\t      9317 ns/op\nPASS\nok  \tencoding/json\t6.473s",
      "parentUuid": "83e0b023_b4dec831",
      "revId": "49ebb0eaaf516e8eb37bb9fed2f6f41bb2fd3438",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eb6eeb4a_a0f2738e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 30738
      },
      "writtenOn": "2023-10-14T19:40:35Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "488dcfcc_4092d048",
      "revId": "49ebb0eaaf516e8eb37bb9fed2f6f41bb2fd3438",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5d98eee2_1449fd69",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 8495
      },
      "writtenOn": "2023-10-15T03:38:56Z",
      "side": 1,
      "message": "Thank you for running the benchmarks. I\u0027m a little surprised it\u0027s faster. I suspect it\u0027s because the branching logic in `isEmptyValue` got simpler.",
      "parentUuid": "abf3663f_c0da20c3",
      "revId": "49ebb0eaaf516e8eb37bb9fed2f6f41bb2fd3438",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f316bba7_c55a96fa",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 30738
      },
      "writtenOn": "2023-10-15T07:03:09Z",
      "side": 1,
      "message": "Thank you for insisting on the benchmarks. Another thing learned. The full benchmark indicates there is no other negative effect afaikt:\n\n```\n                                   │   base.txt    │               omit.txt               │\n                                   │    sec/op     │    sec/op     vs base                │\nCodeEncoder-8                         733.9µ ± ∞ ¹   640.7µ ± ∞ ¹       ~ (p\u003d1.000 n\u003d1) ²\nCodeEncoderError-8                   1100.9µ ± ∞ ¹   660.1µ ± ∞ ¹       ~ (p\u003d1.000 n\u003d1) ²\nCodeMarshal-8                         786.6µ ± ∞ ¹   748.0µ ± ∞ ¹       ~ (p\u003d1.000 n\u003d1) ²\nCodeMarshalError-8                    969.1µ ± ∞ ¹   785.2µ ± ∞ ¹       ~ (p\u003d1.000 n\u003d1) ²\nMarshalBytes/32-8                    106.40n ± ∞ ¹   97.15n ± ∞ ¹       ~ (p\u003d1.000 n\u003d1) ²\nMarshalBytes/256-8                    263.3n ± ∞ ¹   253.4n ± ∞ ¹       ~ (p\u003d1.000 n\u003d1) ²\nMarshalBytes/4096-8                   2.872µ ± ∞ ¹   2.851µ ± ∞ ¹       ~ (p\u003d1.000 n\u003d1) ²\nMarshalBytesError/32-8                117.6µ ± ∞ ¹   118.2µ ± ∞ ¹       ~ (p\u003d1.000 n\u003d1) ²\nMarshalBytesError/256-8               120.1µ ± ∞ ¹   116.9µ ± ∞ ¹       ~ (p\u003d1.000 n\u003d1) ²\nMarshalBytesError/4096-8              121.9µ ± ∞ ¹   120.3µ ± ∞ ¹       ~ (p\u003d1.000 n\u003d1) ²\nMarshalMap-8                          130.0n ± ∞ ¹   129.2n ± ∞ ¹       ~ (p\u003d1.000 n\u003d1) ²\nCodeDecoder-8                         3.351m ± ∞ ¹   3.204m ± ∞ ¹       ~ (p\u003d1.000 n\u003d1) ²\nUnicodeDecoder-8                      151.0n ± ∞ ¹   148.5n ± ∞ ¹       ~ (p\u003d1.000 n\u003d1) ²\nDecoderStream-8                       105.9n ± ∞ ¹   104.1n ± ∞ ¹       ~ (p\u003d1.000 n\u003d1) ²\nCodeUnmarshal-8                       3.845m ± ∞ ¹   3.752m ± ∞ ¹       ~ (p\u003d1.000 n\u003d1) ²\nCodeUnmarshalReuse-8                  3.265m ± ∞ ¹   3.250m ± ∞ ¹       ~ (p\u003d1.000 n\u003d1) ²\nUnmarshalString-8                     49.41n ± ∞ ¹   48.33n ± ∞ ¹       ~ (p\u003d1.000 n\u003d1) ²\nUnmarshalFloat64-8                    43.32n ± ∞ ¹   42.95n ± ∞ ¹       ~ (p\u003d1.000 n\u003d1) ²\nUnmarshalInt64-8                      37.80n ± ∞ ¹   37.80n ± ∞ ¹       ~ (p\u003d1.000 n\u003d1) ³\nUnmarshalMap-8                        200.0n ± ∞ ¹   189.8n ± ∞ ¹       ~ (p\u003d1.000 n\u003d1) ²\nIssue10335-8                          67.09n ± ∞ ¹   65.02n ± ∞ ¹       ~ (p\u003d1.000 n\u003d1) ²\nIssue34127-8                          33.75n ± ∞ ¹   31.11n ± ∞ ¹       ~ (p\u003d1.000 n\u003d1) ²\nUnmapped-8                            162.8n ± ∞ ¹   154.6n ± ∞ ¹       ~ (p\u003d1.000 n\u003d1) ²\nTypeFieldsCache/MissTypes1-8          4.945µ ± ∞ ¹   4.903µ ± ∞ ¹       ~ (p\u003d1.000 n\u003d1) ²\nTypeFieldsCache/MissTypes10-8         19.27µ ± ∞ ¹   18.53µ ± ∞ ¹       ~ (p\u003d1.000 n\u003d1) ²\nTypeFieldsCache/MissTypes100-8        106.1µ ± ∞ ¹   113.6µ ± ∞ ¹       ~ (p\u003d1.000 n\u003d1) ²\nTypeFieldsCache/MissTypes1000-8       949.5µ ± ∞ ¹   975.9µ ± ∞ ¹       ~ (p\u003d1.000 n\u003d1) ²\nTypeFieldsCache/MissTypes10000-8      9.179m ± ∞ ¹   9.221m ± ∞ ¹       ~ (p\u003d1.000 n\u003d1) ²\nTypeFieldsCache/MissTypes100000-8     92.36m ± ∞ ¹   92.86m ± ∞ ¹       ~ (p\u003d1.000 n\u003d1) ²\nTypeFieldsCache/MissTypes1000000-8     1.047 ± ∞ ¹    1.131 ± ∞ ¹       ~ (p\u003d1.000 n\u003d1) ²\nTypeFieldsCache/HitTypes1-8           3.001n ± ∞ ¹   3.365n ± ∞ ¹       ~ (p\u003d1.000 n\u003d1) ²\nTypeFieldsCache/HitTypes10-8          3.055n ± ∞ ¹   3.130n ± ∞ ¹       ~ (p\u003d1.000 n\u003d1) ²\nTypeFieldsCache/HitTypes100-8         3.232n ± ∞ ¹   2.993n ± ∞ ¹       ~ (p\u003d1.000 n\u003d1) ²\nTypeFieldsCache/HitTypes1000-8        3.044n ± ∞ ¹   2.996n ± ∞ ¹       ~ (p\u003d1.000 n\u003d1) ²\nTypeFieldsCache/HitTypes10000-8       3.065n ± ∞ ¹   2.989n ± ∞ ¹       ~ (p\u003d1.000 n\u003d1) ²\nTypeFieldsCache/HitTypes100000-8      3.038n ± ∞ ¹   3.130n ± ∞ ¹       ~ (p\u003d1.000 n\u003d1) ²\nTypeFieldsCache/HitTypes1000000-8     3.148n ± ∞ ¹   3.039n ± ∞ ¹       ~ (p\u003d1.000 n\u003d1) ²\nEncodeMarshaler-8                     32.28n ± ∞ ¹   35.67n ± ∞ ¹       ~ (p\u003d1.000 n\u003d1) ²\nEncoderEncode-8                       20.02n ± ∞ ¹   21.29n ± ∞ ¹       ~ (p\u003d1.000 n\u003d1) ²\nNumberIsValid-8                       10.97n ± ∞ ¹   10.89n ± ∞ ¹       ~ (p\u003d1.000 n\u003d1) ²\nNumberIsValidRegexp-8                 218.9n ± ∞ ¹   215.9n ± ∞ ¹       ~ (p\u003d1.000 n\u003d1) ²\nOmitempty-8                           14.57µ ± ∞ ¹   13.64µ ± ∞ ¹       ~ (p\u003d1.000 n\u003d1) ²\ngeomean                               2.451µ         2.381µ        -2.86%\n¹ need \u003e\u003d 6 samples for confidence interval at level 0.95\n² need \u003e\u003d 4 samples to detect a difference at alpha level 0.05\n³ all samples are equal\n```",
      "parentUuid": "5d98eee2_1449fd69",
      "revId": "49ebb0eaaf516e8eb37bb9fed2f6f41bb2fd3438",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e67aee2d_12c5e604",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 34895
      },
      "writtenOn": "2023-10-15T20:27:40Z",
      "side": 1,
      "message": "Thanks.",
      "revId": "49ebb0eaaf516e8eb37bb9fed2f6f41bb2fd3438",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}