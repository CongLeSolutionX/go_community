{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "9333be52_ebd56e2b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 36412
      },
      "writtenOn": "2021-02-09T20:33:51Z",
      "side": 1,
      "message": "I think the \"validEmbedPattern\" function in \"src/cmd/go/internal/load/pkg.go\" needs to be changed as well.",
      "revId": "e42c43462add82347990355a876c6a3b6febf610",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fb0981a7_2f839064",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-02-09T21:15:46Z",
      "side": 1,
      "message": "I think you\u0027re probably right about that. But perhaps that check ought to be even more restrictive, so that we don\u0027t allow embedded files locally that won\u0027t work in a published module version.\n\nPer https://golang.org/ref/mod#zip-path-size-constraints:\n\u003e File and directory names within a module may consist of Unicode letters,\n\u003e ASCII digits, the ASCII space character (U+0020), and the ASCII\n\u003e punctuation characters !#$%\u0026()+,-.\u003d@[]^_{}~.\n\nSo perhaps validEmbedPattern should call module.CheckFilePath instead of (or in addition to) fs.ValidPath?",
      "parentUuid": "9333be52_ebd56e2b",
      "revId": "e42c43462add82347990355a876c6a3b6febf610",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "facbe7a1_d20c3a4c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5056
      },
      "writtenOn": "2021-02-09T22:36:33Z",
      "side": 1,
      "message": "See CL 290809.",
      "parentUuid": "fb0981a7_2f839064",
      "revId": "e42c43462add82347990355a876c6a3b6febf610",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d411ece4_e5c65e32",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 36412
      },
      "writtenOn": "2021-02-09T23:03:22Z",
      "side": 1,
      "message": "I agree, I think this is the right solution.",
      "parentUuid": "facbe7a1_d20c3a4c",
      "revId": "e42c43462add82347990355a876c6a3b6febf610",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6d610184_17e27d74",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 36412
      },
      "writtenOn": "2021-02-10T05:50:24Z",
      "side": 1,
      "message": "I think there is an issue in the current implementation of //go:embed.\n\nLet me explain in this comment because it is also related to this CL and to CL 290809.\n\nThe pattern accepted by filepath.Glob is different from Windows than other OS.\n\nOn Windows the pattern a\\b means a/b, for the others OS it means ab. The character : in the pattern has a special meaning on Windows, on other OS it does not.\n\nThe pattern accepted by fs.Glob, after the CL 290512, is the same: a\\b means ab and : has no special meaning.\n\nThe issue is that the current implementation of //go:embed implements for the pattern the syntax of filepath.Glob instead of fs.Glob. Consequently the same pattern used with //go:embed has a different meaning on Windows than on other OS.",
      "revId": "e42c43462add82347990355a876c6a3b6febf610",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "db22f10b_e56eb0c3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-02-10T16:26:05Z",
      "side": 1,
      "message": "\u003e I think there is an issue in the current implementation of //go:embed.\n\u003e \n\u003e Let me explain in this comment because it is also related to this CL and to CL 290809.\n\u003e \n\u003e The pattern accepted by filepath.Glob is different from Windows than other OS.\n\u003e \n\u003e On Windows the pattern a\\b means a/b, for the others OS it means ab. The character : in the pattern has a special meaning on Windows, on other OS it does not.\n\u003e \n\u003e The pattern accepted by fs.Glob, after the CL 290512, is the same: a\\b means ab and : has no special meaning.\n\u003e \n\u003e The issue is that the current implementation of //go:embed implements for the pattern the syntax of filepath.Glob instead of fs.Glob. Consequently the same pattern used with //go:embed has a different meaning on Windows than on other OS.\n\nWith the extra validation in CL 290809, does that still matter?\n\nI guess it does, because on Windows we may process an invalid (Windows-specific) glob pattern into list of valid (slash-separated) paths.\n\nHowever, I don\u0027t think that\u0027s particularly relevant to this CL. (It does demonstrate that mixing fs.ValidPath with non-fs filepath.Glob calls is not a great idea, but don\u0027t think that\u0027s a defect in the io/fs API.)",
      "parentUuid": "6d610184_17e27d74",
      "revId": "e42c43462add82347990355a876c6a3b6febf610",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bca08cd9_8db697ea",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 36412
      },
      "writtenOn": "2021-02-10T18:29:01Z",
      "side": 1,
      "message": "\u003e With the extra validation in CL 290809, does that still matter?\n\nYes, because the isBadEmbedName function is used to validate a path element when the pattern has been already splitted (and it is correct that it does so).\n\nThe issue is due to the split of the pattern. The pattern in\n\n//go:embed x\\y\n\non Linux it is splitted in one path element x\\y but on Windows it is splitted in two path elements x and y so they refers to two different files.\n\nFor example if in the package path there is a file named a[1], to embed it you have to write\n\n//go:embed a\\[1\\]\nvar data string\n\nOn Linux, the package compile and data will contains the content of the a[1] file.\n\nOn Windows, the package does not compile because a\\[1\\] is interpreted as the three path elements: a, [1 and ]. But [1 is not a valid pattern so the package does not compile.\n\nWith this other example\n\n//go:embed a\\\\b\nvar data string\n\nOn Linux, the package compile and data will contains the content of the file a\\b\n\nOn Windows, the package compile only if the file b in the a directory exists. If it exists, data will contains the content of the file b in the directory a.\n\n\u003e However, I don\u0027t think that\u0027s particularly relevant to this CL.\n\nThese issues with backslash cannon be reproduced without this CL. Can be reproduces with a colon.",
      "parentUuid": "db22f10b_e56eb0c3",
      "revId": "e42c43462add82347990355a876c6a3b6febf610",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3cb34bb9_418b5a4d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 36412
      },
      "writtenOn": "2021-02-10T18:37:23Z",
      "side": 1,
      "message": "Sorry, there is a typo in my first example with embed, on Linux, x\\y is splitted as xy and not as x\\y.",
      "parentUuid": "bca08cd9_8db697ea",
      "revId": "e42c43462add82347990355a876c6a3b6febf610",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0b492f6f_64f60257",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5056
      },
      "writtenOn": "2021-02-11T01:10:24Z",
      "side": 1,
      "message": "What you are saying about the embed glob being OS-specific was true before CL 290512, but I don\u0027t believe it\u0027s true anymore.",
      "parentUuid": "3cb34bb9_418b5a4d",
      "revId": "e42c43462add82347990355a876c6a3b6febf610",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b01a080e_7e1ceeef",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5056
      },
      "writtenOn": "2021-02-11T01:10:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d411ece4_e5c65e32",
      "revId": "e42c43462add82347990355a876c6a3b6febf610",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3ef908c9_87f91551",
        "filename": "src/os/file.go",
        "patchSetId": 1
      },
      "lineNbr": 637,
      "author": {
        "id": 36412
      },
      "writtenOn": "2021-02-09T23:21:33Z",
      "side": 1,
      "message": "If os.DirFS returns an fs.ErrInvalid error when name is not valid for additional requirements than those of fs.ValidPath, other implementations of fs.FS would feel authorized to do the same for their own requirements. Is this the intended behavior? An \"fs.ErrNotExist\" error could be returned as an alternative.",
      "revId": "e42c43462add82347990355a876c6a3b6febf610",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b4572439_362ec31d",
        "filename": "src/os/file.go",
        "patchSetId": 1
      },
      "lineNbr": 637,
      "author": {
        "id": 5056
      },
      "writtenOn": "2021-02-11T01:10:24Z",
      "side": 1,
      "message": "It is fine for an implementation to report that a name is not valid for that implementation when that is the case.\nfs.ValidPath is a floor not a ceiling.",
      "parentUuid": "3ef908c9_87f91551",
      "revId": "e42c43462add82347990355a876c6a3b6febf610",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}