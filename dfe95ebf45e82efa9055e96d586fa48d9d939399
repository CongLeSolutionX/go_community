{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "403acf54_74272d22",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-09-23T20:01:19Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003ddfe95ebf\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "dfe95ebf45e82efa9055e96d586fa48d9d939399",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "825ab7be_78c46669",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-09-23T20:14:43Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "403acf54_74272d22",
      "tag": "autogenerated:trybots~happy",
      "revId": "dfe95ebf45e82efa9055e96d586fa48d9d939399",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "adb7a46b_2fbcd630",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 7061
      },
      "writtenOn": "2022-09-24T00:27:06Z",
      "side": 1,
      "message": "https://perf.golang.org/search?q\u003dupload:20220923.19\n1.4% reduction in geomean build user time.",
      "revId": "dfe95ebf45e82efa9055e96d586fa48d9d939399",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f019060e_1ce163f4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5440
      },
      "writtenOn": "2022-09-26T17:23:29Z",
      "side": 1,
      "message": "Do we have benchmarks showing the storage reuse helps? I\u0027m okay with making the API more complex if it measurably helps, but I\u0027m hesitant to make it more complex and error-prone without measurements. I\u0027d also think noder/reader.go needs similar changes.\n\nCloning+specializing binary.ReadUvarint for strings.Reader seems reasonable too, but can we do that as a separate CL?",
      "revId": "dfe95ebf45e82efa9055e96d586fa48d9d939399",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a964b43e_c13d81d9",
        "filename": "src/cmd/compile/internal/importer/ureader.go",
        "patchSetId": 2
      },
      "lineNbr": 217,
      "author": {
        "id": 5200
      },
      "writtenOn": "2022-09-26T15:45:00Z",
      "side": 1,
      "message": "I\u0027m not sure if this is worth doing, but maybe put this code in a block, so it is clear that there is no use after the retire call?\n\nvar typ types2.Type\n{\n    r :\u003d pr.tempReader(...)\n    ...\n    typ \u003d r.doTyp()\n    pr.retireReader(r)\n}\n\nor even an anonymous func\n\ntyp :\u003d func() types.Type {\n    r :\u003d pr.tempReader()\n    tmp :\u003d r.doTyp()\n    pr.retireReader(r)\n    return tmp\n}()",
      "revId": "dfe95ebf45e82efa9055e96d586fa48d9d939399",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9218a662_e5949cf0",
        "filename": "src/internal/pkgbits/decoder.go",
        "patchSetId": 2
      },
      "lineNbr": 281,
      "author": {
        "id": 14665
      },
      "writtenOn": "2022-09-26T03:00:48Z",
      "side": 1,
      "message": "`s/binary/pkgbits/`\n`s/varint/readUvarint/`",
      "range": {
        "startLine": 281,
        "startChar": 27,
        "endLine": 281,
        "endChar": 33
      },
      "revId": "dfe95ebf45e82efa9055e96d586fa48d9d939399",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}