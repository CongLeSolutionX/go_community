{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "5b27db3b_077ed934",
        "filename": "src/crypto/tls/common.go",
        "patchSetId": 1
      },
      "lineNbr": 228,
      "author": {
        "id": 28787
      },
      "writtenOn": "2023-05-22T16:08:13Z",
      "side": 1,
      "message": "This won\u0027t be necessary for QUIC. Am I right to assume that this is required for https://github.com/golang/go/issues/46718?",
      "revId": "71f7a12374a3a81bc46d89ec51c012cae5291360",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f0aec799_eebc574a",
        "filename": "src/crypto/tls/common.go",
        "patchSetId": 1
      },
      "lineNbr": 228,
      "author": {
        "id": 5305
      },
      "writtenOn": "2023-05-22T17:54:26Z",
      "side": 1,
      "message": "This will be necessary for any QUIC implementation that wants to support session resumption with changed transport parameters, no?",
      "parentUuid": "5b27db3b_077ed934",
      "revId": "71f7a12374a3a81bc46d89ec51c012cae5291360",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "55f6b712_b4f8e1ac",
        "filename": "src/crypto/tls/common.go",
        "patchSetId": 1
      },
      "lineNbr": 228,
      "author": {
        "id": 28787
      },
      "writtenOn": "2023-05-22T20:05:48Z",
      "side": 1,
      "message": "The server decodes the transport parameters in the Unwrap callback. It can just save them there, can\u0027t it?",
      "parentUuid": "f0aec799_eebc574a",
      "revId": "71f7a12374a3a81bc46d89ec51c012cae5291360",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4e930e96_4f35a297",
        "filename": "src/crypto/tls/common.go",
        "patchSetId": 1
      },
      "lineNbr": 228,
      "author": {
        "id": 5305
      },
      "writtenOn": "2023-05-22T20:10:38Z",
      "side": 1,
      "message": "If I understand the API correctly, the Unwrap callback doesn\u0027t know whether the unwrapped session is used or not. The client could provide multiple tickets, and Unwrap may be called on several of them before the server finds an acceptable one.",
      "parentUuid": "55f6b712_b4f8e1ac",
      "revId": "71f7a12374a3a81bc46d89ec51c012cae5291360",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5e4fa0a9_c7261176",
        "filename": "src/crypto/tls/common.go",
        "patchSetId": 1
      },
      "lineNbr": 228,
      "author": {
        "id": 28787
      },
      "writtenOn": "2023-05-22T20:54:18Z",
      "side": 1,
      "message": "You\u0027re right, TLS 1.3 allows using multiple session tickets: https://www.rfc-editor.org/rfc/rfc8446#section-4.2.11, and you\u0027d need some way to tell which session ticket was used.\n\nThe API suggested here works, but it\u0027s a little bit tricky to use correctly. Assume that the application (by that I mean the application running on top of QUIC) uses the `SessionState.Extra` field to store some of its own data with the session ticket. The QUIC would append the QUIC transport parameters to the `Extra` field written by the application\u0027s `WrapSession` callback, and remove them in `UnwrapSession`.\nThis now also means that the QUIC stack will have to wrap every call that passes a `ConnectionState` to the application, and there\u0027s quite a few of those.\nOr am I missing something here?",
      "parentUuid": "4e930e96_4f35a297",
      "revId": "71f7a12374a3a81bc46d89ec51c012cae5291360",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "536e91a1_22bc09bd",
        "filename": "src/crypto/tls/common.go",
        "patchSetId": 1
      },
      "lineNbr": 228,
      "author": {
        "id": 28787
      },
      "writtenOn": "2023-05-24T10:52:19Z",
      "side": 1,
      "message": "On the server side: While the client can send multiple tickets, only the first ticket can be used for 0-RTT. Since `UnwrapSession` is called in the order the tickets were sent in the ClientHello, the QUIC stack knows that if 0-RTT is accepted, the transport parameters extracted in the first call to that function are the ones in use.\n\nOn the client side: crypto/tls currently only uses a single session ticket, so the QUIC stack knows which transport parameters are in use. Only once crypto/tls starts using multiple session ticket do we need a way to tell which one is used.\n\nTo summarize, with the current changes, the QUIC stack doesn\u0027t need the `Extra` field on the `ConnectionState`. It would probably make sense to remove it for now, and add some API in a future CL.",
      "parentUuid": "5e4fa0a9_c7261176",
      "revId": "71f7a12374a3a81bc46d89ec51c012cae5291360",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "51dd3173_14290e4a",
        "filename": "src/crypto/tls/common.go",
        "patchSetId": 1
      },
      "lineNbr": 228,
      "author": {
        "id": 11715
      },
      "writtenOn": "2023-05-24T12:40:25Z",
      "side": 1,
      "message": "It sounds like we are not sure about how to do this best. We don\u0027t need it for Go 1.21 since we only send one ticket at this time, so let\u0027s punt on it until we have had more time.\n\nI removed ConnectionState.Session.",
      "parentUuid": "536e91a1_22bc09bd",
      "revId": "71f7a12374a3a81bc46d89ec51c012cae5291360",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}