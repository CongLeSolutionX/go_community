{
  "comments": [
    {
      "key": {
        "uuid": "2df5530d_19cc0acf",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 5167
      },
      "writtenOn": "2018-10-03T17:49:34Z",
      "side": 1,
      "message": "Nit: by convention, we lower-case the first letter of the subject",
      "revId": "ae8332c3bcc6a1ee0e8a92c5da0a70cc0a51a450",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "70212304_ed94c6e7",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 25391
      },
      "writtenOn": "2018-10-03T22:58:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2df5530d_19cc0acf",
      "revId": "ae8332c3bcc6a1ee0e8a92c5da0a70cc0a51a450",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3fafa177_efa93c8c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 12,
      "author": {
        "id": 5167
      },
      "writtenOn": "2018-10-03T17:49:34Z",
      "side": 1,
      "message": "I know Rick was using this term, but we haven\u0027t actually used the term \"large object space\" before. I\u0027m not entirely sure we even have that concept in its typical use, since we don\u0027t segregate small objects and large objects. It\u0027s really just \"the heap\" and \"free spans in the heap\".",
      "revId": "ae8332c3bcc6a1ee0e8a92c5da0a70cc0a51a450",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8e73cf42_a95028c7",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 12,
      "author": {
        "id": 5186
      },
      "writtenOn": "2018-10-03T20:11:59Z",
      "side": 1,
      "message": "When I use LOS I really mean memory allocated using the treap.",
      "parentUuid": "3fafa177_efa93c8c",
      "revId": "ae8332c3bcc6a1ee0e8a92c5da0a70cc0a51a450",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5cae2540_2d33843e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 12,
      "author": {
        "id": 25391
      },
      "writtenOn": "2018-10-03T22:58:40Z",
      "side": 1,
      "message": "I called it the \"large object treap\". Is that OK? I\u0027m happy to change it further to better reflect common terminology.",
      "parentUuid": "8e73cf42_a95028c7",
      "revId": "ae8332c3bcc6a1ee0e8a92c5da0a70cc0a51a450",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bafaaa6c_f7a5df24",
        "filename": "src/runtime/malloc_test.go",
        "patchSetId": 2
      },
      "lineNbr": 173,
      "author": {
        "id": 5167
      },
      "writtenOn": "2018-10-03T17:49:34Z",
      "side": 1,
      "message": "The general convention for writing sizes in the runtime is \"N \u003c\u003c M\" where M is 10, 20, 30, etc for KiB, MiB, GiB...",
      "revId": "ae8332c3bcc6a1ee0e8a92c5da0a70cc0a51a450",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "83d9ec1a_05a00189",
        "filename": "src/runtime/malloc_test.go",
        "patchSetId": 2
      },
      "lineNbr": 173,
      "author": {
        "id": 25391
      },
      "writtenOn": "2018-10-03T22:58:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bafaaa6c_f7a5df24",
      "revId": "ae8332c3bcc6a1ee0e8a92c5da0a70cc0a51a450",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e330e328_7675fae6",
        "filename": "src/runtime/malloc_test.go",
        "patchSetId": 2
      },
      "lineNbr": 177,
      "author": {
        "id": 5167
      },
      "writtenOn": "2018-10-03T17:49:34Z",
      "side": 1,
      "message": "If you instead do saved :\u003d make([]interface{}, 0, objects), then you can use append below rather than tracking the position yourself in \u0027n\u0027.",
      "revId": "ae8332c3bcc6a1ee0e8a92c5da0a70cc0a51a450",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a5ae3dc8_de0241d5",
        "filename": "src/runtime/malloc_test.go",
        "patchSetId": 2
      },
      "lineNbr": 177,
      "author": {
        "id": 25391
      },
      "writtenOn": "2018-10-03T22:58:40Z",
      "side": 1,
      "message": "right. I wanted to avoid allocating but come to think of it this array is so large I\u0027m not sure why I thought it wouldn\u0027t end up getting allocated anyway. I\u0027ll just do this.",
      "parentUuid": "e330e328_7675fae6",
      "revId": "ae8332c3bcc6a1ee0e8a92c5da0a70cc0a51a450",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "334cccaf_10007c10",
        "filename": "src/runtime/malloc_test.go",
        "patchSetId": 2
      },
      "lineNbr": 179,
      "author": {
        "id": 5167
      },
      "writtenOn": "2018-10-03T17:49:34Z",
      "side": 1,
      "message": "This shouldn\u0027t be necessary. As soon as \"saved\" is no longer referenced, it will be eligible for GC (actually, because of the deletion barrier, writing nils to it may make the objects last *longer* :). And if another test cares about the heap being clean before it runs, it will start with a call to GC().",
      "revId": "ae8332c3bcc6a1ee0e8a92c5da0a70cc0a51a450",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "27f5d76e_60afc863",
        "filename": "src/runtime/malloc_test.go",
        "patchSetId": 2
      },
      "lineNbr": 179,
      "author": {
        "id": 25391
      },
      "writtenOn": "2018-10-03T22:58:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "334cccaf_10007c10",
      "revId": "ae8332c3bcc6a1ee0e8a92c5da0a70cc0a51a450",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e34ef18a_4c04c1bc",
        "filename": "src/runtime/malloc_test.go",
        "patchSetId": 2
      },
      "lineNbr": 191,
      "author": {
        "id": 5167
      },
      "writtenOn": "2018-10-03T17:49:34Z",
      "side": 1,
      "message": "This interface conversion may actually cause a surprise allocation for the itab. It probably doesn\u0027t matter, but you can avoid this by using slices instead of arrays and making saved something like [][]byte.",
      "revId": "ae8332c3bcc6a1ee0e8a92c5da0a70cc0a51a450",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7421841b_e94cb453",
        "filename": "src/runtime/malloc_test.go",
        "patchSetId": 2
      },
      "lineNbr": 191,
      "author": {
        "id": 25391
      },
      "writtenOn": "2018-10-03T22:58:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e34ef18a_4c04c1bc",
      "revId": "ae8332c3bcc6a1ee0e8a92c5da0a70cc0a51a450",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8694a3c3_a23b5976",
        "filename": "src/runtime/malloc_test.go",
        "patchSetId": 2
      },
      "lineNbr": 191,
      "author": {
        "id": 5186
      },
      "writtenOn": "2018-10-04T14:07:26Z",
      "side": 1,
      "message": "As you noted below this can lead to the GC recovering objects not in saved before this loop completes. The test could simply add an else and put the i%2 !\u003d 0 objects into a condemned array instead of the saved array. This way all allocations will survived the for loop. Then you can simply release condemned, do a GC and the holes will appear. This should be more deterministic all around.",
      "range": {
        "startLine": 191,
        "startChar": 3,
        "endLine": 191,
        "endChar": 15
      },
      "revId": "ae8332c3bcc6a1ee0e8a92c5da0a70cc0a51a450",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9df503ea_3c4b2d92",
        "filename": "src/runtime/malloc_test.go",
        "patchSetId": 2
      },
      "lineNbr": 193,
      "author": {
        "id": 5186
      },
      "writtenOn": "2018-10-03T20:11:59Z",
      "side": 1,
      "message": "Someday the compiler might decide \"a\" doesn\u0027t need to be allocated. Perhaps assign \"a\" to a global that overwritten by the next write of \"a\" if it isn\u0027t put in saved.",
      "revId": "ae8332c3bcc6a1ee0e8a92c5da0a70cc0a51a450",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "74f23061_114acfa2",
        "filename": "src/runtime/malloc_test.go",
        "patchSetId": 2
      },
      "lineNbr": 193,
      "author": {
        "id": 25391
      },
      "writtenOn": "2018-10-03T22:58:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9df503ea_3c4b2d92",
      "revId": "ae8332c3bcc6a1ee0e8a92c5da0a70cc0a51a450",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2522c9f9_be2f9cc2",
        "filename": "src/runtime/malloc_test.go",
        "patchSetId": 2
      },
      "lineNbr": 195,
      "author": {
        "id": 5167
      },
      "writtenOn": "2018-10-03T17:49:34Z",
      "side": 1,
      "message": "I think you have to do a GC() here in order to free up the unused allocations above. Otherwise, it\u0027s totally legitimate for the backed heap to grow below, since we may not realize those objects are free at all.",
      "revId": "ae8332c3bcc6a1ee0e8a92c5da0a70cc0a51a450",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6bbbd0b6_207a0c07",
        "filename": "src/runtime/malloc_test.go",
        "patchSetId": 2
      },
      "lineNbr": 195,
      "author": {
        "id": 25391
      },
      "writtenOn": "2018-10-03T22:58:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2522c9f9_be2f9cc2",
      "revId": "ae8332c3bcc6a1ee0e8a92c5da0a70cc0a51a450",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "56f3cc33_7e55271c",
        "filename": "src/runtime/malloc_test.go",
        "patchSetId": 2
      },
      "lineNbr": 208,
      "author": {
        "id": 5186
      },
      "writtenOn": "2018-10-03T20:11:59Z",
      "side": 1,
      "message": "Not sure what the state of the heap is when entering the test. A ReadMemStats at the top of the test can be used to monitor the effect of the allocation in more isolation.",
      "range": {
        "startLine": 208,
        "startChar": 1,
        "endLine": 208,
        "endChar": 19
      },
      "revId": "ae8332c3bcc6a1ee0e8a92c5da0a70cc0a51a450",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    }
  ]
}