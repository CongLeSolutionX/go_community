{
  "comments": [
    {
      "key": {
        "uuid": "7b9fe759_931eda2f",
        "filename": "src/cmd/go/internal/modload/init.go",
        "patchSetId": 5
      },
      "lineNbr": 662,
      "author": {
        "id": 6365
      },
      "writtenOn": "2019-04-09T18:59:10Z",
      "side": 1,
      "message": "Does this bypass the mod\u003dreadonly check if the go.mod file is clean?",
      "revId": "d004be1a8cc6fdca9eba205f905218a8b448845f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d375a92d_bb0334c1",
        "filename": "src/cmd/go/internal/modload/init.go",
        "patchSetId": 5
      },
      "lineNbr": 662,
      "author": {
        "id": 28030
      },
      "writtenOn": "2019-04-19T22:27:13Z",
      "side": 1,
      "message": "It does not, if I understand you correctly. The way this CL is right now is basically this: if mod\u003dreadonly neither go.mod nor go.sum are allowed to be changed. If go.mod is clean, and go.sum is not clean, then we error out. If go.mod is dirty, then we error out on go.mod being dirty and not even check go.sum yet.",
      "parentUuid": "7b9fe759_931eda2f",
      "revId": "d004be1a8cc6fdca9eba205f905218a8b448845f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "56de3d51_9a1a946f",
        "filename": "src/cmd/go/internal/modload/init.go",
        "patchSetId": 5
      },
      "lineNbr": 662,
      "author": {
        "id": 6365
      },
      "writtenOn": "2019-05-08T17:03:50Z",
      "side": 1,
      "message": "\u003e If go.mod is clean, and go.sum is not clean, then we error out.\n\nAh, I see. There is a BuildMod check in WriteGoSum in addition to the one here.\n\nIn that case, I think this would be easier for me to follow with the WriteGoSum still only occurring in one place:\n\n\tdirty :\u003d !bytes.Equal(new, modFileData)\n\tif dirty \u0026\u0026 cfg.BuildMod \u003d\u003d \"readonly\" {\n\t\t// If we\u0027re about to fail due to -mod\u003dreadonly,\n\t\t// prefer to report a dirty go.mod over a dirty go.sum.\n\t\tbase.Fatalf([‚Ä¶])\n\t}\n\n\t// Always update go.sum, even [‚Ä¶]\n\tmodfetch.WriteGoSum()\n\n\tif !dirty {\n\t\t// We don\u0027t [‚Ä¶]\n\t\treturn\n\t}",
      "parentUuid": "d375a92d_bb0334c1",
      "revId": "d004be1a8cc6fdca9eba205f905218a8b448845f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fd9cc3f5_51931e8f",
        "filename": "src/cmd/go/internal/modload/init.go",
        "patchSetId": 5
      },
      "lineNbr": 662,
      "author": {
        "id": 28030
      },
      "writtenOn": "2019-05-08T19:21:28Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "56de3d51_9a1a946f",
      "revId": "d004be1a8cc6fdca9eba205f905218a8b448845f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "45548e34_f9e29f88",
        "filename": "src/cmd/go/testdata/script/sum_readonly.txt",
        "patchSetId": 5
      },
      "lineNbr": 6,
      "author": {
        "id": 6365
      },
      "writtenOn": "2019-04-09T18:59:10Z",
      "side": 1,
      "message": "Add:\n\ngo build -mod\u003dreadonly\n\n(Otherwise, the ‚Äúexperiment‚Äù case at line 10 lacks a ‚Äúcontrol‚Äù case.)",
      "revId": "d004be1a8cc6fdca9eba205f905218a8b448845f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d260d44e_49b73615",
        "filename": "src/cmd/go/testdata/script/sum_readonly.txt",
        "patchSetId": 5
      },
      "lineNbr": 6,
      "author": {
        "id": 28030
      },
      "writtenOn": "2019-04-19T22:27:13Z",
      "side": 1,
      "message": "1. Not sure what you mean by \"control\" case :) \n2. I can\u0027t pass -mod\u003dreadonly, because Go adds a \"// indirect\" when I first run \"go get\" on line 4 even though I\u0027m using it in the main.go file on line 24. It\u0027s only when I run \"go build\" does go remove the \"// indirect\" from go.mod -- therefore, if I pass -mod\u003dreadonly then it will error out since go.mod becomes dirty.",
      "parentUuid": "45548e34_f9e29f88",
      "revId": "d004be1a8cc6fdca9eba205f905218a8b448845f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bd6f2f52_ccfbdf56",
        "filename": "src/cmd/go/testdata/script/sum_readonly.txt",
        "patchSetId": 5
      },
      "lineNbr": 6,
      "author": {
        "id": 6365
      },
      "writtenOn": "2019-05-08T17:03:50Z",
      "side": 1,
      "message": "\u003e 1. Not sure what you mean by \"control\" case :)\n\nHmm... I guess it\u0027s probably already covered by another -mod\u003dreadonly test somewhere anyway, but it would still be nice if the only thing that varies between the two runs is the dirtiness of the go.sum file.\n\n(There are two variables in this ‚Äúexperiment‚Äù: ‚Äúgo.sum is dirty‚Äù, and ‚Äú-mod\u003dreadonly‚Äù is set. Ideally, we should make sure that we\u0027ve tested all four combinations of those variables.)\n\n\u003e 2. I can\u0027t pass -mod\u003dreadonly, because Go adds a \"// indirect\" when I first run \"go get\" on line 4 even though I\u0027m using it in the main.go file on line 24.\n\nAh, that should be easy to fix: you can run `go mod tidy` after `go get`. üôÇ",
      "parentUuid": "d260d44e_49b73615",
      "revId": "d004be1a8cc6fdca9eba205f905218a8b448845f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f001e191_b310eabe",
        "filename": "src/cmd/go/testdata/script/sum_readonly.txt",
        "patchSetId": 5
      },
      "lineNbr": 6,
      "author": {
        "id": 28030
      },
      "writtenOn": "2019-05-08T19:21:28Z",
      "side": 1,
      "message": "Ah, good call on go mod tidy. Updated the test case with a few comments to show the 2/4 experiments. I think the other two are definitely well tested in other scripts while this one focuses on \"go.sum\" being dirty/clean. Meaning, there\u0027s no need to test that \"go.sum \u003d\u003d clean \u0026\u0026 -mod!\u003dreaodnly\" as if that failed, this means most test should definitely fail since it\u0027s the happy scenario. BUT, definitely let me know if you\u0027d like me to add those to this particular. script",
      "parentUuid": "bd6f2f52_ccfbdf56",
      "revId": "d004be1a8cc6fdca9eba205f905218a8b448845f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    }
  ]
}