{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "9e974a8b_7c1b9336",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5200
      },
      "writtenOn": "2022-05-04T01:42:31Z",
      "side": 1,
      "message": "I\u0027m curious - would this remove the need for the prove changes in CL 395714?\n",
      "revId": "2315ca78be31450d2fb619c3e17d1f7cd1396ee9",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1ddbedbb_4b243ec9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-05-04T01:42:50Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003d2315ca78",
      "tag": "autogenerated:trybots~beginning",
      "revId": "2315ca78be31450d2fb619c3e17d1f7cd1396ee9",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "660e663b_b797bd5a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-05-04T01:51:10Z",
      "side": 1,
      "message": "Build is still in progress... Status page: https://farmer.golang.org/try?commit\u003d2315ca78\nFailed on linux-arm64-aws: https://storage.googleapis.com/go-build-log/2315ca78/linux-arm64-aws_077a77de.log\nOther builds still in progress; subsequent failure notices suppressed until final report.\n\nConsult https://build.golang.org/ to see whether they are new failures. Keep in mind that TryBots currently test *exactly* your git commit, without rebasing. If your commit\u0027s git parent is old, the failure might\u0027ve already been fixed.\n",
      "parentUuid": "1ddbedbb_4b243ec9",
      "tag": "autogenerated:trybots~progress",
      "revId": "2315ca78be31450d2fb619c3e17d1f7cd1396ee9",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a5862665_467e7456",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-05-04T01:54:29Z",
      "side": 1,
      "message": "3 of 30 TryBots failed.\nFailed on linux-arm64-aws: https://storage.googleapis.com/go-build-log/2315ca78/linux-arm64-aws_077a77de.log\nFailed on linux-amd64: https://storage.googleapis.com/go-build-log/2315ca78/linux-amd64_2bdc5780.log\nFailed on linux-arm-aws: https://storage.googleapis.com/go-build-log/2315ca78/linux-arm-aws_a2a89972.log\n\nConsult https://build.golang.org/ to see whether they are new failures. Keep in mind that TryBots currently test *exactly* your git commit, without rebasing. If your commit\u0027s git parent is old, the failure might\u0027ve already been fixed.\n\n",
      "parentUuid": "1ddbedbb_4b243ec9",
      "tag": "autogenerated:trybots~failed",
      "revId": "2315ca78be31450d2fb619c3e17d1f7cd1396ee9",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "658c8d86_283ef025",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 55763
      },
      "writtenOn": "2022-05-04T06:42:24Z",
      "side": 1,
      "message": "It seems CL 395714 allows prove to propagate through jump tables\nWhich is a good thing that this patch reuse.",
      "parentUuid": "9e974a8b_7c1b9336",
      "revId": "2315ca78be31450d2fb619c3e17d1f7cd1396ee9",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3b33882d_a0b1fe51",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 55763
      },
      "writtenOn": "2022-05-04T16:37:42Z",
      "side": 1,
      "message": "Fixed.",
      "parentUuid": "a5862665_467e7456",
      "revId": "2315ca78be31450d2fb619c3e17d1f7cd1396ee9",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "97dbf694_315b02f7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 55763
      },
      "writtenOn": "2022-05-04T16:37:42Z",
      "side": 1,
      "message": "RFM",
      "revId": "2315ca78be31450d2fb619c3e17d1f7cd1396ee9",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7c9d7d94_8e37271f",
        "filename": "src/cmd/compile/internal/ssa/prove.go",
        "patchSetId": 4
      },
      "lineNbr": 1347,
      "author": {
        "id": 5200
      },
      "writtenOn": "2022-05-04T01:42:31Z",
      "side": 1,
      "message": "Should we also check if umin \u003d\u003d umax? Or is an invariant that if min\u003d\u003dmax if and only if umin\u003d\u003dumax?",
      "revId": "2315ca78be31450d2fb619c3e17d1f7cd1396ee9",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c71e87cf_c9b4ad6f",
        "filename": "src/cmd/compile/internal/ssa/prove.go",
        "patchSetId": 4
      },
      "lineNbr": 1347,
      "author": {
        "id": 55763
      },
      "writtenOn": "2022-05-04T06:42:24Z",
      "side": 1,
      "message": "This is only important in comparisions no ? but here we are just loading constants. With twos complement\u0027s magic should ne fine.\n\nI\u0027ll add a panicking assert for that.",
      "parentUuid": "7c9d7d94_8e37271f",
      "revId": "2315ca78be31450d2fb619c3e17d1f7cd1396ee9",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "524fa695_9b3108c5",
        "filename": "src/cmd/compile/internal/ssa/prove.go",
        "patchSetId": 4
      },
      "lineNbr": 1347,
      "author": {
        "id": 5200
      },
      "writtenOn": "2022-05-04T14:48:50Z",
      "side": 1,
      "message": "Looks like it isn\u0027t quite an invariant. This code has min\u003d\u003dmax\u003d\u003d-3 but has no info for umin/umax.\n\nfunc f(x int64) int64 {\n\tif x \u003c -3 {\n\t\tpanic(\"foo\")\n\t}\n\tif x \u003e -3 {\n\t\tpanic(\"foo\")\n\t}\n\treturn x + 3\n}",
      "parentUuid": "c71e87cf_c9b4ad6f",
      "revId": "2315ca78be31450d2fb619c3e17d1f7cd1396ee9",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "935ac67f_aef229a5",
        "filename": "src/cmd/compile/internal/ssa/prove.go",
        "patchSetId": 4
      },
      "lineNbr": 1347,
      "author": {
        "id": 55763
      },
      "writtenOn": "2022-05-04T15:23:46Z",
      "side": 1,
      "message": "\u003e Looks like it isn\u0027t quite an invariant\nYes, forgot to publish my draft sorry.\n\nI think for now the best is to check for everything and open a new issue about making prove smarter in thoses cases (it\u0027s rare, there is ~25 cases in the ~70k founds running ./make.bash).\n\nAlso, in your example and the ones I could find, the generated code would be correct just taking the value from the int64 one. But that a very shaky assumption.",
      "parentUuid": "c71e87cf_c9b4ad6f",
      "revId": "2315ca78be31450d2fb619c3e17d1f7cd1396ee9",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "78aa8ad1_e28f4576",
        "filename": "src/cmd/compile/internal/ssa/prove.go",
        "patchSetId": 4
      },
      "lineNbr": 1347,
      "author": {
        "id": 5200
      },
      "writtenOn": "2022-05-04T15:27:41Z",
      "side": 1,
      "message": "Yes, it is certainly ok to do this optimization if lim.min\u003d\u003dlim.max.\n\nI was thinking lim.min\u003d\u003dlim.max || lim.umin\u003d\u003dlim.umax would also be ok, and then wondered whether that would be redundant. It\u0027s not, at least with current prove.",
      "parentUuid": "935ac67f_aef229a5",
      "revId": "2315ca78be31450d2fb619c3e17d1f7cd1396ee9",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0468385a_f1cfea45",
        "filename": "src/cmd/compile/internal/ssa/prove.go",
        "patchSetId": 4
      },
      "lineNbr": 1347,
      "author": {
        "id": 55763
      },
      "writtenOn": "2022-05-04T15:33:10Z",
      "side": 1,
      "message": "Oh ok.\n\nI was thinking it should be\n  lim.min \u003d\u003d lim.max \u0026\u0026\n  lim.umin \u003d\u003d lim.umax \u0026\u0026\n  lim.min \u003d\u003d convertWithSize(lim.umin, arg.Type().Size() * 8)\n\nI don\u0027t know enough about prove to see why lim.min\u003d\u003dlim.max is enough.\n\nSo here, if I understand correctly, I leave it as-is ?",
      "parentUuid": "78aa8ad1_e28f4576",
      "revId": "2315ca78be31450d2fb619c3e17d1f7cd1396ee9",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "82de03b7_13255a63",
        "filename": "src/cmd/compile/internal/ssa/prove.go",
        "patchSetId": 4
      },
      "lineNbr": 1347,
      "author": {
        "id": 5200
      },
      "writtenOn": "2022-05-04T15:41:41Z",
      "side": 1,
      "message": "Yes, you can leave it. The limits record known restrictions on the input value. Those restrictions are cumulative, so knowing lim.min\u003d\u003dlim.max means there\u0027s only one possible value the described Value could be, regardless of what umin says. If, e.g., lim.min\u003d\u003dlim.max\u003d\u003d3 and lim.umin\u003d\u003dlim.umax\u003d\u003d4, then that\u0027s a contradiction (unreachable code).\n\nYou will need to resolve the trybot failures - they look related. It\u0027s possible this optimization just confuses the failing tests.",
      "parentUuid": "0468385a_f1cfea45",
      "revId": "2315ca78be31450d2fb619c3e17d1f7cd1396ee9",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "814acde5_60f6ff00",
        "filename": "src/cmd/compile/internal/ssa/prove.go",
        "patchSetId": 4
      },
      "lineNbr": 1347,
      "author": {
        "id": 55763
      },
      "writtenOn": "2022-05-04T16:07:41Z",
      "side": 1,
      "message": "I\u0027ve checked and there do is cases like that.\nI\u0027ve added a lim.umin \u003d\u003d lim.umax check, and that found ~300 more cases (over the ~70k that not a lot, but I guess it\u0027s just that in the go codebase int is far more popular than uint).",
      "parentUuid": "82de03b7_13255a63",
      "revId": "2315ca78be31450d2fb619c3e17d1f7cd1396ee9",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}