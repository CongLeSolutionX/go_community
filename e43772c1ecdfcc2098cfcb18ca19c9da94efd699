{
  "comments": [
    {
      "key": {
        "uuid": "d0aefe64_ccfee3ab",
        "filename": "misc/cgo/testsigfwd/main.go",
        "patchSetId": 9
      },
      "lineNbr": 12,
      "author": {
        "id": 5030
      },
      "writtenOn": "2015-04-20T14:16:31Z",
      "side": 1,
      "message": "Dereferencing a null pointer is technically undefined behavior. Unfortunately clang -O2 is \"smart\" enough to recognize it in this code and replaces the function with a UD2 instruction, so this thread sends a SIGILL instead of a SIGSEGV.\n\nHow about pthread_kill(pthread_self(), SIGSEGV)?",
      "revId": "e43772c1ecdfcc2098cfcb18ca19c9da94efd699",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "305cba63_08206fc4",
        "filename": "misc/cgo/testsigfwd/main.go",
        "patchSetId": 9
      },
      "lineNbr": 12,
      "author": {
        "id": 6605
      },
      "writtenOn": "2015-04-20T16:47:49Z",
      "side": 1,
      "message": "Nice, thanks!",
      "parentUuid": "d0aefe64_ccfee3ab",
      "revId": "e43772c1ecdfcc2098cfcb18ca19c9da94efd699",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d0aefe64_e954f126",
        "filename": "src/runtime/signal_linux.go",
        "patchSetId": 9
      },
      "lineNbr": 90,
      "author": {
        "id": 5030
      },
      "writtenOn": "2015-04-18T16:24:36Z",
      "side": 1,
      "message": "fwdSig and sigtable are tested to be the same size (_NSIG) at the opening of initsig. checking just one should be fine.",
      "revId": "e43772c1ecdfcc2098cfcb18ca19c9da94efd699",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "305cba63_88dabf63",
        "filename": "src/runtime/signal_linux.go",
        "patchSetId": 9
      },
      "lineNbr": 90,
      "author": {
        "id": 6605
      },
      "writtenOn": "2015-04-20T16:47:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d0aefe64_e954f126",
      "revId": "e43772c1ecdfcc2098cfcb18ca19c9da94efd699",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d0aefe64_2995293b",
        "filename": "src/runtime/signal_linux.go",
        "patchSetId": 9
      },
      "lineNbr": 101,
      "author": {
        "id": 5030
      },
      "writtenOn": "2015-04-18T16:24:36Z",
      "side": 1,
      "message": "What is the motivation for checking explicitly for SI_USER? It is an external source of signals, but there are other sources you\u0027re not checking for.",
      "revId": "e43772c1ecdfcc2098cfcb18ca19c9da94efd699",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "305cba63_c8f317e9",
        "filename": "src/runtime/signal_linux.go",
        "patchSetId": 9
      },
      "lineNbr": 101,
      "author": {
        "id": 6605
      },
      "writtenOn": "2015-04-20T16:47:49Z",
      "side": 1,
      "message": "I was just following iant@\u0027s direction here, I don\u0027t know why this check is necessary.",
      "parentUuid": "d0aefe64_2995293b",
      "revId": "e43772c1ecdfcc2098cfcb18ca19c9da94efd699",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "309d9a70_b92a7130",
        "filename": "src/runtime/signal_linux.go",
        "patchSetId": 9
      },
      "lineNbr": 101,
      "author": {
        "id": 5206
      },
      "writtenOn": "2015-04-24T00:03:07Z",
      "side": 1,
      "message": "For the record, the check for SI_USER is because we want to forward only synchronous signals generated by code execution.  If SI_USER is set, the signal was received due to a call to kill or tgkill, and is therefore not synchronous.",
      "parentUuid": "305cba63_c8f317e9",
      "revId": "e43772c1ecdfcc2098cfcb18ca19c9da94efd699",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9070061a_0e726c0b",
        "filename": "src/runtime/signal_linux.go",
        "patchSetId": 9
      },
      "lineNbr": 101,
      "author": {
        "id": 5030
      },
      "writtenOn": "2015-04-24T01:08:46Z",
      "side": 1,
      "message": "tkill is actually why I was asking. It appears that it and tgkill set SI_TKILL, not SI_USER.\n\nThe sigaction(2) documentation also mentions SI_KERNEL, which appears to be set by the linux kernel for some SIGSEGV cases.",
      "parentUuid": "309d9a70_b92a7130",
      "revId": "e43772c1ecdfcc2098cfcb18ca19c9da94efd699",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9070061a_015f9dc1",
        "filename": "src/runtime/signal_linux.go",
        "patchSetId": 9
      },
      "lineNbr": 101,
      "author": {
        "id": 5206
      },
      "writtenOn": "2015-04-24T05:17:31Z",
      "side": 1,
      "message": "Ah, how annoying.  Let\u0027s clean up the various uses of SI_USER separately.  Looks like we\u0027ll need an OS-specific check of the sigcode field.",
      "parentUuid": "9070061a_0e726c0b",
      "revId": "e43772c1ecdfcc2098cfcb18ca19c9da94efd699",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}