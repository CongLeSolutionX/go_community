{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "96790ad2_7bec8b64",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-10-04T21:34:24Z",
      "side": 1,
      "message": "Lots of linux-386 builders went red on this CL — linux-386-longtest in the main repo, and apparently all of the linux-386-* builders for x/text and x/tools.\n\n\nThe errors look like:\n\n/workdir/go/src/runtime/os_linux.go:451:32: cannot use ([unsafe.Sizeof((siginfo literal))]struct{} literal) (value of type [120]struct{}) as [128]struct{} value in variable declaration",
      "revId": "f0db7eae74ea235e9fbc2598252bfd46c1cc5510",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "82d92a6d_091ce377",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 12120
      },
      "writtenOn": "2021-10-04T21:46:32Z",
      "side": 1,
      "message": "I\u0027ve sent a revert: https://go-review.googlesource.com/c/go/+/353432\n\nLooks like this is the same issue cmd/api had in http://golang.org/cl/353331, but in various other uses of go/types.",
      "parentUuid": "96790ad2_7bec8b64",
      "revId": "f0db7eae74ea235e9fbc2598252bfd46c1cc5510",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bd61e882_68002772",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 9210
      },
      "writtenOn": "2021-10-04T22:31:29Z",
      "side": 1,
      "message": "Thank you both. Michael, do you plan to make a similar change to the go/types test as you did for cmd/api, or does this signal a need for a different approach to the padding and assertions? For example, I\u0027d sketched an alternative that embeds each current struct in a new type that resizes itself, which might eliminate the need for a separate assertion -- but I didn\u0027t go that way because it required code changes when constructing sigevent values.\n\nAnd, are there different habits I should use when running the trybots against changes like this? And again, thank you.",
      "revId": "f0db7eae74ea235e9fbc2598252bfd46c1cc5510",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "866ac5a0_090a16f2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 12120
      },
      "writtenOn": "2021-10-05T17:25:14Z",
      "side": 1,
      "message": "Unfortunately I think there may be too many cases to easily fix them all promptly. Some aren\u0027t even tests. e.g., the gorename tool can\u0027t handle this. Tools like that likely need discussion to decide on the correct behavior. (Should gorename use the SizesOf the GOARCH env variable? Probably, but maybe there are other thoughts.)\n\nFor now, I suppose you should go back to the old form, or perhaps just put this in a normal test case rather than a compile-time assertion.\n\n\u003e And, are there different habits I should use when running the trybots against changes like this? And again, thank you.\n\nYou can use TRY\u003d\u003cbuilder\u003e to force certain tests to run, but I think what you did was fine. I had no reason to believe this simple assertion would break so many things.",
      "parentUuid": "bd61e882_68002772",
      "revId": "f0db7eae74ea235e9fbc2598252bfd46c1cc5510",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "33fb05b6_b208c0ef",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-10-05T18:00:12Z",
      "side": 1,
      "message": "One option might be to move the compile-time assertion from the package proper to its test. That would at least avoid breaking tools that attempt to parse and type-check the `runtime` package using the wrong definitions.\n\nThat said, I\u0027m not sure that there really are that many cases that break. IIRC the x/text test that started failing uses x/tools/go/loader, and probably so do the various broken things in x/tools — so you might be able to get everything working by updating one or two packages in x/tools and then bumping a dependency in x/text.",
      "parentUuid": "866ac5a0_090a16f2",
      "revId": "f0db7eae74ea235e9fbc2598252bfd46c1cc5510",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}