{
  "comments": [
    {
      "key": {
        "uuid": "9600812f_8c6e8368",
        "filename": "src/cmd/compile/internal/gc/const.go",
        "patchSetId": 2
      },
      "lineNbr": 594,
      "author": {
        "id": 5210
      },
      "writtenOn": "2018-10-09T19:20:26Z",
      "side": 1,
      "message": "maybe op :\u003d n.Op; op and then use op instead of n.Op below? (might save a few more chars :-)",
      "range": {
        "startLine": 594,
        "startChar": 10,
        "endLine": 594,
        "endChar": 12
      },
      "revId": "e01e8350cd01f40ecdba6492c5088194e8ff1c5f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fad1f1a9_28e1f9b5",
        "filename": "src/cmd/compile/internal/gc/const.go",
        "patchSetId": 2
      },
      "lineNbr": 596,
      "author": {
        "id": 5210
      },
      "writtenOn": "2018-10-09T19:20:26Z",
      "side": 1,
      "message": "maybe introduce\n\nfunc (n *Node) isLit() bool { return n.Op \u003d\u003d OLITERAL }\n\n(or isLiteral) and apply everywhere in compiler? (another CL)",
      "range": {
        "startLine": 596,
        "startChar": 14,
        "endLine": 596,
        "endChar": 22
      },
      "revId": "e01e8350cd01f40ecdba6492c5088194e8ff1c5f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eea49808_32ee4e44",
        "filename": "src/cmd/compile/internal/gc/const.go",
        "patchSetId": 2
      },
      "lineNbr": 611,
      "author": {
        "id": 5210
      },
      "writtenOn": "2018-10-09T19:20:26Z",
      "side": 1,
      "message": "It would be useful to add an example expression to this comment; this is non-obvious for a casual reader (why can constants be interfaces, or why is nil a constant?).",
      "range": {
        "startLine": 611,
        "startChar": 33,
        "endLine": 611,
        "endChar": 40
      },
      "revId": "e01e8350cd01f40ecdba6492c5088194e8ff1c5f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fcea3469_308644dd",
        "filename": "src/cmd/compile/internal/gc/const.go",
        "patchSetId": 2
      },
      "lineNbr": 632,
      "author": {
        "id": 5210
      },
      "writtenOn": "2018-10-09T19:20:26Z",
      "side": 1,
      "message": "Since this result is \"\", why not just set it to that instead of calling tostr? And then get rid of the special nil handling in tostr which is weird (and seems to be only used for this).",
      "range": {
        "startLine": 632,
        "startChar": 23,
        "endLine": 632,
        "endChar": 24
      },
      "revId": "e01e8350cd01f40ecdba6492c5088194e8ff1c5f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0fe1c830_e303a32d",
        "filename": "src/cmd/compile/internal/gc/const.go",
        "patchSetId": 2
      },
      "lineNbr": 682,
      "author": {
        "id": 5210
      },
      "writtenOn": "2018-10-09T19:20:26Z",
      "side": 1,
      "message": "leave away? or add comment\n\n// for symmetry with other cases only\n\n?",
      "range": {
        "startLine": 682,
        "startChar": 29,
        "endLine": 682,
        "endChar": 30
      },
      "revId": "e01e8350cd01f40ecdba6492c5088194e8ff1c5f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "674ebba8_fe77a57c",
        "filename": "src/cmd/compile/internal/gc/const.go",
        "patchSetId": 2
      },
      "lineNbr": 736,
      "author": {
        "id": 5210
      },
      "writtenOn": "2018-10-09T19:20:26Z",
      "side": 1,
      "message": "s/\"impossible\"/\"unreachable\"/\n\nmatching existing convention; also after Fatalf we can\u0027t reach here; apply everywhere",
      "range": {
        "startLine": 736,
        "startChar": 8,
        "endLine": 736,
        "endChar": 18
      },
      "revId": "e01e8350cd01f40ecdba6492c5088194e8ff1c5f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    }
  ]
}