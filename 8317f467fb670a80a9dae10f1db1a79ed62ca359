{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "9932a8ea_2f56f813",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 31
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-05-16T17:13:39Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003d8317f467",
      "tag": "autogenerated:trybots~beginning",
      "revId": "8317f467fb670a80a9dae10f1db1a79ed62ca359",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f11cb54a_9d87e097",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 31
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-05-16T17:27:09Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "9932a8ea_2f56f813",
      "tag": "autogenerated:trybots~happy",
      "revId": "8317f467fb670a80a9dae10f1db1a79ed62ca359",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9f761437_5e817c82",
        "filename": "src/cmd/go/internal/modindex/index_format.txt",
        "patchSetId": 31
      },
      "lineNbr": 15,
      "author": {
        "id": 6365
      },
      "writtenOn": "2022-05-16T21:42:54Z",
      "side": 1,
      "message": "There is enough nesting in this format that I think we should consider stamping offsets into the files.\n\nIf we end up adding more fields to any level of nesting in a subsequent version of the `go` command, then without offset-stamps we would need to define a separate `go index` version (and probably a separate filename) for each change, which probably means one per Go version.\n\nOTOH, if we stamp the offsets, then newer versions of the `go` command may have to regenerate the files (which is probably fine?), but then older versions can use the expanded files directly (by ignoring the additional fields).",
      "revId": "8317f467fb670a80a9dae10f1db1a79ed62ca359",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d41d5ac0_7b2a831f",
        "filename": "src/cmd/go/internal/modindex/scan.go",
        "patchSetId": 31
      },
      "lineNbr": 41,
      "author": {
        "id": 6365
      },
      "writtenOn": "2022-05-16T21:42:54Z",
      "side": 1,
      "message": "Since this kind of accessor-method interface is unusual in Go, more detail in this comment would be helpful.\n\nFrom the implementation of this interface in CL 403975, I gather that its purpose is to avoid faulting in mmap\u0027d pages for files that aren\u0027t used, or perhaps to allow them to be faulted in parallel (resulting in parallel disk reads)? But I\u0027m not sure how many faults this actually saves â€” the `string` fields are just headers giving the memory offsets and lengths. I guess the `imports` and `embeds` methods may be more significant?",
      "revId": "8317f467fb670a80a9dae10f1db1a79ed62ca359",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}