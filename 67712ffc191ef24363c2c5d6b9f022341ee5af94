{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "ede462c6_a40c3626",
        "filename": "src/runtime/pprof/proto_test.go",
        "patchSetId": 1
      },
      "lineNbr": 104,
      "author": {
        "id": 12120
      },
      "writtenOn": "2022-10-19T14:00:59Z",
      "side": 1,
      "message": "Could you explain the change here in a bit more detail? It is not clear to me how this is any different from what was there before. Aren\u0027t both cases returning the start address of an executable mapping?",
      "range": {
        "startLine": 100,
        "startChar": 0,
        "endLine": 104,
        "endChar": 41
      },
      "revId": "67712ffc191ef24363c2c5d6b9f022341ee5af94",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "48f1419d_e44ba26a",
        "filename": "src/runtime/pprof/proto_test.go",
        "patchSetId": 1
      },
      "lineNbr": 104,
      "author": {
        "id": 5470
      },
      "writtenOn": "2022-10-19T16:51:41Z",
      "side": 1,
      "message": "Absolutely!\n\nSo essentially the test original just grabbed the first address in the first mapping, however there is no guarantee in the current implementation that the address chosen is actually in an executable section.\n\nIf you take a look at the following (truncated) mapping from running this test with our downstream modifications you can see the first mapping is not executable:\n\n```\n00400000-00405000 r--p 00000000 fd:01 2883702                            /tmp/go-build1780295367/b001/pprof.test       \n00405000-00574000 r-xp 00005000 fd:01 2883702                            /tmp/go-build1780295367/b001/pprof.test       \n00574000-006d0000 r--p 00174000 fd:01 2883702                            /tmp/go-build1780295367/b001/pprof.test       \n006d1000-006d2000 r--p 002d0000 fd:01 2883702                            /tmp/go-build1780295367/b001/pprof.test       \n006d2000-006f2000 rw-p 002d1000 fd:01 2883702                            /tmp/go-build1780295367/b001/pprof.test       \n006f2000-00729000 rw-p 00000000 00:00 0                                                                                \n01d7c000-01d9d000 rw-p 00000000 00:00 0                                  [heap]\n```\n\nThe executable part of that mapping starts at address 0x405000, however in the tests the address 0x400000 would be chosen, incorrectly. This patch ensures that we always end up with an address contained within an executable mapping.\n\nI hope that clears things up, I\u0027m happy to elaborate further if need be.",
      "parentUuid": "ede462c6_a40c3626",
      "range": {
        "startLine": 100,
        "startChar": 0,
        "endLine": 104,
        "endChar": 41
      },
      "revId": "67712ffc191ef24363c2c5d6b9f022341ee5af94",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aaa9a820_8e03e73e",
        "filename": "src/runtime/pprof/proto_test.go",
        "patchSetId": 1
      },
      "lineNbr": 104,
      "author": {
        "id": 12120
      },
      "writtenOn": "2022-10-19T19:03:42Z",
      "side": 1,
      "message": "Thanks.\n\nIIUC ParseMemoryMap -\u003e parseMappingEntry [1] skips non-executable mappings, except in the `briefMapsRe` fallback case. Is this a bug in parseMappingEntry that it isn\u0027t matching your lines properly?\n\n[1] https://cs.opensource.google/go/go/+/master:src/internal/profile/legacy_profile.go;l\u003d1080-1084;drc\u003d1f068f0dc7bc997446a7aac44cfc70746ad918e0;bpv\u003d1;bpt\u003d1",
      "parentUuid": "48f1419d_e44ba26a",
      "range": {
        "startLine": 100,
        "startChar": 0,
        "endLine": 104,
        "endChar": 41
      },
      "revId": "67712ffc191ef24363c2c5d6b9f022341ee5af94",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5dcc817c_4df9e6d3",
        "filename": "src/runtime/pprof/proto_test.go",
        "patchSetId": 1
      },
      "lineNbr": 104,
      "author": {
        "id": 5470
      },
      "writtenOn": "2022-10-19T19:17:04Z",
      "side": 1,
      "message": "It\u0027s possible that the cause of my issue is due to https://cs.opensource.google/go/go/+/release-branch.go1.19:src/runtime/pprof/proto.go;l\u003d741. Perhaps that has already been fixed on master?",
      "parentUuid": "aaa9a820_8e03e73e",
      "range": {
        "startLine": 100,
        "startChar": 0,
        "endLine": 104,
        "endChar": 41
      },
      "revId": "67712ffc191ef24363c2c5d6b9f022341ee5af94",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1cfa41a7_0ce8017b",
        "filename": "src/runtime/pprof/proto_test.go",
        "patchSetId": 1
      },
      "lineNbr": 104,
      "author": {
        "id": 5470
      },
      "writtenOn": "2022-10-19T19:42:49Z",
      "side": 1,
      "message": "I\u0027m also realizing that this patch targets the code as it was laid out in the 1.19 tree, it seems to have been moved / refactored since then. This might end up being a patch we carry downstream for the 1.19 tree, if the underlying cause has in fact been fixed by 1.20+. \n\nIf not I\u0027m happy to hack on changes for the current tree.",
      "parentUuid": "5dcc817c_4df9e6d3",
      "range": {
        "startLine": 100,
        "startChar": 0,
        "endLine": 104,
        "endChar": 41
      },
      "revId": "67712ffc191ef24363c2c5d6b9f022341ee5af94",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ae633d18_b843f04d",
        "filename": "src/runtime/pprof/proto_test.go",
        "patchSetId": 1
      },
      "lineNbr": 104,
      "author": {
        "id": 12120
      },
      "writtenOn": "2022-10-19T19:45:07Z",
      "side": 1,
      "message": "Ah, yes. I think your problem is fixed by CL 424295.",
      "parentUuid": "1cfa41a7_0ce8017b",
      "range": {
        "startLine": 100,
        "startChar": 0,
        "endLine": 104,
        "endChar": 41
      },
      "revId": "67712ffc191ef24363c2c5d6b9f022341ee5af94",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}