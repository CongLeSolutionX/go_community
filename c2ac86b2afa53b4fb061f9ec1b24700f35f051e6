{
  "comments": [
    {
      "key": {
        "uuid": "f16ba6aa_7f6ce43c",
        "filename": "src/go/doc/doc.go",
        "patchSetId": 2
      },
      "lineNbr": 136,
      "author": {
        "id": 5210
      },
      "writtenOn": "2019-11-06T23:49:29Z",
      "side": 1,
      "message": "This doc string doesn\u0027t seem to explain the examples argument. Where is it coming from? From reading the issue comment and CL desc I would have assumed this to be a list of additional packages or files (the test files in a test package). What am I missing?",
      "range": {
        "startLine": 136,
        "startChar": 13,
        "endLine": 136,
        "endChar": 20
      },
      "revId": "c2ac86b2afa53b4fb061f9ec1b24700f35f051e6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f6432469_460595a4",
        "filename": "src/go/doc/doc.go",
        "patchSetId": 2
      },
      "lineNbr": 136,
      "author": {
        "id": 6005
      },
      "writtenOn": "2019-11-07T00:45:16Z",
      "side": 1,
      "message": "It should be helpful to look at the example for this function, ExampleNewWithExamples. See line 496 in file example_test.go:\n\n\tp :\u003d doc.NewWithExamples(apkg, \"example.com/p\", 0, doc.Examples(testGoFiles...))\n\nHowever, I think the doc string should be improved to make this more clear. I\u0027ll work on that.\n\nIt is viable to change the signature to accept a list of test files or *ast.Package (or 2 *ast.Packages), but I thought accepting a slice of *Example was a better choice of API. It allows callers to first get a list of examples by using doc.Examples(testFiles), then pass that list to NewWithExamples:\n\n\tallExamples :\u003d doc.Examples(testGoFiles...)\n\tp :\u003d doc.NewWithExamples(apkg, \"example.com/p\", examples)\n        // use allExamples ...\n\nThat way, they\u0027ll have a flat list of all examples with their Suffix field populated. What do you think?",
      "parentUuid": "f16ba6aa_7f6ce43c",
      "range": {
        "startLine": 136,
        "startChar": 13,
        "endLine": 136,
        "endChar": 20
      },
      "revId": "c2ac86b2afa53b4fb061f9ec1b24700f35f051e6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eac53460_08fbcbcd",
        "filename": "src/go/doc/doc.go",
        "patchSetId": 2
      },
      "lineNbr": 136,
      "author": {
        "id": 6005
      },
      "writtenOn": "2019-11-07T01:08:05Z",
      "side": 1,
      "message": "I\u0027ve tried to improve the doc string to clarify the examples argument, PTAL.\n\nI considered also including a sentence like:\n\n    // [...] Examples can be extracted from the test source files of\n    // the package using function Examples.\n    //\n    // [...]\n\nBut decided to leave it out for now, because it\u0027s 1) inconsistent in that we don\u0027t explain how to get package AST, and 2) confusing because the function is called \"Examples\" rather than something more unique, like \"ExtractExamples\". If you have other suggestions, please let me know.",
      "parentUuid": "f6432469_460595a4",
      "range": {
        "startLine": 136,
        "startChar": 13,
        "endLine": 136,
        "endChar": 20
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "c2ac86b2afa53b4fb061f9ec1b24700f35f051e6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f08a7b87_18a918c2",
        "filename": "src/go/doc/example_test.go",
        "patchSetId": 2
      },
      "lineNbr": 553,
      "author": {
        "id": 6480
      },
      "writtenOn": "2019-11-05T01:59:40Z",
      "side": 1,
      "message": "These are good reasons to relax the requirement for \"start with a lower-case letter\". The first because it knocks out non-lowercasing languages. A change to \"not start with an upper-case letter\" would allow both of these and still differentiate between methods (which will always be exported to be worth documenting) and the user-directed tags that the suffix is intended to be.",
      "range": {
        "startLine": 552,
        "startChar": 0,
        "endLine": 553,
        "endChar": 87
      },
      "revId": "c2ac86b2afa53b4fb061f9ec1b24700f35f051e6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4b6c147a_90831f10",
        "filename": "src/go/doc/example_test.go",
        "patchSetId": 2
      },
      "lineNbr": 553,
      "author": {
        "id": 6005
      },
      "writtenOn": "2019-11-05T03:27:44Z",
      "side": 1,
      "message": "I agree. I plan to open an issue about it and follow up. However, it will require thinking through the consequences and ensuring there aren\u0027t any unexpected edge cases. It\u0027ll need to apply to vet as well as go/doc.\n\nSo, it\u0027s out of scope for this CL; the goal here is to to implement the currently documented format as the first step.",
      "parentUuid": "f08a7b87_18a918c2",
      "range": {
        "startLine": 552,
        "startChar": 0,
        "endLine": 553,
        "endChar": 87
      },
      "revId": "c2ac86b2afa53b4fb061f9ec1b24700f35f051e6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e2bc443f_c94c0169",
        "filename": "src/go/doc/example_test.go",
        "patchSetId": 2
      },
      "lineNbr": 553,
      "author": {
        "id": 6480
      },
      "writtenOn": "2019-11-05T04:05:49Z",
      "side": 1,
      "message": "No worries.\n\nI recall Rob at one point talking about doing the same kind of rule change in a Go2 manner for the label exportation rule: https://github.com/golang/go/issues/5763#issuecomment-66081539 and below. Should I link that to the GH issue for this?",
      "parentUuid": "4b6c147a_90831f10",
      "range": {
        "startLine": 552,
        "startChar": 0,
        "endLine": 553,
        "endChar": 87
      },
      "revId": "c2ac86b2afa53b4fb061f9ec1b24700f35f051e6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    }
  ]
}