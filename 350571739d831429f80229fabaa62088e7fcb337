{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "dd2aa12c_49e03692",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 62423
      },
      "writtenOn": "2024-01-12T08:28:36Z",
      "side": 1,
      "message": "No problem at all. Thanks for pointing it out :-p",
      "revId": "350571739d831429f80229fabaa62088e7fcb337",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "26ce9d32_c3d4bc4b",
        "filename": "src/runtime/mem_linux.go",
        "patchSetId": 2
      },
      "lineNbr": 153,
      "author": {
        "id": 12120
      },
      "writtenOn": "2024-01-11T19:26:00Z",
      "side": 1,
      "message": "I think that madvise should come after mprotect.\n\nCurrently there is a small race window after madvise where a racing write to this page could fault it back in and write something to the page.\n\nsysFault is only used in the arena implementation. When the arena implementation reuses the page it uses sysMap (https://cs.opensource.google/go/go/+/master:src/runtime/arena.go;l\u003d870;drc\u003de9b3ff15f40d6b258217b3467c662f816b078477;bpv\u003d0;bpt\u003d1), which will create a new mapping over the old mapping.\n\nThus such a race wouldn\u0027t cause a visible change beyond an extra wasted page of memory. But it is easy to imagine the sysMap code changing to mprotect the page back to writable rather than replacing the mapping. In the case, the new page may not be zero.\n\nWe can avoid that potential bug by doing the mprotect first so that the page is never writable after MADV_DONTNEED.",
      "revId": "350571739d831429f80229fabaa62088e7fcb337",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2e93da7c_9da20b6b",
        "filename": "src/runtime/mem_linux.go",
        "patchSetId": 2
      },
      "lineNbr": 153,
      "author": {
        "id": 62423
      },
      "writtenOn": "2024-01-12T08:27:15Z",
      "side": 1,
      "message": "Thanks! I got it.",
      "parentUuid": "26ce9d32_c3d4bc4b",
      "revId": "350571739d831429f80229fabaa62088e7fcb337",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6dfa9202_a413c1de",
        "filename": "src/runtime/stubs_linux.go",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 12120
      },
      "writtenOn": "2024-01-11T19:26:00Z",
      "side": 1,
      "message": "Apologies for not mentioning this earlier, but could you implement this in https://cs.opensource.google/go/go/+/master:src/runtime/internal/syscall/syscall_linux.go? We\u0027re (very slowly) migrating to that package which avoids the need for custom assembly for every syscall.",
      "revId": "350571739d831429f80229fabaa62088e7fcb337",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3606f5e9_8280baae",
        "filename": "src/runtime/stubs_linux.go",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 62423
      },
      "writtenOn": "2024-01-12T08:29:25Z",
      "side": 1,
      "message": "No problem at all. Thanks for pointing it out :-p",
      "parentUuid": "6dfa9202_a413c1de",
      "revId": "350571739d831429f80229fabaa62088e7fcb337",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}