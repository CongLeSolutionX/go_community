{
  "comments": [
    {
      "key": {
        "uuid": "29feac92_1bc167b2",
        "filename": "src/strconv/atoc_test.go",
        "patchSetId": 45
      },
      "lineNbr": 1,
      "author": {
        "id": 5210
      },
      "writtenOn": "2020-05-08T05:45:22Z",
      "side": 1,
      "message": "I\u0027ve cleaned up the test suite and made it more regular. If you could take this code below, replace your file with it and update/sync your repo, we can submit under your name.\n\n// Copyright 2020 The Go Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\n\npackage strconv_test\n\nimport (\n\t\"math\"\n\t\"math/cmplx\"\n\t\"reflect\"\n\t. \"strconv\"\n\t\"testing\"\n)\n\nvar (\n\tinfp0 \u003d complex(math.Inf(+1), 0)\n\tinfm0 \u003d complex(math.Inf(-1), 0)\n\tinf0p \u003d complex(0, math.Inf(+1))\n\tinf0m \u003d complex(0, math.Inf(-1))\n\n\tinfpp \u003d complex(math.Inf(+1), math.Inf(+1))\n\tinfpm \u003d complex(math.Inf(+1), math.Inf(-1))\n\tinfmp \u003d complex(math.Inf(-1), math.Inf(+1))\n\tinfmm \u003d complex(math.Inf(-1), math.Inf(-1))\n)\n\ntype atocTest struct {\n\tin  string\n\tout complex128\n\terr error\n}\n\nfunc TestParseComplex(t *testing.T) {\n\ttests :\u003d []atocTest{\n\t\t// Clearly invalid\n\t\t{\"\", 0, ErrSyntax},\n\t\t{\" \", 0, ErrSyntax},\n\t\t{\"(\", 0, ErrSyntax},\n\t\t{\")\", 0, ErrSyntax},\n\t\t{\"i\", 0, ErrSyntax},\n\t\t{\"+i\", 0, ErrSyntax},\n\t\t{\"-i\", 0, ErrSyntax},\n\t\t{\"1I\", 0, ErrSyntax},\n\t\t{\"10  + 5i\", 0, ErrSyntax},\n\t\t{\"3+\", 0, ErrSyntax},\n\t\t{\"3+5\", 0, ErrSyntax},\n\t\t{\"3+5+5i\", 0, ErrSyntax},\n\n\t\t// Parentheses\n\t\t{\"()\", 0, ErrSyntax},\n\t\t{\"(i)\", 0, ErrSyntax},\n\t\t{\"(0)\", 0, nil},\n\t\t{\"(1i)\", 1i, nil},\n\t\t{\"(3.0+5.5i)\", 3.0 + 5.5i, nil},\n\t\t{\"(1)+1i\", 0, ErrSyntax},\n\t\t{\"(3.0+5.5i\", 0, ErrSyntax},\n\t\t{\"3.0+5.5i)\", 0, ErrSyntax},\n\n\t\t// NaNs\n\t\t{\"NaN\", complex(math.NaN(), 0), nil},\n\t\t{\"NANi\", complex(0, math.NaN()), nil},\n\t\t{\"nan+nAni\", complex(math.NaN(), math.NaN()), nil},\n\t\t{\"+NaN\", 0, ErrSyntax},\n\t\t{\"-NaN\", 0, ErrSyntax},\n\t\t{\"NaN-NaNi\", 0, ErrSyntax},\n\n\t\t// Infs\n\t\t{\"Inf\", infp0, nil},\n\t\t{\"+inf\", infp0, nil},\n\t\t{\"-inf\", infm0, nil},\n\t\t{\"Infinity\", infp0, nil},\n\t\t{\"+INFINITY\", infp0, nil},\n\t\t{\"-infinity\", infm0, nil},\n\t\t{\"+infi\", inf0p, nil},\n\t\t{\"0-infinityi\", inf0m, nil},\n\t\t{\"Inf+Infi\", infpp, nil},\n\t\t{\"+Inf-Infi\", infpm, nil},\n\t\t{\"-Infinity+Infi\", infmp, nil},\n\t\t{\"inf-inf\", 0, ErrSyntax},\n\n\t\t// Zeros\n\t\t{\"0\", 0, nil},\n\t\t{\"0i\", 0, nil},\n\t\t{\"-0.0i\", 0, nil},\n\t\t{\"0+0.0i\", 0, nil},\n\t\t{\"0e+0i\", 0, nil},\n\t\t{\"0e-0+0i\", 0, nil},\n\t\t{\"-0.0-0.0i\", 0, nil},\n\t\t{\"0e+012345\", 0, nil},\n\t\t{\"0x0p+012345i\", 0, nil},\n\t\t{\"0x0.00p-012345i\", 0, nil},\n\t\t{\"+0e-0+0e-0i\", 0, nil},\n\t\t{\"0e+0+0e+0i\", 0, nil},\n\t\t{\"-0e+0-0e+0i\", 0, nil},\n\n\t\t// Regular non-zeroes\n\t\t{\"0.1\", 0.1, nil},\n\t\t{\"0.1i\", 0 + 0.1i, nil},\n\t\t{\"0.123\", 0.123, nil},\n\t\t{\"0.123i\", 0 + 0.123i, nil},\n\t\t{\"0.123+0.123i\", 0.123 + 0.123i, nil},\n\t\t{\"99\", 99, nil},\n\t\t{\"+99\", 99, nil},\n\t\t{\"-99\", -99, nil},\n\t\t{\"+1i\", 1i, nil},\n\t\t{\"-1i\", -1i, nil},\n\t\t{\"+3+1i\", 3 + 1i, nil},\n\t\t{\"30+3i\", 30 + 3i, nil},\n\t\t{\"+3e+3-3e+3i\", 3e+3 - 3e+3i, nil},\n\t\t{\"+3e+3+3e+3i\", 3e+3 + 3e+3i, nil},\n\t\t{\"+3e+3+3e+3i+\", 0, ErrSyntax},\n\n\t\t// Separators\n\t\t{\"0.1\", 0.1, nil},\n\t\t{\"0.1i\", 0 + 0.1i, nil},\n\t\t{\"0.1_2_3\", 0.123, nil},\n\t\t{\"+0x_3p3i\", 0x3p3i, nil},\n\t\t{\"0x_10.3p-8+0x3p3i\", 0x10.3p-8 + 0x3p3i, nil},\n\t\t{\"+0x_1_0.3p-8+0x3p3i\", 0x10.3p-8 + 0x3p3i, nil},\n\t\t{\"0x10.3p+8-0x_3p3i\", 0x10.3p+8 - 0x3p3i, nil},\n\n\t\t// Hexadecimals\n\t\t{\"0x10.3p-8+0x3p3i\", 0x10.3p-8 + 0x3p3i, nil},\n\t\t{\"+0x10.3p-8+0x3p3i\", 0x10.3p-8 + 0x3p3i, nil},\n\t\t{\"0x10.3p+8-0x3p3i\", 0x10.3p+8 - 0x3p3i, nil},\n\t\t{\"0x1p0\", 1, nil},\n\t\t{\"0x1p1\", 2, nil},\n\t\t{\"0x1p-1\", 0.5, nil},\n\t\t{\"0x1ep-1\", 15, nil},\n\t\t{\"-0x1ep-1\", -15, nil},\n\t\t{\"-0x2p3\", -16, nil},\n\t\t{\"0x1e2\", 0, ErrSyntax},\n\t\t{\"1p2\", 0, ErrSyntax},\n\t\t{\"0x1e2i\", 0, ErrSyntax},\n\n\t\t// ErrRange\n\n\t\t// next float64 - too large\n\t\t{\"+0x1p1024\", infp0, ErrRange},\n\t\t{\"-0x1p1024\", infm0, ErrRange},\n\t\t{\"+0x1p1024i\", inf0p, ErrRange},\n\t\t{\"-0x1p1024i\", inf0m, ErrRange},\n\t\t{\"+0x1p1024+0x1p1024i\", infpp, ErrRange},\n\t\t{\"+0x1p1024-0x1p1024i\", infpm, ErrRange},\n\t\t{\"-0x1p1024+0x1p1024i\", infmp, ErrRange},\n\t\t{\"-0x1p1024-0x1p1024i\", infmm, ErrRange},\n\n\t\t// the border is ...158079\n\t\t// borderline - okay\n\t\t{\"+0x1.fffffffffffff7fffp1023+0x1.fffffffffffff7fffp1023i\", 1.7976931348623157e+308 + 1.7976931348623157e+308i, nil},\n\t\t{\"+0x1.fffffffffffff7fffp1023-0x1.fffffffffffff7fffp1023i\", 1.7976931348623157e+308 - 1.7976931348623157e+308i, nil},\n\t\t{\"-0x1.fffffffffffff7fffp1023+0x1.fffffffffffff7fffp1023i\", -1.7976931348623157e+308 + 1.7976931348623157e+308i, nil},\n\t\t{\"-0x1.fffffffffffff7fffp1023-0x1.fffffffffffff7fffp1023i\", -1.7976931348623157e+308 - 1.7976931348623157e+308i, nil},\n\n\t\t// borderline - too large\n\t\t{\"+0x1.fffffffffffff8p1023\", infp0, ErrRange},\n\t\t{\"-0x1fffffffffffff.8p+971\", infm0, ErrRange},\n\t\t{\"+0x1.fffffffffffff8p1023i\", inf0p, ErrRange},\n\t\t{\"-0x1fffffffffffff.8p+971i\", inf0m, ErrRange},\n\t\t{\"+0x1.fffffffffffff8p1023+0x1.fffffffffffff8p1023i\", infpp, ErrRange},\n\t\t{\"+0x1.fffffffffffff8p1023-0x1.fffffffffffff8p1023i\", infpm, ErrRange},\n\t\t{\"-0x1fffffffffffff.8p+971+0x1fffffffffffff.8p+971i\", infmp, ErrRange},\n\t\t{\"-0x1fffffffffffff8p+967-0x1fffffffffffff8p+967i\", infmm, ErrRange},\n\n\t\t// a little too large\n\t\t{\"1e308+1e308i\", 1e+308 + 1e+308i, nil},\n\t\t{\"2e308+2e308i\", infpp, ErrRange},\n\t\t{\"1e309+1e309i\", infpp, ErrRange},\n\t\t{\"0x1p1025+0x1p1025i\", infpp, ErrRange},\n\t\t{\"2e308\", infp0, ErrRange},\n\t\t{\"1e309\", infp0, ErrRange},\n\t\t{\"0x1p1025\", infp0, ErrRange},\n\t\t{\"2e308i\", inf0p, ErrRange},\n\t\t{\"1e309i\", inf0p, ErrRange},\n\t\t{\"0x1p1025i\", inf0p, ErrRange},\n\n\t\t// way too large\n\t\t{\"+1e310+1e310i\", infpp, ErrRange},\n\t\t{\"+1e310-1e310i\", infpm, ErrRange},\n\t\t{\"-1e310+1e310i\", infmp, ErrRange},\n\t\t{\"-1e310-1e310i\", infmm, ErrRange},\n\n\t\t// under/overflow exponent\n\t\t{\"1e-4294967296\", 0, nil},\n\t\t{\"1e-4294967296i\", 0, nil},\n\t\t{\"1e-4294967296+1i\", 1i, nil},\n\t\t{\"1+1e-4294967296i\", 1, nil},\n\t\t{\"1e-4294967296+1e-4294967296i\", 0, nil},\n\n\t\t{\"1e+4294967296\", infp0, ErrRange},\n\t\t{\"1e+4294967296i\", inf0p, ErrRange},\n\t\t{\"1e+4294967296+1e+4294967296i\", infpp, ErrRange},\n\t\t{\"1e+4294967296-1e+4294967296i\", infpm, ErrRange},\n\t}\n\n\tfor _, tt :\u003d range tests {\n\t\ttt :\u003d tt // for capture in Run closures below\n\t\tif tt.err !\u003d nil {\n\t\t\ttt.err \u003d \u0026NumError{Func: \"ParseComplex\", Num: tt.in, Err: tt.err}\n\t\t}\n\n\t\tt.Run(tt.in, func(t *testing.T) {\n\t\t\tgot, err :\u003d ParseComplex(tt.in, 128)\n\t\t\tif !reflect.DeepEqual(err, tt.err) {\n\t\t\t\tt.Fatalf(\"ParseComplex(%q, 128) \u003d %v, %v want %v, %v\", tt.in, got, err, tt.out, tt.err)\n\t\t\t}\n\n\t\t\tif !(cmplx.IsNaN(tt.out) \u0026\u0026 cmplx.IsNaN(got)) \u0026\u0026 got !\u003d tt.out {\n\t\t\t\tt.Fatalf(\"ParseComplex(%q, 128) \u003d %v, %v want %v, %v\", tt.in, got, err, tt.out, tt.err)\n\t\t\t}\n\t\t})\n\t}\n}",
      "revId": "ade7ab0d272944b9827cb2ff5cf00648891d58d5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    }
  ]
}