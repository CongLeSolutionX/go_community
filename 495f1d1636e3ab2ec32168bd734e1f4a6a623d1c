{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "913c34dd_2199dc3a",
        "filename": "src/net/http/transport.go",
        "patchSetId": 6
      },
      "lineNbr": 2067,
      "author": {
        "id": 5305
      },
      "writtenOn": "2024-01-29T22:27:20Z",
      "side": 1,
      "message": "Why skip waiting when the request is canceled?\n\nDoesn\u0027t this mean that there\u0027s still a race condition if a request times out?",
      "revId": "495f1d1636e3ab2ec32168bd734e1f4a6a623d1c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "191dfd32_2b26f555",
        "filename": "src/net/http/transport.go",
        "patchSetId": 6
      },
      "lineNbr": 2067,
      "author": {
        "id": 34725
      },
      "writtenOn": "2024-01-30T03:00:37Z",
      "side": 1,
      "message": "Ideally, we want all ***unsuccessful*** roundtrips to wait for `readLoop` and `writeLoop` to exit before returning to callers. However, if the caller has canceled the request voluntarily, they may expect `RoundTrip` to return immediately, for instance, [TestTransportDecrementConnWhenIdleConnRemoved](https://go.googlesource.com/go/+/refs/heads/master/src/net/http/transport_test.go#6505). In that case, it could get stuck infinitely if we don\u0027t return from `RoundTrip` right away.",
      "parentUuid": "913c34dd_2199dc3a",
      "revId": "495f1d1636e3ab2ec32168bd734e1f4a6a623d1c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6d51d8a7_ed021796",
        "filename": "src/net/http/transport.go",
        "patchSetId": 6
      },
      "lineNbr": 2067,
      "author": {
        "id": 5305
      },
      "writtenOn": "2024-01-30T23:36:16Z",
      "side": 1,
      "message": "Is the distinction between canceled and unsuccessful all that clear?\n\nFor example, in the ReverseProxy case, the outbound request is made with the inbound request\u0027s Context. If the inbound request is canceled (if the requester drops its connection, for example), the outbound request is \"canceled\" by the context becoming done. Is ReverseProxy expected to recognize that the Got1xxResponse trace hook may be called after RoundTrip returns in this case?\n\nI think we should either guarantee that Got1xxResponse is never called after RoundTrip returns (and that any existing calls have completed), or make no guarantee.",
      "parentUuid": "191dfd32_2b26f555",
      "revId": "495f1d1636e3ab2ec32168bd734e1f4a6a623d1c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2366cc62_47c0d74e",
        "filename": "src/net/http/transport.go",
        "patchSetId": 6
      },
      "lineNbr": 2067,
      "author": {
        "id": 34725
      },
      "writtenOn": "2024-01-31T04:29:09Z",
      "side": 1,
      "message": "nit: I was talking about [TestCancelRequestWhenSharingConnection](https://go.googlesource.com/go/+/refs/heads/master/src/net/http/transport_test.go#6729), not TestTransportDecrementConnWhenIdleConnRemoved, apologies for that.\n\nTherefore, this is actually for client-side, check out `TestCancelRequestWhenSharingConnection` for details.\n\n\u003e I think we should either guarantee that Got1xxResponse is never called after RoundTrip returns (and that any existing calls have completed), or make no guarantee.\n\nWe\u0027ve already made such a guarantee in the no-errors case (might not make an explicit document about it, but it\u0027s done in code implicitly), so it would feel unreasonable to revoke that guarantee from the errors cases.\n\nAs for your example, the inbound request to ReverseProxy (or other HTTP handlers) will only be canceled ***after*** the `ServeHTTP` returns according to `net/http.server.go` (please correct me if I\u0027m missing something), so this case does not seem to exist in the real world. But if you argue that we may want to interrupt the HTTP handler by canceling the request during `http.conn.serve` in the future, then I have to admit that your example is valid and the potential data race might occur at some point.\n\nBut let\u0027s put this example aside for now, and go back to `TestCancelRequestWhenSharingConnection` first, this test is way special because it would cause the `readLoop` to be blocked at [here](https://go.googlesource.com/go/+/refs/heads/master/src/net/http/transport_test.go#6760) before the first response is sent back to the caller, so when the second request was canceled and the `client.Do` was also blocked, which makes the line `close(idlec)` below unreachable, which makes the test was blocked at `\u003c-idlec`.\n\nThus, by ***unsuccessful***, I meant cases with errors, we should wait for both `writeLoop` and `readLoop` to exit before returning from a roundtrip, but there might be some existing cases that block the `readLoop` via `http.ClientTrace.Got100Continue`/`Got1xxResponse`/`PutIdleConn`, etc. intentionally for some reasons where the roundtrip will block infinitely if it waits for `readLoop`.\n\nAll in all, the most important question here is: do we dare to afford the cost of breaking a few existing cases I mentioned above by treating all errors equally and having the `RoundTrip` wait for both `writeLoop` and `readLoop` to finish? If so, then I think we can rewrite `TestCancelRequestWhenSharingConnection` and go along.",
      "parentUuid": "6d51d8a7_ed021796",
      "revId": "495f1d1636e3ab2ec32168bd734e1f4a6a623d1c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aa159d66_3d0f3413",
        "filename": "src/net/http/transport.go",
        "patchSetId": 6
      },
      "lineNbr": 2067,
      "author": {
        "id": 34725
      },
      "writtenOn": "2024-01-31T04:38:18Z",
      "side": 1,
      "message": "BTW, I personally don\u0027t like the idea that users put blocking code (blocking for a long time or even infinite time) in `http.ClientTrace.Got100Continue`/`Got1xxResponse`/`PutIdleConn`, it seems extremely buggy to me, so I\u0027m inclined to force them not to do that, which also makes our work here much easier by waiting `readLoop` to exit on all errors.",
      "parentUuid": "2366cc62_47c0d74e",
      "revId": "495f1d1636e3ab2ec32168bd734e1f4a6a623d1c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5e78004d_473db08e",
        "filename": "src/net/http/transport.go",
        "patchSetId": 6
      },
      "lineNbr": 2067,
      "author": {
        "id": 34725
      },
      "writtenOn": "2024-02-06T02:20:14Z",
      "side": 1,
      "message": "Any thoughts? @dneil@google.com",
      "parentUuid": "aa159d66_3d0f3413",
      "revId": "495f1d1636e3ab2ec32168bd734e1f4a6a623d1c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0349dba3_92151ece",
        "filename": "src/net/http/transport.go",
        "patchSetId": 6
      },
      "lineNbr": 2067,
      "author": {
        "id": 34725
      },
      "writtenOn": "2024-02-09T13:26:25Z",
      "side": 1,
      "message": "Ping...",
      "parentUuid": "5e78004d_473db08e",
      "revId": "495f1d1636e3ab2ec32168bd734e1f4a6a623d1c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b3d1420c_143ca7f3",
        "filename": "src/net/http/transport.go",
        "patchSetId": 6
      },
      "lineNbr": 2067,
      "author": {
        "id": 5305
      },
      "writtenOn": "2024-02-13T18:51:14Z",
      "side": 1,
      "message": "I\u0027m sorry, I\u0027m losing track of what changes are being proposed now.\n\nThere seem to be two different approaches to fixing the race here:\n\n1. Guarantee that `RoundTrip` will wait for all running `Got1xxResponse` trace hooks to finish before returning, and will not call any further hooks after returning; or\n2. Add synchronization to `ReverseProxy` to handle `Got1xxResponse` hooks executing after `RoundTrip` returns.\n\nWe currently explicitly do not guarantee (1): https://pkg.go.dev/net/http/httptrace#ClientTrace states:\n\n\u003e Functions may be called concurrently from different goroutines and some may be called after the request has completed or failed.\n\nIf we want to add that guarantee, then I think that for consistency we need to do it for all ClientTrace hooks, not just `Got1xxResponse`. This might possible, but it would be a lot of change, and I\u0027m not sure it\u0027s either feasible or desirable.\n\nGiven that `RoundTrip` is currently behaving as documented, and `ReverseProxy` is not correctly handling that documented behavior, I think we should fix `ReverseProxy`.",
      "parentUuid": "0349dba3_92151ece",
      "revId": "495f1d1636e3ab2ec32168bd734e1f4a6a623d1c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "88f5c4d6_2cd6981d",
        "filename": "src/net/http/transport.go",
        "patchSetId": 6
      },
      "lineNbr": 2067,
      "author": {
        "id": 34725
      },
      "writtenOn": "2024-02-13T19:05:17Z",
      "side": 1,
      "message": "If we only intend to fix this particular problem and not to make big guarantee of concurrency, then I think the current patchset will suffice for now.",
      "parentUuid": "b3d1420c_143ca7f3",
      "revId": "495f1d1636e3ab2ec32168bd734e1f4a6a623d1c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9881bbb7_488b67fe",
        "filename": "src/net/http/transport.go",
        "patchSetId": 6
      },
      "lineNbr": 2067,
      "author": {
        "id": 34725
      },
      "writtenOn": "2024-02-13T19:13:19Z",
      "side": 1,
      "message": "The current approach only waits for `readLoop` to finish on errors, it doesn\u0027t intend to ensure the concurrent safety of the whole lifetime.",
      "parentUuid": "88f5c4d6_2cd6981d",
      "revId": "495f1d1636e3ab2ec32168bd734e1f4a6a623d1c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "42673fda_c18e2b51",
        "filename": "src/net/http/transport.go",
        "patchSetId": 6
      },
      "lineNbr": 2067,
      "author": {
        "id": 34725
      },
      "writtenOn": "2024-02-19T09:52:39Z",
      "side": 1,
      "message": "Hi @dneil@google.com, any new feedback?",
      "parentUuid": "9881bbb7_488b67fe",
      "revId": "495f1d1636e3ab2ec32168bd734e1f4a6a623d1c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cef5a673_be6b6de5",
        "filename": "src/net/http/transport.go",
        "patchSetId": 6
      },
      "lineNbr": 2068,
      "author": {
        "id": 5305
      },
      "writtenOn": "2024-01-30T23:36:16Z",
      "side": 1,
      "message": "I think this misses the case where a request is canceled by canceling the request context.\n\n(I guess that means the ReverseProxy case I described above does wait for readLoop to finish, but it seems extremely confusing to treat context cancelation different from the legacy cancelation path here.)",
      "revId": "495f1d1636e3ab2ec32168bd734e1f4a6a623d1c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "93d219de_33830ecd",
        "filename": "src/net/http/transport.go",
        "patchSetId": 6
      },
      "lineNbr": 2068,
      "author": {
        "id": 34725
      },
      "writtenOn": "2024-01-31T04:29:09Z",
      "side": 1,
      "message": "By legacy cancelation, I assume that you meant `req.Request.Cancel`? If so, then this error check has already covered both cases cuz the `pc.closed` passed to `mapRoundTripError` is `errRequestCanceled` for both cases.",
      "parentUuid": "cef5a673_be6b6de5",
      "revId": "495f1d1636e3ab2ec32168bd734e1f4a6a623d1c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}