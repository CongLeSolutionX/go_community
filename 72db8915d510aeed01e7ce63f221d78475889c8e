{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "ec784e99_4e18aae5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5305
      },
      "writtenOn": "2023-11-06T21:40:13Z",
      "side": 1,
      "message": "Thanks.",
      "revId": "72db8915d510aeed01e7ce63f221d78475889c8e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "422db335_17d914c6",
        "filename": "src/net/http/fs.go",
        "patchSetId": 2
      },
      "lineNbr": 32,
      "author": {
        "id": 6365
      },
      "writtenOn": "2023-11-08T14:23:43Z",
      "side": 1,
      "message": "Perhaps change “filename” to “directory path” here?\n\nI think that\u0027s all that is really needed as far as documentation — for example, we already don\u0027t document what happens if you use a nonexistent path for Dir. (The answer to “what happens if I do that?” is “it\u0027s a bug, don\u0027t do that.”)",
      "range": {
        "startLine": 32,
        "startChar": 14,
        "endLine": 32,
        "endChar": 22
      },
      "revId": "72db8915d510aeed01e7ce63f221d78475889c8e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cbfedf55_304c1196",
        "filename": "src/net/http/fs_test.go",
        "patchSetId": 2
      },
      "lineNbr": 1621,
      "author": {
        "id": 6365
      },
      "writtenOn": "2023-11-07T22:10:56Z",
      "side": 1,
      "message": "This construct seems odd to me. The doc for the `Dir` type says “A Dir implements FileSystem using the native file system restricted to a specific directory tree.”\n\n`testdata/index.html` is not a “directory tree” — it is a file, not a directory. I would intuitively expect it to return an error for every call to `Open`, more or less the same as if one constructed a `Dir` from a nonexistent file path.\n\nAt the very least, if it is valid to use `Dir` on a non-directory I would expect the documentation for `http.Dir` to define its behavior more clearly.",
      "range": {
        "startLine": 1621,
        "startChar": 47,
        "endLine": 1621,
        "endChar": 73
      },
      "revId": "72db8915d510aeed01e7ce63f221d78475889c8e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b9ab3551_0626bf7a",
        "filename": "src/net/http/fs_test.go",
        "patchSetId": 2
      },
      "lineNbr": 1621,
      "author": {
        "id": 63983
      },
      "writtenOn": "2023-11-07T22:27:11Z",
      "side": 1,
      "message": "Thanks Bryan, I\u0027m not totally convinced if handling single files is something Dir should support or return an error for, but the decision should definitely be documented. Do you think it is okay to use the current solution as long as it is documented in http.Dir? Or you are more inclined to return an error and document it as well?",
      "parentUuid": "cbfedf55_304c1196",
      "range": {
        "startLine": 1621,
        "startChar": 47,
        "endLine": 1621,
        "endChar": 73
      },
      "revId": "72db8915d510aeed01e7ce63f221d78475889c8e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9eda91c3_12c752cf",
        "filename": "src/net/http/fs_test.go",
        "patchSetId": 2
      },
      "lineNbr": 1621,
      "author": {
        "id": 6365
      },
      "writtenOn": "2023-11-08T14:23:43Z",
      "side": 1,
      "message": "Personally I think `http.Dir` should only serve directories, since that\u0027s what the abbreviation “Dir” literally stands for.",
      "parentUuid": "b9ab3551_0626bf7a",
      "range": {
        "startLine": 1621,
        "startChar": 47,
        "endLine": 1621,
        "endChar": 73
      },
      "revId": "72db8915d510aeed01e7ce63f221d78475889c8e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8511719d_1f9d50e8",
        "filename": "src/net/http/fs_test.go",
        "patchSetId": 2
      },
      "lineNbr": 1621,
      "author": {
        "id": 63983
      },
      "writtenOn": "2023-11-16T20:09:39Z",
      "side": 1,
      "message": "I think the best course of action is indeed to return an error if a normal file is passed to Dir. It is highly unlikely that anyone is relying on Dir(\"file.txt\") to serve any content, and if they are doing so it is undefined behavior. I will document this case and return a proper error from `(Dir).Open`.",
      "parentUuid": "9eda91c3_12c752cf",
      "range": {
        "startLine": 1621,
        "startChar": 47,
        "endLine": 1621,
        "endChar": 73
      },
      "revId": "72db8915d510aeed01e7ce63f221d78475889c8e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "616295ec_5e7ca05e",
        "filename": "src/net/http/fs_test.go",
        "patchSetId": 2
      },
      "lineNbr": 1621,
      "author": {
        "id": 63983
      },
      "writtenOn": "2023-11-16T20:44:45Z",
      "side": 1,
      "message": "I found this test while working on a fix:\n\n```\n\t// Not really directories, but since we use this trick in\n\t// ServeFile, test it:\n\ttest(Dir(\"/etc/hosts\"), \"\")\n\ttest(Dir(\"/etc/hosts\"), \"/\")\n\ttest(Dir(\"/etc/hosts\"), \"../\")\n```\n\nSo even if it is not documented, we kind of rely on http.Dir being able to access a file. I also experienced some additional test failures after changing this behavior.",
      "parentUuid": "8511719d_1f9d50e8",
      "range": {
        "startLine": 1621,
        "startChar": 47,
        "endLine": 1621,
        "endChar": 73
      },
      "revId": "72db8915d510aeed01e7ce63f221d78475889c8e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "94dea135_68f97b99",
        "filename": "src/net/http/fs_test.go",
        "patchSetId": 2
      },
      "lineNbr": 1621,
      "author": {
        "id": 63983
      },
      "writtenOn": "2023-11-16T21:01:14Z",
      "side": 1,
      "message": "Maybe I\u0027m being overcautious but I\u0027m quite worried to change this behavior now, after seeing that the tests somehow cover a certain usecase. I do believe this trick is only used by ServeFile but I\u0027m not sure if people indeed rely on it while using http.Dir directly, and I don\u0027t want to break user programs specially if we are planning on backporting this fix, since the redirect loop also happens in 1.20 and 1.21. I think it is still safer to just serve the file directly, even tho this is not documented anywhere. As you pointed out in another comment, the answer to “what happens if I do that?” is “it\u0027s a bug, don\u0027t do that.”.",
      "parentUuid": "616295ec_5e7ca05e",
      "range": {
        "startLine": 1621,
        "startChar": 47,
        "endLine": 1621,
        "endChar": 73
      },
      "revId": "72db8915d510aeed01e7ce63f221d78475889c8e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a4ba3e32_bb50c8ee",
        "filename": "src/net/http/fs_test.go",
        "patchSetId": 2
      },
      "lineNbr": 1621,
      "author": {
        "id": 6365
      },
      "writtenOn": "2023-11-16T21:06:06Z",
      "side": 1,
      "message": "Huh, that\u0027s weird given that it results in a redirect loop.\n\nThat test was added in CL 4629047 — is is possible that we stopped “us[ing] this trick in ServeFile” at some point since then?\n\nAt any rate: if Damien has a preference one way or the other I will defer to him, but I\u0027d like to know a bit more about the additional test failures...",
      "parentUuid": "616295ec_5e7ca05e",
      "range": {
        "startLine": 1621,
        "startChar": 47,
        "endLine": 1621,
        "endChar": 73
      },
      "revId": "72db8915d510aeed01e7ce63f221d78475889c8e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a90fcf03_215c797b",
        "filename": "src/net/http/fs_test.go",
        "patchSetId": 2
      },
      "lineNbr": 1621,
      "author": {
        "id": 63983
      },
      "writtenOn": "2023-11-16T21:19:34Z",
      "side": 1,
      "message": "I think the additional failures I mentioned were tests that timed out, probably not related, I just pushed the changes. I would also like to hear Damien opinions on this. Thanks again Bryan!",
      "parentUuid": "a4ba3e32_bb50c8ee",
      "range": {
        "startLine": 1621,
        "startChar": 47,
        "endLine": 1621,
        "endChar": 73
      },
      "revId": "72db8915d510aeed01e7ce63f221d78475889c8e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ca995535_2f01129d",
        "filename": "src/net/http/fs_test.go",
        "patchSetId": 2
      },
      "lineNbr": 1621,
      "author": {
        "id": 5305
      },
      "writtenOn": "2023-11-16T22:36:19Z",
      "side": 1,
      "message": "The original implementation of `ServeFile` (dating back to when this was in `src/pkg/http`) was:\n\n```\nfunc ServeFile(w ResponseWriter, r *Request, name string) {\n        serveFile(w, r, Dir(name), \"\", false)\n}\n```\n\nSo that\u0027s the \"trick\" the test is talking about, but `ServeFile` no longer uses it:\n\n```\nfunc ServeFile(w ResponseWriter, r *Request, name string) {\n        // ...\n        dir, file :\u003d filepath.Split(name)\n        serveFile(w, r, Dir(dir), file, false)\n}\n```\n\nDo I understand correctly that `Dir(\"somefile\")` currently does not work, because it causes a redirect loop? If so, making it produce an error seems like the right thing to do. If on the other hand, `Dir(\"somefile\")` does work under some circumstances, then someone is probably relying on that and we can\u0027t change it now.",
      "parentUuid": "a90fcf03_215c797b",
      "range": {
        "startLine": 1621,
        "startChar": 47,
        "endLine": 1621,
        "endChar": 73
      },
      "revId": "72db8915d510aeed01e7ce63f221d78475889c8e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e68db3f7_c132851a",
        "filename": "src/net/http/fs_test.go",
        "patchSetId": 2
      },
      "lineNbr": 1621,
      "author": {
        "id": 63983
      },
      "writtenOn": "2023-11-17T20:12:05Z",
      "side": 1,
      "message": "From my investigation the only usage of Dir in net/http outside tests is in ServeFile and it calls Dir with the first result of filepath.Split, which presumably is a real directory. Given that (Dir).Open already calls os.Open(dir), a call to Stat is safe to do since it already assumes Dir to be a real file in the system, we are just making sure that it is a dir and not a file. The only potential breaking change I see is for users who are directly using http.Dir and passing it around in some non-standard use case.\n\nI did some browsing through the pages of http.Dir usage in code and could not find a single one that used a file instead of a directory:\n\nhttps://github.com/search?q\u003dlang%3AGo+http.Dir%28%22\u0026type\u003dcode",
      "parentUuid": "ca995535_2f01129d",
      "range": {
        "startLine": 1621,
        "startChar": 47,
        "endLine": 1621,
        "endChar": 73
      },
      "revId": "72db8915d510aeed01e7ce63f221d78475889c8e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}