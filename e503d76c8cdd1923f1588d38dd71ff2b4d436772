{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "136f3378_9d67f998",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-09-04T20:02:59Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003de503d76c\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "e503d76c8cdd1923f1588d38dd71ff2b4d436772",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ff8f4b18_fccf5339",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-09-04T20:14:31Z",
      "side": 1,
      "message": "1 of 46 TryBots failed.\nFailed on linux-amd64-race: https://storage.googleapis.com/go-build-log/e503d76c/linux-amd64-race_271b14ae.log\n\nConsult https://build.golang.org/ to see whether they are new failures. Keep in mind that TryBots currently test *exactly* your git commit, without rebasing. If your commit\u0027s git parent is old, the failure might\u0027ve already been fixed.\n\n",
      "parentUuid": "136f3378_9d67f998",
      "tag": "autogenerated:trybots~failed",
      "revId": "e503d76c8cdd1923f1588d38dd71ff2b4d436772",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "427433c0_0ca31e9e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 8495
      },
      "writtenOn": "2023-09-04T20:19:43Z",
      "side": 1,
      "message": "Failure looks real:\n```\npanic: zstd decompression error at 23310: offset past window\n```\n\nwill look into it later.",
      "revId": "e503d76c8cdd1923f1588d38dd71ff2b4d436772",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f377d985_197a577d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 13550
      },
      "writtenOn": "2023-09-04T21:31:47Z",
      "side": 1,
      "message": "Could we document what we used to generate the zstd archive? In particular, what zstd version and what compression level, so that other files can be generated in a similar way as well. I assume we want a higher compression level, assuming that doesn\u0027t significantly increase the decompression cpu cost or memory usage.\n\nGenerally I\u0027m in favor of this change for the reasons you outline. I\u0027d be against it if zstd was very new and a better compression mechanism might come soon, to avoid noise, but at this point zstd has been well known as a good middle ground for nearly a decade. It\u0027s unlikely we\u0027ll do this again in at least another ten years.",
      "revId": "e503d76c8cdd1923f1588d38dd71ff2b4d436772",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2e0a52de_33618e92",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 13550
      },
      "writtenOn": "2023-09-04T21:32:23Z",
      "side": 1,
      "message": "Err, you did specify `zstd -19` at the top of the commit message. So just the version would be missing, for clarity.",
      "parentUuid": "f377d985_197a577d",
      "revId": "e503d76c8cdd1923f1588d38dd71ff2b4d436772",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7d472dd7_0091bdf0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 13550
      },
      "writtenOn": "2023-09-04T21:33:34Z",
      "side": 1,
      "message": "Could be that the built-in zstd decoder can\u0027t handle high compression levels, since those might use larger windows or more complex parts of the algorithm/encoding.",
      "parentUuid": "427433c0_0ca31e9e",
      "revId": "e503d76c8cdd1923f1588d38dd71ff2b4d436772",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7edc3170_d0c71df1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5206
      },
      "writtenOn": "2023-09-04T22:37:52Z",
      "side": 1,
      "message": "If the problem were a large window, I would expect a consistent failure, not one that only occurs with the race detector.\n\nUnfortunately, I haven\u0027t been able to recreate the problem.\n\nThere aren\u0027t any global variables in internal/zstd, so it\u0027s hard to understand how there could be a race with a simple call to zstd.NewReader.",
      "parentUuid": "7d472dd7_0091bdf0",
      "revId": "e503d76c8cdd1923f1588d38dd71ff2b4d436772",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "29029727_b21cb601",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 13550
      },
      "writtenOn": "2023-09-11T07:51:20Z",
      "side": 1,
      "message": "Possibly https://go-review.googlesource.com/c/go/+/527115 ?",
      "parentUuid": "7edc3170_d0c71df1",
      "revId": "e503d76c8cdd1923f1588d38dd71ff2b4d436772",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}