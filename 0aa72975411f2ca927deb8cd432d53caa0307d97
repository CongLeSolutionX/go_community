{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "2cd6ac35_d7e4c2a1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 28759
      },
      "writtenOn": "2021-09-15T19:05:07Z",
      "side": 1,
      "message": "Hey Joe - is this still something you want to work on before the freeze, or should one of us plan to pick it up? Thanks!",
      "revId": "0aa72975411f2ca927deb8cd432d53caa0307d97",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "849c4daf_6707bcca",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 8495
      },
      "writtenOn": "2021-09-15T19:06:21Z",
      "side": 1,
      "message": "My apologies. I\u0027ve been a bit busy lately. Feel free to take it over!",
      "parentUuid": "2cd6ac35_d7e4c2a1",
      "revId": "0aa72975411f2ca927deb8cd432d53caa0307d97",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "95e658d2_12c37f4e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 28759
      },
      "writtenOn": "2021-09-15T19:10:41Z",
      "side": 1,
      "message": "No problem! Just wanted to check in to make sure we dedicated the time to fix this before the freeze if needed.",
      "parentUuid": "849c4daf_6707bcca",
      "revId": "0aa72975411f2ca927deb8cd432d53caa0307d97",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2150224d_1c09302c",
        "filename": "src/testing/match.go",
        "patchSetId": 4
      },
      "lineNbr": 116,
      "author": {
        "id": 17092
      },
      "writtenOn": "2021-08-18T17:13:04Z",
      "side": 1,
      "message": "I really like this approach, and when this lands, I think we ought to cherry-pick it into master early. That said, I\u0027m finding the logic hard to follow (coffee hasn\u0027t kicked in yet), and I wonder if we could simplify a bit.\n\nWhat if instead of stripNumberSuffix, we instead had a function stripNameUniqueSuffixes that returned a string without any of the suffixes. So:\n\n  \"foo#01/bar/baz#123\" -\u003e \"foo/bar/baz\"\n\nWe can use those stripped strings as map keys, so nothing in the map will have those suffixes. I think that would even avoid the need to loop. Something like this?\n\n  stripped :\u003d fmt.Sprintf(\"%s/%s\", stripNameUniqueSuffixes(parent), subname)\n  name :\u003d fmt.Sprintf(\"%s/%s\", parent, subname)\n  next, exists :\u003d m.subNames[stripped]\n  if subname !\u003d \"\" \u0026\u0026 !exists {\n    m.subNames[stripped] \u003d 1\n    return name\n  }\n  name \u003d fmt.Sprintf(\"%s/%s%02d\", parent, subname, next)\n  m.subNames[stripped]++\n  return name\n\nI\u0027m not sure if this is correct. It lets users pass in a literal subname like \"foo#02\" and preserves that. Maybe that\u0027s okay though?",
      "revId": "0aa72975411f2ca927deb8cd432d53caa0307d97",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a8dd5a45_1b51216e",
        "filename": "src/testing/match.go",
        "patchSetId": 4
      },
      "lineNbr": 116,
      "author": {
        "id": 8495
      },
      "writtenOn": "2021-08-18T17:49:35Z",
      "side": 1,
      "message": "\u003e What if instead of stripNumberSuffix, we instead had a function stripNameUniqueSuffixes that returned a string without any of the suffixes. So:\n\nSomething similar to that was what I was alluding to in the CL description if we\u0027re willing to change the way names are generated.\n\nI don\u0027t like how the names can be arbitrarily nested (e.g., \"a#01#01#01\") as this creates lots of complexity. If it was a flat sequence, then the logic becomes simpler.\n\nI don\u0027t know if the auto-generation of names is technically covered by the Go compatibility agreement. Currently, my function is optimizing for backwards compatibility at the expense of complexity.\n\nBTW, you can play around with the algorithm with this snippet:\nhttps://play.golang.org/p/UJ6yM5Kr-e6\ncurrently the snippet you suggested has duplicates.",
      "parentUuid": "2150224d_1c09302c",
      "revId": "0aa72975411f2ca927deb8cd432d53caa0307d97",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f19fa0a2_f7eac100",
        "filename": "src/testing/match.go",
        "patchSetId": 4
      },
      "lineNbr": 116,
      "author": {
        "id": 17092
      },
      "writtenOn": "2021-08-18T20:40:57Z",
      "side": 1,
      "message": "Ah, I\u0027m sorry for that. I typed it out a bit hastily before a meeting and didn\u0027t test.\n\nFor compatibility, we\u0027re in Hyrum\u0027s Law territory, but I think as long as we\u0027re in the contract of T.Name, we\u0027re okay.\n\n\u003e If two sibling sub-tests have the same name, Name will append a suffix to guarantee the returned name is unique.\n\nThat sounds like any suffix is allowed, but the returned name must be unique, and we can\u0027t remove any part of the user-specified name.\n\nI\u0027ll take another look when I have a clearer head; pretty fried today to be honest.",
      "parentUuid": "a8dd5a45_1b51216e",
      "revId": "0aa72975411f2ca927deb8cd432d53caa0307d97",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2c478ed4_bb4d4da2",
        "filename": "src/testing/match.go",
        "patchSetId": 4
      },
      "lineNbr": 116,
      "author": {
        "id": 17092
      },
      "writtenOn": "2021-08-26T16:51:14Z",
      "side": 1,
      "message": "Sorry for taking so long to come back to this. Brain fog has been a real problem for me lately.\n\nI\u0027d still like to simplify this, even if it means an observable change in names (staying without the bounds of what T.Name promises though).\n\nHere\u0027s what I\u0027ve been trying. This version should avoid duplicates and should ensure subname is always there, even if it appears to contain a suffix. https://play.golang.org/p/GsuzNjjRNr-. WDYT of this approach?",
      "parentUuid": "f19fa0a2_f7eac100",
      "revId": "0aa72975411f2ca927deb8cd432d53caa0307d97",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "49491ba2_6d1326aa",
        "filename": "src/testing/match.go",
        "patchSetId": 4
      },
      "lineNbr": 116,
      "author": {
        "id": 8495
      },
      "writtenOn": "2021-09-15T19:06:21Z",
      "side": 1,
      "message": "No rush on this, I\u0027m using this locally for fuzzing so that my tests don\u0027t keep OOMing.",
      "parentUuid": "f19fa0a2_f7eac100",
      "revId": "0aa72975411f2ca927deb8cd432d53caa0307d97",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "44dc6a5d_36ff028d",
        "filename": "src/testing/match.go",
        "patchSetId": 4
      },
      "lineNbr": 116,
      "author": {
        "id": 8495
      },
      "writtenOn": "2021-09-15T19:07:01Z",
      "side": 1,
      "message": "Oops. This was a stale message I had as a draft that I apparently never sent until now.",
      "parentUuid": "49491ba2_6d1326aa",
      "revId": "0aa72975411f2ca927deb8cd432d53caa0307d97",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required. Self review is not allowed."
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Code-Review=MAX,user=non_uploader","label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "0aa72975411f2ca927deb8cd432d53caa0307d97",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Do-Not-Review",
        "description": {
          "value": "Changes that have DO NOT REVIEW in their commit message are not submittable."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (R|r)(E|e)(V|v)(I|i)(E|e)(W|w).*\""
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:false"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (R|r)(E|e)(V|v)(I|i)(E|e)(W|w).*\""},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (R|r)(E|e)(V|v)(I|i)(E|e)(W|w).*\""]}
      },
      "submittabilityExpressionResult": {},
      "overrideExpressionResult": {},
      "patchSetCommitId": "0aa72975411f2ca927deb8cd432d53caa0307d97",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Do-Not-Submit",
        "description": {
          "value": "Changes that have DO NOT SUBMIT in their commit message are not submittable."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:false"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""]}
      },
      "submittabilityExpressionResult": {},
      "overrideExpressionResult": {},
      "patchSetCommitId": "0aa72975411f2ca927deb8cd432d53caa0307d97",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Trust",
        "description": {
          "value": "A change must get two Trust+1 or Code-Review+2 from two different approvers."
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "distinctvoters:\"[Code-Review,Trust],value\u003dMAX,count\u003e1\""
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"distinctvoters:\"[Code-Review,Trust],value=MAX,count>1\""},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["distinctvoters:\"[Code-Review,Trust],value=MAX,count>1\""]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "0aa72975411f2ca927deb8cd432d53caa0307d97",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}