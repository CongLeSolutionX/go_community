{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "18fdd4c3_c5cd0321",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 47
      },
      "lineNbr": 0,
      "author": {
        "id": 34993
      },
      "writtenOn": "2024-11-20T10:56:25Z",
      "side": 1,
      "message": "I\u0027ve done some benchmarking with CL 629698 and the results are not very good:\n\n```\ngoos: windows\ngoarch: amd64\npkg: os\ncpu: Intel(R) Core(TM) i7-10850H CPU @ 2.70GHz\n             │ master.txt  │              CL629698.txt              │\n             │   sec/op    │    sec/op     vs base                  │\nRemoveAll-12   80.73m ± 4%   506.18m ± 5%  +527.00% (p\u003d0.000 n\u003d8+9)\n\n             │  master.txt   │           CL629698.txt           │\n             │     B/op      │     B/op       vs base           │\nRemoveAll-12   172.3Ki ± 14%   191.4Ki ± 17%  ~ (p\u003d0.132 n\u003d8+9)\n\n             │ master.txt │             CL629698.txt              │\n             │ allocs/op  │  allocs/op   vs base                  │\nRemoveAll-12   791.0 ± 0%   2640.0 ± 0%  +233.75% (p\u003d0.000 n\u003d8+9)\n```\n\nIt is not unexpected, though, given that the previous os.RemoveAll implementation is more mature and more optimized. On the other hand, the amount of allocations concerns me. I\u0027ve submitted the CL 629935 tackling some low hanging fruits, reducing the allocations by half. Feel free to pull in those changes in your CL.",
      "revId": "8017903e32f06ec6595a06e7e83d31074fc4f5c5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8c6d2974_7d121da5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 47
      },
      "lineNbr": 0,
      "author": {
        "id": 34993
      },
      "writtenOn": "2024-11-20T10:56:55Z",
      "side": 1,
      "message": "Marking as unresolved.",
      "parentUuid": "18fdd4c3_c5cd0321",
      "revId": "8017903e32f06ec6595a06e7e83d31074fc4f5c5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "26eddb24_508a7f1f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 47
      },
      "lineNbr": 0,
      "author": {
        "id": 5305
      },
      "writtenOn": "2024-11-20T17:38:27Z",
      "side": 1,
      "message": "Can you say more about your benchmark setup? I\u0027m seeing the same increase in allocations, but a much smaller change in time:\n\n```\ngoos: windows\ngoarch: amd64\npkg: os\ncpu: Intel(R) Xeon(R) CPU @ 2.00GHz\n             │ /tmp/bench.0 │            /tmp/bench.1             │\n             │    sec/op    │    sec/op     vs base               │\nRemoveAll-16    2.126m ± 5%   2.687m ± 15%  +26.36% (p\u003d0.001 n\u003d8)\n\n             │ /tmp/bench.0 │            /tmp/bench.1             │\n             │     B/op     │     B/op      vs base               │\nRemoveAll-16   12.49Ki ± 8%   15.87Ki ± 3%  +27.08% (p\u003d0.000 n\u003d8)\n\n             │ /tmp/bench.0 │            /tmp/bench.1             │\n             │  allocs/op   │  allocs/op   vs base                │\nRemoveAll-16     96.00 ± 0%   311.00 ± 0%  +223.96% (p\u003d0.000 n\u003d8)\n```\n\nThis is a gomote, so presumably virtualized and not a great benchmarking setup, but I\u0027m surprised at the size of the difference.\n\nI\u0027ve done some cursory analysis, and I think the slowdown that I\u0027m seeing is caused by extra open calls--the Root-based implementation opens each directory twice, once via OpenRoot and then again to list the directory contents.\n\nI think this is an argument for not trying to change RemoveAll until Root has a faster path for listing directory contents. I\u0027ve got a CL for that, but it\u0027s not going to be ready for 1.24.",
      "parentUuid": "8c6d2974_7d121da5",
      "revId": "8017903e32f06ec6595a06e7e83d31074fc4f5c5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8480d2a6_74521072",
        "filename": "src/os/root_unix.go",
        "patchSetId": 47
      },
      "lineNbr": 122,
      "author": {
        "id": 5206
      },
      "writtenOn": "2024-11-20T01:34:25Z",
      "side": 1,
      "message": "s/eloopErr/checkSymlink/",
      "revId": "8017903e32f06ec6595a06e7e83d31074fc4f5c5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e5153bea_104c6675",
        "filename": "src/os/root_unix.go",
        "patchSetId": 47
      },
      "lineNbr": 122,
      "author": {
        "id": 5305
      },
      "writtenOn": "2024-11-20T17:38:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8480d2a6_74521072",
      "revId": "8017903e32f06ec6595a06e7e83d31074fc4f5c5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}