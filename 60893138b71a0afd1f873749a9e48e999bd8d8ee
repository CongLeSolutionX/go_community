{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "08baf5f3_bfb38901",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 13640
      },
      "writtenOn": "2023-11-27T08:04:26Z",
      "side": 1,
      "message": "TRY\u003driscv64",
      "revId": "60893138b71a0afd1f873749a9e48e999bd8d8ee",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5741e6c6_a173a98e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-11-27T08:04:41Z",
      "side": 1,
      "message": "SlowBots beginning. Status page: https://farmer.golang.org/try?commit\u003d60893138\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "60893138b71a0afd1f873749a9e48e999bd8d8ee",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a2c1642d_cb74863d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-11-27T09:28:57Z",
      "side": 1,
      "message": "SlowBots are happy.\n\nSlowBot builds that ran:\n* linux-riscv64-unmatched\n",
      "parentUuid": "5741e6c6_a173a98e",
      "tag": "autogenerated:trybots~happy",
      "revId": "60893138b71a0afd1f873749a9e48e999bd8d8ee",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ecfa402f_3bc337dc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 62943
      },
      "writtenOn": "2023-11-27T12:47:53Z",
      "side": 1,
      "message": "I had a good play with this today.  It fixes the original bug while retaining the optimisation which went wrong.  I have two small comments but they could be addressed in a subsequent commit if deemed worthwhile.",
      "revId": "60893138b71a0afd1f873749a9e48e999bd8d8ee",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "96fea2e5_7457953c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 13640
      },
      "writtenOn": "2023-11-28T13:45:19Z",
      "side": 1,
      "message": "Thanks for confirming.",
      "parentUuid": "ecfa402f_3bc337dc",
      "revId": "60893138b71a0afd1f873749a9e48e999bd8d8ee",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "83d610be_15153924",
        "filename": "src/cmd/compile/internal/ssa/_gen/RISCV64.rules",
        "patchSetId": 1
      },
      "lineNbr": 713,
      "author": {
        "id": 13315
      },
      "writtenOn": "2023-11-27T16:36:07Z",
      "side": 1,
      "message": "The `\u002631` is redundant now, as we know 0 \u003c\u003d x \u003c\u003d 31.",
      "range": {
        "startLine": 713,
        "startChar": 70,
        "endLine": 713,
        "endChar": 74
      },
      "revId": "60893138b71a0afd1f873749a9e48e999bd8d8ee",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "00e875b8_dd8a4e2c",
        "filename": "src/cmd/compile/internal/ssa/_gen/RISCV64.rules",
        "patchSetId": 1
      },
      "lineNbr": 713,
      "author": {
        "id": 13640
      },
      "writtenOn": "2023-11-28T13:45:19Z",
      "side": 1,
      "message": "Removed.",
      "parentUuid": "83d610be_15153924",
      "range": {
        "startLine": 713,
        "startChar": 70,
        "endLine": 713,
        "endChar": 74
      },
      "revId": "60893138b71a0afd1f873749a9e48e999bd8d8ee",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "441d1a5c_743baf91",
        "filename": "src/cmd/compile/internal/ssa/_gen/RISCV64.rules",
        "patchSetId": 1
      },
      "lineNbr": 719,
      "author": {
        "id": 62943
      },
      "writtenOn": "2023-11-27T12:47:53Z",
      "side": 1,
      "message": "Could this rule be\n\n  (SRAI \u003ct\u003e [x] (MOVWreg y)) \u0026\u0026 x \u003e\u003d 32 \u003d\u003e (SRAIW [31] y)\n\navoiding the left shift?\n\nThis would require changing one of the new codegen tests.",
      "revId": "60893138b71a0afd1f873749a9e48e999bd8d8ee",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "043df10e_e2a0c8cd",
        "filename": "src/cmd/compile/internal/ssa/_gen/RISCV64.rules",
        "patchSetId": 1
      },
      "lineNbr": 719,
      "author": {
        "id": 13640
      },
      "writtenOn": "2023-11-28T13:45:19Z",
      "side": 1,
      "message": "Indeed, easily done.",
      "parentUuid": "441d1a5c_743baf91",
      "revId": "60893138b71a0afd1f873749a9e48e999bd8d8ee",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8fe72a70_db11c007",
        "filename": "src/cmd/compile/internal/ssa/_gen/RISCV64.rules",
        "patchSetId": 1
      },
      "lineNbr": 719,
      "author": {
        "id": 13315
      },
      "writtenOn": "2023-11-29T15:38:54Z",
      "side": 1,
      "message": "Does SRAIW sign-extend the result to 64-bit, or leave the high bits 0?  I think this is only correct if it sign-extends.",
      "parentUuid": "043df10e_e2a0c8cd",
      "revId": "60893138b71a0afd1f873749a9e48e999bd8d8ee",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "53b883be_5bc0537a",
        "filename": "src/cmd/compile/internal/test/testdata/arith_test.go",
        "patchSetId": 1
      },
      "lineNbr": 274,
      "author": {
        "id": 13315
      },
      "writtenOn": "2023-11-27T16:36:07Z",
      "side": 1,
      "message": "`int64(x)\u003e\u003e9` should get a Rsh64x64 operation instead of Rsh8x64. The naming seems misleading.\n\nMaybe you want cast after the shift, i.e. `int64(x\u003e\u003e9)`?",
      "range": {
        "startLine": 272,
        "startChar": 0,
        "endLine": 274,
        "endChar": 1
      },
      "revId": "60893138b71a0afd1f873749a9e48e999bd8d8ee",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "35230bd9_fabedc07",
        "filename": "src/cmd/compile/internal/test/testdata/arith_test.go",
        "patchSetId": 1
      },
      "lineNbr": 274,
      "author": {
        "id": 13640
      },
      "writtenOn": "2023-11-28T13:45:19Z",
      "side": 1,
      "message": "The incorrect optimisation is a smaller type, which is cast and then shifted. I\u0027ve renamed these to rsh64x64ConstOverflowX, which is hopefully more accurate.",
      "parentUuid": "53b883be_5bc0537a",
      "range": {
        "startLine": 272,
        "startChar": 0,
        "endLine": 274,
        "endChar": 1
      },
      "revId": "60893138b71a0afd1f873749a9e48e999bd8d8ee",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b48532fe_57e91ff9",
        "filename": "src/cmd/compile/internal/test/testdata/arith_test.go",
        "patchSetId": 1
      },
      "lineNbr": 286,
      "author": {
        "id": 62943
      },
      "writtenOn": "2023-11-27T12:47:53Z",
      "side": 1,
      "message": "Perhaps we should also add overflow tests for the case when we\u0027re shifting right by a variable.\n\nThe original bug was reproducible when shifting right by a variable as well as by a constant, e.g., uint64(c) \u003e\u003e s) where c was a uint32 and s was \u003e 31.",
      "revId": "60893138b71a0afd1f873749a9e48e999bd8d8ee",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6f2e4f46_0948a85d",
        "filename": "src/cmd/compile/internal/test/testdata/arith_test.go",
        "patchSetId": 1
      },
      "lineNbr": 286,
      "author": {
        "id": 13640
      },
      "writtenOn": "2023-11-28T13:45:19Z",
      "side": 1,
      "message": "This would be useful - if you would like to send a follow up that would be great.",
      "parentUuid": "b48532fe_57e91ff9",
      "revId": "60893138b71a0afd1f873749a9e48e999bd8d8ee",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "91cf8cdd_3a15a18d",
        "filename": "test/codegen/shift.go",
        "patchSetId": 1
      },
      "lineNbr": 46,
      "author": {
        "id": 13315
      },
      "writtenOn": "2023-11-27T16:36:07Z",
      "side": 1,
      "message": "Same here, the name seems misleading.",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 46,
        "endChar": 1
      },
      "revId": "60893138b71a0afd1f873749a9e48e999bd8d8ee",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7a0d3f3d_ae52591c",
        "filename": "test/codegen/shift.go",
        "patchSetId": 1
      },
      "lineNbr": 46,
      "author": {
        "id": 13640
      },
      "writtenOn": "2023-11-28T13:45:19Z",
      "side": 1,
      "message": "Also renamed.",
      "parentUuid": "91cf8cdd_3a15a18d",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 46,
        "endChar": 1
      },
      "revId": "60893138b71a0afd1f873749a9e48e999bd8d8ee",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}