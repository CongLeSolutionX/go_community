{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "45f618fe_9f47b18d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-02-02T03:34:42Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003df5c5d375\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "f5c5d375471e84f1cb62a128d68e5a6c9d6524db",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "45486fca_265cfe97",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-02-02T03:46:04Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "45f618fe_9f47b18d",
      "tag": "autogenerated:trybots~happy",
      "revId": "f5c5d375471e84f1cb62a128d68e5a6c9d6524db",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "14e9f48a_47358fe5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 13315
      },
      "writtenOn": "2023-02-06T22:21:16Z",
      "side": 1,
      "message": "Looks okay overall, if elements.go and instTab can be fully generated. Thanks!\n\nFor a rough estimate, how many element types do we need? That will also give an estimate for how much code there will be for encoding.go, and what would the best way be to structure that code. Thanks.\n\n(I\u0027ll be OOO this week and next week, so I won\u0027t be able to do detailed review until I\u0027m back. Sorry for the delay. Thanks.)",
      "revId": "f5c5d375471e84f1cb62a128d68e5a6c9d6524db",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3052c124_2a29d936",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 24534
      },
      "writtenOn": "2023-02-07T02:16:41Z",
      "side": 1,
      "message": "\u003e Looks okay overall, if elements.go and instTab can be fully generated. Thanks!\n\u003e \nYes, these two parts must be automatically generated.\n\n\u003e For a rough estimate, how many element types do we need? That will also give an estimate for how much code there will be for encoding.go, and what would the best way be to structure that code. Thanks.\n\u003e \nRefer to here https://github.com/golang/arch/blob/1bb480fc256aacee6555e668dedebd1f8225c946/arm64/arm64asm/arg.go#L180, which contains all argument types of basic and simd\u0026fp instructions, a total of 312. But this time we plan to add all sve instructions. If the number is similar, then I expect to end up with about 400 element types.\n\n\u003e (I\u0027ll be OOO this week and next week, so I won\u0027t be able to do detailed review until I\u0027m back. Sorry for the delay. Thanks.)\n\u003e\nNo hurry, I expect this work will be difficult to get into 1.21, because parsing xml documents will take a lot of time. But I hope we can agree on the design as soon as possible, thanks.",
      "parentUuid": "14e9f48a_47358fe5",
      "revId": "f5c5d375471e84f1cb62a128d68e5a6c9d6524db",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "06b70f58_9f0cabc1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 22750
      },
      "writtenOn": "2023-02-07T04:48:03Z",
      "side": 1,
      "message": "Looking forward to seeing the work on the XML parsing. Is that going to be contributed to the `x/arch` repository?\n\nThanks!",
      "revId": "f5c5d375471e84f1cb62a128d68e5a6c9d6524db",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "392242aa_9fc1d1f4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 24534
      },
      "writtenOn": "2023-02-07T07:22:04Z",
      "side": 1,
      "message": "Yeah this is also something under consideration, the new instruction format supports disassembler. The current disassembler is also implemented in a semi-automatic way. It currently supports most general and FP\u0026SIMD instructions, but since elements need to be manually encoded and decoded, we may not be able to replace the current implementation of disassembler at first. We may make a patch to support the encoding and decoding of all xxx instructions in the new assembler, then we can replace the old implementation with the new implementation. But when we get the instruction table and element table we will eventually replace the old version with the new design.\n\nPerhaps this is a rough plan:\n1, Bring the design to consensus. (We are here now).\n2, Parsing the xml document, get the new instruction table and element table.\n3, Merge the framework, new instruction table and element table into the master branch. Since this is a completely new branch, it does not affect the correctness of the existing assembler. And now we can enable an unsupported instruction with the new path.\n4, Add encoding and decoding of more elements, replacing replaceable instructions in the old path.\n5ï¼ŒApply the new instruction table to disassembler.\n6, Share the instruction table, element table and encoding and decoding codes among the disassembler and assembler.\n7, (Optional) If anyone is interested, more effort can be spent on improving this parsing script to automate the encoding and decoding of elements. But it might be a little hard to do, with some text recognition work to do.\n\nThis is just my rough plan and may change depending on the situation. Thanks.",
      "parentUuid": "06b70f58_9f0cabc1",
      "revId": "f5c5d375471e84f1cb62a128d68e5a6c9d6524db",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "aa0ec053_e24dc77c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 13315
      },
      "writtenOn": "2023-02-27T17:50:10Z",
      "side": 1,
      "message": "Thanks. This approach looks good overall. I think the next step would be adding the generated tables (including a nontrivial portions of the instructions), then we can take a look at how the tables look like, how things fit together, and do a detailed review. At this point no major comment needs to be addressed. Thanks.",
      "parentUuid": "3052c124_2a29d936",
      "revId": "f5c5d375471e84f1cb62a128d68e5a6c9d6524db",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4a7bca0b_a394c25f",
        "filename": "src/cmd/internal/obj/arm64/inst.go",
        "patchSetId": 5
      },
      "lineNbr": 19,
      "author": {
        "id": 13315
      },
      "writtenOn": "2023-02-06T22:21:16Z",
      "side": 1,
      "message": "Do we want to use strings for these fields? Maybe a numerical type with named constants (like enums) would be better?",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 19,
        "endChar": 51
      },
      "revId": "f5c5d375471e84f1cb62a128d68e5a6c9d6524db",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "344ffe46_b53e9fae",
        "filename": "src/cmd/internal/obj/arm64/inst.go",
        "patchSetId": 5
      },
      "lineNbr": 19,
      "author": {
        "id": 24534
      },
      "writtenOn": "2023-02-07T02:16:41Z",
      "side": 1,
      "message": "Yes, I\u0027ll update it in the next patch set.",
      "parentUuid": "4a7bca0b_a394c25f",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 19,
        "endChar": 51
      },
      "revId": "f5c5d375471e84f1cb62a128d68e5a6c9d6524db",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ee2a676f_be0a41f2",
        "filename": "src/cmd/internal/obj/arm64/inst.go",
        "patchSetId": 5
      },
      "lineNbr": 54,
      "author": {
        "id": 22750
      },
      "writtenOn": "2023-02-07T04:48:03Z",
      "side": 1,
      "message": "I\u0027m guessing you\u0027d probably do it this way anyway... but I think it will be cleaner if the generated table is in an entirely different file?",
      "range": {
        "startLine": 53,
        "startChar": 0,
        "endLine": 54,
        "endChar": 22
      },
      "revId": "f5c5d375471e84f1cb62a128d68e5a6c9d6524db",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e9fd557f_56551467",
        "filename": "src/cmd/internal/obj/arm64/inst.go",
        "patchSetId": 5
      },
      "lineNbr": 54,
      "author": {
        "id": 24534
      },
      "writtenOn": "2023-02-07T07:22:04Z",
      "side": 1,
      "message": "Yeah, I\u0027ll put the table in a separate file in the future.",
      "parentUuid": "ee2a676f_be0a41f2",
      "range": {
        "startLine": 53,
        "startChar": 0,
        "endLine": 54,
        "endChar": 22
      },
      "revId": "f5c5d375471e84f1cb62a128d68e5a6c9d6524db",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}