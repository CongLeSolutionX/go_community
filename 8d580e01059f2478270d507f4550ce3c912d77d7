{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "65c59ccd_ffce5bef",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 28783
      },
      "writtenOn": "2021-11-22T18:14:08Z",
      "side": 1,
      "message": "Here\u0027s some proposed text on adding a release note for 1.18 about non-mono-morphizable functions.  Let me know what you think - do we need this release note at all, less or more detail, etc.?\n\nAlso, if we do want this note, I could see moving both of the implementation limitations down under the compiler section, rather than here in the language section.\n",
      "revId": "8d580e01059f2478270d507f4550ce3c912d77d7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a31fd396_46f04503",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5206
      },
      "writtenOn": "2021-11-22T18:56:30Z",
      "side": 1,
      "message": "It\u0027s not obvious to me that we need a release note about this.  It seems to me that these programs are invalid.  So the release note amounts to saying \"the compiler does not accept invalid programs\", which is definitely a good thing, but I don\u0027t know why it needs to be in the release notes.\n\nBut maybe I\u0027m missing something.",
      "revId": "8d580e01059f2478270d507f4550ce3c912d77d7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9c4aadc1_16aa0a6b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5440
      },
      "writtenOn": "2021-11-22T19:06:59Z",
      "side": 1,
      "message": "Yeah, I agree with Ian.",
      "parentUuid": "a31fd396_46f04503",
      "revId": "8d580e01059f2478270d507f4550ce3c912d77d7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "53b3a229_c3d72fc6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 28783
      },
      "writtenOn": "2021-11-22T19:07:47Z",
      "side": 1,
      "message": "As far as I know, the current updated spec doesn\u0027t mention non-monomorphizable functions or exclude them in any way (but Robert, correct me if I\u0027m wrong or if you intend to add that to the spec).  They are generally valid (though not necessarily useful).  We could likely support them if we had some support for run-time instantiations and dictionaries in the implementation, but we don\u0027t, so we don\u0027t allow them.\n\nIt may still be the case that this isn\u0027t worth a release note, though.",
      "parentUuid": "a31fd396_46f04503",
      "revId": "8d580e01059f2478270d507f4550ce3c912d77d7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "215f4a4b_70cd7a23",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5206
      },
      "writtenOn": "2021-11-22T19:13:23Z",
      "side": 1,
      "message": "My feeling is that the generics support in Go must permit an implementation that does pure monomorphization.  The fact that an implementation using dictionaries could perhaps support non-monomorphizable functions doesn\u0027t negate that.\n\nBut I\u0027m happy to hear other opinions.",
      "parentUuid": "53b3a229_c3d72fc6",
      "revId": "8d580e01059f2478270d507f4550ce3c912d77d7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}