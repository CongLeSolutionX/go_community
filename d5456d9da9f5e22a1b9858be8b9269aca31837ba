{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "7d089c64_acebe285",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-10-20T20:45:50Z",
      "side": 1,
      "message": "Superseded.",
      "parentUuid": "e1e8f58d_80d1e70d",
      "tag": "autogenerated:trybots~beginning",
      "revId": "d5456d9da9f5e22a1b9858be8b9269aca31837ba",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "727ada65_c2b4621b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-10-20T20:45:50Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003dd5456d9d",
      "tag": "autogenerated:trybots~beginning",
      "revId": "d5456d9da9f5e22a1b9858be8b9269aca31837ba",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "398bde11_6a292a8d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-10-20T20:51:23Z",
      "side": 1,
      "message": "Build is still in progress... Status page: https://farmer.golang.org/try?commit\u003dd5456d9d\nFailed on linux-amd64-unified: https://storage.googleapis.com/go-build-log/d5456d9d/linux-amd64-unified_2b5fc0d9.log\nOther builds still in progress; subsequent failure notices suppressed until final report.\n\nConsult https://build.golang.org/ to see whether they are new failures. Keep in mind that TryBots currently test *exactly* your git commit, without rebasing. If your commit\u0027s git parent is old, the failure might\u0027ve already been fixed.\n",
      "parentUuid": "727ada65_c2b4621b",
      "tag": "autogenerated:trybots~progress",
      "revId": "d5456d9da9f5e22a1b9858be8b9269aca31837ba",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "16c7dd83_8a485081",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 31647
      },
      "writtenOn": "2021-10-20T21:05:15Z",
      "side": 1,
      "message": "This is a real failure. Calling Underlying() during SetConstraint from the unified reader is not OK.\n\nWe can work around this by making the implicit interface on TypeParam itself lazy (another sync.once...), or by providing a way to peek the constraint underlying and adjusting the API.\n\nAdding mdempsky, who may have thoughts.",
      "parentUuid": "398bde11_6a292a8d",
      "revId": "d5456d9da9f5e22a1b9858be8b9269aca31837ba",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dd0995fc_cb5a13e5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-10-20T21:07:09Z",
      "side": 1,
      "message": "1 of 26 TryBots failed.\nFailed on linux-amd64-unified: https://storage.googleapis.com/go-build-log/d5456d9d/linux-amd64-unified_2b5fc0d9.log\n\nConsult https://build.golang.org/ to see whether they are new failures. Keep in mind that TryBots currently test *exactly* your git commit, without rebasing. If your commit\u0027s git parent is old, the failure might\u0027ve already been fixed.\n\n",
      "parentUuid": "727ada65_c2b4621b",
      "tag": "autogenerated:trybots~failed",
      "revId": "d5456d9da9f5e22a1b9858be8b9269aca31837ba",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "838f6775_d7710360",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5440
      },
      "writtenOn": "2021-10-20T21:24:22Z",
      "side": 1,
      "message": "cmd/compile bits look reasonable to me.\n\nWhat\u0027s with all the NewInterface TODOs though? They all seemed fine at a glance.",
      "revId": "d5456d9da9f5e22a1b9858be8b9269aca31837ba",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ac3803e0_6411fe38",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 31647
      },
      "writtenOn": "2021-10-21T00:31:52Z",
      "side": 1,
      "message": "Sorry, you\u0027re right and I just haven\u0027t gone through to address all the TODOs. At some point I realized that they were all fine, and we only really needed to work with \u0027implicit\u0027 in one place.\n\nI added you as a reviewer at this point because of the trybot failure on the unified builder -- I commented in the trybot thread but the following code causes problems for the unified builder now:\n\ntype I[T I[T]] interface {\n  ...\n}\n\nThis is problematic for the lazy reader because SetConstraint now wants to check the underlying of the constraint of T to see if it\u0027s an interface (so that we can determine whether to wrap in an implicit interface). This is re-entrant for lazy loading, so deadlocks.\n\nWe can fix this in a number of ways and I wanted to get your thoughts.\n - We could have a new API to set constraints that allows passing the implicit bit explicitly, and have the lazy loader peek the underlying somehow.\n - We could just set the constraint on the type param, whatever it is, and \u0027lazily\u0027 create the interface on the type param. This would probably require a synchronization mechanism on TypeParam, which would be unfortunate.\n - We could mutate underlying in the lazy resolution func before we call SetConstraint.\n\nSorry, should have been clearer when I added you.",
      "parentUuid": "838f6775_d7710360",
      "revId": "d5456d9da9f5e22a1b9858be8b9269aca31837ba",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f044c29a_46881ed8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5440
      },
      "writtenOn": "2021-10-21T18:26:35Z",
      "side": 1,
      "message": "Ah, I see. I missed the trybot failure comment.\n\nFor now, the lazy API is only provided by types2 and only used by unified IR, so I think extending unified IR to explicitly pass the implicit bit sounds reasonable and least invasive. Maybe something to revisit if/when we want to extend it to go/types though.",
      "parentUuid": "ac3803e0_6411fe38",
      "revId": "d5456d9da9f5e22a1b9858be8b9269aca31837ba",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}