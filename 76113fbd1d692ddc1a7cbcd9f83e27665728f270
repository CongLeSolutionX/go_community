{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "cf40ae67_8d3380d2",
        "filename": "/COMMIT_MSG",
        "patchSetId": 9
      },
      "lineNbr": 29,
      "author": {
        "id": 13315
      },
      "writtenOn": "2024-03-11T21:15:31Z",
      "side": 1,
      "message": "I\u0027m worried about those, too. Maybe it is fine for now.",
      "revId": "76113fbd1d692ddc1a7cbcd9f83e27665728f270",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e43cd344_f207a5a9",
        "filename": "src/cmd/compile/internal/ssa/rewrite.go",
        "patchSetId": 9
      },
      "lineNbr": 1298,
      "author": {
        "id": 13315
      },
      "writtenOn": "2024-03-11T21:15:31Z",
      "side": 1,
      "message": "(Not specifically this CL) on some architectures (including ARM64), OpArg is loaded with a zero- or sign-extension based on the signedness of the type, e.g. for an int32 typed arg, it uses a signed 32-bit load. Maybe we should check for whether the type is unsigned, at least on some architectures. (Maybe we can change the load instruction to be always unsigned? Not sure.)",
      "range": {
        "startLine": 1297,
        "startChar": 0,
        "endLine": 1298,
        "endChar": 27
      },
      "revId": "76113fbd1d692ddc1a7cbcd9f83e27665728f270",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "94b8ff27_2594258c",
        "filename": "src/cmd/compile/internal/ssa/rewrite.go",
        "patchSetId": 9
      },
      "lineNbr": 1298,
      "author": {
        "id": 5200
      },
      "writtenOn": "2024-03-12T19:37:10Z",
      "side": 1,
      "message": "Yes, this is a problem. This function is only used by amd64 and arm64, but arm64 has this problem if you have enough arguments:\n```\npackage main\n\n//go:noinline\nfunc f(_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, x int32) uint64 {\n\treturn uint64(uint32(x))\n}\n\n//go:noinline\nfunc g(_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, x uint32) int64 {\n\treturn int64(int32(x))\n}\n\nfunc main() {\n\tif got :\u003d f(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1); got !\u003d 0xffffffff {\n\t\tprintln(\"bad f\", got)\n\t}\n\tif got :\u003d g(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xffffffff); got !\u003d -1 {\n\t\tprintln(\"bad g\", got)\n\t}\n}\n```",
      "parentUuid": "e43cd344_f207a5a9",
      "range": {
        "startLine": 1297,
        "startChar": 0,
        "endLine": 1298,
        "endChar": 27
      },
      "revId": "76113fbd1d692ddc1a7cbcd9f83e27665728f270",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5640a604_fcba81a9",
        "filename": "src/cmd/compile/internal/ssa/rewrite.go",
        "patchSetId": 9
      },
      "lineNbr": 1298,
      "author": {
        "id": 5200
      },
      "writtenOn": "2024-03-12T19:37:31Z",
      "side": 1,
      "message": "I will make a different CL for this.",
      "parentUuid": "94b8ff27_2594258c",
      "range": {
        "startLine": 1297,
        "startChar": 0,
        "endLine": 1298,
        "endChar": 27
      },
      "revId": "76113fbd1d692ddc1a7cbcd9f83e27665728f270",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}