{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "82b8bd23_ccdec2e6",
        "filename": "src/cmd/compile/internal/ssa/gen/ARM64.rules",
        "patchSetId": 2
      },
      "lineNbr": 1785,
      "author": {
        "id": 5200
      },
      "writtenOn": "2021-03-15T21:29:18Z",
      "side": 1,
      "message": "lc \u003c 64 probably isn\u0027t necessary. All SLLconst operations should guarantee the shift amount is 0-63 inclusive.\nAlthough looking now, we don\u0027t assert that for ARM64 shift ops. Probably we should (e.g. see SHLQconst in AMD64Ops.go) and audit any rewrites that generate SLLconst (and related ops).\nAlso lc is int64, not uint64, so negative numbers would pass, which you probably don\u0027t want.\n\nYou can change this to 0 \u003c\u003d lc \u0026\u0026 lc \u003c 64 for now, or do the cleanup I mentioned first, then rebase this on top of that, and get rid of the condition.",
      "range": {
        "startLine": 1785,
        "startChar": 31,
        "endLine": 1785,
        "endChar": 38
      },
      "revId": "43caecf9fdde59a445355d54dca9b1499475f5b5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "484f776a_a8fac1e5",
        "filename": "src/cmd/compile/internal/ssa/gen/ARM64.rules",
        "patchSetId": 2
      },
      "lineNbr": 1785,
      "author": {
        "id": 21345
      },
      "writtenOn": "2021-03-18T06:30:45Z",
      "side": 1,
      "message": "I will do this. Thank you for the comments.",
      "parentUuid": "82b8bd23_ccdec2e6",
      "range": {
        "startLine": 1785,
        "startChar": 31,
        "endLine": 1785,
        "endChar": 38
      },
      "revId": "43caecf9fdde59a445355d54dca9b1499475f5b5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "303671c6_474dd02d",
        "filename": "src/cmd/compile/internal/ssa/gen/ARM64.rules",
        "patchSetId": 2
      },
      "lineNbr": 1785,
      "author": {
        "id": 21345
      },
      "writtenOn": "2021-03-18T07:09:37Z",
      "side": 1,
      "message": "Hi Keith, I find that there are so many rules with SLLconst op that do not add \"0\u003c\u003dlc\" as a constraint. For example, the rule on line 1781. Do we need to also add the constraint as \"0 \u003c\u003d lc \u0026\u0026 lc \u003c32\"? \n\nAnd I have another question. For the following go code, the compiler will report that the negative shift number is invalid. So can we assert that the shift amount is in the range [0, 63]?\n   // go code.\n   func test(x int32) int32 { return x \u003c\u003c -2 }\n   // error message.\n   constant -2 overflows uint\n  \nThank you.",
      "parentUuid": "484f776a_a8fac1e5",
      "range": {
        "startLine": 1785,
        "startChar": 31,
        "endLine": 1785,
        "endChar": 38
      },
      "revId": "43caecf9fdde59a445355d54dca9b1499475f5b5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "53c5769c_c9b23c86",
        "filename": "src/cmd/compile/internal/ssa/gen/ARM64.rules",
        "patchSetId": 2
      },
      "lineNbr": 1785,
      "author": {
        "id": 5200
      },
      "writtenOn": "2021-03-18T16:36:10Z",
      "side": 1,
      "message": "Yes, we should be able to assert that. Go shifts can be negative, just not negative constants:\n\nfunc test(x int32) int32 {\n   s :\u003d -2\n   return x\u003c\u003cs\n}\n\n(Negative shifts will panic.)\n\nBut we\u0027re talking about the architecture shift instruction, not the Go one. Checks for negative shift amounts, or large shift amounts, and the Go semantics of such things, are already taken care of by the SSA builder.\n\nSo we can ensure that the constant argument of a SLLconst is always 0 to 63. Just have to make sure we declare it so in the Ops.go file, and enforce it during any rule that generates it.\n\n(SLL x (MOVDconst [c])) \u003d\u003e (SLLconst [c\u002663] x)\n\nBecause the semantics of SLL (not a Go shift) are that it only uses the low 6 bits.\n\n\nSince there are a lot of places that check the range, we should definitely go the route of enforcing that the constant shift operations always have an in-range shift amount. I suspect it\u0027s already the case, but we should document it and check all the rules that generate one to make sure we maintain that invariant. Then we can just delete the lc \u003c 32 conditions.",
      "parentUuid": "303671c6_474dd02d",
      "range": {
        "startLine": 1785,
        "startChar": 31,
        "endLine": 1785,
        "endChar": 38
      },
      "revId": "43caecf9fdde59a445355d54dca9b1499475f5b5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5a42a6a1_fafcf653",
        "filename": "src/cmd/compile/internal/ssa/gen/ARM64.rules",
        "patchSetId": 2
      },
      "lineNbr": 1785,
      "author": {
        "id": 21345
      },
      "writtenOn": "2021-03-22T03:37:39Z",
      "side": 1,
      "message": "Hi Keith. Sorry for the late reply. Thank you for the explanation.\n\nAnd I have a question. In some rewritten rules, the expression of shift has guaranteed that its range is in [0, 63]. For example, in the following rule, the return result of log64() function is always in [0, 63].\n\n (MUL x (MOVDconst [c])) \u0026\u0026 isPowerOfTwo64(c) \u003d\u003e (SLLconst [log64(c)] x)\n\nMy question is whether we still need to add \"\u002663\" operation for shift number? Thank you.",
      "parentUuid": "53c5769c_c9b23c86",
      "range": {
        "startLine": 1785,
        "startChar": 31,
        "endLine": 1785,
        "endChar": 38
      },
      "revId": "43caecf9fdde59a445355d54dca9b1499475f5b5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8f4a74de_7cfde44f",
        "filename": "src/cmd/compile/internal/ssa/gen/ARM64.rules",
        "patchSetId": 2
      },
      "lineNbr": 1785,
      "author": {
        "id": 21345
      },
      "writtenOn": "2021-03-22T11:06:24Z",
      "side": 1,
      "message": "The action patch https://go-review.googlesource.com/c/go/+/303569. Please help to review it. Thank you.",
      "parentUuid": "5a42a6a1_fafcf653",
      "range": {
        "startLine": 1785,
        "startChar": 31,
        "endLine": 1785,
        "endChar": 38
      },
      "revId": "43caecf9fdde59a445355d54dca9b1499475f5b5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "80dcf7b9_38b00912",
        "filename": "src/cmd/compile/internal/ssa/gen/ARM64.rules",
        "patchSetId": 2
      },
      "lineNbr": 1785,
      "author": {
        "id": 21345
      },
      "writtenOn": "2021-03-29T03:39:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8f4a74de_7cfde44f",
      "range": {
        "startLine": 1785,
        "startChar": 31,
        "endLine": 1785,
        "endChar": 38
      },
      "revId": "43caecf9fdde59a445355d54dca9b1499475f5b5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}