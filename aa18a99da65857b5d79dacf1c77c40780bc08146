{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "9ca77697_e8c4345c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 50,
      "author": {
        "id": 24096
      },
      "writtenOn": "2021-03-16T10:07:17Z",
      "side": 1,
      "message": "Updates #31265",
      "revId": "aa18a99da65857b5d79dacf1c77c40780bc08146",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d87ccea8_1377626e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5200
      },
      "writtenOn": "2021-03-15T19:10:25Z",
      "side": 1,
      "message": "These instructions are in MIPS32r2 but not earlier, right?\n\nOur compatibility docs: https://github.com/golang/go/wiki/MinimumRequirements#mips64-big-endian\n\nFor 32 bit, we only require MIPS32r1, so I don\u0027t think we can use these instructions (at least, unguarded - see how POPCNT is used in amd64 for an example).\nFor 64 bit, we require MIPS III or higher. Do the shifts exist in that revision?",
      "revId": "aa18a99da65857b5d79dacf1c77c40780bc08146",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "74e77235_8491d145",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5200
      },
      "writtenOn": "2021-03-15T19:11:24Z",
      "side": 1,
      "message": "The other option is to bump our minimum arch. Not to be done lightly, but we could consider it.",
      "parentUuid": "d87ccea8_1377626e",
      "revId": "aa18a99da65857b5d79dacf1c77c40780bc08146",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "07b9b8a7_de2ad8a0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5200
      },
      "writtenOn": "2021-03-15T19:13:31Z",
      "side": 1,
      "message": "(or introduce a new GOMIPS value)",
      "parentUuid": "74e77235_8491d145",
      "revId": "aa18a99da65857b5d79dacf1c77c40780bc08146",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d563c422_3563e5bc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 50943
      },
      "writtenOn": "2021-03-16T08:10:04Z",
      "side": 1,
      "message": "Yes, those are instructions in the MIPS32r2 ISA. Too bad, I really thought the minimum requirement was already MIPS32r2.\n\nWell in this case I personally would prefer to go the GOMIPS env value path. I think we would need to take a proposal round for this, aren\u0027t we?\n\nI\u0027ve also found an older proposal where the discussion was to introduce the same for GOMIPS64, e.g. \"GOMIPS64\u003dsoftfloat,2\" which has been abandoned: https://github.com/golang/go/issues/35008\n\nThe consensus there was, that it wasn\u0027t clear if the added complexity would be worth the benefits. Maybe the benchstat showed in this CL might change the consensus because of the clear high impact on the crypto performance by introducing the ROTR instructions.\n\nRegarding MIPS64: ROTR and ROTRV are the 32bit rotations, those should already be in MIPS64 ISA (which is newer than MIPSIII). MIPS64r2 also added the 64bit equivalents (DROTR \u0026 DROTRV), which we could additionally use to intrinsify `bits.RotateLeft64`.\nTherefore we would also have to use at least the MIPS64 ISA on GOARCH\u003dmips64 to intrinsify `bits.RotateLeft32` on mips64.\n\nShould I create a new proposal to add an ISA instruction version to GOMIPS and GOMIPS64 similar to GOARM? Or should I comment to the old closed proposal?",
      "parentUuid": "07b9b8a7_de2ad8a0",
      "revId": "aa18a99da65857b5d79dacf1c77c40780bc08146",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4cd095e7_b0589ae7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 29707
      },
      "writtenOn": "2021-03-16T08:12:06Z",
      "side": 1,
      "message": "Another approach would be to intrisify rotate (or rotate + add) to shfts and or and benchmark it. From the github issue it seems that the part of the problem this CL is trying to resolve comes from bits.RotateLeft32 not being inlined at all.",
      "parentUuid": "07b9b8a7_de2ad8a0",
      "revId": "aa18a99da65857b5d79dacf1c77c40780bc08146",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "95a94050_a3de0abf",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 7530
      },
      "writtenOn": "2021-03-16T09:16:33Z",
      "side": 1,
      "message": "FYI this CL adds ROTR rules by checking FMA \nhttps://go-review.googlesource.com/c/go/+/280292",
      "revId": "aa18a99da65857b5d79dacf1c77c40780bc08146",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "769be8f0_5bf95d17",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 50943
      },
      "writtenOn": "2021-03-16T09:53:52Z",
      "side": 1,
      "message": "Dragan you are right, that\u0027s a very good point. I\u0027ve again investigated what happens during the compilation and investigated the assembly code generated.\n\nI\u0027ve found the following observations wit Go1.16:\nThe compiler already intrinsifies the `bits.RotateLeft32` to \"shifts and or\" and inlines them into the `quarterRound` function. But it fails to inline the `quarterRound` into the `xorKeyStreamBlocksGeneric` function.\n\nWhereas if `quarterRound` does not use `bits.RotateLeft32` and the calls to them are replaced with \"shifts and or\" in the Go code, the assembly code for `quarterRound` is almost identical. Additionally the compiler is able to inline the whole `quarterRound` into `xorKeyStreamBlocksGeneric` and therefore there are no calls to `quarterRound` anymore.\n\nBenchmarks of the following configurations on our MT7688 platform:\n- old.txt: Go1.16\n- new-shifts.txt: Go1.16 but `bits.RotateLeft32` replaced with \"shifts and or\" in Go code of `quarterRound`, which leads to the same assembly code for `quarterRound` as Go1.16. Additionally the compiler has inlined `quarterRound` into `xorKeyStreamBlocksGeneric`.\n- new-rotr.txt: Patched Go 1.16 which intrinsifies `bits.RotateLeft32` to \"ROTR\", which also leads to `quarterRound` being inlined into `xorKeyStreamBlocksGeneric`.\n\n# benchstat old.txt new-shifts.txt\nname                         old speed      new speed      delta\nChacha20Poly1305/Open-16      258kB/s ±46%   388kB/s ±13%  +50.39%  (p\u003d0.000 n\u003d10+10)\nChacha20Poly1305/Seal-16      246kB/s ±35%   393kB/s ±16%  +59.76%  (p\u003d0.000 n\u003d10+10)\nChacha20Poly1305/Open-64      927kB/s ±31%  1253kB/s ±13%  +35.17%  (p\u003d0.000 n\u003d10+10)\nChacha20Poly1305/Seal-64      993kB/s ±10%  1295kB/s ±12%  +30.37%  (p\u003d0.000 n\u003d9+10)\nChacha20Poly1305/Open-256    1.70MB/s ±13%  2.17MB/s ±11%  +27.50%  (p\u003d0.000 n\u003d9+10)\nChacha20Poly1305/Seal-256    1.74MB/s ±17%  2.24MB/s ±18%  +28.80%  (p\u003d0.000 n\u003d10+10)\nChacha20Poly1305/Open-1024   2.26MB/s ±15%  2.92MB/s ±20%  +29.23%  (p\u003d0.000 n\u003d10+10)\nChacha20Poly1305/Seal-1024   2.20MB/s ±13%  2.97MB/s ±13%  +35.49%  (p\u003d0.000 n\u003d10+10)\nChacha20Poly1305/Open-8192   2.31MB/s ±19%  3.06MB/s ±12%  +32.74%  (p\u003d0.000 n\u003d10+10)\nChacha20Poly1305/Seal-8192   2.30MB/s ±29%  3.19MB/s ±12%  +38.52%  (p\u003d0.000 n\u003d10+10)\nChacha20Poly1305/Open-16384  2.34MB/s ±10%  2.79MB/s ±11%  +19.13%  (p\u003d0.000 n\u003d9+10)\nChacha20Poly1305/Seal-16384  2.23MB/s ±17%  2.94MB/s ±10%  +31.97%  (p\u003d0.000 n\u003d10+10)\n\n# benchstat new-shifts.txt new-rotr.txt\nname                         old speed      new speed      delta\nChacha20Poly1305/Open-16      388kB/s ±13%   431kB/s ±32%     ~     (p\u003d0.170 n\u003d10+10)\nChacha20Poly1305/Seal-16      393kB/s ±16%   527kB/s ±13%  +34.10%  (p\u003d0.000 n\u003d10+10)\nChacha20Poly1305/Open-64     1.25MB/s ±13%  1.66MB/s ±22%  +32.80%  (p\u003d0.000 n\u003d10+10)\nChacha20Poly1305/Seal-64     1.29MB/s ±12%  1.71MB/s ± 8%  +31.95%  (p\u003d0.000 n\u003d10+8)\nChacha20Poly1305/Open-256    2.17MB/s ±11%  2.90MB/s ±18%  +34.03%  (p\u003d0.000 n\u003d10+10)\nChacha20Poly1305/Seal-256    2.24MB/s ±18%  2.81MB/s ±28%  +25.12%  (p\u003d0.002 n\u003d10+10)\nChacha20Poly1305/Open-1024   2.92MB/s ±20%  3.99MB/s ±20%  +36.48%  (p\u003d0.000 n\u003d10+10)\nChacha20Poly1305/Seal-1024   2.97MB/s ±13%  3.92MB/s ±32%  +31.98%  (p\u003d0.001 n\u003d10+10)\nChacha20Poly1305/Open-8192   3.06MB/s ±12%  4.24MB/s ±14%  +38.40%  (p\u003d0.000 n\u003d10+10)\nChacha20Poly1305/Seal-8192   3.19MB/s ±12%  4.09MB/s ±19%  +28.25%  (p\u003d0.000 n\u003d10+10)\nChacha20Poly1305/Open-16384  2.79MB/s ±11%  3.93MB/s ±19%  +41.05%  (p\u003d0.000 n\u003d10+10)\nChacha20Poly1305/Seal-16384  2.94MB/s ±10%  3.79MB/s ±23%  +28.81%  (p\u003d0.000 n\u003d10+10)\n\nROTR seems to bring in an additional improvement of about 30% compared to the \"shifts and or with inlined `quarterRound`\" version.",
      "parentUuid": "4cd095e7_b0589ae7",
      "revId": "aa18a99da65857b5d79dacf1c77c40780bc08146",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "beb3c9a6_6def6c4e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 50943
      },
      "writtenOn": "2021-03-16T10:37:29Z",
      "side": 1,
      "message": "Thanks for the reference to your CL. If I might ask, what\u0027s the meaning of the FMA flag for GOMIPS? (I\u0027m completely new to the Go compiler internals)\n\nI\u0027ve tried to take a look into the code but could only find one reference where the flag will be set to false for GOOS\u003d\u003d\"plan9\". I must have overlooked something, will this flag be set dependent on the ISA version the cpu supports?",
      "parentUuid": "95a94050_a3de0abf",
      "revId": "aa18a99da65857b5d79dacf1c77c40780bc08146",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "79de5e83_6cc7a620",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 7530
      },
      "writtenOn": "2021-03-16T12:35:39Z",
      "side": 1,
      "message": "If your target is mips(32) only, you can do intrinsic for mips only.\nThe minimum requirement for mips is mipsr2 (has ROTR) while mips64 is mips iii(no ROTR)\n\nMaybe you can wait for my CL got merged instead mixing asm/ssa together.",
      "parentUuid": "beb3c9a6_6def6c4e",
      "revId": "aa18a99da65857b5d79dacf1c77c40780bc08146",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d511b383_993cc694",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 50943
      },
      "writtenOn": "2021-03-16T12:47:38Z",
      "side": 1,
      "message": "As soon as your CL https://go-review.googlesource.com/c/go/+/280114 has been merged, we could remove all the asm from this CL, which is great.\n\nBut I\u0027m still confused about the minimum requirement for mips32. You mention mips32r2 is the minimal requirement for mips32, but as mentioned earlier by Keith the link https://github.com/golang/go/wiki/MinimumRequirements#mips-big-endian-and-mipsle-little-endian mentions mips32r1 as minimal requirement for mips32.",
      "parentUuid": "79de5e83_6cc7a620",
      "revId": "aa18a99da65857b5d79dacf1c77c40780bc08146",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7f56e259_6a861b66",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 7530
      },
      "writtenOn": "2021-03-16T13:59:08Z",
      "side": 1,
      "message": "Sorry for the misleading. It\u0027s mips32r1.",
      "parentUuid": "d511b383_993cc694",
      "revId": "aa18a99da65857b5d79dacf1c77c40780bc08146",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "67ce5b6d_3fa6b0cd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5200
      },
      "writtenOn": "2021-03-16T15:05:15Z",
      "side": 1,
      "message": "Yes, If you think we should bump the minimum ISA or add a GOMIPS value, that would require a proposal.\n#35008 was for GOMIPS64, not GOMIPS, so we\u0027ll need a new issue. Do include a reference to that issue, though.\n\nI\u0027m kinda on the fence for this. The performance gains are pretty good, but at the same time it is pretty specialized code. It might even warrant its own assembly (lots of other archs have assembly for this).\n\nAnother data point that would be useful is to see if guarded instructions, ala x86\u0027s POPCNT, would perform reasonably well. I realize that might take some work. A hacky way to do it might be to take your ROTR patch, generate the assembly, then modify the assembly with dummy load/compare/branch instructions before every ROTR.",
      "parentUuid": "769be8f0_5bf95d17",
      "revId": "aa18a99da65857b5d79dacf1c77c40780bc08146",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f668efda_4c53d537",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 50943
      },
      "writtenOn": "2021-03-16T16:28:26Z",
      "side": 1,
      "message": "Do you see any chance to get the proposal for bumping ISA or add another GOMIPS value to be accepted?\n\nSince now the ROTR/ROTRV assembly instructions have landed in master for MIPS with CL https://go-review.googlesource.com/c/go/+/280114 this is the only missing part to intrinsify bits.RotateLeft32 on MIPS. I personally think this would bring the MIPS arch on par with all other archs which also intrinsify RotateLeft32 (c.f. https://github.com/golang/go/issues/31265#issuecomment-542997755 ).",
      "parentUuid": "67ce5b6d_3fa6b0cd",
      "revId": "aa18a99da65857b5d79dacf1c77c40780bc08146",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9bba2f4d_a08ab1db",
        "filename": "src/cmd/compile/internal/ssa/gen/MIPS.rules",
        "patchSetId": 1
      },
      "lineNbr": 115,
      "author": {
        "id": 5200
      },
      "writtenOn": "2021-03-15T19:10:25Z",
      "side": 1,
      "message": "I\u0027d rather do these in an order-independent way\n\n(RotateLeft32 x y) \u003d\u003e (ROTR x (NEG \u003cy.Type\u003e y))\n(ROTR x (MOVWconst [c])) \u003d\u003e (ROTRconst [c\u002631] x)\n\nIt looks like Rotate isn\u0027t currently generated with a non-constant amount to rotate. That\u0027s probably why the rules are currently as is, it didn\u0027t need to handle non-constant rotates before.",
      "revId": "aa18a99da65857b5d79dacf1c77c40780bc08146",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7785d430_afce2fd5",
        "filename": "src/cmd/compile/internal/ssa/gen/MIPS64.rules",
        "patchSetId": 1
      },
      "lineNbr": 114,
      "author": {
        "id": 5200
      },
      "writtenOn": "2021-03-15T19:10:25Z",
      "side": 1,
      "message": "Same here.",
      "revId": "aa18a99da65857b5d79dacf1c77c40780bc08146",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f2b1a1eb_4fe0bba2",
        "filename": "src/cmd/compile/internal/ssa/gen/MIPS64Ops.go",
        "patchSetId": 1
      },
      "lineNbr": 211,
      "author": {
        "id": 5200
      },
      "writtenOn": "2021-03-15T19:10:25Z",
      "side": 1,
      "message": "64?",
      "range": {
        "startLine": 211,
        "startChar": 109,
        "endLine": 211,
        "endChar": 111
      },
      "revId": "aa18a99da65857b5d79dacf1c77c40780bc08146",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "74770b94_c483b6a0",
        "filename": "src/cmd/compile/internal/ssagen/ssa.go",
        "patchSetId": 1
      },
      "lineNbr": 4402,
      "author": {
        "id": 5200
      },
      "writtenOn": "2021-03-15T19:10:25Z",
      "side": 1,
      "message": "Add mips64 here?",
      "revId": "aa18a99da65857b5d79dacf1c77c40780bc08146",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}