{
  "comments": [
    {
      "key": {
        "uuid": "66c719e5_a9b78ab5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 6010
      },
      "writtenOn": "2020-09-13T17:59:17Z",
      "side": 1,
      "message": "For the record, this does not feel right to be. `Is` should be about comparing type identity, not kind I\u0027m fairly sure. Surely people can already use `As` to do this check?",
      "revId": "95bb00d1088767ed14e3bd1a5f533a690d619a5f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "df359fdc_1305d1c8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 8455
      },
      "writtenOn": "2020-09-13T18:19:09Z",
      "side": 1,
      "message": "As an API user, the behaviour implemented here and in the other CL is definitely not the one I expect.  The one I expect is the one described in *Working with Errors in Go 1.13,* in the *Customizing error tests with Is and As methods* section[1].  That is, first compare the types, and then compare the meaningful data.  In fact, that is how gRPC\u0027s `statusError` does it as well[2].\n\n[1][https://blog.golang.org/go1.13-errors#TOC_4%2E]\n\n[2][https://github.com/grpc/grpc-go/blob/5e8f83304c0563d1ba74db05fee83d9c18ab9a58/internal/status/status.go#L154]",
      "parentUuid": "66c719e5_a9b78ab5",
      "revId": "95bb00d1088767ed14e3bd1a5f533a690d619a5f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0b0e58e1_f82c2225",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 38859
      },
      "writtenOn": "2020-09-13T18:42:19Z",
      "side": 1,
      "message": "Thanks again Emmanuel!\n\nWas looking into Unwrap and As... maybe I didn\u0027t understand it correctly, but it seems to be relevant only if the error implementing it wraps another error in its struct, which is the case only for MarshalerError - which already has Unwrap implemented",
      "revId": "95bb00d1088767ed14e3bd1a5f533a690d619a5f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "406fc6b8_80a065e6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 38859
      },
      "writtenOn": "2020-09-13T18:42:19Z",
      "side": 1,
      "message": "You\u0027re right, I misunderstood things. Opening a CL with the fixes.\nThanks for the feedback!",
      "parentUuid": "df359fdc_1305d1c8",
      "revId": "95bb00d1088767ed14e3bd1a5f533a690d619a5f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}