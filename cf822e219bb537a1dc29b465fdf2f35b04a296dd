{
  "comments": [
    {
      "key": {
        "uuid": "7f23be0c_e873a7b4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 11
      },
      "lineNbr": 80,
      "author": {
        "id": 5137
      },
      "writtenOn": "2020-04-15T02:23:36Z",
      "side": 1,
      "message": "Lol!",
      "revId": "cf822e219bb537a1dc29b465fdf2f35b04a296dd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "79ab7b36_84a324ef",
        "filename": "/COMMIT_MSG",
        "patchSetId": 11
      },
      "lineNbr": 80,
      "author": {
        "id": 11715
      },
      "writtenOn": "2020-05-05T22:08:10Z",
      "side": 1,
      "message": "^^",
      "parentUuid": "7f23be0c_e873a7b4",
      "revId": "cf822e219bb537a1dc29b465fdf2f35b04a296dd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c362c3b9_455faf5b",
        "filename": "src/crypto/x509/internal/macOS/corefoundation.go",
        "patchSetId": 11
      },
      "lineNbr": 35,
      "author": {
        "id": 5200
      },
      "writtenOn": "2020-04-15T17:24:21Z",
      "side": 1,
      "message": "Any reason to tie to this particular version? There\u0027s an alias to the current version at\n\n/System/Library/Frameworks/CoreFoundation.framework/CoreFoundation",
      "range": {
        "startLine": 35,
        "startChar": 78,
        "endLine": 35,
        "endChar": 155
      },
      "revId": "cf822e219bb537a1dc29b465fdf2f35b04a296dd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "54a74b92_9f562111",
        "filename": "src/crypto/x509/internal/macOS/corefoundation.go",
        "patchSetId": 11
      },
      "lineNbr": 35,
      "author": {
        "id": 11715
      },
      "writtenOn": "2020-05-05T22:08:10Z",
      "side": 1,
      "message": "I think we are relying on ABI compatibility here not to break, and if a B version were introduced I expect we\u0027d not be compatible with it, even if it were still API compatible. Do I misunderstand what the versions represent?",
      "parentUuid": "c362c3b9_455faf5b",
      "range": {
        "startLine": 35,
        "startChar": 78,
        "endLine": 35,
        "endChar": 155
      },
      "revId": "cf822e219bb537a1dc29b465fdf2f35b04a296dd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bf7109d2_4017facc",
        "filename": "src/crypto/x509/internal/macOS/corefoundation.go",
        "patchSetId": 11
      },
      "lineNbr": 36,
      "author": {
        "id": 5137
      },
      "writtenOn": "2020-04-15T02:23:36Z",
      "side": 1,
      "message": "Please remove this newline and for all the other spots. The usual style is to keep these pragmas bound to the definition without a newline.",
      "revId": "cf822e219bb537a1dc29b465fdf2f35b04a296dd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8b856a34_7f9b1ca6",
        "filename": "src/crypto/x509/internal/macOS/corefoundation.go",
        "patchSetId": 11
      },
      "lineNbr": 36,
      "author": {
        "id": 11715
      },
      "writtenOn": "2020-05-05T22:08:10Z",
      "side": 1,
      "message": "I don\u0027t see go:cgo_import_dynamic pragmas attached to a function anywhere else, and unfortunately they would leak into the godoc.",
      "parentUuid": "bf7109d2_4017facc",
      "revId": "cf822e219bb537a1dc29b465fdf2f35b04a296dd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "04f87fc2_2c3c5e4e",
        "filename": "src/crypto/x509/internal/macOS/corefoundation.go",
        "patchSetId": 11
      },
      "lineNbr": 37,
      "author": {
        "id": 5200
      },
      "writtenOn": "2020-04-15T17:24:21Z",
      "side": 1,
      "message": "These names are weird. I\u0027d call this CFStringFromString or StringToCFString or something.\nOr is the intent that these match the Core Foundation functions of the same name?",
      "range": {
        "startLine": 37,
        "startChar": 5,
        "endLine": 37,
        "endChar": 28
      },
      "revId": "cf822e219bb537a1dc29b465fdf2f35b04a296dd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2e7cae5b_32c27b1b",
        "filename": "src/crypto/x509/internal/macOS/corefoundation.go",
        "patchSetId": 11
      },
      "lineNbr": 37,
      "author": {
        "id": 11715
      },
      "writtenOn": "2020-05-05T22:08:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "04f87fc2_2c3c5e4e",
      "range": {
        "startLine": 37,
        "startChar": 5,
        "endLine": 37,
        "endChar": 28
      },
      "revId": "cf822e219bb537a1dc29b465fdf2f35b04a296dd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fe77b4d5_caaabc79",
        "filename": "src/crypto/x509/internal/macOS/corefoundation.go",
        "patchSetId": 11
      },
      "lineNbr": 44,
      "author": {
        "id": 5137
      },
      "writtenOn": "2020-04-15T02:23:36Z",
      "side": 1,
      "message": "Newline before this, please.",
      "revId": "cf822e219bb537a1dc29b465fdf2f35b04a296dd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4b289ca4_651b22ff",
        "filename": "src/crypto/x509/internal/macOS/corefoundation.go",
        "patchSetId": 11
      },
      "lineNbr": 44,
      "author": {
        "id": 11715
      },
      "writtenOn": "2020-05-05T22:08:10Z",
      "side": 1,
      "message": "This file is already visually noisy, I prefer to keep the trampoline definition attached to the caller function.",
      "parentUuid": "fe77b4d5_caaabc79",
      "revId": "cf822e219bb537a1dc29b465fdf2f35b04a296dd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "29ab0d95_8e678fe5",
        "filename": "src/crypto/x509/internal/macOS/corefoundation.go",
        "patchSetId": 11
      },
      "lineNbr": 49,
      "author": {
        "id": 5200
      },
      "writtenOn": "2020-04-15T17:24:21Z",
      "side": 1,
      "message": "These seem typed like everything is interface{}. Maybe introduce CFStringRef, CFDictionaryRef, etc.? That will avoid type errors by the caller.\nIs this function used with different key types, or is it always string?",
      "range": {
        "startLine": 49,
        "startChar": 35,
        "endLine": 49,
        "endChar": 50
      },
      "revId": "cf822e219bb537a1dc29b465fdf2f35b04a296dd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "804c8074_4ae7eb2e",
        "filename": "src/crypto/x509/internal/macOS/corefoundation.go",
        "patchSetId": 11
      },
      "lineNbr": 49,
      "author": {
        "id": 11715
      },
      "writtenOn": "2020-05-05T22:08:10Z",
      "side": 1,
      "message": "I figured there was very little type safety to gain, as we mostly make up the types close to where we use them, and because the code is pretty straightforward in what comes out and what goes in.\n\nThis is a good spot to disambiguate though, with the two arguments, so I introduced type CFString.",
      "parentUuid": "29ab0d95_8e678fe5",
      "range": {
        "startLine": 49,
        "startChar": 35,
        "endLine": 49,
        "endChar": 50
      },
      "revId": "cf822e219bb537a1dc29b465fdf2f35b04a296dd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "76a9cf8a_948aa900",
        "filename": "src/crypto/x509/internal/macOS/corefoundation.go",
        "patchSetId": 11
      },
      "lineNbr": 57,
      "author": {
        "id": 5137
      },
      "writtenOn": "2020-04-15T02:23:36Z",
      "side": 1,
      "message": "ditto, newline before this.",
      "revId": "cf822e219bb537a1dc29b465fdf2f35b04a296dd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e8cf88f9_49c5f146",
        "filename": "src/crypto/x509/internal/macOS/corefoundation.go",
        "patchSetId": 11
      },
      "lineNbr": 57,
      "author": {
        "id": 11715
      },
      "writtenOn": "2020-05-05T22:08:10Z",
      "side": 1,
      "message": "Same.",
      "parentUuid": "76a9cf8a_948aa900",
      "revId": "cf822e219bb537a1dc29b465fdf2f35b04a296dd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "43d76ce9_eb876400",
        "filename": "src/crypto/x509/internal/macOS/corefoundation.go",
        "patchSetId": 11
      },
      "lineNbr": 136,
      "author": {
        "id": 5137
      },
      "writtenOn": "2020-04-15T02:23:36Z",
      "side": 1,
      "message": "Couldn\u0027t we use:\n\n//go:linkname syscall runtime.syscall\nfunc syscall(fn, a1, a2, a3, a4, a5, a6 uintptr) uintptr\n\n//go:linkname funcPC runtime.funcPC\nfunc funcPC(func()) uintptr",
      "range": {
        "startLine": 127,
        "startChar": 0,
        "endLine": 136,
        "endChar": 1
      },
      "revId": "cf822e219bb537a1dc29b465fdf2f35b04a296dd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1e3e9c5b_ce24cb2b",
        "filename": "src/crypto/x509/internal/macOS/corefoundation.go",
        "patchSetId": 11
      },
      "lineNbr": 136,
      "author": {
        "id": 11715
      },
      "writtenOn": "2020-05-05T22:08:10Z",
      "side": 1,
      "message": "Copying funcPC is less likely to break. For syscall I copied the pattern of package syscall, which makes sense to me, as it allows controlling the name of the implementation on the package runtime side, instead of letting changes there silently break stuff here.",
      "parentUuid": "43d76ce9_eb876400",
      "range": {
        "startLine": 127,
        "startChar": 0,
        "endLine": 136,
        "endChar": 1
      },
      "revId": "cf822e219bb537a1dc29b465fdf2f35b04a296dd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a70482b_e913572a",
        "filename": "src/crypto/x509/internal/macOS/security.go",
        "patchSetId": 11
      },
      "lineNbr": 1,
      "author": {
        "id": 5137
      },
      "writtenOn": "2020-04-15T02:23:36Z",
      "side": 1,
      "message": "Might be useful to add the suffix to the file name, \"security_darwin_amd64.go\"\n\nThat will make it easier to audit and for other readers/maintainers later.",
      "revId": "cf822e219bb537a1dc29b465fdf2f35b04a296dd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "28df5a6b_9133314b",
        "filename": "src/crypto/x509/internal/macOS/security.go",
        "patchSetId": 11
      },
      "lineNbr": 1,
      "author": {
        "id": 11715
      },
      "writtenOn": "2020-05-05T22:08:10Z",
      "side": 1,
      "message": "Went back and forth on this, I feel like it would be redundant in a package called macOS that will not have files for any other GOOS/GOARCH.",
      "parentUuid": "1a70482b_e913572a",
      "revId": "cf822e219bb537a1dc29b465fdf2f35b04a296dd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f3a1ec5c_8ffb1f5c",
        "filename": "src/crypto/x509/root_cgo_darwin_amd64.go",
        "patchSetId": 11
      },
      "lineNbr": 7,
      "author": {
        "id": 5137
      },
      "writtenOn": "2020-04-15T02:23:36Z",
      "side": 1,
      "message": "of",
      "range": {
        "startLine": 7,
        "startChar": 71,
        "endLine": 7,
        "endChar": 73
      },
      "revId": "cf822e219bb537a1dc29b465fdf2f35b04a296dd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "febb8795_a52276a0",
        "filename": "src/crypto/x509/root_cgo_darwin_amd64.go",
        "patchSetId": 11
      },
      "lineNbr": 7,
      "author": {
        "id": 11715
      },
      "writtenOn": "2020-05-05T22:08:10Z",
      "side": 1,
      "message": "TestSystemRoots is the thing doing the testing, not the thing being tested.",
      "parentUuid": "f3a1ec5c_8ffb1f5c",
      "range": {
        "startLine": 7,
        "startChar": 71,
        "endLine": 7,
        "endChar": 73
      },
      "revId": "cf822e219bb537a1dc29b465fdf2f35b04a296dd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d3757bae_cd1644a9",
        "filename": "src/crypto/x509/root_cgo_darwin_amd64.go",
        "patchSetId": 11
      },
      "lineNbr": 290,
      "author": {
        "id": 5137
      },
      "writtenOn": "2020-04-15T02:23:36Z",
      "side": 1,
      "message": "Does this code compile?",
      "range": {
        "startLine": 288,
        "startChar": 0,
        "endLine": 290,
        "endChar": 1
      },
      "revId": "cf822e219bb537a1dc29b465fdf2f35b04a296dd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ad828473_42ff2bde",
        "filename": "src/crypto/x509/root_cgo_darwin_amd64.go",
        "patchSetId": 11
      },
      "lineNbr": 290,
      "author": {
        "id": 11715
      },
      "writtenOn": "2020-05-05T22:08:10Z",
      "side": 1,
      "message": "Yes? The TryBots pass.",
      "parentUuid": "d3757bae_cd1644a9",
      "range": {
        "startLine": 288,
        "startChar": 0,
        "endLine": 290,
        "endChar": 1
      },
      "revId": "cf822e219bb537a1dc29b465fdf2f35b04a296dd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b0d34d9f_d1156442",
        "filename": "src/crypto/x509/root_darwin_amd64.go",
        "patchSetId": 11
      },
      "lineNbr": 41,
      "author": {
        "id": 5200
      },
      "writtenOn": "2020-04-15T17:24:21Z",
      "side": 1,
      "message": "Do you want to error out completely if one of the domains fails, but the others are ok?",
      "revId": "cf822e219bb537a1dc29b465fdf2f35b04a296dd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6aa0e8f4_2d33ec5f",
        "filename": "src/crypto/x509/root_darwin_amd64.go",
        "patchSetId": 11
      },
      "lineNbr": 41,
      "author": {
        "id": 11715
      },
      "writtenOn": "2020-05-05T22:08:10Z",
      "side": 1,
      "message": "Yeah, unless we find out it\u0027s something common and with a documented behavior: the user domain might have policies that distrust CAs in the system domain, and a transient error loading it should not make those suddenly trusted.",
      "parentUuid": "b0d34d9f_d1156442",
      "revId": "cf822e219bb537a1dc29b465fdf2f35b04a296dd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0802f81a_da5a32e5",
        "filename": "src/crypto/x509/root_darwin_amd64.go",
        "patchSetId": 11
      },
      "lineNbr": 114,
      "author": {
        "id": 5137
      },
      "writtenOn": "2020-04-15T02:23:36Z",
      "side": 1,
      "message": "What happens if all the prior certificates within each trust domain return errors?\nWe\u0027ll return a pool with no certificates and no error either.\nIs that desirable? Should we somehow be keeping track of already seen errors and then\nreturning those one we get to this section and len(trustedRoots) \u003d\u003d 0?",
      "range": {
        "startLine": 108,
        "startChar": 0,
        "endLine": 114,
        "endChar": 17
      },
      "revId": "cf822e219bb537a1dc29b465fdf2f35b04a296dd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f5bad62f_2ee05931",
        "filename": "src/crypto/x509/root_darwin_amd64.go",
        "patchSetId": 11
      },
      "lineNbr": 114,
      "author": {
        "id": 11715
      },
      "writtenOn": "2020-05-05T22:08:10Z",
      "side": 1,
      "message": "Yeah error tracking is a bit of a mess. I\u0027d rather stick to the current cgo behavior for now, and then refactor and improve the code in the next release.",
      "parentUuid": "0802f81a_da5a32e5",
      "range": {
        "startLine": 108,
        "startChar": 0,
        "endLine": 114,
        "endChar": 17
      },
      "revId": "cf822e219bb537a1dc29b465fdf2f35b04a296dd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "193219b3_f57b3431",
        "filename": "src/crypto/x509/root_darwin_amd64.go",
        "patchSetId": 11
      },
      "lineNbr": 124,
      "author": {
        "id": 5137
      },
      "writtenOn": "2020-04-15T02:23:36Z",
      "side": 1,
      "message": "Minor nit: new line after this.",
      "revId": "cf822e219bb537a1dc29b465fdf2f35b04a296dd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7d5b1878_8d054536",
        "filename": "src/crypto/x509/root_darwin_amd64.go",
        "patchSetId": 11
      },
      "lineNbr": 124,
      "author": {
        "id": 11715
      },
      "writtenOn": "2020-05-05T22:08:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "193219b3_f57b3431",
      "revId": "cf822e219bb537a1dc29b465fdf2f35b04a296dd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "84a89a5d_39a8b6b7",
        "filename": "src/crypto/x509/root_darwin_amd64.go",
        "patchSetId": 11
      },
      "lineNbr": 130,
      "author": {
        "id": 5137
      },
      "writtenOn": "2020-04-15T02:23:36Z",
      "side": 1,
      "message": "Minor nit, let\u0027s ensure that both have non zero lengths, lest a certificate with no\nfields will sneak through this test\n\nfunc isRootCertificate(cert *Certificate) bool {\n\treturn len(cert.RawSubject) !\u003d 0 \u0026\u0026\n               len(cert.RawIssuer) !\u003d 0 \u0026\u0026 \n               bytes.Equal(cert.RawSubject, cert.RawIssuer)\n}\n\nMight seem a little paranoid, but a check for root certificates should be extra paranoid :)",
      "revId": "cf822e219bb537a1dc29b465fdf2f35b04a296dd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1b67ebd5_853a94db",
        "filename": "src/crypto/x509/root_darwin_amd64.go",
        "patchSetId": 11
      },
      "lineNbr": 130,
      "author": {
        "id": 11715
      },
      "writtenOn": "2020-05-05T22:08:10Z",
      "side": 1,
      "message": "The Raw fields can\u0027t possibly be empty, the certificate would not parse without a valid ASN.1 STRUCTURE in there. Also, returning false doesn\u0027t make the certificate any less trusted, just differently.",
      "parentUuid": "84a89a5d_39a8b6b7",
      "revId": "cf822e219bb537a1dc29b465fdf2f35b04a296dd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}