{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "684f280b_c4c08355",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 5440
      },
      "writtenOn": "2023-11-15T00:30:50Z",
      "side": 1,
      "message": "ving",
      "revId": "3871aa612fa69f877cea522adc19a450a3c21213",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1df93c85_6f55a2f2",
        "filename": "src/cmd/compile/internal/inline/inlheur/scoring.go",
        "patchSetId": 10
      },
      "lineNbr": 74,
      "author": {
        "id": 5440
      },
      "writtenOn": "2023-11-15T00:30:50Z",
      "side": 1,
      "message": "Why? Seems like more work for both users and the compiler to remember which adjustments are paired, when the underlying map[scoreAdjustTyp]int could be directly marshalled to/from JSON instead.\n\nAlso, consider having scoreAdjustTyp implement encoding.Text{M,Unm}arshaler (probably by using x/tools/cmd/stringer), so that the JSON files use the strings rather than magic constants.",
      "range": {
        "startLine": 70,
        "startChar": 34,
        "endLine": 74,
        "endChar": 11
      },
      "revId": "3871aa612fa69f877cea522adc19a450a3c21213",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ec36d309_beaa59d3",
        "filename": "src/cmd/compile/internal/inline/inlheur/scoring.go",
        "patchSetId": 10
      },
      "lineNbr": 105,
      "author": {
        "id": 5440
      },
      "writtenOn": "2023-11-15T00:30:50Z",
      "side": 1,
      "message": "nit: Within array and slice composite literals, you don\u0027t need to repeat the element type. E.g., []AdjTypeAndScore{{...}, {...}} is fine.",
      "range": {
        "startLine": 105,
        "startChar": 2,
        "endLine": 105,
        "endChar": 16
      },
      "revId": "3871aa612fa69f877cea522adc19a450a3c21213",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "072295e7_ff3786ea",
        "filename": "src/cmd/compile/internal/inline/inlheur/scoring.go",
        "patchSetId": 10
      },
      "lineNbr": 659,
      "author": {
        "id": 5440
      },
      "writtenOn": "2023-11-15T00:30:50Z",
      "side": 1,
      "message": "nit: \"maxBudget\"",
      "range": {
        "startLine": 659,
        "startChar": 21,
        "endLine": 659,
        "endChar": 27
      },
      "revId": "3871aa612fa69f877cea522adc19a450a3c21213",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b5417e0a_95642c92",
        "filename": "src/cmd/compile/internal/inline/inlheur/scoring.go",
        "patchSetId": 10
      },
      "lineNbr": 660,
      "author": {
        "id": 5440
      },
      "writtenOn": "2023-11-15T00:30:50Z",
      "side": 1,
      "message": "Where is the doubling?",
      "range": {
        "startLine": 660,
        "startChar": 25,
        "endLine": 660,
        "endChar": 42
      },
      "revId": "3871aa612fa69f877cea522adc19a450a3c21213",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}