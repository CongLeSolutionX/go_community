{
  "comments": [
    {
      "key": {
        "uuid": "c6fcc8b3_0f956fa0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 5167
      },
      "writtenOn": "2020-08-21T03:46:56Z",
      "side": 1,
      "message": "These buffer sizes make me sad, but sometimes that\u0027s life.\n\nIf the linker\u0027s allocation is so sensitive to these, would it be possible to make a really fast pre-pass over all of the object files just to figure out these sizes and then allocate these structures? Or would that not work because duplicates would cause it to be too much of an overestimate? (Even crazier: add a Bloom filter to the object file that the linker can bitwise-or and use to estimate the final number of symbols post-dupok!)",
      "revId": "e25e73c0827882cbdf6a2512d1efa7ff828a116d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6ed833c4_dea8b21e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 13315
      },
      "writtenOn": "2020-08-21T14:38:45Z",
      "side": 1,
      "message": "A pre-pass seems reasonable. Maybe we could preallocate something like\nNpkgsyms + C1 * Nhashedsyms + C2 * Nnonpkgsyms\nwhere C1, C2 are constants less than 1, possibly depending on total number of object files. In fact, we already don\u0027t even process hashed symbols and non-package symbols until all objects are loaded, and it should be easy to move the process of package symbols later if necessary.\n\nFor Bloom filter, I\u0027m not sure how big it would be. I think the optimal size is related to total number of symbols, which is not known when compiling one package.\n\nI\u0027m not sure why it is so sensitive. If the preallocation is too big, yeah, it will use more memory. If it is too small, the runtime should do pretty reasonable things to grow it, right? I thought the preallocation is mainly to help reduce the first a few rounds of doubling when it is small.",
      "parentUuid": "c6fcc8b3_0f956fa0",
      "revId": "e25e73c0827882cbdf6a2512d1efa7ff828a116d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0aba6cdf_0898f56c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 5167
      },
      "writtenOn": "2020-08-23T02:44:40Z",
      "side": 1,
      "message": "The runtime will still grow these structures in 25% increments. That\u0027s pretty much exactly the scale of growth we saw in allocations, so maybe it was just on a cusp before and this pushed it just over a cusp?",
      "parentUuid": "6ed833c4_dea8b21e",
      "revId": "e25e73c0827882cbdf6a2512d1efa7ff828a116d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e523e4b7_ae70e48a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 5167
      },
      "writtenOn": "2020-08-24T01:43:02Z",
      "side": 1,
      "message": "Want to go ahead and submit this one? I don\u0027t think it depends on anything in the parent CL.",
      "revId": "e25e73c0827882cbdf6a2512d1efa7ff828a116d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ca55c5c4_971109eb",
        "filename": "src/cmd/link/internal/loader/loader.go",
        "patchSetId": 5
      },
      "lineNbr": 2157,
      "author": {
        "id": 5167
      },
      "writtenOn": "2020-08-21T03:46:56Z",
      "side": 1,
      "message": "Does this mean we can make some other map smaller?",
      "range": {
        "startLine": 2157,
        "startChar": 52,
        "endLine": 2157,
        "endChar": 57
      },
      "revId": "e25e73c0827882cbdf6a2512d1efa7ff828a116d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "53af7a06_7936ed6e",
        "filename": "src/cmd/link/internal/loader/loader.go",
        "patchSetId": 5
      },
      "lineNbr": 2157,
      "author": {
        "id": 32560
      },
      "writtenOn": "2020-08-25T17:10:27Z",
      "side": 1,
      "message": "No.",
      "parentUuid": "ca55c5c4_971109eb",
      "range": {
        "startLine": 2157,
        "startChar": 52,
        "endLine": 2157,
        "endChar": 57
      },
      "revId": "e25e73c0827882cbdf6a2512d1efa7ff828a116d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}