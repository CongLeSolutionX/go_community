{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "0b49a867_2458f76f",
        "filename": "src/internal/runtime/maps/table.go",
        "patchSetId": 8
      },
      "lineNbr": 535,
      "author": {
        "id": 25391
      },
      "writtenOn": "2024-10-07T20:40:37Z",
      "side": 1,
      "message": "associative",
      "range": {
        "startLine": 535,
        "startChar": 23,
        "endLine": 535,
        "endChar": 35
      },
      "fixSuggestions": [
        {
          "fixId": "4910cd81_6ef53b15",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "src/internal/runtime/maps/table.go",
              "range": {
                "startLine": 535,
                "startChar": 0,
                "endLine": 536,
                "endChar": 0
              },
              "replacement": "\t\t// Multiplication is associative across modulo operations,\n"
            }
          ]
        }
      ],
      "revId": "8087ecf9693b7346ca0a6a691f5880de4149a412",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e40a79d6_24fe2ae5",
        "filename": "src/internal/runtime/maps/table.go",
        "patchSetId": 8
      },
      "lineNbr": 557,
      "author": {
        "id": 25391
      },
      "writtenOn": "2024-10-07T20:40:37Z",
      "side": 1,
      "message": "if we started iterating at one of these duplicate directory entries, we wouldn\u0027t iterate over it first, but last instead (as we came around and dirIdx%len(directory) got us back to the beginning).\n\nnot sure this is worth worrying about at all, but does this make the random iteration order slightly biased? that is, it\u0027s slightly more likely that certain elements will appear last in the iteration order.",
      "range": {
        "startLine": 557,
        "startChar": 3,
        "endLine": 557,
        "endChar": 47
      },
      "revId": "8087ecf9693b7346ca0a6a691f5880de4149a412",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ac2d4998_03723878",
        "filename": "src/internal/runtime/maps/table.go",
        "patchSetId": 8
      },
      "lineNbr": 662,
      "author": {
        "id": 25391
      },
      "writtenOn": "2024-10-07T20:40:37Z",
      "side": 1,
      "message": "just clarifying: this skip is load-bearing and not just an optimization, as the comment implies. it is not sufficient to just continue at the top of the loop, and the reason is that it could happen that newTab.index \u003d\u003d dirIdx post-split. do I have that right?\n\nI think this might be worth a comment and possibly an example.",
      "range": {
        "startLine": 660,
        "startChar": 4,
        "endLine": 662,
        "endChar": 11
      },
      "revId": "8087ecf9693b7346ca0a6a691f5880de4149a412",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "36cd55ba_7a565a7b",
        "filename": "src/internal/runtime/maps/table.go",
        "patchSetId": 8
      },
      "lineNbr": 667,
      "author": {
        "id": 25391
      },
      "writtenOn": "2024-10-07T20:40:37Z",
      "side": 1,
      "message": "why? performance? (I assume it\u0027s just performance, but saying that in the TODO would be helpful.)",
      "range": {
        "startLine": 666,
        "startChar": 3,
        "endLine": 667,
        "endChar": 29
      },
      "revId": "8087ecf9693b7346ca0a6a691f5880de4149a412",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}