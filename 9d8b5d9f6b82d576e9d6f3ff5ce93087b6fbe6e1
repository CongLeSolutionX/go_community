{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "b6cf213f_11be04bf",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 31647
      },
      "writtenOn": "2024-10-07T13:38:23Z",
      "side": 1,
      "message": "Thanks, this is a very nice simplification. The CL looks good, but I had a couple nontrivial comments.",
      "revId": "9d8b5d9f6b82d576e9d6f3ff5ce93087b6fbe6e1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "171bcc71_d3954510",
        "filename": "src/cmd/compile/internal/types2/example_test.go",
        "patchSetId": 2
      },
      "lineNbr": 144,
      "author": {
        "id": 31647
      },
      "writtenOn": "2024-10-07T13:38:23Z",
      "side": 1,
      "message": "Is this actually preferable to sort.Strings? I don\u0027t see an advantage (and in fact, there is at least one minor though irrelevant disadvantage in binary size.) Generally speaking, if there is no downside to the existing code, we prefer to leave it as-is.\n\nThis comment applies to all replacements of sort.Strings in this CL.\n\n(But maybe I\u0027m missing something).",
      "range": {
        "startLine": 144,
        "startChar": 2,
        "endLine": 144,
        "endChar": 13
      },
      "revId": "9d8b5d9f6b82d576e9d6f3ff5ce93087b6fbe6e1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "16dcfd2a_c57cdb62",
        "filename": "src/cmd/compile/internal/types2/example_test.go",
        "patchSetId": 2
      },
      "lineNbr": 144,
      "author": {
        "id": 64373
      },
      "writtenOn": "2024-10-07T14:02:12Z",
      "side": 1,
      "message": "sort.Strings in 1.23 is only a wrapper of slices.Sort, so I think the binary size at least will not be bigger. And all this replacements have been done in other standard packages.",
      "parentUuid": "171bcc71_d3954510",
      "range": {
        "startLine": 144,
        "startChar": 2,
        "endLine": 144,
        "endChar": 13
      },
      "revId": "9d8b5d9f6b82d576e9d6f3ff5ce93087b6fbe6e1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "16372ed2_f8f7ff31",
        "filename": "src/cmd/compile/internal/types2/example_test.go",
        "patchSetId": 2
      },
      "lineNbr": 144,
      "author": {
        "id": 31647
      },
      "writtenOn": "2024-10-07T14:31:03Z",
      "side": 1,
      "message": "Ack, SGTM. Then let\u0027s just sort out the other question.",
      "parentUuid": "16dcfd2a_c57cdb62",
      "range": {
        "startLine": 144,
        "startChar": 2,
        "endLine": 144,
        "endChar": 13
      },
      "revId": "9d8b5d9f6b82d576e9d6f3ff5ce93087b6fbe6e1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "41bdc2c5_7cd4ce63",
        "filename": "src/cmd/compile/internal/types2/typeset.go",
        "patchSetId": 2
      },
      "lineNbr": 354,
      "author": {
        "id": 31647
      },
      "writtenOn": "2024-10-07T13:38:23Z",
      "side": 1,
      "message": "I think we should either:\n 1. replace `object.less` with `object.cmp`, or\n 2. inline the call to object.less here, and delete object.less\n \nThis is the only call to object.less, so the handling for equality in object.less is redundant with the check on 349. I mildly vote for option (1), to make the change in this CL as small as possible.",
      "range": {
        "startLine": 352,
        "startChar": 0,
        "endLine": 354,
        "endChar": 2
      },
      "revId": "9d8b5d9f6b82d576e9d6f3ff5ce93087b6fbe6e1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}