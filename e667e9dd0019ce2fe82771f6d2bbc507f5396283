{
  "comments": [
    {
      "key": {
        "uuid": "fe4e9867_4521e68d",
        "filename": "src/runtime/proc.go",
        "patchSetId": 3
      },
      "lineNbr": 2637,
      "author": {
        "id": 5167
      },
      "writtenOn": "2020-01-22T15:06:09Z",
      "side": 1,
      "message": "Could you add a comment explaining the first part of this condition?\n\nIt seems like P x could be idle while P y deletes a bunch of timers in P x\u0027s timer heap, and those still won\u0027t get cleaned up.",
      "revId": "e667e9dd0019ce2fe82771f6d2bbc507f5396283",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6246e730_42658e30",
        "filename": "src/runtime/proc.go",
        "patchSetId": 3
      },
      "lineNbr": 2637,
      "author": {
        "id": 5206
      },
      "writtenOn": "2020-01-22T15:47:51Z",
      "side": 1,
      "message": "I added a comment pointing the the comment later in the function.\n\nI agree that what you describe could happen.  I don\u0027t know whether it is more important to avoid that situation or to reduce timer lock contention.  Do you have an opinion?",
      "parentUuid": "fe4e9867_4521e68d",
      "revId": "e667e9dd0019ce2fe82771f6d2bbc507f5396283",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b195c2c6_817f52a1",
        "filename": "src/runtime/proc.go",
        "patchSetId": 3
      },
      "lineNbr": 2637,
      "author": {
        "id": 5167
      },
      "writtenOn": "2020-01-22T15:56:30Z",
      "side": 1,
      "message": "Hmm. Since we\u0027d only be doing this if there were a significant number of deleted timers, I think I\u0027d lean toward doing the cleanup even for other Ps, *but* only if numTimers is also over some threshold (1000?). It\u0027s too bad we can\u0027t do a \"try lock\" in that case, though. It could lead to convoying where several Ps notice that some heap is overly deleted and all pile up trying to fix it.\n\nI\u0027m not really sure though...",
      "parentUuid": "6246e730_42658e30",
      "revId": "e667e9dd0019ce2fe82771f6d2bbc507f5396283",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "54427ade_b1f89df8",
        "filename": "src/runtime/proc.go",
        "patchSetId": 3
      },
      "lineNbr": 2637,
      "author": {
        "id": 5206
      },
      "writtenOn": "2020-01-22T18:10:36Z",
      "side": 1,
      "message": "Yeah, I\u0027m worried about the pileup too.  I\u0027m going to postpone this, maybe until 1.15 (if we don\u0027t change data structures).",
      "parentUuid": "b195c2c6_817f52a1",
      "revId": "e667e9dd0019ce2fe82771f6d2bbc507f5396283",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "90a20c95_d272eb9d",
        "filename": "src/runtime/time.go",
        "patchSetId": 3
      },
      "lineNbr": 974,
      "author": {
        "id": 5167
      },
      "writtenOn": "2020-01-22T15:06:09Z",
      "side": 1,
      "message": "Can this check numTimers? (It would be nice if it could check deletedTimers, but I don\u0027t think it can because that\u0027s updated without the lock. But numTimers is always updated under the lock.)",
      "revId": "e667e9dd0019ce2fe82771f6d2bbc507f5396283",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "94096f77_0b7e4785",
        "filename": "src/runtime/time.go",
        "patchSetId": 3
      },
      "lineNbr": 974,
      "author": {
        "id": 5206
      },
      "writtenOn": "2020-01-22T15:47:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "90a20c95_d272eb9d",
      "revId": "e667e9dd0019ce2fe82771f6d2bbc507f5396283",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}