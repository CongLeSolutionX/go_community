{
  "comments": [
    {
      "key": {
        "uuid": "303774bc_cc94be7a",
        "filename": "src/runtime/mbitmap.go",
        "patchSetId": 2
      },
      "lineNbr": 6,
      "author": {
        "id": 5167
      },
      "writtenOn": "2017-02-09T22:07:01Z",
      "side": 1,
      "message": "Undo",
      "revId": "5f4f27cc06981eef150ff56d6cd404a24708d3fd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bb4b8db5_9ea43c7b",
        "filename": "src/runtime/mbitmap.go",
        "patchSetId": 2
      },
      "lineNbr": 272,
      "author": {
        "id": 5167
      },
      "writtenOn": "2017-02-09T22:07:01Z",
      "side": 1,
      "message": "// obj must point to the heap, but may be an interior pointer.\n\nAlso, consider naming it ptr since it may not point to the beginning of an object.",
      "revId": "5f4f27cc06981eef150ff56d6cd404a24708d3fd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c6b1634f_b43b7092",
        "filename": "src/runtime/mbitmap.go",
        "patchSetId": 2
      },
      "lineNbr": 273,
      "author": {
        "id": 5167
      },
      "writtenOn": "2017-02-09T22:07:01Z",
      "side": 1,
      "message": "Consider moving these this sentence down to the call to setMarked. This isn\u0027t a property of the API.",
      "revId": "5f4f27cc06981eef150ff56d6cd404a24708d3fd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dde9f178_752bac5a",
        "filename": "src/runtime/mbitmap.go",
        "patchSetId": 2
      },
      "lineNbr": 276,
      "author": {
        "id": 5167
      },
      "writtenOn": "2017-02-09T22:07:01Z",
      "side": 1,
      "message": "Same comment about how it doesn\u0027t make sense to combine nosplit and systemstack.",
      "revId": "5f4f27cc06981eef150ff56d6cd404a24708d3fd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "91af5fc5_34d1e03d",
        "filename": "src/runtime/mbitmap.go",
        "patchSetId": 2
      },
      "lineNbr": 297,
      "author": {
        "id": 5167
      },
      "writtenOn": "2017-02-09T22:07:01Z",
      "side": 1,
      "message": "I don\u0027t think this comment is necessary.",
      "revId": "5f4f27cc06981eef150ff56d6cd404a24708d3fd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "475c6f1d_4d79a25d",
        "filename": "src/runtime/mbitmap.go",
        "patchSetId": 2
      },
      "lineNbr": 337,
      "author": {
        "id": 5167
      },
      "writtenOn": "2017-02-09T22:07:01Z",
      "side": 1,
      "message": "Remove blank line",
      "revId": "5f4f27cc06981eef150ff56d6cd404a24708d3fd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0aeee795_88cef939",
        "filename": "src/runtime/mbitmap.go",
        "patchSetId": 2
      },
      "lineNbr": 340,
      "author": {
        "id": 5167
      },
      "writtenOn": "2017-02-09T22:07:01Z",
      "side": 1,
      "message": "Debugging code, I assume? Remove.\n\n(Interestingly, this is preventing refillAllocCache from inlining, which could be slowing down the allocator)",
      "revId": "5f4f27cc06981eef150ff56d6cd404a24708d3fd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4d57905d_613a47aa",
        "filename": "src/runtime/mbitmap.go",
        "patchSetId": 2
      },
      "lineNbr": 344,
      "author": {
        "id": 5167
      },
      "writtenOn": "2017-02-09T22:07:01Z",
      "side": 1,
      "message": "Definitely remove. :)",
      "revId": "5f4f27cc06981eef150ff56d6cd404a24708d3fd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b9fb56e2_19e7f534",
        "filename": "src/runtime/mbitmap.go",
        "patchSetId": 2
      },
      "lineNbr": 655,
      "author": {
        "id": 5167
      },
      "writtenOn": "2017-02-09T22:07:01Z",
      "side": 1,
      "message": "I don\u0027t think nowritebarrierrec is necessary here. publish itself doesn\u0027t care that it not have write barriers. Anything that calls it that cares is what should be marked nowritebarrierrec.",
      "revId": "5f4f27cc06981eef150ff56d6cd404a24708d3fd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3ff059ee_ae8f5f7d",
        "filename": "src/runtime/mbitmap.go",
        "patchSetId": 2
      },
      "lineNbr": 656,
      "author": {
        "id": 5167
      },
      "writtenOn": "2017-02-09T22:07:01Z",
      "side": 1,
      "message": "Don\u0027t combine nosplit and systemstack.",
      "revId": "5f4f27cc06981eef150ff56d6cd404a24708d3fd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6f189281_888deee8",
        "filename": "src/runtime/mbitmap.go",
        "patchSetId": 2
      },
      "lineNbr": 661,
      "author": {
        "id": 5167
      },
      "writtenOn": "2017-02-09T22:07:01Z",
      "side": 1,
      "message": "Use sys.PtrSize instead.",
      "revId": "5f4f27cc06981eef150ff56d6cd404a24708d3fd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "03eb3864_4ac49298",
        "filename": "src/runtime/mbitmap.go",
        "patchSetId": 2
      },
      "lineNbr": 663,
      "author": {
        "id": 5167
      },
      "writtenOn": "2017-02-09T22:07:01Z",
      "side": 1,
      "message": "Since these may be interior pointers, consider using \"ptr\" instead.",
      "revId": "5f4f27cc06981eef150ff56d6cd404a24708d3fd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c63db698_adcc5d74",
        "filename": "src/runtime/mbitmap.go",
        "patchSetId": 2
      },
      "lineNbr": 666,
      "author": {
        "id": 5167
      },
      "writtenOn": "2017-02-09T22:07:01Z",
      "side": 1,
      "message": "pubwork?",
      "range": {
        "startLine": 666,
        "startChar": 15,
        "endLine": 666,
        "endChar": 19
      },
      "revId": "5f4f27cc06981eef150ff56d6cd404a24708d3fd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fe85b7c5_70c309ea",
        "filename": "src/runtime/mbitmap.go",
        "patchSetId": 2
      },
      "lineNbr": 681,
      "author": {
        "id": 5167
      },
      "writtenOn": "2017-02-09T22:07:01Z",
      "side": 1,
      "message": "This can be tighter:\n\nn :\u003d span.elemsize\nfor i :\u003d uintptr(0); i \u003c n; i, hbits \u003d i+sys.PtrSize, hbits.next() {\n  // ... use base + i instead of slot\n}",
      "revId": "5f4f27cc06981eef150ff56d6cd404a24708d3fd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1794a22b_4c4303d8",
        "filename": "src/runtime/mbitmap.go",
        "patchSetId": 2
      },
      "lineNbr": 697,
      "author": {
        "id": 5167
      },
      "writtenOn": "2017-02-09T22:07:01Z",
      "side": 1,
      "message": "This is a fairly expensive way to test if b contains pointers. Instead:\n\nspan :\u003d spanOf(b)  // (you already have this above)\nif span.spanclass.noscan() {\n    continue\n}",
      "revId": "5f4f27cc06981eef150ff56d6cd404a24708d3fd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5c16f58f_8a30c0db",
        "filename": "src/runtime/mbitmap.go",
        "patchSetId": 2
      },
      "lineNbr": 746,
      "author": {
        "id": 5167
      },
      "writtenOn": "2017-02-09T22:07:01Z",
      "side": 1,
      "message": "\"simply\"\n\nThough I\u0027m not entirely sure what this sentence is saying. Is this a statement about what heapBitsBulkPublish does or about a requirement on its caller? I don\u0027t see any logic that obviously handles src\u003d\u003ddst different.",
      "range": {
        "startLine": 746,
        "startChar": 21,
        "endLine": 746,
        "endChar": 27
      },
      "revId": "5f4f27cc06981eef150ff56d6cd404a24708d3fd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3969a04b_e39f5127",
        "filename": "src/runtime/mbitmap.go",
        "patchSetId": 2
      },
      "lineNbr": 749,
      "author": {
        "id": 5167
      },
      "writtenOn": "2017-02-09T22:07:01Z",
      "side": 1,
      "message": "bitmap",
      "range": {
        "startLine": 749,
        "startChar": 8,
        "endLine": 749,
        "endChar": 15
      },
      "revId": "5f4f27cc06981eef150ff56d6cd404a24708d3fd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "76429ea4_efd78d9e",
        "filename": "src/runtime/mbitmap.go",
        "patchSetId": 2
      },
      "lineNbr": 756,
      "author": {
        "id": 5167
      },
      "writtenOn": "2017-02-09T22:07:01Z",
      "side": 1,
      "message": "This looks identical to bulkBarrierPrewrite (except for the src\u003d\u003d0 case). Is there something I\u0027m missing? Is this going to change in a future CL?",
      "revId": "5f4f27cc06981eef150ff56d6cd404a24708d3fd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3813ccf0_7bf6bf6c",
        "filename": "src/runtime/mbitmap.go",
        "patchSetId": 2
      },
      "lineNbr": 756,
      "author": {
        "id": 5167
      },
      "writtenOn": "2017-02-09T22:21:41Z",
      "side": 1,
      "message": "Also, the src and dst arguments here are reversed relative to all of the other APIs.",
      "parentUuid": "76429ea4_efd78d9e",
      "revId": "5f4f27cc06981eef150ff56d6cd404a24708d3fd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4c73c248_ac09be94",
        "filename": "src/runtime/mbitmap.go",
        "patchSetId": 2
      },
      "lineNbr": 762,
      "author": {
        "id": 5167
      },
      "writtenOn": "2017-02-09T22:07:01Z",
      "side": 1,
      "message": "It seems like writeBarrier.needed should just always be set if debug.gcroc \u003e 0, so this check could just be if !writeBarrier.needed { ... }",
      "revId": "5f4f27cc06981eef150ff56d6cd404a24708d3fd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "352e52db_9f8142a7",
        "filename": "src/runtime/mbitmap.go",
        "patchSetId": 2
      },
      "lineNbr": 855,
      "author": {
        "id": 5167
      },
      "writtenOn": "2017-02-09T22:07:01Z",
      "side": 1,
      "message": "Same comment: it seems like debug.gcroc \u003e 0 should be folded into the value of writeBarrier.needed",
      "revId": "5f4f27cc06981eef150ff56d6cd404a24708d3fd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "704fc12c_c78ba5cb",
        "filename": "src/runtime/mbitmap.go",
        "patchSetId": 2
      },
      "lineNbr": 1010,
      "author": {
        "id": 5167
      },
      "writtenOn": "2017-02-09T22:07:01Z",
      "side": 1,
      "message": "ensure",
      "range": {
        "startLine": 1010,
        "startChar": 28,
        "endLine": 1010,
        "endChar": 34
      },
      "revId": "5f4f27cc06981eef150ff56d6cd404a24708d3fd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8bebbfc7_3015d165",
        "filename": "src/runtime/mbitmap.go",
        "patchSetId": 2
      },
      "lineNbr": 1021,
      "author": {
        "id": 5167
      },
      "writtenOn": "2017-02-09T22:07:01Z",
      "side": 1,
      "message": "I can\u0027t parse this. Is it supposed to be \"forces publishing of objects written to stack slots\"?",
      "range": {
        "startLine": 1020,
        "startChar": 31,
        "endLine": 1021,
        "endChar": 25
      },
      "revId": "5f4f27cc06981eef150ff56d6cd404a24708d3fd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a4161e67_a2987804",
        "filename": "src/runtime/mbitmap.go",
        "patchSetId": 2
      },
      "lineNbr": 1032,
      "author": {
        "id": 5167
      },
      "writtenOn": "2017-02-09T22:07:01Z",
      "side": 1,
      "message": "Can\u0027t use both nosplit and systemstack.",
      "revId": "5f4f27cc06981eef150ff56d6cd404a24708d3fd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c65a9af6_87ee0f50",
        "filename": "src/runtime/mgcwork.go",
        "patchSetId": 2
      },
      "lineNbr": 453,
      "author": {
        "id": 5167
      },
      "writtenOn": "2017-02-09T22:07:01Z",
      "side": 1,
      "message": "Since this is new code, it would be nicer if these were just *workbuf. wbufptr isn\u0027t necessary any more and just makes the code harder to read. I have a CL out for master that eliminates wbufptr entirely.",
      "revId": "5f4f27cc06981eef150ff56d6cd404a24708d3fd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "10c8c973_0a50f8bd",
        "filename": "src/runtime/mgcwork.go",
        "patchSetId": 2
      },
      "lineNbr": 454,
      "author": {
        "id": 5167
      },
      "writtenOn": "2017-02-09T22:07:01Z",
      "side": 1,
      "message": "// lfstack of full buffers\n\n(We should introduce a real type for lfstacks...)\n\nAnd perhaps\n\n// TODO: Access to fullbufs is never concurrent, so lfstack is overkill.",
      "revId": "5f4f27cc06981eef150ff56d6cd404a24708d3fd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2718838c_b63b73d8",
        "filename": "src/runtime/mgcwork.go",
        "patchSetId": 2
      },
      "lineNbr": 458,
      "author": {
        "id": 5167
      },
      "writtenOn": "2017-02-09T22:07:01Z",
      "side": 1,
      "message": "I\u0027m not sure what the point of this comment is. It seems redundant with the documentation on push and pop themselves.\n\nIf you want to keep this, it should go with the comment on publishWork so go doc can find it.",
      "revId": "5f4f27cc06981eef150ff56d6cd404a24708d3fd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "45d6a0bc_9f4eab48",
        "filename": "src/runtime/mgcwork.go",
        "patchSetId": 2
      },
      "lineNbr": 466,
      "author": {
        "id": 5167
      },
      "writtenOn": "2017-02-09T22:07:01Z",
      "side": 1,
      "message": "\"to publish\"?",
      "range": {
        "startLine": 466,
        "startChar": 53,
        "endLine": 466,
        "endChar": 61
      },
      "revId": "5f4f27cc06981eef150ff56d6cd404a24708d3fd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2846c928_f423d39e",
        "filename": "src/runtime/mgcwork.go",
        "patchSetId": 2
      },
      "lineNbr": 470,
      "author": {
        "id": 5167
      },
      "writtenOn": "2017-02-09T22:07:01Z",
      "side": 1,
      "message": "This noescape stuff isn\u0027t necessary any more, so you can just name the receiver w and use it.",
      "revId": "5f4f27cc06981eef150ff56d6cd404a24708d3fd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "37de4a20_35544f6d",
        "filename": "src/runtime/mgcwork.go",
        "patchSetId": 2
      },
      "lineNbr": 495,
      "author": {
        "id": 5167
      },
      "writtenOn": "2017-02-09T22:07:01Z",
      "side": 1,
      "message": "Same comment about noescape.",
      "revId": "5f4f27cc06981eef150ff56d6cd404a24708d3fd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cfc0b0f0_3892c262",
        "filename": "src/runtime/mgcwork.go",
        "patchSetId": 2
      },
      "lineNbr": 498,
      "author": {
        "id": 5167
      },
      "writtenOn": "2017-02-09T22:07:01Z",
      "side": 1,
      "message": "No need to init since you\u0027re just going to return 0.",
      "revId": "5f4f27cc06981eef150ff56d6cd404a24708d3fd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2976d6eb_5217a543",
        "filename": "src/runtime/mgcwork.go",
        "patchSetId": 2
      },
      "lineNbr": 510,
      "author": {
        "id": 5167
      },
      "writtenOn": "2017-02-09T22:07:01Z",
      "side": 1,
      "message": "I was worried that there was a race here where fullbufs could go empty, but then I realized that you\u0027re never actually accessing fullbufs concurrently.",
      "revId": "5f4f27cc06981eef150ff56d6cd404a24708d3fd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}