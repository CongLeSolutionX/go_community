{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "577e9a27_d367eff0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 14020
      },
      "writtenOn": "2024-05-09T18:27:36Z",
      "side": 1,
      "message": "Hi Alan, looks like this is causing failures on the longtest builders, e.g. \n\nhttps://ci.chromium.org/ui/p/golang/builders/ci/gotip-linux-amd64-longtest/b8748395646781564225/overview\n\nThe test in question that\u0027s failing is doing a build with inlining cranked up; you can reproduce the problem with this:\n\n```\n$ go build -gcflags\u003dall\u003d-l\u003d4 himom.go\nrm: cannot remove \u0027himom\u0027: No such file or directory\n# runtime\n/w/go/src/runtime/iface.go:397:17: write barrier prohibited by caller; convTstring\n\t/w/go/src/runtime/panic.go:1019:17: called by resolveNameOff.throw.func1\n\t/w/go/src/runtime/type.go:119:10: called by resolveNameOff\n\t/w/go/src/runtime/error.go:268:43: called by printanycustomtype\n\t/w/go/src/runtime/error.go:261:21: called by printpanicval\n\t/w/go/src/runtime/panic.go:1019:16: called by greyobject.throw.func1\n\t/w/go/src/runtime/mgcmark.go:1590:8: called by greyobject\n```\n\nI think perhaps the additional inlining is allowing the compiler to discover the issue with the write barrier? Runtime experts will probably be able to say more.",
      "revId": "69e75c8581e15328454bb6e2f1dc347f73616b37",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d2247f2a_cdb2b148",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 57259
      },
      "writtenOn": "2024-05-09T18:52:50Z",
      "side": 1,
      "message": "Thanks Than. My guess is that it\u0027s reaching the throw(\"name offset out of range\") statement, but of course throw is not allowed to be called in the middle of handling an existing throw and the symptom is the write barrier message.\n\nI don\u0027t know why the inner throw is reached though. Also why the preceding println statement is not evidenced by the log.\n\n\n```\nfunc resolveNameOff(ptrInModule unsafe.Pointer, off nameOff) name {\n\tif off \u003d\u003d 0 {\n\t\treturn name{}\n\t}\n\tbase :\u003d uintptr(ptrInModule)\n\tfor md :\u003d \u0026firstmoduledata; md !\u003d nil; md \u003d md.next {\n\t\tif base \u003e\u003d md.types \u0026\u0026 base \u003c md.etypes {\n\t\t\tres :\u003d md.types + uintptr(off)\n\t\t\tif res \u003e md.etypes {\n\t\t\t\tprintln(\"runtime: nameOff\", hex(off), \"out of range\", hex(md.types), \"-\", hex(md.etypes))\n\t\t\t\tthrow(\"runtime: name offset out of range\") // L119\n\t\t\t}\n\t\t\treturn name{Bytes: (*byte)(unsafe.Pointer(res))}\n\t\t}\n\t}\n\n```",
      "parentUuid": "577e9a27_d367eff0",
      "revId": "69e75c8581e15328454bb6e2f1dc347f73616b37",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9dcd8bc6_dbc5a6d5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 57259
      },
      "writtenOn": "2024-05-09T18:57:50Z",
      "side": 1,
      "message": "I can reproduce it locally; will investigate. Have filed and self-assigned https://github.com/golang/go/issues/67274.",
      "parentUuid": "d2247f2a_cdb2b148",
      "revId": "69e75c8581e15328454bb6e2f1dc347f73616b37",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "53731e76_ef6ea72d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 14020
      },
      "writtenOn": "2024-05-09T20:05:50Z",
      "side": 1,
      "message": "Thanks. Bisection points to runtime/type.go:34 as the inlined call that triggers the problem. If it is ok with you I will send a CL that marks \"throw\" as non-inlinable as a temporary workaround, just to get the longtest builders back on line (channeling my inner Brian here).",
      "parentUuid": "9dcd8bc6_dbc5a6d5",
      "revId": "69e75c8581e15328454bb6e2f1dc347f73616b37",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eb50ec40_beca9ff7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 14020
      },
      "writtenOn": "2024-05-09T20:11:27Z",
      "side": 1,
      "message": "Sent CL 584616",
      "parentUuid": "53731e76_ef6ea72d",
      "revId": "69e75c8581e15328454bb6e2f1dc347f73616b37",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}