{
  "comments": [
    {
      "key": {
        "uuid": "41ea8160_9ec44558",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 19,
      "author": {
        "id": 6365
      },
      "writtenOn": "2019-03-13T16:31:46Z",
      "side": 1,
      "message": "This is good progress, but 225ns still seems quite high for what this is doing.\n\nDo we know what the time/op was in Go 1.12? Since the caller PC is readily available and the top of the stack is hot in the cache, the theoretical performance ought to be within a couple dozen ns of that.",
      "revId": "0fed1d68be3a68253a195c4a3dc6d008ca0c378c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "14a6dad5_ad95701a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 19,
      "author": {
        "id": 5182
      },
      "writtenOn": "2019-03-13T17:05:54Z",
      "side": 1,
      "message": "errors.New while saving the frame information, ceteris paribus, takes about 40ns.\n\nI reckon it is possible to have an alternative for runtime.Callers optimized to this case to improve performance.",
      "parentUuid": "41ea8160_9ec44558",
      "revId": "0fed1d68be3a68253a195c4a3dc6d008ca0c378c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2ab8471d_00359b18",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 19,
      "author": {
        "id": 5182
      },
      "writtenOn": "2019-03-14T09:32:03Z",
      "side": 1,
      "message": "But if you look at runtime.Callers, it doesn\u0027t look trivial.",
      "parentUuid": "14a6dad5_ad95701a",
      "revId": "0fed1d68be3a68253a195c4a3dc6d008ca0c378c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    }
  ]
}