{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "0ea3cb6e_2f095ef9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 14
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-01-27T18:44:24Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003d333c6ff7\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "333c6ff70d34453428f227bfe30cbeaf9d1fbf91",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b7ec5dcf_29829cf3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 14
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-01-27T18:57:25Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "0ea3cb6e_2f095ef9",
      "tag": "autogenerated:trybots~happy",
      "revId": "333c6ff70d34453428f227bfe30cbeaf9d1fbf91",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1fd5b6ec_8bf88515",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 14
      },
      "lineNbr": 0,
      "author": {
        "id": 7061
      },
      "writtenOn": "2023-01-27T21:57:46Z",
      "side": 1,
      "message": "Using a transform-all-the-loops (that declare at least one iteration variable) mode, I checked whether that would have run time costs (require additional optimizations) and it does.\n\nResults are here: https://perf.golang.org/search?q\u003dupload:20230127.23\nTLDR \u003d transforming only the detected loops reduces runtime (bent geomean) by 0.1% (i.e., no change), but transforming all the loops increases runtime by 5.8%, and as much as 144% on one benchmark.  Running tests in that mode reveals that the transformed (extra-branchy) 3-clause loops interfere with prove and bounds check elimination.  We can work to detect and remove that idiomatically bad code when it is unnecessary, but the existing selective loop transformation avoids creating it in most cases (in particular, all that matter to the benchmarks we run).",
      "revId": "333c6ff70d34453428f227bfe30cbeaf9d1fbf91",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}