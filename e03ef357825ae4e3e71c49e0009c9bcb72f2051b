{
  "comments": [
    {
      "key": {
        "uuid": "dc9e973b_6678f820",
        "filename": "src/cmd/go/internal/load/test.go",
        "patchSetId": 5
      },
      "lineNbr": 61,
      "author": {
        "id": 6365
      },
      "writtenOn": "2020-02-10T20:01:35Z",
      "side": 1,
      "message": "I\u0027ve been thinking about this some more. Why do we need to check the second-highest index here rather than the highest one?\n\nMore detail in the comment would be helpful, but looking at the details of #36173, I wonder if it\u0027s possible that we\u0027re building the wrong import stack for this class of error. Arguably the disallowed import path should not be on the import stack at all, since there isn\u0027t necessarily a problem with that package itself.\n\n(That is: the “problem” for a disallowed import is arguably in the importing package, not the package to be imported — that package may be perfectly valid for use elsewhere. So perhaps this error should have been reported as p1.Error rather than in p1.DepsErrors in the first place.)",
      "revId": "e03ef357825ae4e3e71c49e0009c9bcb72f2051b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8cb5b209_fffc59f8",
        "filename": "src/cmd/go/internal/load/test.go",
        "patchSetId": 5
      },
      "lineNbr": 61,
      "author": {
        "id": 34965
      },
      "writtenOn": "2020-02-11T04:47:16Z",
      "side": 1,
      "message": "That\u0027s a good question! I think this is a property of all ImportPathErrors. The stack trace includes the imported package (the last one), but the error should be associated with the importing package (the second to last one). See this comment:\nhttps://github.com/golang/go/blob/993ec7f6cdaeb38b88091f42d6369d408dcb894b/src/cmd/go/internal/load/pkg.go#L353\n\nI added a special case for ImportPathErrors, does that make sense?",
      "parentUuid": "dc9e973b_6678f820",
      "revId": "e03ef357825ae4e3e71c49e0009c9bcb72f2051b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1fbb48eb_abe34db6",
        "filename": "src/cmd/go/internal/load/test.go",
        "patchSetId": 5
      },
      "lineNbr": 61,
      "author": {
        "id": 6365
      },
      "writtenOn": "2020-02-11T20:20:47Z",
      "side": 1,
      "message": "Ah, now we\u0027re getting somewhere!\n\nI see that many of the invocations of `ImportErrorf` follow it up with `setErrorPos` explicitly:\nhttps://github.com/golang/go/blob/993ec7f6cdaeb38b88091f42d6369d408dcb894b/src/cmd/go/internal/load/pkg.go#L602-L624\n\nThis specific error does not:\nhttps://github.com/golang/go/blob/993ec7f6cdaeb38b88091f42d6369d408dcb894b/src/cmd/go/internal/load/pkg.go#L1301-L1308\n\nThat is probably the root of the bug. And there are a few other cases there that are also missing the setErrorPos call.\n\nI wonder if we could fix all of these at the construction site by refactoring `ImportErrorf` to take the `*ImportStack` and `[]token.Position` as explicit arguments and return a `*PackageError` rather than an `ImportPathError`.",
      "parentUuid": "8cb5b209_fffc59f8",
      "revId": "e03ef357825ae4e3e71c49e0009c9bcb72f2051b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2e1878f5_308c6ee9",
        "filename": "src/cmd/go/internal/load/test.go",
        "patchSetId": 5
      },
      "lineNbr": 61,
      "author": {
        "id": 34965
      },
      "writtenOn": "2020-02-11T20:31:05Z",
      "side": 1,
      "message": "AIUI, the expected behavior is that sometimes we should print a stack trace, and sometimes we shouldn\u0027t, depending on which root package is being checked. \n\nSo you can\u0027t fix this bug at the point where the error is constructed. It might help for you and Jay to chat separately about this, since it sounds like you two have some disagreement about the expected behavior\n\nfwiw, the err pos from disallowImports is added here:\nhttps://github.com/golang/go/blob/993ec7f6cdaeb38b88091f42d6369d408dcb894b/src/cmd/go/internal/load/pkg.go#L594\nand I\u0027m pretty confident that\u0027s not the root of the bug",
      "parentUuid": "1fbb48eb_abe34db6",
      "revId": "e03ef357825ae4e3e71c49e0009c9bcb72f2051b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e78ea3dd_ed24f087",
        "filename": "src/cmd/go/internal/load/test.go",
        "patchSetId": 5
      },
      "lineNbr": 61,
      "author": {
        "id": 17092
      },
      "writtenOn": "2020-02-12T18:00:40Z",
      "side": 1,
      "message": "To build on what Bryan said, I think it makes sense to fix this in the PackageError and ImportStack types: the way they are represented, constructed, and formatted.\n\nThis is quite a bit of refactoring work, so I\u0027m not sure Nick wants to sign up for this in what started out as a small CL. :)\n\nBut maybe something like below would let us fix these problems?\n\n// ImportStack now keeps a position for each import.\ntype ImportStack []struct {\n  Path string\n  Pos token.Position\n}\n\n// PackageError has a full stack. Pos is no longer needed.\n// The text and JSON output could still be the same (with bugs fixed)\ntype PackageError struct {\n  ImportStack ImportStack\n  Err error\n  IsImportCycle bool\n  Hard bool\n}\n\nfunc ImportErrorf(path string, pos token.Position, format string, args ...interface{}) *PackageError { ... }\n\nPackageError.Error() could do something intelligent with the stack. For an unknown package, the stack would not have a zero position for the top entry, so Error could show the position from the importing package (right below top) instead. Then the caller (TestPackagesFor) would not need a special case.",
      "parentUuid": "2e1878f5_308c6ee9",
      "revId": "e03ef357825ae4e3e71c49e0009c9bcb72f2051b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f8fcf543_03ae83ca",
        "filename": "src/cmd/go/internal/load/test.go",
        "patchSetId": 5
      },
      "lineNbr": 61,
      "author": {
        "id": 34965
      },
      "writtenOn": "2020-02-13T15:33:07Z",
      "side": 1,
      "message": "Ya, I was expecting that since this is fixing a Go 1.12 -\u003e 1.13 regression, the Go team would be in favor of a quick local fix, rather than a refactor that\u0027s more likely to introduce follow-on bugs. \n\nBut I can take a crack at changing the ImportStack format.\n\nOne question: It looks like the Go CLI lets you introspect on PackageError, as in this test:\nhttps://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_build_info_err.txt\n\ngo list -e -deps -f \u0027{{with .Error}}{{.Pos}}: {{.Err}}{{end}}\u0027 ./main\n\nwhich reads the Pos field off of PackageError. How important is it to preserve that behavior?",
      "parentUuid": "e78ea3dd_ed24f087",
      "revId": "e03ef357825ae4e3e71c49e0009c9bcb72f2051b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    }
  ]
}