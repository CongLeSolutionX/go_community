{
  "comments": [
    {
      "key": {
        "uuid": "dc9e973b_6678f820",
        "filename": "src/cmd/go/internal/load/test.go",
        "patchSetId": 5
      },
      "lineNbr": 61,
      "author": {
        "id": 6365
      },
      "writtenOn": "2020-02-10T20:01:35Z",
      "side": 1,
      "message": "I\u0027ve been thinking about this some more. Why do we need to check the second-highest index here rather than the highest one?\n\nMore detail in the comment would be helpful, but looking at the details of #36173, I wonder if it\u0027s possible that we\u0027re building the wrong import stack for this class of error. Arguably the disallowed import path should not be on the import stack at all, since there isn\u0027t necessarily a problem with that package itself.\n\n(That is: the “problem” for a disallowed import is arguably in the importing package, not the package to be imported — that package may be perfectly valid for use elsewhere. So perhaps this error should have been reported as p1.Error rather than in p1.DepsErrors in the first place.)",
      "revId": "e03ef357825ae4e3e71c49e0009c9bcb72f2051b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8cb5b209_fffc59f8",
        "filename": "src/cmd/go/internal/load/test.go",
        "patchSetId": 5
      },
      "lineNbr": 61,
      "author": {
        "id": 34965
      },
      "writtenOn": "2020-02-11T04:47:16Z",
      "side": 1,
      "message": "That\u0027s a good question! I think this is a property of all ImportPathErrors. The stack trace includes the imported package (the last one), but the error should be associated with the importing package (the second to last one). See this comment:\nhttps://github.com/golang/go/blob/993ec7f6cdaeb38b88091f42d6369d408dcb894b/src/cmd/go/internal/load/pkg.go#L353\n\nI added a special case for ImportPathErrors, does that make sense?",
      "parentUuid": "dc9e973b_6678f820",
      "revId": "e03ef357825ae4e3e71c49e0009c9bcb72f2051b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1fbb48eb_abe34db6",
        "filename": "src/cmd/go/internal/load/test.go",
        "patchSetId": 5
      },
      "lineNbr": 61,
      "author": {
        "id": 6365
      },
      "writtenOn": "2020-02-11T20:20:47Z",
      "side": 1,
      "message": "Ah, now we\u0027re getting somewhere!\n\nI see that many of the invocations of `ImportErrorf` follow it up with `setErrorPos` explicitly:\nhttps://github.com/golang/go/blob/993ec7f6cdaeb38b88091f42d6369d408dcb894b/src/cmd/go/internal/load/pkg.go#L602-L624\n\nThis specific error does not:\nhttps://github.com/golang/go/blob/993ec7f6cdaeb38b88091f42d6369d408dcb894b/src/cmd/go/internal/load/pkg.go#L1301-L1308\n\nThat is probably the root of the bug. And there are a few other cases there that are also missing the setErrorPos call.\n\nI wonder if we could fix all of these at the construction site by refactoring `ImportErrorf` to take the `*ImportStack` and `[]token.Position` as explicit arguments and return a `*PackageError` rather than an `ImportPathError`.",
      "parentUuid": "8cb5b209_fffc59f8",
      "revId": "e03ef357825ae4e3e71c49e0009c9bcb72f2051b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    }
  ]
}