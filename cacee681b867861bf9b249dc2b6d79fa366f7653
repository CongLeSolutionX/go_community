{
  "comments": [
    {
      "key": {
        "uuid": "17f7d148_c36d8ad4",
        "filename": "src/net/http/request.go",
        "patchSetId": 1
      },
      "lineNbr": 920,
      "author": {
        "id": 5137
      },
      "writtenOn": "2016-03-06T19:38:18Z",
      "side": 1,
      "message": "Please change from a named return value to just `) error {`",
      "revId": "cacee681b867861bf9b249dc2b6d79fa366f7653",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e26d19b5_33d54800",
        "filename": "src/net/http/request.go",
        "patchSetId": 1
      },
      "lineNbr": 925,
      "author": {
        "id": 10961
      },
      "writtenOn": "2016-03-06T17:18:58Z",
      "side": 1,
      "message": "Is a slice of length 1 too short, giving lots of reader.Read()-calling overhead?",
      "range": {
        "startLine": 925,
        "startChar": 0,
        "endLine": 925,
        "endChar": 21
      },
      "revId": "cacee681b867861bf9b249dc2b6d79fa366f7653",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "17f7d148_e37086aa",
        "filename": "src/net/http/request.go",
        "patchSetId": 1
      },
      "lineNbr": 929,
      "author": {
        "id": 5137
      },
      "writtenOn": "2016-03-06T19:38:18Z",
      "side": 1,
      "message": "return errors.New(\"http: POST too large\")",
      "revId": "cacee681b867861bf9b249dc2b6d79fa366f7653",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "17f7d148_636596ee",
        "filename": "src/net/http/request.go",
        "patchSetId": 1
      },
      "lineNbr": 932,
      "author": {
        "id": 5137
      },
      "writtenOn": "2016-03-06T19:38:18Z",
      "side": 1,
      "message": "if e !\u003d nil \u0026\u0026 e !\u003d io.EOF {\n}",
      "revId": "cacee681b867861bf9b249dc2b6d79fa366f7653",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "17f7d148_0374929c",
        "filename": "src/net/http/request.go",
        "patchSetId": 1
      },
      "lineNbr": 934,
      "author": {
        "id": 5137
      },
      "writtenOn": "2016-03-06T19:38:18Z",
      "side": 1,
      "message": "return e",
      "revId": "cacee681b867861bf9b249dc2b6d79fa366f7653",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "57430950_8fc67560",
        "filename": "src/net/http/request.go",
        "patchSetId": 1
      },
      "lineNbr": 937,
      "author": {
        "id": 10961
      },
      "writtenOn": "2016-03-06T17:18:58Z",
      "side": 1,
      "message": "Given len(b)\u003d\u003d1 and never changes, why use bytes.Equal and not b[0]\u003d\u003d\u0027\u0026\u0027, having moved the n\u003d\u003d0 to the front of the tests?",
      "range": {
        "startLine": 937,
        "startChar": 0,
        "endLine": 937,
        "endChar": 73
      },
      "revId": "cacee681b867861bf9b249dc2b6d79fa366f7653",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "17f7d148_a36a7eb8",
        "filename": "src/net/http/request.go",
        "patchSetId": 1
      },
      "lineNbr": 937,
      "author": {
        "id": 5137
      },
      "writtenOn": "2016-03-06T19:38:18Z",
      "side": 1,
      "message": "Like Ralph mentioned we can just do a plain \u003d\u003d comparison. We could even break this out to a small helper function e.g func isQueryFieldSep(b byte) { return b \u003d\u003d \u0027\u0026\u0027 || b \u003d\u003d \u0027:\u0027 }\nthen we can add to it as needed.\n\nSo\n`\nif isQueryFieldSep(b) || n \u003c\u003d 0 {\n`",
      "parentUuid": "57430950_8fc67560",
      "range": {
        "startLine": 937,
        "startChar": 0,
        "endLine": 937,
        "endChar": 73
      },
      "revId": "cacee681b867861bf9b249dc2b6d79fa366f7653",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "17f7d148_6350f600",
        "filename": "src/net/http/request.go",
        "patchSetId": 1
      },
      "lineNbr": 937,
      "author": {
        "id": 5137
      },
      "writtenOn": "2016-03-06T19:40:28Z",
      "side": 1,
      "message": "sorry I meant s/:/;/ -- semi-colon instead of colon inside the helper func.",
      "parentUuid": "17f7d148_a36a7eb8",
      "range": {
        "startLine": 937,
        "startChar": 0,
        "endLine": 937,
        "endChar": 73
      },
      "revId": "cacee681b867861bf9b249dc2b6d79fa366f7653",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4227c598_a6d4a668",
        "filename": "src/net/http/request.go",
        "patchSetId": 1
      },
      "lineNbr": 944,
      "author": {
        "id": 10961
      },
      "writtenOn": "2016-03-06T17:18:58Z",
      "side": 1,
      "message": "If the Reset moves up a line, before the append(), then these six lines are the same as for key, e \u003d ..., so perhaps the code can exist once and having done it, either key is saved, or key:value stored, depending on b[0]\u003d\u003d\u0027\u003d\u0027, etc?",
      "range": {
        "startLine": 944,
        "startChar": 0,
        "endLine": 944,
        "endChar": 14
      },
      "revId": "cacee681b867861bf9b249dc2b6d79fa366f7653",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "17f7d148_235f8e1a",
        "filename": "src/net/http/request.go",
        "patchSetId": 1
      },
      "lineNbr": 949,
      "author": {
        "id": 5137
      },
      "writtenOn": "2016-03-06T19:38:18Z",
      "side": 1,
      "message": "return e instead of\n`\nerr \u003d e\nreturn\n`\nonce you get rid of the named return value.",
      "revId": "cacee681b867861bf9b249dc2b6d79fa366f7653",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "57430950_afc93974",
        "filename": "src/net/http/request.go",
        "patchSetId": 1
      },
      "lineNbr": 957,
      "author": {
        "id": 10961
      },
      "writtenOn": "2016-03-06T17:18:58Z",
      "side": 1,
      "message": "This could be in the first branch of the if statement, before the Reset, as we know if n\u003d\u003d0 then we\u0027ll be there.",
      "range": {
        "startLine": 955,
        "startChar": 0,
        "endLine": 957,
        "endChar": 3
      },
      "revId": "cacee681b867861bf9b249dc2b6d79fa366f7653",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "17f7d148_435a9a2a",
        "filename": "src/net/http/request.go",
        "patchSetId": 1
      },
      "lineNbr": 959,
      "author": {
        "id": 5137
      },
      "writtenOn": "2016-03-06T19:38:18Z",
      "side": 1,
      "message": "naked return. Please instead do `return nil` once you get rid of the named return value.",
      "revId": "cacee681b867861bf9b249dc2b6d79fa366f7653",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}