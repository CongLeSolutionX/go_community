{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "f39bb408_b50951b1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-05-23T18:56:37Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003d3cdb30a8\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "3cdb30a849b171ffa7bb374ba4b193381d2be374",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "14d6a12c_00237668",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-05-23T19:08:11Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "f39bb408_b50951b1",
      "tag": "autogenerated:trybots~happy",
      "revId": "3cdb30a849b171ffa7bb374ba4b193381d2be374",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9e5acd35_d026a59c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 31647
      },
      "writtenOn": "2023-05-23T19:33:34Z",
      "side": 1,
      "message": "This seems very reasonable, but see my one comment. I\u0027m not sure that we should special-case the sameOrig case.",
      "revId": "3cdb30a849b171ffa7bb374ba4b193381d2be374",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c45f45da_b7bc4c65",
        "filename": "src/cmd/compile/internal/types2/unify.go",
        "patchSetId": 8
      },
      "lineNbr": 70,
      "author": {
        "id": 31647
      },
      "writtenOn": "2023-05-23T20:28:36Z",
      "side": 1,
      "message": "Let\u0027s keep the Checker out of the unifier. Just pass in check.conf.EnableInterfaceInference, or move it to a constant (see comment on next CL).",
      "range": {
        "startLine": 70,
        "startChar": 1,
        "endLine": 70,
        "endChar": 15
      },
      "revId": "3cdb30a849b171ffa7bb374ba4b193381d2be374",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eac90beb_8d92049e",
        "filename": "src/cmd/compile/internal/types2/unify.go",
        "patchSetId": 8
      },
      "lineNbr": 70,
      "author": {
        "id": 7392
      },
      "writtenOn": "2023-05-23T20:55:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c45f45da_b7bc4c65",
      "range": {
        "startLine": 70,
        "startChar": 1,
        "endLine": 70,
        "endChar": 15
      },
      "revId": "3cdb30a849b171ffa7bb374ba4b193381d2be374",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "af047e9a_ba7552d0",
        "filename": "src/cmd/compile/internal/types2/unify.go",
        "patchSetId": 8
      },
      "lineNbr": 617,
      "author": {
        "id": 31647
      },
      "writtenOn": "2023-05-23T20:28:36Z",
      "side": 1,
      "message": "If x is Named, so is y, IIRC? i.e. this can just be y :\u003d y.(*Named).",
      "range": {
        "startLine": 617,
        "startChar": 26,
        "endLine": 617,
        "endChar": 28
      },
      "revId": "3cdb30a849b171ffa7bb374ba4b193381d2be374",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "066dc1e3_8e944f18",
        "filename": "src/cmd/compile/internal/types2/unify.go",
        "patchSetId": 8
      },
      "lineNbr": 617,
      "author": {
        "id": 7392
      },
      "writtenOn": "2023-05-23T20:55:14Z",
      "side": 1,
      "message": "No. This is a switch on the first type and we always need to check the 2nd type as well. See all the other cases.",
      "parentUuid": "af047e9a_ba7552d0",
      "range": {
        "startLine": 617,
        "startChar": 26,
        "endLine": 617,
        "endChar": 28
      },
      "revId": "3cdb30a849b171ffa7bb374ba4b193381d2be374",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "88535fb6_b3b02420",
        "filename": "src/cmd/compile/internal/types2/unify.go",
        "patchSetId": 8
      },
      "lineNbr": 627,
      "author": {
        "id": 31647
      },
      "writtenOn": "2023-05-23T19:33:34Z",
      "side": 1,
      "message": "A couple comments on this:\n\n1. I think we could just fall through to the normal handling below, via adding `\u0026\u0026 !sameOrig` on line 619 above.\n2. I\u0027m not sure this is right. What if I have a two trivial interfaces:\n\n```\ntype I1[P any] interface{}\ntype I2[P any] interface{}\n```\n\nDon\u0027t we want I1 to unify with I2, always, regardless of the type arguments?\nhttps://go.dev/play/p/CIfB3PPdg5G",
      "range": {
        "startLine": 627,
        "startChar": 5,
        "endLine": 627,
        "endChar": 61
      },
      "revId": "3cdb30a849b171ffa7bb374ba4b193381d2be374",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "28077e8d_8af3c12d",
        "filename": "src/cmd/compile/internal/types2/unify.go",
        "patchSetId": 8
      },
      "lineNbr": 627,
      "author": {
        "id": 31647
      },
      "writtenOn": "2023-05-23T19:43:46Z",
      "side": 1,
      "message": "Duh, sorry I said one thing but was thinking another.\n\nI meant I don\u0027t see the difference between the case of two interfaces, and one.\n\nIn this example, I would expect `I1[int]` to unify against `I1[string]`, just as it does with `I2[string]`",
      "parentUuid": "88535fb6_b3b02420",
      "range": {
        "startLine": 627,
        "startChar": 5,
        "endLine": 627,
        "endChar": 61
      },
      "revId": "3cdb30a849b171ffa7bb374ba4b193381d2be374",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8906cee5_91a2589b",
        "filename": "src/cmd/compile/internal/types2/unify.go",
        "patchSetId": 8
      },
      "lineNbr": 627,
      "author": {
        "id": 7392
      },
      "writtenOn": "2023-05-23T19:51:06Z",
      "side": 1,
      "message": "Understood. But we won\u0027t be able to infer the P in I1[P] matching against I1[int] if P is not used anywhere. Currently we can do that.\n\nThat is, the current proposal remains backward-compatible. Yes, it can\u0027t do what you\u0027re suggesting but we couldn\u0027t do that before either.",
      "parentUuid": "28077e8d_8af3c12d",
      "range": {
        "startLine": 627,
        "startChar": 5,
        "endLine": 627,
        "endChar": 61
      },
      "revId": "3cdb30a849b171ffa7bb374ba4b193381d2be374",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8b7395af_4f0f9181",
        "filename": "src/cmd/compile/internal/types2/unify.go",
        "patchSetId": 8
      },
      "lineNbr": 627,
      "author": {
        "id": 31647
      },
      "writtenOn": "2023-05-23T19:52:39Z",
      "side": 1,
      "message": "Got it, OK. Then see my other comment about making unification too lax in places where we require identical-unification not assignable-unification.",
      "parentUuid": "8906cee5_91a2589b",
      "range": {
        "startLine": 627,
        "startChar": 5,
        "endLine": 627,
        "endChar": 61
      },
      "revId": "3cdb30a849b171ffa7bb374ba4b193381d2be374",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a08431d2_41051d57",
        "filename": "src/cmd/compile/internal/types2/unify.go",
        "patchSetId": 8
      },
      "lineNbr": 627,
      "author": {
        "id": 7392
      },
      "writtenOn": "2023-05-23T20:55:14Z",
      "side": 1,
      "message": "I think you are correct and we possibly have a bug in type inference in the special case: https://github.com/golang/go/issues/60377 . Will address separately.",
      "parentUuid": "8b7395af_4f0f9181",
      "range": {
        "startLine": 627,
        "startChar": 5,
        "endLine": 627,
        "endChar": 61
      },
      "revId": "3cdb30a849b171ffa7bb374ba4b193381d2be374",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8294695d_73e3f162",
        "filename": "src/internal/types/testdata/fixedbugs/issue57192.go",
        "patchSetId": 8
      },
      "lineNbr": 15,
      "author": {
        "id": 31647
      },
      "writtenOn": "2023-05-23T19:45:56Z",
      "side": 1,
      "message": "Hmm. What about the following example:\n\n```\ntype S struct {\n\tF I1[int]\n}\n```\n\nWill that unify against `struct{ F I2[int] }`?\n\nI.e. this relaxed unification only works at the top-level.",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 15,
        "endChar": 1
      },
      "revId": "3cdb30a849b171ffa7bb374ba4b193381d2be374",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a7b9683b_34116b84",
        "filename": "src/internal/types/testdata/fixedbugs/issue57192.go",
        "patchSetId": 8
      },
      "lineNbr": 15,
      "author": {
        "id": 7392
      },
      "writtenOn": "2023-05-23T19:53:08Z",
      "side": 1,
      "message": "It presumably would. But it will fail at instantiation and/or assignment time.",
      "parentUuid": "8294695d_73e3f162",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 15,
        "endChar": 1
      },
      "revId": "3cdb30a849b171ffa7bb374ba4b193381d2be374",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "922f09f5_a3ba02d6",
        "filename": "src/internal/types/testdata/fixedbugs/issue57192.go",
        "patchSetId": 8
      },
      "lineNbr": 15,
      "author": {
        "id": 31647
      },
      "writtenOn": "2023-05-23T20:28:36Z",
      "side": 1,
      "message": "Ok, I agree this seems OK. Error messages may be confusing though.",
      "parentUuid": "a7b9683b_34116b84",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 15,
        "endChar": 1
      },
      "revId": "3cdb30a849b171ffa7bb374ba4b193381d2be374",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one Code-Review+2 is required. Self review is not allowed."
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "3cdb30a849b171ffa7bb374ba4b193381d2be374",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Do-Not-Review",
        "description": {
          "value": "Changes that have DO NOT REVIEW in their commit message are not submittable."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (R|r)(E|e)(V|v)(I|i)(E|e)(W|w).*\""
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:false"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (R|r)(E|e)(V|v)(I|i)(E|e)(W|w).*\""},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (R|r)(E|e)(V|v)(I|i)(E|e)(W|w).*\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "3cdb30a849b171ffa7bb374ba4b193381d2be374",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Do-Not-Submit",
        "description": {
          "value": "Changes that have DO NOT SUBMIT in their commit message are not submittable."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:false"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "3cdb30a849b171ffa7bb374ba4b193381d2be374",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "No-Holds",
        "description": {
          "value": "Changes with a Hold+1 vote are not submittable."
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "NOT label:Hold\u003d1"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"NOT label:Hold=1"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Hold=1"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "3cdb30a849b171ffa7bb374ba4b193381d2be374",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "No-Unresolved-Comments",
        "description": {
          "value": "Changes that have unresolved comments are not submittable, unless overriden by adding the hashtag allow-unresolved-comments."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:unresolved"
          }
        },
        "submittabilityExpression": {
          "expressionString": "-has:unresolved"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "hashtag:allow-unresolved-comments"
          }
        },
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:unresolved"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["has:unresolved"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-has:unresolved"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"hashtag:allow-unresolved-comments"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "patchSetCommitId": "3cdb30a849b171ffa7bb374ba4b193381d2be374",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "No-Wait-Release",
        "description": {
          "value": "Changes with the hashtag wait-release cannot be submitted."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "hashtag:wait-release"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:false"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"hashtag:wait-release"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["hashtag:wait-release"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "3cdb30a849b171ffa7bb374ba4b193381d2be374",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforcement-satisfied_gerrit"],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "3cdb30a849b171ffa7bb374ba4b193381d2be374",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "TryBots-Pass",
        "description": {
          "value": "Changes must pass TryBots unless TryBot-Bypass+1 is set."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config -label:TryBot-Result\u003dMAX"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:false"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:TryBot-Bypass\u003dMAX"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config -label:TryBot-Result=MAX"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":["label:TryBot-Result=MAX"],"failingAtoms":["branch:refs/meta/config"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:TryBot-Bypass=MAX"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "patchSetCommitId": "3cdb30a849b171ffa7bb374ba4b193381d2be374",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}