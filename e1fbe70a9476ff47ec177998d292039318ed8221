{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "29b83503_9bef58c2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-07-26T15:40:25Z",
      "side": 1,
      "message": "SlowBots beginning. Status page: https://farmer.golang.org/try?commit\u003de1fbe70a",
      "tag": "autogenerated:trybots~beginning",
      "revId": "e1fbe70a9476ff47ec177998d292039318ed8221",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "16bc0f07_2a3fbb12",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-07-26T16:09:23Z",
      "side": 1,
      "message": "SlowBots are happy.\n\nSlowBot builds that ran:\n* linux-386-longtest\n* linux-amd64-longtest\n* windows-amd64-longtest\n",
      "parentUuid": "29b83503_9bef58c2",
      "tag": "autogenerated:trybots~happy",
      "revId": "e1fbe70a9476ff47ec177998d292039318ed8221",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "60b4b560_07c889de",
        "filename": "src/cmd/go/internal/modload/modfile.go",
        "patchSetId": 10
      },
      "lineNbr": 63,
      "author": {
        "id": 17092
      },
      "writtenOn": "2021-07-26T20:51:32Z",
      "side": 1,
      "message": "I see this is TODO which is fine for now, but I\u0027m curious what this will look like later. I think modFileGoVersion is basically saying which set of semantics the main module is telling us to use. With workspaces, do we instead want to take that from the go.work file?",
      "revId": "e1fbe70a9476ff47ec177998d292039318ed8221",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cee205b1_caaad832",
        "filename": "src/cmd/go/internal/modload/modfile.go",
        "patchSetId": 10
      },
      "lineNbr": 324,
      "author": {
        "id": 17092
      },
      "writtenOn": "2021-07-26T20:51:32Z",
      "side": 1,
      "message": "If one main module does:\n\n  replace example.com/a v1.0.0 \u003d\u003e example.com/x v1.0.0\n\nAnd another does:\n\n  replace example.com/a \u003d\u003e example.com/y v1.0.0\n\nI don\u0027t think that should be an error. If both replacements were in the same go.mod file, we\u0027d go with the one that replaces a specific version.",
      "revId": "e1fbe70a9476ff47ec177998d292039318ed8221",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "31e9de88_a6833c36",
        "filename": "src/cmd/go/internal/modload/modfile.go",
        "patchSetId": 10
      },
      "lineNbr": 328,
      "author": {
        "id": 17092
      },
      "writtenOn": "2021-07-26T20:51:32Z",
      "side": 1,
      "message": "\"replace directives\" or \"replacements\"",
      "range": {
        "startLine": 328,
        "startChar": 30,
        "endLine": 328,
        "endChar": 38
      },
      "revId": "e1fbe70a9476ff47ec177998d292039318ed8221",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3f7b4758_d0d1c153",
        "filename": "src/cmd/go/internal/modload/modfile.go",
        "patchSetId": 10
      },
      "lineNbr": 328,
      "author": {
        "id": 17092
      },
      "writtenOn": "2021-07-26T20:51:32Z",
      "side": 1,
      "message": "Let\u0027s show paths to the go.mod files instead of the module paths. The module paths could be anything.\n\nMaybe also hint that the user can add a replace directive to go.work to resolve the conflict? Fine to add a TODO for that hint instead since it\u0027s not working yet.",
      "range": {
        "startLine": 328,
        "startChar": 95,
        "endLine": 328,
        "endChar": 121
      },
      "revId": "e1fbe70a9476ff47ec177998d292039318ed8221",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "339c54cc_49e796c7",
        "filename": "src/cmd/go/internal/modload/modfile.go",
        "patchSetId": 10
      },
      "lineNbr": 570,
      "author": {
        "id": 17092
      },
      "writtenOn": "2021-07-26T20:51:32Z",
      "side": 1,
      "message": "Not sure I have anything to recommend here, but depending on MainModules here doesn\u0027t seem right to me. I guess depending on index earlier doesn\u0027t seem right either. Maybe we can refactor that later on.",
      "revId": "e1fbe70a9476ff47ec177998d292039318ed8221",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5e7c137f_e2797545",
        "filename": "src/cmd/go/internal/modload/vendor.go",
        "patchSetId": 10
      },
      "lineNbr": 137,
      "author": {
        "id": 17092
      },
      "writtenOn": "2021-07-26T20:51:32Z",
      "side": 1,
      "message": "It shouldn\u0027t actually matter what the main module is to checkVendorConsistency; we need the index of that module\u0027s go.mod file, specifically the go version, requirements, and replacements.\n\nCould we pass in an *index here instead?\n\nIt looks like we use modFile.Require and modFile.Replace. We print errors based on those, so the order matters, and we can\u0027t use index.require and index.replace without sorting first. So maybe either sort and iterate them, or add a *modfile.File field to *index? Or pass in a *modFile parameter.",
      "range": {
        "startLine": 137,
        "startChar": 28,
        "endLine": 137,
        "endChar": 53
      },
      "revId": "e1fbe70a9476ff47ec177998d292039318ed8221",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}