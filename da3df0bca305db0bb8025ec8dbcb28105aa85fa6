{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "a17f73fd_49dbbcf6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-11-09T16:03:39Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003dda3df0bc\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "da3df0bca305db0bb8025ec8dbcb28105aa85fa6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0bdf096c_c59398f9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-11-09T16:25:19Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "a17f73fd_49dbbcf6",
      "tag": "autogenerated:trybots~happy",
      "revId": "da3df0bca305db0bb8025ec8dbcb28105aa85fa6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a8e06a44_309cfcef",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 25391
      },
      "writtenOn": "2022-11-10T22:25:00Z",
      "side": 1,
      "message": "I think I have slight preference for this CL over the other one.",
      "revId": "da3df0bca305db0bb8025ec8dbcb28105aa85fa6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e1b1bea9_dbd54728",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5167
      },
      "writtenOn": "2022-11-14T20:52:02Z",
      "side": 1,
      "message": "While I\u0027m not super happy about having another field in span that\u0027s almost always redundant, this approach seems much more robust than the alternative in CL 427619.",
      "revId": "da3df0bca305db0bb8025ec8dbcb28105aa85fa6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "69448585_97b982bd",
        "filename": "src/runtime/malloc.go",
        "patchSetId": 1
      },
      "lineNbr": 1097,
      "author": {
        "id": 5167
      },
      "writtenOn": "2022-11-14T20:52:02Z",
      "side": 1,
      "message": "Consider adding a little more explanation.\n\n// While this pointer can\u0027t escape into user code as a *live* pointer\n// until we return, conservative scanning may find a dead pointer\n// that happens to point into this object. Delaying this update until\n// now ensures that that conservative scanning considers this pointer\n// dead until this point.",
      "revId": "da3df0bca305db0bb8025ec8dbcb28105aa85fa6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bd31daaf_9d7b065e",
        "filename": "src/runtime/mheap.go",
        "patchSetId": 1
      },
      "lineNbr": 497,
      "author": {
        "id": 5167
      },
      "writtenOn": "2022-11-14T20:52:02Z",
      "side": 1,
      "message": "freeIndexForScan?",
      "range": {
        "startLine": 497,
        "startChar": 1,
        "endLine": 497,
        "endChar": 17
      },
      "revId": "da3df0bca305db0bb8025ec8dbcb28105aa85fa6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}