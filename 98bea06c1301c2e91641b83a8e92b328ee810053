{
  "comments": [
    {
      "key": {
        "uuid": "9f401796_1cbd8bc8",
        "filename": "src/runtime/mprof.go",
        "patchSetId": 1
      },
      "lineNbr": 143,
      "author": {
        "id": 5167
      },
      "writtenOn": "2017-06-22T13:37:59Z",
      "side": 1,
      "message": "Given that \"needReset\" is the common case, consider inverting the sense of this argument to something like \"accumulate\". (If you do want to keep this sense, \"needReset\" is needlessly verbose; consider \"reset\".)",
      "revId": "98bea06c1301c2e91641b83a8e92b328ee810053",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e698071b_4dda96d4",
        "filename": "src/runtime/mprof.go",
        "patchSetId": 1
      },
      "lineNbr": 149,
      "author": {
        "id": 5167
      },
      "writtenOn": "2017-06-22T13:37:59Z",
      "side": 1,
      "message": "I\u0027m not sure what this comment has to do with the code that follows.",
      "revId": "98bea06c1301c2e91641b83a8e92b328ee810053",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4555f727_236588e8",
        "filename": "src/runtime/mprof.go",
        "patchSetId": 1
      },
      "lineNbr": 336,
      "author": {
        "id": 5167
      },
      "writtenOn": "2017-06-22T13:37:59Z",
      "side": 1,
      "message": "I don\u0027t think !mProf.flushed is right here. Consider the following sequence:\n\n1. User calls runtime.GC().\n2. A GC happens. Mark termination calls mProf_NextCycle, which sets mProf.flushed \u003d false.\n3. runtime.GC() calls mProf_PostSweep, which calls addDead with needReset\u003dtrue. This publishes and clears cycle C+1, making C+1\u0027s dead profile visible.\n4. Mark termination calls mProf_Flush, which again calls addDead with needReset\u003dtrue. This publishes and clears cycle C, but *clobbers* the C+1 dead profile with the C profile. This is bad.\n5. On the next mark termination, mProf_Flush tries to flush out the C+1 dead profile, but that\u0027s already been zeroed by step 3, so it flushes out zeros. This is also bad.\n\nIt\u0027s possible this is already slightly broken, since even without the dead profile, the above sequence publishes C+1 before publishing C, which is probably bad. Maybe mProf_PostSweep needs to publish both C and C+1 and mark C as flushed. You could imagine that mProf_PostSweep could also mark C+1 as flushed (which we don\u0027t have a flag for right now), which would signal the next mProf_FlushLocked to not clobber the dead profile.",
      "revId": "98bea06c1301c2e91641b83a8e92b328ee810053",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c99170c1_7dc79adc",
        "filename": "src/runtime/mprof.go",
        "patchSetId": 1
      },
      "lineNbr": 600,
      "author": {
        "id": 5167
      },
      "writtenOn": "2017-06-22T13:37:59Z",
      "side": 1,
      "message": "Given that there haven\u0027t been any GC cycles yet, it\u0027s not clear to me what the dead profile would contain in this case. Shouldn\u0027t it just be zeros?",
      "revId": "98bea06c1301c2e91641b83a8e92b328ee810053",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    }
  ]
}