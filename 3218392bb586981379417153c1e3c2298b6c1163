{
  "comments": [
    {
      "key": {
        "uuid": "ca3950cb_80bbcce3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 29128
      },
      "writtenOn": "2020-09-11T06:25:48Z",
      "side": 1,
      "message": "Hi Russ, two years have passed. I can see from the related github PR page that other people also encounter the similar problem. Is there anything I can do to get it merged?",
      "revId": "3218392bb586981379417153c1e3c2298b6c1163",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3b59d583_3b63113f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 5206
      },
      "writtenOn": "2020-09-11T19:31:23Z",
      "side": 1,
      "message": "I\u0027m sorry, this change still looks wrong to me.\n\nFor what it\u0027s worth, we could now support the full specification of TZ (std offset[dst[offset][,start[/time],end[/time]]]) as we can now parse that in the tzset function.\n\nIn general LoadLocation uses its argument as the name of the timezone.  If we use TZ as the source, why shouldn\u0027t we use the value of TZ as the name?  Why use Local?\n\nWhat is the related GitHub page that you mention?",
      "parentUuid": "ca3950cb_80bbcce3",
      "revId": "3218392bb586981379417153c1e3c2298b6c1163",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "705b9483_c2c59e53",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 29128
      },
      "writtenOn": "2020-09-12T06:00:21Z",
      "side": 1,
      "message": "How about only supporting `:/etc/localtime` when specifying absolute path? This should solve most cases and also make `Local` name correct. When something like `:/etc/mytz` is provided, it will fail and fallback to UTC as in the past no matter whether `/etc/mytz` exists or not.\n\nThe page link is here: https://github.com/golang/go/pull/27570#issuecomment-482339503. Another issue is https://github.com/NixOS/nixpkgs/pull/23078#issuecomment-637439716.",
      "parentUuid": "3b59d583_3b63113f",
      "revId": "3218392bb586981379417153c1e3c2298b6c1163",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "53669e82_abf0aad8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 5206
      },
      "writtenOn": "2020-09-12T23:55:51Z",
      "side": 1,
      "message": "I don\u0027t understand why setting TZ\u003d:/etc/localtime is a performance optimization.  You will get the behavior by not setting TZ at all.\n\nIn any case I\u0027m not objecting to recognizing the : and opening the named file.  I\u0027m objecting to using the name \"Local\" for the returned timezone.",
      "parentUuid": "705b9483_c2c59e53",
      "revId": "3218392bb586981379417153c1e3c2298b6c1163",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "688b41b1_62123520",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 29128
      },
      "writtenOn": "2020-09-14T06:50:09Z",
      "side": 1,
      "message": "\u003e I don\u0027t understand why setting TZ\u003d:/etc/localtime is a performance optimization.  You will get the behavior by not setting TZ at all.\n\nThe PR description of https://github.com/NixOS/nixpkgs/pull/23078 has given the reason. It can reduce stat call from glibc. It\u0027s not set for go application but for others. However, Ops often tend to set it system-wide instead of for single application. The motivation of this PR is similar with NixOS/nixpkgs#23053.\n\nI have sent a new patch that set the name to \"Local\" only when the path is \"/etc/localtime\", and set to the given path otherwise.",
      "parentUuid": "53669e82_abf0aad8",
      "revId": "3218392bb586981379417153c1e3c2298b6c1163",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c9a20e85_1f7fa4c0",
        "filename": "src/time/zoneinfo_unix.go",
        "patchSetId": 6
      },
      "lineNbr": 47,
      "author": {
        "id": 10961
      },
      "writtenOn": "2018-09-14T08:33:09Z",
      "side": 1,
      "message": "GNU libc loads an arbitrary file only if TZ starts with colon, matching POSIX,\nbut this patch does that whether there\u0027s a colon or not.\nGNU libc treats :​path as absolute if it starts with a slash, otherwise it tries only\n/usr/share/zoneinfo/:​path but Go will try several places.  Could deviating from the\nplatform\u0027s C library confuse?",
      "revId": "3218392bb586981379417153c1e3c2298b6c1163",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f13e3c58_d2915958",
        "filename": "src/time/zoneinfo_unix.go",
        "patchSetId": 6
      },
      "lineNbr": 47,
      "author": {
        "id": 29128
      },
      "writtenOn": "2018-09-14T10:06:40Z",
      "side": 1,
      "message": "\u003e only if TZ starts with colon\n\nIt\u0027s not true. You can see the code [here](https://sourceware.org/git/?p\u003dglibc.git;a\u003dblob;f\u003dtime/tzset.c;h\u003da828b9fb75bed6ca18460d32c83e31eb30e161b7;hb\u003dHEAD#l386) and a quote from the man tzset page:\n\n\u003e If the colon is omitted each of the above TZ formats will be tried.\n\nI don\u0027t think it\u0027s necessary to keep the same behavior as libc, it should be OK that just make sure cases work for libc also work for go.",
      "parentUuid": "c9a20e85_1f7fa4c0",
      "revId": "3218392bb586981379417153c1e3c2298b6c1163",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3c02f54f_8955147a",
        "filename": "src/time/zoneinfo_unix.go",
        "patchSetId": 6
      },
      "lineNbr": 47,
      "author": {
        "id": 10961
      },
      "writtenOn": "2018-09-14T10:54:25Z",
      "side": 1,
      "message": "OK, I was going by https://www.gnu.org/software/libc/manual/html_node/TZ-Variable.html#TZ-Variable\nthat doesn\u0027t say the colon is skipped.",
      "parentUuid": "f13e3c58_d2915958",
      "revId": "3218392bb586981379417153c1e3c2298b6c1163",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0dab47cc_dce7a8a1",
        "filename": "src/time/zoneinfo_unix.go",
        "patchSetId": 6
      },
      "lineNbr": 52,
      "author": {
        "id": 5206
      },
      "writtenOn": "2018-09-12T17:42:11Z",
      "side": 1,
      "message": "I don\u0027t think \"Local\" is the right name here.  In this package that indicates the system\u0027s local time zone; if TZ is set at all, we shouldn\u0027t assume it\u0027s the local time zone.",
      "revId": "3218392bb586981379417153c1e3c2298b6c1163",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6f1bfa47_d7e293e2",
        "filename": "src/time/zoneinfo_unix.go",
        "patchSetId": 6
      },
      "lineNbr": 52,
      "author": {
        "id": 29128
      },
      "writtenOn": "2018-09-13T06:21:23Z",
      "side": 1,
      "message": "There is no reliable way to figure out the exact timezone id when loading timezone from arbitrary file. For example, you can hardly know what\u0027s the ID of file \":/etc/mytz\". Actually I\u0027m planning to send another PR to guess the timezone id on its best effort. But this may change the existing behavior as loading timezone from \"/etc/localtime\" is not necessary \"Local\" if it\u0027s a soft link to timezone file located in /usr/share/zoneinfo/xxx, which is now always set to \"Local\" at L42.\n\nIf the break change looks good, I\u0027m also open to add the changes in this PR directly.",
      "parentUuid": "0dab47cc_dce7a8a1",
      "revId": "3218392bb586981379417153c1e3c2298b6c1163",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5087a81a_1d90135e",
        "filename": "src/time/zoneinfo_unix.go",
        "patchSetId": 6
      },
      "lineNbr": 52,
      "author": {
        "id": 5206
      },
      "writtenOn": "2018-09-13T16:07:16Z",
      "side": 1,
      "message": "I don\u0027t think we should change the current behavior of `time.Local`.  If the user makes no effort to change the timezone, we should return a timezone whose name is `\"Local\"`, as we do today.  Changing that seems sure to break existing programs, so we would need a really good reason.\n\nBut if the user does make an effort to change the timezone, by setting the `TZ` environment, then I think it does not make sense to return a timezone whose name is `\"Local\"`.  There is no particular reason to think that that is the right name in that case.\n\nDoes that make sense?",
      "parentUuid": "6f1bfa47_d7e293e2",
      "revId": "3218392bb586981379417153c1e3c2298b6c1163",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9ff51b90_1b20c7d2",
        "filename": "src/time/zoneinfo_unix.go",
        "patchSetId": 6
      },
      "lineNbr": 52,
      "author": {
        "id": 29128
      },
      "writtenOn": "2018-09-14T02:02:53Z",
      "side": 1,
      "message": "`Local` makes sense to me when there is no better name as we access the timezone via a global variable `Local` already. If `Local` is not a suitable name, what alternatives should be used? \nBy the way, the languages I checked, like java or python, follows the similar rules I state before, which always guessing the timezone id on its best effort.",
      "parentUuid": "5087a81a_1d90135e",
      "revId": "3218392bb586981379417153c1e3c2298b6c1163",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cce32f20_f80ec3fb",
        "filename": "src/time/zoneinfo_unix.go",
        "patchSetId": 6
      },
      "lineNbr": 52,
      "author": {
        "id": 10961
      },
      "writtenOn": "2018-09-14T08:33:09Z",
      "side": 1,
      "message": "TZ here is normally unset.  I often set it to Continent/City-style values.\nIf I were setting it to :​path/to/file then I\u0027d expect :​path/to/file to be the name.\nNot Local, just as it\u0027s not Local when I set it to Europe/Paris: it\u0027s Europe/Paris.\nIf the code continues to do this when a : doesn\u0027t need stripping then it should add\nit back in the name to show POSIX\u0027s colon-TZ logic was done.",
      "parentUuid": "9ff51b90_1b20c7d2",
      "revId": "3218392bb586981379417153c1e3c2298b6c1163",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ff14a77e_5e91f8b7",
        "filename": "src/time/zoneinfo_unix.go",
        "patchSetId": 6
      },
      "lineNbr": 52,
      "author": {
        "id": 29128
      },
      "writtenOn": "2018-09-14T10:06:40Z",
      "side": 1,
      "message": "\u003e :​path/to/file to be the name\n\nI would personally not agree with it. The name here works like timezone id, and timezone id should not be arbitrary string. Besides, no existing packages work that way, it will become a surprise for users who are familiar with other implements.\n\nI think set TZ to a variable just like linking /etc/localtime to another timezone file. As long as /etc/localtime can be treated as `Local`, custom TZ can also be treated as `Local`.",
      "parentUuid": "cce32f20_f80ec3fb",
      "revId": "3218392bb586981379417153c1e3c2298b6c1163",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "25ce2b0f_a6737b71",
        "filename": "src/time/zoneinfo_unix.go",
        "patchSetId": 6
      },
      "lineNbr": 52,
      "author": {
        "id": 10961
      },
      "writtenOn": "2018-09-14T10:54:25Z",
      "side": 1,
      "message": "I set TZ to many values in a shell loop so TZ is not defining \u0027local\u0027.\nIt\u0027s defining my local-timezone override.\n\nIf the desired behaviour isn\u0027t clear then perhaps this needs an issue first, patch second?",
      "parentUuid": "ff14a77e_5e91f8b7",
      "revId": "3218392bb586981379417153c1e3c2298b6c1163",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9ed22929_fd65bd63",
        "filename": "src/time/zoneinfo_unix.go",
        "patchSetId": 6
      },
      "lineNbr": 52,
      "author": {
        "id": 29128
      },
      "writtenOn": "2018-09-14T13:56:11Z",
      "side": 1,
      "message": "\u003e ...It\u0027s defining my local-timezone override.\n\nYou can consider it as whatever you want. But according to the POSIX, TZ environment variable is the only stated source that used to detect local timezone.\n\n\u003e The tzset() function shall use the value of the environment variable TZ to set time conversion information used by ctime() , localtime() , mktime() , and strftime(). If TZ is absent from the environment, implementation-defined default timezone information shall be used.",
      "parentUuid": "25ce2b0f_a6737b71",
      "revId": "3218392bb586981379417153c1e3c2298b6c1163",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e9c4c364_21462989",
        "filename": "src/time/zoneinfo_unix.go",
        "patchSetId": 6
      },
      "lineNbr": 52,
      "author": {
        "id": 10961
      },
      "writtenOn": "2018-09-14T14:00:46Z",
      "side": 1,
      "message": "Your quote of POSIX does not say TZ is used to detect the local timezone.",
      "parentUuid": "9ed22929_fd65bd63",
      "revId": "3218392bb586981379417153c1e3c2298b6c1163",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    }
  ]
}