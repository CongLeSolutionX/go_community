{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "e8bef9c0_0089fe4a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 31647
      },
      "writtenOn": "2024-03-28T20:59:01Z",
      "side": 1,
      "message": "Sorry, I\u0027m confused. I thought that the existing object string was the reason for https://go.dev/issue/66559. But here I see we were previously formatting the underlying.\n\nIs is instead the case that https://go.dev/issue/66559 exists to coincide with the change in ObjectString implemented by this CL?",
      "revId": "c5c1b5a1108d049a9d50c62bdba66a54da3cdb74",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6988f9b0_78cba031",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 57259
      },
      "writtenOn": "2024-03-28T21:11:53Z",
      "side": 1,
      "message": "\u003e But here I see we were previously formatting the underlying.\n\nBut it wasn\u0027t previously formatting the underlying! Before types.Alias, an alias was a TypeName with the IsAlias flag, whose type was the RHS of the assignment, not the underlying. So you would see \"type A \u003d B\" (not \"type A \u003d int\"). With materialized aliases, the type of the TypeName is an Alias, so you would see \"type A \u003d A\". This CL\u0027s behavior change to ObjectString fixes that bug by preserving the previous behavior of displaying the RHS.",
      "parentUuid": "e8bef9c0_0089fe4a",
      "revId": "c5c1b5a1108d049a9d50c62bdba66a54da3cdb74",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}