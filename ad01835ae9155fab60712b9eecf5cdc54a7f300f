{
  "comments": [
    {
      "key": {
        "uuid": "55837fe0_54cf1694",
        "filename": "src/cmd/link/internal/ld/data.go",
        "patchSetId": 4
      },
      "lineNbr": 691,
      "author": {
        "id": 13315
      },
      "writtenOn": "2020-04-24T01:10:51Z",
      "side": 1,
      "message": "So we end up copying all symbols to external in internal linking PIE mode? That is so unfortunate. Could we create the symbol updater lazily in Adddynrel2, so at least leaf symbols don\u0027t need to be copied?\n\nWe should really revisit this...",
      "revId": "ad01835ae9155fab60712b9eecf5cdc54a7f300f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a7fbef9f_8bc021a3",
        "filename": "src/cmd/link/internal/ld/data.go",
        "patchSetId": 4
      },
      "lineNbr": 691,
      "author": {
        "id": 13315
      },
      "writtenOn": "2020-04-24T02:38:52Z",
      "side": 1,
      "message": "(Revisit this in the future, not in this CL)",
      "parentUuid": "55837fe0_54cf1694",
      "revId": "ad01835ae9155fab60712b9eecf5cdc54a7f300f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1eedcd3a_3cdbffe1",
        "filename": "src/cmd/link/internal/ld/data.go",
        "patchSetId": 4
      },
      "lineNbr": 691,
      "author": {
        "id": 14020
      },
      "writtenOn": "2020-04-24T11:51:58Z",
      "side": 1,
      "message": "Agree, it does seem unfortunate. I\u0027ll add a fixme/todo, since your suggestion on lazily creating the symbol updater sounds good.",
      "parentUuid": "a7fbef9f_8bc021a3",
      "revId": "ad01835ae9155fab60712b9eecf5cdc54a7f300f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "084f6ce5_02512f0d",
        "filename": "src/cmd/link/internal/ld/data.go",
        "patchSetId": 4
      },
      "lineNbr": 695,
      "author": {
        "id": 13315
      },
      "writtenOn": "2020-04-24T01:10:51Z",
      "side": 1,
      "message": "Put this in a local variable to avoid recompute.",
      "range": {
        "startLine": 695,
        "startChar": 5,
        "endLine": 695,
        "endChar": 12
      },
      "revId": "ad01835ae9155fab60712b9eecf5cdc54a7f300f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c3358380_deb1e9bb",
        "filename": "src/cmd/link/internal/ld/data.go",
        "patchSetId": 4
      },
      "lineNbr": 695,
      "author": {
        "id": 14020
      },
      "writtenOn": "2020-04-24T11:51:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "084f6ce5_02512f0d",
      "range": {
        "startLine": 695,
        "startChar": 5,
        "endLine": 695,
        "endChar": 12
      },
      "revId": "ad01835ae9155fab60712b9eecf5cdc54a7f300f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "043168ac_4f23aad4",
        "filename": "src/cmd/link/internal/ld/data.go",
        "patchSetId": 4
      },
      "lineNbr": 1124,
      "author": {
        "id": 13315
      },
      "writtenOn": "2020-04-24T01:10:51Z",
      "side": 1,
      "message": "Doesn\u0027t SymbolBuilder.Addstring do this?",
      "revId": "ad01835ae9155fab60712b9eecf5cdc54a7f300f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c06eb091_bc26c073",
        "filename": "src/cmd/link/internal/ld/data.go",
        "patchSetId": 4
      },
      "lineNbr": 1124,
      "author": {
        "id": 14020
      },
      "writtenOn": "2020-04-24T11:51:58Z",
      "side": 1,
      "message": "Indeed, you are right. I\u0027ll get rid of this one.",
      "parentUuid": "043168ac_4f23aad4",
      "revId": "ad01835ae9155fab60712b9eecf5cdc54a7f300f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "10998b41_fb7556cd",
        "filename": "src/cmd/link/internal/ld/data.go",
        "patchSetId": 4
      },
      "lineNbr": 1492,
      "author": {
        "id": 13315
      },
      "writtenOn": "2020-04-24T01:10:51Z",
      "side": 1,
      "message": "Okay, we end up setting alignments for all symbols. Maybe we want to change the loader to store it in a dense array instead of a map. (Not necessarily in this CL)\n\nAlternatively, don\u0027t set it and recompute default alignment when needed. It shouldn\u0027t be needed in many places, right?",
      "revId": "ad01835ae9155fab60712b9eecf5cdc54a7f300f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "117dff8e_4911492a",
        "filename": "src/cmd/link/internal/ld/data.go",
        "patchSetId": 4
      },
      "lineNbr": 1492,
      "author": {
        "id": 14020
      },
      "writtenOn": "2020-04-24T11:51:58Z",
      "side": 1,
      "message": "\u003e\u003ewe end up setting alignments for all symbols\n\nI wouldn\u0027t quite say all symbols -- this code is not processing text or dwarf symbols for example.  But yes, these are interesting things to consider.\n\nKeeping alignment in an array would have the advantage that we don\u0027t need to worry about data races or concurrent map read/write violations. However it does seem like it would be costly from a space perspective.\n\nThe linker symbol stats package that I wrote a while back (https://go-review.googlesource.com/c/go/+/206900/) has some hooks for gathering symbol alignment numbers.\n\nI dusted it off and got it rebased, then ran it on kubelet. Here are the numbers\nat asmb2 for sym alignment:\n\n  reachable symbols: 1012377\n  symbol breakdown by alignment:\n            Align:       Count\n                0:      771692\n               32:      104617\n                4:       86354\n               16:       28805\n                8:       18882\n                2:        1403\n                1:         624\n\nso if these numbers are to be believed, most symbols don\u0027t have their alignment set.\n\nWhether the map is still a good choice is hard to say-- I am not sure what the cutover point is for these things (e.g. how heavily populated an array needs to become to be more efficient than a map).",
      "parentUuid": "10998b41_fb7556cd",
      "revId": "ad01835ae9155fab60712b9eecf5cdc54a7f300f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c429b28a_858a6092",
        "filename": "src/cmd/link/internal/ld/data.go",
        "patchSetId": 4
      },
      "lineNbr": 1492,
      "author": {
        "id": 13315
      },
      "writtenOn": "2020-04-24T13:33:51Z",
      "side": 1,
      "message": "Thanks for the data. I missed the part that it is only for data symbols. Sorry. I guess a map probably makes sense, then. Thanks.",
      "parentUuid": "117dff8e_4911492a",
      "revId": "ad01835ae9155fab60712b9eecf5cdc54a7f300f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d15deb9a_74aebaad",
        "filename": "src/cmd/link/internal/ld/data.go",
        "patchSetId": 4
      },
      "lineNbr": 1498,
      "author": {
        "id": 13315
      },
      "writtenOn": "2020-04-24T01:10:51Z",
      "side": 1,
      "message": "Is there still code that consumes this attribute after here? Or this is just an internal sanity check? If the latter, maybe just use a local bitmap.",
      "revId": "ad01835ae9155fab60712b9eecf5cdc54a7f300f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "50643880_87e2e49c",
        "filename": "src/cmd/link/internal/ld/data.go",
        "patchSetId": 4
      },
      "lineNbr": 1498,
      "author": {
        "id": 14020
      },
      "writtenOn": "2020-04-24T11:51:58Z",
      "side": 1,
      "message": "You are right, when I look at the code, I don\u0027t see any obvious downstream uses of OnList.\n\nOn the other hand, I am not sure how much it would help to use a local bitmap. At the point that this code runs, the loader has already allocated space for OnList, so we might as well use it.",
      "parentUuid": "d15deb9a_74aebaad",
      "revId": "ad01835ae9155fab60712b9eecf5cdc54a7f300f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7be6b319_21e97122",
        "filename": "src/cmd/link/internal/ld/data.go",
        "patchSetId": 4
      },
      "lineNbr": 1498,
      "author": {
        "id": 13315
      },
      "writtenOn": "2020-04-24T13:33:51Z",
      "side": 1,
      "message": "Using local bitmap could avoid some concurrency problems. You\u0027re right that it won\u0027t help much.\n\nSince nothing reads the bit after it, maybe here we could just check that all symbols\u0027 OnList attributes are false, but don\u0027t set it to true. (This is fine, you don\u0027t need to do it in this CL.)",
      "parentUuid": "50643880_87e2e49c",
      "revId": "ad01835ae9155fab60712b9eecf5cdc54a7f300f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0fc1cb77_acba5493",
        "filename": "src/cmd/link/internal/ld/data.go",
        "patchSetId": 4
      },
      "lineNbr": 1498,
      "author": {
        "id": 14020
      },
      "writtenOn": "2020-04-24T13:46:19Z",
      "side": 1,
      "message": "Ack.",
      "parentUuid": "7be6b319_21e97122",
      "revId": "ad01835ae9155fab60712b9eecf5cdc54a7f300f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d7467abe_afba86be",
        "filename": "src/cmd/link/internal/ld/data.go",
        "patchSetId": 4
      },
      "lineNbr": 1529,
      "author": {
        "id": 13315
      },
      "writtenOn": "2020-04-24T01:10:51Z",
      "side": 1,
      "message": "This whole thing is so mysterious... I guess I just didn\u0027t understand ELF ABI well enough...",
      "revId": "ad01835ae9155fab60712b9eecf5cdc54a7f300f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d1ff632c_8c7fa4b1",
        "filename": "src/cmd/link/internal/ld/data.go",
        "patchSetId": 4
      },
      "lineNbr": 1529,
      "author": {
        "id": 13315
      },
      "writtenOn": "2020-04-24T02:38:52Z",
      "side": 1,
      "message": "(This is fine. I just want to make a comment. Nothing to address.)",
      "parentUuid": "d7467abe_afba86be",
      "revId": "ad01835ae9155fab60712b9eecf5cdc54a7f300f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "23034898_ce39ef4b",
        "filename": "src/cmd/link/internal/loader/loader.go",
        "patchSetId": 4
      },
      "lineNbr": 2273,
      "author": {
        "id": 13315
      },
      "writtenOn": "2020-04-24T01:10:51Z",
      "side": 1,
      "message": "I think this name is not very clear. The name says AnonSym but this function can be called with named symbol. Also, include for what? It is not clear what the condition should be without knowing where it is included.\n\nMaybe IsRealSym? IsTopLevelSym?",
      "range": {
        "startLine": 2273,
        "startChar": 17,
        "endLine": 2273,
        "endChar": 31
      },
      "revId": "ad01835ae9155fab60712b9eecf5cdc54a7f300f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ead5f2cb_07df63c4",
        "filename": "src/cmd/link/internal/loader/loader.go",
        "patchSetId": 4
      },
      "lineNbr": 2273,
      "author": {
        "id": 14020
      },
      "writtenOn": "2020-04-24T11:51:58Z",
      "side": 1,
      "message": "Mmm, yes, I think you are right, the name is not great. \n\nI like \"TopLevelSym\", I will switch it up to that.",
      "parentUuid": "23034898_ce39ef4b",
      "range": {
        "startLine": 2273,
        "startChar": 17,
        "endLine": 2273,
        "endChar": 31
      },
      "revId": "ad01835ae9155fab60712b9eecf5cdc54a7f300f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9b3fac6b_fe4ca495",
        "filename": "src/cmd/link/internal/loader/symbolbuilder.go",
        "patchSetId": 4
      },
      "lineNbr": 453,
      "author": {
        "id": 13315
      },
      "writtenOn": "2020-04-24T01:10:51Z",
      "side": 1,
      "message": "Unset the ReadOnly bit?",
      "revId": "ad01835ae9155fab60712b9eecf5cdc54a7f300f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d38ee650_f1fdb05d",
        "filename": "src/cmd/link/internal/loader/symbolbuilder.go",
        "patchSetId": 4
      },
      "lineNbr": 453,
      "author": {
        "id": 14020
      },
      "writtenOn": "2020-04-24T11:51:58Z",
      "side": 1,
      "message": "Right, of course. Fixed.",
      "parentUuid": "9b3fac6b_fe4ca495",
      "revId": "ad01835ae9155fab60712b9eecf5cdc54a7f300f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}