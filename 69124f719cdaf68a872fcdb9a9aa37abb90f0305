{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "c49c362f_a1f124fc",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 5200
      },
      "writtenOn": "2021-08-28T18:49:23Z",
      "side": 1,
      "message": "This CL appears to be about range statements, not type switches.",
      "range": {
        "startLine": 7,
        "startChar": 50,
        "endLine": 7,
        "endChar": 60
      },
      "revId": "69124f719cdaf68a872fcdb9a9aa37abb90f0305",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "605ba415_900fb9ea",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 31249
      },
      "writtenOn": "2021-08-29T00:38:48Z",
      "side": 1,
      "message": "done",
      "parentUuid": "c49c362f_a1f124fc",
      "range": {
        "startLine": 7,
        "startChar": 50,
        "endLine": 7,
        "endChar": 60
      },
      "revId": "69124f719cdaf68a872fcdb9a9aa37abb90f0305",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f943ba00_4d78317a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 28783
      },
      "writtenOn": "2021-09-02T12:48:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "605ba415_900fb9ea",
      "range": {
        "startLine": 7,
        "startChar": 50,
        "endLine": 7,
        "endChar": 60
      },
      "revId": "69124f719cdaf68a872fcdb9a9aa37abb90f0305",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f1eb30ca_d1217a34",
        "filename": "src/cmd/compile/internal/inline/inl.go",
        "patchSetId": 1
      },
      "lineNbr": 1064,
      "author": {
        "id": 5200
      },
      "writtenOn": "2021-08-28T18:49:23Z",
      "side": 1,
      "message": "This might make the compiler not crash, but is the generated code correct?",
      "revId": "69124f719cdaf68a872fcdb9a9aa37abb90f0305",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e13e9f66_ec47ac8e",
        "filename": "src/cmd/compile/internal/inline/inl.go",
        "patchSetId": 1
      },
      "lineNbr": 1064,
      "author": {
        "id": 31249
      },
      "writtenOn": "2021-08-29T00:38:08Z",
      "side": 1,
      "message": "Sorry, I really canâ€™t prove its correctness.  \nI tried to experiment as follows\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\nvar global int\n\ntype app struct {\n\tName string\n}\n\nfunc bug() func() {\n\treturn func() {\n\n\t\t// the issue is this if true block\n\t\tif true {\n\t\t\tglobal \u003d 1\n\t\t\treturn\n\t\t}\n\n\t\tvar xx \u003d []app{{\"aaa\"}}\n\t\tvar gapp app\n\t\tfor _, app :\u003d range xx {\n\t\t\tif strings.ToUpper(\"\") \u003d\u003d app.Name {\n\t\t\t\tfmt.Printf(\"%v\\n\", app)\n\t\t\t\tgapp \u003d app\n\t\t\t}\n\t\t}\n\t\tfmt.Println(gapp)\n\t}\n}\n\nfunc main() {\n\tbug()()\n\tfmt.Println(global)\n}\n\n```  \nBefore the modification, it can still reproduce the problem.  \nAfter the modification, it can compiler success, and it will print 1 when execute.",
      "parentUuid": "f1eb30ca_d1217a34",
      "revId": "69124f719cdaf68a872fcdb9a9aa37abb90f0305",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "583f5767_4494e438",
        "filename": "src/cmd/compile/internal/inline/inl.go",
        "patchSetId": 1
      },
      "lineNbr": 1064,
      "author": {
        "id": 14665
      },
      "writtenOn": "2021-08-29T16:18:34Z",
      "side": 1,
      "message": "@Keith: This should not affect the generated code, but make the AST in inconsistent state. You can read more context in #45743. If we\u0027re going to backport this to go1.17, then I think this is the safest way.\n\nThen we can decide whether to fix the actual missing \"Defn\" for go1.18, e.g, you can see I attempted to fix in CL 319191 chain for type switch, but going to abandon it as unified IR fixed it already.",
      "parentUuid": "e13e9f66_ec47ac8e",
      "revId": "69124f719cdaf68a872fcdb9a9aa37abb90f0305",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a22e0248_d6f3e9ce",
        "filename": "src/cmd/compile/internal/inline/inl.go",
        "patchSetId": 1
      },
      "lineNbr": 1064,
      "author": {
        "id": 5200
      },
      "writtenOn": "2021-08-30T19:51:38Z",
      "side": 1,
      "message": "I\u0027m just worried that inlining closures (added in 1.17) is somehow wrong in the presence of range statements in that closure. This CL would just silently accept that incorrect code, especially as the test here doesn\u0027t actually execute the range statement - it is dead code eliminated.\n\nBut never mind, ORANGE is still not inlineable. So this CL only matters when the ORANGE is statically dead (and thus not counted during the inline budget check).\n\nSo, this looks fine for me. Maybe put some of this text in the comment.",
      "parentUuid": "583f5767_4494e438",
      "revId": "69124f719cdaf68a872fcdb9a9aa37abb90f0305",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "30cc3fb9_9e923aa7",
        "filename": "src/cmd/compile/internal/inline/inl.go",
        "patchSetId": 1
      },
      "lineNbr": 1064,
      "author": {
        "id": 31249
      },
      "writtenOn": "2021-08-31T00:21:10Z",
      "side": 1,
      "message": "Hi I update the commit message, add some of this text. please review.  \nThank you for your patient analysis and answers, Keith Randall and Cuong Manh Le.",
      "parentUuid": "a22e0248_d6f3e9ce",
      "revId": "69124f719cdaf68a872fcdb9a9aa37abb90f0305",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2b86104d_ef02cc00",
        "filename": "src/cmd/compile/internal/inline/inl.go",
        "patchSetId": 1
      },
      "lineNbr": 1064,
      "author": {
        "id": 13315
      },
      "writtenOn": "2021-09-01T18:06:19Z",
      "side": 1,
      "message": "I think the comment can be made clearer, at least mention that this is correct only when the range statement is statically dead (and maybe a TODO for revisit if we support inlining range statement in the future).",
      "parentUuid": "30cc3fb9_9e923aa7",
      "revId": "69124f719cdaf68a872fcdb9a9aa37abb90f0305",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "417878e5_5b3ff2c0",
        "filename": "src/cmd/compile/internal/inline/inl.go",
        "patchSetId": 1
      },
      "lineNbr": 1064,
      "author": {
        "id": 31249
      },
      "writtenOn": "2021-09-02T00:17:03Z",
      "side": 1,
      "message": "good idea, done.",
      "parentUuid": "2b86104d_ef02cc00",
      "revId": "69124f719cdaf68a872fcdb9a9aa37abb90f0305",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "59dcbde1_bf74b4e7",
        "filename": "src/cmd/compile/internal/inline/inl.go",
        "patchSetId": 1
      },
      "lineNbr": 1064,
      "author": {
        "id": 28783
      },
      "writtenOn": "2021-09-02T12:48:59Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "417878e5_5b3ff2c0",
      "revId": "69124f719cdaf68a872fcdb9a9aa37abb90f0305",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}