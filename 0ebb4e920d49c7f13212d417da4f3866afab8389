{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "b086e6ec_058d1499",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-10-07T20:02:17Z",
      "side": 1,
      "message": "SlowBots beginning. Status page: https://farmer.golang.org/try?commit\u003d0ebb4e92",
      "tag": "autogenerated:trybots~beginning",
      "revId": "0ebb4e920d49c7f13212d417da4f3866afab8389",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "068b1c98_7e19e021",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-10-07T20:39:29Z",
      "side": 1,
      "message": "SlowBots are happy.\n\nSlowBot builds that ran:\n* linux-386-longtest\n* linux-amd64-longtest\n* windows-amd64-longtest\n",
      "parentUuid": "b086e6ec_058d1499",
      "tag": "autogenerated:trybots~happy",
      "revId": "0ebb4e920d49c7f13212d417da4f3866afab8389",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6082a738_c9168517",
        "filename": "src/cmd/go/internal/modload/import.go",
        "patchSetId": 6
      },
      "lineNbr": 430,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-10-08T21:40:38Z",
      "side": 1,
      "message": "I\u0027m concerned about silently burying typestate invariants with this nil-check.\n\nThe top-level modload.Query* functions should probably call LoadModFile(ctx) to ensure that replacements have been loaded â€” then we can assume that MainModules is non-nil here.",
      "range": {
        "startLine": 429,
        "startChar": 0,
        "endLine": 430,
        "endChar": 53
      },
      "revId": "0ebb4e920d49c7f13212d417da4f3866afab8389",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1ddf5f8d_c85d0671",
        "filename": "src/cmd/go/internal/modload/import.go",
        "patchSetId": 6
      },
      "lineNbr": 430,
      "author": {
        "id": 10033
      },
      "writtenOn": "2021-10-13T15:52:25Z",
      "side": 1,
      "message": "added todo for this",
      "parentUuid": "6082a738_c9168517",
      "range": {
        "startLine": 429,
        "startChar": 0,
        "endLine": 430,
        "endChar": 53
      },
      "revId": "0ebb4e920d49c7f13212d417da4f3866afab8389",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "19d94389_3086d550",
        "filename": "src/cmd/go/internal/modload/import.go",
        "patchSetId": 6
      },
      "lineNbr": 430,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-10-14T20:32:38Z",
      "side": 1,
      "message": "SGTM for now.",
      "parentUuid": "1ddf5f8d_c85d0671",
      "range": {
        "startLine": 429,
        "startChar": 0,
        "endLine": 430,
        "endChar": 53
      },
      "revId": "0ebb4e920d49c7f13212d417da4f3866afab8389",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e251d495_9291593b",
        "filename": "src/cmd/go/internal/modload/modfile.go",
        "patchSetId": 6
      },
      "lineNbr": 360,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-10-08T21:40:38Z",
      "side": 1,
      "message": "I think there is a serious API problem here. As far as I can tell, we have lost the property that a module.Version refers unambiguously to a single set of module contents.\n\nI suspect that the solution is to go back to the modload.Replacement signature from Go 1.17, and have it return just a modload.Version, with a unique path.\n\nThe tricky thing about the path is that I don\u0027t think we want to accidentally embed absolute paths in the module metadata for binaries built with -trimpath.\n\nOne way to derive the path might be to make everything relative to the go.work file, or to the main module\u0027s go.mod file if there is no go.work file.\n\nThen each replacement loaded from each individual go.mod file in the workspace would be relative to however that go.mod file was specified in the workspace. If the go.work file specifies a relative path then the go.mod file\n\nIf the go.work file itself specifies absolute paths, then the paths for its replacements will be absolute. If the go.work file specifies relative paths and the replacements are also relative, then the paths will remain relative (but might get quite complicated).",
      "range": {
        "startLine": 360,
        "startChar": 8,
        "endLine": 360,
        "endChar": 13
      },
      "revId": "0ebb4e920d49c7f13212d417da4f3866afab8389",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b8a08288_470aa12b",
        "filename": "src/cmd/go/internal/modload/modfile.go",
        "patchSetId": 6
      },
      "lineNbr": 360,
      "author": {
        "id": 10033
      },
      "writtenOn": "2021-10-13T15:52:25Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e251d495_9291593b",
      "range": {
        "startLine": 360,
        "startChar": 8,
        "endLine": 360,
        "endChar": 13
      },
      "revId": "0ebb4e920d49c7f13212d417da4f3866afab8389",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}