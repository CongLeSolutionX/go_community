{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "ae6d45ac_48baaefe",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2024-02-04T12:09:03Z",
      "side": 1,
      "message": "I spotted some possible problems.\n\nThese findings are based on simple heuristics. If a finding appears wrong, briefly reply here saying so. Otherwise, please address any problems and update the GitHub PR. When complete, mark this comment as \u0027Done\u0027 and click the [blue \u0027Reply\u0027 button](https://go.dev/wiki/GerritBot#i-left-a-reply-to-a-comment-in-gerrit-but-no-one-but-me-can-see-it) above.\n\nPossible problems detected:\n  1. You usually need to reference a bug number for all but trivial or cosmetic fixes. For this repo, the format is usually \u0027Fixes #12345\u0027 or \u0027Updates #12345\u0027 at the end of the commit message. Should you have a bug reference?\n\nThe commit title and commit message body come from the GitHub PR title and description, and must be edited in the GitHub web interface (not via git). For instructions, see [here](https://go.dev/wiki/GerritBot/#how-does-gerritbot-determine-the-final-commit-message). For guidelines on commit messages for the Go project, see [here](https://go.dev/doc/contribute#commit_messages).\n\n\n(In general for Gerrit code reviews, the change author is expected to [log in to Gerrit](https://go-review.googlesource.com/login/) with a Gmail or other Google account and then close out each piece of feedback by marking it as \u0027Done\u0027 if implemented as suggested or otherwise reply to each review comment. See the [Review](https://go.dev/doc/contribute#review) section of the Contributing Guide for details.)",
      "revId": "41eea336e3d2f2a563584e50fe4fbdadc5e3ea24",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c9be8bdf_2db59f73",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 64694
      },
      "writtenOn": "2024-02-04T12:12:48Z",
      "side": 1,
      "message": "No bug referenced here.",
      "parentUuid": "ae6d45ac_48baaefe",
      "revId": "41eea336e3d2f2a563584e50fe4fbdadc5e3ea24",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e6ff696d_b82d7499",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5015
      },
      "writtenOn": "2024-02-19T10:05:26Z",
      "side": 1,
      "message": "No bug referenced, no tests.",
      "revId": "41eea336e3d2f2a563584e50fe4fbdadc5e3ea24",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0fb4061d_bfa88e19",
        "filename": "src/text/template/exec.go",
        "patchSetId": 1
      },
      "lineNbr": 737,
      "author": {
        "id": 5015
      },
      "writtenOn": "2024-02-19T10:05:26Z",
      "side": 1,
      "message": "The usual idiom is to return err and see if err \u003d\u003d nil. The boolean is redundant.",
      "revId": "41eea336e3d2f2a563584e50fe4fbdadc5e3ea24",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d8936658_d59f3958",
        "filename": "src/text/template/funcs.go",
        "patchSetId": 1
      },
      "lineNbr": 111,
      "author": {
        "id": 5015
      },
      "writtenOn": "2024-02-19T10:05:26Z",
      "side": 1,
      "message": "I don\u0027t believe this is necessary, as you can\u0027t call a function unless it\u0027s been installed, and the installation code checks the name.\n\nIf you feel otherwise, please give an example.",
      "revId": "41eea336e3d2f2a563584e50fe4fbdadc5e3ea24",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "61922d2a_4ebdbd4c",
        "filename": "src/text/template/funcs.go",
        "patchSetId": 1
      },
      "lineNbr": 122,
      "author": {
        "id": 5015
      },
      "writtenOn": "2024-02-19T10:05:26Z",
      "side": 1,
      "message": "Look at the other error messages in this package. They do not have multiple sentences and do not start with capital letters.\n\ninvalid function signature: second argument should be error; is %s",
      "revId": "41eea336e3d2f2a563584e50fe4fbdadc5e3ea24",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "833f2a78_9f78d652",
        "filename": "src/text/template/funcs.go",
        "patchSetId": 1
      },
      "lineNbr": 124,
      "author": {
        "id": 5015
      },
      "writtenOn": "2024-02-19T10:05:26Z",
      "side": 1,
      "message": "Here there is far too much information partly because this case is carrying too much load.\n\ncase n \u003d\u003d 1: ok\ncase n \u003d\u003d 2 \u0026\u0026 2nd is error: ok\n\nThat\u0027s pretty much what you have. Now break it down more:\n\ncase n \u003d\u003d 2: 2nd argument must have type error\ndefault: too many arguments\n\nAlso put typ.NumOut() into a variable. it\u0027s called too many times",
      "revId": "41eea336e3d2f2a563584e50fe4fbdadc5e3ea24",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}