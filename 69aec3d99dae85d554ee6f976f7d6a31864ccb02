{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "4f49980c_87631dad",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 15,
      "author": {
        "id": 6005
      },
      "writtenOn": "2020-11-06T21:37:02Z",
      "side": 1,
      "message": "I\u0027ve been investigating #35170 and hoping to post an update there soon. As part of that, we can easily turn off the reboot test if we want to (but I hope we won\u0027t have to).",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 15,
        "endChar": 66
      },
      "revId": "69aec3d99dae85d554ee6f976f7d6a31864ccb02",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "58fbc7e6_765b3d5f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 6365
      },
      "writtenOn": "2020-11-06T21:26:00Z",
      "side": 1,
      "message": "TRY\u003dandroid,ios,plan9,js",
      "revId": "69aec3d99dae85d554ee6f976f7d6a31864ccb02",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "60b55cf1_83023628",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 6005
      },
      "writtenOn": "2020-11-06T21:37:02Z",
      "side": 1,
      "message": "I\u0027m currently have a slight preference against this change: I\u0027d like to avoid a generalized \"fastOS\" abstraction. I think doing so will make it harder to review changes to it in the future. Right now each block is independent and has comments explaining the logic. (I would prefer a change that avoids adding shared variables and tweaks individual test blocks as needed.)\n\nI would like to less builder-specific configuration here and more in x/build/dashboard, if possible, and this change doesn\u0027t seem to move us in that direction.\n\nPlease comment if you have other suggestions, this is just based on my current understanding of the situation.",
      "revId": "69aec3d99dae85d554ee6f976f7d6a31864ccb02",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4b848646_48f5d8f2",
        "filename": "src/cmd/dist/test.go",
        "patchSetId": 1
      },
      "lineNbr": 530,
      "author": {
        "id": 6005
      },
      "writtenOn": "2020-11-06T21:37:02Z",
      "side": 1,
      "message": "I have a slight worry about creating a \"fastOS\" abstraction. It seems adding/removing an OS from the list can get tests to fail because of missing capabilities (e.g., if an OS is fast OS but lacks exec) or succeed because coverage is reduced.\n\nI think I would be more okay with a \"fastBuilder\" abstraction:\n\n    fastBuilder :\u003d os.Getenv(\"GO_BUILDER_NAME\") !\u003d \"\" \u0026\u0026 goos !\u003d \"android\" \u0026\u0026 !t.iOS() \u0026\u0026 goos !\u003d \"js\" \u0026\u0026 goos !\u003d \"plan9\"\n\nBut some of the cases below should probably still check both that a builder is fast (via the var abstraction) and have the necessary capabilities.\n\nAs one data point, I think GOOS\u003djs should be one of our fastest builders/TryBots because it skips so many tests due to not having certain capabilities. It is sometimes slow (#35170) but I think that\u0027s due some problem somewhere, not an inherent property.",
      "revId": "69aec3d99dae85d554ee6f976f7d6a31864ccb02",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c800505d_3066491b",
        "filename": "src/cmd/dist/test.go",
        "patchSetId": 1
      },
      "lineNbr": 530,
      "author": {
        "id": 6365
      },
      "writtenOn": "2020-11-06T22:08:26Z",
      "side": 1,
      "message": "I think there is another distinction at play, too. For Android, iOS, and JS, we do not expect real users to ~ever use the toolchain on the target OS: we expect all programs to be cross-compiled from some other host OS. So on those OSs it is not meaningful to test bootstrapping the toolchain, because nobody actually does that.\n\nPlan 9 is similar in practice (because our builders are so underpowered and so often broken), but in theory it is of a fundamentally different kind (in that plan9 has code editors and a development toolchain that one can, at least theoretically, use on a local workstation).",
      "parentUuid": "4b848646_48f5d8f2",
      "revId": "69aec3d99dae85d554ee6f976f7d6a31864ccb02",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2ccf392e_9ef00552",
        "filename": "src/cmd/dist/test.go",
        "patchSetId": 1
      },
      "lineNbr": 530,
      "author": {
        "id": 6005
      },
      "writtenOn": "2020-11-06T22:23:39Z",
      "side": 1,
      "message": "That makes sense, and I think \"fastOS\" doesn\u0027t capture that distinction well. It makes it sound like it\u0027s more about speed of operating systems instead of whether they\u0027re worth testing for bootstrapping ability.\n\nUnfortunately I don\u0027t have a great idea for a name (maybe \"testBootstrapping\"?), but if you can resolve this (and also make it work for unrelated things like doc tests), I think this CL can be good to get in.",
      "parentUuid": "c800505d_3066491b",
      "revId": "69aec3d99dae85d554ee6f976f7d6a31864ccb02",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "91a05209_5c33db6c",
        "filename": "src/cmd/dist/test.go",
        "patchSetId": 1
      },
      "lineNbr": 530,
      "author": {
        "id": 32558
      },
      "writtenOn": "2020-11-09T21:17:56Z",
      "side": 1,
      "message": "tcgoos? I think it might even be worth being explicit and adding those details to the comment, describing that running the toolchain on these goos is untested. It\u0027s nice, to me, to be assertive that these paths are possibly functional but unsupported.",
      "parentUuid": "2ccf392e_9ef00552",
      "revId": "69aec3d99dae85d554ee6f976f7d6a31864ccb02",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one Code-Review+2 is required. Self review is not allowed."
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Code-Review=MAX,user=non_uploader"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "69aec3d99dae85d554ee6f976f7d6a31864ccb02",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Do-Not-Review",
        "description": {
          "value": "Changes that have DO NOT REVIEW in their commit message are not submittable."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (R|r)(E|e)(V|v)(I|i)(E|e)(W|w).*\""
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:false"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (R|r)(E|e)(V|v)(I|i)(E|e)(W|w).*\""},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (R|r)(E|e)(V|v)(I|i)(E|e)(W|w).*\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "69aec3d99dae85d554ee6f976f7d6a31864ccb02",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Do-Not-Submit",
        "description": {
          "value": "Changes that have DO NOT SUBMIT in their commit message are not submittable."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:false"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "69aec3d99dae85d554ee6f976f7d6a31864ccb02",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "No-Holds",
        "description": {
          "value": "Changes with a Hold+1 vote are not submittable."
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "NOT label:Hold\u003d1"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"NOT label:Hold=1"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Hold=1"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "69aec3d99dae85d554ee6f976f7d6a31864ccb02",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "No-Unresolved-Comments",
        "description": {
          "value": "Changes that have unresolved comments are not submittable, unless overriden by adding the hashtag allow-unresolved-comments."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:unresolved"
          }
        },
        "submittabilityExpression": {
          "expressionString": "-has:unresolved"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "hashtag:allow-unresolved-comments"
          }
        },
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:unresolved"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:unresolved"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-has:unresolved"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":["has:unresolved"],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"hashtag:allow-unresolved-comments"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["hashtag:allow-unresolved-comments"]}
      },
      "patchSetCommitId": "69aec3d99dae85d554ee6f976f7d6a31864ccb02",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "No-Wait-Release",
        "description": {
          "value": "Changes with the hashtag wait-release cannot be submitted."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "hashtag:wait-release"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:false"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"hashtag:wait-release"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["hashtag:wait-release"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "69aec3d99dae85d554ee6f976f7d6a31864ccb02",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "69aec3d99dae85d554ee6f976f7d6a31864ccb02",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "TryBots-Pass",
        "description": {
          "value": "Changes must pass TryBots unless TryBot-Bypass+1 is set."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config -label:TryBot-Result\u003dMAX"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:false"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:TryBot-Bypass\u003dMAX"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config -label:TryBot-Result=MAX"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config","label:TryBot-Result=MAX"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:false"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:TryBot-Bypass=MAX"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:TryBot-Bypass=MAX"]}
      },
      "patchSetCommitId": "69aec3d99dae85d554ee6f976f7d6a31864ccb02",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}