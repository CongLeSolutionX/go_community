{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "140b2a31_68ae0c7a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 44188
      },
      "writtenOn": "2022-04-18T07:46:06Z",
      "side": 1,
      "message": "Another reason is we need 64-bit PRNG to support the multiple-cores system scalable at ByteDance, the built-in package rand is unscalable(wrapped by a sync.Mutex). We built a lot of infrastructures based on fastrand(via go:linkname, although it\u0027s dangerous), in some cases, we also need a 64-bit PRNG instead 32-bit.\n\nAnd because runtime.fastrand is a pre-M data structure, we can\u0027t modify it outside the Go runtime, it would be nice if we could add this new API.\n\nI\u0027m also wondering if we could use a 64-bit XORSHIFT as a fallback algorithm(replace 32-bit XORSHIFT)? Like `xˆ\u003d(x\u003c\u003c13); xˆ\u003d(x\u003e\u003e7); return (xˆ\u003d(x\u003c\u003c17))`, but it is not tested on 32-bit system, and might be slower. ",
      "revId": "36e6e2ffad1b6bffd0b49df44d4b7d34acc0ff59",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b5f0fcb7_064ab5a2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5200
      },
      "writtenOn": "2022-04-18T15:46:58Z",
      "side": 1,
      "message": "Relative to the fallback, you\u0027d have to try it and see. 64-bit shifts on 32-bit processors can be expensive, although constant shifts like used here wouldn\u0027t be too bad (2 shifts and an OR, I think). It might be kind of a wash compared to running the 32-bit code twice.\n\nWe kind of assume anyone who really cares about performance probably isn\u0027t running on a 32-bit system anymore.",
      "parentUuid": "140b2a31_68ae0c7a",
      "revId": "36e6e2ffad1b6bffd0b49df44d4b7d34acc0ff59",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "15a01758_3791d20c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5200
      },
      "writtenOn": "2022-04-18T15:46:58Z",
      "side": 1,
      "message": "Could you add the uses you mention? Either in this CL or a followon CL.",
      "revId": "36e6e2ffad1b6bffd0b49df44d4b7d34acc0ff59",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "78bb0d4f_67ed2531",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-04-18T15:49:40Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003d36e6e2ff",
      "tag": "autogenerated:trybots~beginning",
      "revId": "36e6e2ffad1b6bffd0b49df44d4b7d34acc0ff59",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6451f9ae_f041a079",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-04-18T16:01:43Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "78bb0d4f_67ed2531",
      "tag": "autogenerated:trybots~happy",
      "revId": "36e6e2ffad1b6bffd0b49df44d4b7d34acc0ff59",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ed8e1aed_a475fa8d",
        "filename": "src/runtime/stubs.go",
        "patchSetId": 2
      },
      "lineNbr": 182,
      "author": {
        "id": 5200
      },
      "writtenOn": "2022-04-18T15:46:58Z",
      "side": 1,
      "message": "This can just be r :\u003d uint64(s0+s1)",
      "revId": "36e6e2ffad1b6bffd0b49df44d4b7d34acc0ff59",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}