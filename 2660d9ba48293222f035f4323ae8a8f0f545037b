{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "705e0de0_86566123",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 13550
      },
      "writtenOn": "2022-08-25T15:01:01Z",
      "side": 1,
      "message": "Added a print benchmark with a smaller node. As expected, it now allocates much more than it needs to. I didn\u0027t expect the slow-down in wall time to be that dramatic - I guess it hurts the cache to use such an unnecessarily large buffer?\n\nI thought about using a large buffer only when the input file is an ast.File, and otherwise a small one (e.g. 256 bytes), but that\u0027s not a great heuristic either. You could have a single large declaration (e.g. a huge map or a long function), and tiny files aren\u0027t particularly rare either (e.g. doc.go or gen.go).\n\nI toyed with a smaller static buffer with 2KiB, and that does bring down the slow-down to a negligible 2%, but it also slashes the speed-up from 4-5% to 2%.",
      "revId": "2660d9ba48293222f035f4323ae8a8f0f545037b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e2441a75_a83b1e7e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 13550
      },
      "writtenOn": "2022-08-25T15:46:33Z",
      "side": 1,
      "message": "PS4 starts using a sync.Pool, and now both benchmarks are speed-ups, with the File benchmark jumping to being 10-11% faster. So that\u0027s a good sign, even though the benchmarks are a best-case-scenario for a sync.Pool.\n\nIf we\u0027re happy with keeping the pools, then I\u0027ll amend the commit message. If not, I\u0027ll revert to PS3. I think I\u0027m mildly in favor of keeping the pools simply because the API doesn\u0027t allow us to reuse these allocations for every Fprint call. We could add new API, though it\u0027s hard to justify when a pool gets us most of the way there anyway.",
      "parentUuid": "705e0de0_86566123",
      "revId": "2660d9ba48293222f035f4323ae8a8f0f545037b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f16e4ced_65b0b76f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 57259
      },
      "writtenOn": "2022-08-30T20:21:08Z",
      "side": 1,
      "message": "Using the pools makes sense. It would be nice to have at least some idea about the distribution of sizes in a typical client program (e.g. gopls), but this already seems like a strict improvement.",
      "parentUuid": "705e0de0_86566123",
      "revId": "2660d9ba48293222f035f4323ae8a8f0f545037b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cfeeb92d_6b6d9ed2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 13550
      },
      "writtenOn": "2022-09-09T14:32:14Z",
      "side": 1,
      "message": "I\u0027ll leave this as a potential follow-up for the gopls team :) I agree this is a strict improvement.",
      "parentUuid": "f16e4ced_65b0b76f",
      "revId": "2660d9ba48293222f035f4323ae8a8f0f545037b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}