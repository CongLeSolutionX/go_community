{
  "comments": [
    {
      "key": {
        "uuid": "108ed6ef_5ab4d532",
        "filename": "src/compress/flate/flate_test.go",
        "patchSetId": 5
      },
      "lineNbr": 37,
      "author": {
        "id": 5899
      },
      "writtenOn": "2015-04-16T05:30:00Z",
      "side": 1,
      "message": "While you\u0027re here, you might as well fix this to be\nif h.init(bits) {",
      "revId": "c511923e8a78012fc10b322b7791e3968b79cd29",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "108ed6ef_fab84928",
        "filename": "src/compress/flate/flate_test.go",
        "patchSetId": 5
      },
      "lineNbr": 48,
      "author": {
        "id": 5899
      },
      "writtenOn": "2015-04-16T05:30:00Z",
      "side": 1,
      "message": "Ditto.",
      "range": {
        "startLine": 48,
        "startChar": 4,
        "endLine": 48,
        "endChar": 6
      },
      "revId": "c511923e8a78012fc10b322b7791e3968b79cd29",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "108ed6ef_1ab64d3a",
        "filename": "src/compress/flate/flate_test.go",
        "patchSetId": 5
      },
      "lineNbr": 113,
      "author": {
        "id": 5899
      },
      "writtenOn": "2015-04-16T05:30:00Z",
      "side": 1,
      "message": "Verylongstring is very long. Can you break it on every 16 bytes or something?\n\noriginalHalf \u003d\n\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\" +\n\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\" +\netc +\n\"\\x00\\x00\\x00\\x00\"\n\nAlso, if you don\u0027t need the originalHalf to be ASCII control characters, it could be:\n\noriginalHalf \u003d\n\"00013534215etc\" +\netc\n\nwhich would make it easier to grok.",
      "revId": "c511923e8a78012fc10b322b7791e3968b79cd29",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "108ed6ef_7a8c398d",
        "filename": "src/compress/flate/inflate.go",
        "patchSetId": 5
      },
      "lineNbr": 141,
      "author": {
        "id": 5899
      },
      "writtenOn": "2015-04-16T05:30:00Z",
      "side": 1,
      "message": "A comment about checking that the code is complete (other than a degenerate one-value code) would be nice.",
      "revId": "c511923e8a78012fc10b322b7791e3968b79cd29",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "506daeeb_6e4eb74f",
        "filename": "src/compress/flate/inflate.go",
        "patchSetId": 5
      },
      "lineNbr": 146,
      "author": {
        "id": 5440
      },
      "writtenOn": "2015-04-16T05:03:57Z",
      "side": 1,
      "message": "This new if block is just a combination of the previous two if blocks (from lines 140--144 and 148--165 in the base file), moved down and outside of the loop.  By applying them here, we\u0027ve already rejected invalid bitsets, so we no longer need to worry about out-of-bounds errors from before (i.e., the \"huffmanNumChunks \u003c link\" and \"value \u003e\u003d uint32(len(h.links))\" checks in the base file).",
      "revId": "c511923e8a78012fc10b322b7791e3968b79cd29",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "506daeeb_8e530bf1",
        "filename": "src/compress/flate/inflate.go",
        "patchSetId": 5
      },
      "lineNbr": 151,
      "author": {
        "id": 5440
      },
      "writtenOn": "2015-04-16T05:03:57Z",
      "side": 1,
      "message": "This was \"link :\u003d code \u003e\u003e 1\" before, but \"code\" will have changed by time we finish the loop.  Instead we use \"nextcode[huffmanChunkBits+1]\", which is the corresponding value that code originally had.\n\nLogically, here we\u0027re trying to find the first entry in h.chunks that needs a link table.  We do that by finding the first code value of length huffmanChunkBits+1, but then we need to chop off the last bit so it fits as a h.chunks index.",
      "revId": "c511923e8a78012fc10b322b7791e3968b79cd29",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "506daeeb_ee416718",
        "filename": "src/compress/flate/inflate.go",
        "patchSetId": 5
      },
      "lineNbr": 160,
      "author": {
        "id": 5440
      },
      "writtenOn": "2015-04-16T05:03:57Z",
      "side": 1,
      "message": "(This line also changed; originally it was \"uint(i)\" instead of \"uint(huffmanChunkBits+1)\".  Obviously necessary because we\u0027re not in i\u0027s scope anymore, but it also parallels the sanity check below.)",
      "revId": "c511923e8a78012fc10b322b7791e3968b79cd29",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "108ed6ef_fa512966",
        "filename": "src/compress/flate/inflate.go",
        "patchSetId": 5
      },
      "lineNbr": 160,
      "author": {
        "id": 5899
      },
      "writtenOn": "2015-04-16T05:33:58Z",
      "side": 1,
      "message": "The uint isn\u0027t necessary any more. And while you\u0027re here, I\u0027d change the first + to |. The two are equivalent, since you\u0027re shifting by 4 then add/or-ing 0x0a, but I still feel that | is more appropriate for bit-whacking.",
      "parentUuid": "506daeeb_ee416718",
      "revId": "c511923e8a78012fc10b322b7791e3968b79cd29",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}