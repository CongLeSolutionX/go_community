{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "1bd96519_a05c86fc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-05-01T06:38:13Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003ddee38b9e",
      "tag": "autogenerated:trybots~beginning",
      "revId": "dee38b9ec453eb7d5013ef7e920b82b8bc4b218b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eff66ad1_b2882634",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-05-01T06:49:37Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "1bd96519_a05c86fc",
      "tag": "autogenerated:trybots~happy",
      "revId": "dee38b9ec453eb7d5013ef7e920b82b8bc4b218b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "decb6e4b_804c7f90",
        "filename": "src/cmd/go/internal/modfetch/proxy.go",
        "patchSetId": 1
      },
      "lineNbr": 247,
      "author": {
        "id": 6365
      },
      "writtenOn": "2022-05-02T13:38:19Z",
      "side": 1,
      "message": "This seems like a bit of an awkward fit, because most of the paths fetched through `getBytes` don\u0027t actually need to be cached: they are fetched once, then unmarshaled or otherwise transformed, and the resulting value is then cached at a higher level.\n\n(For example, consider the `getBytes` call in the `Stat` method: we fetch `@v/$rev.info`, JSON-unmarshal it, and then return the result â€” which is pretty much always then cached by a `cachingRepo` that wraps the `proxyRepo`.)\n\nOne more efficient approach might be to factor out the call to `p.getBytes(\"@v/list\")` in particular into its own unexported method, and only cache that. But even then, we would be caching the list of versions at two different levels (the unparsed list and the parsed list), when we really only need the higher-level copy.\n\nIn practice, I believe that the call chains that use both `Versions` and `Latest` always call `Versions` first (see the `queryProxy` function in `src/cmd/go/internal/modload/query.go`). So maybe it would suffice to have `Versions` go ahead and compute and store the (singular) version needed by `Latest`. Then `Latest` can explicitly call `Versions` to compute that information if it happens to be called in isolation. (That should be straightforward to implement using a `sync.Once`.)",
      "revId": "dee38b9ec453eb7d5013ef7e920b82b8bc4b218b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a9204f17_1205352e",
        "filename": "src/cmd/go/internal/modfetch/proxy.go",
        "patchSetId": 1
      },
      "lineNbr": 247,
      "author": {
        "id": 9646
      },
      "writtenOn": "2022-05-02T17:59:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "decb6e4b_804c7f90",
      "revId": "dee38b9ec453eb7d5013ef7e920b82b8bc4b218b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}