{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "8d3ca8d8_75021b7c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-04-04T02:15:41Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003dfae769c1\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "fae769c1bde40b411bf42955797e69cddd70d175",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "43432520_0c3c4b75",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-04-04T02:24:57Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "8d3ca8d8_75021b7c",
      "tag": "autogenerated:trybots~happy",
      "revId": "fae769c1bde40b411bf42955797e69cddd70d175",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8225cb1f_f5686d67",
        "filename": "src/maps/maps_test.go",
        "patchSetId": 7
      },
      "lineNbr": 48,
      "author": {
        "id": 5200
      },
      "writtenOn": "2023-05-02T23:29:17Z",
      "side": 1,
      "message": "Does this actually leave us with a mid-grow map? I think it doesn\u0027t, but I\u0027m not 100% sure.\nWe grow from 128 to 256 buckets at size 832 (6.5 * 128). Then we have to evacuate 128 buckets, which means we\u0027ll be done evacuation at 832+128\u003d960 elements inserted. The next grow is not until 1664 elements.",
      "revId": "fae769c1bde40b411bf42955797e69cddd70d175",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2b3540c3_c96517dc",
        "filename": "src/maps/maps_test.go",
        "patchSetId": 7
      },
      "lineNbr": 48,
      "author": {
        "id": 37653
      },
      "writtenOn": "2023-05-12T05:00:03Z",
      "side": 1,
      "message": "change to 840.",
      "parentUuid": "8225cb1f_f5686d67",
      "revId": "fae769c1bde40b411bf42955797e69cddd70d175",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "088e05af_faa4a499",
        "filename": "src/maps/maps_test.go",
        "patchSetId": 7
      },
      "lineNbr": 206,
      "author": {
        "id": 5200
      },
      "writtenOn": "2023-05-02T23:29:17Z",
      "side": 1,
      "message": "I suspect this is going to be entirely allocation limited, which means it will be hard to distinguish the iterator-filling vs. runtime-filling code.\n\nIt would be nice to have an allocation-free path to test both of these, but the API doesn\u0027t allow that, unfortunately. Maybe some internal API could do that (by preallocating the result key array, perhaps?).",
      "revId": "fae769c1bde40b411bf42955797e69cddd70d175",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5f72da87_9be22dd7",
        "filename": "src/maps/maps_test.go",
        "patchSetId": 7
      },
      "lineNbr": 206,
      "author": {
        "id": 37653
      },
      "writtenOn": "2023-05-12T05:00:03Z",
      "side": 1,
      "message": "change to prealloc at maps package.",
      "parentUuid": "088e05af_faa4a499",
      "revId": "fae769c1bde40b411bf42955797e69cddd70d175",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "adfebc94_f8bbbe50",
        "filename": "src/runtime/map.go",
        "patchSetId": 7
      },
      "lineNbr": 1459,
      "author": {
        "id": 5200
      },
      "writtenOn": "2023-05-02T23:29:17Z",
      "side": 1,
      "message": "Move all of these to just before the \"if oldBuckets !\u003d nil\" statement.\nThen you might be able to simplify a bit.",
      "range": {
        "startLine": 1454,
        "startChar": 0,
        "endLine": 1459,
        "endChar": 2
      },
      "revId": "fae769c1bde40b411bf42955797e69cddd70d175",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1d5fdcd1_73f25730",
        "filename": "src/runtime/map.go",
        "patchSetId": 7
      },
      "lineNbr": 1459,
      "author": {
        "id": 37653
      },
      "writtenOn": "2023-05-12T05:00:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "adfebc94_f8bbbe50",
      "range": {
        "startLine": 1454,
        "startChar": 0,
        "endLine": 1459,
        "endChar": 2
      },
      "revId": "fae769c1bde40b411bf42955797e69cddd70d175",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "be3b1645_6c60f98a",
        "filename": "src/runtime/map.go",
        "patchSetId": 7
      },
      "lineNbr": 1460,
      "author": {
        "id": 5200
      },
      "writtenOn": "2023-05-02T23:29:17Z",
      "side": 1,
      "message": "The regular map iterator not only starts at a random bucket, but also at a random offset within the bucket. We should probably keep doing that.\nEspecially for the 1-bucket maps handled above. Otherwise the iteration order would be deterministic.",
      "revId": "fae769c1bde40b411bf42955797e69cddd70d175",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "61627f7d_261f19c6",
        "filename": "src/runtime/map.go",
        "patchSetId": 7
      },
      "lineNbr": 1460,
      "author": {
        "id": 37653
      },
      "writtenOn": "2023-05-12T05:00:03Z",
      "side": 1,
      "message": "bucket and offset are random now.",
      "parentUuid": "be3b1645_6c60f98a",
      "revId": "fae769c1bde40b411bf42955797e69cddd70d175",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ebaf6292_cc7d5793",
        "filename": "src/runtime/map.go",
        "patchSetId": 7
      },
      "lineNbr": 1491,
      "author": {
        "id": 5200
      },
      "writtenOn": "2023-05-02T23:29:17Z",
      "side": 1,
      "message": "This should never happen? The slice was sized correctly already.\n(Maybe if a data race happened? But then we could just fatal() like mapassign does.)",
      "revId": "fae769c1bde40b411bf42955797e69cddd70d175",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cb9725d9_61dfc73e",
        "filename": "src/runtime/map.go",
        "patchSetId": 7
      },
      "lineNbr": 1491,
      "author": {
        "id": 37653
      },
      "writtenOn": "2023-05-12T05:00:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ebaf6292_cc7d5793",
      "revId": "fae769c1bde40b411bf42955797e69cddd70d175",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "df02b280_4f787038",
        "filename": "src/runtime/map.go",
        "patchSetId": 7
      },
      "lineNbr": 1497,
      "author": {
        "id": 5200
      },
      "writtenOn": "2023-05-02T23:29:17Z",
      "side": 1,
      "message": "It would use less stack to do this as a loop instead of a recursion.",
      "revId": "fae769c1bde40b411bf42955797e69cddd70d175",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "82615f69_75d41aad",
        "filename": "src/runtime/map.go",
        "patchSetId": 7
      },
      "lineNbr": 1497,
      "author": {
        "id": 37653
      },
      "writtenOn": "2023-05-12T05:00:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "df02b280_4f787038",
      "revId": "fae769c1bde40b411bf42955797e69cddd70d175",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}