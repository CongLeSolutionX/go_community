{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "324f014a_b027fc58",
        "filename": "src/regexp/syntax/regexp.go",
        "patchSetId": 6
      },
      "lineNbr": 153,
      "author": {
        "id": 14665
      },
      "writtenOn": "2024-09-06T13:35:47Z",
      "side": 1,
      "message": "It seems to me that we could just remove all the code and just `return 0, 0`, since OpCharClass is parsed by parseUnicodeClass, which always push fold characters to Regexp.Rune slice. Thus the character class is now always not fold sensitive.",
      "range": {
        "startLine": 150,
        "startChar": 0,
        "endLine": 153,
        "endChar": 0
      },
      "revId": "46159c87d169bc1bc2f8b8ebc461de897339ce80",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1f28b73a_b46d6aab",
        "filename": "src/regexp/syntax/regexp.go",
        "patchSetId": 6
      },
      "lineNbr": 153,
      "author": {
        "id": 56218
      },
      "writtenOn": "2024-09-06T15:08:49Z",
      "side": 1,
      "message": "Did you mean it never reaches `return 0, flagI` in the OpCharClass case with the current implementation?",
      "parentUuid": "324f014a_b027fc58",
      "range": {
        "startLine": 150,
        "startChar": 0,
        "endLine": 153,
        "endChar": 0
      },
      "revId": "46159c87d169bc1bc2f8b8ebc461de897339ce80",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7e4c6399_b8634b80",
        "filename": "src/regexp/syntax/regexp.go",
        "patchSetId": 6
      },
      "lineNbr": 153,
      "author": {
        "id": 14665
      },
      "writtenOn": "2024-09-06T15:11:32Z",
      "side": 1,
      "message": "It does reach that return statement, but seems does not matter at all, because `re.String()` always clear flagI.\n\nAt least, there\u0027s no test failing when these code is removed.\n\nI would wait for Russ (or Rob Pike) to chime in, he knows the code better.",
      "parentUuid": "1f28b73a_b46d6aab",
      "range": {
        "startLine": 150,
        "startChar": 0,
        "endLine": 153,
        "endChar": 0
      },
      "revId": "46159c87d169bc1bc2f8b8ebc461de897339ce80",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "066957cc_82d6d119",
        "filename": "src/regexp/syntax/regexp.go",
        "patchSetId": 6
      },
      "lineNbr": 153,
      "author": {
        "id": 56218
      },
      "writtenOn": "2024-09-06T16:03:32Z",
      "side": 1,
      "message": "Just FYI, I tested the case `[xX][O-u]`\n- `(?i:X[O-u])` with `returns 0, 0`\n- `(?i:X)[O-u]` with the current impl",
      "parentUuid": "7e4c6399_b8634b80",
      "range": {
        "startLine": 150,
        "startChar": 0,
        "endLine": 153,
        "endChar": 0
      },
      "revId": "46159c87d169bc1bc2f8b8ebc461de897339ce80",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a4629392_09a554e1",
        "filename": "src/regexp/syntax/regexp.go",
        "patchSetId": 6
      },
      "lineNbr": 153,
      "author": {
        "id": 14665
      },
      "writtenOn": "2024-09-06T16:17:41Z",
      "side": 1,
      "message": "What actual regex string you use for testing? This diff passes with both current implementation and `returns 0, 0` for me:\n\n```\ndiff --git a/src/regexp/syntax/parse_test.go b/src/regexp/syntax/parse_test.go\nindex 0f885bd5c8..5ebc5a7310 100644\n--- a/src/regexp/syntax/parse_test.go\n+++ b/src/regexp/syntax/parse_test.go\n@@ -611,6 +611,7 @@ var stringTests \u003d []struct {\n        {`[Aa][Bb]*[Cc]`, `(?i:AB*C)`},\n        {`A(?:[Bb][Cc]|[Dd])[Zz]`, `A(?i:(?:BC|D)Z)`},\n        {`[Aa](?:[Bb][Cc]|[Dd])Z`, `(?i:A(?:BC|D))Z`},\n+       {`(?i)[xX][O-u]`, `(?i:X[A-zſK])`},\n }\n \n func TestString(t *testing.T) {\n ```",
      "parentUuid": "066957cc_82d6d119",
      "range": {
        "startLine": 150,
        "startChar": 0,
        "endLine": 153,
        "endChar": 0
      },
      "revId": "46159c87d169bc1bc2f8b8ebc461de897339ce80",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "091c14a4_4b1d3441",
        "filename": "src/regexp/syntax/regexp.go",
        "patchSetId": 6
      },
      "lineNbr": 153,
      "author": {
        "id": 56218
      },
      "writtenOn": "2024-09-06T16:30:08Z",
      "side": 1,
      "message": "Without the prefix `(?i)` in your input:\n\n```\n{`[xX][O-u]`, `(?i:X)[O-u]`},\n```",
      "parentUuid": "a4629392_09a554e1",
      "range": {
        "startLine": 150,
        "startChar": 0,
        "endLine": 153,
        "endChar": 0
      },
      "revId": "46159c87d169bc1bc2f8b8ebc461de897339ce80",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}