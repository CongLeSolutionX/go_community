{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "4282f619_d8798f49",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 26,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-04-06T20:35:32Z",
      "side": 1,
      "message": "This doesn\u0027t seem to implement the `// deprecated` go.mod annotations discussed on the issue. That seems fine, but is probably worth mentioning in the commit message.",
      "revId": "f3345ef12a188769463843bd85089f1d45181dcb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "abc30d29_8c591d89",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 26,
      "author": {
        "id": 17092
      },
      "writtenOn": "2021-04-08T22:44:47Z",
      "side": 1,
      "message": "Added a pointer to the x/mod CL.",
      "parentUuid": "4282f619_d8798f49",
      "revId": "f3345ef12a188769463843bd85089f1d45181dcb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "05d24034_1a1edf11",
        "filename": "src/cmd/go/internal/modget/get.go",
        "patchSetId": 2
      },
      "lineNbr": 1463,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-04-06T20:35:32Z",
      "side": 1,
      "message": "s/directly required by/provides a direct dependency of/\n\n“direct” is about packages, not module requirements. (A “direct” dependency is one that provides a directly-imported package; an “explicit” one is one that appears in the requirements in the go.mod file. Direct implies explicit, but explicit does not necessarily imply direct.)",
      "range": {
        "startLine": 1463,
        "startChar": 35,
        "endLine": 1463,
        "endChar": 55
      },
      "revId": "f3345ef12a188769463843bd85089f1d45181dcb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e6ba5647_96214151",
        "filename": "src/cmd/go/internal/modget/get.go",
        "patchSetId": 2
      },
      "lineNbr": 1463,
      "author": {
        "id": 17092
      },
      "writtenOn": "2021-04-08T22:44:47Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "05d24034_1a1edf11",
      "range": {
        "startLine": 1463,
        "startChar": 35,
        "endLine": 1463,
        "endChar": 55
      },
      "revId": "f3345ef12a188769463843bd85089f1d45181dcb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "51e060f0_c830c0ac",
        "filename": "src/cmd/go/internal/modget/get.go",
        "patchSetId": 2
      },
      "lineNbr": 1555,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-04-06T20:35:32Z",
      "side": 1,
      "message": "This isn\u0027t strictly true, but maybe it\u0027s true enough not to matter‽\n\nhasPkg certainly matters — a module that appears in the build list but provides no imported packages at all is irrelevant to the build, and we shouldn\u0027t care whether it is deprecated.\n\nHowever, if something in the main module is transitively importing from a deprecated module, it is always possible to remove that indirect import by changing the code to no longer import the packages that transitively import from the deprecated module.\n\nIt may also be possible to upgrade one or more direct dependencies in order to remove the transitive import from (and requirement on) the deprecated one, if the implementation of a direct dependency has been upgraded to avoid internal use of deprecated packages.",
      "range": {
        "startLine": 1554,
        "startChar": 24,
        "endLine": 1555,
        "endChar": 19
      },
      "revId": "f3345ef12a188769463843bd85089f1d45181dcb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e622aeda_ceb87e6a",
        "filename": "src/cmd/go/internal/modget/get.go",
        "patchSetId": 2
      },
      "lineNbr": 1555,
      "author": {
        "id": 17092
      },
      "writtenOn": "2021-04-08T22:44:47Z",
      "side": 1,
      "message": "Technically there are actions that may fix this, but I don\u0027t think we can provide that advice automatically.\n\nIf a deprecated module provides packages used directly by the main module or is mentioned on the command line, there\u0027s a good chance the user can do something, either by upgrading to a different module (new major) or dropping the dependency.\n\nIf the user doesn\u0027t control the import, it\u0027s much harder. The instructions in the deprecation message probably aren\u0027t applicable.\n\nI\u0027d argue we\u0027re striking the right balance here: the advice in \u0027go get\u0027 is incidental to what the user\u0027s doing, so it\u0027s more important that it\u0027s actionable. Information on indirect dependencies is still available from \u0027go list -m -u\u0027.",
      "parentUuid": "51e060f0_c830c0ac",
      "range": {
        "startLine": 1554,
        "startChar": 24,
        "endLine": 1555,
        "endChar": 19
      },
      "revId": "f3345ef12a188769463843bd85089f1d45181dcb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c6bb6240_8c126b57",
        "filename": "src/cmd/go/internal/modget/get.go",
        "patchSetId": 2
      },
      "lineNbr": 1555,
      "author": {
        "id": 17092
      },
      "writtenOn": "2021-04-09T18:20:56Z",
      "side": 1,
      "message": "Resolved",
      "parentUuid": "e622aeda_ceb87e6a",
      "range": {
        "startLine": 1554,
        "startChar": 24,
        "endLine": 1555,
        "endChar": 19
      },
      "revId": "f3345ef12a188769463843bd85089f1d45181dcb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a656f34f_12154548",
        "filename": "src/cmd/go/internal/modload/modfile.go",
        "patchSetId": 2
      },
      "lineNbr": 228,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-04-06T20:35:32Z",
      "side": 1,
      "message": "Would it make sense to read and print the deprecation message (if any) from the go.mod file in the replacement directory?",
      "range": {
        "startLine": 228,
        "startChar": 39,
        "endLine": 228,
        "endChar": 62
      },
      "revId": "f3345ef12a188769463843bd85089f1d45181dcb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7f58efb5_123ca438",
        "filename": "src/cmd/go/internal/modload/modfile.go",
        "patchSetId": 2
      },
      "lineNbr": 228,
      "author": {
        "id": 17092
      },
      "writtenOn": "2021-04-08T22:44:47Z",
      "side": 1,
      "message": "I don\u0027t think we can.\n\nWe\u0027ll already read the deprecation message from a directory replacement *if* the directory replaces the latest version of the module on the left. mod_list_deprecated_replace tests that.\n\nThis branch prevents us from loading a deprecation message for the directory replacement itself (on the right side of the replace). But there is no latest version of that directory, since it\u0027s not really a module.",
      "parentUuid": "a656f34f_12154548",
      "range": {
        "startLine": 228,
        "startChar": 39,
        "endLine": 228,
        "endChar": 62
      },
      "revId": "f3345ef12a188769463843bd85089f1d45181dcb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e53c4c41_7360175d",
        "filename": "src/cmd/go/internal/modload/modfile.go",
        "patchSetId": 2
      },
      "lineNbr": 239,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-04-06T20:35:32Z",
      "side": 1,
      "message": "Should we check the error type here, as in CL 306572?",
      "revId": "f3345ef12a188769463843bd85089f1d45181dcb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "05791f2f_93dc1419",
        "filename": "src/cmd/go/internal/modload/modfile.go",
        "patchSetId": 2
      },
      "lineNbr": 239,
      "author": {
        "id": 17092
      },
      "writtenOn": "2021-04-08T22:44:47Z",
      "side": 1,
      "message": "Done in addDeprecation.",
      "parentUuid": "e53c4c41_7360175d",
      "revId": "f3345ef12a188769463843bd85089f1d45181dcb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "994af99c_d2dd9d28",
        "filename": "src/cmd/go/internal/modload/modfile.go",
        "patchSetId": 2
      },
      "lineNbr": 240,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-04-06T20:35:32Z",
      "side": 1,
      "message": "I don\u0027t really understand why being offline has anything to do with this — I would expect that we only load deprecations under more-or-less the same conditions as retractions (only when checking for updates), and we shouldn\u0027t be checking for updates in the first place if we\u0027re offline.",
      "range": {
        "startLine": 240,
        "startChar": 0,
        "endLine": 240,
        "endChar": 48
      },
      "revId": "f3345ef12a188769463843bd85089f1d45181dcb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6f8d7dbc_a15b8b68",
        "filename": "src/cmd/go/internal/modload/modfile.go",
        "patchSetId": 2
      },
      "lineNbr": 240,
      "author": {
        "id": 17092
      },
      "writtenOn": "2021-04-08T22:44:47Z",
      "side": 1,
      "message": "You\u0027re right, offline is wrong. And in fact, we get different errors when offline.\n\nReturning all errors here, letting addDeprecation sort it out. Updated the comment there.",
      "parentUuid": "994af99c_d2dd9d28",
      "range": {
        "startLine": 240,
        "startChar": 0,
        "endLine": 240,
        "endChar": 48
      },
      "revId": "f3345ef12a188769463843bd85089f1d45181dcb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "000c34d2_7c86eff1",
        "filename": "src/cmd/go/testdata/script/mod_edit.txt",
        "patchSetId": 2
      },
      "lineNbr": 298,
      "author": {
        "id": 10033
      },
      "writtenOn": "2021-04-02T21:53:18Z",
      "side": 1,
      "message": "heh",
      "range": {
        "startLine": 298,
        "startChar": 15,
        "endLine": 298,
        "endChar": 47
      },
      "revId": "f3345ef12a188769463843bd85089f1d45181dcb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9ae671b0_c059b12d",
        "filename": "src/cmd/go/testdata/script/mod_get_deprecated.txt",
        "patchSetId": 2
      },
      "lineNbr": 12,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-04-06T20:35:32Z",
      "side": 1,
      "message": "With lazy loading, every module providing imported packages will be explicitly required. So I\u0027m not sure this condition is particularly relevant...",
      "range": {
        "startLine": 12,
        "startChar": 27,
        "endLine": 12,
        "endChar": 63
      },
      "revId": "f3345ef12a188769463843bd85089f1d45181dcb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "67d8b20e_bc8082df",
        "filename": "src/cmd/go/testdata/script/mod_get_deprecated.txt",
        "patchSetId": 2
      },
      "lineNbr": 12,
      "author": {
        "id": 17092
      },
      "writtenOn": "2021-04-08T22:44:47Z",
      "side": 1,
      "message": "Rephrased.",
      "parentUuid": "9ae671b0_c059b12d",
      "range": {
        "startLine": 12,
        "startChar": 27,
        "endLine": 12,
        "endChar": 63
      },
      "revId": "f3345ef12a188769463843bd85089f1d45181dcb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b907d0b5_8f67044e",
        "filename": "src/cmd/go/testdata/script/mod_get_deprecated.txt",
        "patchSetId": 2
      },
      "lineNbr": 24,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-04-06T20:35:32Z",
      "side": 1,
      "message": "In https://golang.org/issue/40357#issuecomment-674132577, you wrote:\n\n\u003e The comment would be extracted from the @latest version of the module.\n\u003e So the deprecation could be changed or removed by releasing a new version.\n\nShould we test for that sort of undeprecation here?",
      "revId": "f3345ef12a188769463843bd85089f1d45181dcb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0f527c57_8574ada4",
        "filename": "src/cmd/go/testdata/script/mod_get_deprecated.txt",
        "patchSetId": 2
      },
      "lineNbr": 24,
      "author": {
        "id": 17092
      },
      "writtenOn": "2021-04-08T22:44:47Z",
      "side": 1,
      "message": "Good point! Tested here and in mod_list_deprecated.",
      "parentUuid": "b907d0b5_8f67044e",
      "revId": "f3345ef12a188769463843bd85089f1d45181dcb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}