{
  "comments": [
    {
      "key": {
        "uuid": "96c2aefc_d1e7b72b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 15
      },
      "lineNbr": 0,
      "author": {
        "id": 37583
      },
      "writtenOn": "2020-08-31T07:54:38Z",
      "side": 1,
      "message": "Thsnks for changing the code. It dose make sense. I I removed the \u002764\u0027 suffix in the code so it could also execute on 32-bits machines, is it all right?",
      "revId": "4e7c634236b45534b43659a840b36b244e89413b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4f565a8b_94ba44f7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 15
      },
      "lineNbr": 0,
      "author": {
        "id": 5200
      },
      "writtenOn": "2020-08-31T15:34:34Z",
      "side": 1,
      "message": "Yes, that\u0027s good thanks.",
      "parentUuid": "96c2aefc_d1e7b72b",
      "revId": "4e7c634236b45534b43659a840b36b244e89413b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6638b6b1_2fa8453e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 15
      },
      "lineNbr": 0,
      "author": {
        "id": 5200
      },
      "writtenOn": "2020-08-31T15:34:34Z",
      "side": 1,
      "message": "Thanks for looking at my code. Sorry about the back-and-forth. It seems that your code worked fine; I just couldn\u0027t get my head around *why* it worked. I\u0027m happy to spend a bit of performance to make the code clear, not just for me but the next person who happens upon this code.\n\nI feel like this could still use more tests. I think the current tests are just TestFunVWW, TestNatDiv, and TestIssue37499. There\u0027s not a lot of test cases. Although it probably gets called from a lot of other tests that aren\u0027t explicitly tests for div itself.\n\nI ran coverage on this current CL (with the divWW intrinsic fix) and at least we\u0027re 100% covered on the new code. But I think we should try to stress divWW explicitly, maybe with random tests?\n",
      "revId": "4e7c634236b45534b43659a840b36b244e89413b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4f4471f0_2b0df225",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 15
      },
      "lineNbr": 0,
      "author": {
        "id": 20650
      },
      "writtenOn": "2020-09-01T03:35:20Z",
      "side": 1,
      "message": "Thanks a lot for putting this in.  This is a really great improvement.\n\nPlease have a look at my suggestions from the reference https://gmplib.org/~tege/division-paper.pdf by the GMP authors.  I believe there are a few opportunities to improve the performance even more.\n\nI would also recommend that you keep the straightforward division implementation in a test file and setup a random test to compare the optimized implementation versus the obviously correct implementation.",
      "revId": "4e7c634236b45534b43659a840b36b244e89413b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0e7b8f47_42a09326",
        "filename": "src/math/big/arith.go",
        "patchSetId": 15
      },
      "lineNbr": 206,
      "author": {
        "id": 20650
      },
      "writtenOn": "2020-09-01T03:35:20Z",
      "side": 1,
      "message": "Since you are changing the signature, there is no need to recompute nlz(y) every time this is called since it will be called repeatedly.  You can return the shift, s, from getInvert and just pass it in here as an argument.",
      "revId": "4e7c634236b45534b43659a840b36b244e89413b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "416d3a1a_ef50839f",
        "filename": "src/math/big/arith.go",
        "patchSetId": 15
      },
      "lineNbr": 206,
      "author": {
        "id": 37583
      },
      "writtenOn": "2020-09-01T12:20:54Z",
      "side": 1,
      "message": "That\u0027s exactly what i did before. (You can look at Patchset4 ). But omitting nlz does not increase performance in my tests. Maybe it makes more sense to avoid passing more parameters.",
      "parentUuid": "0e7b8f47_42a09326",
      "revId": "4e7c634236b45534b43659a840b36b244e89413b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ee7578ee_4dc95078",
        "filename": "src/math/big/arith.go",
        "patchSetId": 15
      },
      "lineNbr": 213,
      "author": {
        "id": 20650
      },
      "writtenOn": "2020-09-01T03:35:20Z",
      "side": 1,
      "message": "This method looks to be similar to the one in https://gmplib.org/~tege/division-paper.pdf and it seems most of the comments here could be replaced with reference to the primary source.\n\nAlso, algorithm 4 in that reference appears to be more efficient than this implementation in that it only contains a single full-width multiply (line 1 \u003d one bits.Mul) and a full-width addition (line 2 \u003d two bits.Add) and the rest of the calculations act on single word values.",
      "revId": "4e7c634236b45534b43659a840b36b244e89413b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b90acd53_98a1be17",
        "filename": "src/math/big/arith.go",
        "patchSetId": 15
      },
      "lineNbr": 213,
      "author": {
        "id": 37583
      },
      "writtenOn": "2020-09-01T12:20:54Z",
      "side": 1,
      "message": "That\u0027s what I did before too. In fact, I have seen the source code of gmp. And here is what I wrote and prove before. Keith said that we should give up some performance to ensure clean code. Do you think we should stick to the following implementation？\ncode:\n\tqq++\n\t//  refers to Q3.\n\trr :\u003d uint(x0) - d*qq\n\tif rr \u003e\u003d q0 {\t// branch1\n\t\tqq--\n\t\trr +\u003d d\n\t}\n\tif rr \u003e\u003d d {\t// branch2\n\t\tqq++\n\t\trr -\u003d d\n\t}\n\trr \u003e\u003e\u003d shift\n\treturn Word(qq), Word(rr)\nprove:\nlook at Patch14: arith.go",
      "parentUuid": "ee7578ee_4dc95078",
      "revId": "4e7c634236b45534b43659a840b36b244e89413b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1979a2aa_25491da3",
        "filename": "src/math/big/arith.go",
        "patchSetId": 15
      },
      "lineNbr": 279,
      "author": {
        "id": 20650
      },
      "writtenOn": "2020-09-01T03:35:20Z",
      "side": 1,
      "message": "getReciprocal would be a more accurate name for this function.\n\nAlso, the aforementioned reference https://gmplib.org/~tege/division-paper.pdf contains algorithm 2 and 3 which compute this reciprocal for 32/64 bits respectively without using any division.  That method should be faster in general and will improve the speed for divisions of only a few words where getReciprocal will be a significant portion of the overall calculation.  It would be worth noting that as a possible future improvement.",
      "range": {
        "startLine": 279,
        "startChar": 12,
        "endLine": 279,
        "endChar": 13
      },
      "revId": "4e7c634236b45534b43659a840b36b244e89413b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dfcc821f_cbfb7318",
        "filename": "src/math/big/arith.go",
        "patchSetId": 15
      },
      "lineNbr": 279,
      "author": {
        "id": 37583
      },
      "writtenOn": "2020-09-01T12:20:54Z",
      "side": 1,
      "message": "Thanks very much. I think I did akin thing before too. Refers to getInvert Patch10. Do you think we should stick to this way of writing and give up clean code?",
      "parentUuid": "1979a2aa_25491da3",
      "range": {
        "startLine": 279,
        "startChar": 12,
        "endLine": 279,
        "endChar": 13
      },
      "revId": "4e7c634236b45534b43659a840b36b244e89413b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "48b8d6ec_0d2eb239",
        "filename": "src/math/big/nat.go",
        "patchSetId": 15
      },
      "lineNbr": 745,
      "author": {
        "id": 20650
      },
      "writtenOn": "2020-09-01T03:35:20Z",
      "side": 1,
      "message": "Minor note, speeding up divBasic changes divRecursiveThreshold, the optimum cut-off for switching to recursive division. If the shift is big, it is worth including in this change as well. Unfortunately, I don\u0027t think there is a straightforward calibration test for that like the karatsuba thresholds in calibrate_test.go",
      "revId": "4e7c634236b45534b43659a840b36b244e89413b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "72d2fa89_fdaf64c0",
        "filename": "src/math/big/nat.go",
        "patchSetId": 15
      },
      "lineNbr": 745,
      "author": {
        "id": 37583
      },
      "writtenOn": "2020-09-01T12:20:54Z",
      "side": 1,
      "message": "Thanks very much for this:). But I still don’t know what the value of the special change should be. Consider that if you use the 3/2 (192bits/128bits) type inverse in the future instead of the 2/1 type used now. I think we can make corresponding changes in a new CL, what do you think?",
      "parentUuid": "48b8d6ec_0d2eb239",
      "revId": "4e7c634236b45534b43659a840b36b244e89413b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    }
  ]
}