{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "003b23d4_0995cc12",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 31647
      },
      "writtenOn": "2021-10-01T02:30:17Z",
      "side": 1,
      "message": "This LGTM for the importer change. It will also be easy to make the x/tools importer resilient to the new format: just strip both subscript AND prefix. I can do that to avoid builder failure.",
      "revId": "0b3bdf567144bd9a8652c589ecef3bd684feada6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4078fcb8_caf5d720",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-10-01T16:31:07Z",
      "side": 1,
      "message": "Superseded.",
      "parentUuid": "d9d9dede_4503d82e",
      "tag": "autogenerated:trybots~beginning",
      "revId": "0b3bdf567144bd9a8652c589ecef3bd684feada6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "851890c4_16cc56b9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-10-01T16:31:07Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003d0b3bdf56",
      "tag": "autogenerated:trybots~beginning",
      "revId": "0b3bdf567144bd9a8652c589ecef3bd684feada6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "601aaa93_fe7d3163",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-10-01T17:10:22Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "851890c4_16cc56b9",
      "tag": "autogenerated:trybots~happy",
      "revId": "0b3bdf567144bd9a8652c589ecef3bd684feada6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "21cf11a0_c42620f0",
        "filename": "src/cmd/compile/internal/noder/decl.go",
        "patchSetId": 2
      },
      "lineNbr": 96,
      "author": {
        "id": 31647
      },
      "writtenOn": "2021-10-01T17:14:30Z",
      "side": 1,
      "message": "nit:\n\n  if ptr :\u003d types2.AsPointer(t2); ptr !\u003d nil {\n    t2 \u003d ptr.Elem()\n  }\n  \nBut it looks like you can use the deref2 function instead.",
      "range": {
        "startLine": 96,
        "startChar": 5,
        "endLine": 96,
        "endChar": 32
      },
      "revId": "0b3bdf567144bd9a8652c589ecef3bd684feada6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ed0f1093_6a1481b9",
        "filename": "src/cmd/compile/internal/noder/decl.go",
        "patchSetId": 2
      },
      "lineNbr": 96,
      "author": {
        "id": 28783
      },
      "writtenOn": "2021-10-01T17:27:30Z",
      "side": 1,
      "message": "Yes, good suggestion, forgot that we had that.  Done.",
      "parentUuid": "21cf11a0_c42620f0",
      "range": {
        "startLine": 96,
        "startChar": 5,
        "endLine": 96,
        "endChar": 32
      },
      "revId": "0b3bdf567144bd9a8652c589ecef3bd684feada6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8b8c4bd2_1b02246a",
        "filename": "src/cmd/compile/internal/noder/decl.go",
        "patchSetId": 2
      },
      "lineNbr": 100,
      "author": {
        "id": 31647
      },
      "writtenOn": "2021-10-01T17:14:30Z",
      "side": 1,
      "message": "We can assume no type-checking errors here, right? So this code doesn\u0027t need to be more defensive (for invalid code it\u0027s possible that t2 is, for example, types2.Typ[types2.Invalid]).",
      "range": {
        "startLine": 100,
        "startChar": 14,
        "endLine": 100,
        "endChar": 45
      },
      "revId": "0b3bdf567144bd9a8652c589ecef3bd684feada6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f33530a9_35fb6d27",
        "filename": "src/cmd/compile/internal/noder/decl.go",
        "patchSetId": 2
      },
      "lineNbr": 100,
      "author": {
        "id": 28783
      },
      "writtenOn": "2021-10-01T17:27:30Z",
      "side": 1,
      "message": "Yes, we will not have gotten to this point if there are any types2 typechecking errors.",
      "parentUuid": "8b8c4bd2_1b02246a",
      "range": {
        "startLine": 100,
        "startChar": 14,
        "endLine": 100,
        "endChar": 45
      },
      "revId": "0b3bdf567144bd9a8652c589ecef3bd684feada6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "338ebda7_9b19e774",
        "filename": "src/cmd/compile/internal/noder/decl.go",
        "patchSetId": 2
      },
      "lineNbr": 162,
      "author": {
        "id": 31647
      },
      "writtenOn": "2021-10-01T17:14:30Z",
      "side": 1,
      "message": "What about local generic type declarations?\n\n  func Foo() {\n    type N[P any] int\n  }\n  \nIs that relevant here?",
      "range": {
        "startLine": 162,
        "startChar": 1,
        "endLine": 162,
        "endChar": 28
      },
      "revId": "0b3bdf567144bd9a8652c589ecef3bd684feada6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b921923e_3f398c53",
        "filename": "src/cmd/compile/internal/noder/decl.go",
        "patchSetId": 2
      },
      "lineNbr": 162,
      "author": {
        "id": 28783
      },
      "writtenOn": "2021-10-01T17:27:30Z",
      "side": 1,
      "message": "Local types are not supported yet, as we discussed.  So, as I mentioned this is possibly a first step, that will be augmented if we add support for local types in 1.18.  But we do need the unique type names in types1 regardless.  And best to eliminate the need for the unique id right now.",
      "parentUuid": "338ebda7_9b19e774",
      "range": {
        "startLine": 162,
        "startChar": 1,
        "endLine": 162,
        "endChar": 28
      },
      "revId": "0b3bdf567144bd9a8652c589ecef3bd684feada6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4640fc48_87ca04e6",
        "filename": "src/cmd/compile/internal/noder/decl.go",
        "patchSetId": 2
      },
      "lineNbr": 162,
      "author": {
        "id": 31647
      },
      "writtenOn": "2021-10-01T17:30:54Z",
      "side": 1,
      "message": "Local generic types on *non* generic functions seem to work. E.g. the following compiles and runs as expected for me:\n\n  type N[T any] string\n\n  func main() {\n    type N[T any] struct{ t T }\n    var x N[int]\n    fmt.Println(x)\n  }\n  \nWould this cause conflicts?",
      "parentUuid": "b921923e_3f398c53",
      "range": {
        "startLine": 162,
        "startChar": 1,
        "endLine": 162,
        "endChar": 28
      },
      "revId": "0b3bdf567144bd9a8652c589ecef3bd684feada6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7890e75c_faed6569",
        "filename": "src/cmd/compile/internal/noder/decl.go",
        "patchSetId": 2
      },
      "lineNbr": 162,
      "author": {
        "id": 28783
      },
      "writtenOn": "2021-10-01T17:45:26Z",
      "side": 1,
      "message": "That\u0027s a good point.  I didn\u0027t realize that local generic types were working inside non-generic functions.  Note that they would not work for an exported, inlinable non-generic function, since we would try to export them in that case as well, which would fail.\n\nIt seems that going from the unique id to the \"path\" prefix will break this case (could cause two different type params in local definitions to be treated as the same).  But I don\u0027t necessarily think that should hold up this CL.  I think we should either support local generic types completely, or completely disallow their use for 1.18, so this case should either be fixed or disallowed.\n\nI can add a comment to issue https://github.com/golang/go/issues/47631 about this case.",
      "parentUuid": "4640fc48_87ca04e6",
      "range": {
        "startLine": 162,
        "startChar": 1,
        "endLine": 162,
        "endChar": 28
      },
      "revId": "0b3bdf567144bd9a8652c589ecef3bd684feada6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "42be409c_eccb1fc4",
        "filename": "src/cmd/compile/internal/noder/decl.go",
        "patchSetId": 2
      },
      "lineNbr": 162,
      "author": {
        "id": 31647
      },
      "writtenOn": "2021-10-01T17:52:53Z",
      "side": 1,
      "message": "Sounds good. CL LGTM otherwise.",
      "parentUuid": "7890e75c_faed6569",
      "range": {
        "startLine": 162,
        "startChar": 1,
        "endLine": 162,
        "endChar": 28
      },
      "revId": "0b3bdf567144bd9a8652c589ecef3bd684feada6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}