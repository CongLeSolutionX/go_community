{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "003b23d4_0995cc12",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 31647
      },
      "writtenOn": "2021-10-01T02:30:17Z",
      "side": 1,
      "message": "This LGTM for the importer change. It will also be easy to make the x/tools importer resilient to the new format: just strip both subscript AND prefix. I can do that to avoid builder failure.",
      "revId": "0b3bdf567144bd9a8652c589ecef3bd684feada6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4078fcb8_caf5d720",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-10-01T16:31:07Z",
      "side": 1,
      "message": "Superseded.",
      "parentUuid": "d9d9dede_4503d82e",
      "tag": "autogenerated:trybots~beginning",
      "revId": "0b3bdf567144bd9a8652c589ecef3bd684feada6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "851890c4_16cc56b9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-10-01T16:31:07Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003d0b3bdf56",
      "tag": "autogenerated:trybots~beginning",
      "revId": "0b3bdf567144bd9a8652c589ecef3bd684feada6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "601aaa93_fe7d3163",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-10-01T17:10:22Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "851890c4_16cc56b9",
      "tag": "autogenerated:trybots~happy",
      "revId": "0b3bdf567144bd9a8652c589ecef3bd684feada6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "21cf11a0_c42620f0",
        "filename": "src/cmd/compile/internal/noder/decl.go",
        "patchSetId": 2
      },
      "lineNbr": 96,
      "author": {
        "id": 31647
      },
      "writtenOn": "2021-10-01T17:14:30Z",
      "side": 1,
      "message": "nit:\n\n  if ptr :\u003d types2.AsPointer(t2); ptr !\u003d nil {\n    t2 \u003d ptr.Elem()\n  }\n  \nBut it looks like you can use the deref2 function instead.",
      "range": {
        "startLine": 96,
        "startChar": 5,
        "endLine": 96,
        "endChar": 32
      },
      "revId": "0b3bdf567144bd9a8652c589ecef3bd684feada6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8b8c4bd2_1b02246a",
        "filename": "src/cmd/compile/internal/noder/decl.go",
        "patchSetId": 2
      },
      "lineNbr": 100,
      "author": {
        "id": 31647
      },
      "writtenOn": "2021-10-01T17:14:30Z",
      "side": 1,
      "message": "We can assume no type-checking errors here, right? So this code doesn\u0027t need to be more defensive (for invalid code it\u0027s possible that t2 is, for example, types2.Typ[types2.Invalid]).",
      "range": {
        "startLine": 100,
        "startChar": 14,
        "endLine": 100,
        "endChar": 45
      },
      "revId": "0b3bdf567144bd9a8652c589ecef3bd684feada6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "338ebda7_9b19e774",
        "filename": "src/cmd/compile/internal/noder/decl.go",
        "patchSetId": 2
      },
      "lineNbr": 162,
      "author": {
        "id": 31647
      },
      "writtenOn": "2021-10-01T17:14:30Z",
      "side": 1,
      "message": "What about local generic type declarations?\n\n  func Foo() {\n    type N[P any] int\n  }\n  \nIs that relevant here?",
      "range": {
        "startLine": 162,
        "startChar": 1,
        "endLine": 162,
        "endChar": 28
      },
      "revId": "0b3bdf567144bd9a8652c589ecef3bd684feada6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}