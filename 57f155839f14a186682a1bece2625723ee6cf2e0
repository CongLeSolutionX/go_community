{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "48a0e7a0_0154c511",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 50449
      },
      "writtenOn": "2021-06-09T14:50:17Z",
      "side": 1,
      "message": "Hey Rhys, this looks great already! I left a few comments, but it\u0027s mostly questions right now. I hope to add more valuable feedback as I continue getting up to speed on this.",
      "revId": "57f155839f14a186682a1bece2625723ee6cf2e0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "663ccbc8_305c983e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 9210
      },
      "writtenOn": "2021-06-09T16:20:38Z",
      "side": 1,
      "message": "Thanks Felix! PS4 fixes some of the weird bits; moving beyond \"look, it could work\" towards \"maybe this could land upstream\".",
      "parentUuid": "48a0e7a0_0154c511",
      "revId": "57f155839f14a186682a1bece2625723ee6cf2e0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "571430a8_81c3ad67",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 50449
      },
      "writtenOn": "2021-06-15T09:44:05Z",
      "side": 1,
      "message": "@Rhys: This new iteration looks great! The main issues I see right now is handling cgo. As far as I can tell cgo functions running on threads created by the go runtime would currently be subject to both `timer_create()` as well as `setitimer()` sampling and get oversampled. And threads created outside of the Go runtime would only receive `setitimer()` samples and continue to suffer from the existing issues.\n\nThe latter only seems solvable by trying to call `timer_create()` from within the signal handler code as well when discovering an alien thread. Not sure if you\u0027ve given up on that idea for now?",
      "revId": "57f155839f14a186682a1bece2625723ee6cf2e0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e005ad74_f12e503a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 9210
      },
      "writtenOn": "2021-07-17T23:09:11Z",
      "side": 1,
      "message": "I think I\u0027ve addressed the cgo-related oversampling, except in linux/amd64 and linux/ppc64x. Those platforms should work when there\u0027s no runtime.SetCgoTraceback call, but to work when that feature is active they\u0027ll need changes to their runtimeÂ·cgoSigtramp/sigtrampnog assembly code. I put \"TODO\" markers in the assembly where I think the change should go.\n\nAs for creating timers for cgo threads we discover via the signal handler, I don\u0027t see a good way to do the bookkeeping for that: in addition to tracking the thread+timer pairs so we can clean up when profiling stops, it also needs to be safe to write from a signal handler (to note that we did the setup) and safe to read from a signal handler (to not create multiple timers). That sounds expensive, either in implementation time+complexity, or in memory space. I don\u0027t have plans to do it.",
      "parentUuid": "571430a8_81c3ad67",
      "revId": "57f155839f14a186682a1bece2625723ee6cf2e0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "59dbaa67_374a4273",
        "filename": "src/runtime/os_linux.go",
        "patchSetId": 4
      },
      "lineNbr": 679,
      "author": {
        "id": 50449
      },
      "writtenOn": "2021-06-15T09:44:05Z",
      "side": 1,
      "message": "I\u0027m not sure I understand this. Is this intended to capture work done on short lived threads that exit in less than 1/Hz (10ms)?",
      "revId": "57f155839f14a186682a1bece2625723ee6cf2e0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0002ff52_c30a5978",
        "filename": "src/runtime/os_linux.go",
        "patchSetId": 4
      },
      "lineNbr": 679,
      "author": {
        "id": 9210
      },
      "writtenOn": "2021-07-17T23:09:11Z",
      "side": 1,
      "message": "For threads that exit quickly, and also for threads that do only a small amount of work (less than 10ms) while profiling is active. The GC workers in a mostly-idle process would fall into that second case. I expanded the commentary near this code and described it in the commit message.",
      "parentUuid": "59dbaa67_374a4273",
      "revId": "57f155839f14a186682a1bece2625723ee6cf2e0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e55a6c4c_b2be5551",
        "filename": "src/runtime/os_linux.go",
        "patchSetId": 4
      },
      "lineNbr": 696,
      "author": {
        "id": 50449
      },
      "writtenOn": "2021-06-15T09:44:05Z",
      "side": 1,
      "message": "NIT: Probably better to not shadow the builtin new() function, especially since this function already uses it a few lines earlier. If not dangerous, it\u0027s definitely a little confusing. The same comment applies to other parts of this patch that use new as variable name.\n\n(I did notice that a few other files in the Go tree already use this variable name, so arguably it seems acceptable upstream)",
      "revId": "57f155839f14a186682a1bece2625723ee6cf2e0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cd7785fa_6454a910",
        "filename": "src/runtime/os_linux.go",
        "patchSetId": 4
      },
      "lineNbr": 696,
      "author": {
        "id": 9210
      },
      "writtenOn": "2021-07-17T23:09:11Z",
      "side": 1,
      "message": "Done\n\nI changed the variable names I use for atomics. The existing syscall stubs use \"old\" and \"new\", so for the syscall stubs I added I kept that naming.",
      "parentUuid": "e55a6c4c_b2be5551",
      "revId": "57f155839f14a186682a1bece2625723ee6cf2e0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}