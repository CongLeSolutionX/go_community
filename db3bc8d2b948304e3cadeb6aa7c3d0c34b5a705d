{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "a620dbd6_0043e96d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 20,
      "author": {
        "id": 6365
      },
      "writtenOn": "2023-07-20T15:03:23Z",
      "side": 1,
      "message": "The errors observed in #51442 included several failures on the `windows-amd64-2016` builder. Does that builder predate Windows 10 1903?\n\nMore generally: now that we have a mitigation for #51442 in place, I\u0027m not sure how we would observe a regression here during the 1.22 development cycle. (I think this probably needs its own regression test.)\n\nPerhaps we could test it by having the test function make a copy of `os.Executable()` in temp directory, execute it with `-test.run\u003d^$`, and then verify that `os.RemoveAll` can remove the directory. Running that test with a high `-count` (and perhaps some concurrent load on the machine) might give us more confidence in this change.",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 20,
        "endChar": 67
      },
      "revId": "db3bc8d2b948304e3cadeb6aa7c3d0c34b5a705d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bfcf4914_00f03fc4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 20,
      "author": {
        "id": 34993
      },
      "writtenOn": "2023-07-20T15:31:34Z",
      "side": 1,
      "message": "#51442 failures are `ERROR_SHARING_VIOLATION`. I don\u0027t think it is related to the race condition fixed by using POSIX delete, whose error code would be `ERROR_ACCESS_DENIED`.\n\n#51442 can will still happen if there are file descriptor leaks or bad interactions with other bad processes, aka antivirus.\n\nRegardless, I can add the tets you describe and verify that there are no `ERROR_ACCESS_DENIED`.",
      "parentUuid": "a620dbd6_0043e96d",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 20,
        "endChar": 67
      },
      "revId": "db3bc8d2b948304e3cadeb6aa7c3d0c34b5a705d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b3e9ce02_bcecd982",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 20,
      "author": {
        "id": 6365
      },
      "writtenOn": "2023-07-20T20:20:47Z",
      "side": 1,
      "message": "\u003e #51442 failures are `ERROR_SHARING_VIOLATION`. I don\u0027t think it is related to the race condition fixed by using POSIX delete, whose error code would be `ERROR_ACCESS_DENIED`.\n\nI guess what I am saying is: I think part of the reason for the `Sleep` after `(*Process).Wait` is to reduce the rate of spurious `ERROR_SHARING_VIOLATION`. For example, the two logs linked in https://github.com/golang/go/issues/23171#issuecomment-437439363 both include the `ERROR_SHARING_VIOLATION` failure mode, but only one of them includes the `ERROR_ACCESS_DENIED`.\n\nYou may be right that they have separate causes, but I think we may need to address both of them. üôÉ\n\n\u003e #51442 can will still happen if there are file descriptor leaks or bad interactions with other bad processes, aka antivirus.\n\nAs far as I can tell, the failures on the Go builders that I listed in the first post on #51442 were not caused by file descriptor leaks, and as far as I know the Go builders don\u0027t run any antivirus software that would interfere either.\n\n(Some of the user-reported failures in later comments and/or associated issues may be due to FD leaks or antivirus interactions, though.)",
      "parentUuid": "bfcf4914_00f03fc4",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 20,
        "endChar": 67
      },
      "revId": "db3bc8d2b948304e3cadeb6aa7c3d0c34b5a705d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "00df35c4_230ab001",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-07-13T14:58:24Z",
      "side": 1,
      "message": "Superseded.",
      "parentUuid": "1683803a_c0890fdb",
      "tag": "autogenerated:trybots~beginning",
      "revId": "db3bc8d2b948304e3cadeb6aa7c3d0c34b5a705d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fe15e6e4_f1431dfd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-07-13T14:58:24Z",
      "side": 1,
      "message": "SlowBots beginning. Status page: https://farmer.golang.org/try?commit\u003ddb3bc8d2\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "db3bc8d2b948304e3cadeb6aa7c3d0c34b5a705d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "acecc28d_eea746c7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-07-13T15:14:37Z",
      "side": 1,
      "message": "SlowBots are happy.\n\nSlowBot builds that ran:\n* windows-amd64-longtest\n* windows-arm64-11\n",
      "parentUuid": "fe15e6e4_f1431dfd",
      "tag": "autogenerated:trybots~happy",
      "revId": "db3bc8d2b948304e3cadeb6aa7c3d0c34b5a705d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "34d21622_6d9f350e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5070
      },
      "writtenOn": "2023-07-20T09:33:24Z",
      "side": 1,
      "message": "Sure we can try this again.\n\nThank you.\n\nAlex",
      "revId": "db3bc8d2b948304e3cadeb6aa7c3d0c34b5a705d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a54f22f9_e86c3502",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5065
      },
      "writtenOn": "2023-07-20T14:41:40Z",
      "side": 1,
      "message": "üçøü§û",
      "parentUuid": "34d21622_6d9f350e",
      "revId": "db3bc8d2b948304e3cadeb6aa7c3d0c34b5a705d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}