{
  "comments": [
    {
      "key": {
        "uuid": "5422228b_942352e8",
        "filename": "src/cmd/compile/internal/ssa/gen/generic.rules",
        "patchSetId": 1
      },
      "lineNbr": 39,
      "author": {
        "id": 5200
      },
      "writtenOn": "2016-02-01T07:33:17Z",
      "side": 1,
      "message": "We probably should.",
      "range": {
        "startLine": 39,
        "startChar": 0,
        "endLine": 39,
        "endChar": 51
      },
      "revId": "32ac3bfb09302f2bd035671c5f3c552ce87cc14a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5422228b_545b9a7d",
        "filename": "src/cmd/compile/internal/ssa/gen/generic.rules",
        "patchSetId": 1
      },
      "lineNbr": 40,
      "author": {
        "id": 5200
      },
      "writtenOn": "2016-02-01T07:33:17Z",
      "side": 1,
      "message": "You can do (Lsh64x64 x (Const64 [0])) -\u003e x\n\nNote that it won\u0027t work for the x32 version (and smaller), because you need a cast: int32(x)\u003d\u003d0.",
      "range": {
        "startLine": 40,
        "startChar": 0,
        "endLine": 40,
        "endChar": 41
      },
      "revId": "32ac3bfb09302f2bd035671c5f3c552ce87cc14a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "712ad87b_eed17f7f",
        "filename": "src/cmd/compile/internal/ssa/gen/generic.rules",
        "patchSetId": 1
      },
      "lineNbr": 49,
      "author": {
        "id": 6173
      },
      "writtenOn": "2016-02-01T09:41:13Z",
      "side": 1,
      "message": "There are a few more\n\n(Rsh64x64 x (Const64 [c])) \u0026\u0026 c \u003e\u003d 64 -\u003e 0\n(Lsh32x64 x (Const64 [c])) \u0026\u0026 c \u003e\u003d 32 -\u003e 0\n\netc.\n\nGiven the sheer number of combinations (32 for rule), how about having a generator that generates all these combinations?",
      "revId": "32ac3bfb09302f2bd035671c5f3c552ce87cc14a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}