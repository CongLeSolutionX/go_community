{
  "comments": [
    {
      "key": {
        "uuid": "0b1eea17_766b5088",
        "filename": "src/sort/example_search_test.go",
        "patchSetId": 6
      },
      "lineNbr": 12,
      "author": {
        "id": 5010
      },
      "writtenOn": "2016-09-15T03:28:56Z",
      "side": 1,
      "message": "above this line\n\n// This example demonstrates searching a list sorted in ascending order.",
      "revId": "7c0a3b6ecf8e34a2c99afeb71b6854e958c3255c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0b1eea17_f65640cb",
        "filename": "src/sort/example_search_test.go",
        "patchSetId": 6
      },
      "lineNbr": 16,
      "author": {
        "id": 5010
      },
      "writtenOn": "2016-09-15T03:28:56Z",
      "side": 1,
      "message": "Delete this comment. The comments obscure the logic.",
      "revId": "7c0a3b6ecf8e34a2c99afeb71b6854e958c3255c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0b1eea17_165e5ce2",
        "filename": "src/sort/example_search_test.go",
        "patchSetId": 6
      },
      "lineNbr": 27,
      "author": {
        "id": 5010
      },
      "writtenOn": "2016-09-15T03:28:56Z",
      "side": 1,
      "message": "Add a comment above this line\n\n// This example demonstrates searching a list sorted in descending order.\n// The approach is the same as searching a list in ascending order,\n// but with the condition inverse condition in the search function.",
      "revId": "7c0a3b6ecf8e34a2c99afeb71b6854e958c3255c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0b1eea17_9651ccd7",
        "filename": "src/sort/example_search_test.go",
        "patchSetId": 6
      },
      "lineNbr": 31,
      "author": {
        "id": 5010
      },
      "writtenOn": "2016-09-15T03:28:56Z",
      "side": 1,
      "message": "if you use \u003c\u003d then you don\u0027t need the -1",
      "revId": "7c0a3b6ecf8e34a2c99afeb71b6854e958c3255c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0b1eea17_d62d0457",
        "filename": "src/sort/example_search_test.go",
        "patchSetId": 6
      },
      "lineNbr": 31,
      "author": {
        "id": 15015
      },
      "writtenOn": "2016-09-15T04:07:09Z",
      "side": 1,
      "message": "only works for exact match, see comment below for lower bound",
      "parentUuid": "0b1eea17_9651ccd7",
      "revId": "7c0a3b6ecf8e34a2c99afeb71b6854e958c3255c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0b1eea17_5668d489",
        "filename": "src/sort/example_search_test.go",
        "patchSetId": 6
      },
      "lineNbr": 40,
      "author": {
        "id": 5010
      },
      "writtenOn": "2016-09-15T03:28:56Z",
      "side": 1,
      "message": "I think aÂ clearer example of lower and upper bounds is if you include multiples of the element that is being searched for.",
      "revId": "7c0a3b6ecf8e34a2c99afeb71b6854e958c3255c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0b1eea17_f6280049",
        "filename": "src/sort/example_search_test.go",
        "patchSetId": 6
      },
      "lineNbr": 40,
      "author": {
        "id": 15015
      },
      "writtenOn": "2016-09-15T04:07:09Z",
      "side": 1,
      "message": "can you please give an example?",
      "parentUuid": "0b1eea17_5668d489",
      "revId": "7c0a3b6ecf8e34a2c99afeb71b6854e958c3255c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0b1eea17_d65b44f3",
        "filename": "src/sort/example_search_test.go",
        "patchSetId": 6
      },
      "lineNbr": 58,
      "author": {
        "id": 5010
      },
      "writtenOn": "2016-09-15T03:28:56Z",
      "side": 1,
      "message": "I think a single descending order example suffices. It is clear from the first one that you invert the conditional.",
      "revId": "7c0a3b6ecf8e34a2c99afeb71b6854e958c3255c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0b1eea17_b61e881d",
        "filename": "src/sort/example_search_test.go",
        "patchSetId": 6
      },
      "lineNbr": 58,
      "author": {
        "id": 15015
      },
      "writtenOn": "2016-09-15T04:07:09Z",
      "side": 1,
      "message": "using \u003c\u003d for lower bound doesn\u0027t work\n\nhttps://play.golang.org/p/upj_QTJdWP\n\nalthough it does if we are only interested in finding exact match, changed the search example to reflect that but keeping this for now",
      "parentUuid": "0b1eea17_d65b44f3",
      "revId": "7c0a3b6ecf8e34a2c99afeb71b6854e958c3255c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0b1eea17_560454b8",
        "filename": "src/sort/example_search_test.go",
        "patchSetId": 6
      },
      "lineNbr": 58,
      "author": {
        "id": 5010
      },
      "writtenOn": "2016-09-15T05:35:58Z",
      "side": 1,
      "message": "To me, it\u0027s not clear why the second example is \"wrong\". I can see an argument either way.\n\nIs the some specific definition of \"lower bound\" that you\u0027re assuming? I\u0027m thinking that perhaps it\u0027s too specialized for a general example.",
      "parentUuid": "0b1eea17_b61e881d",
      "revId": "7c0a3b6ecf8e34a2c99afeb71b6854e958c3255c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0b1eea17_d9ec17bc",
        "filename": "src/sort/example_search_test.go",
        "patchSetId": 6
      },
      "lineNbr": 58,
      "author": {
        "id": 15015
      },
      "writtenOn": "2016-09-15T15:06:38Z",
      "side": 1,
      "message": "the lower bound is the position an element would be placed at, in an ascending total ordering of an array\n\nthe upper bound is the first position after the lower bound where the element cannot be placed\n\nto get the number of occurrences of an element in a sorted array in logarithmic time, you can do `upper bound - lower bound`\n\na way to understand lower bound is to look at the solution for the longest increasing subsequence problem\n\nthe goal is to find the length of the longest increasing subsequence in a sequence. \n\nOne way is to look at all possible subsequences but that increases exponentially with size.\n\na O(n^2) solution tracks the next lowest number before each number. \n\nHere is an O(n(log(n)) solution\n\nfunc LIS(a []int) int {\n\tn, cache :\u003d 0, make([]int, len(a))\n\n\tfor _, x :\u003d range a {\n\t\ti :\u003d sort.Search(n, func (i int) bool { return cache[i] \u003e\u003d x })\n\t\tif i \u003d\u003d n {\n\t\t\tn++\n\t\t}\n\t\tcache[i] \u003d x\n\t}\n\n\treturn n\n}\n\nthe reason it works is because it finds a place for each encountered element, while maintaining each element less than it in the array. \n\nThat, by the way is a solution for LIS in idiomatic go, without treesets or iterators.\n\nit can also be used to understand upper bound, notice that we didn\u0027t define increasing or strictly increasing, so for the slice []int{1, 0, 1, 2, 0, 2, 3, 0, 3}, the above solution will give 4 (0, 1, 2, 3), since the lower bound for an item once placed will always be same, but if you replace it with upper bound, you get 6 (0, 1, 2, 2, 3, 3), because then you are taking the first position after an element has been placed, so you can repeat.\n\nto work with decreasing order arrays, in c++ you have reverse iterators, rbegin and rend, but here we get to show that the implemented binary search algorithm just works if you understand it, and a single implementation gets you all 6, instead of having 3 separate library functions, taking 2 kinds of iterators.\n\nsorry for the lecture.\n\nplay: https://play.golang.org/p/O8tBLwmCip",
      "parentUuid": "0b1eea17_560454b8",
      "revId": "7c0a3b6ecf8e34a2c99afeb71b6854e958c3255c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}