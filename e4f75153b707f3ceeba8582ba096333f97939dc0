{
  "comments": [
    {
      "key": {
        "uuid": "44ab3af0_924ffca9",
        "filename": "src/math/rand/rand.go",
        "patchSetId": 1
      },
      "lineNbr": 162,
      "author": {
        "id": 5065
      },
      "writtenOn": "2015-09-11T19:45:54Z",
      "side": 1,
      "message": "const. If it\u0027s even worth keeping.",
      "revId": "e4f75153b707f3ceeba8582ba096333f97939dc0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "44ab3af0_b2db1809",
        "filename": "src/math/rand/rand.go",
        "patchSetId": 1
      },
      "lineNbr": 162,
      "author": {
        "id": 10000
      },
      "writtenOn": "2015-09-11T20:27:29Z",
      "side": 1,
      "message": "Nope, this is cruft, thanks for noticing.",
      "parentUuid": "44ab3af0_924ffca9",
      "revId": "e4f75153b707f3ceeba8582ba096333f97939dc0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "44ab3af0_f254803f",
        "filename": "src/math/rand/rand.go",
        "patchSetId": 1
      },
      "lineNbr": 164,
      "author": {
        "id": 5065
      },
      "writtenOn": "2015-09-11T19:45:54Z",
      "side": 1,
      "message": "Use :\u003d in loops instead. This isn\u0027t old-school C.",
      "revId": "e4f75153b707f3ceeba8582ba096333f97939dc0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0465c2c3_5a05751a",
        "filename": "src/math/rand/rand.go",
        "patchSetId": 1
      },
      "lineNbr": 164,
      "author": {
        "id": 10000
      },
      "writtenOn": "2015-09-11T20:27:29Z",
      "side": 1,
      "message": "This saved the allocs of j in the inner loop. This is a few percentage points, according to benchmarks, which I guess isn\u0027t worth the drift away from idiomaticity.",
      "parentUuid": "44ab3af0_f254803f",
      "revId": "e4f75153b707f3ceeba8582ba096333f97939dc0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "44ab3af0_b2315826",
        "filename": "src/math/rand/rand.go",
        "patchSetId": 1
      },
      "lineNbr": 165,
      "author": {
        "id": 5065
      },
      "writtenOn": "2015-09-11T19:45:54Z",
      "side": 1,
      "message": "I\u0027d just slice down p instead. Something like this, perhaps?\n\n  n \u003d len(p)\n  for len(p) \u003e 0 {\n           v :\u003d r.src.Int63() // 7 full bytes of new data\n           for i :\u003d 0; i \u003c 7 \u0026\u0026 len(p) \u003e 0; i++ {\n                  p[0] \u003d byte(v)\n                  p \u003d p[1:]\n                  v \u003e\u003e\u003d 8\n            }\n  }\n  return",
      "revId": "e4f75153b707f3ceeba8582ba096333f97939dc0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c45e4afd_b8ebf9b1",
        "filename": "src/math/rand/rand.go",
        "patchSetId": 1
      },
      "lineNbr": 165,
      "author": {
        "id": 10000
      },
      "writtenOn": "2015-09-11T20:27:29Z",
      "side": 1,
      "message": "The way as written is significantly faster:\n\n  benchmark               old ns/op     new ns/op     delta\n  BenchmarkRead3-8        11.7          13.1          +11.97%\n  BenchmarkRead64-8       123           144           +17.07%\n  BenchmarkRead1000-8     1642          2161          +31.61%\n\n(I\u0027ll include the benchmarks in the next uploaded patch, but they\u0027re pretty much what you\u0027d imagine)\n\nThis is big enough that I\u0027m inclined to keep things this way, unless you believe slicing down to be dramatically more legible.",
      "parentUuid": "44ab3af0_b2315826",
      "revId": "e4f75153b707f3ceeba8582ba096333f97939dc0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "44517aa7_4219d680",
        "filename": "src/math/rand/rand.go",
        "patchSetId": 1
      },
      "lineNbr": 165,
      "author": {
        "id": 9850
      },
      "writtenOn": "2015-09-11T21:09:43Z",
      "side": 1,
      "message": "var val int64\nfor i :\u003d 0; i \u003c len(p); i++ {\n    if i%7 \u003d\u003d 0 {\n        val \u003d r.src.Int63()\n    }\n    p[i] \u003d byte(val)\n    val \u003e\u003e\u003d 8\n}\nreturn len(p), nil\n\nThis version could also be fast and elegant IMHO.\nMaybe you want to compare benchmarks?",
      "parentUuid": "c45e4afd_b8ebf9b1",
      "revId": "e4f75153b707f3ceeba8582ba096333f97939dc0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "44ab3af0_9236dc19",
        "filename": "src/math/rand/rand.go",
        "patchSetId": 1
      },
      "lineNbr": 169,
      "author": {
        "id": 5065
      },
      "writtenOn": "2015-09-11T19:45:54Z",
      "side": 1,
      "message": "don\u0027t you mean 8, not 7? otherwise bits overlap.",
      "revId": "e4f75153b707f3ceeba8582ba096333f97939dc0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "249486c0_db07d31e",
        "filename": "src/math/rand/rand.go",
        "patchSetId": 1
      },
      "lineNbr": 169,
      "author": {
        "id": 10000
      },
      "writtenOn": "2015-09-11T20:27:29Z",
      "side": 1,
      "message": "Yeesh, yes. It worries me that the distributional tests don\u0027t catch this!",
      "parentUuid": "44ab3af0_9236dc19",
      "revId": "e4f75153b707f3ceeba8582ba096333f97939dc0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}