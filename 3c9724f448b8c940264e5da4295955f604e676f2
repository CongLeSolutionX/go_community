{
  "comments": [
    {
      "key": {
        "uuid": "ea6cf416_769110aa",
        "filename": "src/net/http/server.go",
        "patchSetId": 1
      },
      "lineNbr": 893,
      "author": {
        "id": 5550
      },
      "writtenOn": "2015-08-03T09:21:29Z",
      "side": 1,
      "message": "There\u0027s still a race here.  Another goroutine my call Close after we release the mutex here, and encounter a fatal error.  But this goroutine\u0027s call to CopyN will get ErrBodyReadAfterClose.",
      "revId": "3c9724f448b8c940264e5da4295955f604e676f2",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ad9936fb_4555a049",
        "filename": "src/net/http/server.go",
        "patchSetId": 1
      },
      "lineNbr": 893,
      "author": {
        "id": 5065
      },
      "writtenOn": "2015-08-03T09:25:05Z",
      "side": 1,
      "message": "I\u0027m fixing a data race, not a higher-level logical race.\n\nWe don\u0027t care if another goroutine calls Close on the shared body here I don\u0027t think... all bets are already off then once somebody\u0027s started tearing things down.\n\nWhat do you mean by \"fatal error\"? Show me a new failing test if that\u0027s easier to explain with?",
      "parentUuid": "ea6cf416_769110aa",
      "revId": "3c9724f448b8c940264e5da4295955f604e676f2",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "aa667c34_77d58a2e",
        "filename": "src/net/http/server.go",
        "patchSetId": 1
      },
      "lineNbr": 893,
      "author": {
        "id": 5550
      },
      "writtenOn": "2015-08-03T17:44:06Z",
      "side": 1,
      "message": "Say you had a handler that was just `go req.Body.Close()`.  A malicious fake chunked encoding request arrives.  Let\u0027s say the serving goroutine gets to line 899 and pauses.  Meanwhile, payload blows up inside of body.Close, but nothing is checking that.  When the serving goroutine resumes, CopyN will return ErrBodyReadAfterClose.\n\nIt\u0027s certainly pretty dubious behavior if you\u0027re closing the body in another goroutine while allowing ServeHTTP to return.  It would only be an issue on servers written with buggy handlers doing things to the request body without syncing, but it\u0027s still not a hole we should leave open.\n\nThis might be \"good enough\" for now.  I\u0027ve spent the last couple hours studying the the various scenarios, and a complete fix is going to be a bit more far reaching.  But I think I\u0027ll have something working tomorrow morning.\n\nBasically, we want to call body.Close here, and to soup up body.Close to consistently return any read errors encountered.  It\u0027ll already handle up to maxPostHandlerReadBytes for us.",
      "parentUuid": "ad9936fb_4555a049",
      "revId": "3c9724f448b8c940264e5da4295955f604e676f2",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ad9936fb_f0702854",
        "filename": "src/net/http/server.go",
        "patchSetId": 1
      },
      "lineNbr": 893,
      "author": {
        "id": 5065
      },
      "writtenOn": "2015-08-03T17:52:44Z",
      "side": 1,
      "message": "I\u0027m not very concerned about handlers with their own data races.\n\nIt\u0027s also very late in Go 1.5 (overdue now), and I\u0027m now well into vacation at this point and my upcoming schedule leaves zero slack time to review code. So I think we\u0027ll have to say this is enough for now.\n\nFile bugs with notes for 1.6. But you\u0027ll need a more compelling case than it being possible to write a buggy handler. I\u0027m more interested in active attackers against plausible handlers.",
      "parentUuid": "aa667c34_77d58a2e",
      "revId": "3c9724f448b8c940264e5da4295955f604e676f2",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "aa667c34_5a8cf53e",
        "filename": "src/net/http/server.go",
        "patchSetId": 1
      },
      "lineNbr": 893,
      "author": {
        "id": 5550
      },
      "writtenOn": "2015-08-05T05:54:04Z",
      "side": 1,
      "message": "Indeed.  I feel bad intruding into your vacation as-is.\n\nPlugging this hole is becoming more of a small refactoring effort.  I think it\u0027s worth doing, but it would certainly be better done without such a looming deadline.  I think we can consolidate the handling of some errors and make things a little more clear (ie, the handler calls Close early vs. the same maxPostHandlerReadBytes behavior right here)\n\nWhen do you get back?  I\u0027ll bug you some time after that :)\n\nEnjoy your trip, and thanks for all your work here.",
      "parentUuid": "ad9936fb_f0702854",
      "revId": "3c9724f448b8c940264e5da4295955f604e676f2",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}