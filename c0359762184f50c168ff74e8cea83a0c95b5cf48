{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "1d1a2a96_e1eb2650",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-10-07T20:32:05Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003dc0359762",
      "tag": "autogenerated:trybots~beginning",
      "revId": "c0359762184f50c168ff74e8cea83a0c95b5cf48",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7454c435_a27b07b2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-10-07T20:41:20Z",
      "side": 1,
      "message": "Build is still in progress... Status page: https://farmer.golang.org/try?commit\u003dc0359762\nFailed on linux-arm-aws: https://storage.googleapis.com/go-build-log/c0359762/linux-arm-aws_11bc79d0.log\nOther builds still in progress; subsequent failure notices suppressed until final report.\n\nConsult https://build.golang.org/ to see whether they are new failures. Keep in mind that TryBots currently test *exactly* your git commit, without rebasing. If your commit\u0027s git parent is old, the failure might\u0027ve already been fixed.\n",
      "parentUuid": "1d1a2a96_e1eb2650",
      "tag": "autogenerated:trybots~progress",
      "revId": "c0359762184f50c168ff74e8cea83a0c95b5cf48",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9321ea36_83c8c5ae",
        "filename": "src/runtime/softfloat64.go",
        "patchSetId": 1
      },
      "lineNbr": 516,
      "author": {
        "id": 5200
      },
      "writtenOn": "2021-10-07T20:41:52Z",
      "side": 1,
      "message": "The case that would be bad here is if the exact a/b is barely above the halfway point between two float32s. The div64 would then round to exactly halfway between the two float32s, and the f64-\u003ef32 conversion then rounds down to even.\n\n\"barely\" is hard here, as we need a/b to be less than half a float64 epsilon away from a float32 halfway point, when a and b are float32s. Not sure if that is possible.",
      "revId": "c0359762184f50c168ff74e8cea83a0c95b5cf48",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}