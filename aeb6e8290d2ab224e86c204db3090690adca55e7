{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "e34253c2_3e58c26f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-10-21T17:29:41Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003daeb6e829",
      "tag": "autogenerated:trybots~beginning",
      "revId": "aeb6e8290d2ab224e86c204db3090690adca55e7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9e73b033_326c77fe",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-10-21T18:21:10Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "e34253c2_3e58c26f",
      "tag": "autogenerated:trybots~happy",
      "revId": "aeb6e8290d2ab224e86c204db3090690adca55e7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cd5ba0eb_6316f9c4",
        "filename": "src/net/http/server.go",
        "patchSetId": 6
      },
      "lineNbr": 3292,
      "author": {
        "id": 32637
      },
      "writtenOn": "2021-10-22T15:25:30Z",
      "side": 1,
      "message": "I think this needs to be updated or the change should set `tw.err \u003d ErrHandlerTimeout` in any case but write response only on `context.DeadlineExceeded`",
      "range": {
        "startLine": 3291,
        "startChar": 3,
        "endLine": 3292,
        "endChar": 21
      },
      "revId": "aeb6e8290d2ab224e86c204db3090690adca55e7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "06de1ab3_9829b40f",
        "filename": "src/net/http/server.go",
        "patchSetId": 6
      },
      "lineNbr": 3292,
      "author": {
        "id": 54373
      },
      "writtenOn": "2021-10-22T19:46:15Z",
      "side": 1,
      "message": "Nice catch.\nSetting the err to ErrHandlerTimeout wouldn\u0027t solve my original problem: being able to distinguish between hang ups and true timeouts in handler code.\n\nHow does this look?\n\"After such a timeout, writes by h to its ResponseWriter will return ErrHandlerTimeout, unless the request has been canceled as described in https://pkg.go.dev/net/http#Request.Context\"",
      "parentUuid": "cd5ba0eb_6316f9c4",
      "range": {
        "startLine": 3291,
        "startChar": 3,
        "endLine": 3292,
        "endChar": 21
      },
      "revId": "aeb6e8290d2ab224e86c204db3090690adca55e7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dcd85467_dbe14672",
        "filename": "src/net/http/server.go",
        "patchSetId": 6
      },
      "lineNbr": 3292,
      "author": {
        "id": 32637
      },
      "writtenOn": "2021-10-22T20:14:12Z",
      "side": 1,
      "message": "Do I get it right that you would like to observe different write error (which would be context.Canceled) in the Handler?",
      "parentUuid": "06de1ab3_9829b40f",
      "range": {
        "startLine": 3291,
        "startChar": 3,
        "endLine": 3292,
        "endChar": 21
      },
      "revId": "aeb6e8290d2ab224e86c204db3090690adca55e7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d42a1a00_ba0b83ec",
        "filename": "src/net/http/server.go",
        "patchSetId": 6
      },
      "lineNbr": 3292,
      "author": {
        "id": 54373
      },
      "writtenOn": "2021-10-22T20:28:14Z",
      "side": 1,
      "message": "Yep, that\u0027s my intention. Without being able to distinguish between client hangups and timeouts, monitoring becomes difficult.",
      "parentUuid": "dcd85467_dbe14672",
      "range": {
        "startLine": 3291,
        "startChar": 3,
        "endLine": 3292,
        "endChar": 21
      },
      "revId": "aeb6e8290d2ab224e86c204db3090690adca55e7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ff0a8f31_0644d92a",
        "filename": "src/net/http/server.go",
        "patchSetId": 6
      },
      "lineNbr": 3292,
      "author": {
        "id": 32637
      },
      "writtenOn": "2021-10-22T21:21:53Z",
      "side": 1,
      "message": "I am wondering if we can just get away with `if r.Context().Err() !\u003d context.Canceled` check in the Handler after `ErrHandlerTimeout` is observed without any change at all...\n\nAlso it is not documented anywhere that timeout is implemented using request context - both `r.Context().Err()` and this change would rely on this detail.",
      "parentUuid": "d42a1a00_ba0b83ec",
      "range": {
        "startLine": 3291,
        "startChar": 3,
        "endLine": 3292,
        "endChar": 21
      },
      "revId": "aeb6e8290d2ab224e86c204db3090690adca55e7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d1679289_05cae247",
        "filename": "src/net/http/server.go",
        "patchSetId": 6
      },
      "lineNbr": 3292,
      "author": {
        "id": 54373
      },
      "writtenOn": "2021-10-23T19:07:22Z",
      "side": 1,
      "message": "That\u0027s a great point!\n\nUnfortunately the context that the business logic Handler gets and the context that TimeoutHandler get aren\u0027t necessarily the same -- middleware can modify the context.\n\nI\u0027m sure there are plenty of ways to solve that -- such as re-ordering middleware -- but I\u0027d love to instead focus on the merits/drawbacks of this PR: Throwing an ErrHandlerTimeout before the timeout has elapsed doesn\u0027t align with the spirit of the error message IMO.\n\nI want to make sure that your concerns around timeout being dependent on request context are addressed. I think the original implementation calls context.WithTimeout on the request\u0027s context instead of creating a new context so that TimeoutHandler doesn\u0027t have to proxy events between the two contexts. An alternate implementation could do this, but I don\u0027t see any benefits w.r.t dealing with timeouts (unless we need to catch a timeout after the context has been canceled).\n\nI\u0027m not sure if this completely addresses your concern around relying on the request\u0027s context, but I\u0027m happy to continue talking about it -- maybe we could get Damien\u0027s input as a maintainer.",
      "parentUuid": "ff0a8f31_0644d92a",
      "range": {
        "startLine": 3291,
        "startChar": 3,
        "endLine": 3292,
        "endChar": 21
      },
      "revId": "aeb6e8290d2ab224e86c204db3090690adca55e7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "20fba80a_197dec48",
        "filename": "src/net/http/server.go",
        "patchSetId": 6
      },
      "lineNbr": 3292,
      "author": {
        "id": 5305
      },
      "writtenOn": "2021-11-02T00:49:11Z",
      "side": 1,
      "message": "I don\u0027t quite follow the problem.\n\nIs the concern that the documentation should state that writes to the ResponseWriter will return some other error if the request context becomes done for some reason other than the TimeoutHandler timeout expiring? (e.g., request canceled, or some middleware layer adding its own timeout or cancelation.)\n\nI don\u0027t think it\u0027s necessary to specify that case in detail. I also think that it\u0027s fine for some middleware-introduced timeout to be mapped to ErrHandlerTimeout.",
      "parentUuid": "d1679289_05cae247",
      "range": {
        "startLine": 3291,
        "startChar": 3,
        "endLine": 3292,
        "endChar": 21
      },
      "revId": "aeb6e8290d2ab224e86c204db3090690adca55e7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4de4c1b9_6295c46d",
        "filename": "src/net/http/server.go",
        "patchSetId": 6
      },
      "lineNbr": 3292,
      "author": {
        "id": 32637
      },
      "writtenOn": "2021-11-02T10:15:17Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "20fba80a_197dec48",
      "range": {
        "startLine": 3291,
        "startChar": 3,
        "endLine": 3292,
        "endChar": 21
      },
      "revId": "aeb6e8290d2ab224e86c204db3090690adca55e7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2333776e_32bf6fd3",
        "filename": "src/net/http/server.go",
        "patchSetId": 6
      },
      "lineNbr": 3373,
      "author": {
        "id": 5305
      },
      "writtenOn": "2021-11-02T00:49:11Z",
      "side": 1,
      "message": "Previously, this would respond with StatusServiceUnavailable if the request context became done for any reason. Now, it does so only on timeout.\n\nIn the normal case, the handler will be canceled only if the request has been lost, in which case the response code is irrelevant, but it\u0027s conceivable that some middleware layer will create a context and cancel it. I think this handler should always set the status code here, although maybe only include a body in the case of an actual timeout.",
      "revId": "aeb6e8290d2ab224e86c204db3090690adca55e7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9e922a38_08a34c06",
        "filename": "src/net/http/server.go",
        "patchSetId": 6
      },
      "lineNbr": 3373,
      "author": {
        "id": 54373
      },
      "writtenOn": "2021-11-04T16:45:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2333776e_32bf6fd3",
      "revId": "aeb6e8290d2ab224e86c204db3090690adca55e7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}