{
  "comments": [
    {
      "key": {
        "uuid": "ced3c085_da86e39f",
        "filename": "src/cmd/link/internal/loader/loader.go",
        "patchSetId": 2
      },
      "lineNbr": 679,
      "author": {
        "id": 13315
      },
      "writtenOn": "2020-01-23T21:45:42Z",
      "side": 1,
      "message": "Does this matter? I think we only overwrite symbols with same name, so it should be the same name either way, right?",
      "range": {
        "startLine": 677,
        "startChar": 0,
        "endLine": 679,
        "endChar": 2
      },
      "revId": "8ba2e1453cca0cd2578442430eeb82447ca329e4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0bcb7efb_838993c6",
        "filename": "src/cmd/link/internal/loader/loader.go",
        "patchSetId": 2
      },
      "lineNbr": 679,
      "author": {
        "id": 32560
      },
      "writtenOn": "2020-01-24T16:34:50Z",
      "side": 1,
      "message": "It shouldn\u0027t but it does. There\u0027s a subtle bug here. Specifically, if we pass in an overwritten symbol here, the l.IsExternal on line 680 returns false; so we fall through. When we get to line 687, the toLocal call will resolve the overwrite, and return a nil oReader, causing a panic on line 689.\n\nIt was discovered in the MakeSymbolUpdater change that writes the name of the symbol.",
      "parentUuid": "ced3c085_da86e39f",
      "range": {
        "startLine": 677,
        "startChar": 0,
        "endLine": 679,
        "endChar": 2
      },
      "revId": "8ba2e1453cca0cd2578442430eeb82447ca329e4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c2dbe426_d19af43d",
        "filename": "src/cmd/link/internal/loader/loader.go",
        "patchSetId": 2
      },
      "lineNbr": 679,
      "author": {
        "id": 13315
      },
      "writtenOn": "2020-01-27T16:27:04Z",
      "side": 1,
      "message": "Thanks for the explanation. I think this makes sense. But it seems we also need this for all the other accessors as well (SymName, SymType, etc.). Would it work if we do this in IsExternal?",
      "parentUuid": "0bcb7efb_838993c6",
      "range": {
        "startLine": 677,
        "startChar": 0,
        "endLine": 679,
        "endChar": 2
      },
      "revId": "8ba2e1453cca0cd2578442430eeb82447ca329e4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5ac60c88_e34fa193",
        "filename": "src/cmd/link/internal/loader/loader.go",
        "patchSetId": 2
      },
      "lineNbr": 679,
      "author": {
        "id": 32560
      },
      "writtenOn": "2020-01-27T20:40:42Z",
      "side": 1,
      "message": "I believe all this nonsense is moot when you fix the overwrite headache, correct?",
      "parentUuid": "c2dbe426_d19af43d",
      "range": {
        "startLine": 677,
        "startChar": 0,
        "endLine": 679,
        "endChar": 2
      },
      "revId": "8ba2e1453cca0cd2578442430eeb82447ca329e4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7fa44a53_03513ae3",
        "filename": "src/cmd/link/internal/loader/loader.go",
        "patchSetId": 2
      },
      "lineNbr": 679,
      "author": {
        "id": 13315
      },
      "writtenOn": "2020-01-27T22:36:49Z",
      "side": 1,
      "message": "Yeah, I think so. So maybe it is fine for you to do just the simple thing here.",
      "parentUuid": "5ac60c88_e34fa193",
      "range": {
        "startLine": 677,
        "startChar": 0,
        "endLine": 679,
        "endChar": 2
      },
      "revId": "8ba2e1453cca0cd2578442430eeb82447ca329e4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "84067e95_5538f489",
        "filename": "src/cmd/link/internal/loader/loader.go",
        "patchSetId": 2
      },
      "lineNbr": 1854,
      "author": {
        "id": 13315
      },
      "writtenOn": "2020-01-23T21:45:42Z",
      "side": 1,
      "message": "Remove.",
      "range": {
        "startLine": 1850,
        "startChar": 0,
        "endLine": 1854,
        "endChar": 3
      },
      "revId": "8ba2e1453cca0cd2578442430eeb82447ca329e4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bdaef80d_ccf28c37",
        "filename": "src/cmd/link/internal/loader/loader.go",
        "patchSetId": 2
      },
      "lineNbr": 1854,
      "author": {
        "id": 32560
      },
      "writtenOn": "2020-01-24T16:34:50Z",
      "side": 1,
      "message": "My mistake. Thanks.",
      "parentUuid": "84067e95_5538f489",
      "range": {
        "startLine": 1850,
        "startChar": 0,
        "endLine": 1854,
        "endChar": 3
      },
      "revId": "8ba2e1453cca0cd2578442430eeb82447ca329e4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0a07e361_2e3914f1",
        "filename": "src/cmd/link/internal/loadmacho/ldmacho.go",
        "patchSetId": 2
      },
      "lineNbr": 562,
      "author": {
        "id": 13315
      },
      "writtenOn": "2020-01-23T21:45:42Z",
      "side": 1,
      "message": "Minor: what does bld stand for?",
      "range": {
        "startLine": 562,
        "startChar": 2,
        "endLine": 562,
        "endChar": 5
      },
      "revId": "8ba2e1453cca0cd2578442430eeb82447ca329e4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2a261afc_5179c49c",
        "filename": "src/cmd/link/internal/loadmacho/ldmacho.go",
        "patchSetId": 2
      },
      "lineNbr": 562,
      "author": {
        "id": 32560
      },
      "writtenOn": "2020-01-24T16:34:50Z",
      "side": 1,
      "message": "Builder? I think of these as builders like string builders in java, etc.",
      "parentUuid": "0a07e361_2e3914f1",
      "range": {
        "startLine": 562,
        "startChar": 2,
        "endLine": 562,
        "endChar": 5
      },
      "revId": "8ba2e1453cca0cd2578442430eeb82447ca329e4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ee67398c_ffab7016",
        "filename": "src/cmd/link/internal/loadmacho/ldmacho.go",
        "patchSetId": 2
      },
      "lineNbr": 562,
      "author": {
        "id": 13315
      },
      "writtenOn": "2020-01-27T16:27:04Z",
      "side": 1,
      "message": "Thanks.\n\nIt seems Than used \"sb\" in the ELF loader. You could consider that for consistency (also fine not to).",
      "parentUuid": "2a261afc_5179c49c",
      "range": {
        "startLine": 562,
        "startChar": 2,
        "endLine": 562,
        "endChar": 5
      },
      "revId": "8ba2e1453cca0cd2578442430eeb82447ca329e4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b2fadabe_919aee14",
        "filename": "src/cmd/link/internal/loadmacho/ldmacho.go",
        "patchSetId": 2
      },
      "lineNbr": 637,
      "author": {
        "id": 13315
      },
      "writtenOn": "2020-01-23T21:45:42Z",
      "side": 1,
      "message": "For user facing errors, probably better to use SymName.",
      "revId": "8ba2e1453cca0cd2578442430eeb82447ca329e4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ecdf72dc_b1ad2032",
        "filename": "src/cmd/link/internal/loadmacho/ldmacho.go",
        "patchSetId": 2
      },
      "lineNbr": 637,
      "author": {
        "id": 32560
      },
      "writtenOn": "2020-01-24T16:34:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b2fadabe_919aee14",
      "revId": "8ba2e1453cca0cd2578442430eeb82447ca329e4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}