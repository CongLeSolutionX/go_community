{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "cdf80231_e0662164",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 28783
      },
      "writtenOn": "2021-01-07T03:24:01Z",
      "side": 1,
      "message": "I think some of the issue with escape analysis later might be that you need to my change to typecheck/dcl.go (https://go-review.googlesource.com/c/go/+/276653/19/src/cmd/compile/internal/typecheck/dcl.go) which gives sym names to unnamed return values (~r0, etc.) even in the case that funcargs2 is used.\n",
      "revId": "fed62d9783898438ad6a5b98af6251c6779818ed",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b73d3ced_457bf6db",
        "filename": "src/cmd/compile/internal/noder/decl.go",
        "patchSetId": 7
      },
      "lineNbr": 79,
      "author": {
        "id": 28783
      },
      "writtenOn": "2021-01-07T03:24:01Z",
      "side": 1,
      "message": "This seems like a problem.  I assume that you\u0027ll eventually have to put a few conditional checks on G\u003d3 flag in the typechecker.go, like I have done?",
      "revId": "fed62d9783898438ad6a5b98af6251c6779818ed",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "369dccbf_04a95fe6",
        "filename": "src/cmd/compile/internal/noder/decl.go",
        "patchSetId": 7
      },
      "lineNbr": 79,
      "author": {
        "id": 5440
      },
      "writtenOn": "2021-01-11T17:58:48Z",
      "side": 1,
      "message": "This is fixed in later patch sets by having irgen.obj set Ntype, so even if it does re-assign Type, it\u0027ll just be with the type we already constructed here.",
      "parentUuid": "b73d3ced_457bf6db",
      "revId": "fed62d9783898438ad6a5b98af6251c6779818ed",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1c25aabf_1097dbf2",
        "filename": "src/cmd/compile/internal/noder/decl.go",
        "patchSetId": 7
      },
      "lineNbr": 143,
      "author": {
        "id": 28783
      },
      "writtenOn": "2021-01-07T03:24:01Z",
      "side": 1,
      "message": "I was planning to use the same kind of table to deal with type name references.  Essentially, I\u0027m linking by sym name/def right now, but that doesn\u0027t work if a type name is overwritten in some scope by a local variable or another type, as you realized.\n\nI note that you never remove entries from objs[] (which is what I wondering about for my implementation), which may be OK, but will cause objs to grow to include all objects/local vars in all functions.",
      "revId": "fed62d9783898438ad6a5b98af6251c6779818ed",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5f9252b2_2e597b52",
        "filename": "src/cmd/compile/internal/noder/decl.go",
        "patchSetId": 7
      },
      "lineNbr": 143,
      "author": {
        "id": 5440
      },
      "writtenOn": "2021-01-11T17:58:48Z",
      "side": 1,
      "message": "Ack. The types2.Info maps also contain entries for the entire package, so there\u0027s certainly room for optimizations. I think it would be straightforward to split irgen.objs into separate pkgObjs and localObjs maps, and clear the latter at the end of each FuncDecl.",
      "parentUuid": "1c25aabf_1097dbf2",
      "revId": "fed62d9783898438ad6a5b98af6251c6779818ed",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ddbcdc87_8c54d9a4",
        "filename": "src/cmd/compile/internal/noder/expr.go",
        "patchSetId": 7
      },
      "lineNbr": 27,
      "author": {
        "id": 28783
      },
      "writtenOn": "2021-01-07T03:24:01Z",
      "side": 1,
      "message": "I have an extra check in the code handling AssignStmt that adjusts the type and literal for ImplicitOne, since this may have to be a float(1) if the thing being incremented is a float.  Also, p.typ() on ImplicitOne doesn\u0027t currently return the right type.",
      "revId": "fed62d9783898438ad6a5b98af6251c6779818ed",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b80cde1c_5f858531",
        "filename": "src/cmd/compile/internal/noder/expr.go",
        "patchSetId": 7
      },
      "lineNbr": 27,
      "author": {
        "id": 5440
      },
      "writtenOn": "2021-01-11T17:58:48Z",
      "side": 1,
      "message": "Done. (The code here was returning an untyped 1, not using info.Types[ImplicitOne].)",
      "parentUuid": "ddbcdc87_8c54d9a4",
      "revId": "fed62d9783898438ad6a5b98af6251c6779818ed",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ee3aa52d_c612dc4d",
        "filename": "src/cmd/compile/internal/noder/expr.go",
        "patchSetId": 7
      },
      "lineNbr": 181,
      "author": {
        "id": 5210
      },
      "writtenOn": "2021-01-07T00:02:15Z",
      "side": 1,
      "message": "I\u0027ve often wondered if we could simply disallow defined types to be pointer types. For one, *T is clearer than P (where type P *T), and it may also simplify some spec rules that explicitly call out named pointer types.",
      "revId": "fed62d9783898438ad6a5b98af6251c6779818ed",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "afcba7c9_d51e6890",
        "filename": "src/cmd/compile/internal/noder/irgen.go",
        "patchSetId": 7
      },
      "lineNbr": 229,
      "author": {
        "id": 28783
      },
      "writtenOn": "2021-01-07T03:24:01Z",
      "side": 1,
      "message": "I see you\u0027re already doing two passes over the decls here, as expected.  This is similar to what I do to fully deal with forward references (in my stacked change https://go-review.googlesource.com/c/go/+/280633/8/src/cmd/compile/internal/noder/noder.go)",
      "revId": "fed62d9783898438ad6a5b98af6251c6779818ed",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c78a00bd_5da2a2c3",
        "filename": "src/cmd/compile/internal/noder/irgen.go",
        "patchSetId": 7
      },
      "lineNbr": 229,
      "author": {
        "id": 5440
      },
      "writtenOn": "2021-01-11T17:58:48Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "afcba7c9_d51e6890",
      "revId": "fed62d9783898438ad6a5b98af6251c6779818ed",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}