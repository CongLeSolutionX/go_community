{
  "comments": [
    {
      "key": {
        "uuid": "9966fc12_33663f08",
        "filename": "src/context/context.go",
        "patchSetId": 2
      },
      "lineNbr": 245,
      "author": {
        "id": 6365
      },
      "writtenOn": "2019-09-20T14:08:07Z",
      "side": 1,
      "message": "It seems like a shame to introduce a mutable global variable (with the associated potential for cache contention) just to track a number for testing.\n\n(I guess there is probably a lot more contention on global variables in the goroutine scheduler, but I don\u0027t know of any intrinsic reason why that must be the case.)\n\nCan the test be written in a way that does not require this variable? (Perhaps using runtime.NumGoroutine or runtime/pprof.Profile(\"goroutine\")?)",
      "range": {
        "startLine": 242,
        "startChar": 0,
        "endLine": 245,
        "endChar": 0
      },
      "revId": "286af958fe945e1f0f4f005de6bc0ebd0e8f1782",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d3b6fafd_d99acac8",
        "filename": "src/context/context.go",
        "patchSetId": 2
      },
      "lineNbr": 286,
      "author": {
        "id": 6365
      },
      "writtenOn": "2019-09-20T14:08:07Z",
      "side": 1,
      "message": "(nit)\n\nAn unexported `struct{}` type seems clearer than the address of a global variable for the context key — that would make it explicit that the actual value conveys no information.",
      "range": {
        "startLine": 284,
        "startChar": 0,
        "endLine": 286,
        "endChar": 20
      },
      "revId": "286af958fe945e1f0f4f005de6bc0ebd0e8f1782",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2756fdfe_39e27bf9",
        "filename": "src/context/context.go",
        "patchSetId": 2
      },
      "lineNbr": 295,
      "author": {
        "id": 5265
      },
      "writtenOn": "2019-09-25T19:31:43Z",
      "side": 1,
      "message": "What happens if parent is a custom Context with its own Done channel implementation, and it has a parent that\u0027s a *cancelCtx? I think Value will return that cancelCtx, which will be assigned to p here. Below, you\u0027re using p.Done, not parent.Done, even though it\u0027s possible parent.Done is closed before p.Done. Is that a problem?",
      "range": {
        "startLine": 295,
        "startChar": 1,
        "endLine": 295,
        "endChar": 50
      },
      "revId": "286af958fe945e1f0f4f005de6bc0ebd0e8f1782",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9a4afe61_437b701e",
        "filename": "src/context/context.go",
        "patchSetId": 2
      },
      "lineNbr": 295,
      "author": {
        "id": 5265
      },
      "writtenOn": "2019-09-25T19:52:36Z",
      "side": 1,
      "message": "The original discussion for this idea suggested mapping Done channels to *cancelCtx. I think that could still work here. Change cancelCtxKey to be an unexpected named type cancelCtxKey \u003c-chan struct{}, and look up cancelCtxKey(parent.Done()) here.",
      "parentUuid": "2756fdfe_39e27bf9",
      "range": {
        "startLine": 295,
        "startChar": 1,
        "endLine": 295,
        "endChar": 50
      },
      "revId": "286af958fe945e1f0f4f005de6bc0ebd0e8f1782",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a99a98e8_0424e525",
        "filename": "src/context/context.go",
        "patchSetId": 2
      },
      "lineNbr": 295,
      "author": {
        "id": 6365
      },
      "writtenOn": "2019-09-25T21:06:30Z",
      "side": 1,
      "message": "\u003e The original discussion for this idea suggested mapping Done channels to *cancelCtx. I think that could still work here. Change cancelCtxKey to be an unexpected named type cancelCtxKey \u003c-chan struct{}, and look up cancelCtxKey(parent.Done()) here.\n\nThat\u0027s clever, but if it really is a channel from a custom implementation that means that the lookup will traverse the whole context chain instead of stopping at the first *cancelCtx.\n\nThe `p.done \u003d\u003d done` check below should ensure that we bail out if parent.Done() returns a channel that doesn\u0027t match the one from the first cancelCtx.",
      "parentUuid": "9a4afe61_437b701e",
      "range": {
        "startLine": 295,
        "startChar": 1,
        "endLine": 295,
        "endChar": 50
      },
      "revId": "286af958fe945e1f0f4f005de6bc0ebd0e8f1782",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "12ba640f_b350fa56",
        "filename": "src/context/context.go",
        "patchSetId": 2
      },
      "lineNbr": 301,
      "author": {
        "id": 6365
      },
      "writtenOn": "2019-09-20T14:08:07Z",
      "side": 1,
      "message": "These two checks could be performed before attempting to acquire p.mu — if either fails, then we don\u0027t need to acquire p\u0027s cache line at all, let alone a lock on its mutex.",
      "range": {
        "startLine": 301,
        "startChar": 21,
        "endLine": 301,
        "endChar": 57
      },
      "revId": "286af958fe945e1f0f4f005de6bc0ebd0e8f1782",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "579f9d75_e11e3af7",
        "filename": "src/context/context_test.go",
        "patchSetId": 2
      },
      "lineNbr": 677,
      "author": {
        "id": 5065
      },
      "writtenOn": "2019-09-20T04:34:57Z",
      "side": 1,
      "message": "These won\u0027t fail with useful (unambiguous) line numbers or clarifying text. t.Helper?",
      "range": {
        "startLine": 670,
        "startChar": 15,
        "endLine": 677,
        "endChar": 51
      },
      "revId": "286af958fe945e1f0f4f005de6bc0ebd0e8f1782",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    }
  ]
}