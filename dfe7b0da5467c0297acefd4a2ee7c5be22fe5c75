{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "bf38ed08_8ce731ea",
        "filename": "src/runtime/mgcpacer.go",
        "patchSetId": 20
      },
      "lineNbr": 969,
      "author": {
        "id": 12120
      },
      "writtenOn": "2022-04-18T19:28:07Z",
      "side": 1,
      "message": "It doesn\u0027t look like this happens anymore?",
      "range": {
        "startLine": 969,
        "startChar": 4,
        "endLine": 969,
        "endChar": 45
      },
      "revId": "dfe7b0da5467c0297acefd4a2ee7c5be22fe5c75",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bc6bc137_cf30c390",
        "filename": "src/runtime/mgcpacer.go",
        "patchSetId": 20
      },
      "lineNbr": 1013,
      "author": {
        "id": 12120
      },
      "writtenOn": "2022-04-18T19:28:07Z",
      "side": 1,
      "message": "Reference comment in gcControllerState?",
      "revId": "dfe7b0da5467c0297acefd4a2ee7c5be22fe5c75",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "373a6527_63b0d7c1",
        "filename": "src/runtime/mgcpacer.go",
        "patchSetId": 20
      },
      "lineNbr": 1027,
      "author": {
        "id": 12120
      },
      "writtenOn": "2022-04-18T19:28:07Z",
      "side": 1,
      "message": "This is still a a bit vague, given the many different types of OS-level memory accounting. (The SetMemoryLimit function doc has the same vague-ness). Perhaps the sublties of OS accounting are left to the GC ergonomics doc?",
      "range": {
        "startLine": 1027,
        "startChar": 7,
        "endLine": 1027,
        "endChar": 28
      },
      "revId": "dfe7b0da5467c0297acefd4a2ee7c5be22fe5c75",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "aadad080_edc3e131",
        "filename": "src/runtime/mgcpacer.go",
        "patchSetId": 20
      },
      "lineNbr": 1041,
      "author": {
        "id": 12120
      },
      "writtenOn": "2022-04-18T19:28:07Z",
      "side": 1,
      "message": "e.g., I\u0027d forgotten that we aren\u0027t including the binary text/data/bss pages in the limit.",
      "range": {
        "startLine": 1040,
        "startChar": 33,
        "endLine": 1041,
        "endChar": 35
      },
      "revId": "dfe7b0da5467c0297acefd4a2ee7c5be22fe5c75",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6eaeadd6_3d7195e7",
        "filename": "src/runtime/mgcpacer.go",
        "patchSetId": 20
      },
      "lineNbr": 1060,
      "author": {
        "id": 12120
      },
      "writtenOn": "2022-04-18T19:28:07Z",
      "side": 1,
      "message": "Another way to say/add to this is that heapFree is memory that is intended for use in future heap allocations. We shouldn\u0027t need to include it in the limit because making new allocations isn\u0027t increasing the total memory usage, it is just converting memory from heapFree to heapAlloc. (In the steady state).",
      "range": {
        "startLine": 1059,
        "startChar": 4,
        "endLine": 1060,
        "endChar": 10
      },
      "revId": "dfe7b0da5467c0297acefd4a2ee7c5be22fe5c75",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3c4cd1ce_458f41e9",
        "filename": "src/runtime/mgcpacer.go",
        "patchSetId": 20
      },
      "lineNbr": 1066,
      "author": {
        "id": 12120
      },
      "writtenOn": "2022-04-18T19:28:07Z",
      "side": 1,
      "message": "I don\u0027t quite follow the consequences here. IIUC, this is saying that if memoryLimit \u003d 1GB, and mappedReady is already at 1.5GB, then the heap goal becomes 0.5GB (as opposed to 1GB)?\n\nThe purpose/effect here is for the GC to work a bit harder to try to bring memory usage well below the limit rather than just to the limit? To provide future headroom, I presume?",
      "range": {
        "startLine": 1066,
        "startChar": 22,
        "endLine": 1066,
        "endChar": 88
      },
      "revId": "dfe7b0da5467c0297acefd4a2ee7c5be22fe5c75",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b529134c_2498bd23",
        "filename": "src/runtime/mgcpacer.go",
        "patchSetId": 20
      },
      "lineNbr": 1068,
      "author": {
        "id": 12120
      },
      "writtenOn": "2022-04-18T19:28:07Z",
      "side": 1,
      "message": "Why not just show it?",
      "range": {
        "startLine": 1068,
        "startChar": 4,
        "endLine": 1068,
        "endChar": 58
      },
      "revId": "dfe7b0da5467c0297acefd4a2ee7c5be22fe5c75",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "26122c88_efda4d5a",
        "filename": "src/runtime/mgcpacer.go",
        "patchSetId": 20
      },
      "lineNbr": 1091,
      "author": {
        "id": 12120
      },
      "writtenOn": "2022-04-18T19:28:07Z",
      "side": 1,
      "message": "Why is this the lowest possible goal? It seems like memoryLimitGoalHeadroom used below could be below heapMarked.\n\nEdit: based on what I see in trigger(), this is the highest continuous trigger value (i.e., lower values are fine, but don\u0027t change behavior?).",
      "revId": "dfe7b0da5467c0297acefd4a2ee7c5be22fe5c75",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}