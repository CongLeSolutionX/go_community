{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "44d8058c_e174e866",
        "filename": "src/cmd/go/internal/work/exec.go",
        "patchSetId": 1
      },
      "lineNbr": 993,
      "author": {
        "id": 6365
      },
      "writtenOn": "2023-08-29T12:19:08Z",
      "side": 1,
      "message": "It seems kind of silly to use `msg \u003d\u003d nil` as a sentinel, when the message is always non-empty on error. Let\u0027s make `msg` a non-pointer instead — perhaps we can use the new `fmt.Appendf` here?\n\n```suggestion\n\tvar msg []byte\n\tp :\u003d a.Package\n\tvar seen map[string]token.Position\n\tfor _, d :\u003d range p.Internal.Build.Directives {\n\t\tif strings.HasPrefix(d.Text, \"//go:debug\") {\n\t\t\tkey, _, err :\u003d load.ParseGoDebug(d.Text)\n\t\t\tif err !\u003d nil \u0026\u0026 err !\u003d load.ErrNotGoDebug {\n\t\t\t\tmsg \u003d fmt.Appendf(msg, \"%s: invalid //go:debug: %v\\n\", d.Pos, err)\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif pos, ok :\u003d seen[key]; ok {\n\t\t\t\tmsg \u003d fmt.Appendf(msg, \"%s: repeated //go:debug for %v\\n\\t%s: previous //go:debug\\n\", d.Pos, key, pos)\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif seen \u003d\u003d nil {\n\t\t\t\tseen \u003d make(map[string]token.Position)\n\t\t\t}\n\t\t\tseen[key] \u003d d.Pos\n\t\t}\n\t}\n\tif len(msg) \u003e 0 {\n\t\treturn formatOutput(b.WorkDir, p.Dir, p.ImportPath, p.Desc(), b.processOutput(msg))\n\n\t}\n```",
      "range": {
        "startLine": 964,
        "startChar": 0,
        "endLine": 993,
        "endChar": 2
      },
      "revId": "2ef77f4df1949ebf0df708fc3923fa1edcd110b2",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3fdd95e8_a4844c66",
        "filename": "src/cmd/go/internal/work/exec.go",
        "patchSetId": 1
      },
      "lineNbr": 993,
      "author": {
        "id": 36153
      },
      "writtenOn": "2023-09-02T02:48:05Z",
      "side": 1,
      "message": "Good idea @bcmills@google.com.  Just a question (since `Appendf` was added in Go 1.19 and this fix should be ported to 1.21 branch): how many releases back should the compiler build with?  Ie, is it OK for build of 1.21 to require 1.19?  If so (as I suspect) then I\u0027ll make your change.",
      "parentUuid": "44d8058c_e174e866",
      "range": {
        "startLine": 964,
        "startChar": 0,
        "endLine": 993,
        "endChar": 2
      },
      "revId": "2ef77f4df1949ebf0df708fc3923fa1edcd110b2",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3c9986ac_bc6b29ba",
        "filename": "src/cmd/go/internal/work/exec.go",
        "patchSetId": 1
      },
      "lineNbr": 993,
      "author": {
        "id": 6365
      },
      "writtenOn": "2023-09-05T15:08:15Z",
      "side": 1,
      "message": "Per #54265 Go 1.22 bootstraps using Go 1.20, and per #44505 Go 1.20–1.21 bootstrap using Go 1.17.\n\nSo for a backport to Go 1.21 and 1.20, we would indeed need a different approach.\n\nIn that case, I think we could still simplify by allocating the buffer unconditionally:\n\n```go\n\tmsg :\u003d new(bytes.Buffer)\n\tp :\u003d a.Package\n\tvar seen map[string]token.Position\n\tfor _, d :\u003d range p.Internal.Build.Directives {\n\t\tif strings.HasPrefix(d.Text, \"//go:debug\") {\n\t\t\tkey, _, err :\u003d load.ParseGoDebug(d.Text)\n\t\t\tif err !\u003d nil \u0026\u0026 err !\u003d load.ErrNotGoDebug {\n\t\t\t\tfmt.Fprintf(msg, \"%s: invalid //go:debug: %v\\n\", d.Pos, err)\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif pos, ok :\u003d seen[key]; ok {\n\t\t\t\tfmt.Fprintf(msg, \"%s: repeated //go:debug for %v\\n\\t%s: previous //go:debug\\n\", d.Pos, key, pos)\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif seen \u003d\u003d nil {\n\t\t\t\tseen \u003d make(map[string]token.Position)\n\t\t\t}\n\t\t\tseen[key] \u003d d.Pos\n\t\t}\n\t}\n\tif msg.Len() \u003e 0 {\n\t\treturn formatOutput(b.WorkDir, p.Dir, p.ImportPath, p.Desc(), b.processOutput(msg.Bytes()))\n\t}\n```\n\nAt least in theory, the compiler should be smart enough not to let `msg` escape to the heap (it should be stack-allocated). I\u0027m not sure whether that will work in practice.",
      "parentUuid": "3fdd95e8_a4844c66",
      "range": {
        "startLine": 964,
        "startChar": 0,
        "endLine": 993,
        "endChar": 2
      },
      "revId": "2ef77f4df1949ebf0df708fc3923fa1edcd110b2",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}