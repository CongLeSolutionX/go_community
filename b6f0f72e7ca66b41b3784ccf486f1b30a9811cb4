{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "6ff01227_9a724803",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-08-11T19:13:32Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003db6f0f72e\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "b6f0f72e7ca66b41b3784ccf486f1b30a9811cb4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e46bb219_076e5cbb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-08-11T19:32:44Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003db6f0f72e\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "b6f0f72e7ca66b41b3784ccf486f1b30a9811cb4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "04d8a567_10591cc7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-08-11T19:32:44Z",
      "side": 1,
      "message": "Superseded.",
      "parentUuid": "6ff01227_9a724803",
      "tag": "autogenerated:trybots~beginning",
      "revId": "b6f0f72e7ca66b41b3784ccf486f1b30a9811cb4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1346db57_8d8ce9a2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-08-11T19:41:49Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "e46bb219_076e5cbb",
      "tag": "autogenerated:trybots~happy",
      "revId": "b6f0f72e7ca66b41b3784ccf486f1b30a9811cb4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "481c9275_a61ed887",
        "filename": "src/runtime/asm_wasm.s",
        "patchSetId": 1
      },
      "lineNbr": 141,
      "author": {
        "id": 63983
      },
      "writtenOn": "2023-11-05T17:40:21Z",
      "side": 1,
      "message": "I see that most platforms have runtime·abort(SB), can we define an abort for wasm as well, if possible? That would make the code more close to what we have for other arches. badmorestackg0 for example already calls abort, so it would be a matter to calling abort after badmorestackgsignal and badsystemstack",
      "revId": "b6f0f72e7ca66b41b3784ccf486f1b30a9811cb4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "da58e14a_4da1218c",
        "filename": "src/runtime/asm_wasm.s",
        "patchSetId": 1
      },
      "lineNbr": 141,
      "author": {
        "id": 63983
      },
      "writtenOn": "2023-11-05T17:50:03Z",
      "side": 1,
      "message": "Actually, switchToCrashStack calls abort, but only for arches that implement the crash stack. If we plan to support crash stack on wasm that is another reason to have a abort function.",
      "parentUuid": "481c9275_a61ed887",
      "revId": "b6f0f72e7ca66b41b3784ccf486f1b30a9811cb4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "46e6121c_09ae6d83",
        "filename": "src/runtime/asm_wasm.s",
        "patchSetId": 1
      },
      "lineNbr": 141,
      "author": {
        "id": 5167
      },
      "writtenOn": "2023-11-05T17:52:16Z",
      "side": 1,
      "message": "We could define runtime·abort, and that\u0027s probably a good idea. As you point out, it\u0027s called in a few places from the Go code (that just happen to be dead-coded on wasm right now). I think it would just be an `UNDEF` instruction because there isn\u0027t really another option on wasm.",
      "parentUuid": "481c9275_a61ed887",
      "revId": "b6f0f72e7ca66b41b3784ccf486f1b30a9811cb4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a9d3264f_2aad63ab",
        "filename": "src/runtime/asm_wasm.s",
        "patchSetId": 1
      },
      "lineNbr": 141,
      "author": {
        "id": 63983
      },
      "writtenOn": "2023-11-05T18:08:41Z",
      "side": 1,
      "message": "Yes, I\u0027m looking into crash stack support for wasm and I had to define an abort function as well, with just an UNDEF inside.",
      "parentUuid": "46e6121c_09ae6d83",
      "revId": "b6f0f72e7ca66b41b3784ccf486f1b30a9811cb4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1da98f6b_62d2eb2a",
        "filename": "src/runtime/asm_wasm.s",
        "patchSetId": 1
      },
      "lineNbr": 141,
      "author": {
        "id": 63983
      },
      "writtenOn": "2023-11-05T18:15:52Z",
      "side": 1,
      "message": "Another thing I noticed, is that even tho we crash on g0 I can\u0027t see the errors such as \"morestack on g0\", the wasm runtime crashes with \"RuntimeError: memory access out of bounds\", I\u0027m not sure what the cause but I feel like it runs out of stack space for runtime runtime·write. So even if we halt properly it is still not behaving correctly",
      "parentUuid": "a9d3264f_2aad63ab",
      "revId": "b6f0f72e7ca66b41b3784ccf486f1b30a9811cb4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}