{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "87f25c47_e1ef5b3e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-02-15T22:13:46Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003dcf669d96",
      "tag": "autogenerated:trybots~beginning",
      "revId": "cf669d968333f5235d5251a0d1dd1fd2c050210d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7581b094_bba11d7f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-02-15T22:13:46Z",
      "side": 1,
      "message": "Superseded.",
      "parentUuid": "e367665f_36a797c6",
      "tag": "autogenerated:trybots~beginning",
      "revId": "cf669d968333f5235d5251a0d1dd1fd2c050210d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "63db4e14_4c0d0fe7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-02-15T22:19:55Z",
      "side": 1,
      "message": "Build is still in progress... Status page: https://farmer.golang.org/try?commit\u003dcf669d96\nFailed on linux-amd64-unified: https://storage.googleapis.com/go-build-log/cf669d96/linux-amd64-unified_c40c6409.log\nOther builds still in progress; subsequent failure notices suppressed until final report.\n\nConsult https://build.golang.org/ to see whether they are new failures. Keep in mind that TryBots currently test *exactly* your git commit, without rebasing. If your commit\u0027s git parent is old, the failure might\u0027ve already been fixed.\n",
      "parentUuid": "87f25c47_e1ef5b3e",
      "tag": "autogenerated:trybots~progress",
      "revId": "cf669d968333f5235d5251a0d1dd1fd2c050210d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "db6ff4a6_2d72b8e9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-02-15T22:33:39Z",
      "side": 1,
      "message": "1 of 28 TryBots failed.\nFailed on linux-amd64-unified: https://storage.googleapis.com/go-build-log/cf669d96/linux-amd64-unified_c40c6409.log\n\nConsult https://build.golang.org/ to see whether they are new failures. Keep in mind that TryBots currently test *exactly* your git commit, without rebasing. If your commit\u0027s git parent is old, the failure might\u0027ve already been fixed.\n\n",
      "parentUuid": "87f25c47_e1ef5b3e",
      "tag": "autogenerated:trybots~failed",
      "revId": "cf669d968333f5235d5251a0d1dd1fd2c050210d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eb43a3c2_7b03e3ff",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 5200
      },
      "writtenOn": "2022-02-15T22:59:40Z",
      "side": 1,
      "message": "Reviewed the pkgbits portion. Looks fine so far.\n",
      "revId": "cf669d968333f5235d5251a0d1dd1fd2c050210d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fba3ca4c_d3920f8f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 5440
      },
      "writtenOn": "2022-05-24T18:21:52Z",
      "side": 1,
      "message": "Incorporated the internal/pkgbits stuff into CL 407614.",
      "revId": "cf669d968333f5235d5251a0d1dd1fd2c050210d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0d80e9db_8a0d33b1",
        "filename": "src/cmd/compile/internal/noder/quirks.go",
        "patchSetId": 5
      },
      "lineNbr": 18,
      "author": {
        "id": 7061
      },
      "writtenOn": "2022-03-01T22:32:15Z",
      "side": 1,
      "message": "Do we have any particular reason to believe that the old or the new behavior is/will-be superior to the other, from the POV of either error-reporting or debugging?  Changing this might have funny little downstream effects in tools, or at least in their test cases.",
      "range": {
        "startLine": 17,
        "startChar": 3,
        "endLine": 18,
        "endChar": 42
      },
      "revId": "cf669d968333f5235d5251a0d1dd1fd2c050210d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "acaefe67_64223ac6",
        "filename": "src/cmd/compile/internal/noder/quirks.go",
        "patchSetId": 5
      },
      "lineNbr": 18,
      "author": {
        "id": 5440
      },
      "writtenOn": "2022-05-24T18:21:52Z",
      "side": 1,
      "message": "FWIW, this logic exactly matches how we computed position information for implicit type switch variables in Go 1.17.",
      "parentUuid": "0d80e9db_8a0d33b1",
      "range": {
        "startLine": 17,
        "startChar": 3,
        "endLine": 18,
        "endChar": 42
      },
      "revId": "cf669d968333f5235d5251a0d1dd1fd2c050210d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fb54d925_5ae71b40",
        "filename": "src/cmd/compile/internal/noder/reader.go",
        "patchSetId": 5
      },
      "lineNbr": 975,
      "author": {
        "id": 28783
      },
      "writtenOn": "2022-02-18T23:35:50Z",
      "side": 1,
      "message": "For people who like to debug using -W\u003d3 option (printing our the noder IR for functions as they are created and go through the various passes), I think it would be useful to add here (or somewhere equivalent) something like this:\n\n\t\tif base.Flag.W \u003e 1 {\n\t\t\ts :\u003d fmt.Sprintf(\"\\nreader %v\", fn)\n\t\t\tir.Dump(s, fn)\n\t\t}\n\nNot sure if this will duplicate output, but the main goal is to at least show the creating all non-generic functions and the all instantiations of generic functions.",
      "revId": "cf669d968333f5235d5251a0d1dd1fd2c050210d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "60f1d24b_5a851a2f",
        "filename": "src/cmd/compile/internal/noder/unified.go",
        "patchSetId": 5
      },
      "lineNbr": 91,
      "author": {
        "id": 7061
      },
      "writtenOn": "2022-03-08T17:10:31Z",
      "side": 1,
      "message": "This implies that from this point, no other phases should be consulting base.Flag.Lang, yes?  I checked, and none are, but it seems like the sort of thing that might surprise someone in the future.\n\nNot sure if that means it should be documented at base.Flag.Lang, or restored to previous value after processing here.",
      "range": {
        "startLine": 91,
        "startChar": 1,
        "endLine": 91,
        "endChar": 15
      },
      "revId": "cf669d968333f5235d5251a0d1dd1fd2c050210d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "48f1c46b_d8feb2ff",
        "filename": "src/cmd/compile/internal/noder/unified.go",
        "patchSetId": 5
      },
      "lineNbr": 91,
      "author": {
        "id": 5440
      },
      "writtenOn": "2022-05-24T18:21:52Z",
      "side": 1,
      "message": "That\u0027s correct. There was still code that used base.Flag.Lang for -G\u003d0 mode, but I think we\u0027ve ripped that all out.\n\nI\u0027ll double check whether this is still needed.",
      "parentUuid": "60f1d24b_5a851a2f",
      "range": {
        "startLine": 91,
        "startChar": 1,
        "endLine": 91,
        "endChar": 15
      },
      "revId": "cf669d968333f5235d5251a0d1dd1fd2c050210d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1bf20b30_10f22b86",
        "filename": "src/cmd/compile/internal/noder/unified.go",
        "patchSetId": 5
      },
      "lineNbr": 233,
      "author": {
        "id": 7061
      },
      "writtenOn": "2022-03-03T22:55:55Z",
      "side": 1,
      "message": "The compiler should not rely on non-guaranteed semantics.  Maybe we put this into a separate test, but the compiler should not fail in normal operation just because the host platform failed to obey Hyrum\u0027s law.",
      "range": {
        "startLine": 233,
        "startChar": 1,
        "endLine": 233,
        "endChar": 39
      },
      "revId": "cf669d968333f5235d5251a0d1dd1fd2c050210d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ab560982_0baa4187",
        "filename": "src/internal/pkgbits/codes.go",
        "patchSetId": 5
      },
      "lineNbr": 17,
      "author": {
        "id": 5200
      },
      "writtenOn": "2022-02-15T22:59:40Z",
      "side": 1,
      "message": "Might be good to have a comment here about stability of these values. Can we renumber them? Add a new one? I suspect that we can only add new ones to the end because other changes would constitute an export format change, but I\u0027m not sure.",
      "revId": "cf669d968333f5235d5251a0d1dd1fd2c050210d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c8e0dc0b_83b8eced",
        "filename": "src/internal/pkgbits/codes.go",
        "patchSetId": 5
      },
      "lineNbr": 17,
      "author": {
        "id": 5440
      },
      "writtenOn": "2022-05-24T18:21:52Z",
      "side": 1,
      "message": "Added a comment. Correct, these values are in internal/pkgbits rather than cmd/compile because the go/types importers rely on them. We can add new enums, but not change existing ones (at least without version bumping).",
      "parentUuid": "ab560982_0baa4187",
      "revId": "cf669d968333f5235d5251a0d1dd1fd2c050210d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8697fd91_65be2997",
        "filename": "src/internal/pkgbits/decoder.go",
        "patchSetId": 5
      },
      "lineNbr": 23,
      "author": {
        "id": 7061
      },
      "writtenOn": "2022-03-01T22:32:15Z",
      "side": 1,
      "message": "Use of a string here makes me a little nervous.  I can see the advantage from the POV of immutability, inability to reslice larger, but doesn\u0027t it also have the possibility of not being a well-formed (UTF-8) string?\n\nOTOH, this is not crucial to the design, could be replaced w/ a []byte later.\n\nWould it make sense to use a named type that is ~string, so that there is some hint that it is not a first-class string?",
      "range": {
        "startLine": 23,
        "startChar": 1,
        "endLine": 23,
        "endChar": 20
      },
      "revId": "cf669d968333f5235d5251a0d1dd1fd2c050210d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1ab515e8_54a722e2",
        "filename": "src/internal/pkgbits/decoder.go",
        "patchSetId": 5
      },
      "lineNbr": 23,
      "author": {
        "id": 5440
      },
      "writtenOn": "2022-05-24T18:21:52Z",
      "side": 1,
      "message": "\u003e doesn\u0027t it also have the possibility of not being a well-formed (UTF-8) string?\n\nGo strings aren\u0027t required to be UTF-8. It\u0027s just an internal field, so I\u0027m not personally concerned. We use strings elsewhere in the compiler to represent arbitrary, read-only byte strings.",
      "parentUuid": "8697fd91_65be2997",
      "range": {
        "startLine": 23,
        "startChar": 1,
        "endLine": 23,
        "endChar": 20
      },
      "revId": "cf669d968333f5235d5251a0d1dd1fd2c050210d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7c0c74a0_46c95127",
        "filename": "src/internal/pkgbits/decoder.go",
        "patchSetId": 5
      },
      "lineNbr": 236,
      "author": {
        "id": 7061
      },
      "writtenOn": "2022-03-01T22:32:15Z",
      "side": 1,
      "message": "This needs a proper doc comment, because I spent a few minutes trying to figure out how it was legit to cast a \"length\" into a CodeVal.  I imagine something like\n\n// Code optionally checks the sync mark, and return the uint64 following in the import\n// stream.  That uint64 is expected to either be a type tag (a CodeVal) or a count.\n// It returns an int because that is the right type for allocating a slice.\n\nI wonder also if the name should be something more like Prefix since that includes both uses.",
      "range": {
        "startLine": 236,
        "startChar": 18,
        "endLine": 236,
        "endChar": 22
      },
      "revId": "cf669d968333f5235d5251a0d1dd1fd2c050210d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d4d3b32d_083dea26",
        "filename": "src/internal/pkgbits/decoder.go",
        "patchSetId": 5
      },
      "lineNbr": 236,
      "author": {
        "id": 5440
      },
      "writtenOn": "2022-05-24T18:21:52Z",
      "side": 1,
      "message": "\"Len\" is just used here because it\u0027s the convention I use for non-negative ints.",
      "parentUuid": "7c0c74a0_46c95127",
      "range": {
        "startLine": 236,
        "startChar": 18,
        "endLine": 236,
        "endChar": 22
      },
      "revId": "cf669d968333f5235d5251a0d1dd1fd2c050210d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f9031198_88a8760d",
        "filename": "src/internal/pkgbits/encoder.go",
        "patchSetId": 5
      },
      "lineNbr": 19,
      "author": {
        "id": 5200
      },
      "writtenOn": "2022-02-15T22:59:40Z",
      "side": 1,
      "message": "Comment that stringsIdx is just a performance optimization, all the data is in elems[RelocString]. elems[RelocString][stringsIdx[s]] \u003d\u003d s (if s is present).",
      "revId": "cf669d968333f5235d5251a0d1dd1fd2c050210d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eced00ab_213207e2",
        "filename": "src/internal/pkgbits/encoder.go",
        "patchSetId": 5
      },
      "lineNbr": 19,
      "author": {
        "id": 5440
      },
      "writtenOn": "2022-05-24T18:21:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f9031198_88a8760d",
      "revId": "cf669d968333f5235d5251a0d1dd1fd2c050210d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "22299bef_cfd8ff8c",
        "filename": "src/internal/pkgbits/encoder.go",
        "patchSetId": 5
      },
      "lineNbr": 117,
      "author": {
        "id": 5200
      },
      "writtenOn": "2022-02-15T22:59:40Z",
      "side": 1,
      "message": "can you use rEnt here, or something else? \"rent\" is already a word having nothing to do with relocation entries.\nJust \"r\" might be fine.\nSame elsewhere.",
      "range": {
        "startLine": 117,
        "startChar": 8,
        "endLine": 117,
        "endChar": 12
      },
      "revId": "cf669d968333f5235d5251a0d1dd1fd2c050210d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "65fca44d_34a52950",
        "filename": "src/internal/pkgbits/encoder.go",
        "patchSetId": 5
      },
      "lineNbr": 117,
      "author": {
        "id": 5440
      },
      "writtenOn": "2022-05-24T18:21:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "22299bef_cfd8ff8c",
      "range": {
        "startLine": 117,
        "startChar": 8,
        "endLine": 117,
        "endChar": 12
      },
      "revId": "cf669d968333f5235d5251a0d1dd1fd2c050210d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "384a944e_ef7138f0",
        "filename": "src/internal/pkgbits/encoder.go",
        "patchSetId": 5
      },
      "lineNbr": 154,
      "author": {
        "id": 5200
      },
      "writtenOn": "2022-02-15T22:59:40Z",
      "side": 1,
      "message": "Probably want to do this before release. It is quadratic time otherwise.",
      "revId": "cf669d968333f5235d5251a0d1dd1fd2c050210d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "92798810_2174a7a8",
        "filename": "src/internal/pkgbits/encoder.go",
        "patchSetId": 5
      },
      "lineNbr": 154,
      "author": {
        "id": 5440
      },
      "writtenOn": "2022-05-24T18:21:52Z",
      "side": 1,
      "message": "Ack. Updated the TODO to mention quadratic time.",
      "parentUuid": "384a944e_ef7138f0",
      "revId": "cf669d968333f5235d5251a0d1dd1fd2c050210d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "81bd2cb6_c70cf90d",
        "filename": "src/internal/pkgbits/encoder.go",
        "patchSetId": 5
      },
      "lineNbr": 240,
      "author": {
        "id": 5200
      },
      "writtenOn": "2022-02-15T22:59:40Z",
      "side": 1,
      "message": "This seems overly fancy, that (*Encoder).Bool is the only method that returns its argument, so that we can use it in an if statement for both its side effect and to branch on its arg.\nI think it would be clearer to just do:\ncplx :\u003d val.Kind() \u003d\u003d constant.Complex\nw.Bool(cplx)\nif cplx { ... } else { ... }\n\nMore verbose, but more obvious.",
      "revId": "cf669d968333f5235d5251a0d1dd1fd2c050210d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9a4fa35d_2643f932",
        "filename": "src/internal/pkgbits/encoder.go",
        "patchSetId": 5
      },
      "lineNbr": 240,
      "author": {
        "id": 5440
      },
      "writtenOn": "2022-05-24T18:21:52Z",
      "side": 1,
      "message": "This is the same pattern we use in iimport/iexport. I find it helps prevent mistakes, because then the corresponding code is generally `if w.Bool(...) { ... }` and `if r.Bool() { ... }`.\n\nAck that it\u0027s a bit fancy and looks odd at first, but I think the benefit is worthwhile.",
      "parentUuid": "81bd2cb6_c70cf90d",
      "revId": "cf669d968333f5235d5251a0d1dd1fd2c050210d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}