{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "ca51e583_fc08d83a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 29495
      },
      "writtenOn": "2024-05-12T08:37:54Z",
      "side": 1,
      "message": "Before go1.22, the example in #65625 can be run successfully, though the core issue is in old version glibc, but it will be better to provide this backward compatibility to let people can upgrade to go 1.22+.",
      "revId": "5b96d85b5f0b8ff21c0c1df49a635844945e067c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d64cd181_f858f36c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 29495
      },
      "writtenOn": "2024-05-12T08:57:29Z",
      "side": 1,
      "message": "Because glibc didn\u0027t provide Convenient methods to let user clear tid cache in struct pthread, people need to try lots of work and do some hack way(maybe a incorrect way) to let cgo with clone(2) can work like before after they upgrade to go 1.22.",
      "parentUuid": "ca51e583_fc08d83a",
      "revId": "5b96d85b5f0b8ff21c0c1df49a635844945e067c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9bb95b0f_8f6ff5a1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 13315
      },
      "writtenOn": "2024-05-13T15:29:15Z",
      "side": 1,
      "message": "This workaround doesn\u0027t seem too bad. But the ultimate bug is the use of clone(2) in runc isn\u0027t safe, which should be addressed, instead of being worked around. In theory a stale tid cache can lead to any weird behavior, not just the crashing.",
      "parentUuid": "d64cd181_f858f36c",
      "revId": "5b96d85b5f0b8ff21c0c1df49a635844945e067c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "653ce634_9e032339",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 12120
      },
      "writtenOn": "2024-05-13T18:44:45Z",
      "side": 1,
      "message": "I agree. I think attempting to continue in this state is asking for trouble. In https://github.com/golang/go/issues/65625#issuecomment-1939390070, I noted my opinion that we should abort the process entirely on these errors. IMO, that still seems like the safest approach.",
      "parentUuid": "9bb95b0f_8f6ff5a1",
      "revId": "5b96d85b5f0b8ff21c0c1df49a635844945e067c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "70a040b3_b0e9c722",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 29495
      },
      "writtenOn": "2024-05-14T09:52:43Z",
      "side": 1,
      "message": "I think we can abort the process entirely when there is an error on calling `pthread_*` functions, except `pthread_getattr_np`. Because there is a fact that in cgo, only `pthread_getattr_np`\u0027s error is related to `tid dirty cache`, other `pthread_*` functions\u0027 error has no relationship to `tid dirty cache`. Consider the new version glibc has removed `tid cache`, so I think we can have a backwork compatibility for `pthread_getattr_np`. I think it is safe enough for golang.\n\nI have read the gblic code, and this is the list of `pthread_*` function list that could be influenced by `tid dirty cache`:\npthread_getaffinity_np\npthread_getcpuclockid\npthread_getname_np\npthread_getschedparam\npthread_kill\npthread_setaffinity_np\npthread_setname_np\npthread_setschedparam\npthread_sigqueue\npthread_getattr_np\n\nOnly the last one is used by cgo.",
      "parentUuid": "653ce634_9e032339",
      "revId": "5b96d85b5f0b8ff21c0c1df49a635844945e067c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}