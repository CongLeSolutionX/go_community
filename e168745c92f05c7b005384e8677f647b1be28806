{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "03e7dd6b_8067652a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-05-25T18:55:22Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003de168745c",
      "tag": "autogenerated:trybots~beginning",
      "revId": "e168745c92f05c7b005384e8677f647b1be28806",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a7c4d84f_8fc91c02",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-05-25T19:07:31Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "03e7dd6b_8067652a",
      "tag": "autogenerated:trybots~happy",
      "revId": "e168745c92f05c7b005384e8677f647b1be28806",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2f31046f_9e4e0928",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5210
      },
      "writtenOn": "2021-05-25T21:26:54Z",
      "side": 1,
      "message": "Looks good overall but I think some assertions are overly aggressive.\n\nI think it may be worthwhile encoding the ~ information in a bitset rather than a list of booleans: Basically collect all tilde information into (possibly successive) uint64 values and export/import those. Something like this for export (factored out into its own function):\n\nvar bits uint64\nfor i :\u003d 0; i \u003c u.NumTerms(); i++ {\n   if i \u003e 0 \u0026\u0026 i%64 \u003d\u003d 0 {\n      // write out bits\n      bits \u003d 0\n   }\n   bits \u003c\u003c\u003d 1\n   if u.Tilde(i) {\n      bits |\u003d 1\n   }\n}\n// write out bits\n\nand similar for import? (for a follow-up CL). This is an optimization which doesn\u0027t have to happen now (we may make more chanes) but should be considered probably before we freeze the export format for 1.18. Add a TODO?\n\n",
      "revId": "e168745c92f05c7b005384e8677f647b1be28806",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fd417ca3_9bd95524",
        "filename": "src/cmd/compile/internal/noder/types.go",
        "patchSetId": 1
      },
      "lineNbr": 201,
      "author": {
        "id": 5210
      },
      "writtenOn": "2021-05-25T21:26:54Z",
      "side": 1,
      "message": "This is not quite right. Note that a \"union\" consisting of a single type is just that type, e.g. \"int\". It just so happens that a \"~int\" requires a union and all type lists are translated into list of types with \"~\". You should already be able to write\n\ntype T interface{ int }\n\nand I expect that to cause this assertion to fail.",
      "range": {
        "startLine": 201,
        "startChar": 17,
        "endLine": 201,
        "endChar": 23
      },
      "revId": "e168745c92f05c7b005384e8677f647b1be28806",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b88abfb0_0d7a29dc",
        "filename": "src/cmd/compile/internal/types/size.go",
        "patchSetId": 1
      },
      "lineNbr": 112,
      "author": {
        "id": 5210
      },
      "writtenOn": "2021-05-25T21:26:54Z",
      "side": 1,
      "message": "see previous comment - even now you can write\n\ninterface{int} where the int is not a union",
      "range": {
        "startLine": 112,
        "startChar": 30,
        "endLine": 112,
        "endChar": 33
      },
      "revId": "e168745c92f05c7b005384e8677f647b1be28806",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "32fe1a7b_2aff6d9f",
        "filename": "src/cmd/compile/internal/types/size.go",
        "patchSetId": 1
      },
      "lineNbr": 415,
      "author": {
        "id": 5210
      },
      "writtenOn": "2021-05-25T21:26:54Z",
      "side": 1,
      "message": "s/ for now//\n\nwe\u0027re not expecting to change this anytime soon",
      "range": {
        "startLine": 415,
        "startChar": 33,
        "endLine": 415,
        "endChar": 36
      },
      "revId": "e168745c92f05c7b005384e8677f647b1be28806",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e5f81f0f_ba1a17d6",
        "filename": "src/cmd/compile/internal/types/size.go",
        "patchSetId": 1
      },
      "lineNbr": 416,
      "author": {
        "id": 5210
      },
      "writtenOn": "2021-05-25T21:26:54Z",
      "side": 1,
      "message": "I don\u0027t know that this makes sense.",
      "range": {
        "startLine": 416,
        "startChar": 13,
        "endLine": 416,
        "endChar": 14
      },
      "revId": "e168745c92f05c7b005384e8677f647b1be28806",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7ece1f0d_7c6fd72c",
        "filename": "src/cmd/compile/internal/types/type.go",
        "patchSetId": 1
      },
      "lineNbr": 1827,
      "author": {
        "id": 5210
      },
      "writtenOn": "2021-05-25T21:26:54Z",
      "side": 1,
      "message": "s/NewUnon/NewUnion/\ns/union type/union/ (I am reluctant to call them types - they are really sets of types)",
      "range": {
        "startLine": 1827,
        "startChar": 3,
        "endLine": 1827,
        "endChar": 10
      },
      "revId": "e168745c92f05c7b005384e8677f647b1be28806",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3362b3a2_f86d3343",
        "filename": "src/cmd/compile/internal/types/type.go",
        "patchSetId": 1
      },
      "lineNbr": 1828,
      "author": {
        "id": 5210
      },
      "writtenOn": "2021-05-25T21:26:54Z",
      "side": 1,
      "message": "s/tue/true/",
      "range": {
        "startLine": 1828,
        "startChar": 16,
        "endLine": 1828,
        "endChar": 19
      },
      "revId": "e168745c92f05c7b005384e8677f647b1be28806",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "752ec427_1e77de2c",
        "filename": "test/typeparam/mincheck.dir/a.go",
        "patchSetId": 1
      },
      "lineNbr": 8,
      "author": {
        "id": 5210
      },
      "writtenOn": "2021-05-25T21:26:54Z",
      "side": 1,
      "message": "change this to\n\n~int|~int64|~float64\n\nas it should work, too?",
      "range": {
        "startLine": 8,
        "startChar": 17,
        "endLine": 8,
        "endChar": 18
      },
      "revId": "e168745c92f05c7b005384e8677f647b1be28806",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}