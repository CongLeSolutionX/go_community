{
  "comments": [
    {
      "key": {
        "uuid": "be8ed98b_fc5b9480",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 6320
      },
      "writtenOn": "2018-03-12T15:55:32Z",
      "side": 1,
      "message": "The title is a little vague, could you change it to \"full operand support\"?",
      "revId": "d805925391e9ffd027dd3b46bc3bab06a772d66a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c68d2d7b_5ce8d99a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 13015
      },
      "writtenOn": "2018-03-12T20:05:51Z",
      "side": 1,
      "message": "OK.",
      "parentUuid": "be8ed98b_fc5b9480",
      "revId": "d805925391e9ffd027dd3b46bc3bab06a772d66a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8e7b3000_6beebd5d",
        "filename": "src/cmd/asm/internal/asm/testdata/ppc64enc.s",
        "patchSetId": 2
      },
      "lineNbr": 88,
      "author": {
        "id": 6320
      },
      "writtenOn": "2018-03-12T15:55:32Z",
      "side": 1,
      "message": "The other lines in this file don\u0027t have tabs, just spaces, could you change them so they are consistent?",
      "revId": "d805925391e9ffd027dd3b46bc3bab06a772d66a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1ce0f6fb_1e29ad8f",
        "filename": "src/cmd/asm/internal/asm/testdata/ppc64enc.s",
        "patchSetId": 2
      },
      "lineNbr": 88,
      "author": {
        "id": 13015
      },
      "writtenOn": "2018-03-12T20:05:51Z",
      "side": 1,
      "message": "OK.",
      "parentUuid": "8e7b3000_6beebd5d",
      "revId": "d805925391e9ffd027dd3b46bc3bab06a772d66a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cfad1b13_ef047511",
        "filename": "src/cmd/internal/obj/ppc64/asm9.go",
        "patchSetId": 2
      },
      "lineNbr": 584,
      "author": {
        "id": 6320
      },
      "writtenOn": "2018-03-12T15:55:32Z",
      "side": 1,
      "message": "I don\u0027t see how an SOREG could be used here. That is supposed to be reg + signed offset.",
      "revId": "d805925391e9ffd027dd3b46bc3bab06a772d66a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0f48efb1_d330cd55",
        "filename": "src/cmd/internal/obj/ppc64/asm9.go",
        "patchSetId": 2
      },
      "lineNbr": 584,
      "author": {
        "id": 13015
      },
      "writtenOn": "2018-03-12T20:05:51Z",
      "side": 1,
      "message": "Do you want me to modify the original behavior of l*arx before this change? The original syntax was \"L*ARX (RA+RB),RT\" (the same as all indexed loads/stores), not \"L*ARX RA,RB,RT\".",
      "parentUuid": "cfad1b13_ef047511",
      "revId": "d805925391e9ffd027dd3b46bc3bab06a772d66a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9756a47d_41044e46",
        "filename": "src/cmd/internal/obj/ppc64/asm9.go",
        "patchSetId": 2
      },
      "lineNbr": 584,
      "author": {
        "id": 6320
      },
      "writtenOn": "2018-03-12T21:18:53Z",
      "side": 1,
      "message": "No, I don\u0027t think you want to change existing behavior in case there is existing asm that depends on the old. \n\nI don\u0027t think using C_SOREG is correct here. Show me a case where it is needed. It is not needed to indicate an index register, since that worked before.",
      "parentUuid": "0f48efb1_d330cd55",
      "revId": "d805925391e9ffd027dd3b46bc3bab06a772d66a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6c388964_0e3e93b8",
        "filename": "src/cmd/internal/obj/ppc64/asm9.go",
        "patchSetId": 2
      },
      "lineNbr": 584,
      "author": {
        "id": 13015
      },
      "writtenOn": "2018-03-12T22:12:35Z",
      "side": 1,
      "message": "Oh, I see now. There are two extra entries here. Removed.",
      "parentUuid": "9756a47d_41044e46",
      "revId": "d805925391e9ffd027dd3b46bc3bab06a772d66a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "42d8c901_46fec4cf",
        "filename": "src/cmd/internal/obj/ppc64/asm9.go",
        "patchSetId": 2
      },
      "lineNbr": 586,
      "author": {
        "id": 6320
      },
      "writtenOn": "2018-03-12T15:55:32Z",
      "side": 1,
      "message": "I don\u0027t see that a constant operand is allowed on a eciwx, so maybe the l*arx instructions need their own entry in Optab with their own list of allowable operands.",
      "revId": "d805925391e9ffd027dd3b46bc3bab06a772d66a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9d3eef2b_4589e738",
        "filename": "src/cmd/internal/obj/ppc64/asm9.go",
        "patchSetId": 2
      },
      "lineNbr": 586,
      "author": {
        "id": 13015
      },
      "writtenOn": "2018-03-12T20:05:51Z",
      "side": 1,
      "message": "Same as above.",
      "parentUuid": "42d8c901_46fec4cf",
      "revId": "d805925391e9ffd027dd3b46bc3bab06a772d66a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5c8cef19_8d5d347a",
        "filename": "src/cmd/internal/obj/ppc64/asm9.go",
        "patchSetId": 2
      },
      "lineNbr": 586,
      "author": {
        "id": 6320
      },
      "writtenOn": "2018-03-12T21:18:53Z",
      "side": 1,
      "message": "I don\u0027t understand what you mean by \"Same as above\". You are adding an entry to the Optab for an opcode/operand combination that doesn\u0027t exist. ECIWX does not allow a constant operand.",
      "parentUuid": "9d3eef2b_4589e738",
      "revId": "d805925391e9ffd027dd3b46bc3bab06a772d66a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b5881da9_519d5f32",
        "filename": "src/cmd/internal/obj/ppc64/asm9.go",
        "patchSetId": 2
      },
      "lineNbr": 586,
      "author": {
        "id": 13015
      },
      "writtenOn": "2018-03-12T22:12:35Z",
      "side": 1,
      "message": "Scratch that... I thought this was also about changing instruction behavior.\n\nSee line 1797. The L*AR instructions were originally under \u0027AECIWX\u0027 in the case statement. Hence, the new form of L*AR, which takes the constant EH operand, will be under AECIWX at this point. This does not affect the behavior of ECIWX.\n\nIf a new ALWAR (or whatever we call the entry) is created in the optab, those original L*AR instructions will have to be moved into a new case statement in \u0027asmout\u0027. Is that what you had in mind? If so, I can change that. It won\u0027t have any side effects in the compiler.\n\nBTW, ECIWX/ECOWX were optional instructions and are not even present in ISA 3.0.",
      "parentUuid": "5c8cef19_8d5d347a",
      "revId": "d805925391e9ffd027dd3b46bc3bab06a772d66a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dc7fe3ce_17287a2b",
        "filename": "src/cmd/internal/obj/ppc64/asm9.go",
        "patchSetId": 2
      },
      "lineNbr": 3013,
      "author": {
        "id": 6320
      },
      "writtenOn": "2018-03-12T15:55:32Z",
      "side": 1,
      "message": "Shouldn\u0027t there be a check here to verify the eh value is valid, i.e., not too large?",
      "revId": "d805925391e9ffd027dd3b46bc3bab06a772d66a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1071e3e6_10b9bbe5",
        "filename": "src/cmd/internal/obj/ppc64/asm9.go",
        "patchSetId": 2
      },
      "lineNbr": 3013,
      "author": {
        "id": 13015
      },
      "writtenOn": "2018-03-12T20:05:51Z",
      "side": 1,
      "message": "It doesn\u0027t hurt to add it, even though a large value would be masked out later in AOP_RRRI. But I initially supposed who used asm directly was supposed to know what they\u0027re doing :)",
      "parentUuid": "dc7fe3ce_17287a2b",
      "revId": "d805925391e9ffd027dd3b46bc3bab06a772d66a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}