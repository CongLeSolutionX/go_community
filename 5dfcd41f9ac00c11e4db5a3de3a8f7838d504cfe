{
  "comments": [
    {
      "key": {
        "uuid": "8d500522_5a0c1523",
        "filename": "src/cmd/compile/internal/ssa/gen/AMD64.rules",
        "patchSetId": 2
      },
      "lineNbr": 575,
      "author": {
        "id": 5200
      },
      "writtenOn": "2020-04-23T16:41:06Z",
      "side": 1,
      "message": "Why not L and Q also? Because those have already been rewritten to BT(L|Q)?\nMight be better to add rewrites for TEST(B|W)const -\u003e BTL, then you just need the second rule here.",
      "range": {
        "startLine": 575,
        "startChar": 16,
        "endLine": 575,
        "endChar": 17
      },
      "revId": "5dfcd41f9ac00c11e4db5a3de3a8f7838d504cfe",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "31c3f0c9_37685dab",
        "filename": "src/cmd/compile/internal/ssa/gen/AMD64.rules",
        "patchSetId": 2
      },
      "lineNbr": 575,
      "author": {
        "id": 5143
      },
      "writtenOn": "2020-04-23T16:46:34Z",
      "side": 1,
      "message": "IIRC we don\u0027t do the TEST(B|W)const -\u003e BTL rewrite because it generates larger code.",
      "parentUuid": "8d500522_5a0c1523",
      "range": {
        "startLine": 575,
        "startChar": 16,
        "endLine": 575,
        "endChar": 17
      },
      "revId": "5dfcd41f9ac00c11e4db5a3de3a8f7838d504cfe",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3180ceca_3e47ccd9",
        "filename": "src/cmd/compile/internal/ssa/gen/AMD64.rules",
        "patchSetId": 2
      },
      "lineNbr": 575,
      "author": {
        "id": 5200
      },
      "writtenOn": "2020-04-23T16:52:11Z",
      "side": 1,
      "message": "Seems testb is smaller, but testw isn\u0027t:\n\n       0:\t0f ba e0 06 \tbtl\t$6, %eax\n       4:\t0f ba e0 0a \tbtl\t$10, %eax\n       8:\ta8 40 \ttestb\t$64, %al\n       a:\t66 a9 40 00 \ttestw\t$64, %ax\n       e:\t66 a9 00 04 \ttestw\t$1024, %ax",
      "parentUuid": "31c3f0c9_37685dab",
      "range": {
        "startLine": 575,
        "startChar": 16,
        "endLine": 575,
        "endChar": 17
      },
      "revId": "5dfcd41f9ac00c11e4db5a3de3a8f7838d504cfe",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d5fbc297_46bab980",
        "filename": "src/cmd/compile/internal/ssa/gen/AMD64.rules",
        "patchSetId": 2
      },
      "lineNbr": 575,
      "author": {
        "id": 5143
      },
      "writtenOn": "2020-04-23T16:54:24Z",
      "side": 1,
      "message": "testw is probably really rare. Maybe I\u0027ll do them all, then, for consistency.",
      "parentUuid": "3180ceca_3e47ccd9",
      "range": {
        "startLine": 575,
        "startChar": 16,
        "endLine": 575,
        "endChar": 17
      },
      "revId": "5dfcd41f9ac00c11e4db5a3de3a8f7838d504cfe",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cfae91d7_6cf643de",
        "filename": "src/cmd/compile/internal/ssa/gen/AMD64.rules",
        "patchSetId": 2
      },
      "lineNbr": 575,
      "author": {
        "id": 5143
      },
      "writtenOn": "2020-04-23T17:40:22Z",
      "side": 1,
      "message": "Oops. I got the polarity of that reversed: testb is common, and it is the unfortunate case for a rewrite to btl.\n\nThe impact of doing these rewrites is broadly mildly worse, and in some cases (go/parser) noticeably worse. I\u0027m still OK doing it for consistency if you prefer, but it definitely looks like a regression to me.\n\nfile                                                 before   after    Î”       %       \nruntime.s                                            484180   484300   +120    +0.025% \nsync.s                                               16385    16392    +7      +0.043% \ninternal/reflectlite.s                               28372    28384    +12     +0.042% \nstrconv.s                                            52361    52365    +4      +0.008% \nregexp/syntax.s                                      82487    82469    -18     -0.022% \nregexp.s                                             64268    64279    +11     +0.017% \nreflect.s                                            167915   167951   +36     +0.021% \ndebug/gosym.s                                        25290    25291    +1      +0.004% \ncompress/gzip.s                                      9749     9757     +8      +0.082% \ndebug/dwarf.s                                        107464   107468   +4      +0.004% \nencoding/json.s                                      105520   105522   +2      +0.002% \nvendor/golang.org/x/text/unicode/bidi.s              27310    27317    +7      +0.026% \nmath/big.s                                           183095   183097   +2      +0.001% \nvendor/golang.org/x/net/http2/hpack.s                23810    23811    +1      +0.004% \ncrypto/rand.s                                        6854     6862     +8      +0.117% \narchive/tar.s                                        70579    70580    +1      +0.001% \nencoding/asn1.s                                      56933    56934    +1      +0.002% \nvendor/golang.org/x/text/unicode/norm.s              66204    66218    +14     +0.021% \ninternal/xcoff.s                                     22798    22800    +2      +0.009% \nvendor/golang.org/x/crypto/cryptobyte.s              33248    33250    +2      +0.006% \nimage/gif.s                                          27289    27291    +2      +0.007% \nvendor/golang.org/x/net/idna.s                       24495    24494    -1      -0.004% \nimage/png.s                                          42874    42876    +2      +0.005% \ntesting.s                                            69039    69046    +7      +0.010% \ngo/printer.s                                         76061    76065    +4      +0.005% \ngo/parser.s                                          78808    78997    +189    +0.240% \ntext/template.s                                      98583    98587    +4      +0.004% \ncmd/vendor/golang.org/x/arch/arm/armasm.s            44488    44489    +1      +0.002% \ncmd/vendor/golang.org/x/arch/x86/x86asm.s            79010    78996    -14     -0.018% \ncmd/vendor/golang.org/x/arch/arm64/arm64asm.s        116954   116967   +13     +0.011% \ncmd/internal/obj.s                                   116185   116188   +3      +0.003% \ncmd/internal/obj/arm.s                               66154    66166    +12     +0.018% \ncmd/internal/obj/mips.s                              55590    55581    -9      -0.016% \ncmd/internal/obj/riscv.s                             63876    63874    -2      -0.003% \ncmd/cgo.s                                            239625   239633   +8      +0.003% \ncmd/internal/obj/wasm.s                              43676    43675    -1      -0.002% \nnet.s                                                288957   288985   +28     +0.010% \ncmd/internal/obj/arm64.s                             146040   146039   -1      -0.001% \ncmd/internal/obj/ppc64.s                             119775   119769   -6      -0.005% \ngo/internal/gcimporter.s                             34225    34226    +1      +0.003% \ngo/internal/gccgoimporter.s                          55875    55877    +2      +0.004% \ncmd/api.s                                            39468    39469    +1      +0.003% \ncmd/internal/obj/s390x.s                             126412   126410   -2      -0.002% \ncmd/compile/internal/types.s                         47199    47212    +13     +0.028% \ncmd/internal/obj/x86.s                               88212    88217    +5      +0.006% \ncmd/fix.s                                            85042    85062    +20     +0.024% \ncmd/gofmt.s                                          30525    30553    +28     +0.092% \ncmd/go/internal/load.s                               105828   105830   +2      +0.002% \ncmd/oldlink/internal/loadmacho.s                     26597    26598    +1      +0.004% \ncmd/link/internal/loader.s                           95689    95693    +4      +0.004% \ncmd/link/internal/loadmacho.s                        26730    26731    +1      +0.004% \ncmd/go/internal/work.s                               302956   302962   +6      +0.002% \ncrypto/x509.s                                        146951   146952   +1      +0.001% \ncrypto/tls.s                                         320070   320090   +20     +0.006% \ncmd/oldlink/internal/ld.s                            532333   532361   +28     +0.005% \ncmd/link/internal/ld.s                               553943   553989   +46     +0.008% \nnet/http.s                                           554015   554115   +100    +0.018% \nnet/http/httptest.s                                  16386    16388    +2      +0.012% \nnet/http/httputil.s                                  39475    39499    +24     +0.061% \nnet/http/fcgi.s                                      19141    19143    +2      +0.010% \nnet/rpc.s                                            33981    33983    +2      +0.006% \ncmd/go/internal/modfetch/codehost.s                  88785    88795    +10     +0.011% \ncmd/vendor/github.com/google/pprof/internal/driver.s 143068   143070   +2      +0.001% \ncmd/go/internal/modfetch.s                           125727   125735   +8      +0.006% \ncmd/go/internal/modload.s                            148022   148030   +8      +0.005% \ncmd/go/internal/modcmd.s                             46070    46072    +2      +0.004% \ncmd/go/internal/test.s                               63754    63765    +11     +0.017% \ncmd/compile/internal/gc.s                            1541502  1541484  -18     -0.001%",
      "parentUuid": "d5fbc297_46bab980",
      "range": {
        "startLine": 575,
        "startChar": 16,
        "endLine": 575,
        "endChar": 17
      },
      "revId": "5dfcd41f9ac00c11e4db5a3de3a8f7838d504cfe",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    }
  ]
}