{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "28d34cd3_f2c5f4c4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-06-15T07:15:24Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003d19e9f95c",
      "tag": "autogenerated:trybots~beginning",
      "revId": "19e9f95c3c3c060b9360f227ca18d7ef8f09c637",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "acef7665_5870dbe3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-06-15T07:15:24Z",
      "side": 1,
      "message": "Superseded.",
      "parentUuid": "491db5c5_f9c16f7d",
      "tag": "autogenerated:trybots~beginning",
      "revId": "19e9f95c3c3c060b9360f227ca18d7ef8f09c637",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c6957f99_21392d95",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-06-15T07:26:24Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "28d34cd3_f2c5f4c4",
      "tag": "autogenerated:trybots~happy",
      "revId": "19e9f95c3c3c060b9360f227ca18d7ef8f09c637",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c618e90b_6d8d8474",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5440
      },
      "writtenOn": "2021-06-15T07:59:06Z",
      "side": 1,
      "message": "This is the ClosureCall idea I described on chat yesterday. This CL is the crux of it; next CL is the cleanup to remove InterCall.\n\nIt increases the text section size by a small amount: for cmd/compile, it adds about 4kB to the .text section, which is about 0.05% of .text (0.02% of overall binary size). Also as mentioned on chat, I think this is because if there\u0027s no register pressure, we can load into the closure register for free. But if there *is* register pressure, then we\u0027re a little limited.\n\n```\n$ ls -l compile.{new,old}\n-rwxr-x--- 1 mdempsky primarygroup 22244892 Jun 15 00:34 compile.new\n-rwxr-x--- 1 mdempsky primarygroup 22240548 Jun 15 00:34 compile.old\n\n$ size compile.{new,old}\n   text\t   data\t    bss\t    dec\t    hex\tfilename\n14952490\t 794950\t 358768\t16106208\t f5c2e0\tcompile.new\n14948052\t 794950\t 358768\t16101770\t f5b18a\tcompile.old\n\n$ readelf -WS compile.old | grep text\n  [ 1] .text             PROGBITS        0000000000401000 001000 7ef42b 00  AX  0   0 32\n$ readelf -WS compile.new | grep text\n  [ 1] .text             PROGBITS        0000000000401000 001000 7f066b 00  AX  0   0 32\n```\n  \nI think that\u0027s already pretty cheap, but maybe there\u0027s room to improve still? E.g., I notice we\u0027re generating code like:\n\n    MOVQ \"\".i(SB), DX // load itab into DX\n    MOVQ 24(DX), DI // load closureptr into DI\n    // populate arguments\n    CALL DI\n    \nbut it would save us a register if instead we generated:\n\n    MOVQ \"\".i(SB), DX // load itab into DX (same)\n    // populate arguments\n    CALL 24(DX)\n    \nWe always know the offset statically: 0 for closure call, and a fixed itab index/offset for interface calls. So we could store it in Aux instead.",
      "revId": "19e9f95c3c3c060b9360f227ca18d7ef8f09c637",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}