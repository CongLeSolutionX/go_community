{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "88ce08a2_9615671c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 6320
      },
      "writtenOn": "2023-10-31T20:02:58Z",
      "side": 1,
      "message": "In this paragraph you mention the \u0027.\u0027 version of opcodes but in the next paragraph you say the CC opcode variant and it is not clear you are talking about the same thing. One is referring to the Go opcode and the other is the gnu opcode. I think it is better to just stick with CC since you are changing rules and the fact that the assembler will generate the \u0027.\u0027 in the final assembly doesn\u0027t really matter at this point. The connection won\u0027t be obvious unless you know the internals of PPC64.",
      "revId": "8ae07aa75f51407a533d4c32a4508355997261c1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7db9e4d5_deabe4bf",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 36863
      },
      "writtenOn": "2023-10-30T21:13:52Z",
      "side": 1,
      "message": "TRY\u003dppc64,ppc64le",
      "revId": "8ae07aa75f51407a533d4c32a4508355997261c1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "28cb2bbe_473f0b72",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 36863
      },
      "writtenOn": "2023-10-30T21:14:20Z",
      "side": 1,
      "message": "I",
      "revId": "8ae07aa75f51407a533d4c32a4508355997261c1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9bb1bcfc_8eda74d4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-10-30T21:14:49Z",
      "side": 1,
      "message": "SlowBots beginning. Status page: https://farmer.golang.org/try?commit\u003d8ae07aa7\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "8ae07aa75f51407a533d4c32a4508355997261c1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5f09ecd0_d480fe82",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-10-30T21:25:34Z",
      "side": 1,
      "message": "Build is still in progress... Status page: https://farmer.golang.org/try?commit\u003d8ae07aa7\nFailed on openbsd-amd64-72: https://storage.googleapis.com/go-build-log/8ae07aa7/openbsd-amd64-72_8f326c2f.log\nOther builds still in progress; subsequent failure notices suppressed until final report.\n\nConsult https://build.golang.org/ to see whether they are new failures. Keep in mind that TryBots currently test *exactly* your git commit, without rebasing. If your commit\u0027s git parent is old, the failure might\u0027ve already been fixed.\n",
      "parentUuid": "9bb1bcfc_8eda74d4",
      "tag": "autogenerated:trybots~progress",
      "revId": "8ae07aa75f51407a533d4c32a4508355997261c1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cd4e9c36_aff3653b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-10-30T22:04:59Z",
      "side": 1,
      "message": "1 of 48 SlowBots failed.\nFailed on openbsd-amd64-72: https://storage.googleapis.com/go-build-log/8ae07aa7/openbsd-amd64-72_8f326c2f.log\n\nConsult https://build.golang.org/ to see whether they are new failures. Keep in mind that TryBots currently test *exactly* your git commit, without rebasing. If your commit\u0027s git parent is old, the failure might\u0027ve already been fixed.\n\nSlowBot builds that ran:\n* linux-ppc64-sid-buildlet\n* linux-ppc64le-buildlet\n",
      "parentUuid": "9bb1bcfc_8eda74d4",
      "tag": "autogenerated:trybots~failed",
      "revId": "8ae07aa75f51407a533d4c32a4508355997261c1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "73c616af_59aa42ce",
        "filename": "src/cmd/compile/internal/ppc64/ssa.go",
        "patchSetId": 1
      },
      "lineNbr": 614,
      "author": {
        "id": 6320
      },
      "writtenOn": "2023-10-31T20:02:58Z",
      "side": 1,
      "message": "Isn\u0027t this the same implementation as ANDCCconst, so they could share the same case block.",
      "revId": "8ae07aa75f51407a533d4c32a4508355997261c1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c3f471b0_901e0b40",
        "filename": "src/cmd/compile/internal/ssa/_gen/PPC64Ops.go",
        "patchSetId": 1
      },
      "lineNbr": 252,
      "author": {
        "id": 6320
      },
      "writtenOn": "2023-10-31T20:02:58Z",
      "side": 1,
      "message": "No space between the tuple types. I\u0027ve seen cases where it causes problems for rulegen.",
      "revId": "8ae07aa75f51407a533d4c32a4508355997261c1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dac09601_d9837bd9",
        "filename": "src/cmd/compile/internal/ssa/_gen/PPC64latelower.rules",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 6320
      },
      "writtenOn": "2023-10-31T20:02:58Z",
      "side": 1,
      "message": "Please explain this comment as to why it needs to be done in separate steps.",
      "revId": "8ae07aa75f51407a533d4c32a4508355997261c1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bcc8e298_557595a4",
        "filename": "src/cmd/compile/internal/ssa/_gen/PPC64latelower.rules",
        "patchSetId": 1
      },
      "lineNbr": 45,
      "author": {
        "id": 6320
      },
      "writtenOn": "2023-10-31T20:02:58Z",
      "side": 1,
      "message": "There are rules to do this for the AND, OR, and XOR in PPC64.rules. Shouldn\u0027t those be removed from that file if they are handled here, or is there some reason to keep them both.",
      "revId": "8ae07aa75f51407a533d4c32a4508355997261c1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3c52f00b_e3147557",
        "filename": "src/cmd/compile/internal/ssa/rewrite.go",
        "patchSetId": 1
      },
      "lineNbr": 1624,
      "author": {
        "id": 6320
      },
      "writtenOn": "2023-10-31T20:02:58Z",
      "side": 1,
      "message": "This needs a better explanation for the purpose of this function so others understand why it is being done this way. It looks like it is trying to do what rewritePPC64latelower.go should be doing.",
      "revId": "8ae07aa75f51407a533d4c32a4508355997261c1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}