{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "b130bca1_7603a0eb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-11-18T00:03:11Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003df5369bfc\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "f5369bfc8e68db4ed66f56d216db4aac78d049d8",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "718dbbc4_52ba7c1f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-11-18T00:16:51Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "b130bca1_7603a0eb",
      "tag": "autogenerated:trybots~happy",
      "revId": "f5369bfc8e68db4ed66f56d216db4aac78d049d8",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "11920d67_54403dad",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 7392
      },
      "writtenOn": "2022-11-18T00:20:51Z",
      "side": 1,
      "message": "LG overall, but some comments.\n\nAlso, the change needs to be ported to go/types (identical structure).",
      "revId": "f5369bfc8e68db4ed66f56d216db4aac78d049d8",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ee92a2ab_926cc0e2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 7392
      },
      "writtenOn": "2022-11-18T05:03:11Z",
      "side": 1,
      "message": "Ok, I looked into this. See the comments below.\n\nAlso, please add a test inside types2 (and eventually go/types) for this, as it\u0027s much easier and faster to test. Here\u0027s a template that you can expand upon. This function should go into issues_test.go:\n\n```\nfunc TestIssue54258(t *testing.T) {\n\ttest :\u003d func(asrc, bsrc string, ok bool) {\n\t\ta :\u003d mustTypecheck(\"a\", asrc, nil)\n\t\tbast :\u003d mustParse(\"\", bsrc)\n\t\tconf :\u003d Config{Importer: importHelper{pkg: a, fallback: defaultImporter()}}\n\t\t_, err :\u003d conf.Check(bast.PkgName.Value, []*syntax.File{bast}, nil)\n\t\tif ok \u0026\u0026 err !\u003d nil {\n\t\t\tt.Fatalf(\"unexpected error: %s\", err)\n\t\t}\n\t\tif !ok \u0026\u0026 err \u003d\u003d nil {\n\t\t\tt.Fatal(\"missing error\")\n\t\t}\n\t}\n\n\ttest(\n\t\t`package a; type S struct{}; func (S) M(struct{int}) {}`,\n\t\t`package b; import \"a\"; type I interface{ M(struct{int}) }; var _ I \u003d a.S{}`,\n\t\tfalse,\n\t)\n\n\ttest(\n\t\t`package a; type S struct{}; func (S) M(struct{F int}) {}`,\n\t\t`package b; import \"a\"; type I interface{ M(struct{F int}) }; var _ I \u003d a.S{}`,\n\t\ttrue,\n\t)\n}\n```",
      "revId": "f5369bfc8e68db4ed66f56d216db4aac78d049d8",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0d7b9afe_d793ed32",
        "filename": "src/cmd/compile/internal/types2/typestring.go",
        "patchSetId": 7
      },
      "lineNbr": 162,
      "author": {
        "id": 7392
      },
      "writtenOn": "2022-11-18T00:20:51Z",
      "side": 1,
      "message": "But basic types are always \"exported\" - also they are always the same. What am I missing? Do you have concrete example?",
      "revId": "f5369bfc8e68db4ed66f56d216db4aac78d049d8",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5ad8d0bc_abcf0d51",
        "filename": "src/cmd/compile/internal/types2/typestring.go",
        "patchSetId": 7
      },
      "lineNbr": 162,
      "author": {
        "id": 7061
      },
      "writtenOn": "2022-11-18T01:33:56Z",
      "side": 1,
      "message": "If basic types are always exported, what\u0027s going on in the test?  Running it with tip, I see:\n\nmain.go:19:12: cannot use b.S{} (value of type b.S) as I1 value in variable declaration: b.S does not implement I1 (wrong type for method M1)\n\t\thave M1() (struct{string})\n\t\twant M1() (struct{string})\n\ni.e., it is an embedding, with the basic type string.  I thought this was a little unfortunate when I saw it, but figured that maybe that was just the rules.",
      "parentUuid": "0d7b9afe_d793ed32",
      "revId": "f5369bfc8e68db4ed66f56d216db4aac78d049d8",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "25bc2ac5_ac6ef413",
        "filename": "src/cmd/compile/internal/types2/typestring.go",
        "patchSetId": 7
      },
      "lineNbr": 162,
      "author": {
        "id": 7392
      },
      "writtenOn": "2022-11-18T05:03:11Z",
      "side": 1,
      "message": "Per the rules for type identity in the spec:\n\nTwo struct types are identical if they have the same sequence of fields, and if corresponding fields have the same names, and identical types, and identical tags. Non-exported field names from different packages are always different.\n\nWhen you have embedded basic types, the corresponding field names are the type names. They are lower-case and therefore not exported. So what happens here is that you have two structs with a field name \"string\" (of type string). Those are non-exported fields names from different packages and therefore different.\n\nIt\u0027s the field names that are different not the types. So I think the logic needs some more work here.",
      "parentUuid": "5ad8d0bc_abcf0d51",
      "revId": "f5369bfc8e68db4ed66f56d216db4aac78d049d8",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "73022479_e97127af",
        "filename": "src/cmd/compile/internal/types2/typestring.go",
        "patchSetId": 7
      },
      "lineNbr": 162,
      "author": {
        "id": 7061
      },
      "writtenOn": "2022-11-18T13:47:31Z",
      "side": 1,
      "message": "I am not sure how the logic would change.  The only reason to be here, to package annotate the type/field, is if two different types print identically in an error message.  The logic detects struct fields that will trigger that incompatibility across packages.  Embedding a (lower-case-named) basic type will do that.  So I think this is okay.  I could certainly add a comment, this truly meets the confusion-in-CL-review threshold.  Or do you think it needs a different/better error message?  Could use a string instead of a boolean:\n\n/* embedded \u003ctn\u003e uses lower case type name for field name and is not exported. */\n\nor\n\n/* embedded, unexported */\n\nas shorthand.  Enough to get them to search, or to ask a question we\u0027ll recognize immediately.  I\u0027d honestly go for the long one; that answers the question, it won\u0027t happen that often even if it does wrap in their terminal window.",
      "parentUuid": "25bc2ac5_ac6ef413",
      "revId": "f5369bfc8e68db4ed66f56d216db4aac78d049d8",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b44759e_7daa59d2",
        "filename": "test/fixedbugs/issue54258.dir/b.go",
        "patchSetId": 7
      },
      "lineNbr": 9,
      "author": {
        "id": 7392
      },
      "writtenOn": "2022-11-18T05:03:11Z",
      "side": 1,
      "message": "btw., if you change these signatures so that the types are arguments rather than results, you don\u0027t need the _ or the return:\n\nfunc (S) M1(struct{ string }) {}\n\nand you can make all these functions one-liners.",
      "range": {
        "startLine": 9,
        "startChar": 17,
        "endLine": 9,
        "endChar": 23
      },
      "revId": "f5369bfc8e68db4ed66f56d216db4aac78d049d8",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "16fc0485_19032b77",
        "filename": "test/fixedbugs/issue54258.dir/main.go",
        "patchSetId": 7
      },
      "lineNbr": 31,
      "author": {
        "id": 7392
      },
      "writtenOn": "2022-11-18T00:20:51Z",
      "side": 1,
      "message": "can you add a case with embedding, perhaps with a pointer",
      "revId": "f5369bfc8e68db4ed66f56d216db4aac78d049d8",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "85095c94_e0b53b1b",
        "filename": "test/fixedbugs/issue54258.dir/main.go",
        "patchSetId": 7
      },
      "lineNbr": 31,
      "author": {
        "id": 7061
      },
      "writtenOn": "2022-11-18T01:33:56Z",
      "side": 1,
      "message": "will do.",
      "parentUuid": "16fc0485_19032b77",
      "revId": "f5369bfc8e68db4ed66f56d216db4aac78d049d8",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}