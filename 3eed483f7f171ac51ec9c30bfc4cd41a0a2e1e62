{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "87f0f4b5_6475e8aa",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 34636
      },
      "writtenOn": "2022-02-07T17:59:36Z",
      "side": 1,
      "message": "Hi, I\u0027d appreciate it if someone could rerun the robots on this version. I am unaware of any functional problem with it, but would mostly like to confirm that moving a function from proc.go to os_linux.go doesn\u0027t have some consequence for non-Linux OSes.",
      "revId": "3eed483f7f171ac51ec9c30bfc4cd41a0a2e1e62",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "665b539f_bc437c35",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-02-07T18:02:50Z",
      "side": 1,
      "message": "SlowBots beginning. Status page: https://farmer.golang.org/try?commit\u003d3eed483f",
      "tag": "autogenerated:trybots~beginning",
      "revId": "3eed483f7f171ac51ec9c30bfc4cd41a0a2e1e62",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f36e78f6_309fcc66",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-02-07T18:16:30Z",
      "side": 1,
      "message": "SlowBots are happy.\n\nSlowBot builds that ran:\n* linux-amd64-nocgo\n",
      "parentUuid": "665b539f_bc437c35",
      "tag": "autogenerated:trybots~happy",
      "revId": "3eed483f7f171ac51ec9c30bfc4cd41a0a2e1e62",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5d341dd1_dd163844",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 34636
      },
      "writtenOn": "2022-02-07T22:38:41Z",
      "side": 1,
      "message": "Thanks.",
      "revId": "3eed483f7f171ac51ec9c30bfc4cd41a0a2e1e62",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "71bd1797_cb53e25a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 12120
      },
      "writtenOn": "2022-02-08T20:13:32Z",
      "side": 1,
      "message": "I\u0027d appreciate a review of CL 383434 as well. I originally intended this as a 1.19 follow-up to simplify things, but given the complexity of this CL, I\u0027m slowly leaning towards using that for the backport instead.",
      "revId": "3eed483f7f171ac51ec9c30bfc4cd41a0a2e1e62",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ffe79a50_020a6cfb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 34636
      },
      "writtenOn": "2022-02-08T23:55:01Z",
      "side": 1,
      "message": "I\u0027ve tried to add a test for every issue we\u0027ve found and fixed with the current implementation, so adding the one we have in this present patch (which your re-implementation does include), should cover all the known corner cases.\n\nI\u0027m not sure how I feel about back-porting such a large change though. At the end of the day, I\u0027m not an owner of the runtime, so I will defer to the rest of you for that judgement call!",
      "parentUuid": "71bd1797_cb53e25a",
      "revId": "3eed483f7f171ac51ec9c30bfc4cd41a0a2e1e62",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "63a803a2_5972613f",
        "filename": "src/runtime/proc.go",
        "patchSetId": 7
      },
      "lineNbr": 2278,
      "author": {
        "id": 5167
      },
      "writtenOn": "2022-02-07T20:47:43Z",
      "side": 1,
      "message": "I would really rather we not do this, but if we have to, it definitely needs a comment explaining why this loop is necessary.",
      "revId": "3eed483f7f171ac51ec9c30bfc4cd41a0a2e1e62",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cd9cac4c_8c8a71b5",
        "filename": "src/runtime/proc.go",
        "patchSetId": 7
      },
      "lineNbr": 2278,
      "author": {
        "id": 34636
      },
      "writtenOn": "2022-02-07T22:38:41Z",
      "side": 1,
      "message": "I\u0027ve been unable to think of a simpler way to achieve the same protection. I\u0027ll think some more or add such a comment.",
      "parentUuid": "63a803a2_5972613f",
      "revId": "3eed483f7f171ac51ec9c30bfc4cd41a0a2e1e62",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3f2625e5_554c98c7",
        "filename": "src/runtime/proc.go",
        "patchSetId": 7
      },
      "lineNbr": 3294,
      "author": {
        "id": 5167
      },
      "writtenOn": "2022-02-07T20:47:43Z",
      "side": 1,
      "message": "We need to find a different way to do this. This adds at least two system calls on every single goroutine switch (which currently involves none).",
      "revId": "3eed483f7f171ac51ec9c30bfc4cd41a0a2e1e62",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9dd78e9f_e86cf49f",
        "filename": "src/runtime/proc.go",
        "patchSetId": 7
      },
      "lineNbr": 3294,
      "author": {
        "id": 34636
      },
      "writtenOn": "2022-02-07T22:38:41Z",
      "side": 1,
      "message": "Micheal pointed out that there is a race associated with using `mp.curg !\u003d nil`, and this was a way to eliminate it. I\u0027m not convinced the race has consequences. I\u0027m happy to remove this part of the change if Michael agrees it isn\u0027t needed.\n\nThe reason for the `sigblock()` is that if we introduce a `lock()` here, we have to be sure that nothing in the signal handling path attempts to grab that same lock - but the fixup function execution does grab that lock so handling an interrupt would deadlock if we didn\u0027t block signals here.",
      "parentUuid": "3f2625e5_554c98c7",
      "revId": "3eed483f7f171ac51ec9c30bfc4cd41a0a2e1e62",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a2b38a4e_4da941a9",
        "filename": "src/runtime/proc.go",
        "patchSetId": 7
      },
      "lineNbr": 3294,
      "author": {
        "id": 12120
      },
      "writtenOn": "2022-02-08T20:13:32Z",
      "side": 1,
      "message": "\u003e I\u0027m not convinced the race has consequences.\n\nI\u0027m not either, I think we should drop this in favor of keeping the race, which I don\u0027t love but haven\u0027t thought of a bad condition.",
      "parentUuid": "9dd78e9f_e86cf49f",
      "revId": "3eed483f7f171ac51ec9c30bfc4cd41a0a2e1e62",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f40252ba_bdab4437",
        "filename": "src/runtime/proc.go",
        "patchSetId": 7
      },
      "lineNbr": 3294,
      "author": {
        "id": 34636
      },
      "writtenOn": "2022-02-08T23:55:01Z",
      "side": 1,
      "message": "I\u0027m still exploring ways to simplify the other part, but I\u0027ll plan to drop this part of the change if no reason surfaces to need to keep it.",
      "parentUuid": "a2b38a4e_4da941a9",
      "revId": "3eed483f7f171ac51ec9c30bfc4cd41a0a2e1e62",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}