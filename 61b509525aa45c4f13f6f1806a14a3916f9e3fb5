{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "3f63446b_96009b19",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 54979
      },
      "writtenOn": "2022-06-13T15:55:39Z",
      "side": 1,
      "message": "Seems it\u0027s complicated to emit `GoEnd` event for locked g in extra M, in `reentersyscall`.\nI\u0027m still working on it. Suggestions are also welcome, Thanks!",
      "revId": "61b509525aa45c4f13f6f1806a14a3916f9e3fb5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "12afb5c1_102d912a",
        "filename": "src/runtime/cgocall.go",
        "patchSetId": 4
      },
      "lineNbr": 228,
      "author": {
        "id": 12120
      },
      "writtenOn": "2022-06-13T16:37:19Z",
      "side": 1,
      "message": "Just thinking out loud here, I wonder if it may simplify some of the somewhat duplicated logic in exitsyscall and reentersyscall to pull the tracing logic up into cgocallbackg and simply skip tracing entirely inside of exitsyscall / reentersyscall for this case (pass a cgocallback bool to these functions to let them know?).\n\nI\u0027m not sure if this is better or not, just trying to think of ways to keep this easier to follow.",
      "revId": "61b509525aa45c4f13f6f1806a14a3916f9e3fb5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "020a1b9a_b6f9e5d6",
        "filename": "src/runtime/cgocall.go",
        "patchSetId": 4
      },
      "lineNbr": 231,
      "author": {
        "id": 54979
      },
      "writtenOn": "2022-06-12T15:53:50Z",
      "side": 1,
      "message": "note: this field may also be useful in this CL: https://go-review.googlesource.com/c/go/+/392854/13/src/runtime/cgocall.go",
      "revId": "61b509525aa45c4f13f6f1806a14a3916f9e3fb5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bad6e705_2e81a359",
        "filename": "src/runtime/proc.go",
        "patchSetId": 4
      },
      "lineNbr": 2513,
      "author": {
        "id": 12120
      },
      "writtenOn": "2022-06-13T16:37:19Z",
      "side": 1,
      "message": "Can this be gp.m.ncgo? Do we need two different cgo counters?",
      "range": {
        "startLine": 2513,
        "startChar": 26,
        "endLine": 2513,
        "endChar": 34
      },
      "revId": "61b509525aa45c4f13f6f1806a14a3916f9e3fb5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4336a06d_351a12a2",
        "filename": "src/runtime/proc.go",
        "patchSetId": 4
      },
      "lineNbr": 2513,
      "author": {
        "id": 12120
      },
      "writtenOn": "2022-06-13T16:37:19Z",
      "side": 1,
      "message": "A cgo callback goroutine can be stopped (e.g., during STW in GC). On resume, it will go through execute() again. Won\u0027t that create a duplicate GoCreate event?\n\nI think we might need a settable flag. e.g., needm sets mp.needExtraTrace to true, and execute / exitsyscall sets it back to false after emitting the trace events.",
      "revId": "61b509525aa45c4f13f6f1806a14a3916f9e3fb5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "43bddb29_90acadb4",
        "filename": "src/runtime/proc.go",
        "patchSetId": 4
      },
      "lineNbr": 3619,
      "author": {
        "id": 54979
      },
      "writtenOn": "2022-06-13T15:55:39Z",
      "side": 1,
      "message": "Sorry, I found another failed case. We can not emit `GoEnd` here, since the `GoEnd` event does not have a goroutine id argument, and there may emit other goroutine events before here.",
      "revId": "61b509525aa45c4f13f6f1806a14a3916f9e3fb5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2e695aeb_564bf473",
        "filename": "src/runtime/proc.go",
        "patchSetId": 4
      },
      "lineNbr": 3652,
      "author": {
        "id": 12120
      },
      "writtenOn": "2022-06-13T16:37:19Z",
      "side": 1,
      "message": "Hm, this has potential performance implications (positive or negative). I need to think more.",
      "revId": "61b509525aa45c4f13f6f1806a14a3916f9e3fb5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}