{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "d6433f10_f523516a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-07-23T05:25:19Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003d8293f8af",
      "tag": "autogenerated:trybots~beginning",
      "revId": "8293f8affcf8d3757ff20fd82df6cb9d070f3b9c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "98b36630_bf79e473",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5210
      },
      "writtenOn": "2021-07-23T05:30:01Z",
      "side": 1,
      "message": "I moved the spec change to the dev.typeparams branch for now.\n\nThe sections on type inference are new (and complicated) and could benefit from additional pairs of eyes. Thanks.",
      "revId": "8293f8affcf8d3757ff20fd82df6cb9d070f3b9c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "50dc4ab3_8139e904",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-07-23T05:33:24Z",
      "side": 1,
      "message": "Build is still in progress... Status page: https://farmer.golang.org/try?commit\u003d8293f8af\nFailed on linux-amd64: https://storage.googleapis.com/go-build-log/8293f8af/linux-amd64_ec0f7e72.log\nOther builds still in progress; subsequent failure notices suppressed until final report.\n\nConsult https://build.golang.org/ to see whether they are new failures. Keep in mind that TryBots currently test *exactly* your git commit, without rebasing. If your commit\u0027s git parent is old, the failure might\u0027ve already been fixed.\n",
      "parentUuid": "d6433f10_f523516a",
      "tag": "autogenerated:trybots~progress",
      "revId": "8293f8affcf8d3757ff20fd82df6cb9d070f3b9c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4cce6055_053ec2ee",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-07-23T05:38:20Z",
      "side": 1,
      "message": "5 of 25 TryBots failed.\nFailed on linux-amd64: https://storage.googleapis.com/go-build-log/8293f8af/linux-amd64_ec0f7e72.log\nFailed on linux-arm64-aws: https://storage.googleapis.com/go-build-log/8293f8af/linux-arm64-aws_d85350b2.log\nFailed on js-wasm: https://storage.googleapis.com/go-build-log/8293f8af/js-wasm_f7eacba6.log\nFailed on linux-arm-aws: https://storage.googleapis.com/go-build-log/8293f8af/linux-arm-aws_ca3eda7e.log\nFailed on linux-amd64-unified: https://storage.googleapis.com/go-build-log/8293f8af/linux-amd64-unified_10ce2c2c.log\n\nConsult https://build.golang.org/ to see whether they are new failures. Keep in mind that TryBots currently test *exactly* your git commit, without rebasing. If your commit\u0027s git parent is old, the failure might\u0027ve already been fixed.\n\n",
      "parentUuid": "d6433f10_f523516a",
      "tag": "autogenerated:trybots~failed",
      "revId": "8293f8affcf8d3757ff20fd82df6cb9d070f3b9c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bd318274_00f82fcb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 28783
      },
      "writtenOn": "2021-07-23T22:42:51Z",
      "side": 1,
      "message": "I\u0027m not sure if you might have missed my comments on the old CL (just made them a day ago), so I\u0027m adding to the new CL.  I am still working my way through the spec, so may have more comments later.",
      "revId": "8293f8affcf8d3757ff20fd82df6cb9d070f3b9c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6db34c68_de084c48",
        "filename": "doc/go_spec.html",
        "patchSetId": 1
      },
      "lineNbr": 805,
      "author": {
        "id": 28783
      },
      "writtenOn": "2021-07-23T22:42:51Z",
      "side": 1,
      "message": "Is it worth promoting the definition of TypeList to here, since it is recursively defined with \u0027Type\u0027 and \u0027TypeArgs\u0027 and important for generics?  With generics, seems weird for it to be first defined thousands of lines below with the typeswitch case definitions.",
      "revId": "8293f8affcf8d3757ff20fd82df6cb9d070f3b9c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0d5bbb51_ec472c20",
        "filename": "doc/go_spec.html",
        "patchSetId": 1
      },
      "lineNbr": 1129,
      "author": {
        "id": 28783
      },
      "writtenOn": "2021-07-23T22:42:51Z",
      "side": 1,
      "message": "For the pointer case, shouldn\u0027t it also be a non-type-parameter type name (as well as being a non-interface).\n\n\u0027An embedded field name must be specified as a non-type parameter type name\u0027 doesn\u0027t read well.  non-type should make sense as a word by itself, but it doesn\u0027t really. I don\u0027t think you want to do \u0027non-type-parameter\u0027 either.  Maybe rephrase as:\n\n\u0027An embedded field name must be specified as a type name which is not a type parameter.\u0027",
      "revId": "8293f8affcf8d3757ff20fd82df6cb9d070f3b9c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8614334a_e1c5f6f6",
        "filename": "doc/go_spec.html",
        "patchSetId": 1
      },
      "lineNbr": 1700,
      "author": {
        "id": 28783
      },
      "writtenOn": "2021-07-23T22:42:51Z",
      "side": 1,
      "message": "missing an \u0027a\u0027?  -\u003e \u0027all types in a constraint interface\u0027s type set\u0027 ?\n\nAlso, I don\u0027t generally understand this sentence, and why you are specifically stating the types you listed.  Don\u0027t you at least want to say something more general as well, that any operator/operation that is implemented by all types in the type set is allowed for the typeparam in the generic function/method?",
      "revId": "8293f8affcf8d3757ff20fd82df6cb9d070f3b9c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}