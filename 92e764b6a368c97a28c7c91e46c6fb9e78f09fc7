{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "a996eaf8_d00eaa44",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 18
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-06-21T22:22:21Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003d92e764b6",
      "tag": "autogenerated:trybots~beginning",
      "revId": "92e764b6a368c97a28c7c91e46c6fb9e78f09fc7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "067ed1f7_8d019dd7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 18
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-06-21T22:22:21Z",
      "side": 1,
      "message": "Superseded.",
      "parentUuid": "fc9a6a5e_4d05824d",
      "tag": "autogenerated:trybots~beginning",
      "revId": "92e764b6a368c97a28c7c91e46c6fb9e78f09fc7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8c117d9f_7d720b69",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 18
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-06-21T22:46:10Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "a996eaf8_d00eaa44",
      "tag": "autogenerated:trybots~happy",
      "revId": "92e764b6a368c97a28c7c91e46c6fb9e78f09fc7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a68386e9_0056cfa3",
        "filename": "src/cmd/go/internal/modcmd/download.go",
        "patchSetId": 18
      },
      "lineNbr": 97,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-06-30T22:01:02Z",
      "side": 1,
      "message": "panic(modload.TODOWorkspaces(…))?",
      "revId": "92e764b6a368c97a28c7c91e46c6fb9e78f09fc7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e178896b_c138af0b",
        "filename": "src/cmd/go/internal/modcmd/download.go",
        "patchSetId": 18
      },
      "lineNbr": 97,
      "author": {
        "id": 10033
      },
      "writtenOn": "2021-07-07T23:42:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a68386e9_0056cfa3",
      "revId": "92e764b6a368c97a28c7c91e46c6fb9e78f09fc7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d2cd1371_1f3220e4",
        "filename": "src/cmd/go/internal/modget/get.go",
        "patchSetId": 18
      },
      "lineNbr": 393,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-06-30T22:01:02Z",
      "side": 1,
      "message": "Contains?",
      "range": {
        "startLine": 393,
        "startChar": 7,
        "endLine": 393,
        "endChar": 73
      },
      "revId": "92e764b6a368c97a28c7c91e46c6fb9e78f09fc7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "79d66671_36150795",
        "filename": "src/cmd/go/internal/modget/get.go",
        "patchSetId": 18
      },
      "lineNbr": 393,
      "author": {
        "id": 10033
      },
      "writtenOn": "2021-07-07T23:42:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d2cd1371_1f3220e4",
      "range": {
        "startLine": 393,
        "startChar": 7,
        "endLine": 393,
        "endChar": 73
      },
      "revId": "92e764b6a368c97a28c7c91e46c6fb9e78f09fc7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "641483d4_8f27b6b3",
        "filename": "src/cmd/go/internal/modget/get.go",
        "patchSetId": 18
      },
      "lineNbr": 744,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-06-30T22:01:02Z",
      "side": 1,
      "message": "The existing comment for pkgMods says “only one such module can be in the build list, and all others must be excluded”.\n\nIf we were to start supporting multiple modules in `go get`, I think we would want to match each local pattern only in the module containing the root of that pattern, in which case I think `pkgMods: []module.Version{mainModule}` would more clearly express the correct pathSet.",
      "range": {
        "startLine": 744,
        "startChar": 18,
        "endLine": 744,
        "endChar": 25
      },
      "revId": "92e764b6a368c97a28c7c91e46c6fb9e78f09fc7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b319a61b_f782dffb",
        "filename": "src/cmd/go/internal/modget/get.go",
        "patchSetId": 18
      },
      "lineNbr": 744,
      "author": {
        "id": 10033
      },
      "writtenOn": "2021-07-07T23:42:11Z",
      "side": 1,
      "message": "Done\n\nThe proposal doesn\u0027t currently support multiple modules in go get: https://go.googlesource.com/proposal/+/master/design/45713-workspace.md#proposal-the-flag",
      "parentUuid": "641483d4_8f27b6b3",
      "range": {
        "startLine": 744,
        "startChar": 18,
        "endLine": 744,
        "endChar": 25
      },
      "revId": "92e764b6a368c97a28c7c91e46c6fb9e78f09fc7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "33108b00_da0d5afd",
        "filename": "src/cmd/go/internal/modget/get.go",
        "patchSetId": 18
      },
      "lineNbr": 1781,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-06-30T22:01:02Z",
      "side": 1,
      "message": "Contains?",
      "range": {
        "startLine": 1781,
        "startChar": 5,
        "endLine": 1781,
        "endChar": 62
      },
      "revId": "92e764b6a368c97a28c7c91e46c6fb9e78f09fc7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ff8546c8_b78c5db7",
        "filename": "src/cmd/go/internal/modget/get.go",
        "patchSetId": 18
      },
      "lineNbr": 1781,
      "author": {
        "id": 10033
      },
      "writtenOn": "2021-07-07T23:42:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "33108b00_da0d5afd",
      "range": {
        "startLine": 1781,
        "startChar": 5,
        "endLine": 1781,
        "endChar": 62
      },
      "revId": "92e764b6a368c97a28c7c91e46c6fb9e78f09fc7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1b9c80cf_17effe33",
        "filename": "src/cmd/go/internal/modload/build.go",
        "patchSetId": 18
      },
      "lineNbr": 227,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-06-30T21:42:15Z",
      "side": 1,
      "message": "Should this check be specific to m? (This may be another case where it would help to maintain an invariant that MainModules.Size() \u003d\u003d 0 when there is no main module.)",
      "range": {
        "startLine": 227,
        "startChar": 5,
        "endLine": 227,
        "endChar": 17
      },
      "revId": "92e764b6a368c97a28c7c91e46c6fb9e78f09fc7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d8e28a8b_8f4e4cb6",
        "filename": "src/cmd/go/internal/modload/build.go",
        "patchSetId": 18
      },
      "lineNbr": 227,
      "author": {
        "id": 10033
      },
      "writtenOn": "2021-07-08T00:01:46Z",
      "side": 1,
      "message": "Made it specific to m.",
      "parentUuid": "1b9c80cf_17effe33",
      "range": {
        "startLine": 227,
        "startChar": 5,
        "endLine": 227,
        "endChar": 17
      },
      "revId": "92e764b6a368c97a28c7c91e46c6fb9e78f09fc7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8f9ed09c_ed04184c",
        "filename": "src/cmd/go/internal/modload/buildlist.go",
        "patchSetId": 18
      },
      "lineNbr": 43,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-06-30T19:23:15Z",
      "side": 1,
      "message": "To help reason about changes to the module graph during iteration, I\u0027ve been trying to keep the structure of the Requirements type as close as possible to the structure of the underlying graph.\n\nIn the context of multi-module workspaces, I think that implies either factoring out the `depth`, `rootModules`, and `direct` fields into per-main-module structs, or perhaps having rootModules be identical to MainModules.versions in workspace mode.",
      "range": {
        "startLine": 42,
        "startChar": 19,
        "endLine": 43,
        "endChar": 11
      },
      "revId": "92e764b6a368c97a28c7c91e46c6fb9e78f09fc7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ec93e1b9_f0089f43",
        "filename": "src/cmd/go/internal/modload/buildlist.go",
        "patchSetId": 18
      },
      "lineNbr": 274,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-06-30T19:23:15Z",
      "side": 1,
      "message": "This doesn\u0027t look right to me. Each main module should require only the dependencies listed in its own go.mod file — otherwise `go mod graph` will be very misleading, and I think we\u0027ll end up leaning on `go mod graph` fairly heavily for debugging in workspace mode.",
      "range": {
        "startLine": 273,
        "startChar": 0,
        "endLine": 274,
        "endChar": 60
      },
      "revId": "92e764b6a368c97a28c7c91e46c6fb9e78f09fc7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "056e7390_7a4d67b4",
        "filename": "src/cmd/go/internal/modload/buildlist.go",
        "patchSetId": 18
      },
      "lineNbr": 528,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-06-30T19:23:15Z",
      "side": 1,
      "message": "Actually, this brings up an interesting question, I think.\n\nIf the user runs `go mod tidy` in workspace mode, and the packages missing in the current module are provided at a specific version by some *other* module in the workspace, should we add that version, or resolve an entirely new one?\n\nI think perhaps we should add the version required by the other module, because that is the version the user is already building and testing against.\n\nIf so, that implies that we need two different pieces of information:\n• Which modules are in the workspace?\n• Which of those modules (if any) is “the main module”?\n\nThen, `go mod tidy` would consist of:\n\n1. Load the module requirements of the entire workspace.\n2. Load the transitive closure of packages imported by the (singular) main module, resolving any missing dependencies by adding requirements to the module graph.\n3. Update the requirements for the main module (only) by preserving the versions for packages in (2). If we need to iterate,¹ iterate by reloading the full workspace graph (not just the main module\u0027s requirement graph) until the roots of the main module converge.\n\n\n¹https://github.com/golang/go/blob/c080d0323bce56e25622a51dffecf756758c95a1/src/cmd/go/internal/modload/load.go#L1244-L1285",
      "range": {
        "startLine": 525,
        "startChar": 0,
        "endLine": 528,
        "endChar": 40
      },
      "revId": "92e764b6a368c97a28c7c91e46c6fb9e78f09fc7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0bc9094c_479569c8",
        "filename": "src/cmd/go/internal/modload/edit.go",
        "patchSetId": 18
      },
      "lineNbr": 78,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-06-30T21:42:15Z",
      "side": 1,
      "message": "Contains?",
      "range": {
        "startLine": 78,
        "startChar": 6,
        "endLine": 78,
        "endChar": 55
      },
      "revId": "92e764b6a368c97a28c7c91e46c6fb9e78f09fc7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "348c2d37_4e570236",
        "filename": "src/cmd/go/internal/modload/edit.go",
        "patchSetId": 18
      },
      "lineNbr": 78,
      "author": {
        "id": 10033
      },
      "writtenOn": "2021-07-07T23:26:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0bc9094c_479569c8",
      "range": {
        "startLine": 78,
        "startChar": 6,
        "endLine": 78,
        "endChar": 55
      },
      "revId": "92e764b6a368c97a28c7c91e46c6fb9e78f09fc7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "88414854_abad7985",
        "filename": "src/cmd/go/internal/modload/edit.go",
        "patchSetId": 18
      },
      "lineNbr": 221,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-06-30T21:42:15Z",
      "side": 1,
      "message": "Contains?",
      "range": {
        "startLine": 221,
        "startChar": 6,
        "endLine": 221,
        "endChar": 54
      },
      "revId": "92e764b6a368c97a28c7c91e46c6fb9e78f09fc7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d820461d_2691ba4b",
        "filename": "src/cmd/go/internal/modload/edit.go",
        "patchSetId": 18
      },
      "lineNbr": 221,
      "author": {
        "id": 10033
      },
      "writtenOn": "2021-07-07T23:26:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "88414854_abad7985",
      "range": {
        "startLine": 221,
        "startChar": 6,
        "endLine": 221,
        "endChar": 54
      },
      "revId": "92e764b6a368c97a28c7c91e46c6fb9e78f09fc7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cc764082_26a87cde",
        "filename": "src/cmd/go/internal/modload/edit.go",
        "patchSetId": 18
      },
      "lineNbr": 321,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-06-30T21:42:15Z",
      "side": 1,
      "message": "v !\u003d \"none\" \u0026\u0026 !MainModules.Contains(Target.Path)",
      "range": {
        "startLine": 321,
        "startChar": 5,
        "endLine": 321,
        "endChar": 67
      },
      "revId": "92e764b6a368c97a28c7c91e46c6fb9e78f09fc7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ff157676_c041139e",
        "filename": "src/cmd/go/internal/modload/edit.go",
        "patchSetId": 18
      },
      "lineNbr": 321,
      "author": {
        "id": 10033
      },
      "writtenOn": "2021-07-07T23:26:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cc764082_26a87cde",
      "range": {
        "startLine": 321,
        "startChar": 5,
        "endLine": 321,
        "endChar": 67
      },
      "revId": "92e764b6a368c97a28c7c91e46c6fb9e78f09fc7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0c9e3b09_248c9db9",
        "filename": "src/cmd/go/internal/modload/edit.go",
        "patchSetId": 18
      },
      "lineNbr": 337,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-06-30T21:42:15Z",
      "side": 1,
      "message": "!MainModules.Contains(path)",
      "revId": "92e764b6a368c97a28c7c91e46c6fb9e78f09fc7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "893363b4_0a70751f",
        "filename": "src/cmd/go/internal/modload/edit.go",
        "patchSetId": 18
      },
      "lineNbr": 337,
      "author": {
        "id": 10033
      },
      "writtenOn": "2021-07-07T23:26:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0c9e3b09_248c9db9",
      "revId": "92e764b6a368c97a28c7c91e46c6fb9e78f09fc7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b53d61b3_def9aa00",
        "filename": "src/cmd/go/internal/modload/edit.go",
        "patchSetId": 18
      },
      "lineNbr": 501,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-06-30T21:42:15Z",
      "side": 1,
      "message": "AFAICT editRequirements would need a lot more work to handle workspace mode — I think we would need to edit each target module individually?\n\nBut in that case, I think the reasoning here would change: the versionLimiter would be limiting the dependencies of a specific target module (whose dependencies would still be tautological). The other main modules would still be skipped — not because their dependencies are tautological, but because those versions of those modules don\u0027t exist at all outside of the workspace.",
      "range": {
        "startLine": 500,
        "startChar": 0,
        "endLine": 501,
        "endChar": 18
      },
      "revId": "92e764b6a368c97a28c7c91e46c6fb9e78f09fc7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2e086ba0_dbbb6093",
        "filename": "src/cmd/go/internal/modload/init.go",
        "patchSetId": 18
      },
      "lineNbr": 55,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-06-30T19:23:15Z",
      "side": 1,
      "message": "Clarify that `modRoots !\u003d nil` implies `len(modRoots) \u003e 0`, or switch from `modRoots !\u003d nil` to `len(modRoots) \u003e 0` throughout.",
      "revId": "92e764b6a368c97a28c7c91e46c6fb9e78f09fc7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "938e5a93_74b6c860",
        "filename": "src/cmd/go/internal/modload/init.go",
        "patchSetId": 18
      },
      "lineNbr": 55,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-06-30T19:23:15Z",
      "side": 1,
      "message": "I\u0027m not sure exactly what this TODO means; could you clarify?\n\n(Does this mean to move users of this variable over to the MainModules variable instead?)",
      "range": {
        "startLine": 55,
        "startChar": 71,
        "endLine": 55,
        "endChar": 104
      },
      "revId": "92e764b6a368c97a28c7c91e46c6fb9e78f09fc7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1afd284f_c0f6f06e",
        "filename": "src/cmd/go/internal/modload/init.go",
        "patchSetId": 18
      },
      "lineNbr": 55,
      "author": {
        "id": 10033
      },
      "writtenOn": "2021-07-07T20:23:17Z",
      "side": 1,
      "message": "Yes, pretty much. updated comment",
      "parentUuid": "938e5a93_74b6c860",
      "range": {
        "startLine": 55,
        "startChar": 71,
        "endLine": 55,
        "endChar": 104
      },
      "revId": "92e764b6a368c97a28c7c91e46c6fb9e78f09fc7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2751b39d_b9c7337c",
        "filename": "src/cmd/go/internal/modload/init.go",
        "patchSetId": 18
      },
      "lineNbr": 55,
      "author": {
        "id": 10033
      },
      "writtenOn": "2021-07-08T00:01:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2e086ba0_dbbb6093",
      "revId": "92e764b6a368c97a28c7c91e46c6fb9e78f09fc7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a283a77c_656b779d",
        "filename": "src/cmd/go/internal/modload/init.go",
        "patchSetId": 18
      },
      "lineNbr": 55,
      "author": {
        "id": 10033
      },
      "writtenOn": "2021-07-08T00:04:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2e086ba0_dbbb6093",
      "revId": "92e764b6a368c97a28c7c91e46c6fb9e78f09fc7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "65b37ee4_84ee585f",
        "filename": "src/cmd/go/internal/modload/init.go",
        "patchSetId": 18
      },
      "lineNbr": 60,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-06-30T19:23:15Z",
      "side": 1,
      "message": "A comment for this field would be helpful.\n\nAre the paths ordinary module paths, or filesystem paths like in replace directives? Are the versions real versions, or empty strings, or some mix of the two?\n\nAre the paths unique, or can there be duplicate paths with different versions?",
      "revId": "92e764b6a368c97a28c7c91e46c6fb9e78f09fc7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "048280d9_6810e962",
        "filename": "src/cmd/go/internal/modload/init.go",
        "patchSetId": 18
      },
      "lineNbr": 60,
      "author": {
        "id": 10033
      },
      "writtenOn": "2021-07-07T20:23:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "65b37ee4_84ee585f",
      "revId": "92e764b6a368c97a28c7c91e46c6fb9e78f09fc7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0d289c29_8d9c64ab",
        "filename": "src/cmd/go/internal/modload/init.go",
        "patchSetId": 18
      },
      "lineNbr": 62,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-06-30T19:23:15Z",
      "side": 1,
      "message": "Please add a comment. (Without reading further, I assume this maps each module in versions to its absolute filesystem path?)",
      "revId": "92e764b6a368c97a28c7c91e46c6fb9e78f09fc7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "744d6279_7f998f63",
        "filename": "src/cmd/go/internal/modload/init.go",
        "patchSetId": 18
      },
      "lineNbr": 62,
      "author": {
        "id": 10033
      },
      "writtenOn": "2021-07-07T20:23:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0d289c29_8d9c64ab",
      "revId": "92e764b6a368c97a28c7c91e46c6fb9e78f09fc7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "febb3433_50ddf97c",
        "filename": "src/cmd/go/internal/modload/init.go",
        "patchSetId": 18
      },
      "lineNbr": 72,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-06-30T19:23:15Z",
      "side": 1,
      "message": "This seems like a lot of parallel data indexed by module.Version. Would it make sense to instead structure this data as a single map with struct (or pointer-to-struct) values?\n\nIs it important to retain the original order of the modules? If not, perhaps this whole type can be collapsed to a map:\n\n\ttype MainModule struct {\n\t\tPath string   // if we use a map, is this actually needed?\n\t\tPrefix string   // normally equal to Path, but empty for the \"std\" module in GOROOT/src\n\t\tRoot string   // absolute filesystem path\n\t\tInGorootSrc bool  // is this module within GOROOT/src? The \"std\" module is special there but not otherwise.\n\t\t\n\t\t// Will we also need a per-module *modfile.File and *modFileIndex, or do those only matter if we\u0027re making a change to a single module?\n\t}\n\n\t// MainModules maps the module path for each main module to information about that module.\n\tvar MainModules map[string]*MainModule\n\t\nOr, if we want to preserve flexibility (and/or maintain a consistent order of module paths, instead of relying on nondeterministic map iteration), perhaps keep it wrapped in a struct but with one internal map instead of many.",
      "range": {
        "startLine": 69,
        "startChar": 0,
        "endLine": 72,
        "endChar": 0
      },
      "revId": "92e764b6a368c97a28c7c91e46c6fb9e78f09fc7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6fe111ac_9cd6b6eb",
        "filename": "src/cmd/go/internal/modload/init.go",
        "patchSetId": 18
      },
      "lineNbr": 83,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-06-30T19:23:15Z",
      "side": 1,
      "message": "This seems allocation-heavy for something I expect most callers won\u0027t mutate.\n\nWould it make sense to instead maintain an invariant that the versions slice has cap \u003d\u003d length (so that it is safe to append to) and return it directly, with a requirement that callers not modify the returned slice?",
      "range": {
        "startLine": 79,
        "startChar": 0,
        "endLine": 83,
        "endChar": 10
      },
      "revId": "92e764b6a368c97a28c7c91e46c6fb9e78f09fc7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5229c027_3c48261a",
        "filename": "src/cmd/go/internal/modload/init.go",
        "patchSetId": 18
      },
      "lineNbr": 83,
      "author": {
        "id": 10033
      },
      "writtenOn": "2021-07-07T20:23:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6fe111ac_9cd6b6eb",
      "range": {
        "startLine": 79,
        "startChar": 0,
        "endLine": 83,
        "endChar": 10
      },
      "revId": "92e764b6a368c97a28c7c91e46c6fb9e78f09fc7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f94646a8_20d85724",
        "filename": "src/cmd/go/internal/modload/init.go",
        "patchSetId": 18
      },
      "lineNbr": 105,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-06-30T21:42:15Z",
      "side": 1,
      "message": "I\u0027m a little confused by this method. It seems like a version of Contains that also returns `module.Version{Path: path}` if true?\n\nBut I wonder if I\u0027m missing something. Is it possible for mmvs.versions to containing a module.Version with a non-empty Version field? (I was assuming not...)",
      "range": {
        "startLine": 95,
        "startChar": 0,
        "endLine": 105,
        "endChar": 1
      },
      "revId": "92e764b6a368c97a28c7c91e46c6fb9e78f09fc7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8f1896fd_4aff22ca",
        "filename": "src/cmd/go/internal/modload/init.go",
        "patchSetId": 18
      },
      "lineNbr": 105,
      "author": {
        "id": 10033
      },
      "writtenOn": "2021-07-07T23:26:06Z",
      "side": 1,
      "message": "It\u0027s not possible. mms.versions never contains a module.Versions with a non-empty Version field. removed this function.",
      "parentUuid": "f94646a8_20d85724",
      "range": {
        "startLine": 95,
        "startChar": 0,
        "endLine": 105,
        "endChar": 1
      },
      "revId": "92e764b6a368c97a28c7c91e46c6fb9e78f09fc7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d4943d86_e384e7e9",
        "filename": "src/cmd/go/internal/modload/init.go",
        "patchSetId": 18
      },
      "lineNbr": 140,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-06-30T19:23:15Z",
      "side": 1,
      "message": "s/Size/Len/ (since `mainModules` is container-like)",
      "range": {
        "startLine": 140,
        "startChar": 24,
        "endLine": 140,
        "endChar": 28
      },
      "revId": "92e764b6a368c97a28c7c91e46c6fb9e78f09fc7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "52fcdd08_1880a5fa",
        "filename": "src/cmd/go/internal/modload/init.go",
        "patchSetId": 18
      },
      "lineNbr": 140,
      "author": {
        "id": 10033
      },
      "writtenOn": "2021-07-07T20:43:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d4943d86_e384e7e9",
      "range": {
        "startLine": 140,
        "startChar": 24,
        "endLine": 140,
        "endChar": 28
      },
      "revId": "92e764b6a368c97a28c7c91e46c6fb9e78f09fc7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "66dd0eb4_e000b302",
        "filename": "src/cmd/go/internal/modload/init.go",
        "patchSetId": 18
      },
      "lineNbr": 144,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-06-30T19:23:15Z",
      "side": 1,
      "message": "It seems awkward to have an exported variable of unexported type, especially since `go doc` refuses to display documentation for unexported types by default.\n\nCan we instead use a set of names that would allow us to export both? (Perhaps `MainModules` for the variable and `MainModuleSet` for the type?)",
      "range": {
        "startLine": 143,
        "startChar": 0,
        "endLine": 144,
        "endChar": 27
      },
      "revId": "92e764b6a368c97a28c7c91e46c6fb9e78f09fc7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "82e86641_92529aef",
        "filename": "src/cmd/go/internal/modload/init.go",
        "patchSetId": 18
      },
      "lineNbr": 144,
      "author": {
        "id": 10033
      },
      "writtenOn": "2021-07-07T20:43:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "66dd0eb4_e000b302",
      "range": {
        "startLine": 143,
        "startChar": 0,
        "endLine": 144,
        "endChar": 27
      },
      "revId": "92e764b6a368c97a28c7c91e46c6fb9e78f09fc7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a90d94f9_aa5ea17c",
        "filename": "src/cmd/go/internal/modload/init.go",
        "patchSetId": 18
      },
      "lineNbr": 361,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-06-30T19:23:15Z",
      "side": 1,
      "message": "Probably this check should be hoisted into the findModuleRoots function: we should ignore /tmp/go.work and /tmp/go.mod when searching for the roots, but if we find go.work elsewhere and it lists /tmp/go.work explicitly that\u0027s probably allowable.",
      "range": {
        "startLine": 360,
        "startChar": 0,
        "endLine": 361,
        "endChar": 53
      },
      "revId": "92e764b6a368c97a28c7c91e46c6fb9e78f09fc7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b015d79a_e792bf7e",
        "filename": "src/cmd/go/internal/modload/init.go",
        "patchSetId": 18
      },
      "lineNbr": 381,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-06-30T19:23:15Z",
      "side": 1,
      "message": "Don\u0027t update this comment until you address the TODO. (This really does return the singular root of the main module.)",
      "revId": "92e764b6a368c97a28c7c91e46c6fb9e78f09fc7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7ab283fe_f1618268",
        "filename": "src/cmd/go/internal/modload/init.go",
        "patchSetId": 18
      },
      "lineNbr": 381,
      "author": {
        "id": 10033
      },
      "writtenOn": "2021-07-07T20:43:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b015d79a_e792bf7e",
      "revId": "92e764b6a368c97a28c7c91e46c6fb9e78f09fc7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "da0c97b3_a6053ca8",
        "filename": "src/cmd/go/internal/modload/init.go",
        "patchSetId": 18
      },
      "lineNbr": 515,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-06-30T19:23:15Z",
      "side": 1,
      "message": "I\u0027m a bit confused. It looks like we only ever call initTarget with a single main module — how do we know that len(modRoots) \u003d\u003d 1 here?",
      "revId": "92e764b6a368c97a28c7c91e46c6fb9e78f09fc7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "02b744fd_5f623727",
        "filename": "src/cmd/go/internal/modload/init.go",
        "patchSetId": 18
      },
      "lineNbr": 515,
      "author": {
        "id": 10033
      },
      "writtenOn": "2021-07-07T22:06:38Z",
      "side": 1,
      "message": "It\u0027s a bit of a hack: we know that len(modRoots) \u003d\u003d 1 because it\u0027s in effect still 1 everywhere since there\u0027s no way to add more than one main module in this CLs. It gets fixed further up the stack.\n\nAdded a comment saying so.",
      "parentUuid": "da0c97b3_a6053ca8",
      "revId": "92e764b6a368c97a28c7c91e46c6fb9e78f09fc7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "86ae142b_fa6b35ec",
        "filename": "src/cmd/go/internal/modload/init.go",
        "patchSetId": 18
      },
      "lineNbr": 696,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-06-30T19:23:15Z",
      "side": 1,
      "message": "This function seems misnamed now, and it was always a little awkward anyway (since it set multiple global variables).\n\nNow that it populates only a single variable, perhaps move the assignment to the caller side and rename it to be a constructor function?\n\n\tMainModules \u003d makeMainModules(ms, rootDirs)",
      "range": {
        "startLine": 696,
        "startChar": 3,
        "endLine": 696,
        "endChar": 50
      },
      "revId": "92e764b6a368c97a28c7c91e46c6fb9e78f09fc7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3cfe49e1_75dc4c3f",
        "filename": "src/cmd/go/internal/modload/init.go",
        "patchSetId": 18
      },
      "lineNbr": 696,
      "author": {
        "id": 10033
      },
      "writtenOn": "2021-07-07T23:26:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "86ae142b_fa6b35ec",
      "range": {
        "startLine": 696,
        "startChar": 3,
        "endLine": 696,
        "endChar": 50
      },
      "revId": "92e764b6a368c97a28c7c91e46c6fb9e78f09fc7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6a1a4ae4_e6a9f129",
        "filename": "src/cmd/go/internal/modload/init.go",
        "patchSetId": 18
      },
      "lineNbr": 1090,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-06-30T19:23:15Z",
      "side": 1,
      "message": "I wonder if it would be clearer to maintain the invariant that every module within MainModules has a non-empty module root, and MainModules.Size() \u003d\u003d 0 when we are in module mode but not inside any module.\n\nWe might have to update some tests for that, but over the long term I think it will be less confusing than maintaining a degenerate (rootless) \"command-line-arguments\" module.",
      "range": {
        "startLine": 1090,
        "startChar": 4,
        "endLine": 1090,
        "endChar": 81
      },
      "revId": "92e764b6a368c97a28c7c91e46c6fb9e78f09fc7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "45a323d5_333384b4",
        "filename": "src/cmd/go/internal/modload/init.go",
        "patchSetId": 18
      },
      "lineNbr": 1090,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-06-30T19:23:15Z",
      "side": 1,
      "message": "(naming / API)\n\nFrom the name, I would expect MainModules.HasModRoot to report whether any of the main modules has the argument as its module root, but instead it reports whether the named main module has a root.\n\nI think this would be clearer if we factor out a `MainModule` struct as suggested above. Then the call\n\n\tMainModules.HasModRoot(path)\n\ncould be written something like\n\n\tMainModules.Get(path).modRoot !\u003d \"\"\n\nwhich parses a lot more clearly for me.",
      "range": {
        "startLine": 1090,
        "startChar": 32,
        "endLine": 1090,
        "endChar": 81
      },
      "revId": "92e764b6a368c97a28c7c91e46c6fb9e78f09fc7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5b72dcce_328495d5",
        "filename": "src/cmd/go/internal/modload/init.go",
        "patchSetId": 18
      },
      "lineNbr": 1090,
      "author": {
        "id": 10033
      },
      "writtenOn": "2021-07-08T00:01:46Z",
      "side": 1,
      "message": "I think this is a good idea. Added a TODOWorkspaces where we call makeMainModules for command-line-arguments.",
      "parentUuid": "6a1a4ae4_e6a9f129",
      "range": {
        "startLine": 1090,
        "startChar": 4,
        "endLine": 1090,
        "endChar": 81
      },
      "revId": "92e764b6a368c97a28c7c91e46c6fb9e78f09fc7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0b62816b_054facda",
        "filename": "src/cmd/go/internal/modload/init.go",
        "patchSetId": 18
      },
      "lineNbr": 1090,
      "author": {
        "id": 10033
      },
      "writtenOn": "2021-07-08T00:04:56Z",
      "side": 1,
      "message": "Removed HasModRoot.",
      "parentUuid": "45a323d5_333384b4",
      "range": {
        "startLine": 1090,
        "startChar": 32,
        "endLine": 1090,
        "endChar": 81
      },
      "revId": "92e764b6a368c97a28c7c91e46c6fb9e78f09fc7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7d1f0685_e530f423",
        "filename": "src/cmd/go/internal/modload/load.go",
        "patchSetId": 18
      },
      "lineNbr": 531,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-06-30T21:42:15Z",
      "side": 1,
      "message": "I think the return here may be problematic. If there are multiple main modules and one\u0027s filesystem path is a prefix of the other (as in the case of modules nested within a repository), we may return a *PackageNotInModuleError after checking the first module when we should have instead checked the second one.",
      "range": {
        "startLine": 529,
        "startChar": 4,
        "endLine": 531,
        "endChar": 4
      },
      "revId": "92e764b6a368c97a28c7c91e46c6fb9e78f09fc7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0e1bf9d0_a638c89d",
        "filename": "src/cmd/go/internal/modload/load.go",
        "patchSetId": 18
      },
      "lineNbr": 560,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-06-30T21:42:15Z",
      "side": 1,
      "message": "Stray debug log?",
      "revId": "92e764b6a368c97a28c7c91e46c6fb9e78f09fc7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e0eeeb5f_aa6a534f",
        "filename": "src/cmd/go/internal/modload/load.go",
        "patchSetId": 18
      },
      "lineNbr": 560,
      "author": {
        "id": 10033
      },
      "writtenOn": "2021-07-07T23:26:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0e1bf9d0_a638c89d",
      "revId": "92e764b6a368c97a28c7c91e46c6fb9e78f09fc7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b30c2bc9_8a487f87",
        "filename": "src/cmd/go/internal/modload/load.go",
        "patchSetId": 18
      },
      "lineNbr": 670,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-06-30T21:42:15Z",
      "side": 1,
      "message": "FWIW, I think there is an existing bug here: DirImportPath with spuriously report a path for a package within a nested module.\n\nI did some quick testing and couldn\u0027t reproduce a case where that causes a spurious success, but it does lead to some pretty crazy (and confusing) error messages.\n\nMight be worth fixing the bug in a separate (earlier) CL, just to get a more solid baseline.\n\n\n$ go version\ngo version devel go1.17-d19a53338 Wed Jun 30 02:00:49 2021 +0000 linux/amd64\n\n$ go list $(pwd)/binary\nmain module (encoding) does not contain package encoding/binary\n\n-- go.mod --\nmodule encoding\n\ngo 1.17\n-- binary/go.mod --\n-- binary/binary.go --\npackage binary",
      "range": {
        "startLine": 669,
        "startChar": 0,
        "endLine": 670,
        "endChar": 27
      },
      "revId": "92e764b6a368c97a28c7c91e46c6fb9e78f09fc7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "306eb613_3f7024a9",
        "filename": "src/cmd/go/internal/modload/load.go",
        "patchSetId": 18
      },
      "lineNbr": 673,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-06-30T21:42:15Z",
      "side": 1,
      "message": "Sadly, no.\n\nIt\u0027s true today if both modules are in the same repository, but that will no longer hold once #34055 is implemented. But it\u0027s not even true today if the modules happen to come from different repos, merged into one big import-path tree using `go-import` directives.\n\nConsider:\n\n-- m/go.work --\ngo 1.17\ndirectory (\n\t.   // example.com/m\n\t./x // example.com/x\n)\t\n-- m/go.mod --\nmodule example.com/m\n-- m/x/go.mod --\nmodule example.com/x",
      "revId": "92e764b6a368c97a28c7c91e46c6fb9e78f09fc7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6155215d_77c0ce3f",
        "filename": "src/cmd/go/internal/modload/load.go",
        "patchSetId": 18
      },
      "lineNbr": 680,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-06-30T21:42:15Z",
      "side": 1,
      "message": "(incomplete comment)",
      "revId": "92e764b6a368c97a28c7c91e46c6fb9e78f09fc7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "54f77b9d_e719c7b5",
        "filename": "src/cmd/go/internal/modload/load.go",
        "patchSetId": 18
      },
      "lineNbr": 680,
      "author": {
        "id": 10033
      },
      "writtenOn": "2021-07-08T00:01:46Z",
      "side": 1,
      "message": "Removed. need to rework this for above.",
      "parentUuid": "6155215d_77c0ce3f",
      "revId": "92e764b6a368c97a28c7c91e46c6fb9e78f09fc7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "936ebb6f_bb460f46",
        "filename": "src/cmd/go/internal/modload/load.go",
        "patchSetId": 18
      },
      "lineNbr": 929,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-06-30T21:42:15Z",
      "side": 1,
      "message": "Maybe:\n\treturn !MainModules.Contains(pkg.mod.Path)\n?\n\nBut I think we need a different function here. fromExternalModule is used in updateRequirements to diagnose when a direct dependency is missing from the main module\u0027s go.mod file. In a multi-module workspace, that implies that we should check whether a package imported within module m is listed in m/go.mod specifically — not just *any* go.mod file that happens to be in the workspace.",
      "revId": "92e764b6a368c97a28c7c91e46c6fb9e78f09fc7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8525d15e_74a6278c",
        "filename": "src/cmd/go/internal/modload/load.go",
        "patchSetId": 18
      },
      "lineNbr": 929,
      "author": {
        "id": 10033
      },
      "writtenOn": "2021-07-07T23:42:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "936ebb6f_bb460f46",
      "revId": "92e764b6a368c97a28c7c91e46c6fb9e78f09fc7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3a877aba_82c77685",
        "filename": "src/cmd/go/internal/modload/load.go",
        "patchSetId": 18
      },
      "lineNbr": 1458,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-06-30T21:42:15Z",
      "side": 1,
      "message": "Yes, this is consistent with the definition of \"all\" in the design doc:\n\n\u003e The `all` pattern in workspace mode resolves to the union of `all` for over the set of workspace modules. `all` is the set of packages needed to build and test packages in the workspace modules.\n\n(That said, we may need to refine the behavior here for `go mod tidy`, depending on where we land with the exact semantics for that.)",
      "revId": "92e764b6a368c97a28c7c91e46c6fb9e78f09fc7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "757e5936_cc45d121",
        "filename": "src/cmd/go/internal/modload/load.go",
        "patchSetId": 18
      },
      "lineNbr": 1458,
      "author": {
        "id": 10033
      },
      "writtenOn": "2021-07-07T23:26:06Z",
      "side": 1,
      "message": "Got it. I\u0027ll remove the TODO. We don\u0027t plan to support tidy (at least it\u0027s not supoprted in the proposal: https://go.googlesource.com/proposal/+/master/design/45713-workspace.md#proposal-the-flag)",
      "parentUuid": "3a877aba_82c77685",
      "revId": "92e764b6a368c97a28c7c91e46c6fb9e78f09fc7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dfae44c8_af34e6c9",
        "filename": "src/cmd/go/internal/modload/load.go",
        "patchSetId": 18
      },
      "lineNbr": 1725,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-06-30T21:42:15Z",
      "side": 1,
      "message": "Is this equivalent to:\n\t!ld.VendorModulesInGOROOTSrc || !MainModules.Contains(\"cmd\")\n?",
      "range": {
        "startLine": 1725,
        "startChar": 5,
        "endLine": 1725,
        "endChar": 85
      },
      "revId": "92e764b6a368c97a28c7c91e46c6fb9e78f09fc7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f73a3447_0080c275",
        "filename": "src/cmd/go/internal/modload/load.go",
        "patchSetId": 18
      },
      "lineNbr": 1725,
      "author": {
        "id": 10033
      },
      "writtenOn": "2021-07-07T23:26:06Z",
      "side": 1,
      "message": "yes; done.",
      "parentUuid": "dfae44c8_af34e6c9",
      "range": {
        "startLine": 1725,
        "startChar": 5,
        "endLine": 1725,
        "endChar": 85
      },
      "revId": "92e764b6a368c97a28c7c91e46c6fb9e78f09fc7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e4848132_15692ace",
        "filename": "src/cmd/go/internal/modload/load.go",
        "patchSetId": 18
      },
      "lineNbr": 1725,
      "author": {
        "id": 10033
      },
      "writtenOn": "2021-07-07T23:42:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "dfae44c8_af34e6c9",
      "range": {
        "startLine": 1725,
        "startChar": 5,
        "endLine": 1725,
        "endChar": 85
      },
      "revId": "92e764b6a368c97a28c7c91e46c6fb9e78f09fc7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f83f0057_f0a592b2",
        "filename": "src/cmd/go/internal/modload/load.go",
        "patchSetId": 18
      },
      "lineNbr": 1732,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-06-30T21:42:15Z",
      "side": 1,
      "message": "Contains?",
      "range": {
        "startLine": 1732,
        "startChar": 32,
        "endLine": 1732,
        "endChar": 47
      },
      "revId": "92e764b6a368c97a28c7c91e46c6fb9e78f09fc7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a4430f34_4d010b34",
        "filename": "src/cmd/go/internal/modload/load.go",
        "patchSetId": 18
      },
      "lineNbr": 1732,
      "author": {
        "id": 10033
      },
      "writtenOn": "2021-07-07T23:26:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f83f0057_f0a592b2",
      "range": {
        "startLine": 1732,
        "startChar": 32,
        "endLine": 1732,
        "endChar": 47
      },
      "revId": "92e764b6a368c97a28c7c91e46c6fb9e78f09fc7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ae244f2a_ae9b41d9",
        "filename": "src/cmd/go/internal/modload/load.go",
        "patchSetId": 18
      },
      "lineNbr": 1732,
      "author": {
        "id": 10033
      },
      "writtenOn": "2021-07-07T23:42:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f83f0057_f0a592b2",
      "range": {
        "startLine": 1732,
        "startChar": 32,
        "endLine": 1732,
        "endChar": 47
      },
      "revId": "92e764b6a368c97a28c7c91e46c6fb9e78f09fc7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fff492b5_ea09f481",
        "filename": "src/cmd/go/internal/modload/query.go",
        "patchSetId": 18
      },
      "lineNbr": 640,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-06-30T21:42:15Z",
      "side": 1,
      "message": "Hmm. This implies that every prefix of base is *a* main module, but it is not necessarily the case that *every* main module is a prefix of base.\n\nThe error should list only the subset of main modules that are prefixes of base.",
      "revId": "92e764b6a368c97a28c7c91e46c6fb9e78f09fc7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "31f12e22_901e4fe4",
        "filename": "src/cmd/go/internal/mvs/mvs.go",
        "patchSetId": 18
      },
      "lineNbr": 187,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-06-30T21:49:12Z",
      "side": 1,
      "message": "I don\u0027t really understand the semantics of Req with multiple targets.\n\nThe Req function exists in order to compute updated requirements when we need to write a go.mod file, but if we\u0027re passing in a list of multiple targets, we won\u0027t know which one to update.\n\nI think if we end up calling Req with more than one target, that may be a sign that something has gone wrong on the caller side.",
      "range": {
        "startLine": 184,
        "startChar": 0,
        "endLine": 187,
        "endChar": 88
      },
      "revId": "92e764b6a368c97a28c7c91e46c6fb9e78f09fc7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4ad32f3c_7795efc1",
        "filename": "src/cmd/go/internal/search/search.go",
        "patchSetId": 18
      },
      "lineNbr": 210,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-07-02T19:12:38Z",
      "side": 1,
      "message": "Per #40775, maybe we should eliminate SetModRoot entirely.\n\nAFAICT the only Search function or method that uses the global modRoot variable is (*Match).MatchDirs, and that has only two callers — something in the modload package itself, and the GOPATH-mode \u0027go get\u0027 (which can pass in a hard-coded empty set of roots anyway).",
      "range": {
        "startLine": 204,
        "startChar": 0,
        "endLine": 210,
        "endChar": 0
      },
      "revId": "92e764b6a368c97a28c7c91e46c6fb9e78f09fc7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8e889306_ddea4582",
        "filename": "src/cmd/go/testdata/script/modfile_flag.txt",
        "patchSetId": 18
      },
      "lineNbr": 76,
      "author": {
        "id": 6365
      },
      "writtenOn": "2021-06-30T21:49:12Z",
      "side": 1,
      "message": "Maybe send this fix as a separate CL? 😅",
      "revId": "92e764b6a368c97a28c7c91e46c6fb9e78f09fc7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "54740866_ca4097a6",
        "filename": "src/cmd/go/testdata/script/modfile_flag.txt",
        "patchSetId": 18
      },
      "lineNbr": 76,
      "author": {
        "id": 10033
      },
      "writtenOn": "2021-07-07T23:42:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8e889306_ddea4582",
      "revId": "92e764b6a368c97a28c7c91e46c6fb9e78f09fc7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}