{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "50cc6c69_543688c9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5200
      },
      "writtenOn": "2024-10-02T15:46:01Z",
      "side": 1,
      "message": "Code looks ok, but I\u0027m not seeing the same performance improvements you did.\n\ngoos: darwin\ngoarch: arm64\npkg: runtime\ncpu: Apple M2 Ultra\n                │     base     │              experiment              │\n                │    sec/op    │    sec/op     vs base                │\nMemclr/5-24       2.174n ±  2%   2.131n ±  3%        ~ (p\u003d0.127 n\u003d10)\nMemclr/16-24      2.160n ±  2%   2.119n ±  2%   -1.90% (p\u003d0.012 n\u003d10)\nMemclr/64-24      2.177n ±  2%   2.164n ±  2%        ~ (p\u003d0.148 n\u003d10)\nMemclr/256-24     62.46n ± 25%   67.44n ± 21%        ~ (p\u003d0.669 n\u003d10)\nMemclr/4096-24    207.6n ±  1%   207.5n ±  0%        ~ (p\u003d0.724 n\u003d10)\nMemclr/65536-24   532.2n ±  3%   525.9n ±  2%        ~ (p\u003d0.739 n\u003d10)\nMemclr/1M-24      8.280µ ±  1%   8.530µ ±  2%   +3.02% (p\u003d0.001 n\u003d10)\nMemclr/4M-24      33.43µ ±  3%   33.97µ ±  2%        ~ (p\u003d0.165 n\u003d10)\nMemclr/8M-24      67.83µ ±  3%   68.58µ ±  2%        ~ (p\u003d0.631 n\u003d10)\nMemclr/16M-24     134.6µ ±  1%   135.4µ ±  1%        ~ (p\u003d0.256 n\u003d10)\nMemclr/64M-24     546.7µ ±  3%   549.4µ ±  3%        ~ (p\u003d0.393 n\u003d10)",
      "revId": "777bfee4290884ef03420fdc44141cf27a7798ed",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2a899ae3_3b483257",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 51184
      },
      "writtenOn": "2024-10-02T19:52:46Z",
      "side": 1,
      "message": "Thank you for checking it!\n\nI noticed that your result for the Memclr/256 case had a relatively high deviation, which may hide optimizations effect.\nAccording to the ARM optimization guides, recommendations for branch target \u0026 loops alignments on some CPU cores can be 16-bytes, while on others - it can be 32-bytes (E.g. Cortex-A75 vs Cortex-A76). \nMy experiments on different ARM CPUs have confirmed that one CPU performs better with 16-bytes alignment, another one shows even better results with 32-bytes alignment, and a third CPU has no tangible gains with both alignments.\n\nAccording to Apple Silicon CPU Optimization Guide, section 4.4.3 Branch Target Alignment: \"Because of the alignment capabilities, software alignment of branch targets is generallyunnecessary and sometimes detrimental.\"\nThis explains the results you have obtained.\n\nI have checked the results once again on currently available ARM system (Raspberri Pi5, BCM2712, Cortex-A76):\ngoos: linux\ngoarch: arm64\npkg: runtime\n               │    base      │                opt                   │\n               │    sec/op    │    sec/op     vs base                │\nMemclr/5-4       3.361n ±  0%   3.366n ±  1%        ~ (p\u003d0.092 n\u003d10)\nMemclr/16-4      2.704n ± 24%   2.780n ± 35%   +2.77% (p\u003d0.011 n\u003d10)\nMemclr/64-4      4.586n ±  0%   4.180n ±  2%   -8.85% (p\u003d0.000 n\u003d10)\nMemclr/256-4     8.341n ±  2%   7.506n ±  0%  -10.01% (p\u003d0.000 n\u003d10)\nMemclr/4096-4    57.48n ±  0%   57.43n ±  1%        ~ (p\u003d0.382 n\u003d10)\nMemclr/65536-4   860.6n ±  0%   860.2n ±  0%        ~ (p\u003d0.362 n\u003d10)\nMemclr/1M-4      22.65µ ±  6%   21.58µ ±  3%        ~ (p\u003d0.190 n\u003d10)\nMemclr/4M-4      214.3µ ±  2%   211.3µ ±  2%        ~ (p\u003d0.190 n\u003d10)\nMemclr/8M-4      575.5µ ±  1%   569.1µ ±  1%   -1.12% (p\u003d0.035 n\u003d10)\nMemclr/16M-4     1.297m ±  0%   1.307m ±  0%   +0.74% (p\u003d0.002 n\u003d10)\nMemclr/64M-4     5.667m ±  0%   5.657m ±  0%        ~ (p\u003d0.075 n\u003d10)\ngeomean          1.705µ         1.668µ         -2.15%\n\nAlso, I checked result for single CPU core (limited with taskset):\ngoos: linux\ngoarch: arm64\npkg: runtime\n             │   base1      │               opt1                  │\n             │    sec/op    │   sec/op     vs base                │\nMemclr/5       3.361n ±  2%   3.361n ± 0%        ~ (p\u003d0.834 n\u003d10)\nMemclr/16      2.712n ± 32%   2.735n ± 0%        ~ (p\u003d0.109 n\u003d10)\nMemclr/64      4.588n ±  0%   4.178n ± 0%   -8.94% (p\u003d0.000 n\u003d10)\nMemclr/256     8.342n ±  0%   7.507n ± 0%  -10.01% (p\u003d0.000 n\u003d10)\nMemclr/4096    56.90n ±  0%   56.90n ± 0%        ~ (p\u003d0.668 n\u003d10)\nMemclr/65536   860.2n ±  0%   858.9n ± 0%        ~ (p\u003d0.086 n\u003d10)\nMemclr/1M      22.30µ ±  2%   21.57µ ± 3%   -3.28% (p\u003d0.000 n\u003d10)\nMemclr/4M      209.9µ ±  5%   202.1µ ± 2%   -3.69% (p\u003d0.003 n\u003d10)\nMemclr/8M      569.9µ ±  1%   571.8µ ± 1%        ~ (p\u003d0.280 n\u003d10)\nMemclr/16M     1.299m ±  1%   1.297m ± 0%        ~ (p\u003d0.190 n\u003d10)\nMemclr/64M     5.665m ±  0%   5.673m ± 0%   +0.14% (p\u003d0.035 n\u003d10)\ngeomean        1.697µ         1.657µ        -2.33%",
      "parentUuid": "50cc6c69_543688c9",
      "revId": "777bfee4290884ef03420fdc44141cf27a7798ed",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0ff5d449_d0380b7c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 51184
      },
      "writtenOn": "2024-10-03T19:57:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2a899ae3_3b483257",
      "revId": "777bfee4290884ef03420fdc44141cf27a7798ed",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}