{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "a948ff17_4943db7b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 6365
      },
      "writtenOn": "2022-02-11T22:00:20Z",
      "side": 1,
      "message": "TRY\u003daix,illumos,freebsd,darwin",
      "revId": "16bbd4bf619695588688fed46d2c278f16388024",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "66a6a8a2_a2b8a46e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-02-11T22:00:33Z",
      "side": 1,
      "message": "SlowBots beginning. Status page: https://farmer.golang.org/try?commit\u003d16bbd4bf",
      "tag": "autogenerated:trybots~beginning",
      "revId": "16bbd4bf619695588688fed46d2c278f16388024",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c0a2c8d7_78557d74",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 6365
      },
      "writtenOn": "2022-02-11T22:09:36Z",
      "side": 1,
      "message": "Tested with \u0027go test net -run\u003dTestNotTemporaryRead -count\u003d10000\u0027 on Linux (locally), AIX (via gomote), and FreeBSD (via gomote).\n\nWithout the synchronization via the “dialed” channel, the failure rate on AIX was nonzero. With the synchronization, it dropped to zero.",
      "revId": "16bbd4bf619695588688fed46d2c278f16388024",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e0e0e7be_c2701ae5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-02-11T22:36:03Z",
      "side": 1,
      "message": "SlowBots are happy.\n\nSlowBot builds that ran:\n* aix-ppc64\n* darwin-amd64-12_0\n* freebsd-amd64-13_0\n* illumos-amd64\n",
      "parentUuid": "66a6a8a2_a2b8a46e",
      "tag": "autogenerated:trybots~happy",
      "revId": "16bbd4bf619695588688fed46d2c278f16388024",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "01161f06_5edb6179",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5137
      },
      "writtenOn": "2022-02-12T15:37:28Z",
      "side": 1,
      "message": "Thank you for this fix Bryan! I have added some suggestions, please take a look.",
      "revId": "16bbd4bf619695588688fed46d2c278f16388024",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "34cbd859_dc7f0098",
        "filename": "src/net/net_test.go",
        "patchSetId": 1
      },
      "lineNbr": 535,
      "author": {
        "id": 5206
      },
      "writtenOn": "2022-02-12T06:13:39Z",
      "side": 1,
      "message": "I don\u0027t feel strongly about this, but we can just use defer here.  I feel like t.Cleanup is for cases where defer doesn\u0027t work well, as when a helper function needs to set up a cleanup.",
      "revId": "16bbd4bf619695588688fed46d2c278f16388024",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "065a557a_0f275438",
        "filename": "src/net/net_test.go",
        "patchSetId": 1
      },
      "lineNbr": 535,
      "author": {
        "id": 6365
      },
      "writtenOn": "2022-02-14T19:56:47Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "34cbd859_dc7f0098",
      "revId": "16bbd4bf619695588688fed46d2c278f16388024",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "56f0d0d7_1c7e9808",
        "filename": "src/net/net_test.go",
        "patchSetId": 1
      },
      "lineNbr": 541,
      "author": {
        "id": 5137
      },
      "writtenOn": "2022-02-12T15:37:28Z",
      "side": 1,
      "message": "We also need to invoke: defer ss.Close() right there.",
      "revId": "16bbd4bf619695588688fed46d2c278f16388024",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6d573e46_f5c4ea6d",
        "filename": "src/net/net_test.go",
        "patchSetId": 1
      },
      "lineNbr": 541,
      "author": {
        "id": 6365
      },
      "writtenOn": "2022-02-14T19:56:47Z",
      "side": 1,
      "message": "Done. (Good catch!)",
      "parentUuid": "56f0d0d7_1c7e9808",
      "revId": "16bbd4bf619695588688fed46d2c278f16388024",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fdf3fd7a_6276990e",
        "filename": "src/net/net_test.go",
        "patchSetId": 1
      },
      "lineNbr": 551,
      "author": {
        "id": 5137
      },
      "writtenOn": "2022-02-12T15:37:28Z",
      "side": 1,
      "message": "I feel like we can make an early return here using t.Fatal but we also need to check that an io.EOF only happens on \"plan9\" lest we shall not be detect when things fail with an io.EOF. Please take a look at:\n\n      _, err \u003d ss.Read([]byte{0})\n      if err \u003d\u003d nil {\n           t.Fatal(\"Read succeeded unexpectedly\")\n      }\n      \n      if err \u003d\u003d io.EOF {\n           if runtime.GOOS !\u003d \"plan9\" {\n                t.Fatal(\"Unexpectedly encountered io.EOF\")\n           }\n           return\n      }\n      \n      if ne, ok :\u003d err.(Error); !ok {\n           t.Errorf(\"err doesn\u0027t conform to net.Error: %v: %T\", err, err)\n      } else if ne.Temporary() {\n           t.Errorf(\"Unexpected temporary error: %v\", err)\n      }",
      "range": {
        "startLine": 542,
        "startChar": 0,
        "endLine": 551,
        "endChar": 2
      },
      "revId": "16bbd4bf619695588688fed46d2c278f16388024",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "94ca842e_f67473a4",
        "filename": "src/net/net_test.go",
        "patchSetId": 1
      },
      "lineNbr": 551,
      "author": {
        "id": 6365
      },
      "writtenOn": "2022-02-14T19:56:47Z",
      "side": 1,
      "message": "Mostly done, but kept the non-error for io.EOF on non-plan9 for now.\n\n(At this point in the freeze I don\u0027t want to risk making this test flakier by checking for anything stronger than what it was already doing.)",
      "parentUuid": "fdf3fd7a_6276990e",
      "range": {
        "startLine": 542,
        "startChar": 0,
        "endLine": 551,
        "endChar": 2
      },
      "revId": "16bbd4bf619695588688fed46d2c278f16388024",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7c928b01_8e3b8c1d",
        "filename": "src/net/net_test.go",
        "patchSetId": 1
      },
      "lineNbr": 551,
      "author": {
        "id": 5137
      },
      "writtenOn": "2022-02-14T19:58:39Z",
      "side": 1,
      "message": "No biggie, thanks for adding the comment!",
      "parentUuid": "94ca842e_f67473a4",
      "range": {
        "startLine": 542,
        "startChar": 0,
        "endLine": 551,
        "endChar": 2
      },
      "revId": "16bbd4bf619695588688fed46d2c278f16388024",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}