{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "4ddcdaff_c7fcc9fe",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-04-21T11:04:54Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003df961c8c2",
      "tag": "autogenerated:trybots~beginning",
      "revId": "f961c8c2f5d6d1b50a1b3a4672061cc6659b2280",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1903e2af_41dd21c8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-04-21T11:13:23Z",
      "side": 1,
      "message": "Build is still in progress... Status page: https://farmer.golang.org/try?commit\u003df961c8c2\nFailed on (x/tools) linux-amd64: https://storage.googleapis.com/go-build-log/f961c8c2/linux-amd64_da66db94.log\nOther builds still in progress; subsequent failure notices suppressed until final report.\n\nConsult https://build.golang.org/ to see whether they are new failures. Keep in mind that TryBots currently test *exactly* your git commit, without rebasing. If your commit\u0027s git parent is old, the failure might\u0027ve already been fixed.\n",
      "parentUuid": "4ddcdaff_c7fcc9fe",
      "tag": "autogenerated:trybots~progress",
      "revId": "f961c8c2f5d6d1b50a1b3a4672061cc6659b2280",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "517b31bc_f33e244d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-04-21T11:19:57Z",
      "side": 1,
      "message": "1 of 23 TryBots failed.\nFailed on (x/tools) linux-amd64: https://storage.googleapis.com/go-build-log/f961c8c2/linux-amd64_da66db94.log\n\nConsult https://build.golang.org/ to see whether they are new failures. Keep in mind that TryBots currently test *exactly* your git commit, without rebasing. If your commit\u0027s git parent is old, the failure might\u0027ve already been fixed.\n\n",
      "parentUuid": "1903e2af_41dd21c8",
      "tag": "autogenerated:trybots~failed",
      "revId": "f961c8c2f5d6d1b50a1b3a4672061cc6659b2280",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "384ee99a_0a7b4f66",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5210
      },
      "writtenOn": "2021-04-21T19:09:39Z",
      "side": 1,
      "message": "LGTM but give rfindley a chance to look it over.",
      "revId": "f961c8c2f5d6d1b50a1b3a4672061cc6659b2280",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b2db00c8_28f9f7bc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 31647
      },
      "writtenOn": "2021-04-22T00:38:23Z",
      "side": 1,
      "message": "Sorry for the slow review. I had (or rather wanted) to catch up on the lengthy history of these proposals.\n\nI\u0027ll look at the tools tests and see if I can make them forwards-and-backwards compatible with this change. They\u0027re asserting on an exact completion set, so this addition adds a new completion item :/\n\nHolding off on +2 as I\u0027d rather not break everyone\u0027s TryBot. Let me fix x/tools; I\u0027ll sent you a CL tonight.",
      "revId": "f961c8c2f5d6d1b50a1b3a4672061cc6659b2280",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "19706361_1fddde1d",
        "filename": "src/go/types/builtins.go",
        "patchSetId": 1
      },
      "lineNbr": 607,
      "author": {
        "id": 31647
      },
      "writtenOn": "2021-04-22T00:38:23Z",
      "side": 1,
      "message": "Shouldn\u0027t we do the bounds check here, as well?",
      "range": {
        "startLine": 607,
        "startChar": 5,
        "endLine": 607,
        "endChar": 21
      },
      "revId": "f961c8c2f5d6d1b50a1b3a4672061cc6659b2280",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "52a809fd_2012851b",
        "filename": "src/go/types/builtins.go",
        "patchSetId": 1
      },
      "lineNbr": 612,
      "author": {
        "id": 5210
      },
      "writtenOn": "2021-04-21T22:10:20Z",
      "side": 1,
      "message": "Shouldn\u0027t x.typ here be Typ[UnsafePointer] per the spec and the proposal?",
      "range": {
        "startLine": 612,
        "startChar": 4,
        "endLine": 612,
        "endChar": 8
      },
      "revId": "f961c8c2f5d6d1b50a1b3a4672061cc6659b2280",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eee00f72_87d73d94",
        "filename": "src/go/types/builtins.go",
        "patchSetId": 1
      },
      "lineNbr": 612,
      "author": {
        "id": 5440
      },
      "writtenOn": "2021-04-22T01:32:17Z",
      "side": 1,
      "message": "I think x.typ will always be Typ[UnsafePointer] because of the check.assignment call at line L591 and check at L592?\n\n(I also envisioned that we might want to generalize unsafe.Add to any pointer type, so leaving it in place like this happens to work for that too. But that\u0027s entirely speculative, so I\u0027m happy to change it if you think it\u0027s better to be explicit.)",
      "parentUuid": "52a809fd_2012851b",
      "range": {
        "startLine": 612,
        "startChar": 4,
        "endLine": 612,
        "endChar": 8
      },
      "revId": "f961c8c2f5d6d1b50a1b3a4672061cc6659b2280",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6d3b03e9_643c7eba",
        "filename": "src/go/types/builtins.go",
        "patchSetId": 1
      },
      "lineNbr": 612,
      "author": {
        "id": 31647
      },
      "writtenOn": "2021-04-22T02:00:48Z",
      "side": 1,
      "message": "What about Typ[UntypedNil]?",
      "parentUuid": "eee00f72_87d73d94",
      "range": {
        "startLine": 612,
        "startChar": 4,
        "endLine": 612,
        "endChar": 8
      },
      "revId": "f961c8c2f5d6d1b50a1b3a4672061cc6659b2280",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "febd7de9_1905ddd1",
        "filename": "src/go/types/builtins.go",
        "patchSetId": 1
      },
      "lineNbr": 612,
      "author": {
        "id": 5440
      },
      "writtenOn": "2021-04-22T03:05:21Z",
      "side": 1,
      "message": "Oops, you\u0027re right. I forgot that go/types handles `nil` conversions differently than gc does/did.\n\nFixed and added a test.",
      "parentUuid": "6d3b03e9_643c7eba",
      "range": {
        "startLine": 612,
        "startChar": 4,
        "endLine": 612,
        "endChar": 8
      },
      "revId": "f961c8c2f5d6d1b50a1b3a4672061cc6659b2280",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5d8b657a_c945abcd",
        "filename": "src/go/types/builtins.go",
        "patchSetId": 1
      },
      "lineNbr": 708,
      "author": {
        "id": 5210
      },
      "writtenOn": "2021-04-21T19:09:39Z",
      "side": 1,
      "message": "just FYI: you don\u0027t have this comment for the matching code in _Add",
      "range": {
        "startLine": 708,
        "startChar": 24,
        "endLine": 708,
        "endChar": 25
      },
      "revId": "f961c8c2f5d6d1b50a1b3a4672061cc6659b2280",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "85ff8c84_e3f88221",
        "filename": "src/go/types/builtins.go",
        "patchSetId": 1
      },
      "lineNbr": 708,
      "author": {
        "id": 5440
      },
      "writtenOn": "2021-04-22T01:32:17Z",
      "side": 1,
      "message": "Done, thanks.",
      "parentUuid": "5d8b657a_c945abcd",
      "range": {
        "startLine": 708,
        "startChar": 24,
        "endLine": 708,
        "endChar": 25
      },
      "revId": "f961c8c2f5d6d1b50a1b3a4672061cc6659b2280",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "53de2582_b40a01a4",
        "filename": "src/go/types/builtins.go",
        "patchSetId": 1
      },
      "lineNbr": 714,
      "author": {
        "id": 5210
      },
      "writtenOn": "2021-04-21T19:09:39Z",
      "side": 1,
      "message": "ditto",
      "range": {
        "startLine": 714,
        "startChar": 23,
        "endLine": 714,
        "endChar": 24
      },
      "revId": "f961c8c2f5d6d1b50a1b3a4672061cc6659b2280",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cf953f01_6d71b175",
        "filename": "src/go/types/builtins.go",
        "patchSetId": 1
      },
      "lineNbr": 714,
      "author": {
        "id": 5440
      },
      "writtenOn": "2021-04-22T01:32:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "53de2582_b40a01a4",
      "range": {
        "startLine": 714,
        "startChar": 23,
        "endLine": 714,
        "endChar": 24
      },
      "revId": "f961c8c2f5d6d1b50a1b3a4672061cc6659b2280",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "44479365_115f1984",
        "filename": "src/go/types/builtins.go",
        "patchSetId": 1
      },
      "lineNbr": 727,
      "author": {
        "id": 31647
      },
      "writtenOn": "2021-04-22T00:38:23Z",
      "side": 1,
      "message": "Should we consider the actual int (word) size here?",
      "range": {
        "startLine": 727,
        "startChar": 24,
        "endLine": 727,
        "endChar": 32
      },
      "revId": "f961c8c2f5d6d1b50a1b3a4672061cc6659b2280",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e11935eb_b94594e3",
        "filename": "src/go/types/builtins.go",
        "patchSetId": 1
      },
      "lineNbr": 727,
      "author": {
        "id": 31647
      },
      "writtenOn": "2021-04-22T00:46:49Z",
      "side": 1,
      "message": "(i.e. call representableConst or Checker.representation)",
      "parentUuid": "44479365_115f1984",
      "range": {
        "startLine": 727,
        "startChar": 24,
        "endLine": 727,
        "endChar": 32
      },
      "revId": "f961c8c2f5d6d1b50a1b3a4672061cc6659b2280",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "600d8257_838bb984",
        "filename": "src/go/types/builtins.go",
        "patchSetId": 1
      },
      "lineNbr": 727,
      "author": {
        "id": 5210
      },
      "writtenOn": "2021-04-22T01:07:53Z",
      "side": 1,
      "message": "Good question. We don\u0027t do this in Checker.index, looks like a bug on a 32bit platform?\n\nWe should probably provide a factored out predicate for this. Maybe add a TODO and address in a separate CL where we look at the other cases?",
      "parentUuid": "e11935eb_b94594e3",
      "range": {
        "startLine": 727,
        "startChar": 24,
        "endLine": 727,
        "endChar": 32
      },
      "revId": "f961c8c2f5d6d1b50a1b3a4672061cc6659b2280",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1fe58543_fd5fec2d",
        "filename": "src/go/types/builtins.go",
        "patchSetId": 1
      },
      "lineNbr": 727,
      "author": {
        "id": 5440
      },
      "writtenOn": "2021-04-22T01:32:17Z",
      "side": 1,
      "message": "FYI, I\u0027ve got a CL for fixing Checker.index. Just working on figuring out how to add a 32-bit-only test at the moment.",
      "parentUuid": "600d8257_838bb984",
      "range": {
        "startLine": 727,
        "startChar": 24,
        "endLine": 727,
        "endChar": 32
      },
      "revId": "f961c8c2f5d6d1b50a1b3a4672061cc6659b2280",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d1f23164_f0944a5d",
        "filename": "src/go/types/builtins.go",
        "patchSetId": 1
      },
      "lineNbr": 727,
      "author": {
        "id": 5440
      },
      "writtenOn": "2021-04-22T03:05:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1fe58543_fd5fec2d",
      "range": {
        "startLine": 727,
        "startChar": 24,
        "endLine": 727,
        "endChar": 32
      },
      "revId": "f961c8c2f5d6d1b50a1b3a4672061cc6659b2280",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "944f6b44_fd5e21d0",
        "filename": "src/go/types/builtins.go",
        "patchSetId": 1
      },
      "lineNbr": 729,
      "author": {
        "id": 31647
      },
      "writtenOn": "2021-04-22T00:38:23Z",
      "side": 1,
      "message": "This error message could probably be more specific (\"not representable by int\", \"overflows int\", or something).",
      "range": {
        "startLine": 729,
        "startChar": 56,
        "endLine": 729,
        "endChar": 69
      },
      "revId": "f961c8c2f5d6d1b50a1b3a4672061cc6659b2280",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "04681a15_63818fb5",
        "filename": "src/go/types/check.go",
        "patchSetId": 1
      },
      "lineNbr": 333,
      "author": {
        "id": 5210
      },
      "writtenOn": "2021-04-21T19:09:39Z",
      "side": 1,
      "message": "Maybe adjust the comment such that it explains that the qualified identifier is for unsafe builtins (that are not constant). Could be a separate, explanatory sentence.",
      "range": {
        "startLine": 333,
        "startChar": 25,
        "endLine": 333,
        "endChar": 26
      },
      "revId": "f961c8c2f5d6d1b50a1b3a4672061cc6659b2280",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cdc1dde7_bd7c930b",
        "filename": "src/go/types/check.go",
        "patchSetId": 1
      },
      "lineNbr": 333,
      "author": {
        "id": 5440
      },
      "writtenOn": "2021-04-22T01:32:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "04681a15_63818fb5",
      "range": {
        "startLine": 333,
        "startChar": 25,
        "endLine": 333,
        "endChar": 26
      },
      "revId": "f961c8c2f5d6d1b50a1b3a4672061cc6659b2280",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}