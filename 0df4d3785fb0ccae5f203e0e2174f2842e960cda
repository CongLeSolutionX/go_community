{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "e01c66e6_3875dbb6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 7392
      },
      "writtenOn": "2024-09-18T18:28:32Z",
      "side": 1,
      "message": "Nice!",
      "revId": "0df4d3785fb0ccae5f203e0e2174f2842e960cda",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a984a919_acff73bb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 7392
      },
      "writtenOn": "2024-09-18T18:36:07Z",
      "side": 1,
      "message": "Actually, I think this code is not sufficient. For instance, each time we encounter an Object we call check.objDecl that typechecks the respective declaration, which may be in a different file. In objDecl we need to switch to the correct version. This may require that we record the version in each object, or perhaps better, that we record the file in which the object is declared.",
      "revId": "0df4d3785fb0ccae5f203e0e2174f2842e960cda",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "436bc70e_0226e1f7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 57259
      },
      "writtenOn": "2024-09-20T17:50:36Z",
      "side": 1,
      "message": "Good catch. I added a version field to declInfo to capture the file version and then save/restore it around object type-checking, just like with check.later.",
      "parentUuid": "a984a919_acff73bb",
      "revId": "0df4d3785fb0ccae5f203e0e2174f2842e960cda",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b32c7569_4b91561f",
        "filename": "src/cmd/compile/internal/types2/check.go",
        "patchSetId": 4
      },
      "lineNbr": 144,
      "author": {
        "id": 7392
      },
      "writtenOn": "2024-09-18T18:28:32Z",
      "side": 1,
      "message": "s/goVersion/language version/ ?\nthe map value is a string not a goVersion\n(strings are not \"sanitized\")",
      "range": {
        "startLine": 144,
        "startChar": 59,
        "endLine": 144,
        "endChar": 68
      },
      "fixSuggestions": [
        {
          "fixId": "a980cad9_b21e9626",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "src/cmd/compile/internal/types2/check.go",
              "range": {
                "startLine": 144,
                "startChar": 0,
                "endLine": 145,
                "endChar": 0
              },
              "replacement": "\tversions      map[*syntax.PosBase]string // maps files to language version strings (each file has an entry); shared with Info.FileVersions if present; may be unaltered Config.GoVersion\n"
            }
          ]
        }
      ],
      "revId": "0df4d3785fb0ccae5f203e0e2174f2842e960cda",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2e4d99e1_031882e2",
        "filename": "src/cmd/compile/internal/types2/check.go",
        "patchSetId": 4
      },
      "lineNbr": 144,
      "author": {
        "id": 57259
      },
      "writtenOn": "2024-09-20T17:39:43Z",
      "side": 1,
      "message": "Done. I think it would be good as a followup to decouple checker.version (sanitized) from Info.FileVersions (raw).",
      "parentUuid": "b32c7569_4b91561f",
      "range": {
        "startLine": 144,
        "startChar": 59,
        "endLine": 144,
        "endChar": 68
      },
      "revId": "0df4d3785fb0ccae5f203e0e2174f2842e960cda",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "543a1b5d_17e9a7dd",
        "filename": "src/cmd/compile/internal/types2/check.go",
        "patchSetId": 4
      },
      "lineNbr": 494,
      "author": {
        "id": 7392
      },
      "writtenOn": "2024-09-18T18:28:32Z",
      "side": 1,
      "message": "what\u0027s the reason for the empty line?\nleave away or swap lines 493/494",
      "fixSuggestions": [
        {
          "fixId": "e18c7737_fb472903",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "src/cmd/compile/internal/types2/check.go",
              "range": {
                "startLine": 494,
                "startChar": 0,
                "endLine": 495,
                "endChar": 0
              },
              "replacement": ""
            }
          ]
        }
      ],
      "revId": "0df4d3785fb0ccae5f203e0e2174f2842e960cda",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "28a00530_8788daf4",
        "filename": "src/cmd/compile/internal/types2/check.go",
        "patchSetId": 4
      },
      "lineNbr": 494,
      "author": {
        "id": 57259
      },
      "writtenOn": "2024-09-20T17:39:43Z",
      "side": 1,
      "message": "\u003e what\u0027s the reason for the empty line?\n\nA minor reaction to gofmt\u0027s common indentation of the two unrelated comments. Done.",
      "parentUuid": "543a1b5d_17e9a7dd",
      "revId": "0df4d3785fb0ccae5f203e0e2174f2842e960cda",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "86977380_afc78038",
        "filename": "src/cmd/compile/internal/types2/instantiate.go",
        "patchSetId": 4
      },
      "lineNbr": 86,
      "author": {
        "id": 7392
      },
      "writtenOn": "2024-09-18T18:28:32Z",
      "side": 1,
      "message": "I don\u0027t understand \"when not type-checking syntax\"",
      "range": {
        "startLine": 86,
        "startChar": 21,
        "endLine": 86,
        "endChar": 50
      },
      "fixSuggestions": [
        {
          "fixId": "aa1df9cd_f36cfa27",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "src/cmd/compile/internal/types2/instantiate.go",
              "range": {
                "startLine": 86,
                "startChar": 0,
                "endLine": 87,
                "endChar": 0
              },
              "replacement": "// check may be nil (when not type-checking syntax); pos is used only if check is non-nil.\n"
            }
          ]
        }
      ],
      "revId": "0df4d3785fb0ccae5f203e0e2174f2842e960cda",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9a829160_b4c617a6",
        "filename": "src/cmd/compile/internal/types2/instantiate.go",
        "patchSetId": 4
      },
      "lineNbr": 86,
      "author": {
        "id": 57259
      },
      "writtenOn": "2024-09-20T17:39:43Z",
      "side": 1,
      "message": "Many functions seem to take a checker (or be methods of *checker) even though it may be nil, and the rationale seems to be that they are invoked in two phases:\n\n1. when type-checking the syntax of a package, checker !\u003d nil.\n2. when performing \"arithmetic\" on fully-baked types (e.g. instantiation, Identical, etc), the checker is nil.\n\nCan you think of a better way to express this distinction?",
      "parentUuid": "86977380_afc78038",
      "range": {
        "startLine": 86,
        "startChar": 21,
        "endLine": 86,
        "endChar": 50
      },
      "revId": "0df4d3785fb0ccae5f203e0e2174f2842e960cda",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d0decbf5_f793caf3",
        "filename": "src/cmd/compile/internal/types2/instantiate.go",
        "patchSetId": 4
      },
      "lineNbr": 86,
      "author": {
        "id": 7392
      },
      "writtenOn": "2024-09-25T19:44:56Z",
      "side": 1,
      "message": "Ah. We\u0027ve got quite a few places where this is the case.\n\nMaybe:\n\ncheck may be nil if instance is invoked through an (external) API call",
      "parentUuid": "9a829160_b4c617a6",
      "range": {
        "startLine": 86,
        "startChar": 21,
        "endLine": 86,
        "endChar": 50
      },
      "revId": "0df4d3785fb0ccae5f203e0e2174f2842e960cda",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7cd4a8e9_fcca85ee",
        "filename": "src/cmd/compile/internal/types2/lookup.go",
        "patchSetId": 4
      },
      "lineNbr": 9,
      "author": {
        "id": 7392
      },
      "writtenOn": "2024-09-18T18:28:32Z",
      "side": 1,
      "message": "maybe remove ()\u0027s",
      "fixSuggestions": [
        {
          "fixId": "69496770_5fbd8fb7",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "src/cmd/compile/internal/types2/lookup.go",
              "range": {
                "startLine": 6,
                "startChar": 0,
                "endLine": 7,
                "endChar": 0
              },
              "replacement": ""
            },
            {
              "path": "src/cmd/compile/internal/types2/lookup.go",
              "range": {
                "startLine": 9,
                "startChar": 0,
                "endLine": 12,
                "endChar": 0
              },
              "replacement": "import \"bytes\"\n"
            }
          ]
        }
      ],
      "revId": "0df4d3785fb0ccae5f203e0e2174f2842e960cda",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "32525981_0a50bedb",
        "filename": "src/cmd/compile/internal/types2/lookup.go",
        "patchSetId": 4
      },
      "lineNbr": 9,
      "author": {
        "id": 57259
      },
      "writtenOn": "2024-09-20T17:39:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7cd4a8e9_fcca85ee",
      "revId": "0df4d3785fb0ccae5f203e0e2174f2842e960cda",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}