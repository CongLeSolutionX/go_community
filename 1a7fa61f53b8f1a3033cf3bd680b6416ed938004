{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "0a832793_689d36f4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 70,
      "author": {
        "id": 5167
      },
      "writtenOn": "2023-05-23T20:36:24Z",
      "side": 1,
      "message": "Does it make sense to do the benchmarks CL first and then this CL?",
      "revId": "1a7fa61f53b8f1a3033cf3bd680b6416ed938004",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9d984a71_192ad029",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 70,
      "author": {
        "id": 25391
      },
      "writtenOn": "2023-05-23T21:21:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0a832793_689d36f4",
      "revId": "1a7fa61f53b8f1a3033cf3bd680b6416ed938004",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fc5e61f1_1559e510",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 25391
      },
      "writtenOn": "2023-05-23T19:34:33Z",
      "side": 1,
      "message": "some context for you Sven: a couple of us on the Go team talked it over a bit and we think this should probably go in sooner rather than later, given that it\u0027s a rather small change and helps the particular case of not reusing the Pinner. (see the next CL.)",
      "revId": "1a7fa61f53b8f1a3033cf3bd680b6416ed938004",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "adb99a20_9cbf47bf",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-05-23T19:36:53Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003d1a7fa61f\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "1a7fa61f53b8f1a3033cf3bd680b6416ed938004",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8d9b4701_c413bfeb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-05-23T19:50:15Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "adb99a20_9cbf47bf",
      "tag": "autogenerated:trybots~happy",
      "revId": "1a7fa61f53b8f1a3033cf3bd680b6416ed938004",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "86f42b83_d572762f",
        "filename": "src/runtime/pinner.go",
        "patchSetId": 1
      },
      "lineNbr": 65,
      "author": {
        "id": 5167
      },
      "writtenOn": "2023-05-23T20:36:24Z",
      "side": 1,
      "message": "It took me a while to puzzle through the interaction with finalizers. I think it\u0027s okay because refs is empty, so the finalizer is a no-op, and keeping the finalizer attached means you don\u0027t need to reattach the finalizer if you get it from the cache. It might be worth a sentence in the comment here, though.",
      "revId": "1a7fa61f53b8f1a3033cf3bd680b6416ed938004",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e3e6244f_baf8492b",
        "filename": "src/runtime/pinner.go",
        "patchSetId": 1
      },
      "lineNbr": 65,
      "author": {
        "id": 25391
      },
      "writtenOn": "2023-05-23T21:21:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "86f42b83_d572762f",
      "revId": "1a7fa61f53b8f1a3033cf3bd680b6416ed938004",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "22fa8f51_eb237901",
        "filename": "src/runtime/pinner.go",
        "patchSetId": 1
      },
      "lineNbr": 90,
      "author": {
        "id": 5167
      },
      "writtenOn": "2023-05-23T20:36:24Z",
      "side": 1,
      "message": "Is it a problem that we might wind up pooling a pinner with a very large refs slice? Maybe there should be some bound, above which we either reset it to refStore or just throw it out? (A watermark would be perfect for this, but is definitely more complicated than we want to do.)",
      "revId": "1a7fa61f53b8f1a3033cf3bd680b6416ed938004",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bb724f6b_dbf65f88",
        "filename": "src/runtime/pinner.go",
        "patchSetId": 1
      },
      "lineNbr": 90,
      "author": {
        "id": 25391
      },
      "writtenOn": "2023-05-23T21:21:49Z",
      "side": 1,
      "message": "the refs slice would have to be very, very big for it to matter I think. the difference is surviving an extra GC cycle, because we discard the cache every cycle.\n\nI don\u0027t expect it to be a problem in practice, but I\u0027m fine with setting some very high threshold (1024?). WDYT?",
      "parentUuid": "22fa8f51_eb237901",
      "revId": "1a7fa61f53b8f1a3033cf3bd680b6416ed938004",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f1c31d26_43ebb358",
        "filename": "src/runtime/pinner.go",
        "patchSetId": 1
      },
      "lineNbr": 90,
      "author": {
        "id": 54801
      },
      "writtenOn": "2023-05-23T21:32:45Z",
      "side": 1,
      "message": "But this does not only affect the cached pinner, but all instances. If people keep a Pinner around, it would never release the ref memory, even after an `Unpin()`. That\u0027s exactly why I did the reset to `p.refStore[:0]`.",
      "parentUuid": "bb724f6b_dbf65f88",
      "revId": "1a7fa61f53b8f1a3033cf3bd680b6416ed938004",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}