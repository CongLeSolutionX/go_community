{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "7d1a2c8d_9f548fe7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 34725
      },
      "writtenOn": "2021-08-26T01:29:57Z",
      "side": 1,
      "message": "Hi Michael, is there any progress on this CL?",
      "revId": "392d3b92c702864e9f61ec062695b0b24caad441",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c34a5599_4d34efd7",
        "filename": "src/runtime/proc.go",
        "patchSetId": 4
      },
      "lineNbr": 5999,
      "author": {
        "id": 5167
      },
      "writtenOn": "2021-08-30T14:23:27Z",
      "side": 1,
      "message": "I think the most important thing this comment could do is to explain why runnext can\u0027t go non-zero. Maybe something like\n\nOther Ps can race to set runnext to 0, but only the current P can set it to non-0. Hence there\u0027s no need to retry this CAS if it falls.\n\n?",
      "revId": "392d3b92c702864e9f61ec062695b0b24caad441",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a59c6588_247aec55",
        "filename": "src/runtime/proc.go",
        "patchSetId": 4
      },
      "lineNbr": 5999,
      "author": {
        "id": 34725
      },
      "writtenOn": "2021-08-30T14:50:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c34a5599_4d34efd7",
      "revId": "392d3b92c702864e9f61ec062695b0b24caad441",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}