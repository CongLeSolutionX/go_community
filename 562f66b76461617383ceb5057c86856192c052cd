{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "00305099_24621731",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-04-22T16:17:15Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003d562f66b7",
      "tag": "autogenerated:trybots~beginning",
      "revId": "562f66b76461617383ceb5057c86856192c052cd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7b601ede_c3e011e0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-04-22T16:33:10Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "00305099_24621731",
      "tag": "autogenerated:trybots~happy",
      "revId": "562f66b76461617383ceb5057c86856192c052cd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ff3d60f4_90fcd75f",
        "filename": "src/cmd/compile/internal/inline/inl.go",
        "patchSetId": 5
      },
      "lineNbr": 1413,
      "author": {
        "id": 5440
      },
      "writtenOn": "2021-04-22T19:12:39Z",
      "side": 1,
      "message": "This is a nice idea, and simpler than what I had in mind. But I think it\u0027s still incorrect for short variable declarations that \"redeclare\" variables. For example:\n\n```\na :\u003d 1\na, b :\u003d 2, 3\n```\n\na.Defn should point to the \"a \u003d 1\" AS node, but b.Defn should point to the \"a, b \u003d 2, 3\" AS2 node. But this code will update both a.Defn and b.Defn to point to the AS2 node.\n\nSee below for a variation on the idea that I think should work better.",
      "revId": "562f66b76461617383ceb5057c86856192c052cd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9ec94a81_29972a9a",
        "filename": "src/cmd/compile/internal/inline/inl.go",
        "patchSetId": 5
      },
      "lineNbr": 1413,
      "author": {
        "id": 14665
      },
      "writtenOn": "2021-04-22T20:34:29Z",
      "side": 1,
      "message": "I think patchset 6 solves this problem. Here\u0027s part of the dump AST:\n\n```\nbefore walk x.func3\n.   DCL p(0x1400000c7c8) # t.go:6\n.   .   NAME-p.f p(0x140003bf860) defn(0x140003c0eb0) curfn(0x1400013ab00) esc(no) tc(1) Class:PAUTO Offset:0 OnStack Used FUNC-func() # t.go:6\n.   AS p(0x140003c0eb0) tc(1) Def # t.go:6\n.   .   NAME-p.f p(0x140003bf860) defn(0x140003c0eb0) curfn(0x1400013ab00) esc(no) tc(1) Class:PAUTO Offset:0 OnStack Used FUNC-func() # t.go:6\n.   .   CLOSURE p(0x140003c0f00) esc(no) tc(1) fnName(p.x.func2) FUNC-func() # t.go:6 FUNC-func()\n.   .   CLOSURE-Func\n.   .   .   DCLFUNC p(0x1400013ac60) esc(N) tc(1) Iota:-1 ABI:ABIInternal ABIRefs:{ABIInternal} InlinabilityChecked IsHiddenClosure FUNC-func() # t.go:6\n.   DCL p(0x1400000c7f8) # t.go:7\n.   .   NAME-p.a p(0x140003bf930) defn(0x140003c0ff0) curfn(0x1400013ab00) esc(no) tc(1) Class:PAUTO Offset:0 OnStack Used int # t.go:7\n.   AS p(0x140003c0ff0) tc(1) Def # t.go:7\n.   .   NAME-p.a p(0x140003bf930) defn(0x140003c0ff0) curfn(0x1400013ab00) esc(no) tc(1) Class:PAUTO Offset:0 OnStack Used int # t.go:7\n.   .   LITERAL-1 p(0x140003ce4e0) tc(1) int # t.go:7\n.   DCL p(0x1400000c810) # t.go:8\n.   .   NAME-p.b p(0x140003bfa00) defn(0x140003ce540) curfn(0x1400013ab00) esc(no) tc(1) Class:PAUTO Offset:0 OnStack Used int # t.go:8\n.   AS2 p(0x140003ce540) tc(1) Def # t.go:8\n.   AS2-Lhs\n.   .   NAME-p.a p(0x140003bf930) defn(0x140003c0ff0) curfn(0x1400013ab00) esc(no) tc(1) Class:PAUTO Offset:0 OnStack Used int # t.go:7\n.   .   NAME-p.b p(0x140003bfa00) defn(0x140003ce540) curfn(0x1400013ab00) esc(no) tc(1) Class:PAUTO Offset:0 OnStack Used int # t.go:8\n.   AS2-Rhs\n.   .   LITERAL-2 p(0x140003ce5a0) tc(1) int # t.go:8\n.   .   LITERAL-2 p(0x140003ce600) tc(1) int # t.go:8\n```",
      "parentUuid": "ff3d60f4_90fcd75f",
      "revId": "562f66b76461617383ceb5057c86856192c052cd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7a6517fd_8e037631",
        "filename": "src/cmd/compile/internal/inline/inl.go",
        "patchSetId": 5
      },
      "lineNbr": 1413,
      "author": {
        "id": 14665
      },
      "writtenOn": "2021-04-22T20:54:25Z",
      "side": 1,
      "message": "It\u0027s patchset 7 ðŸ˜Š",
      "parentUuid": "9ec94a81_29972a9a",
      "revId": "562f66b76461617383ceb5057c86856192c052cd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a4462064_086194bd",
        "filename": "src/cmd/compile/internal/inline/inl.go",
        "patchSetId": 5
      },
      "lineNbr": 1424,
      "author": {
        "id": 5440
      },
      "writtenOn": "2021-04-22T19:12:39Z",
      "side": 1,
      "message": "What if after this EditChildren call you add something like:\n\n```\nswitch m :\u003d m.(type) {\ncase *ir.AssignStmt:\n  if lhs, ok :\u003d m.X.(*ir.Name); ok \u0026\u0026 lhs.Defn \u003d\u003d n {\n    lhs.Defn \u003d m\n  }\ncase *ir.AssignListStmt:\n  for i, lhs :\u003d range m.Lhs {\n    if lhs, ok :\u003d lhs.(*ir.Name); ok \u0026\u0026 lhs.Defn \u003d\u003d n {\n      lhs.Defn \u003d m\n    }\n  }\n}\n```",
      "revId": "562f66b76461617383ceb5057c86856192c052cd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d2f8f890_fbae2209",
        "filename": "src/cmd/compile/internal/inline/inl.go",
        "patchSetId": 5
      },
      "lineNbr": 1424,
      "author": {
        "id": 14665
      },
      "writtenOn": "2021-04-22T19:20:10Z",
      "side": 1,
      "message": "hmm, I think we have to edit the inlvar.Defn, not the lhs.Defn?",
      "parentUuid": "a4462064_086194bd",
      "revId": "562f66b76461617383ceb5057c86856192c052cd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "950e8f78_9c9f25bc",
        "filename": "src/cmd/compile/internal/inline/inl.go",
        "patchSetId": 5
      },
      "lineNbr": 1424,
      "author": {
        "id": 5440
      },
      "writtenOn": "2021-04-22T19:29:00Z",
      "side": 1,
      "message": "I think as long as we do this rewrite after the EditChildren call, then m.X and m.Lhs will already point to the inlvar copies?",
      "parentUuid": "d2f8f890_fbae2209",
      "revId": "562f66b76461617383ceb5057c86856192c052cd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7424a680_adb0398a",
        "filename": "src/cmd/compile/internal/inline/inl.go",
        "patchSetId": 5
      },
      "lineNbr": 1424,
      "author": {
        "id": 14665
      },
      "writtenOn": "2021-04-22T19:43:57Z",
      "side": 1,
      "message": "\u003e  then m.X and m.Lhs will already point to the inlvar copies?\n\nAh right, but sounds like this is the problem. Because m.X is now the inlvar, then its Defn is not n anymore. n is the Defn of the substituted variable instead. That\u0027s why \"lhs.Defn \u003d\u003d n\" is false, and the code above make the compiler crash. So I think we still have to do this before ir.EditChildren.",
      "parentUuid": "950e8f78_9c9f25bc",
      "revId": "562f66b76461617383ceb5057c86856192c052cd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "96146217_77972f06",
        "filename": "src/cmd/compile/internal/inline/inl.go",
        "patchSetId": 5
      },
      "lineNbr": 1424,
      "author": {
        "id": 14665
      },
      "writtenOn": "2021-04-22T20:14:40Z",
      "side": 1,
      "message": "Hmm, whether I tried before or after ir.EditChildren, it won\u0027t work. The condition \"lhs.Defv \u003d\u003d n\" is failed in all cases.",
      "parentUuid": "7424a680_adb0398a",
      "revId": "562f66b76461617383ceb5057c86856192c052cd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "08a684d9_c4f3ca81",
        "filename": "src/cmd/compile/internal/inline/inl.go",
        "patchSetId": 5
      },
      "lineNbr": 1424,
      "author": {
        "id": 5440
      },
      "writtenOn": "2021-04-22T20:19:31Z",
      "side": 1,
      "message": "Hm, that\u0027s surprising. It seems like the code here has still more inconsistencies then.\n\nI\u0027m a bit out of ideas at the moment, sorry.",
      "parentUuid": "7424a680_adb0398a",
      "revId": "562f66b76461617383ceb5057c86856192c052cd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fcc0b900_438483fd",
        "filename": "src/cmd/compile/internal/inline/inl.go",
        "patchSetId": 5
      },
      "lineNbr": 1424,
      "author": {
        "id": 14665
      },
      "writtenOn": "2021-04-22T20:28:18Z",
      "side": 1,
      "message": "I think I know why. The inlvar.Defn is always point to the original node, not the one generated during inlining.\n\nI have an ideal ...",
      "parentUuid": "08a684d9_c4f3ca81",
      "revId": "562f66b76461617383ceb5057c86856192c052cd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4ba72500_af6a87f8",
        "filename": "src/cmd/compile/internal/inline/inl.go",
        "patchSetId": 5
      },
      "lineNbr": 1424,
      "author": {
        "id": 5440
      },
      "writtenOn": "2021-04-23T04:29:58Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "fcc0b900_438483fd",
      "revId": "562f66b76461617383ceb5057c86856192c052cd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}