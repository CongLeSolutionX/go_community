{
  "comments": [
    {
      "key": {
        "uuid": "5b971271_73bdf031",
        "filename": "src/runtime/os_windows.go",
        "patchSetId": 3
      },
      "lineNbr": 625,
      "author": {
        "id": 5070
      },
      "writtenOn": "2018-06-22T22:45:03Z",
      "side": 1,
      "message": "Introducing stackSizeFromPEHeader const just confuses me. I would just use 0 instead. People will lookup CreateThread documentation to see how it works.",
      "range": {
        "startLine": 625,
        "startChar": 7,
        "endLine": 625,
        "endChar": 28
      },
      "revId": "9aef855b3897472c0d46d0db992fdc930a1f74e3",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "348a7d19_ea7dda11",
        "filename": "src/runtime/os_windows.go",
        "patchSetId": 3
      },
      "lineNbr": 625,
      "author": {
        "id": 5167
      },
      "writtenOn": "2018-06-28T21:38:40Z",
      "side": 1,
      "message": "Okay.",
      "parentUuid": "5b971271_73bdf031",
      "range": {
        "startLine": 625,
        "startChar": 7,
        "endLine": 625,
        "endChar": 28
      },
      "revId": "9aef855b3897472c0d46d0db992fdc930a1f74e3",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a578d996_a59f8d8d",
        "filename": "src/runtime/os_windows.go",
        "patchSetId": 3
      },
      "lineNbr": 628,
      "author": {
        "id": 5070
      },
      "writtenOn": "2018-06-22T22:45:03Z",
      "side": 1,
      "message": "Why is that OK to replace _STACK_SIZE_PARAM_IS_A_RESERVATION with 0?",
      "range": {
        "startLine": 628,
        "startChar": 3,
        "endLine": 628,
        "endChar": 4
      },
      "revId": "9aef855b3897472c0d46d0db992fdc930a1f74e3",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d8f47e35_47369cb2",
        "filename": "src/runtime/os_windows.go",
        "patchSetId": 3
      },
      "lineNbr": 628,
      "author": {
        "id": 5167
      },
      "writtenOn": "2018-06-28T21:38:40Z",
      "side": 1,
      "message": "We\u0027re not passing a stack size, so this flag would be a no-op.",
      "parentUuid": "a578d996_a59f8d8d",
      "range": {
        "startLine": 628,
        "startChar": 3,
        "endLine": 628,
        "endChar": 4
      },
      "revId": "9aef855b3897472c0d46d0db992fdc930a1f74e3",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4c9f8673_a694eaaf",
        "filename": "src/runtime/os_windows.go",
        "patchSetId": 3
      },
      "lineNbr": 628,
      "author": {
        "id": 5070
      },
      "writtenOn": "2018-06-29T10:26:37Z",
      "side": 1,
      "message": "I don\u0027t think you are correct.\n\nFrom https://docs.microsoft.com/en-us/windows/desktop/api/processthreadsapi/nf-processthreadsapi-createthread\n```\nSTACK_SIZE_PARAM_IS_A_RESERVATION\n\nThe dwStackSize parameter specifies the initial reserve size of the stack. If this flag is not specified, dwStackSize specifies the commit size.\n```\nSo the fact that STACK_SIZE_PARAM_IS_A_RESERVATION is here, means we are not specifying \"stack size\" here, but \"initial reserve size of the stack\".\n\nI don\u0027t believe we have test for this, so we should be careful changing this flag. This flag controls how much real memory allocated at the start of a thread, and this will affect every Go program memory usage.",
      "parentUuid": "d8f47e35_47369cb2",
      "range": {
        "startLine": 628,
        "startChar": 3,
        "endLine": 628,
        "endChar": 4
      },
      "revId": "9aef855b3897472c0d46d0db992fdc930a1f74e3",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c53dab8e_f6e69e13",
        "filename": "src/runtime/os_windows.go",
        "patchSetId": 3
      },
      "lineNbr": 628,
      "author": {
        "id": 5167
      },
      "writtenOn": "2018-06-29T14:48:28Z",
      "side": 1,
      "message": "Interesting. But the documentation on dwStackSize says \"If this parameter is zero, the new thread uses the default size for the executable\" which is what I want. If I pass both 0 and STACK_SIZE_PARAM_IS_A_RESERVATION it seems like it would either 1) ignore the flag because it\u0027s using the defaults from the executable anyway (presumably for both the reserve and commit sizes), or 2) reserve 0 bytes for the stack, which would definitely be bad :)",
      "parentUuid": "4c9f8673_a694eaaf",
      "range": {
        "startLine": 628,
        "startChar": 3,
        "endLine": 628,
        "endChar": 4
      },
      "revId": "9aef855b3897472c0d46d0db992fdc930a1f74e3",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "049a35cd_57e05c99",
        "filename": "src/runtime/os_windows.go",
        "patchSetId": 3
      },
      "lineNbr": 628,
      "author": {
        "id": 5167
      },
      "writtenOn": "2018-06-29T14:54:52Z",
      "side": 1,
      "message": "Forgot to add: if I understand what you\u0027re saying, we do have tests for it: TestWindowsStackMemory and TestWindowsStackMemoryCgo. Each forces Go to create 100 threads and checks that the committed memory is small. Though TestWindowsStackMemoryCgo is marked as flaky (issue #22575, filed by you, actually :)",
      "parentUuid": "c53dab8e_f6e69e13",
      "range": {
        "startLine": 628,
        "startChar": 3,
        "endLine": 628,
        "endChar": 4
      },
      "revId": "9aef855b3897472c0d46d0db992fdc930a1f74e3",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "40774133_5bb9951c",
        "filename": "src/runtime/os_windows.go",
        "patchSetId": 3
      },
      "lineNbr": 628,
      "author": {
        "id": 5070
      },
      "writtenOn": "2018-06-30T07:20:58Z",
      "side": 1,
      "message": "\u003e Interesting. But the documentation on dwStackSize says \"If this parameter is zero, the new thread uses the default size for the executable\" which is what I want. If I pass both 0 and STACK_SIZE_PARAM_IS_A_RESERVATION it seems like it would either 1) ignore the flag because it\u0027s using the defaults from the executable anyway (presumably for both the reserve and commit sizes), or 2) reserve 0 bytes for the stack, which would definitely be bad :)\n\nSorry I confused you. Your code does look right.\n\nOld code reserved 0x200000 bytes for amd64 by explicitly providing 0x200000 with STACK_SIZE_PARAM_IS_A_RESERVATION, and committed 0x1000 bytes (by virtue of using what SizeOfStackCommit says in PE file header).\n\nAnd your new code just asks for values as per what is in PE file header: reserved \u003d 0x200000 and committed 0x1000.\n\nFrom https://docs.microsoft.com/en-us/windows/desktop/ProcThread/thread-stack-size\n\nThe default size for the reserved and initially committed stack memory is specified in the executable file header. \n...\nTo change the initially committed stack space, use the dwStackSize parameter of the CreateThread\n...\nTo change the reserved stack size, set the dwCreationFlags parameter of CreateThread or CreateRemoteThread to STACK_SIZE_PARAM_IS_A_RESERVATION and use the dwStackSize parameter.\n\n\u003e Forgot to add: if I understand what you\u0027re saying, we do have tests for it: TestWindowsStackMemory and TestWindowsStackMemoryCgo. Each forces Go to create 100 threads and checks that the committed memory is small. Though TestWindowsStackMemoryCgo is marked as flaky (issue #22575, filed by you, actually :)\n\nYes, I was remembering we, probably, had a test like that. I worry too much (and it was Friday evening when I reviewed your code last).",
      "parentUuid": "049a35cd_57e05c99",
      "range": {
        "startLine": 628,
        "startChar": 3,
        "endLine": 628,
        "endChar": 4
      },
      "revId": "9aef855b3897472c0d46d0db992fdc930a1f74e3",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8692dc75_8b59ae28",
        "filename": "src/runtime/os_windows.go",
        "patchSetId": 3
      },
      "lineNbr": 699,
      "author": {
        "id": 5070
      },
      "writtenOn": "2018-06-22T22:45:03Z",
      "side": 1,
      "message": "You can call GetLastError to get details about why VirtualQuery failed, if you want. And print it as part of throw message.",
      "revId": "9aef855b3897472c0d46d0db992fdc930a1f74e3",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "370b5abd_8438454e",
        "filename": "src/runtime/os_windows.go",
        "patchSetId": 3
      },
      "lineNbr": 699,
      "author": {
        "id": 5167
      },
      "writtenOn": "2018-06-28T21:38:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8692dc75_8b59ae28",
      "revId": "9aef855b3897472c0d46d0db992fdc930a1f74e3",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c0039fdf_374761b8",
        "filename": "src/runtime/os_windows.go",
        "patchSetId": 3
      },
      "lineNbr": 701,
      "author": {
        "id": 5070
      },
      "writtenOn": "2018-06-22T22:45:03Z",
      "side": 1,
      "message": "Why adding 1024. You need some comment to explain.",
      "revId": "9aef855b3897472c0d46d0db992fdc930a1f74e3",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3fa5cd67_94ee9fd8",
        "filename": "src/runtime/os_windows.go",
        "patchSetId": 3
      },
      "lineNbr": 701,
      "author": {
        "id": 5167
      },
      "writtenOn": "2018-06-28T21:38:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c0039fdf_374761b8",
      "revId": "9aef855b3897472c0d46d0db992fdc930a1f74e3",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}