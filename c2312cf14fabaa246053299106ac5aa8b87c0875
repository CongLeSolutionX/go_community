{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "ba48a8e3_53570b67",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-09-23T06:39:57Z",
      "side": 1,
      "message": "SlowBots beginning. Status page: https://farmer.golang.org/try?commit\u003dc2312cf1\nNote that builder plan9-arm has known issues:\n\thttps://go.dev/issue/49338\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "c2312cf14fabaa246053299106ac5aa8b87c0875",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "61ddc0f5_730fc5dc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 34895
      },
      "writtenOn": "2023-09-26T04:17:00Z",
      "side": 1,
      "message": "Thanks.",
      "revId": "c2312cf14fabaa246053299106ac5aa8b87c0875",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d6326a77_cdbf92ff",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-09-27T02:16:15Z",
      "side": 1,
      "message": "SlowBots are happy.\n\nSlowBot builds that ran:\n* android-amd64-emu\n* darwin-amd64-13\n* freebsd-amd64-13_0\n* illumos-amd64\n* ios-arm64-corellium\n* netbsd-amd64-9_3\n* openbsd-amd64-72\n* plan9-arm\n* solaris-amd64-oraclerel\n",
      "parentUuid": "ba48a8e3_53570b67",
      "tag": "autogenerated:trybots~happy",
      "revId": "c2312cf14fabaa246053299106ac5aa8b87c0875",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "76640dc7_ed0409ca",
        "filename": "src/net/lookup_windows.go",
        "patchSetId": 6
      },
      "lineNbr": 224,
      "author": {
        "id": 6365
      },
      "writtenOn": "2023-09-27T13:15:35Z",
      "side": 1,
      "message": "It looks like the change here will cause us to no longer mark the error `IsNotFound` for the `WSAHOST_NOT_FOUND` error code. Is that intentional?\n\nIf so, it probably merits a code comment.",
      "revId": "c2312cf14fabaa246053299106ac5aa8b87c0875",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "90637e61_10bb7fc5",
        "filename": "src/net/lookup_windows.go",
        "patchSetId": 6
      },
      "lineNbr": 224,
      "author": {
        "id": 55874
      },
      "writtenOn": "2023-09-27T13:46:00Z",
      "side": 1,
      "message": "\u003e It looks like the change here will cause us to no longer mark the error IsNotFound for the WSAHOST_NOT_FOUND error code. Is that intentional?\n\nYes, the `_WSAHOST_NOT_FOUND` does not seem to be returned in this case.\n\n\u003e If so, it probably merits a code comment.\n\nDone",
      "parentUuid": "76640dc7_ed0409ca",
      "revId": "c2312cf14fabaa246053299106ac5aa8b87c0875",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2874fd4d_62d675ee",
        "filename": "src/net/lookup_windows.go",
        "patchSetId": 6
      },
      "lineNbr": 224,
      "author": {
        "id": 6365
      },
      "writtenOn": "2023-09-27T14:51:36Z",
      "side": 1,
      "message": "https://learn.microsoft.com/en-us/windows/win32/api/ws2tcpip/nf-ws2tcpip-getaddrinfow#return-value explicitly mentions both `WSAHOST_NOT_FOUND` (corresponding to `EAI_NONAME`) and `WSATYPE_NOT_FOUND` (corresponding to `EAI_SERVICE`).\n\nThe `cgoLookupServicePort` implementation checks for both `EAI_NONANE` and `EAI_SERVICE`, so the Windows implementation should check for both of the `WSA` equivalents.\n\nAnd please ensure that the `EAI_NONAME` error code is covered by a port-independent integration test. (The fact that this passed the Windows TryBot run is not reassuring.)",
      "parentUuid": "90637e61_10bb7fc5",
      "revId": "c2312cf14fabaa246053299106ac5aa8b87c0875",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b9af67dd_0b2f14f8",
        "filename": "src/net/lookup_windows.go",
        "patchSetId": 6
      },
      "lineNbr": 224,
      "author": {
        "id": 55874
      },
      "writtenOn": "2023-09-27T15:18:13Z",
      "side": 1,
      "message": "\u003e The cgoLookupServicePort implementation checks for both EAI_NONANE and EAI_SERVICE, so the Windows implementation should check for both of the WSA equivalents.\n\n`cgoLookupServicePort` checks for `EAI_NONANE`, because darwin returns it for some reason, instead of the `EAI_SERVICE` (as other unix systems do).\n\n\u003e And please ensure that the EAI_NONAME error code is covered by a port-independent integration test. (The fact that this passed the Windows TryBot run is not reassuring.)\n\nHow would you trigger the `EAI_NONAME` error? It is only returned on darwin for some reason.\n\nWe might instead check for `EAI_NONAME` only on darwin.",
      "parentUuid": "2874fd4d_62d675ee",
      "revId": "c2312cf14fabaa246053299106ac5aa8b87c0875",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "91bee1b7_632c7105",
        "filename": "src/net/lookup_windows.go",
        "patchSetId": 6
      },
      "lineNbr": 224,
      "author": {
        "id": 6365
      },
      "writtenOn": "2023-09-27T18:47:59Z",
      "side": 1,
      "message": "Huh, interesting.\n\nOn the one hand, these calls to `getaddrinfo` or `GetAddrInfoW` appear to always supply a non-nil (but not necessarily positive-length?) argument for `servname` or `pServiceName` respectively.\n\nOn the other hand, POSIX is not exactly unambiguous about the meaning of “The name does not resolve for the supplied parameters”:\n“If `nodename` [is null], the requested service location is local to the caller.”\n\nFor example, if the `ai_family` hint is set to `_C_AF_INET6` and the host (or container) has no IPv6 interfaces configured, couldn\u0027t that result in a failure to resolve a name for an interface “local to the caller”, and therefore qualify as `EAI_NONAME`?\n\nAs an added wrinkle, though, we currently set the `ai_family` hint to a specific address family on Unix, but set it to `AF_UNSPEC` on Windows:\nhttps://cs.opensource.google/go/go/+/master:src/net/lookup_windows.go;l\u003d210;drc\u003d071aed2aaa0ed819582c5bff44b70d43c61f504a\nThat seems likely to be a bug.\n\nAt any rate: I think I do agree that it isn\u0027t practical to reproduce the `EAI_NONAME` return value in a portable test — but I also still think it would be more robust to explicitly check for `WSAHOST_NOT_FOUND` here as well.",
      "parentUuid": "b9af67dd_0b2f14f8",
      "revId": "c2312cf14fabaa246053299106ac5aa8b87c0875",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}