{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "8238d045_23102f18",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 24534
      },
      "writtenOn": "2023-08-21T02:12:21Z",
      "side": 1,
      "message": "Since the source is an integer constant, I wonder if using MOVZ and MOVK instructions is more efficient. ADRP+ADD+LDR theoretically costs 6 cycles, move an integer into a general purpose register costs at most 4 instructions, namely 4 cycles. In addition we need one instruction to move the value from the general purpose register to floating-pointer register. So at most 5 cycles.\nFor VMOVS, moving a 32-bit integer takes at most 2 movX instructions.",
      "range": {
        "startLine": 10,
        "startChar": 39,
        "endLine": 10,
        "endChar": 50
      },
      "revId": "fa085b4b3875df0d8be4a6ffa15c2891f83fd764",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3847b03c_c405641d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 13640
      },
      "writtenOn": "2023-08-21T07:46:12Z",
      "side": 1,
      "message": "I did consider this, however I cannot find anywhere that these instructions are used in Go or golang.org/x/crypto (so optimising highly does not seem justified). Also, unless I\u0027m missing something, the move from a general register to a vector register is 3-4 cycles - the main gain is likely to be that the instruction text probably has lower load latency than an arbitrary read from memory. The flip side is that we have larger text and do not benefit from the content addressable symbols, which can provide deduplication, etc.",
      "parentUuid": "8238d045_23102f18",
      "range": {
        "startLine": 10,
        "startChar": 39,
        "endLine": 10,
        "endChar": 50
      },
      "revId": "fa085b4b3875df0d8be4a6ffa15c2891f83fd764",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5a86a969_83ebf891",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 24534
      },
      "writtenOn": "2023-08-21T08:04:31Z",
      "side": 1,
      "message": "\u003e the move from a general register to a vector register is 3-4 cycles\n\nOh yes you are right, I mistook FMOV for one cycle. Thanks.",
      "parentUuid": "3847b03c_c405641d",
      "range": {
        "startLine": 10,
        "startChar": 39,
        "endLine": 10,
        "endChar": 50
      },
      "revId": "fa085b4b3875df0d8be4a6ffa15c2891f83fd764",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dfc1f426_59eac1a1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-08-04T09:11:26Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003dfa085b4b\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "fa085b4b3875df0d8be4a6ffa15c2891f83fd764",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "91f76e46_c7b81656",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-08-04T09:23:40Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "dfc1f426_59eac1a1",
      "tag": "autogenerated:trybots~happy",
      "revId": "fa085b4b3875df0d8be4a6ffa15c2891f83fd764",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}