{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "7c5a4504_72b23097",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 7,
      "author": {
        "id": 5137
      },
      "writtenOn": "2020-09-24T22:49:56Z",
      "side": 1,
      "message": "testing: reduce T.Helper allocations by lazily resolving program counter callers",
      "revId": "b0245bf576a8a13d13135b6a65e8323b936ee4e9",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b9a8b601_3c80f3fb",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 12,
      "author": {
        "id": 5206
      },
      "writtenOn": "2020-09-25T01:31:14Z",
      "side": 1,
      "message": "Just write Helper with the parentheses.  We usually omit them in Go as godoc does not pay attention to them.",
      "revId": "b0245bf576a8a13d13135b6a65e8323b936ee4e9",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ce3fb8bf_f6bbc455",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5137
      },
      "writtenOn": "2020-09-24T22:13:24Z",
      "side": 1,
      "message": "Thank you for the rebase, Bryan! I\u0027ve added some reviews. For performance related changes, please\npost in the commit messages the savings in time spent, memory conserved and operations conserved by (if you might not already know):\na) Running benchmarks before and after and saving them to files before.txt and after.txt respectively\nb) Using https://godoc.org/golang.org/x/perf/cmd/benchstat, run benchstat before.txt after.txt\nc) Paste the results summary at the end of your commit message\n\nthat\u0027ll ensure objective discernment, but also a nice summary for users and maintainers alike.",
      "revId": "b0245bf576a8a13d13135b6a65e8323b936ee4e9",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2104d9ea_25f5d324",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5137
      },
      "writtenOn": "2020-09-24T22:36:55Z",
      "side": 1,
      "message": "I\u0027ve mailed CL 57317, which after it has been merged and rebased, you\u0027ll be able to\nrun the benchmark and the results of your CL are nice, like this:\n\nname      old time/op    new time/op    delta\nHelper-8    1.00µs ±32%    0.37µs ± 5%   -63.17%  (p\u003d0.000 n\u003d10+10)\n\nname      old alloc/op   new alloc/op   delta\nHelper-8      216B ± 0%        0B       -100.00%  (p\u003d0.000 n\u003d10+10)\n\nname      old allocs/op  new allocs/op  delta\nHelper-8      2.00 ± 0%      0.00       -100.00%  (p\u003d0.000 n\u003d10+10)\n\n\nWell done!",
      "revId": "b0245bf576a8a13d13135b6a65e8323b936ee4e9",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e513ed01_1f91443f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5137
      },
      "writtenOn": "2020-09-24T22:37:30Z",
      "side": 1,
      "message": "Rather CL 257317",
      "parentUuid": "2104d9ea_25f5d324",
      "revId": "b0245bf576a8a13d13135b6a65e8323b936ee4e9",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ef5fe684_6ad70f1e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5137
      },
      "writtenOn": "2020-09-24T22:49:56Z",
      "side": 1,
      "message": "Nice change, and let\u0027s wait until the benchmark is merged and then rebase, paste the results, re-run and then we\u0027ll be gucci to go. Thank you!",
      "revId": "b0245bf576a8a13d13135b6a65e8323b936ee4e9",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6891a977_583298ef",
        "filename": "src/testing/testing.go",
        "patchSetId": 3
      },
      "lineNbr": 748,
      "author": {
        "id": 5206
      },
      "writtenOn": "2020-09-25T01:31:14Z",
      "side": 1,
      "message": "This is a case where it is clearer to use make rather than forcing people to count curly braces.\n    helperNames :\u003d make(map[string]string{})\n\nSeparately, in the vast majority of cases len(c.helpers) \u003d\u003d 0.  May as well only make the map if we need it.  Otherwise it can just be nil.",
      "revId": "b0245bf576a8a13d13135b6a65e8323b936ee4e9",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aea65b9a_1af14363",
        "filename": "src/testing/testing.go",
        "patchSetId": 3
      },
      "lineNbr": 865,
      "author": {
        "id": 5206
      },
      "writtenOn": "2020-09-25T01:31:14Z",
      "side": 1,
      "message": "I\u0027m not sure I understand this.  Calls to Helper are rare.  Walking a stack frame is fast.  What are we saving here?",
      "revId": "b0245bf576a8a13d13135b6a65e8323b936ee4e9",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "22078d23_9bfadf20",
        "filename": "src/testing/testing.go",
        "patchSetId": 3
      },
      "lineNbr": 865,
      "author": {
        "id": 38590
      },
      "writtenOn": "2020-09-25T10:17:10Z",
      "side": 1,
      "message": "Using the \u0027testify\u0027 library, calling assert.NoError() every time round a loop is not rare.\nI did fix that specific issue - https://github.com/stretchr/testify/pull/933 - but a variant require.NoError() using the same library proved harder.\n\nSaving memory allocation; see other comment.",
      "parentUuid": "aea65b9a_1af14363",
      "revId": "b0245bf576a8a13d13135b6a65e8323b936ee4e9",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a95abc3d_5be9ff9d",
        "filename": "src/testing/testing.go",
        "patchSetId": 3
      },
      "lineNbr": 1015,
      "author": {
        "id": 5206
      },
      "writtenOn": "2020-09-25T01:31:14Z",
      "side": 1,
      "message": "I think this will do the wrong thing when helper functions are inlined.  We really do want to pass the full slice to CallersFrames.\n\nIn fact, this may be a problem with this whole approach.  In general a single PC value can represent a stack of inlined functions.  The purpose of using CallersFrames is to handle these stacks correctly.  I don\u0027t think we can skip that.\n\nI\u0027m also not sure where the memory allocation is here.  The strings returned by frame.Function are not allocated.",
      "revId": "b0245bf576a8a13d13135b6a65e8323b936ee4e9",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "840ddbd8_bdd58816",
        "filename": "src/testing/testing.go",
        "patchSetId": 3
      },
      "lineNbr": 1015,
      "author": {
        "id": 38590
      },
      "writtenOn": "2020-09-25T10:17:10Z",
      "side": 1,
      "message": "Sorry it\u0027s a while since I did this so I will have to figure out again why I thought it was ok to pass just one PC.\n\nOn the question about memory allocation, it\u0027s the return value from CallersFrames(), here:\n\n         .          .    997:func callerName(skip int) string {\n         .          .    998:   // Make room for the skip PC.\n    1.50MB     1.50MB    999:   var pc [1]uintptr\n         .          .   1000:   n :\u003d runtime.Callers(skip+2, pc[:]) // skip + runtime.Callers + callerName\n         .          .   1001:   if n \u003d\u003d 0 {\n         .          .   1002:           panic(\"testing: zero callers found\")\n         .          .   1003:   }\n   48.01MB    48.01MB   1004:   frames :\u003d runtime.CallersFrames(pc[:n])\n         .          .   1005:   frame, _ :\u003d frames.Next()\n         .          .   1006:   return frame.Function\n         .          .   1007:}\n\nMaybe, instead of all this, have a variant of CallersFrames() that takes the return *Frame as an argument?",
      "parentUuid": "a95abc3d_5be9ff9d",
      "revId": "b0245bf576a8a13d13135b6a65e8323b936ee4e9",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d7ce02b7_47807083",
        "filename": "src/testing/testing.go",
        "patchSetId": 3
      },
      "lineNbr": 1015,
      "author": {
        "id": 38590
      },
      "writtenOn": "2020-10-12T15:28:00Z",
      "side": 1,
      "message": "In callerName(), Callers() is given a slice of length 1, therefore the only possible values for n are 0 and 1. 0 is checked on the line above, therefore we know n is 1, and my change does not alter the behaviour.",
      "parentUuid": "840ddbd8_bdd58816",
      "revId": "b0245bf576a8a13d13135b6a65e8323b936ee4e9",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}