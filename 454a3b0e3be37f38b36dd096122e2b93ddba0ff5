{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "7829907c_40d23433",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 12
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-06-20T18:18:19Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003d454a3b0e\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "454a3b0e3be37f38b36dd096122e2b93ddba0ff5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3c2c91e4_141239b7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 12
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-06-20T18:32:21Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "7829907c_40d23433",
      "tag": "autogenerated:trybots~happy",
      "revId": "454a3b0e3be37f38b36dd096122e2b93ddba0ff5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d267ce3a_e762397f",
        "filename": "src/cmd/go/internal/modcmd/vendor.go",
        "patchSetId": 12
      },
      "lineNbr": 118,
      "author": {
        "id": 6365
      },
      "writtenOn": "2023-06-21T18:03:56Z",
      "side": 1,
      "message": "It\u0027s not obvious to me why we need both `(*MainModuleSet).GoStatement` and `(*MainModuleSet).GoVersion` — they produce the same result when a `go` version is present (which by now is “basically always”).\n\nIf it\u0027s important that we know whether the Go version was explicit, perhaps `GoVersion` should return a `(string, bool)` to indicate that (instead of just a `string`)?",
      "revId": "454a3b0e3be37f38b36dd096122e2b93ddba0ff5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "52b76207_1ee42d88",
        "filename": "src/cmd/go/internal/modcmd/vendor.go",
        "patchSetId": 12
      },
      "lineNbr": 189,
      "author": {
        "id": 6365
      },
      "writtenOn": "2023-06-20T21:41:32Z",
      "side": 1,
      "message": "(nit) In the baseline we always wrote unused replacements in the order in which they appeared in the original `go.mod` file.\n\nHowever, since in workspace mode we are now intermixing `replace` directives from multiple sources (potentially the `go.work` file and multiple `go.mod` files), we should probably enforce some kind of ordering on them. I think the ordering right now ends up a little haphazard, because we iterate over the `go.mod` files first but write out the replacement from the `go.work` file instead if one is present.\n\nPerhaps we should list the unused `go.work` entries first, followed by the entries for each `go.mod` file? Or perhaps we should sort the unused entries by path.",
      "revId": "454a3b0e3be37f38b36dd096122e2b93ddba0ff5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "47e6f2a1_d5a0b65f",
        "filename": "src/cmd/go/internal/modcmd/vendor.go",
        "patchSetId": 12
      },
      "lineNbr": 189,
      "author": {
        "id": 10033
      },
      "writtenOn": "2023-06-21T17:54:12Z",
      "side": 1,
      "message": "Does this work? I moved the workfile replacements first, and then we list the replacements that are not overridden from each of the go.mod files.",
      "parentUuid": "52b76207_1ee42d88",
      "revId": "454a3b0e3be37f38b36dd096122e2b93ddba0ff5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "651ae693_062eee81",
        "filename": "src/cmd/go/internal/modload/buildlist.go",
        "patchSetId": 12
      },
      "lineNbr": 219,
      "author": {
        "id": 6365
      },
      "writtenOn": "2023-06-21T18:03:56Z",
      "side": 1,
      "message": "We previously had the invariant that all of the modules in `rs.rootModules` are present in `mg.g` even in `vendor` mode. I think we have lost that property here.\n\nIn particular, I believe we have lost the `go` and/or` toolchain` roots added from the `go.work` file (although I would not want to fix that by hard-coding those specific targets here).\n\nPerhaps in workspace mode we need to call `mvs.NewGraph` with `rs.rootModules` instead of `MainModules.Versions()`?",
      "range": {
        "startLine": 215,
        "startChar": 0,
        "endLine": 219,
        "endChar": 39
      },
      "revId": "454a3b0e3be37f38b36dd096122e2b93ddba0ff5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9544ed4d_954a893f",
        "filename": "src/cmd/go/internal/modload/import.go",
        "patchSetId": 12
      },
      "lineNbr": 343,
      "author": {
        "id": 6365
      },
      "writtenOn": "2023-06-20T21:41:32Z",
      "side": 1,
      "message": "Mind adding a TODO here? I think there is an existing bug.\n\nIf someone manually added `.go` source files to `vendor/example.com/foo`,\nthis would result in `import \"example.com/foo\"` succeeding but reporting an empty module path for the imported package, which violates all kinds of internal invariants and could perhaps cause a panic somewhere down the line.\n\n(#45649 is related.)",
      "revId": "454a3b0e3be37f38b36dd096122e2b93ddba0ff5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4a678fb7_6a023db7",
        "filename": "src/cmd/go/internal/modload/import.go",
        "patchSetId": 12
      },
      "lineNbr": 343,
      "author": {
        "id": 10033
      },
      "writtenOn": "2023-06-21T17:54:12Z",
      "side": 1,
      "message": "Added.",
      "parentUuid": "9544ed4d_954a893f",
      "revId": "454a3b0e3be37f38b36dd096122e2b93ddba0ff5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "37694cc9_04d4a8c3",
        "filename": "src/cmd/go/internal/modload/import.go",
        "patchSetId": 12
      },
      "lineNbr": 345,
      "author": {
        "id": 6365
      },
      "writtenOn": "2023-06-20T21:41:32Z",
      "side": 1,
      "message": "The call to `filepath.Dir` here looks a little suspect.\nThat return value appears to only be used here:\nhttps://cs.opensource.google/go/go/+/master:src/cmd/go/internal/modload/load.go;l\u003d1805;drc\u003dce8146ed3361f584ba79427ac6c6d6fe9c297bea\n\nIt is fed as an input to `modload.scanDir`, which passes it to `modindex.GetPackage`. `GetPackage` calls `GetModule`, which then [returns an error](https://cs.opensource.google/go/go/+/refs/heads/master:src/cmd/go/internal/modindex/read.go;l\u003d156-161;drc\u003d98617fd23fa799173c33741987d41ee64cbb2a4f), causing `GetPackage` to fall back to per-package indexing. It isn\u0027t clear to me what the per-package indexer does with that information or whether there may be a bug there.\n\nAt any rate: I think I would find this less confusing if the path added to `roots` is the same as the third (`mdir`) argument passed to `dirInModule`, since that is the case for all of the other calls to `dirInModule` here.",
      "revId": "454a3b0e3be37f38b36dd096122e2b93ddba0ff5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "acf88e9f_b5dc8b34",
        "filename": "src/cmd/go/internal/modload/import.go",
        "patchSetId": 12
      },
      "lineNbr": 345,
      "author": {
        "id": 10033
      },
      "writtenOn": "2023-06-21T17:54:12Z",
      "side": 1,
      "message": "That\u0027s VendorDir(), right?",
      "parentUuid": "37694cc9_04d4a8c3",
      "revId": "454a3b0e3be37f38b36dd096122e2b93ddba0ff5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2f2868a8_3783f931",
        "filename": "src/cmd/go/internal/modload/init.go",
        "patchSetId": 12
      },
      "lineNbr": 1306,
      "author": {
        "id": 6365
      },
      "writtenOn": "2023-06-21T18:03:56Z",
      "side": 1,
      "message": "I wonder if the `go` and `toolchain` roots should be included in the slice returned by `rootsFromModFile`. That would provide a somewhat more realistic graph with workspace vendoring, although it\u0027s not obvious to me whether that realism is strictly necessary.",
      "range": {
        "startLine": 1295,
        "startChar": 0,
        "endLine": 1306,
        "endChar": 2
      },
      "revId": "454a3b0e3be37f38b36dd096122e2b93ddba0ff5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d2112f78_ff8f0780",
        "filename": "src/cmd/go/internal/modload/init.go",
        "patchSetId": 12
      },
      "lineNbr": 1315,
      "author": {
        "id": 6365
      },
      "writtenOn": "2023-06-21T18:03:56Z",
      "side": 1,
      "message": "A comment on the `2+` here would be helpful here — this extra padding is for the `go` and/or `toolchain` requirements added in `requirementsFromModFiles`, but that fact is no local local within the same scope.",
      "revId": "454a3b0e3be37f38b36dd096122e2b93ddba0ff5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}