{
  "comments": [
    {
      "key": {
        "uuid": "daf6169e_66b47736",
        "filename": "src/net/http/transport.go",
        "patchSetId": 1
      },
      "lineNbr": 508,
      "author": {
        "id": 6365
      },
      "writtenOn": "2020-01-08T19:36:11Z",
      "side": 1,
      "message": "What should we do if req.GetBody _is_ nil?\n\n(I think there is still a bug here: I suspect that we will still erroneously transmit the truncated body to the server.)",
      "revId": "81b1a2d16655b0e6dfe0c18b0f2e5199f458d93e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b727487b_f94c0289",
        "filename": "src/net/http/transport.go",
        "patchSetId": 1
      },
      "lineNbr": 508,
      "author": {
        "id": 13370
      },
      "writtenOn": "2020-01-09T08:37:13Z",
      "side": 1,
      "message": "Seems like you are right, but I\u0027m not sure how to fix this specific case.\n\nWe can\u0027t just return an error here because we are not sure that body was even\ntouched. Without http2.Transport implementation details this rewind attempt makes no sense,\nand there can (probably) be cases that we will rewind body when it is not needed, which can lead \nto performance degradation. Currently it even looks like an abstraction leak.\n\nProbably we should refactor interaction with RountTripper in such way \nthat we can explicitly check if body was already read. \n\nWhat do you think?",
      "parentUuid": "daf6169e_66b47736",
      "revId": "81b1a2d16655b0e6dfe0c18b0f2e5199f458d93e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fc61eac1_34f7c016",
        "filename": "src/net/http/transport.go",
        "patchSetId": 1
      },
      "lineNbr": 508,
      "author": {
        "id": 6365
      },
      "writtenOn": "2020-01-09T14:10:18Z",
      "side": 1,
      "message": "Since the RoundTrip contract requires that it close the Body, we can be confident that the body is not safe to use after the call to RoundTrip returns. The way the interface is defined, there is no other option.\n\nThat implies that if RoundTrip returns ErrSkipAltProtocol and req.GetBody is nil, we must fail the top-level RoundTrip call with some sort of internal error: we have no way to safely retry it.\n\nIf we want to make it possible for a RoundTripper implementation to decline the Request without reading the Body, I think we will need to add a new (optional) method that a RoundTripper can implement to probe the Request without actually consuming it.",
      "parentUuid": "b727487b_f94c0289",
      "revId": "81b1a2d16655b0e6dfe0c18b0f2e5199f458d93e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "537d00ba_69df5b6d",
        "filename": "src/net/http/transport.go",
        "patchSetId": 1
      },
      "lineNbr": 509,
      "author": {
        "id": 5065
      },
      "writtenOn": "2020-01-06T23:37:06Z",
      "side": 1,
      "message": "I think we want a req.closeBody() call before we reassign the req, just in case the other RoundTripper didn\u0027t.\n\nAnd looking at the http2.Transport, I don\u0027t see where it does?\n\nI\u0027m more concerned about missing closes than I am about double closes. Double closes are kinda okay and I have a plan for how to address them all at once in a future release (basically adding a sync.Once-like atomic unexported field to net/http.Request, and making body closes go through a helper CAS method) .",
      "revId": "81b1a2d16655b0e6dfe0c18b0f2e5199f458d93e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e25683e4_7f50c2cd",
        "filename": "src/net/http/transport.go",
        "patchSetId": 1
      },
      "lineNbr": 509,
      "author": {
        "id": 6365
      },
      "writtenOn": "2020-01-08T19:36:11Z",
      "side": 1,
      "message": "\u003e I think we want a req.closeBody() call before we reassign the req, just in case the other RoundTripper didn\u0027t.\n\nThe documentation for RoundTripper says “RoundTrip must always close the body, including on errors”, so it should be safe to assume that the other RoundTripper did indeed close the body. (And if that ever fails to hold, we should fix the RoundTripper implementation.)\n\n\u003e And looking at the http2.Transport, I don\u0027t see where it does?\n\nPerhaps one of these?\n\nhttps://github.com/golang/net/blob/c0dbc17a35534bf2e581d7a942408dc936316da4/http2/transport.go#L1045\nhttps://github.com/golang/net/blob/c0dbc17a35534bf2e581d7a942408dc936316da4/http2/transport.go#L1248\n\n\n\u003e I\u0027m more concerned about missing closes than I am about double closes. Double closes are kinda okay and I have a plan for how to address them all at once in a future release (basically adding a sync.Once-like atomic unexported field to net/http.Request, and making body closes go through a helper CAS method) .\n\nI don\u0027t think double-closes are ok either: the Close implementations in the standard library tend to be very forgiving, but the io.Closer interface doesn\u0027t specify that behavior at all, so valid implementations may (and some do) panic or deadlock.",
      "parentUuid": "537d00ba_69df5b6d",
      "revId": "81b1a2d16655b0e6dfe0c18b0f2e5199f458d93e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7cd26e24_dc318ba6",
        "filename": "src/net/http/transport.go",
        "patchSetId": 1
      },
      "lineNbr": 509,
      "author": {
        "id": 6365
      },
      "writtenOn": "2020-01-08T19:37:28Z",
      "side": 1,
      "message": "(https://golang.org/issue/25390#issuecomment-390768893 is relevant here.)",
      "parentUuid": "e25683e4_7f50c2cd",
      "revId": "81b1a2d16655b0e6dfe0c18b0f2e5199f458d93e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d1450102_20d19dda",
        "filename": "src/net/http/transport_test.go",
        "patchSetId": 1
      },
      "lineNbr": 6064,
      "author": {
        "id": 6365
      },
      "writtenOn": "2020-01-08T19:36:11Z",
      "side": 1,
      "message": "Please also test the behavior for a non-resettable body.\n\n(Wrapping the body in a `struct{ io.Reader }` should suffice.)",
      "range": {
        "startLine": 6064,
        "startChar": 57,
        "endLine": 6064,
        "endChar": 86
      },
      "revId": "81b1a2d16655b0e6dfe0c18b0f2e5199f458d93e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    }
  ]
}