{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "d1f6b32b_d4f07eae",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 24
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-02-14T02:54:53Z",
      "side": 1,
      "message": "Superseded.",
      "parentUuid": "8f062159_07afa032",
      "tag": "autogenerated:trybots~beginning",
      "revId": "6993a41315c7733e8b5df8f0e399aa4aa9e49825",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "76c9028c_3ad4f84d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 24
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-02-14T02:54:53Z",
      "side": 1,
      "message": "SlowBots beginning. Status page: https://farmer.golang.org/try?commit\u003d6993a413\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "6993a41315c7733e8b5df8f0e399aa4aa9e49825",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "32412b56_83d3ede0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 24
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-02-14T03:06:07Z",
      "side": 1,
      "message": "SlowBots are happy.\n\nSlowBot builds that ran:\n* linux-amd64\n",
      "parentUuid": "76c9028c_3ad4f84d",
      "tag": "autogenerated:trybots~happy",
      "revId": "6993a41315c7733e8b5df8f0e399aa4aa9e49825",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "faf50427_b2a0d649",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 24
      },
      "lineNbr": 0,
      "author": {
        "id": 34725
      },
      "writtenOn": "2023-02-14T03:09:37Z",
      "side": 1,
      "message": "Hi Ian, I think we\u0027re good to go.",
      "revId": "6993a41315c7733e8b5df8f0e399aa4aa9e49825",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "33eecfeb_9eaba1c9",
        "filename": "src/internal/reflectlite/value.go",
        "patchSetId": 24
      },
      "lineNbr": 446,
      "author": {
        "id": 5206
      },
      "writtenOn": "2023-02-14T03:22:35Z",
      "side": 1,
      "message": "This is minor, but we shouldn\u0027t need Indirect.  We know the exact types that we are using.  Indirect is only useful if you don\u0027t know whether a field is a pointer or not.  If you know it\u0027s not a pointer, don\u0027t call Indirect.  If you know it\u0027s a pointer, call Elem.",
      "revId": "6993a41315c7733e8b5df8f0e399aa4aa9e49825",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ff0b2a6a_05e5b951",
        "filename": "src/internal/reflectlite/value.go",
        "patchSetId": 24
      },
      "lineNbr": 446,
      "author": {
        "id": 34725
      },
      "writtenOn": "2023-02-14T04:08:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "33eecfeb_9eaba1c9",
      "revId": "6993a41315c7733e8b5df8f0e399aa4aa9e49825",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "15cce74f_d6380000",
        "filename": "src/net/splice_test.go",
        "patchSetId": 24
      },
      "lineNbr": 113,
      "author": {
        "id": 5206
      },
      "writtenOn": "2023-02-14T03:22:35Z",
      "side": 1,
      "message": "Minor, but this error is never going to happen in practice, so just t.Fatal(err) is fine.",
      "revId": "6993a41315c7733e8b5df8f0e399aa4aa9e49825",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4dcd6663_01bc10e9",
        "filename": "src/net/splice_test.go",
        "patchSetId": 24
      },
      "lineNbr": 113,
      "author": {
        "id": 34725
      },
      "writtenOn": "2023-02-14T04:08:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "15cce74f_d6380000",
      "revId": "6993a41315c7733e8b5df8f0e399aa4aa9e49825",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "712b2de2_eb2e3a1c",
        "filename": "src/net/splice_test.go",
        "patchSetId": 24
      },
      "lineNbr": 116,
      "author": {
        "id": 5206
      },
      "writtenOn": "2023-02-14T03:22:35Z",
      "side": 1,
      "message": "I don\u0027t see anything calling client.Close.",
      "revId": "6993a41315c7733e8b5df8f0e399aa4aa9e49825",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b48ddcc4_44431a24",
        "filename": "src/net/splice_test.go",
        "patchSetId": 24
      },
      "lineNbr": 116,
      "author": {
        "id": 34725
      },
      "writtenOn": "2023-02-14T04:08:02Z",
      "side": 1,
      "message": "client is closed in cleanup(), no need to call client.Close() explicitly.",
      "parentUuid": "712b2de2_eb2e3a1c",
      "revId": "6993a41315c7733e8b5df8f0e399aa4aa9e49825",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "140d492a_3b2daf7c",
        "filename": "src/net/splice_test.go",
        "patchSetId": 24
      },
      "lineNbr": 150,
      "author": {
        "id": 5206
      },
      "writtenOn": "2023-02-14T03:22:35Z",
      "side": 1,
      "message": "This is just printing numbers, so no need for the newlines.  And put got before want.\n\n    t.Errorf(\"got %d bytes, want %d\", got, want)",
      "revId": "6993a41315c7733e8b5df8f0e399aa4aa9e49825",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "50f01c06_16b0a41d",
        "filename": "src/net/splice_test.go",
        "patchSetId": 24
      },
      "lineNbr": 150,
      "author": {
        "id": 34725
      },
      "writtenOn": "2023-02-14T04:08:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "140d492a_3b2daf7c",
      "revId": "6993a41315c7733e8b5df8f0e399aa4aa9e49825",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a4423a20_1da45390",
        "filename": "src/net/splice_test.go",
        "patchSetId": 24
      },
      "lineNbr": 154,
      "author": {
        "id": 5206
      },
      "writtenOn": "2023-02-14T03:22:35Z",
      "side": 1,
      "message": "How can this be true?  We changed actualSize above.",
      "revId": "6993a41315c7733e8b5df8f0e399aa4aa9e49825",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bd3513ce_806081e2",
        "filename": "src/net/splice_test.go",
        "patchSetId": 24
      },
      "lineNbr": 154,
      "author": {
        "id": 34725
      },
      "writtenOn": "2023-02-14T04:08:02Z",
      "side": 1,
      "message": "It will be true when `tc.limitReadSize \u003e tc.totalSize`: https://go.googlesource.com/go/+/eb40f9146bcc0e6eaf28d8d380c14150a4a213d3/src/net/splice_test.go#37",
      "parentUuid": "a4423a20_1da45390",
      "revId": "6993a41315c7733e8b5df8f0e399aa4aa9e49825",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "09a7401f_986fc436",
        "filename": "src/net/splice_test.go",
        "patchSetId": 24
      },
      "lineNbr": 508,
      "author": {
        "id": 5206
      },
      "writtenOn": "2023-02-14T03:22:35Z",
      "side": 1,
      "message": "b.Fatalf(err)",
      "revId": "6993a41315c7733e8b5df8f0e399aa4aa9e49825",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cff0cc8f_fc195bc9",
        "filename": "src/net/splice_test.go",
        "patchSetId": 24
      },
      "lineNbr": 508,
      "author": {
        "id": 34725
      },
      "writtenOn": "2023-02-14T04:08:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "09a7401f_986fc436",
      "revId": "6993a41315c7733e8b5df8f0e399aa4aa9e49825",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b8148462_d742b74e",
        "filename": "src/os/readfrom_linux.go",
        "patchSetId": 24
      },
      "lineNbr": 23,
      "author": {
        "id": 5206
      },
      "writtenOn": "2023-02-14T03:22:35Z",
      "side": 1,
      "message": "I think we should put everything below here into a different method, so that readFrom tries copyFileRange then tries the other method.\n\n    written, handled, err \u003d f.copyFileRange(r)\n    if handled {\n        return\n    }\n    return f.spliceToFile(r)",
      "revId": "6993a41315c7733e8b5df8f0e399aa4aa9e49825",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "546d4349_a33635c3",
        "filename": "src/os/readfrom_linux.go",
        "patchSetId": 24
      },
      "lineNbr": 23,
      "author": {
        "id": 34725
      },
      "writtenOn": "2023-02-14T04:08:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b8148462_d742b74e",
      "revId": "6993a41315c7733e8b5df8f0e399aa4aa9e49825",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5e259551_a0f47165",
        "filename": "src/os/readfrom_linux.go",
        "patchSetId": 24
      },
      "lineNbr": 49,
      "author": {
        "id": 5206
      },
      "writtenOn": "2023-02-14T03:22:35Z",
      "side": 1,
      "message": "I think this will be clearer if you separate the function definition from the call.\n\n    checkIsStream :\u003d func(fd int) bool { ... }\n    isStream :\u003d checkIsStream(rfd)",
      "revId": "6993a41315c7733e8b5df8f0e399aa4aa9e49825",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "66f2a335_1069b0b0",
        "filename": "src/os/readfrom_linux.go",
        "patchSetId": 24
      },
      "lineNbr": 49,
      "author": {
        "id": 34725
      },
      "writtenOn": "2023-02-14T04:08:02Z",
      "side": 1,
      "message": "How about I just define an explict function outside?\n\n`func checkIfStream(int) bool`",
      "parentUuid": "5e259551_a0f47165",
      "revId": "6993a41315c7733e8b5df8f0e399aa4aa9e49825",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2d7a08e3_1f3f8ee6",
        "filename": "src/os/readfrom_linux.go",
        "patchSetId": 24
      },
      "lineNbr": 92,
      "author": {
        "id": 5206
      },
      "writtenOn": "2023-02-14T03:22:35Z",
      "side": 1,
      "message": "When using the reflect package this code relies on a special exception implemented in the compiler.  Is that exception also implemented for internal/reflectlite?\n\nIt might be better to use vpfd.Addr().Pointer(), although that will require different methods in internal/reflectlite.\n\nBut actually, thinking about it, I think this can be simpler.  The types are\n\n    type TCPSock { conn }\n    type conn { fd *netFD }\n    type netFD { pfd poll.FD; ... }\n\nThe value we want should be\n\n    reflectlite.ValueOf(tcp).Elem().Field(0).Field(0).UnsafePointer()",
      "revId": "6993a41315c7733e8b5df8f0e399aa4aa9e49825",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ddd9b143_eee693e8",
        "filename": "src/os/readfrom_linux.go",
        "patchSetId": 24
      },
      "lineNbr": 92,
      "author": {
        "id": 34725
      },
      "writtenOn": "2023-02-14T04:08:02Z",
      "side": 1,
      "message": "Actually, I intended to introduce the `UnsafePointer` in the first place, but that needs more extra functions from `reflect` package, such as `verifyNotInHeapPtr` and `methodValueCallCodePtr`, it just seemed to be a bit more tedious for `internal/reflectlite`, `UnsafeAddr` is just way more straightforward cuz we\u0027ve already known the type.\n\nBesides, even if we do introduce `UnsafePointer`, your way `reflectlite.ValueOf(tcp).Elem().Field(0).Field(0).UnsafePointer()` is also not workable cuz we need a pointer type for `UnsafePointer` and `pfd` in `netFD` is a struct, so we still need `Value.Addr` which also introduces new functions `func (t *rtype) ptrTo() *rtype` into `internal/reflectlite`.",
      "parentUuid": "2d7a08e3_1f3f8ee6",
      "revId": "6993a41315c7733e8b5df8f0e399aa4aa9e49825",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b2b70648_c10de5c7",
        "filename": "src/os/readfrom_linux.go",
        "patchSetId": 24
      },
      "lineNbr": 92,
      "author": {
        "id": 34725
      },
      "writtenOn": "2023-02-14T04:15:14Z",
      "side": 1,
      "message": "Sorry, I misread `reflectlite.ValueOf(tcp).Elem().Field(0).Field(0).UnsafePointer()`, I assume that you were suggesting that we just call `UnsafePointer` on the `*netFD` cuz `pfd` is its first field with zero offset in memory, right?\n\nBut still, `UnsafePointer` will introduce some extra functions from `reflect`, is that OK?",
      "parentUuid": "ddd9b143_eee693e8",
      "revId": "6993a41315c7733e8b5df8f0e399aa4aa9e49825",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f4538425_1245c954",
        "filename": "src/os/readfrom_linux.go",
        "patchSetId": 24
      },
      "lineNbr": 92,
      "author": {
        "id": 5206
      },
      "writtenOn": "2023-02-14T04:22:51Z",
      "side": 1,
      "message": "Yeah, I guess those extra functions are OK.  Kind of a pain, I admit.",
      "parentUuid": "b2b70648_c10de5c7",
      "revId": "6993a41315c7733e8b5df8f0e399aa4aa9e49825",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "161939ae_05f186bf",
        "filename": "src/os/readfrom_linux_test.go",
        "patchSetId": 24
      },
      "lineNbr": 9,
      "author": {
        "id": 5206
      },
      "writtenOn": "2023-02-14T03:22:35Z",
      "side": 1,
      "message": "This import should be below the standard library imports, separated by a blank line.",
      "revId": "6993a41315c7733e8b5df8f0e399aa4aa9e49825",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2d0ff881_8c9daf4c",
        "filename": "src/os/readfrom_linux_test.go",
        "patchSetId": 24
      },
      "lineNbr": 9,
      "author": {
        "id": 34725
      },
      "writtenOn": "2023-02-14T04:08:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "161939ae_05f186bf",
      "revId": "6993a41315c7733e8b5df8f0e399aa4aa9e49825",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}