{
  "comments": [
    {
      "key": {
        "uuid": "8786cfa7_7a37490e",
        "filename": "src/runtime/mbitmap.go",
        "patchSetId": 2
      },
      "lineNbr": 213,
      "author": {
        "id": 5167
      },
      "writtenOn": "2017-02-09T21:17:34Z",
      "side": 1,
      "message": "Consider naming it ptr since it may not be a pointer to an object.",
      "revId": "f8676ac0657fe0a09144151115dbe54c940d387a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "232342fb_ecb925c7",
        "filename": "src/runtime/mbitmap.go",
        "patchSetId": 2
      },
      "lineNbr": 218,
      "author": {
        "id": 5167
      },
      "writtenOn": "2017-02-09T21:17:34Z",
      "side": 1,
      "message": "There\u0027s no point in making this nosplit if it\u0027s also systemstack, since the system stack can\u0027t grow anyway. (Actually, I\u0027m not sure what happens when you combine these... go:systemstack is implemented by tweaking the split stack prologue, but nosplit removes the prologue...)\n\nPlease add to the comment why this has to run on the system stack.",
      "revId": "f8676ac0657fe0a09144151115dbe54c940d387a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "55fc1d84_bcb43159",
        "filename": "src/runtime/mbitmap.go",
        "patchSetId": 2
      },
      "lineNbr": 225,
      "author": {
        "id": 5167
      },
      "writtenOn": "2017-02-09T21:17:34Z",
      "side": 1,
      "message": "This test and the next test are identical. I would lean toward keeping this one and dropping the next one since this is more explicit about what stack you\u0027re talking about (and just a few characters longer).",
      "revId": "f8676ac0657fe0a09144151115dbe54c940d387a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9158c588_973cf3f8",
        "filename": "src/runtime/mbitmap.go",
        "patchSetId": 2
      },
      "lineNbr": 239,
      "author": {
        "id": 5167
      },
      "writtenOn": "2017-02-09T21:17:34Z",
      "side": 1,
      "message": "I\u0027m surprised the inStack/inBss/inData tests aren\u0027t here, since those can only be satisfied if !inheap(obj) is true. (I know you experimented with this a lot, so maybe the way you have it turned out to be optimal?)",
      "revId": "f8676ac0657fe0a09144151115dbe54c940d387a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "680a30cf_6fddf88f",
        "filename": "src/runtime/mbitmap.go",
        "patchSetId": 2
      },
      "lineNbr": 242,
      "author": {
        "id": 5167
      },
      "writtenOn": "2017-02-09T21:17:34Z",
      "side": 1,
      "message": "Interesting. I would expect this to conservatively return true. Assuming it\u0027s important to return false here, could you add a comment explaining why?",
      "revId": "f8676ac0657fe0a09144151115dbe54c940d387a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d35134bf_12bfb375",
        "filename": "src/runtime/mbitmap.go",
        "patchSetId": 2
      },
      "lineNbr": 257,
      "author": {
        "id": 5167
      },
      "writtenOn": "2017-02-09T21:17:34Z",
      "side": 1,
      "message": "isPublic is required to run on the system stack (apparently), so it couldn\u0027t increase the stack size if it wanted to. A throw here should be fine.",
      "revId": "f8676ac0657fe0a09144151115dbe54c940d387a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bddc9e91_276de62b",
        "filename": "src/runtime/mbitmap.go",
        "patchSetId": 2
      },
      "lineNbr": 262,
      "author": {
        "id": 5167
      },
      "writtenOn": "2017-02-09T21:17:34Z",
      "side": 1,
      "message": "s.startindex * s.elemsize \u003c\u003d obj - s.base()\n\nAvoids the divide.",
      "revId": "f8676ac0657fe0a09144151115dbe54c940d387a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "25830d7b_307acaf8",
        "filename": "src/runtime/mbitmap.go",
        "patchSetId": 2
      },
      "lineNbr": 275,
      "author": {
        "id": 5167
      },
      "writtenOn": "2017-02-09T21:17:34Z",
      "side": 1,
      "message": "Why change this? The addb is much more readable and will get inlined to this.",
      "revId": "f8676ac0657fe0a09144151115dbe54c940d387a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "793983cc_29a1f72f",
        "filename": "src/runtime/mbitmap.go",
        "patchSetId": 2
      },
      "lineNbr": 285,
      "author": {
        "id": 5167
      },
      "writtenOn": "2017-02-09T21:17:34Z",
      "side": 1,
      "message": "addb(s.allocBits, whichByte)",
      "revId": "f8676ac0657fe0a09144151115dbe54c940d387a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "93b67155_71316002",
        "filename": "src/runtime/mheap.go",
        "patchSetId": 2
      },
      "lineNbr": 198,
      "author": {
        "id": 5167
      },
      "writtenOn": "2017-02-09T21:17:34Z",
      "side": 1,
      "message": "Following Go documentation convention, perhaps:\n\n// startindex is the object index where the owner G started allocating in this span.\n//\n// This is used in conjunction with nextUsedSpan to implement ROC checkpoints and recycles.\nspanindex uintptr\n\n// nextUsedSpan links together all spans that have the same span class and owner G.\nnextUsedSpan *mspan",
      "revId": "f8676ac0657fe0a09144151115dbe54c940d387a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1bd322b3_483a939d",
        "filename": "src/runtime/mheap.go",
        "patchSetId": 2
      },
      "lineNbr": 201,
      "author": {
        "id": 5167
      },
      "writtenOn": "2017-02-09T21:17:34Z",
      "side": 1,
      "message": "What is the \"current g\" in the context of a span? Maybe \"owner g\" would be a better term?",
      "revId": "f8676ac0657fe0a09144151115dbe54c940d387a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f29ec160_f96128a8",
        "filename": "src/runtime/stack.go",
        "patchSetId": 2
      },
      "lineNbr": 1231,
      "author": {
        "id": 5167
      },
      "writtenOn": "2017-02-09T21:17:34Z",
      "side": 1,
      "message": "Hmm. What if you\u0027re running on the g0 or gsignal stacks? What counts as the \"local\" stack in those cases? Currently this will return false for a pointer in the current user stack if you\u0027re on the system stack. Is that desired?",
      "revId": "f8676ac0657fe0a09144151115dbe54c940d387a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "99cde2c1_51f67aad",
        "filename": "src/runtime/stack.go",
        "patchSetId": 2
      },
      "lineNbr": 1236,
      "author": {
        "id": 5167
      },
      "writtenOn": "2017-02-09T21:17:34Z",
      "side": 1,
      "message": "Convention: s.lo \u003c\u003d p \u0026\u0026 p \u003c hi (too bad Go doesn\u0027t have s.lo \u003c\u003d p \u003c hi, but this is close)",
      "revId": "f8676ac0657fe0a09144151115dbe54c940d387a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    }
  ]
}