{
  "comments": [
    {
      "key": {
        "uuid": "664eb5a4_8db9ecf7",
        "filename": "src/cmd/go2go/testdata/go2path/src/slices/slices.go2",
        "patchSetId": 13
      },
      "lineNbr": 83,
      "author": {
        "id": 13220
      },
      "writtenOn": "2020-03-19T21:20:07Z",
      "side": 1,
      "message": "This is incorrect.\n\nMax([]int{Max([]int{}), -1}) should return -1 not 0 as it should be equivalent to Max([]int{-1}).\n\nWith 0 arguments, it needs to return the least element representable by Elem for that relation to hold.\n\nSimilarly, 0-arg Min needs to return the greatest element (and thus cannot be defined for strings).\n\nWithout a way to get those elements/require they exist, the only sensible courses of action here are to panic or to only provide binary Min/Max.",
      "range": {
        "startLine": 80,
        "startChar": 0,
        "endLine": 83,
        "endChar": 2
      },
      "revId": "9cdc3eebe88cca7b18df828c939b5bc3f1bf253d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3869fa25_f5954cc2",
        "filename": "src/cmd/go2go/testdata/go2path/src/slices/slices.go2",
        "patchSetId": 13
      },
      "lineNbr": 83,
      "author": {
        "id": 30903
      },
      "writtenOn": "2020-03-19T21:25:08Z",
      "side": 1,
      "message": "I think a better way than panicking is to change the function declaration:\n\nfunc Max(type Elem contracts.Ordered)(s0 Elem, sn ...Elem) Elem\nfunc Min(type Elem contracts.Ordered)(s0 Elem, sn ...Elem) Elem\n\nIn this case, the parameter set is guaranteed to have at least one argument, which is s0.\nIf len(sn) \u003d\u003d 0, then we can safely return s0.",
      "parentUuid": "664eb5a4_8db9ecf7",
      "range": {
        "startLine": 80,
        "startChar": 0,
        "endLine": 83,
        "endChar": 2
      },
      "revId": "9cdc3eebe88cca7b18df828c939b5bc3f1bf253d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6d242852_274a6760",
        "filename": "src/cmd/go2go/testdata/go2path/src/slices/slices.go2",
        "patchSetId": 13
      },
      "lineNbr": 83,
      "author": {
        "id": 13220
      },
      "writtenOn": "2020-03-19T21:37:57Z",
      "side": 1,
      "message": "It would work. I\u0027m not a fan of that in general since you have to do Max(ints[0], ints[1:]...) instead of Max(ints...) and you need to make sure len(ints) \u003e 0 in either case. Not a big deal as the common case would be Max(a, b, c, d)",
      "parentUuid": "3869fa25_f5954cc2",
      "range": {
        "startLine": 80,
        "startChar": 0,
        "endLine": 83,
        "endChar": 2
      },
      "revId": "9cdc3eebe88cca7b18df828c939b5bc3f1bf253d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8f5cf4b1_b43d0f17",
        "filename": "src/cmd/go2go/testdata/go2path/src/slices/slices.go2",
        "patchSetId": 13
      },
      "lineNbr": 83,
      "author": {
        "id": 5206
      },
      "writtenOn": "2020-03-19T21:40:17Z",
      "side": 1,
      "message": "1) We don\u0027t need to discuss the details of this code here.  These are just examples.  We can discuss if we ever try to add these to the standard library.\n2) The function behaves as documented.\n3) Max(s0, sn...) is not the maximum element of a slice, and is annoying to use if you have a slice.",
      "parentUuid": "3869fa25_f5954cc2",
      "range": {
        "startLine": 80,
        "startChar": 0,
        "endLine": 83,
        "endChar": 2
      },
      "revId": "9cdc3eebe88cca7b18df828c939b5bc3f1bf253d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "11bbdfd6_cea6d0bc",
        "filename": "src/cmd/go2go/testdata/go2path/src/slices/slices.go2",
        "patchSetId": 13
      },
      "lineNbr": 83,
      "author": {
        "id": 13220
      },
      "writtenOn": "2020-03-19T21:59:24Z",
      "side": 1,
      "message": "I brought it up not as a nitpick of the particular but as an example of a shortcoming of the generics draft. I don\u0027t think it\u0027s a shortcoming that needs to be fixed but it has consequences that are coming up in a very simple case.\n\nEven though it\u0027s documented, it would be a potential source of bugs in real code. Code that called Max twice on different slices where the second slice had the result of the first Max call appended can behave incorrectly sometimes unless the first call is guarded against a zero len slice. That\u0027s subtle.",
      "parentUuid": "8f5cf4b1_b43d0f17",
      "range": {
        "startLine": 80,
        "startChar": 0,
        "endLine": 83,
        "endChar": 2
      },
      "revId": "9cdc3eebe88cca7b18df828c939b5bc3f1bf253d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}