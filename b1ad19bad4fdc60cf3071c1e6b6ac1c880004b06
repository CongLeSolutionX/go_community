{
  "comments": [
    {
      "key": {
        "uuid": "e24a9d97_0255ee1a",
        "filename": "src/encoding/csv/reader.go",
        "patchSetId": 6
      },
      "lineNbr": 118,
      "author": {
        "id": 5167
      },
      "writtenOn": "2016-10-03T17:38:10Z",
      "side": 1,
      "message": "// The i\u0027th field starts at offset fieldIndexes[i] in lineBuffer.",
      "revId": "b1ad19bad4fdc60cf3071c1e6b6ac1c880004b06",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "02adf169_a8ffd3f4",
        "filename": "src/encoding/csv/reader.go",
        "patchSetId": 6
      },
      "lineNbr": 118,
      "author": {
        "id": 5475
      },
      "writtenOn": "2016-10-03T18:28:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e24a9d97_0255ee1a",
      "revId": "b1ad19bad4fdc60cf3071c1e6b6ac1c880004b06",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e24a9d97_4247f677",
        "filename": "src/encoding/csv/reader.go",
        "patchSetId": 6
      },
      "lineNbr": 271,
      "author": {
        "id": 5167
      },
      "writtenOn": "2016-10-03T17:38:10Z",
      "side": 1,
      "message": "Can you try benchmarking a slightly different approach?\n\nbuf :\u003d r.lineBuffer.Bytes()\nfor i, idx :\u003d range r.fieldIndexes {\n    if i \u003d\u003d fieldCount-1 {\n        fields[i] \u003d string(buf[idx:])\n    } else {\n        fields[i] \u003d string(buf[idx:r.fieldIndexes[i+1]])\n    }\n}\n\nSince this change also affects allocations around field parsing, I want to make sure the important effect actually comes from the final string allocation. If it turn out we can get most of the win even with separate strings at the end, that would avoid the drawback of memory over-retention.",
      "revId": "b1ad19bad4fdc60cf3071c1e6b6ac1c880004b06",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "02adf169_4802df18",
        "filename": "src/encoding/csv/reader.go",
        "patchSetId": 6
      },
      "lineNbr": 271,
      "author": {
        "id": 5475
      },
      "writtenOn": "2016-10-03T18:28:53Z",
      "side": 1,
      "message": "Did the benchmark, here are the numbers between the current cl and your approach:\n\nname                          old time/op    new time/op    delta\nRead-8                          4.49µs ± 0%    4.93µs ± 1%    +9.87%         (p\u003d0.000 n\u003d10+9)\nReadWithFieldsPerRecord-8       4.46µs ± 0%    4.85µs ± 0%    +8.59%          (p\u003d0.000 n\u003d9+9)\nReadWithoutFieldsPerRecord-8    4.51µs ± 0%    4.96µs ± 0%    +9.92%          (p\u003d0.000 n\u003d9+8)\nReadLargeFields-8               58.2µs ± 0%    59.1µs ± 0%    +1.58%         (p\u003d0.000 n\u003d9+10)\n\nname                          old alloc/op   new alloc/op   delta\nRead-8                          5.87kB ± 0%    5.87kB ± 0%      ~     (all samples are equal)\nReadWithFieldsPerRecord-8       5.85kB ± 0%    5.84kB ± 0%    -0.07%        (p\u003d0.000 n\u003d10+10)\nReadWithoutFieldsPerRecord-8    5.87kB ± 0%    5.87kB ± 0%      ~     (all samples are equal)\nReadLargeFields-8               10.2kB ± 0%    10.1kB ± 0%    -0.70%        (p\u003d0.000 n\u003d10+10)\n\nname                          old allocs/op  new allocs/op  delta\nRead-8                            30.0 ± 0%      42.0 ± 0%   +40.00%        (p\u003d0.000 n\u003d10+10)\nReadWithFieldsPerRecord-8         28.0 ± 0%      40.0 ± 0%   +42.86%        (p\u003d0.000 n\u003d10+10)\nReadWithoutFieldsPerRecord-8      30.0 ± 0%      42.0 ± 0%   +40.00%        (p\u003d0.000 n\u003d10+10)\nReadLargeFields-8                 40.0 ± 0%      82.0 ± 0%  +105.00%        (p\u003d0.000 n\u003d10+10)\n\nAlso the numbers between current tip and this cl+your approach:\n\nname                          old time/op    new time/op    delta\nRead-8                          5.09µs ± 0%    4.93µs ± 1%   -3.05%    (p\u003d0.000 n\u003d8+9)\nReadWithFieldsPerRecord-8       4.95µs ± 0%    4.85µs ± 0%   -2.11%    (p\u003d0.000 n\u003d7+9)\nReadWithoutFieldsPerRecord-8    6.39µs ± 0%    4.96µs ± 0%  -22.45%   (p\u003d0.000 n\u003d10+8)\nReadLargeFields-8               59.2µs ± 0%    59.1µs ± 0%     ~      (p\u003d0.079 n\u003d9+10)\n\nname                          old alloc/op   new alloc/op   delta\nRead-8                          5.84kB ± 0%    5.87kB ± 0%   +0.48%  (p\u003d0.000 n\u003d10+10)\nReadWithFieldsPerRecord-8       5.80kB ± 0%    5.84kB ± 0%   +0.83%  (p\u003d0.000 n\u003d10+10)\nReadWithoutFieldsPerRecord-8    6.28kB ± 0%    5.87kB ± 0%   -6.44%  (p\u003d0.000 n\u003d10+10)\nReadLargeFields-8               9.59kB ± 0%   10.14kB ± 0%   +5.75%  (p\u003d0.000 n\u003d10+10)\n\nname                          old allocs/op  new allocs/op  delta\nRead-8                            41.0 ± 0%      42.0 ± 0%   +2.44%  (p\u003d0.000 n\u003d10+10)\nReadWithFieldsPerRecord-8         39.0 ± 0%      40.0 ± 0%   +2.56%  (p\u003d0.000 n\u003d10+10)\nReadWithoutFieldsPerRecord-8      59.0 ± 0%      42.0 ± 0%  -28.81%  (p\u003d0.000 n\u003d10+10)\nReadLargeFields-8                 80.0 ± 0%      82.0 ± 0%   +2.50%  (p\u003d0.000 n\u003d10+10)",
      "parentUuid": "e24a9d97_4247f677",
      "revId": "b1ad19bad4fdc60cf3071c1e6b6ac1c880004b06",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e24a9d97_c2e78636",
        "filename": "src/encoding/csv/reader.go",
        "patchSetId": 6
      },
      "lineNbr": 271,
      "author": {
        "id": 5167
      },
      "writtenOn": "2016-10-03T19:22:47Z",
      "side": 1,
      "message": "Thanks! Looks like some of the win is from reducing the internal allocations, but most of it is indeed from combining the final allocations.",
      "parentUuid": "02adf169_4802df18",
      "revId": "b1ad19bad4fdc60cf3071c1e6b6ac1c880004b06",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}