{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "24b9eb82_9416c7b9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 24534
      },
      "writtenOn": "2022-03-18T06:08:59Z",
      "side": 1,
      "message": "Please help review this CL, thanks",
      "revId": "8be04a6da41e88e8bfbc34ee365ea05f17e99d8b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eeb8a4d6_747a2363",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-03-18T06:09:15Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003d8be04a6d",
      "tag": "autogenerated:trybots~beginning",
      "revId": "8be04a6da41e88e8bfbc34ee365ea05f17e99d8b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7dd7dece_3cce2433",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-03-18T06:22:30Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "eeb8a4d6_747a2363",
      "tag": "autogenerated:trybots~happy",
      "revId": "8be04a6da41e88e8bfbc34ee365ea05f17e99d8b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "80d1d200_9e6739cd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 24534
      },
      "writtenOn": "2022-03-28T10:10:48Z",
      "side": 1,
      "message": "Sorry to remind again, can you help review this patch? Thanks~",
      "revId": "8be04a6da41e88e8bfbc34ee365ea05f17e99d8b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "48b37720_f740a6de",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 13315
      },
      "writtenOn": "2022-04-19T19:35:08Z",
      "side": 1,
      "message": "Could you organize the files so it is easier to review?\n- args.go and inst.go seems clear. argsEnc.go seems mostly containing encoding functions but there are some other things? Can you move them out to a separate file? asmFuncs.go seems to contain a bunch of helper functions? Can we organize them better into separate files? I think it may be good to organize code by pass, e.g. the encoding part in one (or more) files, the instruction expansion part in one (or more) files, another file for handling pool, branch fixup, etc.\n- There are a few functions that are just moved around. To make the diff smaller let\u0027s not move them now. We can move them later if it helps.",
      "revId": "8be04a6da41e88e8bfbc34ee365ea05f17e99d8b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cc308be5_1a1c6f16",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 24534
      },
      "writtenOn": "2022-04-20T11:31:21Z",
      "side": 1,
      "message": "argsEnc.go mainly contains argument encoding related things,\nasmFuncs.go mainly contains unfolding related things.\n\nActually I feel that the current structure is quite clear, ^-^\n\n\u003e There are a few functions that are just moved around. \n\u003e\nThey are moved around based on the above rules. Previously they are in the asm7.go file, now this file only contains high level function calls to prog processing passes, including branch fix up, pool, encoding, etc. Do we need to create different files for these passes? They don\u0027t seem to have much code.",
      "parentUuid": "48b37720_f740a6de",
      "revId": "8be04a6da41e88e8bfbc34ee365ea05f17e99d8b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "91835dba_32f0ec94",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 24534
      },
      "writtenOn": "2022-04-20T11:31:21Z",
      "side": 1,
      "message": "Thanks for your review, quickly answered some questions, and I will reply to other questions after I have revised them.",
      "revId": "8be04a6da41e88e8bfbc34ee365ea05f17e99d8b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3ba5db6e_997d5c1c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 13315
      },
      "writtenOn": "2022-04-25T22:27:34Z",
      "side": 1,
      "message": "argsEnc.go seems mostly okay. Maybe name it encoding.go.\n\nFor asmFuncs.go, the file name doesn\u0027t provide any information (we already know this is the assembler and it contains functions). If they are about unfold, name it unfold.go. As you mentioned, they are mainly about unfolding. Are there anything else? If so, move them to another file. At beginning there are small helper functions. Should they be there?\n\n\u003e They are moved around based on the above rules\n\nLet\u0027s move them later in a separate CL to make the diff smaller and review easier. Thanks.",
      "parentUuid": "cc308be5_1a1c6f16",
      "revId": "8be04a6da41e88e8bfbc34ee365ea05f17e99d8b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "781bd283_c2d4ed9f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 24534
      },
      "writtenOn": "2022-04-26T12:08:40Z",
      "side": 1,
      "message": "\u003e At beginning there are small helper functions. Should they be there?\nYes, they are helper function for unfolding.\n\u003e Let\u0027s move them later in a separate CL to make the diff smaller and review easier. \nDone",
      "parentUuid": "3ba5db6e_997d5c1c",
      "revId": "8be04a6da41e88e8bfbc34ee365ea05f17e99d8b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ce8dc462_aaee697b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 24534
      },
      "writtenOn": "2022-04-26T12:17:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "781bd283_c2d4ed9f",
      "revId": "8be04a6da41e88e8bfbc34ee365ea05f17e99d8b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c7244f58_19d7113a",
        "filename": "src/cmd/asm/internal/asm/testdata/arm64error.s",
        "patchSetId": 6
      },
      "lineNbr": 6,
      "author": {
        "id": 13315
      },
      "writtenOn": "2022-04-19T19:35:08Z",
      "side": 1,
      "message": "This error seems worse than before. It doesn\u0027t tell the source or destination. The added words, \"general register or ZR RSP\", doesn\u0027t seem to tell much more information than just \"register\". Can we restore the original?",
      "range": {
        "startLine": 6,
        "startChar": 63,
        "endLine": 6,
        "endChar": 97
      },
      "revId": "8be04a6da41e88e8bfbc34ee365ea05f17e99d8b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1ec151ae_d7c8c3b2",
        "filename": "src/cmd/asm/internal/asm/testdata/arm64error.s",
        "patchSetId": 6
      },
      "lineNbr": 6,
      "author": {
        "id": 24534
      },
      "writtenOn": "2022-04-20T11:31:21Z",
      "side": 1,
      "message": "This error is reported when encoding an instruction argument, now we don\u0027t know if an argument is a source or destination when encoding it. How about a simple description: \n\"illegal register Rxxx\"\nI think the register name basically tells the needed information.",
      "parentUuid": "c7244f58_19d7113a",
      "range": {
        "startLine": 6,
        "startChar": 63,
        "endLine": 6,
        "endChar": 97
      },
      "revId": "8be04a6da41e88e8bfbc34ee365ea05f17e99d8b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e97003d0_438ada5a",
        "filename": "src/cmd/asm/internal/asm/testdata/arm64error.s",
        "patchSetId": 6
      },
      "lineNbr": 6,
      "author": {
        "id": 24534
      },
      "writtenOn": "2022-04-22T12:49:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1ec151ae_d7c8c3b2",
      "range": {
        "startLine": 6,
        "startChar": 63,
        "endLine": 6,
        "endChar": 97
      },
      "revId": "8be04a6da41e88e8bfbc34ee365ea05f17e99d8b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e977fddc_98dce0fc",
        "filename": "src/cmd/internal/obj/arm64/a.out.go",
        "patchSetId": 6
      },
      "lineNbr": 403,
      "author": {
        "id": 13315
      },
      "writtenOn": "2022-04-19T19:35:08Z",
      "side": 1,
      "message": "Do we ever need 64-bit offset?",
      "range": {
        "startLine": 403,
        "startChar": 15,
        "endLine": 403,
        "endChar": 28
      },
      "revId": "8be04a6da41e88e8bfbc34ee365ea05f17e99d8b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "98517d48_0c596094",
        "filename": "src/cmd/internal/obj/arm64/a.out.go",
        "patchSetId": 6
      },
      "lineNbr": 403,
      "author": {
        "id": 24534
      },
      "writtenOn": "2022-04-20T11:31:21Z",
      "side": 1,
      "message": "Honestly I don\u0027t think it is necessary, 32-bit instruction can\u0027t encode 64-bit offset. But currently we support this syntax format, the large offset will be moved into a register Ri, so $large_imm(R) becomes (R)(Ri). For compatibility, keep this?",
      "parentUuid": "e977fddc_98dce0fc",
      "range": {
        "startLine": 403,
        "startChar": 15,
        "endLine": 403,
        "endChar": 28
      },
      "revId": "8be04a6da41e88e8bfbc34ee365ea05f17e99d8b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "af88d193_e82a0075",
        "filename": "src/cmd/internal/obj/arm64/a.out.go",
        "patchSetId": 6
      },
      "lineNbr": 403,
      "author": {
        "id": 24534
      },
      "writtenOn": "2022-04-22T12:49:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "98517d48_0c596094",
      "range": {
        "startLine": 403,
        "startChar": 15,
        "endLine": 403,
        "endChar": 28
      },
      "revId": "8be04a6da41e88e8bfbc34ee365ea05f17e99d8b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "11eb9267_30ef33cc",
        "filename": "src/cmd/internal/obj/arm64/a.out.go",
        "patchSetId": 6
      },
      "lineNbr": 412,
      "author": {
        "id": 13315
      },
      "writtenOn": "2022-04-19T19:35:08Z",
      "side": 1,
      "message": "Use Go syntax. Is it something like (Rm)(Rn), (Rm)(Rn\u003c\u003c8) ?",
      "range": {
        "startLine": 412,
        "startChar": 60,
        "endLine": 412,
        "endChar": 106
      },
      "revId": "8be04a6da41e88e8bfbc34ee365ea05f17e99d8b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2a5bb635_4e944234",
        "filename": "src/cmd/internal/obj/arm64/a.out.go",
        "patchSetId": 6
      },
      "lineNbr": 412,
      "author": {
        "id": 24534
      },
      "writtenOn": "2022-04-22T12:49:58Z",
      "side": 1,
      "message": "Yes, done",
      "parentUuid": "11eb9267_30ef33cc",
      "range": {
        "startLine": 412,
        "startChar": 60,
        "endLine": 412,
        "endChar": 106
      },
      "revId": "8be04a6da41e88e8bfbc34ee365ea05f17e99d8b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "686082f0_66aec825",
        "filename": "src/cmd/internal/obj/arm64/a.out.go",
        "patchSetId": 6
      },
      "lineNbr": 412,
      "author": {
        "id": 24534
      },
      "writtenOn": "2022-04-22T13:00:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2a5bb635_4e944234",
      "range": {
        "startLine": 412,
        "startChar": 60,
        "endLine": 412,
        "endChar": 106
      },
      "revId": "8be04a6da41e88e8bfbc34ee365ea05f17e99d8b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "72bb8f6b_10d19a22",
        "filename": "src/cmd/internal/obj/arm64/args.go",
        "patchSetId": 6
      },
      "lineNbr": 9,
      "author": {
        "id": 13315
      },
      "writtenOn": "2022-04-19T19:35:08Z",
      "side": 1,
      "message": "Is it possible to publish the tool that generates this?",
      "revId": "8be04a6da41e88e8bfbc34ee365ea05f17e99d8b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6d3543a1_5ef58699",
        "filename": "src/cmd/internal/obj/arm64/args.go",
        "patchSetId": 6
      },
      "lineNbr": 9,
      "author": {
        "id": 24534
      },
      "writtenOn": "2022-04-20T11:31:21Z",
      "side": 1,
      "message": "Sure. Unfortunately, the tool we wrote before are lost, and fortunately, the parameter formats of most arm v8.0 instructions are here. Later, if we\u0027ll going to add a lot of instructions, such as SVE instructions, we will rewrite a tool and make it public. In addition, this table can be modified manually, as long as the format is unique.",
      "parentUuid": "72bb8f6b_10d19a22",
      "revId": "8be04a6da41e88e8bfbc34ee365ea05f17e99d8b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6e17807b_8e4b74ef",
        "filename": "src/cmd/internal/obj/arm64/args.go",
        "patchSetId": 6
      },
      "lineNbr": 9,
      "author": {
        "id": 24534
      },
      "writtenOn": "2022-04-22T12:49:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6d3543a1_5ef58699",
      "revId": "8be04a6da41e88e8bfbc34ee365ea05f17e99d8b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5e011d2e_e6dace23",
        "filename": "src/cmd/internal/obj/arm64/argsEnc.go",
        "patchSetId": 6
      },
      "lineNbr": 15,
      "author": {
        "id": 13315
      },
      "writtenOn": "2022-04-19T19:35:08Z",
      "side": 1,
      "message": "What is CReg?",
      "range": {
        "startLine": 15,
        "startChar": 18,
        "endLine": 15,
        "endChar": 22
      },
      "revId": "8be04a6da41e88e8bfbc34ee365ea05f17e99d8b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a1ffbfbe_7dd7c208",
        "filename": "src/cmd/internal/obj/arm64/argsEnc.go",
        "patchSetId": 6
      },
      "lineNbr": 15,
      "author": {
        "id": 24534
      },
      "writtenOn": "2022-04-20T11:31:21Z",
      "side": 1,
      "message": "Corresponding to C_REG type in a.out.go, including R0 ~ R30, so isCRegOrZR checks if r is R0 ~ R30 or ZR.",
      "parentUuid": "5e011d2e_e6dace23",
      "range": {
        "startLine": 15,
        "startChar": 18,
        "endLine": 15,
        "endChar": 22
      },
      "revId": "8be04a6da41e88e8bfbc34ee365ea05f17e99d8b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6b4eeef7_4af9d5d7",
        "filename": "src/cmd/internal/obj/arm64/argsEnc.go",
        "patchSetId": 6
      },
      "lineNbr": 15,
      "author": {
        "id": 24534
      },
      "writtenOn": "2022-04-22T12:49:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a1ffbfbe_7dd7c208",
      "range": {
        "startLine": 15,
        "startChar": 18,
        "endLine": 15,
        "endChar": 22
      },
      "revId": "8be04a6da41e88e8bfbc34ee365ea05f17e99d8b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fa087091_d1d7f6ac",
        "filename": "src/cmd/internal/obj/arm64/argsEnc.go",
        "patchSetId": 6
      },
      "lineNbr": 15,
      "author": {
        "id": 13315
      },
      "writtenOn": "2022-04-25T22:27:34Z",
      "side": 1,
      "message": "Just say Reg. The C in C_REG is for \"Class\". No need to include \"C\".",
      "parentUuid": "6b4eeef7_4af9d5d7",
      "range": {
        "startLine": 15,
        "startChar": 18,
        "endLine": 15,
        "endChar": 22
      },
      "revId": "8be04a6da41e88e8bfbc34ee365ea05f17e99d8b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8421ef9e_6474456d",
        "filename": "src/cmd/internal/obj/arm64/argsEnc.go",
        "patchSetId": 6
      },
      "lineNbr": 15,
      "author": {
        "id": 24534
      },
      "writtenOn": "2022-04-26T12:08:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fa087091_d1d7f6ac",
      "range": {
        "startLine": 15,
        "startChar": 18,
        "endLine": 15,
        "endChar": 22
      },
      "revId": "8be04a6da41e88e8bfbc34ee365ea05f17e99d8b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8944cd70_f98484a7",
        "filename": "src/cmd/internal/obj/arm64/argsEnc.go",
        "patchSetId": 6
      },
      "lineNbr": 771,
      "author": {
        "id": 13315
      },
      "writtenOn": "2022-04-19T19:35:08Z",
      "side": 1,
      "message": "Is this function all handwritten or generated somehow?",
      "revId": "8be04a6da41e88e8bfbc34ee365ea05f17e99d8b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "67e5b910_bca5898a",
        "filename": "src/cmd/internal/obj/arm64/argsEnc.go",
        "patchSetId": 6
      },
      "lineNbr": 771,
      "author": {
        "id": 24534
      },
      "writtenOn": "2022-04-20T11:31:21Z",
      "side": 1,
      "message": "This is all handwritten, this is exactly one of the two main things (expanding the Prog and encoding the new argument type (this function)) we need to do to add new instructions in the future if this CL is merged.\n\nSuggestion: this is where it is difficult to review. I suggest mainly looking at the code style. There should be no problem with the correctness, because we have encoding and decoding tests for almost all instructions.",
      "parentUuid": "8944cd70_f98484a7",
      "revId": "8be04a6da41e88e8bfbc34ee365ea05f17e99d8b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "145bb3e4_4968f78f",
        "filename": "src/cmd/internal/obj/arm64/argsEnc.go",
        "patchSetId": 6
      },
      "lineNbr": 771,
      "author": {
        "id": 24534
      },
      "writtenOn": "2022-04-22T12:49:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "67e5b910_bca5898a",
      "revId": "8be04a6da41e88e8bfbc34ee365ea05f17e99d8b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ba1763d0_2057a12b",
        "filename": "src/cmd/internal/obj/arm64/argsEnc.go",
        "patchSetId": 6
      },
      "lineNbr": 771,
      "author": {
        "id": 13315
      },
      "writtenOn": "2022-04-25T22:27:34Z",
      "side": 1,
      "message": "What is your plan for maintaining this package? In the current state, there are non-human-readable identifiers like imm5___B_1__H_2__S_4__D_8_index__imm5_imm4__imm4lt30gt_1__imm4lt31gt_2__imm4lt32gt_4__imm4lt3gt_8_1. It would be okay if it is generated and will almost never be touched by human. But it seems not. Are you saying that part of this file is code that should never be touched?",
      "parentUuid": "145bb3e4_4968f78f",
      "revId": "8be04a6da41e88e8bfbc34ee365ea05f17e99d8b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b39c124_a0054fa6",
        "filename": "src/cmd/internal/obj/arm64/argsEnc.go",
        "patchSetId": 6
      },
      "lineNbr": 771,
      "author": {
        "id": 24534
      },
      "writtenOn": "2022-04-26T03:57:48Z",
      "side": 1,
      "message": "This function is similar to https://github.com/golang/arch/blob/fc48f9fe4c157e3ed95b38adbda9b9fe5a31cf03/arm64/arm64asm/decode.go#L82, but the effect is just the opposite. Actually it is very easy to maintain because the logic is easy simple, except that the identifier for this parameter type might not be very readable, but being hard to read doesn\u0027t lead to much complexity.\n\nWhile these argument type identifiers are modifiable, I don\u0027t think we\u0027re going to touch them at all. As long as an identifier is unique, it\u0027s legal, so there\u0027s basically no reason for us to change it. If we\u0027ll going to add a new instruction, we can reuse the argument types or define some new items if there\u0027s no existing same type, as long as the identifier is unique, it\u0027s ok. By the way, most of the armv8 instructions are included in the inst.go table, if we\u0027ll going to add a lot of new instructions, such as SVE instructions, we\u0027ll write a script to automatically generate it.\n\n\u003e Are you saying that part of this file is code that should never be touched?\nThis file is about argument encoding, we\u0027ll deal with it often. but the logic of this file is very simple, similar like:\n  switch argument_type {\n  case type_1:\n    encoding_type_1()\n  case type_2:\n    encoding_type_2()\n  ...\n  }\n\nFor some relatively complex types, there are some helper functions whose names are basically the same as the type names, for example:\ntype:\n arg_Vn_arrangement_imm5___B_1__H_2__S_4__D_8_index__imm5_imm4__imm4lt30gt_1__imm4lt31gt_2__imm4lt32gt_4__imm4lt3gt_8_1\n\nhelp function:\n func (c *ctxt7) imm5___B_1__H_2__S_4__D_8_index__imm5_imm4__imm4lt30gt_1__imm4lt31gt_2__imm4lt32gt_4__imm4lt3gt_8_1(p *obj.Prog, arg *oprd) (uint32, uint32)\n\nFor most types, its encoding is very simple, which also reduces the probability of errors when we write the code, so I think in addition to adding encoding support for unsupported types, usually we\u0027ll not going to touch this file. Even if one of our encoding implementations is wrong, it is very easy to locate the problem and fix it.",
      "parentUuid": "ba1763d0_2057a12b",
      "revId": "8be04a6da41e88e8bfbc34ee365ea05f17e99d8b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dd037489_94db561a",
        "filename": "src/cmd/internal/obj/arm64/argsEnc.go",
        "patchSetId": 6
      },
      "lineNbr": 771,
      "author": {
        "id": 13315
      },
      "writtenOn": "2022-05-02T19:59:10Z",
      "side": 1,
      "message": "\u003e   switch argument_type {\n  case type_1:\n    encoding_type_1()\n  case type_2:\n    encoding_type_2()\n  ...\n  }\n\n\nIt looks like this is a good use case for code generation. Can this switch statement be machine generated?\n\n\u003e arg_Vn_arrangement_imm5___B_1__H_2__S_4__D_8_index__imm5_imm4__imm4lt30gt_1__imm4lt31gt_2__imm4lt32gt_4__imm4lt3gt_8_1\n\nWhy it needs to contain multiple imm4ltXXgtX? Can this be simplified?\n\nCL 348510 is actually an example showing that this code could use a fair amount of modification in the future, not only adding new cases, but touching existing cases. How much effort one needs to have? (Imagine for a new person, not you or me.)",
      "parentUuid": "5b39c124_a0054fa6",
      "revId": "8be04a6da41e88e8bfbc34ee365ea05f17e99d8b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f96103ec_192de853",
        "filename": "src/cmd/internal/obj/arm64/argsEnc.go",
        "patchSetId": 6
      },
      "lineNbr": 771,
      "author": {
        "id": 24534
      },
      "writtenOn": "2022-05-03T05:25:09Z",
      "side": 1,
      "message": "\u003e Can this switch statement be machine generated?\nIt\u0027s a bit complicated, we have hundreds of argument types, and each type is different, which means we need to write code that generates encoding code for these hundreds of types. Rather than modifying the code that generates the encoded code, I prefer to modify the encoding code directly, which is more straightforward.\n\n\u003e CL 348510 is actually an example showing that this code could use a fair amount of modification\nI did some code refining work in this CL, if you look closely at the changes in the argsEnc.go file, you will find that a lot of changes before line 948 are not necessary for this CL, and there are some unnecessary code moves after line 948. In fact, this patch adds only 6 argument type encoding cases. And that\u0027s pretty much the worst case, that almost all argument types encoding have not been implemented before.\n\n\u003e How much effort one needs to have?\nThis is hard to measure because everyone\u0027s knowledge of Go code and ability to learn is different. I can only take myself as an example. If I\u0027m going to add some complex instructions, especially those involve the processing of constants of different ranges, it would have taken me an afternoon on the old codebase, but now I add the most complex instructions , such as CL 348510, the time can be shortened to about 2 hours. And for CL 347532 which added 10 instructions, I spent about an hour.\n\nThis is mainly due to two points:\n1, we simplified the logic\n2. The number of our instructions is about three times the number of argument types, and a large number of argument type encoding codes can be reused.",
      "parentUuid": "dd037489_94db561a",
      "revId": "8be04a6da41e88e8bfbc34ee365ea05f17e99d8b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a72f0bef_231eba75",
        "filename": "src/cmd/internal/obj/arm64/argsEnc.go",
        "patchSetId": 6
      },
      "lineNbr": 771,
      "author": {
        "id": 24534
      },
      "writtenOn": "2022-05-03T05:43:23Z",
      "side": 1,
      "message": "\u003e Why it needs to contain multiple imm4ltXXgtX? Can this be simplified?\nThis is for argument \u003cVn\u003e.\u003cTs\u003e[\u003cindex2\u003e]\nThe index2 field is influenced by both imm5 and imm4, imm5 affects Ts, and imm4 affects the value range of index2, so we need to specify the field.\nOf course I said it\u0027s just a type name, as long as it\u0027s unique, we can name it anything legal, like t1, tt1, etc., but the naming here contains more information.",
      "parentUuid": "f96103ec_192de853",
      "revId": "8be04a6da41e88e8bfbc34ee365ea05f17e99d8b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1ec2238c_5fab73a9",
        "filename": "src/cmd/internal/obj/arm64/argsEnc.go",
        "patchSetId": 6
      },
      "lineNbr": 771,
      "author": {
        "id": 24534
      },
      "writtenOn": "2022-05-06T10:32:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a72f0bef_231eba75",
      "revId": "8be04a6da41e88e8bfbc34ee365ea05f17e99d8b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ec99a5fa_67ae7d46",
        "filename": "src/cmd/internal/obj/arm64/asm7.go",
        "patchSetId": 6
      },
      "lineNbr": 166,
      "author": {
        "id": 13315
      },
      "writtenOn": "2022-04-19T19:35:08Z",
      "side": 1,
      "message": "return atomicLDADD[as] || atomicSWP[as]",
      "range": {
        "startLine": 163,
        "startChar": 0,
        "endLine": 166,
        "endChar": 13
      },
      "revId": "8be04a6da41e88e8bfbc34ee365ea05f17e99d8b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "46669a53_2ea0a067",
        "filename": "src/cmd/internal/obj/arm64/asm7.go",
        "patchSetId": 6
      },
      "lineNbr": 166,
      "author": {
        "id": 24534
      },
      "writtenOn": "2022-04-22T12:49:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ec99a5fa_67ae7d46",
      "range": {
        "startLine": 163,
        "startChar": 0,
        "endLine": 166,
        "endChar": 13
      },
      "revId": "8be04a6da41e88e8bfbc34ee365ea05f17e99d8b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}