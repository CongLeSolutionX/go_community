{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "c85d99a2_b189a57a",
        "filename": "src/internal/poll/fd_plan9.go",
        "patchSetId": 2
      },
      "lineNbr": 130,
      "author": {
        "id": 6365
      },
      "writtenOn": "2023-02-22T17:20:17Z",
      "side": 1,
      "message": "Hmm... while the mutex is unlocked, is it possible that some other goroutine will also call a `Set.*Deadline` method that will write to `fd.rdone` and/or `fd.wdone`? If so, it seems like that write would race.\n\nPerhaps this should be a loop, and should read the `rdone` and/or `wdone` field while still locked:\n\n```\nfor fd.rtimer !\u003d nil {\n\tif fd.rtimer.Stop() {\n\t\tfd.rtimer \u003d nil\n\t} else {\n\t\trdone :\u003d fd.rdone\n\t\tfd.rmu.Unlock()\n\t\t\u003c-rdone\n\t\tfd.rmu.Lock()\n\t}\n}\nfd.rtimedout.Store(false)\n```",
      "revId": "063cf15a60e96fbbd76e249aee533d9b774850c6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d848e9a7_dd2ebf3a",
        "filename": "src/internal/poll/fd_plan9.go",
        "patchSetId": 2
      },
      "lineNbr": 130,
      "author": {
        "id": 12217
      },
      "writtenOn": "2023-02-22T20:50:51Z",
      "side": 1,
      "message": "I think you mean read from fd.rdone, not write to. Your loop is problematic because if timer.Stop fails once it will fail every time (because the timer has already fired). Yes there\u0027s a problem if SetDeadline is called more than once concurrently on the same FD. A simple solution would be to serialize SetDeadline calls with yet another mutex.",
      "parentUuid": "c85d99a2_b189a57a",
      "revId": "063cf15a60e96fbbd76e249aee533d9b774850c6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f3d7e9f4_f7945472",
        "filename": "src/internal/poll/fd_plan9.go",
        "patchSetId": 2
      },
      "lineNbr": 130,
      "author": {
        "id": 6365
      },
      "writtenOn": "2023-02-22T21:37:12Z",
      "side": 1,
      "message": "\u003e Your loop is problematic because if timer.Stop fails once it will fail every time (because the timer has already fired).\n\nIf the closure passed to `AfterFunc` sets `fd.rdtimer` to nil before it closes `fs.rdone`, then the loop will terminate after a single iteration as long as there is no concurrent call to `setDeadlineImpl`.\n\n(Since each iteration of the loop sets `fd.rtimer` to nil, the number of iterations of the loop is bounded by the number of times it is set to non-nil â€” which is the number of concurrent calls to `setDeadlineImpl`.)",
      "parentUuid": "d848e9a7_dd2ebf3a",
      "revId": "063cf15a60e96fbbd76e249aee533d9b774850c6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c5da6be1_d61798b5",
        "filename": "src/internal/poll/fd_plan9.go",
        "patchSetId": 2
      },
      "lineNbr": 130,
      "author": {
        "id": 12217
      },
      "writtenOn": "2023-02-22T22:12:02Z",
      "side": 1,
      "message": "Ah, you\u0027re right, I wasn\u0027t considering all your suggestions together.",
      "parentUuid": "f3d7e9f4_f7945472",
      "revId": "063cf15a60e96fbbd76e249aee533d9b774850c6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "67ddb5b0_7f4e14c3",
        "filename": "src/internal/poll/fd_plan9.go",
        "patchSetId": 2
      },
      "lineNbr": 160,
      "author": {
        "id": 6365
      },
      "writtenOn": "2023-02-22T17:20:17Z",
      "side": 1,
      "message": "Perhaps also set `fd.rtimer \u003d nil` here?",
      "revId": "063cf15a60e96fbbd76e249aee533d9b774850c6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "da80fa62_0cd4b9c6",
        "filename": "src/internal/poll/fd_plan9.go",
        "patchSetId": 2
      },
      "lineNbr": 160,
      "author": {
        "id": 12217
      },
      "writtenOn": "2023-02-22T20:50:51Z",
      "side": 1,
      "message": "A good idea: allows the timer to be garbage collected sooner. The original version waited till the next deadline would be set.",
      "parentUuid": "67ddb5b0_7f4e14c3",
      "revId": "063cf15a60e96fbbd76e249aee533d9b774850c6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "195d2363_6c0e2f16",
        "filename": "src/internal/poll/fd_plan9.go",
        "patchSetId": 2
      },
      "lineNbr": 172,
      "author": {
        "id": 6365
      },
      "writtenOn": "2023-02-22T17:20:17Z",
      "side": 1,
      "message": "also `fd.wtimer \u003d nil`?",
      "revId": "063cf15a60e96fbbd76e249aee533d9b774850c6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aab9e27e_c9bb85d7",
        "filename": "src/internal/poll/fd_plan9.go",
        "patchSetId": 2
      },
      "lineNbr": 172,
      "author": {
        "id": 12217
      },
      "writtenOn": "2023-02-22T20:50:51Z",
      "side": 1,
      "message": "Also a good idea, as above.",
      "parentUuid": "195d2363_6c0e2f16",
      "revId": "063cf15a60e96fbbd76e249aee533d9b774850c6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}