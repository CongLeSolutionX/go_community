{
  "comments": [
    {
      "key": {
        "uuid": "7d608163_574b8f50",
        "filename": "src/runtime/mallocbits.go",
        "patchSetId": 29
      },
      "lineNbr": 130,
      "author": {
        "id": 5167
      },
      "writtenOn": "2019-10-29T03:16:15Z",
      "side": 1,
      "message": "Since this is about the implementation, it should go just inside the function body.",
      "revId": "7c7d014eb4792f2f092c058461570522415048d0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9a518080_33315e8c",
        "filename": "src/runtime/mallocbits.go",
        "patchSetId": 29
      },
      "lineNbr": 130,
      "author": {
        "id": 25391
      },
      "writtenOn": "2019-10-29T18:55:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7d608163_574b8f50",
      "revId": "7c7d014eb4792f2f092c058461570522415048d0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e4716c77_315044fb",
        "filename": "src/runtime/mpagealloc.go",
        "patchSetId": 29
      },
      "lineNbr": 73,
      "author": {
        "id": 5200
      },
      "writtenOn": "2019-10-28T18:06:12Z",
      "side": 1,
      "message": "So these are summaries of the leaves of the tree?\nHigher up in the tree, these counts could be larger than 2^21, right?\n21 bits here can only cover 16GB of heap.\n\nIt isn\u0027t clear to me where the 21 comes from - how is it determined that 21 is all we need? Is that related to arena size? Maybe you should assert some math here?\n\nlogMallocChunkPages is only 9, so I would expect summaries of individual chunks to need only 9 bits per start/max/end.",
      "revId": "7c7d014eb4792f2f092c058461570522415048d0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9300dff0_10ac1bf4",
        "filename": "src/runtime/mpagealloc.go",
        "patchSetId": 29
      },
      "lineNbr": 73,
      "author": {
        "id": 25391
      },
      "writtenOn": "2019-10-28T18:37:32Z",
      "side": 1,
      "message": "You\u0027re right, the root level only supports counts up to 21 bits, or 16 GiB of heap. The 21 comes from trying to pack the three values into a uint64.\n\nThe use of 21 is a (somewhat) artificial limitation imposed by the structure of a mallocSum. If we were to make a mallocSum look like\n\ntype mallocSum struct {\n  start, max, end uint32\n}\n\nthen we can trade the 2^21 limitation for a 2^32 limitation.\n\nThe reason we try to pack it is to save space in the radix tree, but to support larger heaps we may need to change this.\n\nsummaries of individual chunks indeed only need 9 bits, but the same mallocSum is used throughout the tree for consistency\u0027s sake.",
      "parentUuid": "e4716c77_315044fb",
      "revId": "7c7d014eb4792f2f092c058461570522415048d0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b14d52a3_a23e163a",
        "filename": "src/runtime/mpagealloc.go",
        "patchSetId": 29
      },
      "lineNbr": 73,
      "author": {
        "id": 5200
      },
      "writtenOn": "2019-10-28T18:53:21Z",
      "side": 1,
      "message": "I see, you\u0027ve carefully engineered it so that with 5 radix-8 levels on 64 bit, 9+4*3 just fits. You should assert something to this effect somewhere.\n\nSo the L0 level has one entry per 16GB heap, regardless of how big the heap is? (Seems fine, just checking).",
      "parentUuid": "9300dff0_10ac1bf4",
      "revId": "7c7d014eb4792f2f092c058461570522415048d0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0522d575_6691009f",
        "filename": "src/runtime/mpagealloc.go",
        "patchSetId": 29
      },
      "lineNbr": 73,
      "author": {
        "id": 25391
      },
      "writtenOn": "2019-10-28T19:13:28Z",
      "side": 1,
      "message": "yup! that\u0027s correct.\n\nin hindsight, it\u0027s unfortunate how \"carefully engineered\" this part of the allocator is, but I\u0027ve tried to organize the code such that replacing mallocSum with a more general structure is easy. I will revisit this in the next release (or perhaps during the freeze, if we discover there are users with enormous (~TiB heaps) which suffer. I don\u0027t think they should suffer much because of some of the optimizations in the allocator, but this will be worth watching out for.\n\nFWIW, I tried out radix-16 levels (which also happens to fit perfectly) and there\u0027s no real performance gain or loss.",
      "parentUuid": "b14d52a3_a23e163a",
      "revId": "7c7d014eb4792f2f092c058461570522415048d0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "557b2817_e7ae11d3",
        "filename": "src/runtime/mpagealloc.go",
        "patchSetId": 29
      },
      "lineNbr": 73,
      "author": {
        "id": 25391
      },
      "writtenOn": "2019-11-07T17:45:05Z",
      "side": 1,
      "message": "adding the assert in a change further up the stack (where these things come together).",
      "parentUuid": "0522d575_6691009f",
      "revId": "7c7d014eb4792f2f092c058461570522415048d0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}