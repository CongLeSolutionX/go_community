{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "b2baf8b4_835fd405",
        "filename": "src/reflect/map_noswiss.go",
        "patchSetId": 2
      },
      "lineNbr": 310,
      "author": {
        "id": 5206
      },
      "writtenOn": "2024-09-13T20:49:13Z",
      "side": 1,
      "message": "This is a different kind of change than what is written in the change description.  It\u0027s not obvious to me why we need this.  If we need it, it should be in a different change, not this one.",
      "revId": "992b84e9bc4062417941d558d420a4d08f9b367e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "61e3917f_33e41779",
        "filename": "src/reflect/map_noswiss.go",
        "patchSetId": 2
      },
      "lineNbr": 310,
      "author": {
        "id": 27296
      },
      "writtenOn": "2024-09-14T07:28:21Z",
      "side": 1,
      "message": "agreed, it\u0027s a bit confusing for the change. But we can\u0027t remove `mapiterkey` without adding `abi.NoEscape` here coz we do have an associated testcase for escape analysis of reflect pkg, and it doesn\u0027t work if we just remove `mapiterkey` directly. Here is a code snippet for reproducing the issue:\n```\npackage main\n\nimport \"reflect\"\n\nfunc main() {\n\tm :\u003d map[int]int{1: 2}\n\tit :\u003d reflect.ValueOf(m).MapRange()\n\tprintall(it)\n}\n\nfunc printall(it *reflect.MapIter) {\n\tvar k, v int\n\tfor it.Next() {\n\t\treflect.ValueOf(\u0026k).Elem().SetIterKey(it)\n\t\treflect.ValueOf(\u0026v).Elem().SetIterValue(it)\n\t\tprintln(k, v)\n\t}\n}\n```\npreviously, no heap allocation needed for `m`, and `it` does not escape. \nIf we only remove `mapiterkey` it becomes\n```\nleaking param content: it\nmap[int]int{...} escapes to heap\n```\n\nSo, \nif we don\u0027t want to introduce `abi.NoEscape` here, we can keep `mapiterkey` and `mapitervalue` for `SetIterKey` and `SetIterValue`.\n\nOr,\nif you think adding `abi.NoEscape` makes sense, I would like to update the description about this.",
      "parentUuid": "b2baf8b4_835fd405",
      "revId": "992b84e9bc4062417941d558d420a4d08f9b367e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2f5f6413_49d0d8c7",
        "filename": "src/reflect/map_noswiss.go",
        "patchSetId": 2
      },
      "lineNbr": 310,
      "author": {
        "id": 5206
      },
      "writtenOn": "2024-09-15T02:17:44Z",
      "side": 1,
      "message": "I don\u0027t understand why the compiler thinks that \"it\" escapes in your test case.  I don\u0027t see why the compiler would think that iterkey escapes in SetIterKey if we don\u0027t use abi.NoEscape.  I guess it\u0027s because of the assignTo call, perhaps because of the possibility of a call to makeMethodValue.\n\nI\u0027m concerned that this change turns clear code that calls mapiterkey into unclear code that calls abi.NoEscape.\n\nIn any case please do update the change description.  Thanks.",
      "parentUuid": "61e3917f_33e41779",
      "revId": "992b84e9bc4062417941d558d420a4d08f9b367e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "75d35f2e_efb0e199",
        "filename": "src/reflect/map_noswiss.go",
        "patchSetId": 2
      },
      "lineNbr": 310,
      "author": {
        "id": 14665
      },
      "writtenOn": "2024-09-15T03:16:17Z",
      "side": 1,
      "message": "To keep the same current semantic, and avoid confusion use of `abi.NoEscape`, see https://go-review.googlesource.com/c/go/+/613395 for example.",
      "parentUuid": "2f5f6413_49d0d8c7",
      "revId": "992b84e9bc4062417941d558d420a4d08f9b367e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "64bbf364_5b4711a3",
        "filename": "src/reflect/map_noswiss.go",
        "patchSetId": 2
      },
      "lineNbr": 310,
      "author": {
        "id": 27296
      },
      "writtenOn": "2024-09-15T15:25:08Z",
      "side": 1,
      "message": "Hi, Le. I think it\u0027s easy to keep the same current semanticï¼Œ but it\u0027s hard to make it clear when we\u0027re using abi.NoEscape, actually for most cases it\u0027s not required.\n\nI updated the description, let\u0027s kindly review.",
      "parentUuid": "75d35f2e_efb0e199",
      "revId": "992b84e9bc4062417941d558d420a4d08f9b367e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0d972856_3b6b7132",
        "filename": "src/reflect/map_noswiss.go",
        "patchSetId": 2
      },
      "lineNbr": 310,
      "author": {
        "id": 5200
      },
      "writtenOn": "2024-09-16T19:03:00Z",
      "side": 1,
      "message": "I think the tests you\u0027re running into aren\u0027t really correct tests. (The tests in test/escape_reflect.go, like setiterkey1, right?)\nI think they should just be testing that the hiter does not escape. But they are currently also testing that the key/elem values don\u0027t escape. And I think that latter part is not important. Keys and values in maps are always heap-allocated, so their escapiness is irrelevant.\n\nMaybe there are other fields of hiter that we want to have not escape, like buckets, which might point to the stack if the map buckets were stack allocated. But I\u0027m not sure this test helps with that part.\n\nTL;DR maybe we just need to change those tests from \"it does not escape\" to \"leaking param content: it\", which means the hiter itself does not escape, but its fields might. Then we can get rid of the abi.NoEscape calls in this CL.",
      "parentUuid": "64bbf364_5b4711a3",
      "revId": "992b84e9bc4062417941d558d420a4d08f9b367e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e225163f_0af54151",
        "filename": "src/reflect/map_noswiss.go",
        "patchSetId": 2
      },
      "lineNbr": 310,
      "author": {
        "id": 27296
      },
      "writtenOn": "2024-09-17T07:18:23Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "0d972856_3b6b7132",
      "revId": "992b84e9bc4062417941d558d420a4d08f9b367e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}