{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "a3f3741c_5ed2f0ac",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 6365
      },
      "writtenOn": "2022-09-29T17:43:31Z",
      "side": 1,
      "message": "(nit) s/fix racy/fix race/\nor s/fix racy/avoid race/",
      "range": {
        "startLine": 7,
        "startChar": 27,
        "endLine": 7,
        "endChar": 31
      },
      "revId": "c310b3c6ecf5d837a7bd6dede0eb2458314ff7f7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "786f5e60_f9dc5ef4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-09-29T04:57:03Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003dc310b3c6\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "c310b3c6ecf5d837a7bd6dede0eb2458314ff7f7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9eabc313_a00f914e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-09-29T05:09:36Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "786f5e60_f9dc5ef4",
      "tag": "autogenerated:trybots~happy",
      "revId": "c310b3c6ecf5d837a7bd6dede0eb2458314ff7f7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ab14a894_7075dedb",
        "filename": "src/internal/singleflight/singleflight_test.go",
        "patchSetId": 1
      },
      "lineNbr": 159,
      "author": {
        "id": 6365
      },
      "writtenOn": "2022-09-29T17:43:31Z",
      "side": 1,
      "message": "It looks like nothing receives from the `firstFinished` channel â€” can it be removed?",
      "revId": "c310b3c6ecf5d837a7bd6dede0eb2458314ff7f7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "635516f4_5983b2d4",
        "filename": "src/internal/singleflight/singleflight_test.go",
        "patchSetId": 1
      },
      "lineNbr": 174,
      "author": {
        "id": 6365
      },
      "writtenOn": "2022-09-29T17:43:31Z",
      "side": 1,
      "message": "Hmm... I think the panic here is itself somewhat racy: we can\u0027t guarantee that the goroutine is actually parked in `g.Do` by the time the `firstStarted` channel is closed, so the key could legitimately be shared again when the `ForgetUnshared` call executes.\n\nTo make it more robust, perhaps use an atomic counter and iterate until the counter records exactly one call?\n\nMaybe something like:\n\n```\nt.Parallel()\nd :\u003d time.Millisecond\nfor {\n\tvar calls, shared atomic.Int64\n\tconst n \u003d 100\n\tvar wg sync.WaitGroup\n\twg.Add(n)\n\tfor i :\u003d 0; i \u003c n; i++ {\n\t\tgo func() {\n\t\t\tg.Do(key, func() (interface{}, error) {\n\t\t\t\ttime.Sleep(d)\n\t\t\t\treturn calls.Add(1), nil\n\t\t\t})\n\t\t\tif !g.ForgetUnshared(key) {\n\t\t\t\tshared.Add(1)\n\t\t\t}\n\t\t\twg.Done()\n\t\t}()\n\t}()\n\twg.Wait()\n\n\tif calls.Load() !\u003d 1 {\n\t\t// The goroutines didn\u0027t park in g.Do in time,\n\t\t// so the key was re-added and may have been shared after the call.\n\t\t// Try again with more time to park.\n\t\td *\u003d 2\n\t\tcontinue\n\t}\n\t\n\t// All of the Do calls ended up sharing the first\n\t// invocation, so the key should have been unused\n\t// (and therefore unshared) when they returned.\n\tif shared.Load() \u003e 0 {\n\t\tt.Errorf(\"after a single shared Do, ForgetUnshared returned false %d times\", shared.Load())\n\t}\n\tbreak\n}\n```",
      "range": {
        "startLine": 173,
        "startChar": 0,
        "endLine": 174,
        "endChar": 66
      },
      "revId": "c310b3c6ecf5d837a7bd6dede0eb2458314ff7f7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}