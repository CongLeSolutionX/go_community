{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "78742d72_ef381f26",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 23,
      "author": {
        "id": 6320
      },
      "writtenOn": "2021-10-21T18:10:18Z",
      "side": 1,
      "message": "I don\u0027t understand what that first sentence means after Noteably. What is the proxy?\n\nI think you want to say functions compiled with the -shared option because it is not just shared objects (also dynamic binaries). And this explanation is not quite complete, because code compiled as shared must maintain R2 throughout the code, so R2 is initialized at the start of the function, and saved if it might be clobbered so that it can be restored following any clobbering function calls.",
      "revId": "dfa2ef75269095565af1988466dfae09818f4bb6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "193aa59d_f73e39f3",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 23,
      "author": {
        "id": 36863
      },
      "writtenOn": "2021-10-21T19:18:38Z",
      "side": 1,
      "message": "The shared flag being set on a function symbol is the closest goobject proxy to elf\u0027s marking of a unique local entry point on a symbol. We don\u0027t really care how it\u0027s implemented, but we need to respect it, and know how to find it.",
      "parentUuid": "78742d72_ef381f26",
      "revId": "dfa2ef75269095565af1988466dfae09818f4bb6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "90f459b1_615fc3f6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 6320
      },
      "writtenOn": "2021-10-26T11:44:28Z",
      "side": 1,
      "message": "TRY\u003dppc64le,ppc64lep9",
      "revId": "dfa2ef75269095565af1988466dfae09818f4bb6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}