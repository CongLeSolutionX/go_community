{
  "comments": [
    {
      "key": {
        "uuid": "f6195673_1921abde",
        "filename": "src/net/http/fs_test.go",
        "patchSetId": 4
      },
      "lineNbr": 930,
      "author": {
        "id": 5065
      },
      "writtenOn": "2015-10-30T01:10:22Z",
      "side": 1,
      "message": "why is this one Post? This is the one which downloads the file.",
      "revId": "dced4f32e0b4738812bb9c3c6ff732b4d9f19536",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f6195673_b92f57c9",
        "filename": "src/net/http/fs_test.go",
        "patchSetId": 4
      },
      "lineNbr": 930,
      "author": {
        "id": 5683
      },
      "writtenOn": "2015-10-30T01:14:26Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f6195673_1921abde",
      "revId": "dced4f32e0b4738812bb9c3c6ff732b4d9f19536",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f6195673_f935cf1c",
        "filename": "src/net/http/transport.go",
        "patchSetId": 4
      },
      "lineNbr": 281,
      "author": {
        "id": 5065
      },
      "writtenOn": "2015-10-30T01:10:22Z",
      "side": 1,
      "message": "perhaps this needs an upper bound on it.\n\nmaybe we try up to 2 cached connections and on the third try, then we force the use of a new connection?\n\nor something like that. but the infinite loop makes me nervous.",
      "revId": "dced4f32e0b4738812bb9c3c6ff732b4d9f19536",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f6195673_39934740",
        "filename": "src/net/http/transport.go",
        "patchSetId": 4
      },
      "lineNbr": 281,
      "author": {
        "id": 5683
      },
      "writtenOn": "2015-10-30T01:14:26Z",
      "side": 1,
      "message": "it does make me a bit nervous, though Chromium had a great explanation for this. Because it\u0027s only ever re-running if the idempotent request failed on a previously known-good connection, there is an inherent limit in how many times it can retry (the number of known-healthy connections to this specific host in the pool).",
      "parentUuid": "f6195673_f935cf1c",
      "revId": "dced4f32e0b4738812bb9c3c6ff732b4d9f19536",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f6195673_f934afd9",
        "filename": "src/net/http/transport.go",
        "patchSetId": 4
      },
      "lineNbr": 281,
      "author": {
        "id": 5065
      },
      "writtenOn": "2015-10-30T02:14:50Z",
      "side": 1,
      "message": "There might be a bug in the logic, then, because it appeared to loop forever, right? Isn\u0027t that what caused the sendfile failures?\n\nLet\u0027s add an explicit test for that case instead of relying on that sendfile case to catch it on accident.",
      "parentUuid": "f6195673_39934740",
      "revId": "dced4f32e0b4738812bb9c3c6ff732b4d9f19536",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f6195673_592de384",
        "filename": "src/net/http/transport.go",
        "patchSetId": 4
      },
      "lineNbr": 281,
      "author": {
        "id": 5683
      },
      "writtenOn": "2015-10-30T03:39:04Z",
      "side": 1,
      "message": "\u003e because it appeared to loop forever, right?\n\nNo, wasn\u0027t looping forever. It was retrying a single time (because the existing connection went away when the child server exited) and that retry was never being answered (because the child server was no longer accepting new connections on the socket) even though the listener was still open.\n\nSo the reason the Sendfile test was broken is that it attempted to retry once and waited forever for the server to accept the connection. That\u0027s my understanding of it, anyway.",
      "parentUuid": "f6195673_f934afd9",
      "revId": "dced4f32e0b4738812bb9c3c6ff732b4d9f19536",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}