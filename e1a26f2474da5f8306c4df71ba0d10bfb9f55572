{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "4b7018c0_a1d78eb0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 31249
      },
      "writtenOn": "2022-05-23T16:38:56Z",
      "side": 1,
      "message": "thanks for code reviewing.  \nI fixed in patch 3 except atomic.Uint32.  \nAnd tried using atomic.Uint32 in patch 4.  \nBut there may be a problem. In runfinq, we need to update fingStatus on g0. to avoid goready a goroutine that is still running. \nPlease check again if the concurrent operation of fingStatus is correct, thank youÔºÅ ",
      "revId": "e1a26f2474da5f8306c4df71ba0d10bfb9f55572",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fb56f9fb_eb16291b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 12120
      },
      "writtenOn": "2022-05-23T17:19:12Z",
      "side": 1,
      "message": "Good catch on the gopark commit! I missed that.",
      "parentUuid": "4b7018c0_a1d78eb0",
      "revId": "e1a26f2474da5f8306c4df71ba0d10bfb9f55572",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "74788b6b_93d38123",
        "filename": "src/runtime/mfinal.go",
        "patchSetId": 4
      },
      "lineNbr": 134,
      "author": {
        "id": 12120
      },
      "writtenOn": "2022-05-23T17:19:12Z",
      "side": 1,
      "message": "Optional: I believe we could prevent spurious wakeups by keeping thus update inside the lock and having runfing clear fingWake each time it takes the lock.",
      "revId": "e1a26f2474da5f8306c4df71ba0d10bfb9f55572",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e20e28d0_994d941c",
        "filename": "src/runtime/mfinal.go",
        "patchSetId": 4
      },
      "lineNbr": 147,
      "author": {
        "id": 12120
      },
      "writtenOn": "2022-05-23T17:19:12Z",
      "side": 1,
      "message": "How about this?\n\n```\nfunc wakefing() *g {\n  if ok :\u003d fingStatus.CompareAndSwap(fingCreated|fingWait|fingWake, fingCreated); ok {\n    return fing\n  }\n  return nil\n}\n```\n\nThe observation here is that for fing to be wake-able, the status must be exactly `fingCreated|fingWait|fingWake`, and once in that state nothing will change the status except this function. Thus we don\u0027t need a loop.",
      "revId": "e1a26f2474da5f8306c4df71ba0d10bfb9f55572",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c6245a54_6ecb379a",
        "filename": "src/runtime/mfinal.go",
        "patchSetId": 4
      },
      "lineNbr": 147,
      "author": {
        "id": 31249
      },
      "writtenOn": "2022-05-24T00:37:53Z",
      "side": 1,
      "message": "yeah, good idea, done.",
      "parentUuid": "e20e28d0_994d941c",
      "revId": "e1a26f2474da5f8306c4df71ba0d10bfb9f55572",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d53b8413_a9312ef4",
        "filename": "src/runtime/mfinal.go",
        "patchSetId": 4
      },
      "lineNbr": 169,
      "author": {
        "id": 12120
      },
      "writtenOn": "2022-05-23T17:19:12Z",
      "side": 1,
      "message": "\"after fing is put into a waiting state\"\n\n^ is the important part, not that this is on g0.",
      "range": {
        "startLine": 169,
        "startChar": 34,
        "endLine": 169,
        "endChar": 39
      },
      "revId": "e1a26f2474da5f8306c4df71ba0d10bfb9f55572",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2c721700_5517c493",
        "filename": "src/runtime/mfinal.go",
        "patchSetId": 4
      },
      "lineNbr": 169,
      "author": {
        "id": 31249
      },
      "writtenOn": "2022-05-24T00:37:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d53b8413_a9312ef4",
      "range": {
        "startLine": 169,
        "startChar": 34,
        "endLine": 169,
        "endChar": 39
      },
      "revId": "e1a26f2474da5f8306c4df71ba0d10bfb9f55572",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "454da799_86594f9c",
        "filename": "src/runtime/mfinal.go",
        "patchSetId": 4
      },
      "lineNbr": 257,
      "author": {
        "id": 12120
      },
      "writtenOn": "2022-05-23T17:19:12Z",
      "side": 1,
      "message": "Could this just be `fingStatus.And(^fingRunningFinalizer)`? Why do we need CAS?",
      "revId": "e1a26f2474da5f8306c4df71ba0d10bfb9f55572",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f1f31a6b_8c667d08",
        "filename": "src/runtime/mfinal.go",
        "patchSetId": 4
      },
      "lineNbr": 257,
      "author": {
        "id": 31249
      },
      "writtenOn": "2022-05-24T00:37:53Z",
      "side": 1,
      "message": "I try `fingStatus.And(^fingRunningFinalizer)`, it will report \n\"cannot use ^fingRunningFinalizer (untyped int constant -3) as uint32 value in argument to fingStatus.And (overflows)\"  \nI directly modified it to `fingStatus.Store(fingCreated)`  \nI think it\u0027s safe, right?",
      "parentUuid": "454da799_86594f9c",
      "revId": "e1a26f2474da5f8306c4df71ba0d10bfb9f55572",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7e670dd3_2f552c93",
        "filename": "src/runtime/mfinal.go",
        "patchSetId": 4
      },
      "lineNbr": 257,
      "author": {
        "id": 12120
      },
      "writtenOn": "2022-05-24T13:57:35Z",
      "side": 1,
      "message": "Eh, kind of. By using Store here you are effectively partially implementing my optional comment above to prevent spurious wakeups, as this Store may clear a fingWake set in queuefinalizer outside the lock.\n\nHowever, this is a very round-about, non-obvious way to implement that, so we shouldn\u0027t do it that way. Let\u0027s keep this as an And.\n\nYou can fix the build error by making `fingCreated` uint32 (which will be copied to the other constants). Given that `fingUninitialized` is already uint32, I assume it was a mistake that the others are untyped anyways.\n\nSee https://go.dev/play/p/53Cg-y1Q1R7",
      "parentUuid": "f1f31a6b_8c667d08",
      "revId": "e1a26f2474da5f8306c4df71ba0d10bfb9f55572",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "88dd8692_4f659648",
        "filename": "src/runtime/mfinal.go",
        "patchSetId": 4
      },
      "lineNbr": 257,
      "author": {
        "id": 31249
      },
      "writtenOn": "2022-05-24T15:02:57Z",
      "side": 1,
      "message": "Aha, yeah, you are right, thanks!   \nthis is an interesting error.",
      "parentUuid": "7e670dd3_2f552c93",
      "revId": "e1a26f2474da5f8306c4df71ba0d10bfb9f55572",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}