{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "4b7018c0_a1d78eb0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 31249
      },
      "writtenOn": "2022-05-23T16:38:56Z",
      "side": 1,
      "message": "thanks for code reviewing.  \nI fixed in patch 3 except atomic.Uint32.  \nAnd tried using atomic.Uint32 in patch 4.  \nBut there may be a problem. In runfinq, we need to update fingStatus on g0. to avoid goready a goroutine that is still running. \nPlease check again if the concurrent operation of fingStatus is correct, thank youÔºÅ ",
      "revId": "e1a26f2474da5f8306c4df71ba0d10bfb9f55572",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fb56f9fb_eb16291b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 12120
      },
      "writtenOn": "2022-05-23T17:19:12Z",
      "side": 1,
      "message": "Good catch on the gopark commit! I missed that.",
      "parentUuid": "4b7018c0_a1d78eb0",
      "revId": "e1a26f2474da5f8306c4df71ba0d10bfb9f55572",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "74788b6b_93d38123",
        "filename": "src/runtime/mfinal.go",
        "patchSetId": 4
      },
      "lineNbr": 134,
      "author": {
        "id": 12120
      },
      "writtenOn": "2022-05-23T17:19:12Z",
      "side": 1,
      "message": "Optional: I believe we could prevent spurious wakeups by keeping thus update inside the lock and having runfing clear fingWake each time it takes the lock.",
      "revId": "e1a26f2474da5f8306c4df71ba0d10bfb9f55572",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e20e28d0_994d941c",
        "filename": "src/runtime/mfinal.go",
        "patchSetId": 4
      },
      "lineNbr": 147,
      "author": {
        "id": 12120
      },
      "writtenOn": "2022-05-23T17:19:12Z",
      "side": 1,
      "message": "How about this?\n\n```\nfunc wakefing() *g {\n  if ok :\u003d fingStatus.CompareAndSwap(fingCreated|fingWait|fingWake, fingCreated); ok {\n    return fing\n  }\n  return nil\n}\n```\n\nThe observation here is that for fing to be wake-able, the status must be exactly `fingCreated|fingWait|fingWake`, and once in that state nothing will change the status except this function. Thus we don\u0027t need a loop.",
      "revId": "e1a26f2474da5f8306c4df71ba0d10bfb9f55572",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d53b8413_a9312ef4",
        "filename": "src/runtime/mfinal.go",
        "patchSetId": 4
      },
      "lineNbr": 169,
      "author": {
        "id": 12120
      },
      "writtenOn": "2022-05-23T17:19:12Z",
      "side": 1,
      "message": "\"after fing is put into a waiting state\"\n\n^ is the important part, not that this is on g0.",
      "range": {
        "startLine": 169,
        "startChar": 34,
        "endLine": 169,
        "endChar": 39
      },
      "revId": "e1a26f2474da5f8306c4df71ba0d10bfb9f55572",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "454da799_86594f9c",
        "filename": "src/runtime/mfinal.go",
        "patchSetId": 4
      },
      "lineNbr": 257,
      "author": {
        "id": 12120
      },
      "writtenOn": "2022-05-23T17:19:12Z",
      "side": 1,
      "message": "Could this just be `fingStatus.And(^fingRunningFinalizer)`? Why do we need CAS?",
      "revId": "e1a26f2474da5f8306c4df71ba0d10bfb9f55572",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}