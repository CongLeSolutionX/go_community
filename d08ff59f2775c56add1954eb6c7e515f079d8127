{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "5685f5e2_ae1fff28",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5167
      },
      "writtenOn": "2020-11-02T22:12:43Z",
      "side": 1,
      "message": "From a quick skim this looks very reasonable to me. One possible simplification: what about just sticking to the spanAllocStack type, and having a const that indicates stack spans must be physically aligned that triggers the new path in allocSpan? The const could just be set to true on openbsd generally to coincide with its MAP_STACK requirement.",
      "revId": "d08ff59f2775c56add1954eb6c7e515f079d8127",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "58436df4_8a0ad1b3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 13640
      },
      "writtenOn": "2020-11-03T12:52:10Z",
      "side": 1,
      "message": "This seems cleaner/simpler than a separate span allocation type - we could also just gate on physPageSize \u003e pageSize which would ensure alignment on any platform (all pageSize \u003c physPageSize platforms get physical page aligned stacks already).",
      "parentUuid": "5685f5e2_ae1fff28",
      "revId": "d08ff59f2775c56add1954eb6c7e515f079d8127",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f9640bf9_f447d393",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5167
      },
      "writtenOn": "2020-11-03T14:15:22Z",
      "side": 1,
      "message": "That\u0027s true, but it\u0027s not needed on any other platforms, and there is a little cost (slightly increased heap fragmentation).",
      "parentUuid": "58436df4_8a0ad1b3",
      "revId": "d08ff59f2775c56add1954eb6c7e515f079d8127",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}