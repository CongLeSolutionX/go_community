{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "be9bd6ff_c0bfa66c",
        "filename": "src/cmd/link/internal/ld/elf.go",
        "patchSetId": 2
      },
      "lineNbr": 1485,
      "author": {
        "id": 13315
      },
      "writtenOn": "2022-07-06T19:38:13Z",
      "side": 1,
      "message": "I\u0027m not really sure I understand this. What are the bad things? It shouldn\u0027t be marked read-only or it shouldn\u0027t be updated? Or, does it make sense to add a DT_MIPS_RLD_MAP entry?",
      "range": {
        "startLine": 1478,
        "startChar": 0,
        "endLine": 1485,
        "endChar": 3
      },
      "revId": "3d5396bb565a0b705e769761d813376391805757",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fc1a8f5f_69c266b0",
        "filename": "src/cmd/link/internal/ld/elf.go",
        "patchSetId": 2
      },
      "lineNbr": 1485,
      "author": {
        "id": 13640
      },
      "writtenOn": "2022-08-01T06:22:01Z",
      "side": 1,
      "message": "Memory protections have page granularity, which means that entire page (or pages) that the .dynamic section is contained in gets marked read/write and then read-only. If the .dynamic section is in a writable section, all of the data in the surrounding pages becomes read-only. This then leads to memory protection faults when something tries to write to it.\n\nRe DT_MIPS_RLD_MAP, I would have to investigate further, but from what I recall it would be a fair amount of effort with minimal gain.",
      "parentUuid": "be9bd6ff_c0bfa66c",
      "range": {
        "startLine": 1478,
        "startChar": 0,
        "endLine": 1485,
        "endChar": 3
      },
      "revId": "3d5396bb565a0b705e769761d813376391805757",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "becc8cbd_6657cbfe",
        "filename": "src/cmd/link/internal/ld/lib.go",
        "patchSetId": 2
      },
      "lineNbr": 256,
      "author": {
        "id": 13315
      },
      "writtenOn": "2022-07-06T19:38:13Z",
      "side": 1,
      "message": "The new function doesn\u0027t generate any symbol. Maybe call it Elffixup, or FixupSyms, or something like.",
      "revId": "3d5396bb565a0b705e769761d813376391805757",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f4ac822a_b117984f",
        "filename": "src/cmd/link/internal/ld/lib.go",
        "patchSetId": 2
      },
      "lineNbr": 256,
      "author": {
        "id": 13640
      },
      "writtenOn": "2022-08-01T06:22:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "becc8cbd_6657cbfe",
      "revId": "3d5396bb565a0b705e769761d813376391805757",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "56c47774_4f0d06a4",
        "filename": "src/cmd/link/internal/mips64/asm.go",
        "patchSetId": 2
      },
      "lineNbr": 47,
      "author": {
        "id": 13315
      },
      "writtenOn": "2022-07-06T19:38:13Z",
      "side": 1,
      "message": "Add some comments about the variables? Also, this is already the mips64 package. We probably can drop the mips prefix.",
      "range": {
        "startLine": 42,
        "startChar": 0,
        "endLine": 47,
        "endChar": 1
      },
      "revId": "3d5396bb565a0b705e769761d813376391805757",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "10cafe98_3c29e3fd",
        "filename": "src/cmd/link/internal/mips64/asm.go",
        "patchSetId": 2
      },
      "lineNbr": 47,
      "author": {
        "id": 13640
      },
      "writtenOn": "2022-08-01T06:22:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "56c47774_4f0d06a4",
      "range": {
        "startLine": 42,
        "startChar": 0,
        "endLine": 47,
        "endChar": 1
      },
      "revId": "3d5396bb565a0b705e769761d813376391805757",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bc1389cf_87ec86ab",
        "filename": "src/cmd/link/internal/mips64/asm.go",
        "patchSetId": 2
      },
      "lineNbr": 82,
      "author": {
        "id": 13315
      },
      "writtenOn": "2022-07-06T19:38:13Z",
      "side": 1,
      "message": "This and mipsGOTSymIndex seem pretty fixed. It seems fine to just hardcode. For mipsGOTSymIndex we can just compute here.",
      "revId": "3d5396bb565a0b705e769761d813376391805757",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1fb3044a_d9b32461",
        "filename": "src/cmd/link/internal/mips64/asm.go",
        "patchSetId": 2
      },
      "lineNbr": 82,
      "author": {
        "id": 13640
      },
      "writtenOn": "2022-08-01T06:22:01Z",
      "side": 1,
      "message": "While they could be hardcoded, changes to other parts of the linker will result in changes to these values - with the current code the values will be calculated correctly, regardless of what is in the GOT. As such, I\u0027d prefer to leave this as is.",
      "parentUuid": "bc1389cf_87ec86ab",
      "revId": "3d5396bb565a0b705e769761d813376391805757",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "11a74987_f7a6cceb",
        "filename": "src/cmd/link/internal/mips64/asm.go",
        "patchSetId": 2
      },
      "lineNbr": 195,
      "author": {
        "id": 13315
      },
      "writtenOn": "2022-07-06T19:38:13Z",
      "side": 1,
      "message": "Align the operand like other lines.",
      "range": {
        "startLine": 195,
        "startChar": 55,
        "endLine": 195,
        "endChar": 63
      },
      "revId": "3d5396bb565a0b705e769761d813376391805757",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "36dd5cfa_e2e8f111",
        "filename": "src/cmd/link/internal/mips64/asm.go",
        "patchSetId": 2
      },
      "lineNbr": 195,
      "author": {
        "id": 13640
      },
      "writtenOn": "2022-08-01T06:22:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "11a74987_f7a6cceb",
      "range": {
        "startLine": 195,
        "startChar": 55,
        "endLine": 195,
        "endChar": 63
      },
      "revId": "3d5396bb565a0b705e769761d813376391805757",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3165e19c_4d2e8009",
        "filename": "src/cmd/link/internal/mips64/asm.go",
        "patchSetId": 2
      },
      "lineNbr": 196,
      "author": {
        "id": 13315
      },
      "writtenOn": "2022-07-06T19:38:13Z",
      "side": 1,
      "message": "What do these instruction do? It takes R24 as input? What about R14 and R15?",
      "range": {
        "startLine": 191,
        "startChar": 0,
        "endLine": 196,
        "endChar": 72
      },
      "revId": "3d5396bb565a0b705e769761d813376391805757",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "213dfe5e_a87077fc",
        "filename": "src/cmd/link/internal/mips64/asm.go",
        "patchSetId": 2
      },
      "lineNbr": 196,
      "author": {
        "id": 13640
      },
      "writtenOn": "2022-08-01T06:22:01Z",
      "side": 1,
      "message": "The resolver requires the index into the GOT to be provided in $t8 (R24) and the return address to be provided in $t7 (R15). The address of the GOTPLT entry is in $t8 at this point, which is turned into an index by subtracting the address of the first entry, shifting to divide by the size of an entry, then subtracting two to allow for the first two entries being reserved.\n\nI\u0027ve expanded the comment slightly.",
      "parentUuid": "3165e19c_4d2e8009",
      "range": {
        "startLine": 191,
        "startChar": 0,
        "endLine": 196,
        "endChar": 72
      },
      "revId": "3d5396bb565a0b705e769761d813376391805757",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6c771de5_5ef95515",
        "filename": "src/cmd/link/internal/mips64/obj.go",
        "patchSetId": 2
      },
      "lineNbr": 105,
      "author": {
        "id": 13315
      },
      "writtenOn": "2022-07-06T19:38:13Z",
      "side": 1,
      "message": "Just set them at the definitions of the variables?",
      "range": {
        "startLine": 102,
        "startChar": 0,
        "endLine": 105,
        "endChar": 20
      },
      "revId": "3d5396bb565a0b705e769761d813376391805757",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1c2e8e0a_4ee30e25",
        "filename": "src/cmd/link/internal/mips64/obj.go",
        "patchSetId": 2
      },
      "lineNbr": 105,
      "author": {
        "id": 13640
      },
      "writtenOn": "2022-08-01T06:22:01Z",
      "side": 1,
      "message": "The reason for not doing that is due to the fact that they\u0027re global variables - if any code runs the linker multiple times (e.g. via test code), then they would not be correctly reinitialised (that said, I\u0027m not sure if anything actually does this currently).",
      "parentUuid": "6c771de5_5ef95515",
      "range": {
        "startLine": 102,
        "startChar": 0,
        "endLine": 105,
        "endChar": 20
      },
      "revId": "3d5396bb565a0b705e769761d813376391805757",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}