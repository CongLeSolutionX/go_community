{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "c8446c8e_0add0ab5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 19,
      "author": {
        "id": 13315
      },
      "writtenOn": "2023-06-26T19:07:09Z",
      "side": 1,
      "message": "I think we should keep using p.Reg for instructions that are known to take plain registers. For ADD R1, R2 we should just use p.Reg. I think many integer instructions are like this and they should keep working as before (i.e. no change in cmd/compile for those cases). For vector instructions and others that could take arrangements etc., we could skip the Reg field.",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 19,
        "endChar": 47
      },
      "revId": "1e41b2124bc8ec3c60fe84e8b75e568ae8a9f968",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a27b78d3_48b28c92",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 39,
      "author": {
        "id": 13315
      },
      "writtenOn": "2023-06-26T19:07:09Z",
      "side": 1,
      "message": "This is fine but consider using Addr.Scale (see below)?",
      "revId": "1e41b2124bc8ec3c60fe84e8b75e568ae8a9f968",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "31d5488e_37b962e9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 99,
      "author": {
        "id": 13315
      },
      "writtenOn": "2023-06-26T19:07:09Z",
      "side": 1,
      "message": "Why not use Offset for constant offset, Index (and possibly Scale) for register offset?",
      "range": {
        "startLine": 98,
        "startChar": 0,
        "endLine": 99,
        "endChar": 34
      },
      "revId": "1e41b2124bc8ec3c60fe84e8b75e568ae8a9f968",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8da90433_643a95be",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 113,
      "author": {
        "id": 13315
      },
      "writtenOn": "2023-06-26T19:07:09Z",
      "side": 1,
      "message": "Can we use Addr.Index for the register number, Addr.Scale for arrangement/type/amount? The Addr.Scale bit fields can be the same as the TYPE_REG case above.",
      "range": {
        "startLine": 107,
        "startChar": 0,
        "endLine": 113,
        "endChar": 66
      },
      "revId": "1e41b2124bc8ec3c60fe84e8b75e568ae8a9f968",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "90b6b8ab_ab28ae8a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 137,
      "author": {
        "id": 13315
      },
      "writtenOn": "2023-06-26T19:07:09Z",
      "side": 1,
      "message": "Why do we need this? We should already be able to distinguish architectures.",
      "range": {
        "startLine": 136,
        "startChar": 0,
        "endLine": 137,
        "endChar": 20
      },
      "revId": "1e41b2124bc8ec3c60fe84e8b75e568ae8a9f968",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e3b75362_eb3057dc",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 147,
      "author": {
        "id": 13315
      },
      "writtenOn": "2023-06-26T19:07:09Z",
      "side": 1,
      "message": "Are they Addr.Scale, Addr.Index, or the bit fields above? I think we should use Addr.Scale and Addr.Index.",
      "revId": "1e41b2124bc8ec3c60fe84e8b75e568ae8a9f968",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "61df864e_1a6ac673",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-06-26T09:34:36Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003d1e41b212\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "1e41b2124bc8ec3c60fe84e8b75e568ae8a9f968",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2505261c_03136946",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-06-26T09:46:01Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "61df864e_1a6ac673",
      "tag": "autogenerated:trybots~happy",
      "revId": "1e41b2124bc8ec3c60fe84e8b75e568ae8a9f968",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "181dbc5e_68fdcd1f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 13315
      },
      "writtenOn": "2023-06-26T19:07:09Z",
      "side": 1,
      "message": "This looks like the right direction overall. Just some high-level comments from mostly reading the CL description. Haven\u0027t read the code in detail. Thanks.",
      "revId": "1e41b2124bc8ec3c60fe84e8b75e568ae8a9f968",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}