{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "c8446c8e_0add0ab5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 19,
      "author": {
        "id": 13315
      },
      "writtenOn": "2023-06-26T19:07:09Z",
      "side": 1,
      "message": "I think we should keep using p.Reg for instructions that are known to take plain registers. For ADD R1, R2 we should just use p.Reg. I think many integer instructions are like this and they should keep working as before (i.e. no change in cmd/compile for those cases). For vector instructions and others that could take arrangements etc., we could skip the Reg field.",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 19,
        "endChar": 47
      },
      "revId": "1e41b2124bc8ec3c60fe84e8b75e568ae8a9f968",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "16fc885a_bcf172ce",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 19,
      "author": {
        "id": 53189
      },
      "writtenOn": "2023-06-27T09:23:33Z",
      "side": 1,
      "message": "That sounds a good idea. If then I think it may need more changes in the instructions encoding phrase. \n\nI will have a try on this, thanks~",
      "parentUuid": "c8446c8e_0add0ab5",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 19,
        "endChar": 47
      },
      "revId": "1e41b2124bc8ec3c60fe84e8b75e568ae8a9f968",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8e1c877d_b9ff932f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 19,
      "author": {
        "id": 24534
      },
      "writtenOn": "2023-07-05T03:09:40Z",
      "side": 1,
      "message": "If we keep p.Reg, getting the second and third source operands is a bit cumbersome. For the second source operand, it may be p.Reg or in p.RestArgs. For the third source operand, it depends on whether the second source operand is stored in p.RestArgs. The same is true for p.RegTo2.\n\nIf we write a wrapper to get p.Reg and p.RegTo2, we need to convert p.Reg and p.RegTo2 to obj.Addr, because p.Reg and p.RestArgs are of different types. So this seems to be superfluous.",
      "parentUuid": "16fc885a_bcf172ce",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 19,
        "endChar": 47
      },
      "revId": "1e41b2124bc8ec3c60fe84e8b75e568ae8a9f968",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f9785f9b_ba422e25",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 19,
      "author": {
        "id": 13315
      },
      "writtenOn": "2023-10-06T19:57:23Z",
      "side": 1,
      "message": "I still think keeping p.Reg is better. It is fairly easy to convert p.Reg to an Addr, if we want to do that.",
      "parentUuid": "8e1c877d_b9ff932f",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 19,
        "endChar": 47
      },
      "revId": "1e41b2124bc8ec3c60fe84e8b75e568ae8a9f968",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "86957696_76d5dc13",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 19,
      "author": {
        "id": 53189
      },
      "writtenOn": "2023-10-07T01:54:12Z",
      "side": 1,
      "message": "Sorry for not updating the comments. In the current implementation we do keep the `p.Reg` for the single register. You can check `func oplook` to confirm this. Thanks~",
      "parentUuid": "f9785f9b_ba422e25",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 19,
        "endChar": 47
      },
      "revId": "1e41b2124bc8ec3c60fe84e8b75e568ae8a9f968",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a27b78d3_48b28c92",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 39,
      "author": {
        "id": 13315
      },
      "writtenOn": "2023-06-26T19:07:09Z",
      "side": 1,
      "message": "This is fine but consider using Addr.Scale (see below)?",
      "revId": "1e41b2124bc8ec3c60fe84e8b75e568ae8a9f968",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "af6ccfcd_1e099169",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 39,
      "author": {
        "id": 53189
      },
      "writtenOn": "2023-06-27T09:23:33Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "a27b78d3_48b28c92",
      "revId": "1e41b2124bc8ec3c60fe84e8b75e568ae8a9f968",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "31d5488e_37b962e9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 99,
      "author": {
        "id": 13315
      },
      "writtenOn": "2023-06-26T19:07:09Z",
      "side": 1,
      "message": "Why not use Offset for constant offset, Index (and possibly Scale) for register offset?",
      "range": {
        "startLine": 98,
        "startChar": 0,
        "endLine": 99,
        "endChar": 34
      },
      "revId": "1e41b2124bc8ec3c60fe84e8b75e568ae8a9f968",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8c81a70f_b78a6a0b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 99,
      "author": {
        "id": 53189
      },
      "writtenOn": "2023-06-27T09:23:33Z",
      "side": 1,
      "message": "Because `offset` sounds more reasonable for this field so I put all the info in it.\n\nGot it, I will do it later, thanks~",
      "parentUuid": "31d5488e_37b962e9",
      "range": {
        "startLine": 98,
        "startChar": 0,
        "endLine": 99,
        "endChar": 34
      },
      "revId": "1e41b2124bc8ec3c60fe84e8b75e568ae8a9f968",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "10fc4090_9bfe35b3",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 99,
      "author": {
        "id": 53189
      },
      "writtenOn": "2023-06-28T02:36:14Z",
      "side": 1,
      "message": "Oh sorry I missed a special case. We can\u0027t use `Index` for encoding `Rm` since there are such instructions in SVE:\n```\narm64 syntax: ADR \u003cZd\u003e.D, [\u003cZn\u003e.D, \u003cZm\u003e.D, SXTW{ \u003camount\u003e}]\n```\nGo syntax could be:\n```\ngo syntax: ZADR (Zn.D)(Zm.D.UXTW\u003c\u003camount), Zd.D\n```\n`Zn` has an arrangement so we have to encode the arrangement info in `Index`. In this case we can\u0027t use `Index` for other use.\n\nMaybe we can use `Scale` for the register number, and offset for the type info.",
      "parentUuid": "8c81a70f_b78a6a0b",
      "range": {
        "startLine": 98,
        "startChar": 0,
        "endLine": 99,
        "endChar": 34
      },
      "revId": "1e41b2124bc8ec3c60fe84e8b75e568ae8a9f968",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8da90433_643a95be",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 113,
      "author": {
        "id": 13315
      },
      "writtenOn": "2023-06-26T19:07:09Z",
      "side": 1,
      "message": "Can we use Addr.Index for the register number, Addr.Scale for arrangement/type/amount? The Addr.Scale bit fields can be the same as the TYPE_REG case above.",
      "range": {
        "startLine": 107,
        "startChar": 0,
        "endLine": 113,
        "endChar": 66
      },
      "revId": "1e41b2124bc8ec3c60fe84e8b75e568ae8a9f968",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dc6ed775_308c2271",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 113,
      "author": {
        "id": 53189
      },
      "writtenOn": "2023-06-27T09:23:33Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "8da90433_643a95be",
      "range": {
        "startLine": 107,
        "startChar": 0,
        "endLine": 113,
        "endChar": 66
      },
      "revId": "1e41b2124bc8ec3c60fe84e8b75e568ae8a9f968",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "90b6b8ab_ab28ae8a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 137,
      "author": {
        "id": 13315
      },
      "writtenOn": "2023-06-26T19:07:09Z",
      "side": 1,
      "message": "Why do we need this? We should already be able to distinguish architectures.",
      "range": {
        "startLine": 136,
        "startChar": 0,
        "endLine": 137,
        "endChar": 20
      },
      "revId": "1e41b2124bc8ec3c60fe84e8b75e568ae8a9f968",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eb41ab2a_f21065a6",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 137,
      "author": {
        "id": 53189
      },
      "writtenOn": "2023-06-27T09:23:33Z",
      "side": 1,
      "message": "Since the range of register list in different architectures is different. The register list in arm64 is in range of `[RegListARM64Lo, RegListARM64Hi]` so the indicate bit is `1\u003c\u003c60`, see the definition in util.go.\n```\n// Each architecture is allotted a distinct subspace: [Lo, Hi) for declaring its\n// arch-specific register list numbers.\nconst (\n\tRegListARMLo \u003d 0\n\tRegListARMHi \u003d 1 \u003c\u003c 16\n\n\t// arm64 uses the 60th bit to differentiate from other archs\n\tRegListARM64Lo \u003d 1 \u003c\u003c 60\n\tRegListARM64Hi \u003d 1\u003c\u003c61 - 1\n\n\t// x86 uses the 61th bit to differentiate from other archs\n\tRegListX86Lo \u003d 1 \u003c\u003c 61\n\tRegListX86Hi \u003d 1\u003c\u003c62 - 1\n)\n```",
      "parentUuid": "90b6b8ab_ab28ae8a",
      "range": {
        "startLine": 136,
        "startChar": 0,
        "endLine": 137,
        "endChar": 20
      },
      "revId": "1e41b2124bc8ec3c60fe84e8b75e568ae8a9f968",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e3b75362_eb3057dc",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 147,
      "author": {
        "id": 13315
      },
      "writtenOn": "2023-06-26T19:07:09Z",
      "side": 1,
      "message": "Are they Addr.Scale, Addr.Index, or the bit fields above? I think we should use Addr.Scale and Addr.Index.",
      "revId": "1e41b2124bc8ec3c60fe84e8b75e568ae8a9f968",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e57d0243_66156518",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 147,
      "author": {
        "id": 53189
      },
      "writtenOn": "2023-06-27T09:23:33Z",
      "side": 1,
      "message": "The `Scale` \u0026 `Index` is just a number here, which is different from what we have defined above.\n\nAnd yes, we can use `Addr.Scale` \u0026 `Addr.Index` in this case, thanks~",
      "parentUuid": "e3b75362_eb3057dc",
      "revId": "1e41b2124bc8ec3c60fe84e8b75e568ae8a9f968",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "61df864e_1a6ac673",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-06-26T09:34:36Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003d1e41b212\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "1e41b2124bc8ec3c60fe84e8b75e568ae8a9f968",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2505261c_03136946",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-06-26T09:46:01Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "61df864e_1a6ac673",
      "tag": "autogenerated:trybots~happy",
      "revId": "1e41b2124bc8ec3c60fe84e8b75e568ae8a9f968",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "181dbc5e_68fdcd1f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 13315
      },
      "writtenOn": "2023-06-26T19:07:09Z",
      "side": 1,
      "message": "This looks like the right direction overall. Just some high-level comments from mostly reading the CL description. Haven\u0027t read the code in detail. Thanks.",
      "revId": "1e41b2124bc8ec3c60fe84e8b75e568ae8a9f968",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}