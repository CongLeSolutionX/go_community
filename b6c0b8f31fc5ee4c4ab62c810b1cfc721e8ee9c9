{
  "comments": [
    {
      "key": {
        "uuid": "8d296a4e_60f159e4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 97,
      "author": {
        "id": 5065
      },
      "writtenOn": "2017-04-27T16:31:29Z",
      "side": 1,
      "message": "all these new allocations and especially going from zero to non-zero is a bummer.",
      "range": {
        "startLine": 86,
        "startChar": 0,
        "endLine": 97,
        "endChar": 68
      },
      "revId": "b6c0b8f31fc5ee4c4ab62c810b1cfc721e8ee9c9",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e3c64113_e86a8884",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 97,
      "author": {
        "id": 6365
      },
      "writtenOn": "2017-04-27T17:16:07Z",
      "side": 1,
      "message": "Indeed.  They\u0027re almost certainly the source of the single-core degradation, but according to the benchmarks the allocations are more than offset by the reduction in mutex contention for multi-core usage.\n\nIf I understand correctly, they\u0027re all interface allocations: they could potentially be eliminated with better inlining and/or a more invasive sync.Map implementation.",
      "parentUuid": "8d296a4e_60f159e4",
      "range": {
        "startLine": 86,
        "startChar": 0,
        "endLine": 97,
        "endChar": 68
      },
      "revId": "b6c0b8f31fc5ee4c4ab62c810b1cfc721e8ee9c9",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "13d0d7d8_c9115c5c",
        "filename": "src/expvar/expvar.go",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 5065
      },
      "writtenOn": "2017-04-27T16:31:29Z",
      "side": 1,
      "message": "This is sad.",
      "revId": "b6c0b8f31fc5ee4c4ab62c810b1cfc721e8ee9c9",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "297ed397_a36c6861",
        "filename": "src/expvar/expvar.go",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 6365
      },
      "writtenOn": "2017-04-27T17:16:07Z",
      "side": 1,
      "message": "I can replace the unsafe.Pointer usage with atomic.Value if you prefer, but it would be somewhat less efficient.\n\nIf we had generics, then we could do atomic.Value without the overhead...  :)",
      "parentUuid": "13d0d7d8_c9115c5c",
      "revId": "b6c0b8f31fc5ee4c4ab62c810b1cfc721e8ee9c9",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    }
  ]
}