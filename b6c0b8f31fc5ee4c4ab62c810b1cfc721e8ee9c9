{
  "comments": [
    {
      "key": {
        "uuid": "8d296a4e_60f159e4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 97,
      "author": {
        "id": 5065
      },
      "writtenOn": "2017-04-27T16:31:29Z",
      "side": 1,
      "message": "all these new allocations and especially going from zero to non-zero is a bummer.",
      "range": {
        "startLine": 86,
        "startChar": 0,
        "endLine": 97,
        "endChar": 68
      },
      "revId": "b6c0b8f31fc5ee4c4ab62c810b1cfc721e8ee9c9",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e3c64113_e86a8884",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 97,
      "author": {
        "id": 6365
      },
      "writtenOn": "2017-04-27T17:16:07Z",
      "side": 1,
      "message": "Indeed.  They\u0027re almost certainly the source of the single-core degradation, but according to the benchmarks the allocations are more than offset by the reduction in mutex contention for multi-core usage.\n\nIf I understand correctly, they\u0027re all interface allocations: they could potentially be eliminated with better inlining and/or a more invasive sync.Map implementation.",
      "parentUuid": "8d296a4e_60f159e4",
      "range": {
        "startLine": 86,
        "startChar": 0,
        "endLine": 97,
        "endChar": 68
      },
      "revId": "b6c0b8f31fc5ee4c4ab62c810b1cfc721e8ee9c9",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6f2fe587_cf07e58b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 97,
      "author": {
        "id": 5065
      },
      "writtenOn": "2017-04-27T17:27:09Z",
      "side": 1,
      "message": "For this package degrading single-core for better multi-core makes sense. I wouldn\u0027t generalize that to all packages. Making single-core JSON performance 15% worse to get 90% better 2-core improvement isn\u0027t necessarily an improvement. There\u0027s lots of single-core batch jobs processing JSON/proto/etc reflect-heavy things.\n\nAlso, I wouldn\u0027t assume drastically better escape analysis is coming anytime soon. The easy stuff is all done and the hard stuff (seeing through interfaces \u0026 virtual calls) has been on the radar for ages with no hope of progress or plan.",
      "parentUuid": "e3c64113_e86a8884",
      "range": {
        "startLine": 86,
        "startChar": 0,
        "endLine": 97,
        "endChar": 68
      },
      "revId": "b6c0b8f31fc5ee4c4ab62c810b1cfc721e8ee9c9",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6a0ee969_6f7853e4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 97,
      "author": {
        "id": 6365
      },
      "writtenOn": "2017-04-27T17:49:13Z",
      "side": 1,
      "message": "\u003e For this package degrading single-core for better multi-core makes sense. I wouldn\u0027t generalize that to all packages. Making single-core JSON performance 15% worse to get 90% better 2-core improvement isn\u0027t necessarily an improvement. There\u0027s lots of single-core batch jobs processing JSON/proto/etc reflect-heavy things.\n\nAgreed: the tradeoff of single-core vs. multi-core performance definitely depends on usage.  In this particular case, I think the dramatic steady-state improvements to (*Map).Add are likely to outweigh the single-core slowdown for a broad class of real-world programs (basically anything that uses counters like MapReduce).\n\nDo bear in mind that the reciprocal of the percentage is often what matters: a 90% decrease in time/op corresponds to a 10x increase in per-core throughput, whereas a 100% increase in time/op is only a factor of 2x.\n\n(Since you mention JSON specifically: sync.Map turns out to be an unambiguous win there.  https://go-review.googlesource.com/c/41931/.)\n\n\n\u003e Also, I wouldn\u0027t assume drastically better escape analysis is coming anytime soon. The easy stuff is all done and the hard stuff (seeing through interfaces \u0026 virtual calls) has been on the radar for ages with no hope of progress or plan.\n\nYep.  In the medium term, I think we\u0027re more likely to see improvements due to sync.Map optimization than due to better inlining and escape analysis.",
      "parentUuid": "6f2fe587_cf07e58b",
      "range": {
        "startLine": 86,
        "startChar": 0,
        "endLine": 97,
        "endChar": 68
      },
      "revId": "b6c0b8f31fc5ee4c4ab62c810b1cfc721e8ee9c9",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "13d0d7d8_c9115c5c",
        "filename": "src/expvar/expvar.go",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 5065
      },
      "writtenOn": "2017-04-27T16:31:29Z",
      "side": 1,
      "message": "This is sad.",
      "revId": "b6c0b8f31fc5ee4c4ab62c810b1cfc721e8ee9c9",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "297ed397_a36c6861",
        "filename": "src/expvar/expvar.go",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 6365
      },
      "writtenOn": "2017-04-27T17:16:07Z",
      "side": 1,
      "message": "I can replace the unsafe.Pointer usage with atomic.Value if you prefer, but it would be somewhat less efficient.\n\nIf we had generics, then we could do atomic.Value without the overhead...  :)",
      "parentUuid": "13d0d7d8_c9115c5c",
      "revId": "b6c0b8f31fc5ee4c4ab62c810b1cfc721e8ee9c9",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4aa88708_044112da",
        "filename": "src/expvar/expvar.go",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 5065
      },
      "writtenOn": "2017-04-27T17:27:09Z",
      "side": 1,
      "message": "I think we should use atomic.Value.\n\nHistorically there\u0027s been very hard push back against adding unsafe to packages outside of sync/runtime/reflect.",
      "parentUuid": "297ed397_a36c6861",
      "revId": "b6c0b8f31fc5ee4c4ab62c810b1cfc721e8ee9c9",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "95aacaa7_d9299d23",
        "filename": "src/expvar/expvar.go",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 6365
      },
      "writtenOn": "2017-04-27T17:49:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4aa88708_044112da",
      "revId": "b6c0b8f31fc5ee4c4ab62c810b1cfc721e8ee9c9",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}