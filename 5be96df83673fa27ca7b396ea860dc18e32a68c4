{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "eb446cdb_047806a0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 57259
      },
      "writtenOn": "2024-02-08T17:20:35Z",
      "side": 1,
      "message": "I\u0027m curious: what were the pc values in the traceback been used for historically? Given the bug unearthed in this CL, and the lack of any existing tests that consume them, and the difficulty of subtracting the process-specific text segment base offset, it\u0027s hard to imagine that they were of much use.\n\nShould I file a proposal to alter the traceback output to include the text segment base offset so that consumers can reliably map the PC values back to the text section?",
      "revId": "5be96df83673fa27ca7b396ea860dc18e32a68c4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8cf0a818_236dfe49",
        "filename": "src/runtime/traceback.go",
        "patchSetId": 6
      },
      "lineNbr": 1004,
      "author": {
        "id": 13315
      },
      "writtenOn": "2024-02-07T21:11:47Z",
      "side": 1,
      "message": "For the not-inlined case, is this change intentional? Should this still be u.frame.pc?",
      "range": {
        "startLine": 1004,
        "startChar": 73,
        "endLine": 1004,
        "endChar": 80
      },
      "revId": "5be96df83673fa27ca7b396ea860dc18e32a68c4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "67313079_46453227",
        "filename": "src/runtime/traceback.go",
        "patchSetId": 6
      },
      "lineNbr": 1004,
      "author": {
        "id": 57259
      },
      "writtenOn": "2024-02-08T17:16:43Z",
      "side": 1,
      "message": "\u003e For the not-inlined case, is this change intentional?\n\nYes! Take a look at the corresponding code in runtime.Callers (which, unlike this function, had existing functional tests):\n\n```\nfunc tracebackPCs(u *unwinder, skip int, pcBuf []uintptr) int {\n\t...\n\tfor ; n \u003c len(pcBuf) \u0026\u0026 u.valid(); u.next() {\n\t\t...\n\t\tfor iu, uf :\u003d newInlineUnwinder(f, u.symPC()); n \u003c len(pcBuf) \u0026\u0026 uf.valid(); uf \u003d iu.next(uf) {\n\t\t\tsf :\u003d iu.srcFunc(uf)\n\t\t\t...\n\t\t\tpcBuf[n] \u003d uf.pc + 1\n}\n```\nThanks to Austin for pointing this out---I hadn\u0027t suspected the existing code had a bug.",
      "parentUuid": "8cf0a818_236dfe49",
      "range": {
        "startLine": 1004,
        "startChar": 73,
        "endLine": 1004,
        "endChar": 80
      },
      "revId": "5be96df83673fa27ca7b396ea860dc18e32a68c4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e85cd91e_6ee1d504",
        "filename": "src/runtime/traceback.go",
        "patchSetId": 6
      },
      "lineNbr": 1004,
      "author": {
        "id": 13315
      },
      "writtenOn": "2024-02-08T18:02:17Z",
      "side": 1,
      "message": "When do they differ? For a non-inlined frame I think they are equal?\n\nIf they actually differ, what about the code above that prints the relative PC? I think we should use the same value for absolute and relative PC.",
      "parentUuid": "67313079_46453227",
      "range": {
        "startLine": 1004,
        "startChar": 73,
        "endLine": 1004,
        "endChar": 80
      },
      "revId": "5be96df83673fa27ca7b396ea860dc18e32a68c4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "53c5aa44_24f7934e",
        "filename": "src/runtime/traceback.go",
        "patchSetId": 6
      },
      "lineNbr": 1004,
      "author": {
        "id": 57259
      },
      "writtenOn": "2024-02-08T18:27:07Z",
      "side": 1,
      "message": "\u003e When do they differ? For a non-inlined frame I think they are equal?\n\nNo, they are not, nor do they differ by only +/-1. I\u0027m not sure why; I suspect the old value was simply wrong, and was not covered by any test.\n\n\n\u003e If they actually differ, what about the code above that prints the relative PC? I think we should use the same value for absolute and relative PC.\n\nGood point; done.\n\nBut see my question on the CL as a whole: what use were the old PC values? Did anyone use them for anything? I can\u0027t see how they could be useful since they related to a dead process. There isn\u0027t even a chance to attach a debugger to the address space before it goes away.",
      "parentUuid": "e85cd91e_6ee1d504",
      "range": {
        "startLine": 1004,
        "startChar": 73,
        "endLine": 1004,
        "endChar": 80
      },
      "revId": "5be96df83673fa27ca7b396ea860dc18e32a68c4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e9ed73f1_dab24710",
        "filename": "src/runtime/traceback.go",
        "patchSetId": 6
      },
      "lineNbr": 1004,
      "author": {
        "id": 13315
      },
      "writtenOn": "2024-02-08T19:42:24Z",
      "side": 1,
      "message": "Okay, I think I see how they can differ. If the frame doesn\u0027t have any inlining, I think they should be equal. But if it actually has some inlining and this is the outermost frame in the inlining stack, in this case isInlined is false. I think in this case uf.pc+1 is correctly the logical \"call site\" of that inlined call, whereas u.frame.pc is probably (the next instruction of) the last executed CALL instruction\u0027s PC (which should belong to the inlined frame instead).\n\nI sometimes used the PC values, for manual debugging. Either I have the exact binary, or I can reproduce a similar one, so I can associate the PC (at least the relative PC) to an instruction. But I probably didn\u0027t pay too much attention to inlined frames. It pretty much always pointed to a CALL instruction and I felt that was okay.",
      "parentUuid": "53c5aa44_24f7934e",
      "range": {
        "startLine": 1004,
        "startChar": 73,
        "endLine": 1004,
        "endChar": 80
      },
      "revId": "5be96df83673fa27ca7b396ea860dc18e32a68c4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bd867bf7_8cc386a7",
        "filename": "src/runtime/traceback.go",
        "patchSetId": 6
      },
      "lineNbr": 1004,
      "author": {
        "id": 13315
      },
      "writtenOn": "2024-02-08T19:46:32Z",
      "side": 1,
      "message": "Thinking more: since we did not print PCs for inlined frames, if we print only one PC for a physical frame, then printing the PC of that CALL instruction is probably the right thing to do. We just associated to the outermost frame of the inlining stack (because other frames don\u0027t have PCs). In that sense, the old code wasn\u0027t actually wrong. But as we now print PCs for inlined frames, we should change it to the logical call site, as this CL correctly does.",
      "parentUuid": "e9ed73f1_dab24710",
      "range": {
        "startLine": 1004,
        "startChar": 73,
        "endLine": 1004,
        "endChar": 80
      },
      "revId": "5be96df83673fa27ca7b396ea860dc18e32a68c4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "644bd4c6_f1ced03f",
        "filename": "src/runtime/traceback.go",
        "patchSetId": 6
      },
      "lineNbr": 1004,
      "author": {
        "id": 57259
      },
      "writtenOn": "2024-02-08T19:56:35Z",
      "side": 1,
      "message": "\u003e I think in this case uf.pc+1 is correctly the logical \"call site\" of that inlined call, whereas u.frame.pc is probably (the next instruction of) the last executed CALL instruction\u0027s PC (which should belong to the inlined frame instead).\n\nAha! That makes sense. Thanks for digging.",
      "parentUuid": "e9ed73f1_dab24710",
      "range": {
        "startLine": 1004,
        "startChar": 73,
        "endLine": 1004,
        "endChar": 80
      },
      "revId": "5be96df83673fa27ca7b396ea860dc18e32a68c4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2e1731c6_f2aab039",
        "filename": "src/runtime/traceback.go",
        "patchSetId": 6
      },
      "lineNbr": 1004,
      "author": {
        "id": 57259
      },
      "writtenOn": "2024-02-08T20:02:13Z",
      "side": 1,
      "message": "\u003e In that sense, the old code wasn\u0027t actually wrong. \n\nYeah, that\u0027s a plausible rationalization: the old traceback format \"flattened away\" the inlining from the PCs. But it did nonetheless report the func/file/line for each inlined call, though without relPC and PC information, as if it hadn\u0027t fully made up its mind whether it was a physical or logical representation of the stack.",
      "parentUuid": "644bd4c6_f1ced03f",
      "range": {
        "startLine": 1004,
        "startChar": 73,
        "endLine": 1004,
        "endChar": 80
      },
      "revId": "5be96df83673fa27ca7b396ea860dc18e32a68c4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "08b59f05_e615dc41",
        "filename": "src/runtime/traceback.go",
        "patchSetId": 6
      },
      "lineNbr": 1009,
      "author": {
        "id": 13315
      },
      "writtenOn": "2024-02-07T21:11:47Z",
      "side": 1,
      "message": "It may be good to have some comment about the +1.",
      "range": {
        "startLine": 1009,
        "startChar": 28,
        "endLine": 1009,
        "endChar": 30
      },
      "revId": "5be96df83673fa27ca7b396ea860dc18e32a68c4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "124be2c3_a81b7396",
        "filename": "src/runtime/traceback.go",
        "patchSetId": 6
      },
      "lineNbr": 1009,
      "author": {
        "id": 57259
      },
      "writtenOn": "2024-02-08T17:16:43Z",
      "side": 1,
      "message": "Good point.\n\n```\n\t\t// The contract between Callers and CallersFrames uses\n\t\t// return addresses, which are +1 relative to the CALL\n\t\t// instruction. Follow that convention.\n\t\tpc :\u003d uf.pc + 1\n```",
      "parentUuid": "08b59f05_e615dc41",
      "range": {
        "startLine": 1009,
        "startChar": 28,
        "endLine": 1009,
        "endChar": 30
      },
      "revId": "5be96df83673fa27ca7b396ea860dc18e32a68c4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2205e459_22e5adcd",
        "filename": "src/runtime/traceback.go",
        "patchSetId": 6
      },
      "lineNbr": 1009,
      "author": {
        "id": 13315
      },
      "writtenOn": "2024-02-08T18:02:17Z",
      "side": 1,
      "message": "Thanks. Perhaps add the comment to the code.",
      "parentUuid": "124be2c3_a81b7396",
      "range": {
        "startLine": 1009,
        "startChar": 28,
        "endLine": 1009,
        "endChar": 30
      },
      "revId": "5be96df83673fa27ca7b396ea860dc18e32a68c4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7d630a91_3390fa0f",
        "filename": "src/runtime/traceback.go",
        "patchSetId": 6
      },
      "lineNbr": 1009,
      "author": {
        "id": 57259
      },
      "writtenOn": "2024-02-08T18:27:07Z",
      "side": 1,
      "message": "I did, but my git mail failed due to gcert. Try again now. Sorry for the confusion.",
      "parentUuid": "2205e459_22e5adcd",
      "range": {
        "startLine": 1009,
        "startChar": 28,
        "endLine": 1009,
        "endChar": 30
      },
      "revId": "5be96df83673fa27ca7b396ea860dc18e32a68c4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}