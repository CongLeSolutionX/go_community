{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "c5e26ae2_29aa8ee5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-09-23T04:07:56Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003d37887830\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "37887830e897a33da8650242a68e67ba1710a829",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9ddf3d3a_b42426a4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-09-23T04:07:56Z",
      "side": 1,
      "message": "Superseded.",
      "parentUuid": "221e5d5b_9ef49a59",
      "tag": "autogenerated:trybots~beginning",
      "revId": "37887830e897a33da8650242a68e67ba1710a829",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ad246d1d_61190922",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-09-23T04:20:23Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "c5e26ae2_29aa8ee5",
      "tag": "autogenerated:trybots~happy",
      "revId": "37887830e897a33da8650242a68e67ba1710a829",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "95c66de3_c1e61918",
        "filename": "src/internal/singleflight/singleflight.go",
        "patchSetId": 2
      },
      "lineNbr": 101,
      "author": {
        "id": 6365
      },
      "writtenOn": "2022-09-23T14:29:33Z",
      "side": 1,
      "message": "(optional) Would it make sense to check `g.m[key] \u003d\u003d c` instead of adding a separate boolean?\n\nThat would have the advantage of being impossible to, erm, forget if there are future changes to `ForgetUnshared`, but I guess it would also be somewhat more expensive (because it would perform a lookup in the map even for keys that are already deleted).",
      "revId": "37887830e897a33da8650242a68e67ba1710a829",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9abcbd82_6ef23191",
        "filename": "src/internal/singleflight/singleflight.go",
        "patchSetId": 2
      },
      "lineNbr": 101,
      "author": {
        "id": 14665
      },
      "writtenOn": "2022-09-23T15:31:20Z",
      "side": 1,
      "message": "Seems ok to do that, we only do this once for multiple calls.",
      "parentUuid": "95c66de3_c1e61918",
      "revId": "37887830e897a33da8650242a68e67ba1710a829",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "25e47a83_ba1e143c",
        "filename": "src/internal/singleflight/singleflight.go",
        "patchSetId": 2
      },
      "lineNbr": 101,
      "author": {
        "id": 14665
      },
      "writtenOn": "2022-09-23T15:42:41Z",
      "side": 1,
      "message": "Yay, and it also make this CL https://go-review.googlesource.com/c/sync/+/424114 immune to bug üòä",
      "parentUuid": "9abcbd82_6ef23191",
      "revId": "37887830e897a33da8650242a68e67ba1710a829",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "50c6db17_4603fbf2",
        "filename": "src/internal/singleflight/singleflight_test.go",
        "patchSetId": 2
      },
      "lineNbr": 132,
      "author": {
        "id": 6365
      },
      "writtenOn": "2022-09-23T14:29:33Z",
      "side": 1,
      "message": "The `secondRunning` channel should be unnecessary because `secondCh` is unbuffered.\n\nPer the memory model, ‚Äú[a] receive from an unbuffered channel is synchronized before the completion of the corresponding send on that channel.‚Äù",
      "range": {
        "startLine": 131,
        "startChar": 0,
        "endLine": 132,
        "endChar": 28
      },
      "revId": "37887830e897a33da8650242a68e67ba1710a829",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "61dda4c3_76c8b09a",
        "filename": "src/internal/singleflight/singleflight_test.go",
        "patchSetId": 2
      },
      "lineNbr": 132,
      "author": {
        "id": 14665
      },
      "writtenOn": "2022-09-23T15:31:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "50c6db17_4603fbf2",
      "range": {
        "startLine": 131,
        "startChar": 0,
        "endLine": 132,
        "endChar": 28
      },
      "revId": "37887830e897a33da8650242a68e67ba1710a829",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6efbd721_b01051f4",
        "filename": "src/internal/singleflight/singleflight_test.go",
        "patchSetId": 2
      },
      "lineNbr": 135,
      "author": {
        "id": 6365
      },
      "writtenOn": "2022-09-23T14:29:33Z",
      "side": 1,
      "message": "I\u0027m not sure the `secondStarted` variable adds much: since we received from `secondCh` we already know that the callback was started at least once.\n\nI guess this assertion would fail if `g.Do` somehow executes the second callback more than once, but do we have a reason to suspect that would happen? (If so, a comment on that reason would be helpful.)",
      "range": {
        "startLine": 133,
        "startChar": 0,
        "endLine": 135,
        "endChar": 2
      },
      "revId": "37887830e897a33da8650242a68e67ba1710a829",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "335634fe_ade7cbc0",
        "filename": "src/internal/singleflight/singleflight_test.go",
        "patchSetId": 2
      },
      "lineNbr": 135,
      "author": {
        "id": 14665
      },
      "writtenOn": "2022-09-23T15:31:20Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "6efbd721_b01051f4",
      "range": {
        "startLine": 133,
        "startChar": 0,
        "endLine": 135,
        "endChar": 2
      },
      "revId": "37887830e897a33da8650242a68e67ba1710a829",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "53ec8f0d_e19142e5",
        "filename": "src/internal/singleflight/singleflight_test.go",
        "patchSetId": 2
      },
      "lineNbr": 139,
      "author": {
        "id": 6365
      },
      "writtenOn": "2022-09-23T14:29:33Z",
      "side": 1,
      "message": "I\u0027m not sure what this line is testing. üòÖ\n\n(Do we have reason to suspect the second execution would somehow stop?)",
      "range": {
        "startLine": 137,
        "startChar": 0,
        "endLine": 139,
        "endChar": 2
      },
      "revId": "37887830e897a33da8650242a68e67ba1710a829",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9a25b857_a6db0305",
        "filename": "src/internal/singleflight/singleflight_test.go",
        "patchSetId": 2
      },
      "lineNbr": 139,
      "author": {
        "id": 14665
      },
      "writtenOn": "2022-09-23T15:31:20Z",
      "side": 1,
      "message": "We want to make sure second is still running, for example, someone may change the body of second and accident removing `\u003c-secondCh`, so second may finish when we\u0027re here.",
      "parentUuid": "53ec8f0d_e19142e5",
      "range": {
        "startLine": 137,
        "startChar": 0,
        "endLine": 139,
        "endChar": 2
      },
      "revId": "37887830e897a33da8650242a68e67ba1710a829",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "12d6d3fc_5934a45e",
        "filename": "src/internal/singleflight/singleflight_test.go",
        "patchSetId": 2
      },
      "lineNbr": 139,
      "author": {
        "id": 6365
      },
      "writtenOn": "2022-09-23T15:51:37Z",
      "side": 1,
      "message": "\u003e We want to make sure second is still running, for example, someone may change the body of second and accident removing `\u003c-secondCh`, so second may finish when we\u0027re here.\n\nIt seems like we could catch that with less code by changing the `close(secondCh)` to a blocking send, though ‚Äî then the test would deadlock if the body somehow didn\u0027t reach the receive.",
      "parentUuid": "9a25b857_a6db0305",
      "range": {
        "startLine": 137,
        "startChar": 0,
        "endLine": 139,
        "endChar": 2
      },
      "revId": "37887830e897a33da8650242a68e67ba1710a829",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "54992e04_28d7382f",
        "filename": "src/internal/singleflight/singleflight_test.go",
        "patchSetId": 2
      },
      "lineNbr": 139,
      "author": {
        "id": 14665
      },
      "writtenOn": "2022-09-26T02:55:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "12d6d3fc_5934a45e",
      "range": {
        "startLine": 137,
        "startChar": 0,
        "endLine": 139,
        "endChar": 2
      },
      "revId": "37887830e897a33da8650242a68e67ba1710a829",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ef164c0b_212044ef",
        "filename": "src/internal/singleflight/singleflight_test.go",
        "patchSetId": 2
      },
      "lineNbr": 142,
      "author": {
        "id": 6365
      },
      "writtenOn": "2022-09-23T14:29:33Z",
      "side": 1,
      "message": "It looks like this callback never runs at all? If so, it seems like it would be simpler to make the callback panic than to write and read a counter.\n\n(That would also detect any ‚Äî admittedly unlikely ‚Äî bug that causes the third callback to be unexpectedly executed after the receive from `resultCh`.)",
      "revId": "37887830e897a33da8650242a68e67ba1710a829",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7757e7d8_9cd11fbf",
        "filename": "src/internal/singleflight/singleflight_test.go",
        "patchSetId": 2
      },
      "lineNbr": 142,
      "author": {
        "id": 14665
      },
      "writtenOn": "2022-09-23T15:31:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ef164c0b_212044ef",
      "revId": "37887830e897a33da8650242a68e67ba1710a829",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}