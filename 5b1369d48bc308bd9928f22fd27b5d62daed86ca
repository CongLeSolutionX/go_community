{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "403a0aa0_fdd168b2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-11-09T17:51:59Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003d5b1369d4\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "5b1369d48bc308bd9928f22fd27b5d62daed86ca",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d2bd23f8_938acb24",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-11-09T18:05:36Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "403a0aa0_fdd168b2",
      "tag": "autogenerated:trybots~happy",
      "revId": "5b1369d48bc308bd9928f22fd27b5d62daed86ca",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b4433d83_2e3e51b0",
        "filename": "src/cmd/go/internal/base/path.go",
        "patchSetId": 1
      },
      "lineNbr": 59,
      "author": {
        "id": 6365
      },
      "writtenOn": "2022-11-09T21:38:55Z",
      "side": 1,
      "message": "Please add a doc comment for this function.",
      "revId": "5b1369d48bc308bd9928f22fd27b5d62daed86ca",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "105c0e72_759ee34c",
        "filename": "src/cmd/go/internal/base/path.go",
        "patchSetId": 1
      },
      "lineNbr": 64,
      "author": {
        "id": 6365
      },
      "writtenOn": "2022-11-09T21:38:55Z",
      "side": 1,
      "message": "(nit) `strings.EqualFold(path, \"NUL\")` to avoid an unnecessary allocation?",
      "revId": "5b1369d48bc308bd9928f22fd27b5d62daed86ca",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0e412bd8_9d7b0ac5",
        "filename": "src/cmd/go/internal/base/path.go",
        "patchSetId": 1
      },
      "lineNbr": 66,
      "author": {
        "id": 6365
      },
      "writtenOn": "2022-11-09T21:38:55Z",
      "side": 1,
      "message": "Would it make sense to also check for other names for `NUL`?\n\nFor example, we could do something like:\n\n```\nbase :\u003d filepath.Base(path)\nbase \u003d strings.TrimSuffix(base, filepath.Ext(base))\nif strings.EqualFold(base, \"NUL\") {\n\tif base \u003d\u003d path {\n\t\treturn true  // Definitely NUL or some casing thereof.\n\t}\n\tnulInfo, nulErr :\u003d os.Stat(os.DevNull)\n\tpathInfo, pathErr :\u003d os.Stat(path)\n\tif nulErr \u003d\u003d nil \u0026\u0026 pathErr \u003d\u003d nil \u0026\u0026 os.SameFile(nulInfo, pathInfo) {\n\t\t// Something like C:\\foo\\bar\\NUL.txt or \\\\.\\NUL,\n\t\t// and the filesystem says it\u0027s the same as NUL.\n\t\treturn true\n\t}\n}\n```\n\nThat might avoid surprising edge-cases in the behavior of `IsNull` for paths like `\\\\.\\NUL`.",
      "revId": "5b1369d48bc308bd9928f22fd27b5d62daed86ca",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}