{
  "comments": [
    {
      "key": {
        "uuid": "adffbf6a_38be7109",
        "filename": "src/crypto/x509/root_cgo_darwin.go",
        "patchSetId": 5
      },
      "lineNbr": 81,
      "author": {
        "id": 16276
      },
      "writtenOn": "2016-12-01T02:37:13Z",
      "side": 1,
      "message": "FWIW, TrustSettings\u0027 mechanism dates back to OS X 10.2",
      "revId": "2180df2e78704bae3b80799e59fbbddde5e14098",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "adffbf6a_18ac4dd4",
        "filename": "src/crypto/x509/root_cgo_darwin.go",
        "patchSetId": 5
      },
      "lineNbr": 109,
      "author": {
        "id": 16276
      },
      "writtenOn": "2016-12-01T02:37:13Z",
      "side": 1,
      "message": "Just checking: Go only runs in 64-bit mode on macOS? Otherwise, you have a potential LP64 issue where CFArrayGetCount returns a CFIndex (long).",
      "revId": "2180df2e78704bae3b80799e59fbbddde5e14098",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "adffbf6a_dbd8ff82",
        "filename": "src/crypto/x509/root_cgo_darwin.go",
        "patchSetId": 5
      },
      "lineNbr": 109,
      "author": {
        "id": 5065
      },
      "writtenOn": "2016-12-01T02:39:36Z",
      "side": 1,
      "message": "No, also 32-bit. We only ship 64-bit binaries these days, but we still support 386.\n\nAnd crap, that reminds me I still need to re-enabled the 32-bit mac builders (https://github.com/golang/go/issues/17009) after we changed our Mac builder infrastructure recently.",
      "parentUuid": "adffbf6a_18ac4dd4",
      "revId": "2180df2e78704bae3b80799e59fbbddde5e14098",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "702a0062_8dc88545",
        "filename": "src/crypto/x509/root_cgo_darwin.go",
        "patchSetId": 5
      },
      "lineNbr": 109,
      "author": {
        "id": 13020
      },
      "writtenOn": "2016-12-01T14:14:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "adffbf6a_dbd8ff82",
      "revId": "2180df2e78704bae3b80799e59fbbddde5e14098",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "adffbf6a_3bbe6b09",
        "filename": "src/crypto/x509/root_cgo_darwin.go",
        "patchSetId": 5
      },
      "lineNbr": 145,
      "author": {
        "id": 16276
      },
      "writtenOn": "2016-12-01T02:37:13Z",
      "side": 1,
      "message": "Security.framework is subtle in how it does this.\n\nThe logic is (pseudo-code) expressed more as:\n\nfor (user, system, admin as trust domains) {\n  // copy trust settings for cert hash\n  for (trust policies in trust settings dict) {\n    if (policy matches cert validation params) {\n      // copy result *if present*\n      if (result !\u003d kSecTrustSettingsResultUnspecified)\n         return result\n      // Otherwise, copy the allowed error(s)\n    }\n  }\n}\n\nHere\u0027s why I highlight this: An untrusted certificate that had squelched errors (e.g. allowed errors) may not have a result, or may have it set as kSecTrustSettingsResultUnspecified, and you would end up trusting it.\n\nA more conservative approach would be:\nfor (each cert from SecTrustSettingsCopyCertificates-sorted-and-deduped) {\n  include \u003d false;\n  for (user, system, admin as trust domains) {\n    SecTrustSettingsCopyTrustDomain(cert, domain, settings);\n    for (each policy in trust settings) {\n      if (basicPolicyMatch) {\n        if (result \u003d\u003d trust || result \u003d\u003d trustasroot) {\n          include \u003d true;\n        }\n        break;\n      }\n    }\n  }\n  if (include) AppendToPEM(cert)\n}\n\n\nThe reason I highlight this is that you would end up treating as root certs certs which are restricted to a particular application or a particular policy. A conservative (naive) implementation of basicPolicyMatch would be:\n\n- no kSecTrustSettingsPolicyKey (meaning: applies to all policies)\n- no kSecTrustSettingsApplication (meaning: applies to all applications)\n- no kSecTrustSEttingsPolicyString (meaning: interpreted per policy, but generally means \u0027no per-host policies\u0027)\n- [ignore allowedErr, that\u0027s an additive thing]\n- has a kSecTrustSettingsResult\n\n\nIf you want to restrict to root certs, kSecTrustSettingResultTrustRoot will enforce they\u0027re self-signed (if returned from CopyTrustSettings, meaning params were validated). Otherwise, kSecTrustSettingResultTrustAsRoot will also allow manually-specified trust anchors.",
      "revId": "2180df2e78704bae3b80799e59fbbddde5e14098",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "702a0062_6dc35129",
        "filename": "src/crypto/x509/root_cgo_darwin.go",
        "patchSetId": 5
      },
      "lineNbr": 145,
      "author": {
        "id": 13020
      },
      "writtenOn": "2016-12-01T14:14:17Z",
      "side": 1,
      "message": "So... all of the system roots appear to have an empty list as a policy (which is interpreted as kSecTrustSettingResultTrustRoot). Keychain Access doesn\u0027t let you create a more complicated policy than just always trust/never trust globally or per-use.\n\nSo how does a more complicated policy come into existence? Do you have a sample?\n\nShould it be \"empty list or non-empty list with a dictionary matching your conditions\"?",
      "parentUuid": "adffbf6a_3bbe6b09",
      "revId": "2180df2e78704bae3b80799e59fbbddde5e14098",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "adffbf6a_a18b483c",
        "filename": "src/crypto/x509/root_cgo_darwin.go",
        "patchSetId": 5
      },
      "lineNbr": 145,
      "author": {
        "id": 5065
      },
      "writtenOn": "2016-12-01T15:55:15Z",
      "side": 1,
      "message": "If you see something you don\u0027t understand (a non-empty list), I\u0027d just not add that cert. That seems safer than using it.",
      "parentUuid": "702a0062_6dc35129",
      "revId": "2180df2e78704bae3b80799e59fbbddde5e14098",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "702a0062_ed32e14d",
        "filename": "src/crypto/x509/root_cgo_darwin.go",
        "patchSetId": 5
      },
      "lineNbr": 145,
      "author": {
        "id": 13020
      },
      "writtenOn": "2016-12-01T16:03:41Z",
      "side": 1,
      "message": "No, because you can get a non-empty list by choosing \"Always Trust\" in the UI as well.",
      "parentUuid": "adffbf6a_a18b483c",
      "revId": "2180df2e78704bae3b80799e59fbbddde5e14098",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "adffbf6a_f886a9a4",
        "filename": "src/crypto/x509/root_darwin.go",
        "patchSetId": 5
      },
      "lineNbr": 24,
      "author": {
        "id": 5065
      },
      "writtenOn": "2016-12-01T01:13:30Z",
      "side": 1,
      "message": "s/returns true if/reports whether/ (per Go style)",
      "revId": "2180df2e78704bae3b80799e59fbbddde5e14098",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "702a0062_4a9d93f6",
        "filename": "src/crypto/x509/root_darwin.go",
        "patchSetId": 5
      },
      "lineNbr": 24,
      "author": {
        "id": 13020
      },
      "writtenOn": "2016-12-01T01:23:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "adffbf6a_f886a9a4",
      "revId": "2180df2e78704bae3b80799e59fbbddde5e14098",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "adffbf6a_18756dec",
        "filename": "src/crypto/x509/root_darwin.go",
        "patchSetId": 5
      },
      "lineNbr": 54,
      "author": {
        "id": 5065
      },
      "writtenOn": "2016-12-01T01:13:30Z",
      "side": 1,
      "message": "conventionally this is named \"mu\", and you put them before the things they guard.\n\nLike:\n\nvar (\n    mu sync.Mutex\n    roots \u003d NewCertPool()\n)\n\n... would be clear that mu guards roots without a comment.",
      "revId": "2180df2e78704bae3b80799e59fbbddde5e14098",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "702a0062_6a9257e8",
        "filename": "src/crypto/x509/root_darwin.go",
        "patchSetId": 5
      },
      "lineNbr": 54,
      "author": {
        "id": 13020
      },
      "writtenOn": "2016-12-01T01:23:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "adffbf6a_18756dec",
      "revId": "2180df2e78704bae3b80799e59fbbddde5e14098",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "702a0062_0a6d5b1b",
        "filename": "src/crypto/x509/root_darwin.go",
        "patchSetId": 5
      },
      "lineNbr": 67,
      "author": {
        "id": 5065
      },
      "writtenOn": "2016-12-01T01:13:30Z",
      "side": 1,
      "message": "don\u0027t do this just for the defer scope.\n\nI\u0027d make a new named func. This is getting too long and indented as-is.",
      "revId": "2180df2e78704bae3b80799e59fbbddde5e14098",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "702a0062_aa8c4fc7",
        "filename": "src/crypto/x509/root_darwin.go",
        "patchSetId": 5
      },
      "lineNbr": 67,
      "author": {
        "id": 13020
      },
      "writtenOn": "2016-12-01T01:23:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "702a0062_0a6d5b1b",
      "revId": "2180df2e78704bae3b80799e59fbbddde5e14098",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "adffbf6a_587ff5c9",
        "filename": "src/crypto/x509/root_darwin.go",
        "patchSetId": 5
      },
      "lineNbr": 71,
      "author": {
        "id": 5065
      },
      "writtenOn": "2016-12-01T01:13:30Z",
      "side": 1,
      "message": "just err instead of terr.",
      "revId": "2180df2e78704bae3b80799e59fbbddde5e14098",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "702a0062_ca8983b7",
        "filename": "src/crypto/x509/root_darwin.go",
        "patchSetId": 5
      },
      "lineNbr": 71,
      "author": {
        "id": 13020
      },
      "writtenOn": "2016-12-01T01:23:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "adffbf6a_587ff5c9",
      "revId": "2180df2e78704bae3b80799e59fbbddde5e14098",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "adffbf6a_b8638132",
        "filename": "src/crypto/x509/root_darwin.go",
        "patchSetId": 5
      },
      "lineNbr": 73,
      "author": {
        "id": 5065
      },
      "writtenOn": "2016-12-01T01:13:30Z",
      "side": 1,
      "message": "probably worth logging so people can see why their TLS stopped working",
      "revId": "2180df2e78704bae3b80799e59fbbddde5e14098",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "702a0062_8a56ab47",
        "filename": "src/crypto/x509/root_darwin.go",
        "patchSetId": 5
      },
      "lineNbr": 73,
      "author": {
        "id": 13020
      },
      "writtenOn": "2016-12-01T01:23:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "adffbf6a_b8638132",
      "revId": "2180df2e78704bae3b80799e59fbbddde5e14098",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "adffbf6a_5855353d",
        "filename": "src/crypto/x509/root_darwin.go",
        "patchSetId": 5
      },
      "lineNbr": 94,
      "author": {
        "id": 5065
      },
      "writtenOn": "2016-12-01T01:13:30Z",
      "side": 1,
      "message": "probably not worth the closure, but... if you\u0027re moving it to a func anyway, you can pass the closure to the new named func. So then it\u0027s useful.",
      "revId": "2180df2e78704bae3b80799e59fbbddde5e14098",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "702a0062_6a517751",
        "filename": "src/crypto/x509/root_darwin.go",
        "patchSetId": 5
      },
      "lineNbr": 94,
      "author": {
        "id": 13020
      },
      "writtenOn": "2016-12-01T01:23:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "adffbf6a_5855353d",
      "revId": "2180df2e78704bae3b80799e59fbbddde5e14098",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}