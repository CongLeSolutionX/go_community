{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "d8885b60_937aa1d9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-08-12T20:23:46Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003d42462770\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "42462770355c9679473f5a15b4e8058463615f10",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d98fd291_827aed24",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-08-12T20:35:20Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "d8885b60_937aa1d9",
      "tag": "autogenerated:trybots~happy",
      "revId": "42462770355c9679473f5a15b4e8058463615f10",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6db7dab6_9f42f3fa",
        "filename": "src/cmd/compile/internal/devirtualize/devirtualize.go",
        "patchSetId": 9
      },
      "lineNbr": 67,
      "author": {
        "id": 5200
      },
      "writtenOn": "2022-08-17T22:06:09Z",
      "side": 1,
      "message": "I don\u0027t think this would be possible in general, if the type word is loaded from a dictionary. But there may be cases where it is possible.",
      "range": {
        "startLine": 65,
        "startChar": 5,
        "endLine": 67,
        "endChar": 26
      },
      "revId": "42462770355c9679473f5a15b4e8058463615f10",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "99e9817f_354b3862",
        "filename": "src/cmd/compile/internal/noder/reader.go",
        "patchSetId": 9
      },
      "lineNbr": 154,
      "author": {
        "id": 5200
      },
      "writtenOn": "2022-08-17T22:06:09Z",
      "side": 1,
      "message": "I\u0027m not sure I understand what a \"shaped dictionary\" is.\nDictionaries shouldn\u0027t have any shape types in them.\n\nMy guess is that shaped\u003d\u003dtrue means we\u0027re compiling a function/method that has type parameters, and we\u0027re compiling it in a mode that takes a dictionary and uses shaped types for the type parameters. shaped\u003d\u003dfalse means we\u0027re compiling a function/method that has type parameters in a mode that has no dictionary arg and has concrete types for its type parameters. (The latter cases are just wrappers that call the former cases.)\n\nDo I understand that right? If so, saying \"whether this is a shaped dictionary\" seems off. Maybe you mean \"whether this instantiation takes and uses a dictionary\"?",
      "range": {
        "startLine": 154,
        "startChar": 34,
        "endLine": 154,
        "endChar": 51
      },
      "revId": "42462770355c9679473f5a15b4e8058463615f10",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2ea34cec_2b663dff",
        "filename": "src/cmd/compile/internal/noder/reader.go",
        "patchSetId": 9
      },
      "lineNbr": 801,
      "author": {
        "id": 5200
      },
      "writtenOn": "2022-08-17T22:06:09Z",
      "side": 1,
      "message": "This doesn\u0027t shape all pointer types to the same shape. That\u0027s a feature we had in 1.18 and 1.19, it would be good not to lose that. Is that the TODO above?",
      "revId": "42462770355c9679473f5a15b4e8058463615f10",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "401153bb_c839fd46",
        "filename": "src/cmd/compile/internal/noder/reader.go",
        "patchSetId": 9
      },
      "lineNbr": 1194,
      "author": {
        "id": 5200
      },
      "writtenOn": "2022-08-17T22:06:09Z",
      "side": 1,
      "message": "This is different from the current implementation, which does dictionary, receiver, args.\nThat\u0027s fine, I guess. Any reason for the change?",
      "revId": "42462770355c9679473f5a15b4e8058463615f10",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "699a3c29_0a2464dc",
        "filename": "src/cmd/compile/internal/noder/reader.go",
        "patchSetId": 9
      },
      "lineNbr": 1367,
      "author": {
        "id": 5200
      },
      "writtenOn": "2022-08-17T22:06:09Z",
      "side": 1,
      "message": "The current implementation always puts the concrete instantiating types first in a dictionary. I think maybe Delve depends on that now? Not sure.",
      "revId": "42462770355c9679473f5a15b4e8058463615f10",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "48fa506e_6ad27ccf",
        "filename": "src/cmd/compile/internal/noder/reader.go",
        "patchSetId": 9
      },
      "lineNbr": 2394,
      "author": {
        "id": 5200
      },
      "writtenOn": "2022-08-17T22:06:09Z",
      "side": 1,
      "message": "dictPtr?",
      "range": {
        "startLine": 2394,
        "startChar": 6,
        "endLine": 2394,
        "endChar": 13
      },
      "revId": "42462770355c9679473f5a15b4e8058463615f10",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "43ce473c_e186fc8e",
        "filename": "test/typeparam/nested.go",
        "patchSetId": 9
      },
      "lineNbr": 107,
      "author": {
        "id": 5200
      },
      "writtenOn": "2022-08-17T22:06:09Z",
      "side": 1,
      "message": "File an issue so we don\u0027t forget?",
      "revId": "42462770355c9679473f5a15b4e8058463615f10",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}