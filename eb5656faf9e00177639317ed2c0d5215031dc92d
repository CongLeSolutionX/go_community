{
  "comments": [
    {
      "key": {
        "uuid": "0a626236_6fe05c88",
        "filename": "src/cmd/go/internal/work/exec.go",
        "patchSetId": 1
      },
      "lineNbr": 2142,
      "author": {
        "id": 6365
      },
      "writtenOn": "2019-12-19T22:20:46Z",
      "side": 1,
      "message": "Add the corresponding comment in Action.trimpath?",
      "revId": "eb5656faf9e00177639317ed2c0d5215031dc92d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "02880aa2_07463c77",
        "filename": "src/cmd/go/internal/work/exec.go",
        "patchSetId": 1
      },
      "lineNbr": 2142,
      "author": {
        "id": 17092
      },
      "writtenOn": "2019-12-20T20:13:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0a626236_6fe05c88",
      "revId": "eb5656faf9e00177639317ed2c0d5215031dc92d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6130e6cd_e624ef66",
        "filename": "src/cmd/go/internal/work/exec.go",
        "patchSetId": 1
      },
      "lineNbr": 2163,
      "author": {
        "id": 6365
      },
      "writtenOn": "2019-12-19T22:20:46Z",
      "side": 1,
      "message": "This `else` should be paired to only `cfg.BuildTrimpath`. (We can\u0027t do this substitution if the compiler does not support the -fdebug-prefix-map flag.)",
      "revId": "eb5656faf9e00177639317ed2c0d5215031dc92d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9fa1baa2_c1962c7a",
        "filename": "src/cmd/go/internal/work/exec.go",
        "patchSetId": 1
      },
      "lineNbr": 2163,
      "author": {
        "id": 17092
      },
      "writtenOn": "2019-12-20T20:13:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6130e6cd_e624ef66",
      "revId": "eb5656faf9e00177639317ed2c0d5215031dc92d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f40d8e0a_1ddfb765",
        "filename": "src/cmd/go/testdata/script/build_trimpath_cgo.txt",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 6365
      },
      "writtenOn": "2019-12-19T22:20:46Z",
      "side": 1,
      "message": "Since this is a long test, we should verify that it actually runs and passes â€” particularly with Clang on Windows, if that\u0027s feasible.\n\n(One way to verify that it runs would be to temporarily put a bogus command at the end and verify that it fails due to that specific bogus command.)",
      "revId": "eb5656faf9e00177639317ed2c0d5215031dc92d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9470182b_73c2f571",
        "filename": "src/cmd/go/testdata/script/build_trimpath_cgo.txt",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 17092
      },
      "writtenOn": "2019-12-20T20:13:11Z",
      "side": 1,
      "message": "Haven\u0027t used clang on Windows before. I tried setting it up on my test machine, but it seems to have some dependency on MSVC for headers and linking. I may be missing something.\n\nDo we have any builders that run Clang on Windows? If not, it may not be meaningful to test it once.\n\nWhat kind of bogus command do you mean? \u0027exec clang -v\u0027? Not sure I follow though.",
      "parentUuid": "f40d8e0a_1ddfb765",
      "revId": "eb5656faf9e00177639317ed2c0d5215031dc92d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8f88e622_44452791",
        "filename": "src/cmd/go/testdata/script/build_trimpath_cgo.txt",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 6365
      },
      "writtenOn": "2019-12-20T22:09:37Z",
      "side": 1,
      "message": "\u003e Haven\u0027t used clang on Windows before. I tried setting it up on my test machine, but it seems to have some dependency on MSVC for headers and linking. I may be missing something.\n\u003e \n\u003e Do we have any builders that run Clang on Windows? If not, it may not be meaningful to test it once.\n\nNo idea.\n\n\u003e What kind of bogus command do you mean? \u0027exec clang -v\u0027? Not sure I follow though.\n\nI usually use `stderr walrus`. ðŸ˜…",
      "parentUuid": "9470182b_73c2f571",
      "revId": "eb5656faf9e00177639317ed2c0d5215031dc92d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5c4aa43f_185fb1ca",
        "filename": "src/cmd/go/testdata/script/build_trimpath_cgo.txt",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 17092
      },
      "writtenOn": "2020-04-29T19:03:00Z",
      "side": 1,
      "message": "To finally answer this question, I checked in CL 230877: none of the Windows builders use clang. Opened golang.org/issue/38755 to add a builder in this configuration.",
      "parentUuid": "8f88e622_44452791",
      "revId": "eb5656faf9e00177639317ed2c0d5215031dc92d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0979a906_2f273f78",
        "filename": "src/cmd/go/testdata/script/build_trimpath_cgo.txt",
        "patchSetId": 1
      },
      "lineNbr": 123,
      "author": {
        "id": 6365
      },
      "writtenOn": "2019-12-19T22:20:46Z",
      "side": 1,
      "message": "Does this work for plan9 and aix?\n(I don\u0027t think we have any long-mode aix or plan9 builders.)\n\nGiven that this is a long-mode test, maybe it would be a good idea to skip platforms other than the ones we\u0027ve explicitly tested.\n\n(Or, would it work to just grep for the path in the executable file rather than using something principled like a DWARF reader?)",
      "revId": "eb5656faf9e00177639317ed2c0d5215031dc92d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8406f4c8_d5c8a459",
        "filename": "src/cmd/go/testdata/script/build_trimpath_cgo.txt",
        "patchSetId": 1
      },
      "lineNbr": 123,
      "author": {
        "id": 17092
      },
      "writtenOn": "2019-12-20T20:13:11Z",
      "side": 1,
      "message": "Renamed to read_elf.go and explicitly listed platforms where ELF is the executable format.\n\nThis won\u0027t work on aix. I don\u0027t think there\u0027s a std package to read XCOFF binaries. I\u0027m now skipping this part of the test.\n\nplan9 doesn\u0027t support cgo so this test won\u0027t run there at all.",
      "parentUuid": "0979a906_2f273f78",
      "revId": "eb5656faf9e00177639317ed2c0d5215031dc92d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}