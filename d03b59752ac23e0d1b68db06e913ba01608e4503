{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "dd129d74_39b7cb4c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-06-02T15:35:22Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003dd03b5975\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "d03b59752ac23e0d1b68db06e913ba01608e4503",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "29a4248c_6d5e6d7e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-06-02T15:49:10Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "dd129d74_39b7cb4c",
      "tag": "autogenerated:trybots~happy",
      "revId": "d03b59752ac23e0d1b68db06e913ba01608e4503",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e8a2623_c872d4f9",
        "filename": "src/io/io.go",
        "patchSetId": 2
      },
      "lineNbr": 485,
      "author": {
        "id": 6365
      },
      "writtenOn": "2022-06-02T16:47:13Z",
      "side": 1,
      "message": "(nit) if `l.N` \u003c 0 (currently allowed by the documentation), then arguably we should skip the extra `Read` and just return `l.Err`.\n\nPerhaps:\n\n```\nif l.limitErr \u003d\u003d nil {\n\tl.limitErr \u003d l.Err\n\tif l.N \u003d\u003d 0 {\n\t\t// Read one extra byte â€¦\n\t}\n}\n```",
      "revId": "d03b59752ac23e0d1b68db06e913ba01608e4503",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "99ba9a66_2a6a7e8a",
        "filename": "src/io/io.go",
        "patchSetId": 2
      },
      "lineNbr": 488,
      "author": {
        "id": 6365
      },
      "writtenOn": "2022-06-02T16:47:13Z",
      "side": 1,
      "message": "(nit) In theory, this call makes an unnecessary slice allocation that could be avoided.\n(The `io.Reader` interface allows `Read` to use the entirely of `p` as scratch space, so in theory we could avoid the allocation by invoking `l.R.Read(p[:1])` instead.)\n\nThe approach currently taken here is correct, and also avoids the need to handle `len(p) \u003d\u003d 0` explicitly, but at the cost of that extra allocation.\n\nThat seems like a reasonable tradeoff to make, but a comment here would help to clarify that it is intentional.",
      "revId": "d03b59752ac23e0d1b68db06e913ba01608e4503",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0058cbef_484c90ad",
        "filename": "src/io/io.go",
        "patchSetId": 2
      },
      "lineNbr": 514,
      "author": {
        "id": 6365
      },
      "writtenOn": "2022-06-02T16:47:13Z",
      "side": 1,
      "message": "If `err` is non-nil, this will cause `Read` to return it repeatedly (instead of either `l.Err` or `EOF`), whereas in Go 1.18 the error would be returned only once (followed by `EOF`).\n\nOne way to fix that might be to only record the error to `l.limitErr` if `isSentinel` is true, but that adds more complexity still. ðŸ¤”",
      "revId": "d03b59752ac23e0d1b68db06e913ba01608e4503",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f6c3a19b_a19ab337",
        "filename": "src/io/io.go",
        "patchSetId": 2
      },
      "lineNbr": 516,
      "author": {
        "id": 6365
      },
      "writtenOn": "2022-06-02T16:47:13Z",
      "side": 1,
      "message": "Hmm, why `nil` instead of `io.EOF`? (`io.Reader` allows us to return either, and `io.EOF` is arguably more efficient since we\u0027ve already detected it.)",
      "revId": "d03b59752ac23e0d1b68db06e913ba01608e4503",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}