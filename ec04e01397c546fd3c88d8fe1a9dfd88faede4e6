{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "72d90dc4_fc48cf20",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-06-09T17:24:15Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003dec04e013\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "ec04e01397c546fd3c88d8fe1a9dfd88faede4e6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fdcad1a9_b4daf3da",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-06-09T17:24:15Z",
      "side": 1,
      "message": "Superseded.",
      "parentUuid": "7ad402db_0eaa99a0",
      "tag": "autogenerated:trybots~beginning",
      "revId": "ec04e01397c546fd3c88d8fe1a9dfd88faede4e6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0b7d8130_d0f21d4e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 14665
      },
      "writtenOn": "2023-06-09T17:27:18Z",
      "side": 1,
      "message": "@mdempsky@google.com With this CL and this diff cherry-picked to go1.20, the test case pass:\n\n```\ndiff --git a/src/cmd/compile/internal/typecheck/const.go b/src/cmd/compile/internal/typecheck/const.go\nindex 6855f05b7b..fd80d701e0 100644\n--- a/src/cmd/compile/internal/typecheck/const.go\n+++ b/src/cmd/compile/internal/typecheck/const.go\n@@ -367,29 +367,7 @@ func EvalConst(n ir.Node) ir.Node {\n                }\n \n        case ir.OADD, ir.OSUB, ir.OMUL, ir.ODIV, ir.OMOD, ir.OOR, ir.OXOR, ir.OAND, ir.OANDNOT:\n-               n :\u003d n.(*ir.BinaryExpr)\n-               nl, nr :\u003d n.X, n.Y\n-               if nl.Op() \u003d\u003d ir.OLITERAL \u0026\u0026 nr.Op() \u003d\u003d ir.OLITERAL {\n-                       rval :\u003d nr.Val()\n-\n-                       // check for divisor underflow in complex division (see issue 20227)\n-                       if n.Op() \u003d\u003d ir.ODIV \u0026\u0026 n.Type().IsComplex() \u0026\u0026 constant.Sign(square(constant.Real(rval))) \u003d\u003d 0 \u0026\u0026 constant.Sign(square(constant.Imag(rval))) \u003d\u003d 0 {\n-                               base.Errorf(\"complex division by zero\")\n-                               n.SetType(nil)\n-                               return n\n-                       }\n-                       if (n.Op() \u003d\u003d ir.ODIV || n.Op() \u003d\u003d ir.OMOD) \u0026\u0026 constant.Sign(rval) \u003d\u003d 0 {\n-                               base.Errorf(\"division by zero\")\n-                               n.SetType(nil)\n-                               return n\n-                       }\n-\n-                       tok :\u003d tokenForOp[n.Op()]\n-                       if n.Op() \u003d\u003d ir.ODIV \u0026\u0026 n.Type().IsInteger() {\n-                               tok \u003d token.QUO_ASSIGN // integer division\n-                       }\n-                       return OrigConst(n, constant.BinaryOp(nl.Val(), tok, rval))\n-               }\n+               return n\n \n        case ir.OOROR, ir.OANDAND:\n                n :\u003d n.(*ir.LogicalExpr)\n@@ -406,19 +384,7 @@ func EvalConst(n ir.Node) ir.Node {\n                }\n \n        case ir.OLSH, ir.ORSH:\n-               n :\u003d n.(*ir.BinaryExpr)\n-               nl, nr :\u003d n.X, n.Y\n-               if nl.Op() \u003d\u003d ir.OLITERAL \u0026\u0026 nr.Op() \u003d\u003d ir.OLITERAL {\n-                       // shiftBound from go/types; \"so we can express smallestFloat64\" (see issue #44057)\n-                       const shiftBound \u003d 1023 - 1 + 52\n-                       s, ok :\u003d constant.Uint64Val(nr.Val())\n-                       if !ok || s \u003e shiftBound {\n-                               base.Errorf(\"invalid shift count %v\", nr)\n-                               n.SetType(nil)\n-                               break\n-                       }\n-                       return OrigConst(n, constant.Shift(toint(nl.Val()), tokenForOp[n.Op()], uint(s)))\n-               }\n+               return n\n \n        case ir.OCONV, ir.ORUNESTR:\n                n :\u003d n.(*ir.ConvExpr)\n```",
      "revId": "ec04e01397c546fd3c88d8fe1a9dfd88faede4e6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d5bd6fec_5512d571",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-06-09T17:34:49Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "72d90dc4_fc48cf20",
      "tag": "autogenerated:trybots~happy",
      "revId": "ec04e01397c546fd3c88d8fe1a9dfd88faede4e6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}