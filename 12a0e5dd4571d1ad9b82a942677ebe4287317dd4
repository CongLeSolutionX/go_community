{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "f8fd89c7_773d3c7a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 15
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-09-28T20:54:47Z",
      "side": 1,
      "message": "SlowBots beginning. Status page: https://farmer.golang.org/try?commit\u003d12a0e5dd\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "12a0e5dd4571d1ad9b82a942677ebe4287317dd4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1e2c0fbd_907157e7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 15
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-09-28T21:08:51Z",
      "side": 1,
      "message": "SlowBots are happy.\n\nSlowBot builds that ran:\n* linux-amd64-longtest\n* windows-amd64-longtest\n",
      "parentUuid": "f8fd89c7_773d3c7a",
      "tag": "autogenerated:trybots~happy",
      "revId": "12a0e5dd4571d1ad9b82a942677ebe4287317dd4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "379d511b_3ef3394f",
        "filename": "src/os/exec/exec.go",
        "patchSetId": 15
      },
      "lineNbr": 235,
      "author": {
        "id": 5206
      },
      "writtenOn": "2022-09-29T02:51:30Z",
      "side": 1,
      "message": "We should also document what happens if the command exits with a failure code after the Interrupt signal has been sent.",
      "revId": "12a0e5dd4571d1ad9b82a942677ebe4287317dd4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "28bfc9e0_336a3924",
        "filename": "src/os/exec/exec.go",
        "patchSetId": 15
      },
      "lineNbr": 241,
      "author": {
        "id": 5206
      },
      "writtenOn": "2022-09-29T02:51:30Z",
      "side": 1,
      "message": "This doc needs to describe the default value set up by CommandContext.",
      "revId": "12a0e5dd4571d1ad9b82a942677ebe4287317dd4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6a64590a_19ba28c3",
        "filename": "src/os/exec/exec.go",
        "patchSetId": 15
      },
      "lineNbr": 251,
      "author": {
        "id": 5206
      },
      "writtenOn": "2022-09-29T02:51:30Z",
      "side": 1,
      "message": "I find this a little unclear.  I feel like somewhere we need to explain that the normal case is the program exits and the pipes are closed and WaitDelay is ignored.  WaitDelay comes into play mainly if the program exits but the pipes are not closed.  And that is the case you are describing here, but the docs are hard to follow without that context.",
      "revId": "12a0e5dd4571d1ad9b82a942677ebe4287317dd4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "20aa0b98_ed93a1c4",
        "filename": "src/os/exec/exec.go",
        "patchSetId": 15
      },
      "lineNbr": 322,
      "author": {
        "id": 5206
      },
      "writtenOn": "2022-09-29T02:51:30Z",
      "side": 1,
      "message": "What about the case where WaitDelay is zero?",
      "revId": "12a0e5dd4571d1ad9b82a942677ebe4287317dd4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c229a28e_86c092a2",
        "filename": "src/os/exec/exec.go",
        "patchSetId": 15
      },
      "lineNbr": 673,
      "author": {
        "id": 5206
      },
      "writtenOn": "2022-09-29T02:51:30Z",
      "side": 1,
      "message": "I don\u0027t understand the new part of this condition.  It seems entirely possible for Interrupt to be nil and WaitDelay to be 0 and ctx to not be nil.  In that case we still want to call watchCtx.",
      "revId": "12a0e5dd4571d1ad9b82a942677ebe4287317dd4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}