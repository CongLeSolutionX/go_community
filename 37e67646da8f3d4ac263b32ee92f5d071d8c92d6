{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "b120aa75_49dc9bd3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 36159
      },
      "writtenOn": "2020-10-02T18:53:36Z",
      "side": 1,
      "message": "Thanks for the comments. I will make the requested changes.",
      "revId": "37e67646da8f3d4ac263b32ee92f5d071d8c92d6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8620eab5_b3a0d52e",
        "filename": "src/cmd/compile/internal/arm64/ssa.go",
        "patchSetId": 6
      },
      "lineNbr": 793,
      "author": {
        "id": 13315
      },
      "writtenOn": "2020-10-02T16:05:46Z",
      "side": 1,
      "message": "MVN\n\nWhy do we need negation?",
      "range": {
        "startLine": 793,
        "startChar": 5,
        "endLine": 793,
        "endChar": 8
      },
      "revId": "37e67646da8f3d4ac263b32ee92f5d071d8c92d6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6eb435fa_1322eedf",
        "filename": "src/cmd/compile/internal/arm64/ssa.go",
        "patchSetId": 6
      },
      "lineNbr": 793,
      "author": {
        "id": 36159
      },
      "writtenOn": "2020-10-02T18:53:36Z",
      "side": 1,
      "message": "The underlying instruction for LDANDALB is LDCLRALB, which is basically r0 \u0026\u003d ~r1. I agree the name assigned to this instruction by the Go assembler is a bit misleading.\n\nFrom the Arm Architecture Reference https://developer.arm.com/documentation/ddi0487/latest/\npage C6-972\n\nC6.2.117\nLDCLRB, LDCLRAB, LDCLRALB, LDCLRLB\nAtomic bit clear on byte in memory atomically loads an 8-bit byte from memory, performs a bitwise AND with the complement of the value held in a register on it, and stores the result back to memory. The value initially loaded from memory is returned in the destination register.",
      "parentUuid": "8620eab5_b3a0d52e",
      "range": {
        "startLine": 793,
        "startChar": 5,
        "endLine": 793,
        "endChar": 8
      },
      "revId": "37e67646da8f3d4ac263b32ee92f5d071d8c92d6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1981e5aa_10927163",
        "filename": "src/cmd/compile/internal/arm64/ssa.go",
        "patchSetId": 6
      },
      "lineNbr": 793,
      "author": {
        "id": 13315
      },
      "writtenOn": "2020-10-02T19:11:06Z",
      "side": 1,
      "message": "If LDANDALB instruction doesn\u0027t actually do an AND, that seems wrong. We should fix that, by either renaming the instruction, or expanding it to MVN+LDCLRALB in the assembler backend.",
      "parentUuid": "6eb435fa_1322eedf",
      "range": {
        "startLine": 793,
        "startChar": 5,
        "endLine": 793,
        "endChar": 8
      },
      "revId": "37e67646da8f3d4ac263b32ee92f5d071d8c92d6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ec182bd6_7af7b24b",
        "filename": "src/cmd/compile/internal/arm64/ssa.go",
        "patchSetId": 6
      },
      "lineNbr": 793,
      "author": {
        "id": 36159
      },
      "writtenOn": "2020-10-02T19:15:13Z",
      "side": 1,
      "message": "Makes sense to me. Should that be a separate change request?",
      "parentUuid": "1981e5aa_10927163",
      "range": {
        "startLine": 793,
        "startChar": 5,
        "endLine": 793,
        "endChar": 8
      },
      "revId": "37e67646da8f3d4ac263b32ee92f5d071d8c92d6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3d1562ad_5058e320",
        "filename": "src/cmd/compile/internal/arm64/ssa.go",
        "patchSetId": 6
      },
      "lineNbr": 793,
      "author": {
        "id": 13315
      },
      "writtenOn": "2020-10-02T19:17:04Z",
      "side": 1,
      "message": "Yeah, it\u0027s better to be a separate CL. Thanks.",
      "parentUuid": "ec182bd6_7af7b24b",
      "range": {
        "startLine": 793,
        "startChar": 5,
        "endLine": 793,
        "endChar": 8
      },
      "revId": "37e67646da8f3d4ac263b32ee92f5d071d8c92d6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ebde23a0_c332f502",
        "filename": "src/cmd/compile/internal/arm64/ssa.go",
        "patchSetId": 6
      },
      "lineNbr": 793,
      "author": {
        "id": 13315
      },
      "writtenOn": "2020-11-02T15:17:52Z",
      "side": 1,
      "message": "Please address this. Let\u0027s fix the instruction before landing this CL. Thanks.",
      "parentUuid": "3d1562ad_5058e320",
      "range": {
        "startLine": 793,
        "startChar": 5,
        "endLine": 793,
        "endChar": 8
      },
      "revId": "37e67646da8f3d4ac263b32ee92f5d071d8c92d6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "30c87cd8_a8049910",
        "filename": "src/cmd/compile/internal/arm64/ssa.go",
        "patchSetId": 6
      },
      "lineNbr": 793,
      "author": {
        "id": 36159
      },
      "writtenOn": "2020-11-02T16:06:30Z",
      "side": 1,
      "message": "This instruction has been included in the assembler since version 1.13. Do you want to change its behavior? Couldn\u0027t that introduce bugs in software already making use of it?\n\nAdded in 448089854a9, https://go-review.googlesource.com/c/go/+/157001",
      "parentUuid": "ebde23a0_c332f502",
      "range": {
        "startLine": 793,
        "startChar": 5,
        "endLine": 793,
        "endChar": 8
      },
      "revId": "37e67646da8f3d4ac263b32ee92f5d071d8c92d6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fb7a10d8_fde63b97",
        "filename": "src/cmd/compile/internal/arm64/ssa.go",
        "patchSetId": 6
      },
      "lineNbr": 793,
      "author": {
        "id": 13315
      },
      "writtenOn": "2020-11-02T16:19:59Z",
      "side": 1,
      "message": "Given that the old behavior is just wrong, I think we should change that. If there is any code that depends on the buggy behavior, we should make it fail loud. I suppose removing LDAND and adding LDCLR would work.",
      "parentUuid": "30c87cd8_a8049910",
      "range": {
        "startLine": 793,
        "startChar": 5,
        "endLine": 793,
        "endChar": 8
      },
      "revId": "37e67646da8f3d4ac263b32ee92f5d071d8c92d6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7cf8becf_d8550ffd",
        "filename": "src/cmd/compile/internal/arm64/ssa.go",
        "patchSetId": 6
      },
      "lineNbr": 793,
      "author": {
        "id": 36159
      },
      "writtenOn": "2020-11-02T16:38:41Z",
      "side": 1,
      "message": "Got it. That sounds easy enough. I\u0027m preparing a patch now.",
      "parentUuid": "fb7a10d8_fde63b97",
      "range": {
        "startLine": 793,
        "startChar": 5,
        "endLine": 793,
        "endChar": 8
      },
      "revId": "37e67646da8f3d4ac263b32ee92f5d071d8c92d6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a8bf497f_35be0ad2",
        "filename": "src/cmd/compile/internal/arm64/ssa.go",
        "patchSetId": 6
      },
      "lineNbr": 793,
      "author": {
        "id": 36159
      },
      "writtenOn": "2020-11-02T17:09:41Z",
      "side": 1,
      "message": "I opened https://go-review.googlesource.com/c/go/+/267138 This change will have to rebased on it.",
      "parentUuid": "7cf8becf_d8550ffd",
      "range": {
        "startLine": 793,
        "startChar": 5,
        "endLine": 793,
        "endChar": 8
      },
      "revId": "37e67646da8f3d4ac263b32ee92f5d071d8c92d6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "70a4aba0_df05c561",
        "filename": "src/cmd/compile/internal/arm64/ssa.go",
        "patchSetId": 6
      },
      "lineNbr": 793,
      "author": {
        "id": 36159
      },
      "writtenOn": "2020-11-04T16:23:22Z",
      "side": 1,
      "message": "Thanks everyone for the quick review on the LDCLR change. I\u0027ve rebased this change on that one and updated it accordingly.",
      "parentUuid": "a8bf497f_35be0ad2",
      "range": {
        "startLine": 793,
        "startChar": 5,
        "endLine": 793,
        "endChar": 8
      },
      "revId": "37e67646da8f3d4ac263b32ee92f5d071d8c92d6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f5b33581_f7ed2ace",
        "filename": "src/cmd/compile/internal/gc/ssa.go",
        "patchSetId": 6
      },
      "lineNbr": 3448,
      "author": {
        "id": 13315
      },
      "writtenOn": "2020-10-02T16:05:46Z",
      "side": 1,
      "message": "All these make functions are quite similar, can we merge chem?",
      "revId": "37e67646da8f3d4ac263b32ee92f5d071d8c92d6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7f201616_7b83c71e",
        "filename": "src/cmd/compile/internal/gc/ssa.go",
        "patchSetId": 6
      },
      "lineNbr": 3448,
      "author": {
        "id": 36159
      },
      "writtenOn": "2020-10-02T18:53:36Z",
      "side": 1,
      "message": "Yes, I will work on that.",
      "parentUuid": "f5b33581_f7ed2ace",
      "revId": "37e67646da8f3d4ac263b32ee92f5d071d8c92d6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c11e7208_337f5a47",
        "filename": "src/cmd/compile/internal/gc/ssa.go",
        "patchSetId": 6
      },
      "lineNbr": 3448,
      "author": {
        "id": 36159
      },
      "writtenOn": "2020-10-07T16:31:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7f201616_7b83c71e",
      "revId": "37e67646da8f3d4ac263b32ee92f5d071d8c92d6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0f561099_ee9ff1e7",
        "filename": "src/cmd/compile/internal/gc/ssa.go",
        "patchSetId": 6
      },
      "lineNbr": 3518,
      "author": {
        "id": 13315
      },
      "writtenOn": "2020-10-02T16:05:46Z",
      "side": 1,
      "message": "Is the situation changed now?",
      "revId": "37e67646da8f3d4ac263b32ee92f5d071d8c92d6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "815c2b1e_409d3ecb",
        "filename": "src/cmd/compile/internal/gc/ssa.go",
        "patchSetId": 6
      },
      "lineNbr": 3518,
      "author": {
        "id": 36159
      },
      "writtenOn": "2020-10-02T18:53:36Z",
      "side": 1,
      "message": "This change was based on my intuition that high performance arm64 CPUs are more common than they were when this code was originally written. It\u0027s been a while, but I think my testing showed that it didn\u0027t make a big difference, but it did help some.",
      "parentUuid": "0f561099_ee9ff1e7",
      "revId": "37e67646da8f3d4ac263b32ee92f5d071d8c92d6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "05ec98b9_ed5489b6",
        "filename": "src/cmd/compile/internal/gc/ssa.go",
        "patchSetId": 6
      },
      "lineNbr": 3518,
      "author": {
        "id": 36159
      },
      "writtenOn": "2020-10-07T16:38:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "815c2b1e_409d3ecb",
      "revId": "37e67646da8f3d4ac263b32ee92f5d071d8c92d6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c6ce51cb_4f9a4291",
        "filename": "src/cmd/compile/internal/ssa/gen/ARM64Ops.go",
        "patchSetId": 6
      },
      "lineNbr": 627,
      "author": {
        "id": 13315
      },
      "writtenOn": "2020-10-02T16:05:46Z",
      "side": 1,
      "message": "I don\u0027t think it needs to be unsafePoint. It is just a single instruction and doesn\u0027t use REGTMP. Generally, unsafePoint is needed for a multi-instruction sequence that uses REGTMP.",
      "range": {
        "startLine": 627,
        "startChar": 137,
        "endLine": 627,
        "endChar": 154
      },
      "revId": "37e67646da8f3d4ac263b32ee92f5d071d8c92d6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "412dabab_78c8c3e3",
        "filename": "src/cmd/compile/internal/ssa/gen/ARM64Ops.go",
        "patchSetId": 6
      },
      "lineNbr": 627,
      "author": {
        "id": 36159
      },
      "writtenOn": "2020-10-02T18:53:36Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "c6ce51cb_4f9a4291",
      "range": {
        "startLine": 627,
        "startChar": 137,
        "endLine": 627,
        "endChar": 154
      },
      "revId": "37e67646da8f3d4ac263b32ee92f5d071d8c92d6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "40145b4d_110b1d7a",
        "filename": "src/cmd/compile/internal/ssa/gen/ARM64Ops.go",
        "patchSetId": 6
      },
      "lineNbr": 627,
      "author": {
        "id": 36159
      },
      "writtenOn": "2020-10-02T19:13:53Z",
      "side": 1,
      "message": "Just to check, the AtomicOr8 also would not need the unsafePoint flag. Correct?",
      "parentUuid": "412dabab_78c8c3e3",
      "range": {
        "startLine": 627,
        "startChar": 137,
        "endLine": 627,
        "endChar": 154
      },
      "revId": "37e67646da8f3d4ac263b32ee92f5d071d8c92d6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e57f1880_90a55f54",
        "filename": "src/cmd/compile/internal/ssa/gen/ARM64Ops.go",
        "patchSetId": 6
      },
      "lineNbr": 627,
      "author": {
        "id": 13315
      },
      "writtenOn": "2020-10-02T19:16:10Z",
      "side": 1,
      "message": "Yeah, AtomicOr8 seems fine without unsafePoint.",
      "parentUuid": "40145b4d_110b1d7a",
      "range": {
        "startLine": 627,
        "startChar": 137,
        "endLine": 627,
        "endChar": 154
      },
      "revId": "37e67646da8f3d4ac263b32ee92f5d071d8c92d6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "be2d6c94_f93a11c1",
        "filename": "src/cmd/compile/internal/ssa/gen/ARM64Ops.go",
        "patchSetId": 6
      },
      "lineNbr": 627,
      "author": {
        "id": 13315
      },
      "writtenOn": "2020-11-02T15:17:52Z",
      "side": 1,
      "message": "AtomicOr8/32 still marked as unsafePoint.",
      "parentUuid": "e57f1880_90a55f54",
      "range": {
        "startLine": 627,
        "startChar": 137,
        "endLine": 627,
        "endChar": 154
      },
      "revId": "37e67646da8f3d4ac263b32ee92f5d071d8c92d6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5f52f53d_74046799",
        "filename": "src/cmd/compile/internal/ssa/gen/ARM64Ops.go",
        "patchSetId": 6
      },
      "lineNbr": 627,
      "author": {
        "id": 36159
      },
      "writtenOn": "2020-11-02T16:06:30Z",
      "side": 1,
      "message": "Sorry about that... that was the result of merge conflicts the last two times I rebased the patch.",
      "parentUuid": "be2d6c94_f93a11c1",
      "range": {
        "startLine": 627,
        "startChar": 137,
        "endLine": 627,
        "endChar": 154
      },
      "revId": "37e67646da8f3d4ac263b32ee92f5d071d8c92d6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "94a3f4cf_8435d1a6",
        "filename": "src/cmd/compile/internal/ssa/gen/ARM64Ops.go",
        "patchSetId": 6
      },
      "lineNbr": 690,
      "author": {
        "id": 13315
      },
      "writtenOn": "2020-10-02T16:05:46Z",
      "side": 1,
      "message": "Add \",\" between operands.",
      "range": {
        "startLine": 690,
        "startChar": 20,
        "endLine": 690,
        "endChar": 21
      },
      "revId": "37e67646da8f3d4ac263b32ee92f5d071d8c92d6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9690d0ce_39bbdd2e",
        "filename": "src/cmd/compile/internal/ssa/gen/ARM64Ops.go",
        "patchSetId": 6
      },
      "lineNbr": 690,
      "author": {
        "id": 36159
      },
      "writtenOn": "2020-10-02T18:53:36Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "94a3f4cf_8435d1a6",
      "range": {
        "startLine": 690,
        "startChar": 20,
        "endLine": 690,
        "endChar": 21
      },
      "revId": "37e67646da8f3d4ac263b32ee92f5d071d8c92d6",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}