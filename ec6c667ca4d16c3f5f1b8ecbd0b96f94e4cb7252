{
  "comments": [
    {
      "key": {
        "uuid": "1da7f0d2_7d8db75d",
        "filename": "src/runtime/malloc.go",
        "patchSetId": 3
      },
      "lineNbr": 498,
      "author": {
        "id": 5167
      },
      "writtenOn": "2016-02-09T20:16:12Z",
      "side": 1,
      "message": "This abstraction seems to be carved in slightly the wrong place. I would pull in just one more line from the original code blocks: \"s \u003d c.alloc[sizeclass]\". Then, you don\u0027t need to pass s, the documentation is much simpler, *and* this could be a perfectly reasonable method of mcache:\n\n// alloc allocates an object from mcache c. It returns the beginning of the\n// allocated object and a flag indicating that this was a \"heavy\" allocation\n// and the caller should check if GC needs to be started.\nfunc (c *mcache) alloc(sizeclass int8) (v gclinkptr, shouldhelpgc bool)\n\nThe API could be even cleaner if this returned an unsafe.Pointer instead of gclinkptr, but that would require some minor refactoring of the medium object path in mallocgc.",
      "revId": "ec6c667ca4d16c3f5f1b8ecbd0b96f94e4cb7252",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1da7f0d2_3c0288ec",
        "filename": "src/runtime/malloc.go",
        "patchSetId": 3
      },
      "lineNbr": 498,
      "author": {
        "id": 5186
      },
      "writtenOn": "2016-02-16T19:34:51Z",
      "side": 1,
      "message": "While I agree that for this incarnation not passing the span makes sense but when we move to the bit map based implementation span fields such as freeindex and ref will need to be updated.",
      "parentUuid": "1da7f0d2_7d8db75d",
      "revId": "ec6c667ca4d16c3f5f1b8ecbd0b96f94e4cb7252",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0b4eceab_9c77a5d5",
        "filename": "src/runtime/malloc.go",
        "patchSetId": 3
      },
      "lineNbr": 498,
      "author": {
        "id": 5167
      },
      "writtenOn": "2016-04-11T23:14:06Z",
      "side": 1,
      "message": "(This comment is on an old version of this CL, but it still applies to the latest version.)\n\nI haven\u0027t gotten to the follow-up CLs yet, but I don\u0027t understand your argument. My point is that you don\u0027t have to pass the span because c and sizeclass *already* tell you exactly what the span is. I don\u0027t think that\u0027s going to change with the bitmap stuff. You just have to change this to\n\nfunc nextFree(sizeclass int8, c *mcache) (v gclinkptr, shouldhelpgc bool) {\n  s :\u003d c.alloc[sizeclass]\n  ...\n}\n\nPlus, currently, the \"s\" variable in mallocgc winds up holding the wrong span if it turned out nextFree had to get a new one. This is safe because mallocgc never uses \"s\" after the call to nextFree, but it\u0027s asking for trouble.",
      "parentUuid": "1da7f0d2_3c0288ec",
      "revId": "ec6c667ca4d16c3f5f1b8ecbd0b96f94e4cb7252",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2b39d2b4_f06c9e07",
        "filename": "src/runtime/malloc.go",
        "patchSetId": 3
      },
      "lineNbr": 498,
      "author": {
        "id": 5186
      },
      "writtenOn": "2016-04-18T15:57:25Z",
      "side": 1,
      "message": "I agree now. Cutting it as a method on mcache is cleaner.\nDone",
      "parentUuid": "0b4eceab_9c77a5d5",
      "revId": "ec6c667ca4d16c3f5f1b8ecbd0b96f94e4cb7252",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1da7f0d2_fdb1c72c",
        "filename": "src/runtime/malloc.go",
        "patchSetId": 3
      },
      "lineNbr": 513,
      "author": {
        "id": 5167
      },
      "writtenOn": "2016-02-09T20:16:12Z",
      "side": 1,
      "message": "With this code motion, it\u0027s going to get harder to find the CL message this is referring to. Perhaps s;see change list message;see https://golang.org/cl/5350;",
      "revId": "ec6c667ca4d16c3f5f1b8ecbd0b96f94e4cb7252",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1da7f0d2_7cf8102c",
        "filename": "src/runtime/malloc.go",
        "patchSetId": 3
      },
      "lineNbr": 513,
      "author": {
        "id": 5186
      },
      "writtenOn": "2016-02-16T19:34:51Z",
      "side": 1,
      "message": "This whole routine is about to be rewritten in a way such that prefetchnta is no longer useful. I moved the reference to the CL into the comment above so that it will persist through the code changes.",
      "parentUuid": "1da7f0d2_fdb1c72c",
      "revId": "ec6c667ca4d16c3f5f1b8ecbd0b96f94e4cb7252",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2b39d2b4_d067a220",
        "filename": "src/runtime/malloc.go",
        "patchSetId": 3
      },
      "lineNbr": 513,
      "author": {
        "id": 5186
      },
      "writtenOn": "2016-04-18T15:57:25Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1da7f0d2_7cf8102c",
      "revId": "ec6c667ca4d16c3f5f1b8ecbd0b96f94e4cb7252",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}