{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "f9bc50ab_2571a222",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 13640
      },
      "writtenOn": "2023-02-14T05:38:48Z",
      "side": 1,
      "message": "It would probably also a good idea to add arm to TestLargeTextSectionSplitting to ensure this code is working correctly (and does not get broken again in the future).",
      "revId": "790f25052d829578ffc3eabc29e90175e28aeb80",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "49fb25fc_2d136d09",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 14020
      },
      "writtenOn": "2023-02-14T14:25:43Z",
      "side": 1,
      "message": "This is a good suggestion. I\u0027ll send a followup CL.",
      "parentUuid": "f9bc50ab_2571a222",
      "revId": "790f25052d829578ffc3eabc29e90175e28aeb80",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b973e061_7c88fca7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 14020
      },
      "writtenOn": "2023-02-14T14:38:19Z",
      "side": 1,
      "message": "Sent https://go-review.googlesource.com/c/go/+/468035",
      "parentUuid": "49fb25fc_2d136d09",
      "revId": "790f25052d829578ffc3eabc29e90175e28aeb80",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "52399361_208d400f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 13315
      },
      "writtenOn": "2023-02-17T16:20:56Z",
      "side": 1,
      "message": "Sorry for being late (I was OOO). I\u0027m not sure I really understand the nature of the failure and/or the fix. I\u0027m not sure we really need to split the text sections on ARM. Is the relocation from a Go text symbol to runtime.duffcopy? If so, and if the call is too far, the Go linker is supposed to generate a trampoline and make it an indirect call, so the C linker shouldn\u0027t see such a relocation, even if the total size of the text section is big. Does it not work correctly? Or it is some other call, not from a Go text symbol to another? Thanks.",
      "revId": "790f25052d829578ffc3eabc29e90175e28aeb80",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9acadd9c_2468be02",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 14020
      },
      "writtenOn": "2023-02-17T17:02:18Z",
      "side": 1,
      "message": "Thanks for the explanation.  Yes, both the source of the call (github.com/aws/aws-sdk-go/service/ec2.(*DescribeInstanceStatusInput).GoString) and the target (runtime.duffcopy) are Go functions, so I suppose you are right, it seems that existing trampoline generation should kick in and handle this case. My mistake. Splitting the text sections does work around the problem, but if this is supposed to be handled by the existing tramp generation then this CL is not the right way to go.\n\nThe relocation in question coming out of the compiler looks kind of interesting:\n\n```\n\trel 0+0 t\u003d23 type:github.com/aws/aws-sdk-go/service/ec2.DescribeInstanceStatusInput+0\n\trel 44+4 t\u003d8 runtime.duffcopy+eb0000ea\n\trel 56+4 t\u003d8 runtime.duffcopy+eb0000ea\n\trel 76+4 t\u003d8 runtime.convT+ebfffffe\n```\n\nThat is a large offset there.",
      "parentUuid": "52399361_208d400f",
      "revId": "790f25052d829578ffc3eabc29e90175e28aeb80",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "859b365e_a07ffc6c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 14020
      },
      "writtenOn": "2023-02-17T17:03:30Z",
      "side": 1,
      "message": "I\u0027ll spend a little more time debugging it.",
      "parentUuid": "9acadd9c_2468be02",
      "revId": "790f25052d829578ffc3eabc29e90175e28aeb80",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4f18d923_0760e8c9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 13315
      },
      "writtenOn": "2023-02-17T17:16:34Z",
      "side": 1,
      "message": "Thanks. Things are tricky on ARM, as the addend isn\u0027t the actual addend, but contains some instruction bits (https://github.com/golang/go/issues/19811), which I really hate. Maybe when something overflows we don\u0027t generate that correctly?",
      "parentUuid": "859b365e_a07ffc6c",
      "revId": "790f25052d829578ffc3eabc29e90175e28aeb80",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cb732950_f09f24a0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 14020
      },
      "writtenOn": "2023-02-17T18:08:24Z",
      "side": 1,
      "message": "Interesting. Looks like at the point where we could generate a tramp, we don\u0027t.\n\nThe calculated distance for the call (\"t\" from https://go.googlesource.com/go/+/790f25052d829578ffc3eabc29e90175e28aeb80/src/cmd/link/internal/arm/asm.go#401 ) is being computed as -0x7fffe1, which is just within range, so it thinks no tramp is needed.\n\nWhen I dump out the go.o produced by the Go linker feeding into the external link, however, the two symbols in question are indeed out of range: runtime.duffzero is at 0x000808ec, whereas the source of the bad reloc (\u0027github.com/aws/aws-sdk-go/service/ec2.(*DescribeInstanceStatusInput).GoString\u0027) is at 0x02080df0. That\u0027s a distance of 33555200, which is right on the hairy edge of fitting.\n\nI am wondering if maybe we need a slightly higher fudge factor here.",
      "parentUuid": "4f18d923_0760e8c9",
      "revId": "790f25052d829578ffc3eabc29e90175e28aeb80",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cd99d8c6_da3537bf",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 14020
      },
      "writtenOn": "2023-02-17T18:18:41Z",
      "side": 1,
      "message": "Perhaps the right value to use here would be theArch.TrampLimit / 4 (which in this case would be 0x700000 as opposed to the 0x800000 we are currently using.",
      "parentUuid": "cb732950_f09f24a0",
      "revId": "790f25052d829578ffc3eabc29e90175e28aeb80",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7009ac0a_8f5f3b8f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 13315
      },
      "writtenOn": "2023-02-17T19:24:01Z",
      "side": 1,
      "message": "What is the addend to runtime.duffzero? Maybe that the actual call distance is in range (so we don\u0027t actually need a trampoline)? But the distance to the target symbol (without addend) is out of range and the C linker still doesn\u0027t like it?\n\nI think TrampLimit is smaller so things like PLT stubs etc. won\u0027t push it out of range. But we should be able to use the full range of a CALL instruction (at least in internal linking mode).",
      "parentUuid": "cd99d8c6_da3537bf",
      "revId": "790f25052d829578ffc3eabc29e90175e28aeb80",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d98d67f9_bd42e8c9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 14020
      },
      "writtenOn": "2023-02-17T19:30:32Z",
      "side": 1,
      "message": "Yeah I was thinking along the same lines. It could be that this is a bug/weakness in the external linker, which in most cases (I am guessing) it only handling CALL relocations that target the start of functions, not somewhere in the middle of the function.\n\nIf you look at the distance between the start of runtime.duffcopy and the start of `github.com/aws/aws-sdk-go/service/ec2.(*DescribeInstanceStatusInput).GoString`, it comes out as 768 over the limit. However the call is at offset 44 within Gstring (bringing us up to 812), but the addend on the relocation is 936, meaning that it should technically fit (with 124 bytes to spare).\n\nI think what\u0027s happening is that the external linker is not doing the check correctly, e.g. ignoring the addend. Perhaps we need the slop factor only when looking at calls with non-zero addends ( like to duff routines ).",
      "parentUuid": "7009ac0a_8f5f3b8f",
      "revId": "790f25052d829578ffc3eabc29e90175e28aeb80",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ecb74466_d745a4dc",
        "filename": "src/cmd/link/internal/ld/data.go",
        "patchSetId": 4
      },
      "lineNbr": 2538,
      "author": {
        "id": 13640
      },
      "writtenOn": "2023-02-14T05:38:48Z",
      "side": 1,
      "message": "The splitting requirements for both PPC64 and Darwin/ARM64 are documented in the comment above - worth adding documentation for ARM as well?",
      "range": {
        "startLine": 2538,
        "startChar": 5,
        "endLine": 2538,
        "endChar": 22
      },
      "revId": "790f25052d829578ffc3eabc29e90175e28aeb80",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8ae92fb1_f70dc5b3",
        "filename": "src/cmd/link/internal/ld/data.go",
        "patchSetId": 4
      },
      "lineNbr": 2538,
      "author": {
        "id": 14020
      },
      "writtenOn": "2023-02-14T14:25:43Z",
      "side": 1,
      "message": "I\u0027ll include this fix in my follow-up CL.",
      "parentUuid": "ecb74466_d745a4dc",
      "range": {
        "startLine": 2538,
        "startChar": 5,
        "endLine": 2538,
        "endChar": 22
      },
      "revId": "790f25052d829578ffc3eabc29e90175e28aeb80",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}