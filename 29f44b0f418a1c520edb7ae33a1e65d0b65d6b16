{
  "comments": [
    {
      "key": {
        "uuid": "4ef89d38_9d3243da",
        "filename": "src/sort/sort.go",
        "patchSetId": 2
      },
      "lineNbr": 319,
      "author": {
        "id": 5143
      },
      "writtenOn": "2015-01-02T18:32:23Z",
      "side": 1,
      "message": "Why 16 instead of 20?",
      "revId": "29f44b0f418a1c520edb7ae33a1e65d0b65d6b16",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4ef89d38_7dd3f71a",
        "filename": "src/sort/sort.go",
        "patchSetId": 2
      },
      "lineNbr": 321,
      "author": {
        "id": 5143
      },
      "writtenOn": "2015-01-02T18:32:23Z",
      "side": 1,
      "message": "Please don\u0027t rename local variables at the same time as changing the code. (And in general, don\u0027t rename them unless there is a compelling reason.) It makes the diff harder to read than necessary.",
      "revId": "29f44b0f418a1c520edb7ae33a1e65d0b65d6b16",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4ef89d38_bdd05f08",
        "filename": "src/sort/sort.go",
        "patchSetId": 2
      },
      "lineNbr": 342,
      "author": {
        "id": 5143
      },
      "writtenOn": "2015-01-02T18:32:23Z",
      "side": 1,
      "message": "Again, unless there is a compelling reason, please leave the original code unchanged.",
      "revId": "29f44b0f418a1c520edb7ae33a1e65d0b65d6b16",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4ef89d38_1df9938b",
        "filename": "src/sort/sort.go",
        "patchSetId": 2
      },
      "lineNbr": 375,
      "author": {
        "id": 5143
      },
      "writtenOn": "2015-01-02T18:32:23Z",
      "side": 1,
      "message": "Is this linear search faster than a binary search? If so, perhaps we should use a linear search below as well.\n\nThat observation also suggests that this recursion prevention perhaps actually belongs as a check after the search below.",
      "revId": "29f44b0f418a1c520edb7ae33a1e65d0b65d6b16",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4ef89d38_5dff1b73",
        "filename": "src/sort/sort.go",
        "patchSetId": 2
      },
      "lineNbr": 395,
      "author": {
        "id": 5143
      },
      "writtenOn": "2015-01-02T18:32:23Z",
      "side": 1,
      "message": "Please separate cleanups from other changes.",
      "revId": "29f44b0f418a1c520edb7ae33a1e65d0b65d6b16",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4ef89d38_5d2ddb82",
        "filename": "src/sort/sort_test.go",
        "patchSetId": 2
      },
      "lineNbr": 190,
      "author": {
        "id": 5143
      },
      "writtenOn": "2015-01-02T18:32:23Z",
      "side": 1,
      "message": "This could be simpler and more targeted:\n\nfunc BenchmarkSortSorted64K(b *testing.B) {\n\tdata :\u003d make([]int, 1\u003c\u003c16)\n\tfor i :\u003d range data {\n\t\tdata[i] \u003d i\n\t}\n\tfor i :\u003d 0; i \u003c b.N; i++ {\n\t\tInts(data)\n\t}\n}",
      "revId": "29f44b0f418a1c520edb7ae33a1e65d0b65d6b16",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4ef89d38_3d220f93",
        "filename": "src/sort/sort_test.go",
        "patchSetId": 2
      },
      "lineNbr": 203,
      "author": {
        "id": 5143
      },
      "writtenOn": "2015-01-02T18:32:23Z",
      "side": 1,
      "message": "Same.",
      "revId": "29f44b0f418a1c520edb7ae33a1e65d0b65d6b16",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}