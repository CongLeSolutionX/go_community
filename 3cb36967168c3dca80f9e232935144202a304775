{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "c26b22eb_22649090",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 5015
      },
      "writtenOn": "2023-09-13T20:58:42Z",
      "side": 1,
      "message": "compile",
      "revId": "3cb36967168c3dca80f9e232935144202a304775",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "79dd12ab_2fec8286",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 33992
      },
      "writtenOn": "2023-09-29T15:11:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c26b22eb_22649090",
      "revId": "3cb36967168c3dca80f9e232935144202a304775",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7688cb5c_ec61a208",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 33992
      },
      "writtenOn": "2023-09-13T09:58:07Z",
      "side": 1,
      "message": "Hey there Matthew ðŸ‘‹ This is a draft CL to get a start on #62407.\n\nIt\u0027s my first time trying to mess with the compiler, so unfortunately I got kinda stuck and felt silly, hoping you could provide a couple of hints. \n\n- The optimization here is that we should concatenate the strings and have the compiler return the string\u0027s data directly, right?\n- Is this the correct place to add the condition?\n- Is it right to walk the OADDSTR node and try to access the results of the OCALLFUNC, or should we reach into its List individually?\n\nThanks in advance for your time and encouragement!",
      "revId": "3cb36967168c3dca80f9e232935144202a304775",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "66e8cb78_172efd2b",
        "filename": "src/cmd/compile/internal/walk/convert.go",
        "patchSetId": 1
      },
      "lineNbr": 272,
      "author": {
        "id": 33992
      },
      "writtenOn": "2023-09-13T11:15:27Z",
      "side": 1,
      "message": "On a second reading, this is totally wrong, we don\u0027t want to slice the string contents, but get the data of the concatstring return value instead.",
      "revId": "3cb36967168c3dca80f9e232935144202a304775",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "472993be_4aa3ca24",
        "filename": "src/cmd/compile/internal/walk/convert.go",
        "patchSetId": 1
      },
      "lineNbr": 272,
      "author": {
        "id": 5440
      },
      "writtenOn": "2023-09-13T18:42:32Z",
      "side": 1,
      "message": "This is also totally wrong because ns.X here is the concatstring function itself (not the string result of calling it), and functions aren\u0027t slicable. ðŸ˜Š\n\nAs a sketch of how I\u0027d approach this:\n\n1. Add a \"typ *types.Type\" parameter to walkAddString.\n2. Change the existing callers of \"walkAddString(n, init)\" to \"walkAddString(n.Type(), n, init)\".\n3. Here you can use just \"return walkAddString(n.Type(), s, init)\".\n4. Within walkAddString, you\u0027ll want to call different runtime functions depending on whether typ is a string or []byte.\n5. You\u0027ll need to add appropriate concatbyte{s,2,3,4,5} function in the runtime (src/runtime/string.go).\n6. After adding them, you\u0027ll also need to add declarations for them in cmd/compile/internal/typecheck/_builtin/runtime.go, and then run \"go generate cmd/compile/internal/typecheck\".\n\nNote: unlike concatstrings, where it\u0027s able to directly return one of the input strings in certain cases, concatbytes always needs to allocate new memory.",
      "parentUuid": "66e8cb78_172efd2b",
      "revId": "3cb36967168c3dca80f9e232935144202a304775",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "79facdac_c2a6f3df",
        "filename": "src/cmd/compile/internal/walk/convert.go",
        "patchSetId": 1
      },
      "lineNbr": 272,
      "author": {
        "id": 33992
      },
      "writtenOn": "2023-09-29T15:11:15Z",
      "side": 1,
      "message": "Thanks for the hand-holding here, I appreciate your help! I\u0027ve went ahead with the changes, Go compiles and the tests pass.\n\n\u003e Note: unlike concatstrings, where it\u0027s able to directly return one of the input strings in certain cases, concatbytes always needs to allocate new memory.\n\nIIUC here you mean that we can\u0027t make use of the *tmpBuf argument, so we should always remove it and the handling around it altogether, right?\n\nI\u0027m looking for a way to validate this works properly; I can see calls to the new `concatbytes` function, but for example if I use the following main and `go tool compile -S main.go`, I still see concatstrings being used instead.\n\n```\nfunc main() {\n\tstr1 :\u003d \"hellooo\"\n\tstr2 :\u003d \"worlddd\"\n\tprint([]byte(str1 + \"\\n\" + str2))\n}\n```",
      "parentUuid": "472993be_4aa3ca24",
      "revId": "3cb36967168c3dca80f9e232935144202a304775",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f4f95489_6f7e19de",
        "filename": "src/cmd/compile/internal/walk/convert.go",
        "patchSetId": 1
      },
      "lineNbr": 272,
      "author": {
        "id": 5440
      },
      "writtenOn": "2023-09-29T21:44:45Z",
      "side": 1,
      "message": "\u003e IIUC here you mean that we can\u0027t make use of the *tmpBuf argument, so we should always remove it and the handling around it altogether, right?\n\nCorrect. This amounts to not removing the parameter from the concatbyte* functions, and not omitting `buf` from the start of the args list constructed in walkAddString.\n\n\u003e I\u0027m looking for a way to validate this works properly\n\nCompiling with `-S` as you mentioned I think should be fine. You can also use `-W` to see what the IR looks like before and after walk.\n\nIn your test program, I think it\u0027s still using concatstring because print is known not to mutate the []byte, so it uses OSTR2BYTESTMP instead. In that case, concatstring is more efficient, because it\u0027s safe to directly reuse the original string memory.\n\nIf you instead do something like:\n\n```\nb :\u003d []byte(s1 + s2)\nb[0] \u003d 1\n```\n\nit should force OSTR2BYTES and thus need to use concatbytes instead.",
      "parentUuid": "79facdac_c2a6f3df",
      "revId": "3cb36967168c3dca80f9e232935144202a304775",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a4855dbf_ef684388",
        "filename": "src/cmd/compile/internal/walk/convert.go",
        "patchSetId": 1
      },
      "lineNbr": 272,
      "author": {
        "id": 33992
      },
      "writtenOn": "2023-09-30T22:30:40Z",
      "side": 1,
      "message": "Oh, that explains why I was seeing concatbytes being used in _some_ of my test cases.\n\nI now can verify by compiling with -S that the concatbytes _is_ being used in the following program, and it results in one less call to runtime.stringtoslicebyte.\n\n```go\nfunc main() {\n\tstr1 :\u003d \"hello\"\n\tstr2 :\u003d \"world\"\n\tb :\u003d []byte(str1 + str2)\n\tb[0] \u003d 1\n\tprint(b)\n}\n```\n\n```\n     CL branch                                             main branch\n rel 24+8 t\u003dR_ADDRARM64 go:string.\"hello\"+0            rel 32+8 t\u003dR_ADDRARM64 go:string.\"hello\"+0\n rel 36+8 t\u003dR_ADDRARM64 go:string.\"world\"+0            rel 44+8 t\u003dR_ADDRARM64 go:string.\"world\"+0\n rel 48+4 t\u003dR_CALLARM64 runtime.concatbyte2+0          rel 56+4 t\u003dR_CALLARM64 runtime.concatstring2+0\n rel 80+4 t\u003dR_CALLARM64 runtime.printlock+0            rel 72+4 t\u003dR_CALLARM64 runtime.stringtoslicebyte+0\n rel 96+4 t\u003dR_CALLARM64 runtime.printslice+0           rel 104+4 t\u003dR_CALLARM64 runtime.printlock+0\n rel 100+4 t\u003dR_CALLARM64 runtime.printunlock+0         rel 120+4 t\u003dR_CALLARM64 runtime.printslice+0\n rel 124+4 t\u003dR_CALLARM64 runtime.panicIndex+0          rel 124+4 t\u003dR_CALLARM64 runtime.printunlock+0\n rel 136+4 t\u003dR_CALLARM64 runtime.morestack_noctxt+0    rel 148+4 t\u003dR_CALLARM64 runtime.panicIndex+0\n                                                       rel 160+4 t\u003dR_CALLARM64 runtime.morestack_noctxt+0\n\n```",
      "parentUuid": "f4f95489_6f7e19de",
      "revId": "3cb36967168c3dca80f9e232935144202a304775",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ab839d6c_4db3458b",
        "filename": "src/cmd/compile/internal/walk/convert.go",
        "patchSetId": 1
      },
      "lineNbr": 272,
      "author": {
        "id": 5440
      },
      "writtenOn": "2023-10-01T02:17:18Z",
      "side": 1,
      "message": "Great. You should be able to",
      "parentUuid": "a4855dbf_ef684388",
      "revId": "3cb36967168c3dca80f9e232935144202a304775",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}