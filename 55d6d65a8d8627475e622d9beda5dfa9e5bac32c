{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "a777aac4_296ed95b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 16
      },
      "lineNbr": 9,
      "author": {
        "id": 57259
      },
      "writtenOn": "2024-11-19T21:51:42Z",
      "side": 1,
      "message": "\"In the output of go test -json, this change provides...\"",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 9,
        "endChar": 8
      },
      "revId": "55d6d65a8d8627475e622d9beda5dfa9e5bac32c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "66bde2d3_9109d459",
        "filename": "/COMMIT_MSG",
        "patchSetId": 16
      },
      "lineNbr": 9,
      "author": {
        "id": 52633
      },
      "writtenOn": "2024-11-19T23:09:26Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a777aac4_296ed95b",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 9,
        "endChar": 8
      },
      "revId": "55d6d65a8d8627475e622d9beda5dfa9e5bac32c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4101f296_6cf22034",
        "filename": "/COMMIT_MSG",
        "patchSetId": 16
      },
      "lineNbr": 16,
      "author": {
        "id": 57259
      },
      "writtenOn": "2024-11-19T21:51:42Z",
      "side": 1,
      "message": "missing space",
      "range": {
        "startLine": 16,
        "startChar": 21,
        "endLine": 16,
        "endChar": 36
      },
      "revId": "55d6d65a8d8627475e622d9beda5dfa9e5bac32c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6813ee28_10495d2a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 16
      },
      "lineNbr": 16,
      "author": {
        "id": 52633
      },
      "writtenOn": "2024-11-19T23:09:26Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4101f296_6cf22034",
      "range": {
        "startLine": 16,
        "startChar": 21,
        "endLine": 16,
        "endChar": 36
      },
      "revId": "55d6d65a8d8627475e622d9beda5dfa9e5bac32c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b083aabf_7d7de2c7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 16
      },
      "lineNbr": 0,
      "author": {
        "id": 57259
      },
      "writtenOn": "2024-11-19T21:02:38Z",
      "side": 1,
      "message": "Sorry for the immense delay in replying. I will try to be more responsive this week so that this can squeak in before the freeze.",
      "revId": "55d6d65a8d8627475e622d9beda5dfa9e5bac32c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "74e73271_2d30112d",
        "filename": "src/cmd/internal/test2json/test2json.go",
        "patchSetId": 16
      },
      "lineNbr": 104,
      "author": {
        "id": 57259
      },
      "writtenOn": "2024-11-19T21:02:38Z",
      "side": 1,
      "message": "That means the escape character itself must be escaped, otherwise the decoder would not be able to distinguish an escaped ^V from a literal ^[ ^V sequence in t.Log.\n\n(The testdata/frameescape.test shows that this is implemented; but it\u0027s worth stating explicitly.)",
      "range": {
        "startLine": 104,
        "startChar": 24,
        "endLine": 104,
        "endChar": 33
      },
      "revId": "55d6d65a8d8627475e622d9beda5dfa9e5bac32c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1268857a_38206388",
        "filename": "src/cmd/internal/test2json/test2json.go",
        "patchSetId": 16
      },
      "lineNbr": 104,
      "author": {
        "id": 52633
      },
      "writtenOn": "2024-11-19T23:09:26Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "74e73271_2d30112d",
      "range": {
        "startLine": 104,
        "startChar": 24,
        "endLine": 104,
        "endChar": 33
      },
      "revId": "55d6d65a8d8627475e622d9beda5dfa9e5bac32c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cbbdfca1_67db3ae4",
        "filename": "src/cmd/internal/test2json/test2json.go",
        "patchSetId": 16
      },
      "lineNbr": 109,
      "author": {
        "id": 57259
      },
      "writtenOn": "2024-11-19T21:02:38Z",
      "side": 1,
      "message": "values",
      "range": {
        "startLine": 109,
        "startChar": 34,
        "endLine": 109,
        "endChar": 40
      },
      "revId": "55d6d65a8d8627475e622d9beda5dfa9e5bac32c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fb62c48e_f9d2a98e",
        "filename": "src/cmd/internal/test2json/test2json.go",
        "patchSetId": 16
      },
      "lineNbr": 109,
      "author": {
        "id": 57259
      },
      "writtenOn": "2024-11-19T21:02:38Z",
      "side": 1,
      "message": "I wonder why this detail is necessary. Isn\u0027t it enough that the file contains a sequence of JSON values, each written in its entirety?",
      "range": {
        "startLine": 109,
        "startChar": 51,
        "endLine": 109,
        "endChar": 53
      },
      "revId": "55d6d65a8d8627475e622d9beda5dfa9e5bac32c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c95fd609_2fb38848",
        "filename": "src/cmd/internal/test2json/test2json.go",
        "patchSetId": 16
      },
      "lineNbr": 109,
      "author": {
        "id": 57259
      },
      "writtenOn": "2024-11-19T21:51:42Z",
      "side": 1,
      "message": "(Never mind; I see that the existing JSON protocol stipulates a line-oriented form.)",
      "parentUuid": "fb62c48e_f9d2a98e",
      "range": {
        "startLine": 109,
        "startChar": 51,
        "endLine": 109,
        "endChar": 53
      },
      "revId": "55d6d65a8d8627475e622d9beda5dfa9e5bac32c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "64dfd907_c865b0a1",
        "filename": "src/cmd/internal/test2json/test2json.go",
        "patchSetId": 16
      },
      "lineNbr": 109,
      "author": {
        "id": 52633
      },
      "writtenOn": "2024-11-19T23:09:26Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cbbdfca1_67db3ae4",
      "range": {
        "startLine": 109,
        "startChar": 34,
        "endLine": 109,
        "endChar": 40
      },
      "revId": "55d6d65a8d8627475e622d9beda5dfa9e5bac32c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c3527653_c25806e7",
        "filename": "src/cmd/internal/test2json/test2json.go",
        "patchSetId": 16
      },
      "lineNbr": 109,
      "author": {
        "id": 52633
      },
      "writtenOn": "2024-11-19T23:09:26Z",
      "side": 1,
      "message": "For a bit more context, JavaScript does not support JSON streams. If you google \"JavaScript JSON multiple objects\", the responses are \"Don\u0027t\" or \"Use string manipulation to split it or turn it into valid JSON\". So the line-oriented form is a lot easier to handle in vscode-go.\nSide note, the majority of this change is unnecessary \nchurn due to the extension I use to automatically wrap comments so I\u0027m \ngoing to revert everything I didn\u0027t actually change.",
      "parentUuid": "c95fd609_2fb38848",
      "range": {
        "startLine": 109,
        "startChar": 51,
        "endLine": 109,
        "endChar": 53
      },
      "revId": "55d6d65a8d8627475e622d9beda5dfa9e5bac32c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d17febeb_0628363c",
        "filename": "src/cmd/internal/test2json/test2json.go",
        "patchSetId": 16
      },
      "lineNbr": 109,
      "author": {
        "id": 57259
      },
      "writtenOn": "2024-11-19T23:33:53Z",
      "side": 1,
      "message": "Thanks; this is great information to record in a comment, if it is the reason this protocol was chosen.\n\n\u003e the line-oriented form is a lot easier to handle in vscode-go.\n\nIsn\u0027t this protocol an implementation detail of the testing package and its accomplice test2json? It seems unwise for vscode-go to consume it directly as it may presumably change in incompatible ways on any given day.",
      "parentUuid": "c3527653_c25806e7",
      "range": {
        "startLine": 109,
        "startChar": 51,
        "endLine": 109,
        "endChar": 53
      },
      "revId": "55d6d65a8d8627475e622d9beda5dfa9e5bac32c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3c5b2d05_ffedcfcd",
        "filename": "src/cmd/internal/test2json/test2json.go",
        "patchSetId": 16
      },
      "lineNbr": 432,
      "author": {
        "id": 57259
      },
      "writtenOn": "2024-11-19T21:02:38Z",
      "side": 1,
      "message": "Again, I wonder why lines matter at all if the file is a JSON stream.",
      "range": {
        "startLine": 432,
        "startChar": 34,
        "endLine": 432,
        "endChar": 71
      },
      "revId": "55d6d65a8d8627475e622d9beda5dfa9e5bac32c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8621ed9c_6fd84caf",
        "filename": "src/cmd/internal/test2json/test2json.go",
        "patchSetId": 16
      },
      "lineNbr": 432,
      "author": {
        "id": 57259
      },
      "writtenOn": "2024-11-19T21:51:42Z",
      "side": 1,
      "message": "(Never mind.)",
      "parentUuid": "3c5b2d05_ffedcfcd",
      "range": {
        "startLine": 432,
        "startChar": 34,
        "endLine": 432,
        "endChar": 71
      },
      "revId": "55d6d65a8d8627475e622d9beda5dfa9e5bac32c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fe88b658_cbe532de",
        "filename": "src/cmd/internal/test2json/test2json.go",
        "patchSetId": 16
      },
      "lineNbr": 447,
      "author": {
        "id": 57259
      },
      "writtenOn": "2024-11-19T21:02:38Z",
      "side": 1,
      "message": "This is an expensive way to skip a byte of input.\n\nI think it might be more efficient, and clearer, to express it by copying from the input (renamed \u0027in\u0027) to a second buffer (out), along these lines:\n\n```go\nfunc writeOutputEvent(in []byte) {\n...\n\tvar out []byte\n\tfor _, b :\u003d range in {\n\t\tif c.escape {\n\t\t\tc.escape \u003d false\n\t\t\tout \u003d append(out, b)\n\t\t\tcontinue\n\t\t}\n\n\t\tswitch b {\n\t\tcase markEscape:\n\t\t\tc.escape \u003d true\n\n\t\tcase markErrBegin, markErrEnd:\n\t\t\tif len(out) \u003e 0 {\n\t\t\t\tvar typ string\n\t\t\t\tif b \u003d\u003d markErrEnd {\n\t\t\t\t\ttyp \u003d \"error\"\n\t\t\t\t}\n\t\t\t\tc.writeEvent(\u0026event{\n\t\t\t\t\tAction:     \"output\",\n\t\t\t\t\tOutput:     (*textBytes)(\u0026out),\n\t\t\t\t\tOutputType: typ,\n\t\t\t\t})\n\t\t\t\tout \u003d out[:0]\n\t\t\t}\n\t\t\tc.withinErr \u003d b \u003d\u003d markErrBegin\n\t\t\t\n\t\tdefault:\n\t\t\tout \u003d append(out, b)\n\t\t}\n\t}\n\n\tif len(out) \u003e 0 {\n\t\tc.writeEvent(\u0026event{\n\t\t\tAction:     \"output\",\n\t\t\tOutput:     (*textBytes)(\u0026out),\n\t\t\tOutputType: typ,\n\t\t})\n\t}\n```",
      "range": {
        "startLine": 447,
        "startChar": 3,
        "endLine": 447,
        "endChar": 38
      },
      "revId": "55d6d65a8d8627475e622d9beda5dfa9e5bac32c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ebfa8057_90cacbcf",
        "filename": "src/cmd/internal/test2json/test2json.go",
        "patchSetId": 16
      },
      "lineNbr": 447,
      "author": {
        "id": 52633
      },
      "writtenOn": "2024-11-19T23:09:26Z",
      "side": 1,
      "message": "I updated it to use a second buffer. I kept the begin and end cases separate because A) there are some nuances that I don\u0027t think your version preserves and B) IMO it\u0027s easier to read. The nuances:\n\n- Unconditionally setting the output type to `error` after markErrEnd is insufficient. The design as specified by Russ requires a separate event for each line of output and an output type of `error` for the first line of `t.Error(...)` and `error-continue` for subsequent lines. I\u0027d prefer one event per Log/Error call as it would make my life easier (when working on vscode-go), but not enough to try to change the design. I think the reason is that test2json processes line by line.\n\n- Because test2json processes line by line, `t.Error` emits the end mark before the newline. But if the user calls `t.Error(\"Error\\n\")`, they expect the new line to be part of the error message. Hence the \"if the next character is \\n, include it\" bit.",
      "parentUuid": "fe88b658_cbe532de",
      "range": {
        "startLine": 447,
        "startChar": 3,
        "endLine": 447,
        "endChar": 38
      },
      "revId": "55d6d65a8d8627475e622d9beda5dfa9e5bac32c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2e1fd71e_cb33d9ab",
        "filename": "src/cmd/internal/test2json/test2json.go",
        "patchSetId": 16
      },
      "lineNbr": 447,
      "author": {
        "id": 57259
      },
      "writtenOn": "2024-11-19T23:33:53Z",
      "side": 1,
      "message": "Thanks for the explanation; makes sense.",
      "parentUuid": "ebfa8057_90cacbcf",
      "range": {
        "startLine": 447,
        "startChar": 3,
        "endLine": 447,
        "endChar": 38
      },
      "revId": "55d6d65a8d8627475e622d9beda5dfa9e5bac32c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bb777b94_4921a423",
        "filename": "src/testing/sub_test.go",
        "patchSetId": 16
      },
      "lineNbr": 751,
      "author": {
        "id": 57259
      },
      "writtenOn": "2024-11-19T21:51:42Z",
      "side": 1,
      "message": "```\n// notateOutput transforms an output line into something more easily comparable\nvar notateOutput \u003d strings.NewReplacer(\n  string(markFraming), \"^V\",\n  string(markErrBegin), \"^O\",\n  string(markErrEnd), \"^N\",\n  string(markEscape), \"^[\",\n).Replace\n```",
      "revId": "55d6d65a8d8627475e622d9beda5dfa9e5bac32c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ca805dc7_bdaa06aa",
        "filename": "src/testing/sub_test.go",
        "patchSetId": 16
      },
      "lineNbr": 751,
      "author": {
        "id": 52633
      },
      "writtenOn": "2024-11-19T23:09:26Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bb777b94_4921a423",
      "revId": "55d6d65a8d8627475e622d9beda5dfa9e5bac32c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8c6659a7_28a62a00",
        "filename": "src/testing/testing.go",
        "patchSetId": 16
      },
      "lineNbr": 529,
      "author": {
        "id": 57259
      },
      "writtenOn": "2024-11-19T21:51:42Z",
      "side": 1,
      "message": "The test2json command documents the public JSON protocol, but we should add a comment here explaining the internal protocol used between \"testing\" and test2json.",
      "revId": "55d6d65a8d8627475e622d9beda5dfa9e5bac32c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "01331058_f64918ce",
        "filename": "src/testing/testing.go",
        "patchSetId": 16
      },
      "lineNbr": 529,
      "author": {
        "id": 52633
      },
      "writtenOn": "2024-11-19T23:26:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8c6659a7_28a62a00",
      "revId": "55d6d65a8d8627475e622d9beda5dfa9e5bac32c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2f6b57a8_82f86c7d",
        "filename": "src/testing/testing.go",
        "patchSetId": 16
      },
      "lineNbr": 531,
      "author": {
        "id": 57259
      },
      "writtenOn": "2024-11-19T21:51:42Z",
      "side": 1,
      "message": "shift into error state\nshift out of error state\n\n(^O, ^N are formally named \"shift in/out\")",
      "range": {
        "startLine": 531,
        "startChar": 39,
        "endLine": 531,
        "endChar": 47
      },
      "revId": "55d6d65a8d8627475e622d9beda5dfa9e5bac32c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9f1d0fc5_12aeb5c7",
        "filename": "src/testing/testing.go",
        "patchSetId": 16
      },
      "lineNbr": 531,
      "author": {
        "id": 52633
      },
      "writtenOn": "2024-11-19T23:09:26Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2f6b57a8_82f86c7d",
      "range": {
        "startLine": 531,
        "startChar": 39,
        "endLine": 531,
        "endChar": 47
      },
      "revId": "55d6d65a8d8627475e622d9beda5dfa9e5bac32c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "79832e2e_3d206080",
        "filename": "src/testing/testing.go",
        "patchSetId": 16
      },
      "lineNbr": 580,
      "author": {
        "id": 57259
      },
      "writtenOn": "2024-11-19T21:51:42Z",
      "side": 1,
      "message": "vestige of debugging?",
      "range": {
        "startLine": 580,
        "startChar": 4,
        "endLine": 580,
        "endChar": 9
      },
      "revId": "55d6d65a8d8627475e622d9beda5dfa9e5bac32c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "be1f751e_5666726f",
        "filename": "src/testing/testing.go",
        "patchSetId": 16
      },
      "lineNbr": 580,
      "author": {
        "id": 52633
      },
      "writtenOn": "2024-11-19T23:09:26Z",
      "side": 1,
      "message": "Oops, yes",
      "parentUuid": "79832e2e_3d206080",
      "range": {
        "startLine": 580,
        "startChar": 4,
        "endLine": 580,
        "endChar": 9
      },
      "revId": "55d6d65a8d8627475e622d9beda5dfa9e5bac32c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8c37b9bb_05e6fab7",
        "filename": "src/testing/testing.go",
        "patchSetId": 16
      },
      "lineNbr": 644,
      "author": {
        "id": 57259
      },
      "writtenOn": "2024-11-19T21:51:42Z",
      "side": 1,
      "message": "What\u0027s the purpose of implementing WriteString if it isn\u0027t more efficient than Write([]byte(s))?",
      "range": {
        "startLine": 640,
        "startChar": 0,
        "endLine": 644,
        "endChar": 0
      },
      "revId": "55d6d65a8d8627475e622d9beda5dfa9e5bac32c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ae95cbde_4bce7f54",
        "filename": "src/testing/testing.go",
        "patchSetId": 16
      },
      "lineNbr": 644,
      "author": {
        "id": 52633
      },
      "writtenOn": "2024-11-19T23:09:26Z",
      "side": 1,
      "message": "I did that because `common.decorate` calls `strings.Builder.WriteString` and I assumed it was a good idea to continue doing that. When writing a non-error output message, `chattyPrinter.escape` is a noop. `strings.Builder.WriteString` and `strings.Builder.Write` are virtually identical. If the compiler is sufficiently smart, I think `WriteString` will be more efficient: given `var b []byte` and `var s string`, `append(b, s...)` has to copy the string, but `append(b, []byte(s)...)` will copy twice, I think.",
      "parentUuid": "8c37b9bb_05e6fab7",
      "range": {
        "startLine": 640,
        "startChar": 0,
        "endLine": 644,
        "endChar": 0
      },
      "revId": "55d6d65a8d8627475e622d9beda5dfa9e5bac32c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6e7a4964_4b49ee55",
        "filename": "src/testing/testing.go",
        "patchSetId": 16
      },
      "lineNbr": 644,
      "author": {
        "id": 52633
      },
      "writtenOn": "2024-11-19T23:26:18Z",
      "side": 1,
      "message": "If I\u0027m right about the double copy, I don\u0027t know if that\u0027s enough of a difference to justify the complexity. My motivation was mainly to avoid a performance regression where I could.",
      "parentUuid": "ae95cbde_4bce7f54",
      "range": {
        "startLine": 640,
        "startChar": 0,
        "endLine": 644,
        "endChar": 0
      },
      "revId": "55d6d65a8d8627475e622d9beda5dfa9e5bac32c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "60c6b564_62aa1f61",
        "filename": "src/testing/testing.go",
        "patchSetId": 16
      },
      "lineNbr": 657,
      "author": {
        "id": 57259
      },
      "writtenOn": "2024-11-19T21:51:42Z",
      "side": 1,
      "message": "This looks wrong: it will attempt to Write p again.\n\nI think you want something like this:\n```go\n\nfunc (w escapeWriter) Write(p []byte) (total int, err error) {\n\tescaped :\u003d [2]byte{markEscape, 0}\n\tfor len(p) \u003e 0 {\n\t\t// Are there any remaining escapes?\n\t\tvar n int\n\t\ti :\u003d bytes.IndexAny(p, string([]byte{markFraming, markErrBegin, markErrEnd, markEscape}))\n\t\tif i \u003c 0 {\n\t\t\t// Write final literal portion.\n\t\t\tn, err \u003d w.w.Write(p)\n\t\t\ttotal +\u003d n\n\t\t\tbreak\n\t\t}\n\n\t\t// Write literal portion.\n\t\tn, err \u003d w.w.Write(p[:i])\n\t\ttotal +\u003d n\n\t\tif err !\u003d nil {\n\t\t\tbreak\n\t\t}\n\n\t\t// Write escaped byte.\n\t\tescaped[1] \u003d p[i]\n\t\tn, err \u003d w.w.Write(escaped[:])\n\t\tif err !\u003d nil {\n\t\t\tbreak\n\t\t}\n\t\tif n \u003c len(escaped) {\n\t\t\terr \u003d fmt.Errorf(\"short write\")\n\t\t\tbreak\n\t\t}\n\t\ttotal++ // (only wrote 1 byte of p)\n\t\tp \u003d p[i+1:]\n\t}\n\treturn\n}\n```\n\nThe string literal could be hoisted out, but I don\u0027t think it should escape.",
      "range": {
        "startLine": 657,
        "startChar": 3,
        "endLine": 657,
        "endChar": 8
      },
      "revId": "55d6d65a8d8627475e622d9beda5dfa9e5bac32c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7fe9d613_36a8d92d",
        "filename": "src/testing/testing.go",
        "patchSetId": 16
      },
      "lineNbr": 657,
      "author": {
        "id": 52633
      },
      "writtenOn": "2024-11-19T23:26:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "60c6b564_62aa1f61",
      "range": {
        "startLine": 657,
        "startChar": 3,
        "endLine": 657,
        "endChar": 8
      },
      "revId": "55d6d65a8d8627475e622d9beda5dfa9e5bac32c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}