{
  "comments": [
    {
      "key": {
        "uuid": "248c35c8_899ef99a",
        "filename": "src/cmd/compile/internal/ssa/gen/PPC64.rules",
        "patchSetId": 1
      },
      "lineNbr": 261,
      "author": {
        "id": 13315
      },
      "writtenOn": "2017-08-29T18:59:14Z",
      "side": 1,
      "message": "Is there any special handling needed for y\u003e64?",
      "revId": "c3b7672e1ea99a12b1819a42c430805b5d0d623f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "675bcc88_0396a8c2",
        "filename": "src/cmd/compile/internal/ssa/gen/PPC64.rules",
        "patchSetId": 1
      },
      "lineNbr": 261,
      "author": {
        "id": 6320
      },
      "writtenOn": "2017-08-29T19:49:34Z",
      "side": 1,
      "message": "No, the ppc64 instructions generated for ROTL and ROTLW get the shift count from bits 58:63 (64 bit) or bits 59:63 (32 bit) of the shift count register.  The golang documentation for these functions in math/bits say the shift counts are either k mod 64 or k mod 32, where k is the shift count so I believe that is equivalent and requires no special handling.\n\nThe tests for the rotates are testing positive and negative shift count values up to 128 and they are all working.",
      "parentUuid": "248c35c8_899ef99a",
      "revId": "c3b7672e1ea99a12b1819a42c430805b5d0d623f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dc495524_f37336ea",
        "filename": "src/cmd/compile/internal/ssa/gen/PPC64Ops.go",
        "patchSetId": 1
      },
      "lineNbr": 188,
      "author": {
        "id": 13315
      },
      "writtenOn": "2017-08-29T18:59:14Z",
      "side": 1,
      "message": "arg1?",
      "range": {
        "startLine": 188,
        "startChar": 81,
        "endLine": 188,
        "endChar": 87
      },
      "revId": "c3b7672e1ea99a12b1819a42c430805b5d0d623f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4d94ba93_5f4a323e",
        "filename": "src/cmd/compile/internal/ssa/gen/PPC64Ops.go",
        "patchSetId": 1
      },
      "lineNbr": 188,
      "author": {
        "id": 6320
      },
      "writtenOn": "2017-08-29T19:49:34Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "dc495524_f37336ea",
      "range": {
        "startLine": 188,
        "startChar": 81,
        "endLine": 188,
        "endChar": 87
      },
      "revId": "c3b7672e1ea99a12b1819a42c430805b5d0d623f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ca085a81_dc931480",
        "filename": "src/cmd/compile/internal/ssa/gen/PPC64Ops.go",
        "patchSetId": 1
      },
      "lineNbr": 189,
      "author": {
        "id": 13315
      },
      "writtenOn": "2017-08-29T18:59:14Z",
      "side": 1,
      "message": "arg1?",
      "range": {
        "startLine": 189,
        "startChar": 89,
        "endLine": 189,
        "endChar": 95
      },
      "revId": "c3b7672e1ea99a12b1819a42c430805b5d0d623f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0e9dad71_5a26ab2d",
        "filename": "src/cmd/compile/internal/ssa/gen/PPC64Ops.go",
        "patchSetId": 1
      },
      "lineNbr": 189,
      "author": {
        "id": 6320
      },
      "writtenOn": "2017-08-29T19:49:34Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "ca085a81_dc931480",
      "range": {
        "startLine": 189,
        "startChar": 89,
        "endLine": 189,
        "endChar": 95
      },
      "revId": "c3b7672e1ea99a12b1819a42c430805b5d0d623f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5176882f_adf70bda",
        "filename": "src/cmd/compile/internal/ssa/gen/genericOps.go",
        "patchSetId": 1
      },
      "lineNbr": 259,
      "author": {
        "id": 7061
      },
      "writtenOn": "2017-08-29T17:59:46Z",
      "side": 1,
      "message": "Wouldn\u0027t mind Keith\u0027s opinion on adding a generic rotate; we have special case code for other architectures to recognize open-coded rotates, we could handle the intrinsic everywhere and also put the rotate-expression-matcher in the generic phase.",
      "range": {
        "startLine": 258,
        "startChar": 1,
        "endLine": 259,
        "endChar": 72
      },
      "revId": "c3b7672e1ea99a12b1819a42c430805b5d0d623f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "90b0c6c2_1852846f",
        "filename": "src/cmd/compile/internal/ssa/gen/genericOps.go",
        "patchSetId": 1
      },
      "lineNbr": 259,
      "author": {
        "id": 5340
      },
      "writtenOn": "2017-08-30T10:12:53Z",
      "side": 1,
      "message": "Does it need to be an intrinsic in the first place? Pattern matching works on all other platforms, and it\u0027s reasonable to expect to work for existing code (while you can\u0027t really expect to pattern-match stuff like popcnt)",
      "parentUuid": "5176882f_adf70bda",
      "range": {
        "startLine": 258,
        "startChar": 1,
        "endLine": 259,
        "endChar": 72
      },
      "revId": "c3b7672e1ea99a12b1819a42c430805b5d0d623f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    }
  ]
}