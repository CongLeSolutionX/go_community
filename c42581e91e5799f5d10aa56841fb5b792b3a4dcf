{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "123dda2f_0f1999d2",
        "filename": "src/runtime/lock_futex.go",
        "patchSetId": 4
      },
      "lineNbr": 81,
      "author": {
        "id": 12120
      },
      "writtenOn": "2024-05-20T16:31:50Z",
      "side": 1,
      "message": "This is OK, but I wonder if it should instead be an `mp.locking` flag similar to `mp.mallocing`.\n\nThis stack split guard protects the specific case we know of causing reentrant lock, but it wouldn\u0027t catch a new case, while an explicit `locking` flag could.",
      "revId": "c42581e91e5799f5d10aa56841fb5b792b3a4dcf",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7f30f304_48a08b90",
        "filename": "src/runtime/lock_futex.go",
        "patchSetId": 4
      },
      "lineNbr": 154,
      "author": {
        "id": 12120
      },
      "writtenOn": "2024-05-20T16:31:50Z",
      "side": 1,
      "message": "Can this ever be false?",
      "revId": "c42581e91e5799f5d10aa56841fb5b792b3a4dcf",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0b3d0652_e0765044",
        "filename": "src/runtime/lock_sema.go",
        "patchSetId": 4
      },
      "lineNbr": 163,
      "author": {
        "id": 12120
      },
      "writtenOn": "2024-05-20T16:31:50Z",
      "side": 1,
      "message": "This doesn\u0027t clear mp.mWaitList.next.prev.\n\nI don\u0027t see any bugs around this (e.g., in removeMutexWaitList), but it seems like an easy mistake to make to follow a prev pointer and end up off the list (and possibly corrupting some other list).\n\nCan we safely clear that here? (I haven\u0027t thought too hard about it)",
      "revId": "c42581e91e5799f5d10aa56841fb5b792b3a4dcf",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}