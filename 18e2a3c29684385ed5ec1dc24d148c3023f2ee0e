{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "0eb64e7c_47c86ab9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-07-25T15:34:03Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003d18e2a3c2\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "18e2a3c29684385ed5ec1dc24d148c3023f2ee0e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d07ed0d0_b6b68c9b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-07-25T15:34:03Z",
      "side": 1,
      "message": "Superseded.",
      "parentUuid": "947d6ee0_ffcf04e6",
      "tag": "autogenerated:trybots~beginning",
      "revId": "18e2a3c29684385ed5ec1dc24d148c3023f2ee0e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8edd3649_c34ed0cf",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-07-25T15:46:12Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "0eb64e7c_47c86ab9",
      "tag": "autogenerated:trybots~happy",
      "revId": "18e2a3c29684385ed5ec1dc24d148c3023f2ee0e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "752ca538_efa17cc0",
        "filename": "src/cmd/compile/internal/types2/stmt.go",
        "patchSetId": 3
      },
      "lineNbr": 661,
      "author": {
        "id": 31647
      },
      "writtenOn": "2023-07-28T15:58:10Z",
      "side": 1,
      "message": "It seems wrong that this is recorded in the syntax, rather than the type-checked package. The type checker should not be mutating syntax nodes, and FWIW the equivalent change in go/ast is definitely not possible.\n\n+gri for discussion.",
      "range": {
        "startLine": 661,
        "startChar": 2,
        "endLine": 661,
        "endChar": 45
      },
      "revId": "18e2a3c29684385ed5ec1dc24d148c3023f2ee0e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7277bbfa_0c638fff",
        "filename": "src/cmd/compile/internal/types2/stmt.go",
        "patchSetId": 3
      },
      "lineNbr": 661,
      "author": {
        "id": 7061
      },
      "writtenOn": "2023-07-28T16:10:10Z",
      "side": 1,
      "message": "I stole this from Russ\u0027s version of the CL, the reason for doing it here is that go:build version information is required to get this right, and apparently this is known here.  Maybe there\u0027s another way to plumb that information?\n\nI may not properly understand the purpose of go/types and go/ast.  Are these sensitive to the semantics of a Go program?  If they are, then it seems like some change is necessary, since there is a version-dependent change in a program\u0027s meaning (in some cases).  Or, knowledge of which version applies could be supplied/obtained in some other way, and the API left unchanged.",
      "parentUuid": "752ca538_efa17cc0",
      "range": {
        "startLine": 661,
        "startChar": 2,
        "endLine": 661,
        "endChar": 45
      },
      "revId": "18e2a3c29684385ed5ec1dc24d148c3023f2ee0e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fc5c0d66_d66768c1",
        "filename": "src/cmd/compile/internal/types2/stmt.go",
        "patchSetId": 3
      },
      "lineNbr": 661,
      "author": {
        "id": 31647
      },
      "writtenOn": "2023-07-28T16:28:23Z",
      "side": 1,
      "message": "go/types can\u0027t mutate the ast (it is read concurrently may other places), so it records syntactic information externally, in types.Info.\n\nThe type checker must produce information necessary to correctly implement the semantics of the language (which means that it is sensitive to the semantics). I think perhaps the type checker should instead record the effective Go version for each file, rather than assigning a particular interpretation of that go version to each for loop. Does that make sense? I think this requires some careful thought about how it will be used in the future. If we don\u0027t anticipate many more of these changes, perhaps we leave it up to the caller of go/types to figure out this information.",
      "parentUuid": "7277bbfa_0c638fff",
      "range": {
        "startLine": 661,
        "startChar": 2,
        "endLine": 661,
        "endChar": 45
      },
      "revId": "18e2a3c29684385ed5ec1dc24d148c3023f2ee0e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}