{
  "comments": [
    {
      "key": {
        "uuid": "6c29f99f_3afccd4b",
        "filename": "src/cmd/compile/internal/arm64/ssa.go",
        "patchSetId": 4
      },
      "lineNbr": 569,
      "author": {
        "id": 13315
      },
      "writtenOn": "2018-02-06T22:26:27Z",
      "side": 1,
      "message": "Not necessarily in this CL, I think we should consider pulling those instruction encoding stuff to helper functions, probably in cmd/internal/obj/arm64. So the code can be shared with the compiler and the assembler.",
      "revId": "a908998a4cd91414285dd99a556f1df7124657c5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c6dfaa7c_1b38f78d",
        "filename": "src/cmd/compile/internal/arm64/ssa.go",
        "patchSetId": 4
      },
      "lineNbr": 569,
      "author": {
        "id": 25702
      },
      "writtenOn": "2018-02-07T17:04:06Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "6c29f99f_3afccd4b",
      "revId": "a908998a4cd91414285dd99a556f1df7124657c5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6a8dec3c_92078c2b",
        "filename": "src/cmd/compile/internal/gc/asm_test.go",
        "patchSetId": 4
      },
      "lineNbr": 2702,
      "author": {
        "id": 13315
      },
      "writtenOn": "2018-02-06T22:26:27Z",
      "side": 1,
      "message": "I think we\u0027ve decided to use \"$\" as the function name in this file, so it is automatically numbered.",
      "range": {
        "startLine": 2702,
        "startChar": 7,
        "endLine": 2702,
        "endChar": 11
      },
      "revId": "a908998a4cd91414285dd99a556f1df7124657c5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9664f76a_c1ee2665",
        "filename": "src/cmd/compile/internal/gc/asm_test.go",
        "patchSetId": 4
      },
      "lineNbr": 2702,
      "author": {
        "id": 25702
      },
      "writtenOn": "2018-02-07T17:04:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6a8dec3c_92078c2b",
      "range": {
        "startLine": 2702,
        "startChar": 7,
        "endLine": 2702,
        "endChar": 11
      },
      "revId": "a908998a4cd91414285dd99a556f1df7124657c5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "188b3ea8_67360a9e",
        "filename": "src/cmd/compile/internal/ssa/gen/ARM64.rules",
        "patchSetId": 4
      },
      "lineNbr": 91,
      "author": {
        "id": 13315
      },
      "writtenOn": "2018-02-06T22:26:27Z",
      "side": 1,
      "message": "I think this should be Float64. All 64 bits in the register matter here.",
      "range": {
        "startLine": 91,
        "startChar": 71,
        "endLine": 91,
        "endChar": 78
      },
      "revId": "a908998a4cd91414285dd99a556f1df7124657c5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "20141807_96944482",
        "filename": "src/cmd/compile/internal/ssa/gen/ARM64.rules",
        "patchSetId": 4
      },
      "lineNbr": 91,
      "author": {
        "id": 25702
      },
      "writtenOn": "2018-02-07T17:04:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "188b3ea8_67360a9e",
      "range": {
        "startLine": 91,
        "startChar": 71,
        "endLine": 91,
        "endChar": 78
      },
      "revId": "a908998a4cd91414285dd99a556f1df7124657c5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c674fd87_2192a156",
        "filename": "src/cmd/compile/internal/ssa/gen/ARM64.rules",
        "patchSetId": 4
      },
      "lineNbr": 94,
      "author": {
        "id": 13315
      },
      "writtenOn": "2018-02-06T22:26:27Z",
      "side": 1,
      "message": "Should this be \u003ct\u003e?\nAlso, for float32, shouldn\u0027t we use FMOVS instead of FMOVD?",
      "range": {
        "startLine": 94,
        "startChar": 73,
        "endLine": 94,
        "endChar": 86
      },
      "revId": "a908998a4cd91414285dd99a556f1df7124657c5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9aff1431_f5cbfb34",
        "filename": "src/cmd/compile/internal/ssa/gen/ARM64.rules",
        "patchSetId": 4
      },
      "lineNbr": 94,
      "author": {
        "id": 25702
      },
      "writtenOn": "2018-02-07T17:04:06Z",
      "side": 1,
      "message": "\u003ct\u003e would be signed 32-bit int so this will result a MOVD instead of a FMOVD.",
      "parentUuid": "c674fd87_2192a156",
      "range": {
        "startLine": 94,
        "startChar": 73,
        "endLine": 94,
        "endChar": 86
      },
      "revId": "a908998a4cd91414285dd99a556f1df7124657c5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fd4cdc65_90024cca",
        "filename": "src/cmd/compile/internal/ssa/gen/ARM64.rules",
        "patchSetId": 4
      },
      "lineNbr": 94,
      "author": {
        "id": 13315
      },
      "writtenOn": "2018-02-07T21:31:35Z",
      "side": 1,
      "message": "FMOVDgpfp should have a float type, so \u003ct\u003e should be a float type. The rules above, like the one in line 89, should use (FMOVDgpfp \u003ctyp.Float64\u003e x).\n\nAlso, I think it should be FMOVS for 32-bit type.",
      "parentUuid": "9aff1431_f5cbfb34",
      "range": {
        "startLine": 94,
        "startChar": 73,
        "endLine": 94,
        "endChar": 86
      },
      "revId": "a908998a4cd91414285dd99a556f1df7124657c5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6a8e12e7_d6227ef2",
        "filename": "src/cmd/compile/internal/ssa/gen/ARM64.rules",
        "patchSetId": 4
      },
      "lineNbr": 94,
      "author": {
        "id": 25702
      },
      "writtenOn": "2018-02-08T16:58:42Z",
      "side": 1,
      "message": "Did you get a chance to look at patchset5, I think I changed it to FMOVS.",
      "parentUuid": "fd4cdc65_90024cca",
      "range": {
        "startLine": 94,
        "startChar": 73,
        "endLine": 94,
        "endChar": 86
      },
      "revId": "a908998a4cd91414285dd99a556f1df7124657c5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0587fc86_0e2e5ce0",
        "filename": "src/cmd/compile/internal/ssa/gen/ARM64.rules",
        "patchSetId": 4
      },
      "lineNbr": 94,
      "author": {
        "id": 13315
      },
      "writtenOn": "2018-02-08T19:27:29Z",
      "side": 1,
      "message": "I did read PS 5, and on line 94 it still reads\n(FMOVDgpfp \u003ct\u003e (Arg [off] {sym})) \u0026\u0026 is32BitInt(t) -\u003e @b.Func.Entry (Arg \u003ctyp.Float32\u003e [off] {sym})",
      "parentUuid": "6a8e12e7_d6227ef2",
      "range": {
        "startLine": 94,
        "startChar": 73,
        "endLine": 94,
        "endChar": 86
      },
      "revId": "a908998a4cd91414285dd99a556f1df7124657c5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c14e9322_1b750f66",
        "filename": "src/cmd/compile/internal/ssa/gen/ARM64Ops.go",
        "patchSetId": 4
      },
      "lineNbr": 213,
      "author": {
        "id": 13315
      },
      "writtenOn": "2018-02-06T22:26:27Z",
      "side": 1,
      "message": "Is this true? If I read the instruction manual correctly, it only says zero-extended to 2 times element size, which is 16-bit here. It doesn\u0027t seem to say anything about the high bits. Does it guarantee to zero them?",
      "range": {
        "startLine": 213,
        "startChar": 112,
        "endLine": 213,
        "endChar": 135
      },
      "revId": "a908998a4cd91414285dd99a556f1df7124657c5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f172a4ce_0f9cf846",
        "filename": "src/cmd/compile/internal/ssa/gen/ARM64Ops.go",
        "patchSetId": 4
      },
      "lineNbr": 213,
      "author": {
        "id": 25702
      },
      "writtenOn": "2018-02-07T17:04:06Z",
      "side": 1,
      "message": "I think you are right the manual doesn\u0027t say anything about the hight bits so they are undefined. What is your motivation? Does this make one of the rules to generate code incorrect?",
      "parentUuid": "c14e9322_1b750f66",
      "range": {
        "startLine": 213,
        "startChar": 112,
        "endLine": 213,
        "endChar": 135
      },
      "revId": "a908998a4cd91414285dd99a556f1df7124657c5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9950b624_6b142807",
        "filename": "src/cmd/compile/internal/ssa/gen/ARM64Ops.go",
        "patchSetId": 4
      },
      "lineNbr": 213,
      "author": {
        "id": 13315
      },
      "writtenOn": "2018-02-07T21:31:35Z",
      "side": 1,
      "message": "The result of PopCount is 64-bit. If this leaves high bits undefined, the result may be not correct. We will need to do a zero-extension from 16-bit to 64-bit somewhere (either in V register or in GP register).",
      "parentUuid": "f172a4ce_0f9cf846",
      "range": {
        "startLine": 213,
        "startChar": 112,
        "endLine": 213,
        "endChar": 135
      },
      "revId": "a908998a4cd91414285dd99a556f1df7124657c5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5aa555bd_103c447b",
        "filename": "src/cmd/compile/internal/ssa/gen/ARM64Ops.go",
        "patchSetId": 4
      },
      "lineNbr": 213,
      "author": {
        "id": 25702
      },
      "writtenOn": "2018-02-08T16:58:42Z",
      "side": 1,
      "message": "I was using LLVM generated code for reference and this is what LLVM is generating for popcnt intrinsic:\n$ cat test.ll\n; RUN: llc \u003c %s -mtriple\u003daarch64-eabi\ndefine i64 @cnt64_advsimd(i64 %x) nounwind readnone {\n  %cnt \u003d tail call i64 @llvm.ctpop.i64(i64 %x)\n  ret i64 %cnt\n}\ndeclare i64 @llvm.ctpop.i64(i64) nounwind readnone\noutput:\n        fmov    d0, x0\n        cnt     v0.8b, v0.8b\n        uaddlv  h0, v0.8b\n        fmov    w0, s0\n        ret\n\nand this is what patchset5 generates for OnesCount64 test:\nMOVD 8(RSP), F0\nVCNT V0.B8, V0.B8\nUADDLV V0.B8, F0\nMOVD F0, 16(RSP)\nRET\n\nIs your suggestion to generate the code below?\nMOVD 8(RSP), F0\nVCNT V0.B8, V0.B8\nUADDLV V0.B8, F0\nFMOVS F0, R0\nMOVD R0, 16(RSP)\nRET",
      "parentUuid": "9950b624_6b142807",
      "range": {
        "startLine": 213,
        "startChar": 112,
        "endLine": 213,
        "endChar": 135
      },
      "revId": "a908998a4cd91414285dd99a556f1df7124657c5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "698bb8e0_d2549157",
        "filename": "src/cmd/compile/internal/ssa/gen/ARM64Ops.go",
        "patchSetId": 4
      },
      "lineNbr": 213,
      "author": {
        "id": 25768
      },
      "writtenOn": "2018-02-08T17:11:04Z",
      "side": 1,
      "message": "FWIW, I think the answer to your original question is, yes it does always zero the high-order bits:\n\n9.15 Advanced SIMD scalars\n...\nIn A64 Advanced SIMD scalar instructions, you refer to registers using a name that indicates the number\nof significant bits. The names are Bn, Hn, Sn, or Dn, where n is the register number (0-31). The unused\nhigh bits are ignored on a read and set to zero on a write.",
      "parentUuid": "5aa555bd_103c447b",
      "range": {
        "startLine": 213,
        "startChar": 112,
        "endLine": 213,
        "endChar": 135
      },
      "revId": "a908998a4cd91414285dd99a556f1df7124657c5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0e42a679_dc835d5c",
        "filename": "src/cmd/compile/internal/ssa/gen/ARM64Ops.go",
        "patchSetId": 4
      },
      "lineNbr": 213,
      "author": {
        "id": 13315
      },
      "writtenOn": "2018-02-08T19:27:29Z",
      "side": 1,
      "message": "Ok, this clarifies. Thanks, Geoff.",
      "parentUuid": "698bb8e0_d2549157",
      "range": {
        "startLine": 213,
        "startChar": 112,
        "endLine": 213,
        "endChar": 135
      },
      "revId": "a908998a4cd91414285dd99a556f1df7124657c5",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    }
  ]
}