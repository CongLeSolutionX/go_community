{
  "comments": [
    {
      "key": {
        "uuid": "b3116271_3c855e4b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 18,
      "author": {
        "id": 5440
      },
      "writtenOn": "2019-03-22T22:50:01Z",
      "side": 1,
      "message": "Do you mean that make.bash take 150% as long as before? That seems very high.\n\nIt would be useful if you could include compilebench stat for the CL; see \"Example\" at https://godoc.org/golang.org/x/tools/cmd/compilebench",
      "revId": "c3b7be960eec945ad2dcbe90ed0a7823c50065c8",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c412baa1_c7339525",
        "filename": "src/cmd/compile/internal/gc/sinit.go",
        "patchSetId": 2
      },
      "lineNbr": 37,
      "author": {
        "id": 5440
      },
      "writtenOn": "2019-03-22T22:50:01Z",
      "side": 1,
      "message": "out, wanted, and deps appear to always go together. What about something like:\n\n    type InitState struct {\n        out    []*Node\n        wanted NodeSet\n        deps   Deps\n    }\n\n    func (s *InitState) init1(n, prev *Node) { ... }",
      "range": {
        "startLine": 37,
        "startChar": 20,
        "endLine": 37,
        "endChar": 73
      },
      "revId": "c3b7be960eec945ad2dcbe90ed0a7823c50065c8",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f5884edc_c9484df8",
        "filename": "src/cmd/compile/internal/gc/sinit.go",
        "patchSetId": 2
      },
      "lineNbr": 258,
      "author": {
        "id": 25242
      },
      "writtenOn": "2019-01-06T13:26:44Z",
      "side": 1,
      "message": "I guess I should comment these if I\u0027m going to comment the methods of Deps. Also I never looked at this CL in godoc, I prolly could/should do that.",
      "revId": "c3b7be960eec945ad2dcbe90ed0a7823c50065c8",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f733c36f_5eb8ddd7",
        "filename": "src/cmd/compile/internal/gc/sinit.go",
        "patchSetId": 2
      },
      "lineNbr": 258,
      "author": {
        "id": 5440
      },
      "writtenOn": "2019-03-22T22:50:01Z",
      "side": 1,
      "message": "nit: I\u0027d name the nodes \"n\" instead of \"defn\". NodeSet seems generalizable to any Nodes, not just definition nodes.\n\nIt would also be worth considering moving NodeSet to syntax.go.",
      "revId": "c3b7be960eec945ad2dcbe90ed0a7823c50065c8",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "276ed439_81b478e0",
        "filename": "src/cmd/compile/internal/gc/sinit.go",
        "patchSetId": 2
      },
      "lineNbr": 300,
      "author": {
        "id": 5440
      },
      "writtenOn": "2019-03-22T22:50:01Z",
      "side": 1,
      "message": "nit: Just \"remove\" would be simpler.",
      "range": {
        "startLine": 300,
        "startChar": 15,
        "endLine": 300,
        "endChar": 22
      },
      "revId": "c3b7be960eec945ad2dcbe90ed0a7823c50065c8",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7489b374_0e096f7b",
        "filename": "src/cmd/compile/internal/gc/sinit.go",
        "patchSetId": 2
      },
      "lineNbr": 301,
      "author": {
        "id": 5440
      },
      "writtenOn": "2019-03-22T22:50:01Z",
      "side": 1,
      "message": "nit: You can write just \"for a :\u003d range ...\".",
      "revId": "c3b7be960eec945ad2dcbe90ed0a7823c50065c8",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1b0efc89_b3a5a201",
        "filename": "src/cmd/compile/internal/gc/sinit.go",
        "patchSetId": 2
      },
      "lineNbr": 302,
      "author": {
        "id": 5440
      },
      "writtenOn": "2019-03-22T22:50:01Z",
      "side": 1,
      "message": "How does this happen?",
      "revId": "c3b7be960eec945ad2dcbe90ed0a7823c50065c8",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0c09ddbd_cbd6c01d",
        "filename": "src/cmd/compile/internal/gc/sinit.go",
        "patchSetId": 2
      },
      "lineNbr": 334,
      "author": {
        "id": 5440
      },
      "writtenOn": "2019-03-22T22:50:01Z",
      "side": 1,
      "message": "Why? Seems like there should be a better solution here.\n\nIt\u0027s worrying that here and below (L422) you seem to be relying on fixed bounds on the amount of work done. I wouldn\u0027t think either of these are necessary for topologically sorting a dependency graph.",
      "revId": "c3b7be960eec945ad2dcbe90ed0a7823c50065c8",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "12d2130e_0e001db3",
        "filename": "src/cmd/compile/internal/gc/sinit.go",
        "patchSetId": 2
      },
      "lineNbr": 361,
      "author": {
        "id": 25242
      },
      "writtenOn": "2019-01-06T13:26:44Z",
      "side": 1,
      "message": "Derp: \"defn _is_ ready\"",
      "revId": "c3b7be960eec945ad2dcbe90ed0a7823c50065c8",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aedc0d0e_01c48ded",
        "filename": "src/cmd/compile/internal/gc/sinit.go",
        "patchSetId": 2
      },
      "lineNbr": 387,
      "author": {
        "id": 25242
      },
      "writtenOn": "2019-01-06T13:26:44Z",
      "side": 1,
      "message": "Should probably inline this vs. a separate function.",
      "revId": "c3b7be960eec945ad2dcbe90ed0a7823c50065c8",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d92b231f_225acb50",
        "filename": "src/cmd/compile/internal/gc/sinit.go",
        "patchSetId": 2
      },
      "lineNbr": 400,
      "author": {
        "id": 5440
      },
      "writtenOn": "2019-03-22T22:50:01Z",
      "side": 1,
      "message": "nit:\n\n    var wanted NodeSet\n    deps :\u003d Deps{\n        ...\n    }\n\nWe generally only use \"var name \u003d val\" at package scope where \":\u003d\" isn\u0027t allowed.",
      "revId": "c3b7be960eec945ad2dcbe90ed0a7823c50065c8",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b3fa3d9f_cae8ce74",
        "filename": "src/cmd/compile/internal/gc/sinit.go",
        "patchSetId": 2
      },
      "lineNbr": 412,
      "author": {
        "id": 5440
      },
      "writtenOn": "2019-03-22T22:50:01Z",
      "side": 1,
      "message": "Please try to keep comments technical and informative. Growing up in Texas, I appreciate the folksiness of \"big ol\u0027 ball of wax,\" but this doesn\u0027t explain what\u0027s wrong with the existing order, and it\u0027s potentially confusing to non-native English speakers who might read this later and don\u0027t recognize this as tongue in cheek.",
      "range": {
        "startLine": 411,
        "startChar": 48,
        "endLine": 412,
        "endChar": 40
      },
      "revId": "c3b7be960eec945ad2dcbe90ed0a7823c50065c8",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "841920c5_c2842f83",
        "filename": "src/cmd/compile/internal/gc/sinit.go",
        "patchSetId": 2
      },
      "lineNbr": 417,
      "author": {
        "id": 25242
      },
      "writtenOn": "2019-01-06T13:26:44Z",
      "side": 1,
      "message": "outset might be a clearer name?",
      "revId": "c3b7be960eec945ad2dcbe90ed0a7823c50065c8",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9374a45e_2721dadb",
        "filename": "src/cmd/compile/internal/gc/sinit.go",
        "patchSetId": 2
      },
      "lineNbr": 422,
      "author": {
        "id": 5440
      },
      "writtenOn": "2019-03-22T22:50:01Z",
      "side": 1,
      "message": "\"^\" in Go is the exclusive-or operator, so 2^32 \u003d 34. Did you mean this?",
      "range": {
        "startLine": 422,
        "startChar": 17,
        "endLine": 422,
        "endChar": 21
      },
      "revId": "c3b7be960eec945ad2dcbe90ed0a7823c50065c8",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "65476d9a_8baa8b3d",
        "filename": "src/cmd/compile/internal/gc/sinit.go",
        "patchSetId": 2
      },
      "lineNbr": 425,
      "author": {
        "id": 5440
      },
      "writtenOn": "2019-03-22T22:50:01Z",
      "side": 1,
      "message": "nit: We idiomatically use Go\u0027s \"++\" and \"--\" operators instead of \"+\u003d 1\" and \"-\u003d 1\", respectively.",
      "revId": "c3b7be960eec945ad2dcbe90ed0a7823c50065c8",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b6777876_d5563190",
        "filename": "src/cmd/compile/internal/gc/sinit.go",
        "patchSetId": 2
      },
      "lineNbr": 443,
      "author": {
        "id": 25242
      },
      "writtenOn": "2019-01-06T13:26:44Z",
      "side": 1,
      "message": "I\u0027ve convinced TryBot (at least) that this strategy works, batching dynamic(?) and static assignments. *Why* does it work? That\u0027d be good to understand and perhaps state.",
      "revId": "c3b7be960eec945ad2dcbe90ed0a7823c50065c8",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    }
  ]
}