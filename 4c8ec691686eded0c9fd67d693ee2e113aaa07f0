{
  "comments": [
    {
      "key": {
        "uuid": "260502c1_ec45c23a",
        "filename": "src/net/url/url.go",
        "patchSetId": 1
      },
      "lineNbr": 1116,
      "author": {
        "id": 5065
      },
      "writtenOn": "2018-03-07T16:56:07Z",
      "side": 1,
      "message": "I think this might be too strict. I imagine we\u0027ll want to continue accepting UTF-8 characters as we did before, and spaces.\n\nFor example, you can copy/paste this into your URL bar, but this function would reject it:\n\n   https://www.google.com/search?q\u003dФотки собак\u0026source\u003dlnms\n\nAnd I think it\u0027s valid in an \u003ca href\u003d\"...\"\u003e attribute too, so users will likely encounter such values.\n\nAnd net/http converts it to %xx encoded upon sending, I thought.\n\nI\u0027d leave a comment about how, for historical purposes, we accept more than Section 3.4 permits, and only strip out invalid ASCII (CTLs, newlines, tab), but accept space.",
      "revId": "4c8ec691686eded0c9fd67d693ee2e113aaa07f0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ccd6d5aa_1a0bba6a",
        "filename": "src/net/url/url.go",
        "patchSetId": 1
      },
      "lineNbr": 1116,
      "author": {
        "id": 26847
      },
      "writtenOn": "2018-03-07T19:35:40Z",
      "side": 1,
      "message": "Yes, you can put \"?q\u003dФотки собак\u0026source\u003dlnms\" into the address bar of a browser, but the query string sent to the server then is \"q\u003d%D0%A4%D0%BE%D1%82%D0%BA%D0%B8%20%D1%81%D0%BE%D0%B1%D0%B0%D0%BA\u0026source\u003dlnms\" (tested with Chrome and Firefox). In other words, browsers accept it, but it\u0027s not a valid query string. Dito for \u003ca href\u003d\"…\"\u003e.\n\n\"net/http\".Get() (and friends) use \"net/url\".URL.RequestURI(), which uses \"net/url\".URL.RawQuery verbatim, since it\u0027s supposed to contain the URL encoded query string.\n\nA solution that would satisfy both, browser-like behavior of \"net/url\".Parse() and the documented semantics of \"net/url\".URL.RawQuery, could look like this:\n\n  * validate the caller-provided query string \"q\" with validQuery(q):\n    - If q is a valid query string: assign it to RawQuery.\n    - Else: assign RawQuery \u003d QueryEscape(q)\n\nDoes that sound better to you?\n\n(IMHO the best solution would have been to store the *unescaped* query string in URL and encode the query string in URI.RequestURI() and URI.String(), but I\u0027m afraid that that ship has long sailed.)",
      "parentUuid": "260502c1_ec45c23a",
      "revId": "4c8ec691686eded0c9fd67d693ee2e113aaa07f0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3cad1530_cfd4a6e0",
        "filename": "src/net/url/url.go",
        "patchSetId": 1
      },
      "lineNbr": 1116,
      "author": {
        "id": 5065
      },
      "writtenOn": "2018-03-19T13:58:15Z",
      "side": 1,
      "message": "My main concern is I don\u0027t want to break existing user code that uses net/url.\n\nI\u0027d prefer this CL just do the minimum necessary to break injection attacks. Every time we modify net/url we break people and it\u0027s painful, so rather than doing some in-an-ideal-world cleanup now, I\u0027d like to just reject things that are obviously bogus, rather than do anything that requires changing API or documentation.\n\nAs one extreme example: can we just block \\n and \\r? Or all ASCII bytes under 0x20?",
      "parentUuid": "ccd6d5aa_1a0bba6a",
      "revId": "4c8ec691686eded0c9fd67d693ee2e113aaa07f0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cf61888d_09dc6d29",
        "filename": "src/net/url/url.go",
        "patchSetId": 1
      },
      "lineNbr": 1116,
      "author": {
        "id": 26847
      },
      "writtenOn": "2018-04-06T06:54:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3cad1530_cfd4a6e0",
      "revId": "4c8ec691686eded0c9fd67d693ee2e113aaa07f0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d49cd9d2_e8245125",
        "filename": "src/net/url/url.go",
        "patchSetId": 1
      },
      "lineNbr": 1136,
      "author": {
        "id": 5065
      },
      "writtenOn": "2018-03-07T16:56:47Z",
      "side": 1,
      "message": "I\u0027d rather this part be done with a new separate pass that doesn\u0027t allocate.",
      "revId": "4c8ec691686eded0c9fd67d693ee2e113aaa07f0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1b8b5bf3_c423c531",
        "filename": "src/net/url/url.go",
        "patchSetId": 1
      },
      "lineNbr": 1136,
      "author": {
        "id": 26847
      },
      "writtenOn": "2018-03-07T19:35:40Z",
      "side": 1,
      "message": "Just to verify that understand correctly: instead of calling unescape(), iterate over the string and ensure that each \u0027%\u0027 is followed by two hex digits. Do this to avoid the allocation in unescape(). Correct?",
      "parentUuid": "d49cd9d2_e8245125",
      "revId": "4c8ec691686eded0c9fd67d693ee2e113aaa07f0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d26ef4a6_05080a5a",
        "filename": "src/net/url/url.go",
        "patchSetId": 1
      },
      "lineNbr": 1136,
      "author": {
        "id": 5065
      },
      "writtenOn": "2018-03-19T13:58:15Z",
      "side": 1,
      "message": "Yes.",
      "parentUuid": "1b8b5bf3_c423c531",
      "revId": "4c8ec691686eded0c9fd67d693ee2e113aaa07f0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "67e98992_6ad66ffe",
        "filename": "src/net/url/url.go",
        "patchSetId": 1
      },
      "lineNbr": 1136,
      "author": {
        "id": 26847
      },
      "writtenOn": "2018-04-06T06:54:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d26ef4a6_05080a5a",
      "revId": "4c8ec691686eded0c9fd67d693ee2e113aaa07f0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}