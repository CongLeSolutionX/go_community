{
  "comments": [
    {
      "key": {
        "uuid": "94b9dc60_344b17fc",
        "filename": "src/cmd/go/internal/mvs/mvs.go",
        "patchSetId": 3
      },
      "lineNbr": 129,
      "author": {
        "id": 6365
      },
      "writtenOn": "2020-05-19T02:37:14Z",
      "side": 1,
      "message": "This sentence seems a little misleading. Since the Reqs interface requires that “Max(target, v) must be target”, no “higher version” is possible, and thus no higher version will be visited.",
      "range": {
        "startLine": 128,
        "startChar": 18,
        "endLine": 129,
        "endChar": 48
      },
      "revId": "7ef44e7fa97793d7d5a115223dcd3613f94f2396",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6ba9169e_3026e82c",
        "filename": "src/cmd/go/internal/mvs/mvs.go",
        "patchSetId": 3
      },
      "lineNbr": 129,
      "author": {
        "id": 17092
      },
      "writtenOn": "2020-05-20T17:06:02Z",
      "side": 1,
      "message": "How\u0027s this?\n\nreqs.Max requires target.Version to compare higher than all\nother versions, so no other version can be selected.",
      "parentUuid": "94b9dc60_344b17fc",
      "range": {
        "startLine": 128,
        "startChar": 18,
        "endLine": 129,
        "endChar": 48
      },
      "revId": "7ef44e7fa97793d7d5a115223dcd3613f94f2396",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b2656139_b39f38a3",
        "filename": "src/cmd/go/internal/mvs/mvs.go",
        "patchSetId": 3
      },
      "lineNbr": 132,
      "author": {
        "id": 5010
      },
      "writtenOn": "2020-05-20T00:53:58Z",
      "side": 1,
      "message": "This comment still doesn\u0027t say anything about the empty version string? What am I missing?",
      "revId": "7ef44e7fa97793d7d5a115223dcd3613f94f2396",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3430a712_c1c67be4",
        "filename": "src/cmd/go/internal/mvs/mvs.go",
        "patchSetId": 3
      },
      "lineNbr": 132,
      "author": {
        "id": 6365
      },
      "writtenOn": "2020-05-20T01:43:20Z",
      "side": 1,
      "message": "The special handling for the empty string is specific to the modload implementation of mvs.Reqs — nothing in the `mvs` package should know or care about it as a distinguished value.\n\n(Ideally \"none\" should behave the same way, but I think that would take a little bit of refactoring.)\n\nMVS requires that the versions of each module form a totally-ordered set. It currently requires the least element to be \"none\", and requires the greatest element of the set for the target path to be the target version, but it does not care how that greatest element is encoded as a string.",
      "parentUuid": "b2656139_b39f38a3",
      "revId": "7ef44e7fa97793d7d5a115223dcd3613f94f2396",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "40ad70fd_4b1c78ce",
        "filename": "src/cmd/go/internal/mvs/mvs.go",
        "patchSetId": 3
      },
      "lineNbr": 132,
      "author": {
        "id": 17092
      },
      "writtenOn": "2020-05-20T17:06:02Z",
      "side": 1,
      "message": "I think the goal of this package is to keep the MVS graph algorithm separate from the Go-specific details specified through the modload.mvsReqs implementation of Reqs.\n\nThe empty version string is a Go-specific detail. It could have been \"__target_version__\" or anything else.\n\nWe should say here that BuildList won\u0027t pick a different version of target because reqs.Max(target.Version, v) must return target.Version for all v.",
      "parentUuid": "3430a712_c1c67be4",
      "revId": "7ef44e7fa97793d7d5a115223dcd3613f94f2396",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}