{
  "comments": [
    {
      "key": {
        "uuid": "080c8ae0_6d4a3498",
        "filename": "src/cmd/compile/internal/ssa/gen/generic.rules",
        "patchSetId": 1
      },
      "lineNbr": 94,
      "author": {
        "id": 5200
      },
      "writtenOn": "2020-02-28T22:41:06Z",
      "side": 1,
      "message": "How does this ever happen? It doesn\u0027t typecheck in my brain.\nI\u0027ve been trying to keep at least the machine-independent rules type correct. ZeroExt8to16 should only take an int8 or uint8.",
      "revId": "26f38e9c5d68dac9469ff111efcf581d368cce13",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "421a12c9_0c7d8132",
        "filename": "src/cmd/compile/internal/ssa/gen/generic.rules",
        "patchSetId": 1
      },
      "lineNbr": 94,
      "author": {
        "id": 5143
      },
      "writtenOn": "2020-02-28T22:44:54Z",
      "side": 1,
      "message": "The phiopt pass, I believe. Maybe the types generated by phiopt are wrong?",
      "parentUuid": "080c8ae0_6d4a3498",
      "revId": "26f38e9c5d68dac9469ff111efcf581d368cce13",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e24375c8_c15c0094",
        "filename": "src/cmd/compile/internal/ssa/gen/generic.rules",
        "patchSetId": 1
      },
      "lineNbr": 94,
      "author": {
        "id": 5143
      },
      "writtenOn": "2020-02-28T22:58:12Z",
      "side": 1,
      "message": "Yeah, phioptint explicitly produces output of the form (ZeroExt8toNN boolval). It\u0027s not clear to me how to fix this...in many ways, the whole point of phioptint is that type punning. Suggestions?",
      "parentUuid": "421a12c9_0c7d8132",
      "revId": "26f38e9c5d68dac9469ff111efcf581d368cce13",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ff48f498_2acce7b7",
        "filename": "src/cmd/compile/internal/ssa/gen/generic.rules",
        "patchSetId": 1
      },
      "lineNbr": 94,
      "author": {
        "id": 5143
      },
      "writtenOn": "2020-02-28T23:14:13Z",
      "side": 1,
      "message": "one possibility is to add a convert-bool-to-byte op, and then lower it into a no-op",
      "parentUuid": "e24375c8_c15c0094",
      "revId": "26f38e9c5d68dac9469ff111efcf581d368cce13",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "477333e8_1fe8d7a6",
        "filename": "src/cmd/compile/internal/ssa/gen/generic.rules",
        "patchSetId": 1
      },
      "lineNbr": 94,
      "author": {
        "id": 5200
      },
      "writtenOn": "2020-02-28T23:17:04Z",
      "side": 1,
      "message": "I like that last solution the best.\n(We do that a lot already, e.g. the Trunc* ops are all no-ops after lowering.)",
      "parentUuid": "ff48f498_2acce7b7",
      "revId": "26f38e9c5d68dac9469ff111efcf581d368cce13",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "db81a242_98a9edd4",
        "filename": "src/cmd/compile/internal/ssa/gen/generic.rules",
        "patchSetId": 1
      },
      "lineNbr": 94,
      "author": {
        "id": 5143
      },
      "writtenOn": "2020-02-29T15:18:55Z",
      "side": 1,
      "message": "Done, in CL 221607.",
      "parentUuid": "477333e8_1fe8d7a6",
      "revId": "26f38e9c5d68dac9469ff111efcf581d368cce13",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}