{
  "comments": [
    {
      "key": {
        "uuid": "702a0062_fcc8f10d",
        "filename": "src/cmd/compile/internal/ssa/prove.go",
        "patchSetId": 3
      },
      "lineNbr": 478,
      "author": {
        "id": 7061
      },
      "writtenOn": "2016-11-28T15:02:29Z",
      "side": 1,
      "message": "How sure are we that there\u0027s only one, and do we care?\nI\u0027m thinking about the case where slicelen(a) in B1 and slicelen(a) in B2,\nand neither dominates; do we ensure that this will CSE to a single expression.\nI recall that we now intend to, but initially did not.\n\nWe might want to document that assumption and how much we care.\n\nRelated, we might want to devise some tests of this that aren\u0027t straight-line code.",
      "range": {
        "startLine": 478,
        "startChar": 4,
        "endLine": 478,
        "endChar": 29
      },
      "revId": "59d4210e9c901cfcde201da6dba5f5ddb417ac58",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8d8afbd9_c7b1f22a",
        "filename": "src/cmd/compile/internal/ssa/prove.go",
        "patchSetId": 3
      },
      "lineNbr": 478,
      "author": {
        "id": 5200
      },
      "writtenOn": "2016-11-28T15:48:45Z",
      "side": 1,
      "message": "It\u0027s certainly possible that there is more than one len or cap still around.  I could keep a slice if it mattered (which I don\u0027t think it does in typical cases).  I\u0027ll leave a TODO.",
      "parentUuid": "702a0062_fcc8f10d",
      "revId": "59d4210e9c901cfcde201da6dba5f5ddb417ac58",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "702a0062_bcce7918",
        "filename": "src/cmd/compile/internal/ssa/prove.go",
        "patchSetId": 3
      },
      "lineNbr": 600,
      "author": {
        "id": 7061
      },
      "writtenOn": "2016-11-28T15:02:29Z",
      "side": 1,
      "message": "Are we better off just keeping the first fact we found, rather than recording a clear contradiction? This happens for actually-unreachable code, we\u0027ve had at least one report on funny diagnostics because of this.\n\nAnd either way, we might want to mention what\u0027s up, so the next person to stumble through here doesn\u0027t have a few minutes of puzzlement before going \"oh yeah, unreachable code can derive contradictions\".",
      "range": {
        "startLine": 600,
        "startChar": 27,
        "endLine": 600,
        "endChar": 36
      },
      "revId": "59d4210e9c901cfcde201da6dba5f5ddb417ac58",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8d8afbd9_8711aa3d",
        "filename": "src/cmd/compile/internal/ssa/prove.go",
        "patchSetId": 3
      },
      "lineNbr": 600,
      "author": {
        "id": 5200
      },
      "writtenOn": "2016-11-28T15:48:45Z",
      "side": 1,
      "message": "I\u0027m not sure how this comment applies to \"r\u0026lt \u003d\u003d 0\".  That\u0027s there just because if we start with e.g. \"len(s) \u003c\u003d x\", we can\u0027t derive anything about the relation between cap(s) and x.  There is no contradiction involved.\n\nIf this is a more generically-targeted comment, then I can see what you mean.  But I\u0027m not sure this CL particularly aggravates the situation.  We\u0027re adding facts that the programmer could add himself with explicit code.\nI guess we should either ensure that we never record a contradiction, or make sure that we handle contradictions gracefully.  I guess I prefer the latter but I don\u0027t have a strong opinion.",
      "parentUuid": "702a0062_bcce7918",
      "revId": "59d4210e9c901cfcde201da6dba5f5ddb417ac58",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}