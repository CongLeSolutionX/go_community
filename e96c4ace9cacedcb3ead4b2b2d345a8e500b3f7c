{
  "comments": [
    {
      "key": {
        "uuid": "e8f54afa_91891cf0",
        "filename": "src/go/ast/import.go",
        "patchSetId": 6
      },
      "lineNbr": 33,
      "author": {
        "id": 5210
      },
      "writtenOn": "2019-03-18T18:33:43Z",
      "side": 1,
      "message": "this should also use unadjusted lines (and if not, why not)?\n\nDouble-check entire file.\n\n(As an aside, getting unadjusted lines is faster, too)",
      "revId": "e96c4ace9cacedcb3ead4b2b2d345a8e500b3f7c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ecd7435c_60597289",
        "filename": "src/go/ast/import.go",
        "patchSetId": 6
      },
      "lineNbr": 33,
      "author": {
        "id": 24096
      },
      "writtenOn": "2019-03-18T18:50:50Z",
      "side": 1,
      "message": "Sure. I just changed the lines which were needed. But getting unadjusted lines everywhere is fine too.",
      "parentUuid": "e8f54afa_91891cf0",
      "revId": "e96c4ace9cacedcb3ead4b2b2d345a8e500b3f7c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0dcc5734_4b90ee08",
        "filename": "src/go/ast/import.go",
        "patchSetId": 6
      },
      "lineNbr": 33,
      "author": {
        "id": 24096
      },
      "writtenOn": "2019-03-19T16:55:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ecd7435c_60597289",
      "revId": "e96c4ace9cacedcb3ead4b2b2d345a8e500b3f7c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1012e00c_cc37947e",
        "filename": "src/go/ast/import.go",
        "patchSetId": 6
      },
      "lineNbr": 45,
      "author": {
        "id": 5210
      },
      "writtenOn": "2019-03-18T18:33:43Z",
      "side": 1,
      "message": "This is now common, so please factor:\n\nfunc lineAt(fset *token.FileSet, pos token.Pos) int {\n   return fset.PositionFor(pos, false).Line\n}\n\nand use it throughout",
      "range": {
        "startLine": 45,
        "startChar": 20,
        "endLine": 45,
        "endChar": 31
      },
      "revId": "e96c4ace9cacedcb3ead4b2b2d345a8e500b3f7c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d976287e_f53711b8",
        "filename": "src/go/ast/import.go",
        "patchSetId": 6
      },
      "lineNbr": 45,
      "author": {
        "id": 24096
      },
      "writtenOn": "2019-03-18T18:50:50Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "1012e00c_cc37947e",
      "range": {
        "startLine": 45,
        "startChar": 20,
        "endLine": 45,
        "endChar": 31
      },
      "revId": "e96c4ace9cacedcb3ead4b2b2d345a8e500b3f7c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a456879b_407a89b0",
        "filename": "src/go/ast/import.go",
        "patchSetId": 6
      },
      "lineNbr": 45,
      "author": {
        "id": 24096
      },
      "writtenOn": "2019-03-19T16:55:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d976287e_f53711b8",
      "range": {
        "startLine": 45,
        "startChar": 20,
        "endLine": 45,
        "endChar": 31
      },
      "revId": "e96c4ace9cacedcb3ead4b2b2d345a8e500b3f7c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5f33245b_bf567e01",
        "filename": "src/go/ast/import.go",
        "patchSetId": 6
      },
      "lineNbr": 120,
      "author": {
        "id": 5210
      },
      "writtenOn": "2019-03-18T18:33:43Z",
      "side": 1,
      "message": "This should be\n\nif g.End() \u003c\u003d beg\n\nIn a correct AST it doesn\u0027t matter, but as is, it just looks wrong when thinking about intervals of text extensions in the source: We want the end of the comment text to be before or at beg for it to be outside the [beg, end) interval.",
      "range": {
        "startLine": 120,
        "startChar": 7,
        "endLine": 120,
        "endChar": 10
      },
      "revId": "e96c4ace9cacedcb3ead4b2b2d345a8e500b3f7c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6c170443_d8a11474",
        "filename": "src/go/ast/import.go",
        "patchSetId": 6
      },
      "lineNbr": 120,
      "author": {
        "id": 24096
      },
      "writtenOn": "2019-03-19T16:55:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5f33245b_bf567e01",
      "range": {
        "startLine": 120,
        "startChar": 7,
        "endLine": 120,
        "endChar": 10
      },
      "revId": "e96c4ace9cacedcb3ead4b2b2d345a8e500b3f7c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ebdc0372_f8f259ec",
        "filename": "src/go/ast/import.go",
        "patchSetId": 6
      },
      "lineNbr": 126,
      "author": {
        "id": 5210
      },
      "writtenOn": "2019-03-18T18:33:43Z",
      "side": 1,
      "message": "Same here: This should be\n\nif g.Pos() \u003e\u003d end\n\nor, nicer, while more symmetric:\n\nif end \u003c\u003d g.Pos()\n\nAgain, we stop as soon as we see the first comment group starting at/after the [beg, end) interval.\n\nNote that in the code I originally wrote:\n\nfor i, g :\u003d range f.Comments {\n   if beg \u003c\u003d g.Pos() \u0026\u0026 g.End() \u003c end {\n      // comment is within the range [beg, end[ of import declarations\n      ...\n   }\n}\n\nI suggested testing whether a comment interval [g.Pos(), g.End()) is entirely within the imports interval [beg, end). You inverted the code (which is fine), but then we want to exclude comments whose text interval ends before/at the [beg, end); hence g.End() \u003c\u003d beg. And also comments whose text interval starts after the [beg, end) interval; hence end \u003c\u003d g.Pos().\n\nBecause it\u0027s not possible (in a correct AST) for a comment interval to overlap with the import section, what you have will work, but again, it\u0027s yet another implicit assumption. Better sticking to the basic interval math.\n\nNote that your code also relies on the fact that all comments are in sorted order (which they usually are), but it\u0027s another assumption. Should probably add a comment to that effect:\n\n// Note that f.Comments are sorted in source order.",
      "range": {
        "startLine": 126,
        "startChar": 13,
        "endLine": 126,
        "endChar": 14
      },
      "revId": "e96c4ace9cacedcb3ead4b2b2d345a8e500b3f7c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1e06bb2a_d6137b92",
        "filename": "src/go/ast/import.go",
        "patchSetId": 6
      },
      "lineNbr": 126,
      "author": {
        "id": 24096
      },
      "writtenOn": "2019-03-18T18:50:50Z",
      "side": 1,
      "message": "Apologies if I appeared to overrride your suggestion. I had mentioned this before in PS3. I tried with your version of the code first, but it did not work because the initial condition of \"beg \u003c\u003d g.Pos() \u0026\u0026 g.End() \u003c end\" did not satisfy in some cases. And therefore cend remained 0. But maybe that got fixed due to using \"PositionFor\". I will re-check.",
      "parentUuid": "ebdc0372_f8f259ec",
      "range": {
        "startLine": 126,
        "startChar": 13,
        "endLine": 126,
        "endChar": 14
      },
      "revId": "e96c4ace9cacedcb3ead4b2b2d345a8e500b3f7c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "18a22316_8fbc7b58",
        "filename": "src/go/ast/import.go",
        "patchSetId": 6
      },
      "lineNbr": 126,
      "author": {
        "id": 5210
      },
      "writtenOn": "2019-03-18T19:28:06Z",
      "side": 1,
      "message": "There\u0027s absolutely no problem with going a different way then my suggestion, but we really need to understand why one way works and another one doesn\u0027t (btw., I think it should have been: beg \u003c\u003d g.Pos() \u0026\u0026 g.End() \u003c\u003d end, my fault).\n\nIn other words, if there is way that we believe is correct but doesn\u0027t work, we need to fully understand why (and document it so that the next person understands the thinking behind it). Trying a different approach that happens to work w/o full understanding why is very problematic because then we\u0027re entering a trial and error approach; that\u0027s not good enough.",
      "parentUuid": "1e06bb2a_d6137b92",
      "range": {
        "startLine": 126,
        "startChar": 13,
        "endLine": 126,
        "endChar": 14
      },
      "revId": "e96c4ace9cacedcb3ead4b2b2d345a8e500b3f7c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ec40f440_4ba1661a",
        "filename": "src/go/ast/import.go",
        "patchSetId": 6
      },
      "lineNbr": 126,
      "author": {
        "id": 24096
      },
      "writtenOn": "2019-03-19T16:55:39Z",
      "side": 1,
      "message": "Robert, I looked into your approach. It works, but it has some special cases that need extra handling.\n\n1. For cases when there are no comments in between the specs, cend remains 0. So `f.Comments[cstart:cend]` fails. I added a special case for that.\n\n2. Your approach ends with the last index of the comment within the range. But while slicing, the end index is always exclusive. So `f.Comments[cstart:cend]` fails to take the last comment. Again we need a special case for that. Compare this with the previous approach, where cend was being updated till `g.End()` exceeded `end`. So we got the right `cend`.\n\nI fixed these and updated the CL. You can take a look and let me know if we can make this more elegant.\n\nbtw beg \u003c\u003d g.Pos() \u0026\u0026 g.End() \u003c end was fine actually.",
      "parentUuid": "18a22316_8fbc7b58",
      "range": {
        "startLine": 126,
        "startChar": 13,
        "endLine": 126,
        "endChar": 14
      },
      "revId": "e96c4ace9cacedcb3ead4b2b2d345a8e500b3f7c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4e168307_2c87ef2c",
        "filename": "src/go/ast/import.go",
        "patchSetId": 6
      },
      "lineNbr": 145,
      "author": {
        "id": 5210
      },
      "writtenOn": "2019-03-18T18:33:43Z",
      "side": 1,
      "message": "use lineAt\n\ncheck entire file",
      "range": {
        "startLine": 145,
        "startChar": 8,
        "endLine": 145,
        "endChar": 16
      },
      "revId": "e96c4ace9cacedcb3ead4b2b2d345a8e500b3f7c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c3818085_390c4eb8",
        "filename": "src/go/ast/import.go",
        "patchSetId": 6
      },
      "lineNbr": 145,
      "author": {
        "id": 24096
      },
      "writtenOn": "2019-03-18T18:50:50Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "4e168307_2c87ef2c",
      "range": {
        "startLine": 145,
        "startChar": 8,
        "endLine": 145,
        "endChar": 16
      },
      "revId": "e96c4ace9cacedcb3ead4b2b2d345a8e500b3f7c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fd890c85_39ac1a79",
        "filename": "src/go/ast/import.go",
        "patchSetId": 6
      },
      "lineNbr": 145,
      "author": {
        "id": 24096
      },
      "writtenOn": "2019-03-19T16:55:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c3818085_390c4eb8",
      "range": {
        "startLine": 145,
        "startChar": 8,
        "endLine": 145,
        "endChar": 16
      },
      "revId": "e96c4ace9cacedcb3ead4b2b2d345a8e500b3f7c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}