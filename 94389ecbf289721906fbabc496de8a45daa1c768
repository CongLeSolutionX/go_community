{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "50a4d81f_592475bd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-04-25T15:04:42Z",
      "side": 1,
      "message": "Superseded.",
      "parentUuid": "d83cbb27_9f52d4c8",
      "tag": "autogenerated:trybots~beginning",
      "revId": "94389ecbf289721906fbabc496de8a45daa1c768",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "18e00020_5760ed11",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-04-25T15:04:42Z",
      "side": 1,
      "message": "SlowBots beginning. Status page: https://farmer.golang.org/try?commit\u003d94389ecb\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "94389ecbf289721906fbabc496de8a45daa1c768",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e045afdc_8818ae55",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-04-25T15:26:32Z",
      "side": 1,
      "message": "SlowBots are happy.\n\nSlowBot builds that ran:\n* linux-ppc64le-buildlet\n",
      "parentUuid": "18e00020_5760ed11",
      "tag": "autogenerated:trybots~happy",
      "revId": "94389ecbf289721906fbabc496de8a45daa1c768",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f3f1adcc_1ef1b69b",
        "filename": "src/cmd/link/internal/ppc64/asm.go",
        "patchSetId": 3
      },
      "lineNbr": 105,
      "author": {
        "id": 13315
      },
      "writtenOn": "2023-04-25T17:51:24Z",
      "side": 1,
      "message": "Maybe add a comment saying the type is documented below.",
      "revId": "94389ecbf289721906fbabc496de8a45daa1c768",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eb451741_5b4488c2",
        "filename": "src/cmd/link/internal/ppc64/asm.go",
        "patchSetId": 3
      },
      "lineNbr": 105,
      "author": {
        "id": 36863
      },
      "writtenOn": "2023-04-25T22:22:59Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "f3f1adcc_1ef1b69b",
      "revId": "94389ecbf289721906fbabc496de8a45daa1c768",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d47f6f5d_d17b08f5",
        "filename": "src/cmd/link/internal/ppc64/asm.go",
        "patchSetId": 3
      },
      "lineNbr": 108,
      "author": {
        "id": 36863
      },
      "writtenOn": "2023-04-25T15:16:24Z",
      "side": 1,
      "message": "Cherry, if ldr.AttrExternal(s) initially returns true, then symbol s is modified, should ldr.AttrExternal(s) continue to return true?\n\nSee the previous revision for more context. It returned false for external object symbols when setting up stubs for external cgo objects.",
      "range": {
        "startLine": 108,
        "startChar": 8,
        "endLine": 108,
        "endChar": 18
      },
      "revId": "94389ecbf289721906fbabc496de8a45daa1c768",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f41c8aa6_7cc6c228",
        "filename": "src/cmd/link/internal/ppc64/asm.go",
        "patchSetId": 3
      },
      "lineNbr": 108,
      "author": {
        "id": 13315
      },
      "writtenOn": "2023-04-25T17:51:24Z",
      "side": 1,
      "message": "I think AttrExternal(s) should continue to return true (I think generally we keep the symbol\u0027s origin). If it matters, you can use SetAttrExternal to set it to false.",
      "parentUuid": "d47f6f5d_d17b08f5",
      "range": {
        "startLine": 108,
        "startChar": 8,
        "endLine": 108,
        "endChar": 18
      },
      "revId": "94389ecbf289721906fbabc496de8a45daa1c768",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ee584d68_dded2627",
        "filename": "src/cmd/link/internal/ppc64/asm.go",
        "patchSetId": 3
      },
      "lineNbr": 108,
      "author": {
        "id": 36863
      },
      "writtenOn": "2023-04-25T22:22:59Z",
      "side": 1,
      "message": "Ah, it was more subtle than I realized. These relocations are being processed against the section symbol. Those aren\u0027t getting marked with the external attribute.\n\nI created CL 488895 to try to address this.",
      "parentUuid": "f41c8aa6_7cc6c228",
      "range": {
        "startLine": 108,
        "startChar": 8,
        "endLine": 108,
        "endChar": 18
      },
      "revId": "94389ecbf289721906fbabc496de8a45daa1c768",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ab034a66_c912ff79",
        "filename": "src/cmd/link/internal/ppc64/asm.go",
        "patchSetId": 3
      },
      "lineNbr": 110,
      "author": {
        "id": 13315
      },
      "writtenOn": "2023-04-25T17:51:24Z",
      "side": 1,
      "message": "Could we have more comments about when to use what type of stub? Is this used when the callee is in a dynamic library? Should we check for that?",
      "revId": "94389ecbf289721906fbabc496de8a45daa1c768",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fccfc685_b50ef57c",
        "filename": "src/cmd/link/internal/ppc64/asm.go",
        "patchSetId": 3
      },
      "lineNbr": 110,
      "author": {
        "id": 36863
      },
      "writtenOn": "2023-04-25T22:22:59Z",
      "side": 1,
      "message": "I think it is assumed this is a dynamic call if genpltstub is called.",
      "parentUuid": "ab034a66_c912ff79",
      "revId": "94389ecbf289721906fbabc496de8a45daa1c768",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "759b52d5_35746ac2",
        "filename": "src/cmd/link/internal/ppc64/asm.go",
        "patchSetId": 3
      },
      "lineNbr": 110,
      "author": {
        "id": 36863
      },
      "writtenOn": "2023-04-27T14:49:01Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "fccfc685_b50ef57c",
      "revId": "94389ecbf289721906fbabc496de8a45daa1c768",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9e48ec79_ce4cc56c",
        "filename": "src/cmd/link/internal/ppc64/asm.go",
        "patchSetId": 3
      },
      "lineNbr": 111,
      "author": {
        "id": 36863
      },
      "writtenOn": "2023-04-25T15:08:41Z",
      "side": 1,
      "message": "The naming will get a bit more complicated with P10. It can generate NOTOC, PIC stubs.",
      "range": {
        "startLine": 111,
        "startChar": 14,
        "endLine": 111,
        "endChar": 19
      },
      "revId": "94389ecbf289721906fbabc496de8a45daa1c768",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b0ba75cf_161bcdf3",
        "filename": "src/cmd/link/internal/ppc64/asm.go",
        "patchSetId": 3
      },
      "lineNbr": 114,
      "author": {
        "id": 13315
      },
      "writtenOn": "2023-04-25T17:51:24Z",
      "side": 1,
      "message": "Is the @ sign okay? I think at least some C linker and/or dynamic linker doesn\u0027t like it.",
      "range": {
        "startLine": 114,
        "startChar": 21,
        "endLine": 114,
        "endChar": 25
      },
      "revId": "94389ecbf289721906fbabc496de8a45daa1c768",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6449e40c_d099984a",
        "filename": "src/cmd/link/internal/ppc64/asm.go",
        "patchSetId": 3
      },
      "lineNbr": 114,
      "author": {
        "id": 36863
      },
      "writtenOn": "2023-04-25T22:22:59Z",
      "side": 1,
      "message": "Maybe not.",
      "parentUuid": "b0ba75cf_161bcdf3",
      "range": {
        "startLine": 114,
        "startChar": 21,
        "endLine": 114,
        "endChar": 25
      },
      "revId": "94389ecbf289721906fbabc496de8a45daa1c768",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6ce1a98d_5b923b9a",
        "filename": "src/cmd/link/internal/ppc64/asm.go",
        "patchSetId": 3
      },
      "lineNbr": 128,
      "author": {
        "id": 6320
      },
      "writtenOn": "2023-04-25T21:06:06Z",
      "side": 1,
      "message": "It is better to be consistent when naming \"toc\" throughout the file so the reader can tell you are referring to the same thing. It looks like all the cases here are handling the TOC pointer, not the TOC itself.",
      "revId": "94389ecbf289721906fbabc496de8a45daa1c768",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1c59e146_e47de25f",
        "filename": "src/cmd/link/internal/ppc64/asm.go",
        "patchSetId": 3
      },
      "lineNbr": 128,
      "author": {
        "id": 36863
      },
      "writtenOn": "2023-04-25T22:22:59Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "6ce1a98d_5b923b9a",
      "revId": "94389ecbf289721906fbabc496de8a45daa1c768",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}