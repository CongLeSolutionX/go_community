{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "72f19430_3e7c3feb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 13640
      },
      "writtenOn": "2022-08-28T18:40:37Z",
      "side": 1,
      "message": "Ping?\n\nCherry, I realise that you\u0027re probably super busy, however I would really appreciate it if I could get the SDYNIMPORT linking support for mips64 (this change and the next one in this stack) reviewed and landed (this is causing a lot problems for the maintenance and use of this port).\n\nAlternatively, is there someone else on the Go team who could review these changes?",
      "revId": "69c3219b4aa856b02fe83c96137bb8077020415e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a81a6a12_f1da762a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 13640
      },
      "writtenOn": "2022-10-05T05:41:48Z",
      "side": 1,
      "message": "@cherryyz@google.com @iant@golang.org - bumping this again",
      "parentUuid": "72f19430_3e7c3feb",
      "revId": "69c3219b4aa856b02fe83c96137bb8077020415e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0d2c44fe_54b04b04",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 13640
      },
      "writtenOn": "2022-10-13T18:25:56Z",
      "side": 1,
      "message": "TRY\u003dlinux-mips64,openbsd-mips64",
      "revId": "69c3219b4aa856b02fe83c96137bb8077020415e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "64740dab_4985ad52",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-10-13T18:26:15Z",
      "side": 1,
      "message": "SlowBots beginning. Status page: https://farmer.golang.org/try?commit\u003d69c3219b\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "69c3219b4aa856b02fe83c96137bb8077020415e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a4b70616_1ca6b843",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-10-14T05:43:45Z",
      "side": 1,
      "message": "SlowBots are happy.\n\nSlowBot builds that ran:\n* linux-mips64-rtrk\n* openbsd-mips64-jsing\n",
      "parentUuid": "64740dab_4985ad52",
      "tag": "autogenerated:trybots~happy",
      "revId": "69c3219b4aa856b02fe83c96137bb8077020415e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "718467d3_52e304a7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 13640
      },
      "writtenOn": "2022-11-09T20:21:50Z",
      "side": 1,
      "message": "@mzh@golangcn.org @091knez@gmail.com - would you be able to review this?",
      "revId": "69c3219b4aa856b02fe83c96137bb8077020415e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b8efbc31_4a4c967d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 7530
      },
      "writtenOn": "2022-11-29T08:33:54Z",
      "side": 1,
      "message": "cc RongRong as new MIPS maintainer",
      "revId": "69c3219b4aa856b02fe83c96137bb8077020415e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d0215c79_0e336f5d",
        "filename": "src/cmd/link/internal/ld/elf.go",
        "patchSetId": 4
      },
      "lineNbr": 1536,
      "author": {
        "id": 5206
      },
      "writtenOn": "2023-01-29T04:17:35Z",
      "side": 1,
      "message": "Extraneous whitespace change?",
      "revId": "69c3219b4aa856b02fe83c96137bb8077020415e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4a75f8ec_4ebe6ea3",
        "filename": "src/cmd/link/internal/ld/elf.go",
        "patchSetId": 4
      },
      "lineNbr": 1536,
      "author": {
        "id": 13640
      },
      "writtenOn": "2023-01-30T15:30:58Z",
      "side": 1,
      "message": "AFAICT the comment is completely unrelated to the elf.DT_DEBUG section, hence adding a blank line to separate them. I can drop it if it is unwanted.",
      "parentUuid": "d0215c79_0e336f5d",
      "revId": "69c3219b4aa856b02fe83c96137bb8077020415e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "932eed27_55ea93fe",
        "filename": "src/cmd/link/internal/ld/elf.go",
        "patchSetId": 4
      },
      "lineNbr": 1536,
      "author": {
        "id": 5206
      },
      "writtenOn": "2023-01-31T00:30:03Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "4a75f8ec_4ebe6ea3",
      "revId": "69c3219b4aa856b02fe83c96137bb8077020415e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ccd935e3_6facb199",
        "filename": "src/cmd/link/internal/ld/lib.go",
        "patchSetId": 4
      },
      "lineNbr": 256,
      "author": {
        "id": 5206
      },
      "writtenOn": "2023-01-29T04:17:35Z",
      "side": 1,
      "message": "Adding a new general pass complicates the linker for every target.  Why not just have the MIPS targets do this in asmb?  Why make a separate pass?",
      "revId": "69c3219b4aa856b02fe83c96137bb8077020415e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "152969fc_ba171a34",
        "filename": "src/cmd/link/internal/ld/lib.go",
        "patchSetId": 4
      },
      "lineNbr": 256,
      "author": {
        "id": 13640
      },
      "writtenOn": "2023-01-30T15:30:58Z",
      "side": 1,
      "message": "I\u0027m working from memory, however I believe it has to be done at the completion of asmb (once we have the symbol counts) and before the start of asmb2. Adding to the tail of asmb seems worse to me (than having a hook that can be nil for most architectures), since we\u0027d have to build MIPS64 specific knowledge into generic code, plus the variables would need to be exported from the cmd/link/internal/mips64 package - importing those into cmd/link/internal/ld would then appear to create a circular dependency. Otherwise I guess we could hook asmb2 for mips64, but then we\u0027re likely going to have to duplicate code that exists in the generic asmb2 function. Maybe I\u0027m missing something here?",
      "parentUuid": "ccd935e3_6facb199",
      "revId": "69c3219b4aa856b02fe83c96137bb8077020415e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "72eb3b49_c4ee3bb6",
        "filename": "src/cmd/link/internal/ld/lib.go",
        "patchSetId": 4
      },
      "lineNbr": 256,
      "author": {
        "id": 14020
      },
      "writtenOn": "2023-01-30T15:54:13Z",
      "side": 1,
      "message": "I think what Ian is suggesting is just a blob of code at the end of asmb() something along the lines of\n\n\tif ctxt.IsMIPS64() {\n\t\tmips64.FixupSyms(ctxt, ctxt.loader)\n\t}",
      "parentUuid": "152969fc_ba171a34",
      "revId": "69c3219b4aa856b02fe83c96137bb8077020415e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f2e17355_fca15ce0",
        "filename": "src/cmd/link/internal/ld/lib.go",
        "patchSetId": 4
      },
      "lineNbr": 256,
      "author": {
        "id": 14020
      },
      "writtenOn": "2023-01-30T15:56:24Z",
      "side": 1,
      "message": "Whoops, indeed this would cause an import cycle.  In that case adding the hook function makes sense.. but given that it\u0027s doing something that fixes up things that are generated in asmb(), I think it makes sense to do the call at the end of asmb().",
      "parentUuid": "72eb3b49_c4ee3bb6",
      "revId": "69c3219b4aa856b02fe83c96137bb8077020415e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f5e84b51_98d87959",
        "filename": "src/cmd/link/internal/ld/lib.go",
        "patchSetId": 4
      },
      "lineNbr": 256,
      "author": {
        "id": 5206
      },
      "writtenOn": "2023-01-31T00:35:01Z",
      "side": 1,
      "message": "Yes, sorry, you\u0027re right that asmb doesn\u0027t quite work.  Can we do it in the existing GenSymsLate pass?  That pass is currently implemented only for arm64 and riscv64.",
      "parentUuid": "f2e17355_fca15ce0",
      "revId": "69c3219b4aa856b02fe83c96137bb8077020415e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "998d52bc_1f047f87",
        "filename": "src/cmd/link/internal/ld/lib.go",
        "patchSetId": 4
      },
      "lineNbr": 256,
      "author": {
        "id": 13640
      },
      "writtenOn": "2023-02-11T16:11:49Z",
      "side": 1,
      "message": "I finally got a chance to page this change back in... the symbol updates for mips64 have to occur after dodata and before asmb, which is the reason for adding a hook before asmb. The GenSymsLate hook (which I also added) was needed for riscv64, which generates additional ELF symbols after asmb and before asmb2.",
      "parentUuid": "f5e84b51_98d87959",
      "revId": "69c3219b4aa856b02fe83c96137bb8077020415e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fd33a2bf_f85b5180",
        "filename": "src/cmd/link/internal/ld/lib.go",
        "patchSetId": 4
      },
      "lineNbr": 256,
      "author": {
        "id": 5206
      },
      "writtenOn": "2023-02-15T23:47:05Z",
      "side": 1,
      "message": "What if you simply build the SymbolBuilder in gentext when you add the new tags, and then update them as you go?  Calls to the Setuint method don\u0027t allocate memory.",
      "parentUuid": "998d52bc_1f047f87",
      "revId": "69c3219b4aa856b02fe83c96137bb8077020415e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5ed682e3_dccc1e8e",
        "filename": "src/cmd/link/internal/ld/lib.go",
        "patchSetId": 4
      },
      "lineNbr": 256,
      "author": {
        "id": 13640
      },
      "writtenOn": "2023-02-17T19:08:21Z",
      "side": 1,
      "message": "I\u0027ve managed to make this work - it does keep it isolated to mips64, although it seems more convoluted. elfsetupplt gets called before gentext, so we have to defer DT_MIPS_LOCAL_GOTNO until then, however DT_MIPS_SYMTABNO and DT_MIPS_GOTSYM can be updated in addpltsym as you suggest.",
      "parentUuid": "fd33a2bf_f85b5180",
      "revId": "69c3219b4aa856b02fe83c96137bb8077020415e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}