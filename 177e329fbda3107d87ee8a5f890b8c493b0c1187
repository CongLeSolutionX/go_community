{
  "comments": [
    {
      "key": {
        "uuid": "4da70e78_c2b3863e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 7,
      "author": {
        "id": 5010
      },
      "writtenOn": "2018-10-30T00:30:18Z",
      "side": 1,
      "message": "Please also discuss the new \"this\" argument and return value of the callback function.",
      "revId": "177e329fbda3107d87ee8a5f890b8c493b0c1187",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a7e416bb_a6a58bd9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 15,
      "author": {
        "id": 13315
      },
      "writtenOn": "2018-10-26T03:25:23Z",
      "side": 1,
      "message": "Can we clarify what are asynchronous callbacks? It seems js.NewCallback only mentions synchronous callbacks. I guess whether a callback is synchronous or asynchronous is just up to the user code? If the user code (Go or JS) directly calls the callback, it is synchronous; if it, say, puts it on an event handler, then it is asynchronous?\n\nAlso, could you add some comment (in the runtime) about how they work together? As I understand, when a callback is called, the JS side will call _resume, which calls wasm_export_resume (enters the Go side), which, I think, will resume the execution on the g that calls into JS \n (either synchronously calling a JS function or calling pause)? So, for asynchronous callback, it will be the \"extra goroutine\" that calls pause, so that goroutine will run the callback? I guess it is not guaranteed to always be the \"extra goroutine\" (probably it doesn\u0027t really matter)?",
      "range": {
        "startLine": 14,
        "startChar": 53,
        "endLine": 15,
        "endChar": 45
      },
      "revId": "177e329fbda3107d87ee8a5f890b8c493b0c1187",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fdbabd8e_f905ae05",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 15,
      "author": {
        "id": 13620
      },
      "writtenOn": "2018-10-26T08:29:48Z",
      "side": 1,
      "message": "\u003e If the user code (Go or JS) directly calls the callback, it is synchronous; if it, say, puts it on an event handler, then it is asynchronous?\n\nYes, exactly.\n\n\u003e I guess it is not guaranteed to always be the \"extra goroutine\"?\n\nIn which case would it not be the extra goroutine? If the callback is not synchronous, then the extra goroutine is the active one when the wasm execution gets paused.",
      "parentUuid": "a7e416bb_a6a58bd9",
      "range": {
        "startLine": 14,
        "startChar": 53,
        "endLine": 15,
        "endChar": 45
      },
      "revId": "177e329fbda3107d87ee8a5f890b8c493b0c1187",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8090dfdc_39eb9bfb",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 15,
      "author": {
        "id": 13315
      },
      "writtenOn": "2018-10-27T15:55:34Z",
      "side": 1,
      "message": "I\u0027m not sure, just asking. Maybe it is always the extra goroutine. Is it possible that a normal goroutine calls into JS, and the JS code somehow triggers a callback installed earlier? If that is possible, I think the callback will be run on the normal goroutine that calls into JS? Or we say this is a synchronous callback then?",
      "parentUuid": "fdbabd8e_f905ae05",
      "range": {
        "startLine": 14,
        "startChar": 53,
        "endLine": 15,
        "endChar": 45
      },
      "revId": "177e329fbda3107d87ee8a5f890b8c493b0c1187",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4f7ece64_b9469fe5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 15,
      "author": {
        "id": 13620
      },
      "writtenOn": "2018-10-27T16:25:20Z",
      "side": 1,
      "message": "Yes, in the terms above this would be a \"synchronous\" callback. But I see that the term \"synchronous\" is confusing when used that way. The differentiation is really between\n\n- callback triggered during a call from Go to JS\n\nand\n\n- callback triggered by the JS event loop.\n\nMaybe we should change the wording accordingly and get rid of the ambiguous term \"synchronous\".",
      "parentUuid": "8090dfdc_39eb9bfb",
      "range": {
        "startLine": 14,
        "startChar": 53,
        "endLine": 15,
        "endChar": 45
      },
      "revId": "177e329fbda3107d87ee8a5f890b8c493b0c1187",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "890469d6_4103350a",
        "filename": "misc/wasm/wasm_exec.js",
        "patchSetId": 4
      },
      "lineNbr": 260,
      "author": {
        "id": 13315
      },
      "writtenOn": "2018-10-26T03:25:23Z",
      "side": 1,
      "message": "Sorry, I\u0027m not sure I understand this. You mean sp could change from the entry of this function to this point? What calls morestack? Why this function is different from other functions?",
      "range": {
        "startLine": 260,
        "startChar": 39,
        "endLine": 260,
        "endChar": 75
      },
      "revId": "177e329fbda3107d87ee8a5f890b8c493b0c1187",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "466318a3_33c8c181",
        "filename": "misc/wasm/wasm_exec.js",
        "patchSetId": 4
      },
      "lineNbr": 260,
      "author": {
        "id": 13620
      },
      "writtenOn": "2018-10-26T08:29:48Z",
      "side": 1,
      "message": "\"morestack\" can be caused by a synchronous callback into Go code. In this case, the \"Reflect.get\" may trigger a JavaScript getter, which may trigger the synchronous callback. This can make the active goroutine switch to a new stack, thus invalidating the SP.",
      "parentUuid": "890469d6_4103350a",
      "range": {
        "startLine": 260,
        "startChar": 39,
        "endLine": 260,
        "endChar": 75
      },
      "revId": "177e329fbda3107d87ee8a5f890b8c493b0c1187",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7071cad1_765986d4",
        "filename": "misc/wasm/wasm_exec.js",
        "patchSetId": 4
      },
      "lineNbr": 260,
      "author": {
        "id": 13315
      },
      "writtenOn": "2018-10-27T15:55:34Z",
      "side": 1,
      "message": "Thanks. Maybe extend the comment to include this.",
      "parentUuid": "466318a3_33c8c181",
      "range": {
        "startLine": 260,
        "startChar": 39,
        "endLine": 260,
        "endChar": 75
      },
      "revId": "177e329fbda3107d87ee8a5f890b8c493b0c1187",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c2b99cd4_03a89b09",
        "filename": "src/cmd/link/internal/wasm/asm.go",
        "patchSetId": 4
      },
      "lineNbr": 360,
      "author": {
        "id": 13315
      },
      "writtenOn": "2018-10-26T03:25:23Z",
      "side": 1,
      "message": "This comment needs update.",
      "range": {
        "startLine": 360,
        "startChar": 41,
        "endLine": 360,
        "endChar": 57
      },
      "revId": "177e329fbda3107d87ee8a5f890b8c493b0c1187",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eaf67023_fc9a77ad",
        "filename": "src/runtime/lock_js.go",
        "patchSetId": 4
      },
      "lineNbr": 196,
      "author": {
        "id": 13315
      },
      "writtenOn": "2018-10-26T03:25:23Z",
      "side": 1,
      "message": "I guess you could go:linkname js.handleCallback and just call that, without going through a func variable?",
      "range": {
        "startLine": 190,
        "startChar": 0,
        "endLine": 196,
        "endChar": 0
      },
      "revId": "177e329fbda3107d87ee8a5f890b8c493b0c1187",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5a3aaf28_76e42126",
        "filename": "src/runtime/rt0_js_wasm.s",
        "patchSetId": 4
      },
      "lineNbr": 45,
      "author": {
        "id": 13315
      },
      "writtenOn": "2018-10-26T03:25:23Z",
      "side": 1,
      "message": "Add some comment for this function.",
      "revId": "177e329fbda3107d87ee8a5f890b8c493b0c1187",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ddabae81_f89859b8",
        "filename": "src/runtime/rt0_js_wasm.s",
        "patchSetId": 4
      },
      "lineNbr": 79,
      "author": {
        "id": 13315
      },
      "writtenOn": "2018-10-26T03:25:23Z",
      "side": 1,
      "message": "Document that this function is called from JavaScript to retrieve SP.",
      "revId": "177e329fbda3107d87ee8a5f890b8c493b0c1187",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "73b90c43_7aa97071",
        "filename": "src/syscall/js/callback.go",
        "patchSetId": 4
      },
      "lineNbr": 25,
      "author": {
        "id": 13315
      },
      "writtenOn": "2018-10-26T03:25:23Z",
      "side": 1,
      "message": "Probably also document on which goroutine it will run. I see the CL description mentions this, maybe also mention it here.",
      "revId": "177e329fbda3107d87ee8a5f890b8c493b0c1187",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b0e9a1a4_889e4c93",
        "filename": "src/syscall/js/callback.go",
        "patchSetId": 4
      },
      "lineNbr": 31,
      "author": {
        "id": 13315
      },
      "writtenOn": "2018-10-26T03:25:23Z",
      "side": 1,
      "message": "Agree with Brad that \"this\" and the function result need documentation.",
      "revId": "177e329fbda3107d87ee8a5f890b8c493b0c1187",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "126bde9a_fa349b1b",
        "filename": "src/syscall/js/callback.go",
        "patchSetId": 4
      },
      "lineNbr": 31,
      "author": {
        "id": 5010
      },
      "writtenOn": "2018-10-30T00:30:18Z",
      "side": 1,
      "message": "I am, in particular, curious as to why the return value is interface{} and not Value.",
      "parentUuid": "b0e9a1a4_889e4c93",
      "revId": "177e329fbda3107d87ee8a5f890b8c493b0c1187",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "69764950_748ee645",
        "filename": "src/syscall/js/callback.go",
        "patchSetId": 4
      },
      "lineNbr": 31,
      "author": {
        "id": 13620
      },
      "writtenOn": "2018-10-30T08:14:29Z",
      "side": 1,
      "message": "Just an implicit ValueOf for convenience, similar to the arguments of Set, Call, etc. Are there reasons to prefer Value?",
      "parentUuid": "126bde9a_fa349b1b",
      "revId": "177e329fbda3107d87ee8a5f890b8c493b0c1187",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    }
  ]
}