{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "6e8e9eee_7a8fbce3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 34993
      },
      "writtenOn": "2024-11-09T19:47:17Z",
      "side": 1,
      "message": "Could you move all the logic that is not exclusively TLS-PRF3-related to crypto/tls? (That is, all *Secret types and the label definitions). This would facilitate replacing the TLS-PRF3 algorithm with our OpenSSl/CNG backends without having to reimplement all the labeling stuff. Also, IMO the less \"business logic\" inside the FIPS boundary, the better.",
      "revId": "774403525393cbbe2753ef269a9c439267f622e7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1bb1c1a1_65aada44",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 26879
      },
      "writtenOn": "2024-11-11T17:03:35Z",
      "side": 1,
      "message": "I like the direction you went here introducing types for the derived secrets. I had one small comment about the label expand func.\n\nI think Quim\u0027s suggestion to try and minimize the amount of TLS code in the FIPS boundary is sensible if it doesn\u0027t have any unexpected knock-on effects.",
      "revId": "774403525393cbbe2753ef269a9c439267f622e7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2376fb5e_4e4a9668",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 34993
      },
      "writtenOn": "2024-11-19T15:52:56Z",
      "side": 1,
      "message": "Marking as unresolved.",
      "parentUuid": "6e8e9eee_7a8fbce3",
      "revId": "774403525393cbbe2753ef269a9c439267f622e7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cf36911f_f6407979",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 11715
      },
      "writtenOn": "2024-11-19T15:57:39Z",
      "side": 1,
      "message": "My interpretation of the IGs is that the FIPS module \"service\" is the whole KDF, and https://pages.nist.gov/ACVP/draft-hammett-acvp-kdf-tls-v1.3.html seems to agree. There isn\u0027t a TLS-PRF3 function besides HKDF, so I am not sure what that would leave in the package.",
      "parentUuid": "2376fb5e_4e4a9668",
      "revId": "774403525393cbbe2753ef269a9c439267f622e7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e8a32ac2_f9b1da3b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 34993
      },
      "writtenOn": "2024-11-19T16:41:15Z",
      "side": 1,
      "message": "Not an expert on interpreting these documents, but as far as I understand, OpenSSL ([1]), BoringSSL ([2]), and wolfSSL ([3]) just add a thin wrapper over HKDF in the FIPS boundary. All the different key scheduling handling is implemented in the TLS layer.\n\nFollowing the same approach here would help maintaining other crypto backends in Go forks, else they would have to reimplement part of the TLS logic, which would be unfortunate.\n\n[1]: https://docs.openssl.org/master/man7/EVP_KDF-TLS13_KDF\n[2]: https://github.com/google/boringssl/blob/264f4f7a958af6c4ccb04662e302a99dfa7c5b85/crypto/fipsmodule/tls/kdf.c.inc#L182\n[3]: https://github.com/wolfSSL/wolfssl/blob/18f52b25736c6d6f68f0178ede35cd3d2df9b6da/wolfssl/wolfcrypt/kdf.h#L83",
      "parentUuid": "cf36911f_f6407979",
      "revId": "774403525393cbbe2753ef269a9c439267f622e7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6f5fd325_09969c6b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 11715
      },
      "writtenOn": "2024-11-19T17:21:28Z",
      "side": 1,
      "message": "None of this is an exact science, but doing the thin wrapper would be spending compliance budget unnecessarily. I discussed it with the rest of the team and we agree.\n\nOne of the goals of the Go FIPS module, and the reason it\u0027s being tested on so many platforms, is to remove the complexity of catering to forks. You\u0027re obviously free to still maintain one, but it shouldn\u0027t influence upstream API decisions.",
      "parentUuid": "e8a32ac2_f9b1da3b",
      "revId": "774403525393cbbe2753ef269a9c439267f622e7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "36d934a9_d2c1506b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 34993
      },
      "writtenOn": "2024-11-19T19:49:13Z",
      "side": 1,
      "message": "In the past the Go team has been open to modifying the Go internals to facilitate Go forks maintenance. I don\u0027t see why this case would be different nor why I shouldn\u0027t try to influence API desicions (as anyone else can).\n\nHard to argue against the compliance budget argument. Would it be really noticeable taking into account the large FIPS API surface implemented in this efford?\n\nI think it is a fair ask what I\u0027m proposing, I might be failing to understand why it has been discarded.\n\nSide note: when you say \"the rest of the team\" you mean @roland@golang.org and his crew?\n\nSorry for pushing back on this soo much, but it is important for me to understand whether you are open to do minnor concessions in here so I can calibrate how much of an efford would be to maintain our fork. You know, today is a tiny part of the TLS logic moved into the FIPS boundary, tomorrow might be a bigger thing.",
      "parentUuid": "6f5fd325_09969c6b",
      "revId": "774403525393cbbe2753ef269a9c439267f622e7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "daa49426_0fe4f8fa",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 12545
      },
      "writtenOn": "2024-11-19T21:01:23Z",
      "side": 1,
      "message": "Filippo has been coordinating with the Go Security team on this work, and we are generally in agreement. I\u0027ll elucidate on my thinking a little here.\n\nIn this case I think we have to weigh a number of things. We don\u0027t want to break the existing boring integration when implementing the pure-Go FIPS mode, so that we can provide time for people to migrate away from it, and think about how they can continue to maintain forks, if they wish to do so.\n\nBut that said, there is a limit to what we have the resources to do here, both in terms of the time we have to implement these changes, and the work we have to do to convince the validation lab that our choices are acceptable.\n\nWhile it\u0027s possible we can convince the lab that moving certain parts of the KDF out of the boundary, that is really up to them to decide, and it\u0027s safer on our end to take a conservative approach than try to convince them this would be okay (it should be noted that not every lab reads the rules the same way, it\u0027s entirely possible that the boring folks made an argument to their lab which the lab we use would not accept. Just because one module has done something one way doesn\u0027t mean we can necessarily do the same thing).\n\nUnfortunately I think if we need to keep the Secret types inside of the FIPS module, there is no clean diff to keep labels etc outside of it, and based on Filippos arguments, I\u0027m convinced we do need to keep this inside the boundary.\n\nLooking over this, I agree it is likely to introduce some pain to the Microsoft fork, and while I\u0027d like to continue to provide a path for you to maintain that for as long as we can while transitioning to the pure-Go FIPS module, I think unfortunately there are some places where we\u0027re going to have to make the choice to do what is easier for the main project rather than incurring complexity for the sake of forks.",
      "parentUuid": "36d934a9_d2c1506b",
      "revId": "774403525393cbbe2753ef269a9c439267f622e7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "79cdf0fc_e7f4fa9f",
        "filename": "src/crypto/internal/fips/tls13/tls13.go",
        "patchSetId": 5
      },
      "lineNbr": 20,
      "author": {
        "id": 26879
      },
      "writtenOn": "2024-11-11T17:03:35Z",
      "side": 1,
      "message": "The previous form of this used `cryptobyte` and handled the marshaling error that would occur if `label` or `context` were longer than can be expressed with a uint8 length prefix. I think this version will truncate without error.\n\nPerhaps worth keeping some of the original version\u0027s comment justifying that this is unlikely to matter since the call-sites are internal, the labels are fixed, and the context len is itself constrained by protocol def?\n\nThis sort of thing feels like an occasion for a debug assert but I don\u0027t feel strongly and cluttering the code with if\u0027s and panic()\u0027s doesn\u0027t seem worthwhile. WDYT?",
      "revId": "774403525393cbbe2753ef269a9c439267f622e7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8eebca85_86bc3ad2",
        "filename": "src/crypto/internal/fips/tls13/tls13.go",
        "patchSetId": 5
      },
      "lineNbr": 20,
      "author": {
        "id": 11715
      },
      "writtenOn": "2024-11-19T15:43:20Z",
      "side": 1,
      "message": "Restored the comment and panic.",
      "parentUuid": "79cdf0fc_e7f4fa9f",
      "revId": "774403525393cbbe2753ef269a9c439267f622e7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}