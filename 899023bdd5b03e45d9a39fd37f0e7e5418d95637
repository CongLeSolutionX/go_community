{
  "comments": [
    {
      "key": {
        "uuid": "2fcb9abf_f6479dec",
        "filename": "src/os/pipe_test.go",
        "patchSetId": 7
      },
      "lineNbr": 292,
      "author": {
        "id": 5070
      },
      "writtenOn": "2019-03-08T07:33:12Z",
      "side": 1,
      "message": "You changed test code.\n\nI am not familiar with this code, so I am not sure, if it is OK to change this code.\n\nLeaving for Ian to decide.",
      "revId": "899023bdd5b03e45d9a39fd37f0e7e5418d95637",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6cb1f895_c2809a99",
        "filename": "src/os/pipe_test.go",
        "patchSetId": 7
      },
      "lineNbr": 292,
      "author": {
        "id": 22895
      },
      "writtenOn": "2019-03-08T10:16:23Z",
      "side": 1,
      "message": "I changed that because it won\u0027t pass otherwise.\nOn Windows, Read is unblocked by r.Close in line 277.\nOn Unix, Read is unblocked by w.Close in line 317.\nSo it returns different errors.",
      "parentUuid": "2fcb9abf_f6479dec",
      "revId": "899023bdd5b03e45d9a39fd37f0e7e5418d95637",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b420c276_ea07efcf",
        "filename": "src/os/pipe_test.go",
        "patchSetId": 7
      },
      "lineNbr": 292,
      "author": {
        "id": 5206
      },
      "writtenOn": "2019-03-08T14:00:06Z",
      "side": 1,
      "message": "You are saying that on Windows closing the write end of a pipe does not cause the read end to return EOF?\n\nEither way I think we should write this code to accept either error as passing.  I don\u0027t think we should switch on GOOS.",
      "parentUuid": "6cb1f895_c2809a99",
      "revId": "899023bdd5b03e45d9a39fd37f0e7e5418d95637",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "02beb3eb_dbdacc1c",
        "filename": "src/os/pipe_test.go",
        "patchSetId": 7
      },
      "lineNbr": 292,
      "author": {
        "id": 22895
      },
      "writtenOn": "2019-03-08T16:07:25Z",
      "side": 1,
      "message": "w.Close can cause Read to return EOF, but r.Close is called before w.Close.\nAnd r.Close causes Read to return ErrClosed.",
      "parentUuid": "b420c276_ea07efcf",
      "revId": "899023bdd5b03e45d9a39fd37f0e7e5418d95637",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "49d19b90_5a158c5f",
        "filename": "src/os/pipe_test.go",
        "patchSetId": 7
      },
      "lineNbr": 292,
      "author": {
        "id": 5206
      },
      "writtenOn": "2019-03-08T21:49:29Z",
      "side": 1,
      "message": "OK.  Rather than not test for io.EOF, let\u0027s test that we get either io.EOF or os.ErrClosed, as in\n    if pe, ok :\u003d err.(*os.PathError); ok {\n        err \u003d pe.Err\n    }\n    if err !\u003d io.EOF \u0026\u0026 err !\u003d os.ErrClosed {\n        t.Errorf(\"got %v, expected EOF or closed\", err)\n    }",
      "parentUuid": "02beb3eb_dbdacc1c",
      "revId": "899023bdd5b03e45d9a39fd37f0e7e5418d95637",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    }
  ]
}