{
  "comments": [
    {
      "key": {
        "uuid": "1dcc43ce_b97aec59",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 25,
      "author": {
        "id": 5440
      },
      "writtenOn": "2017-04-06T20:19:44Z",
      "side": 1,
      "message": "It\u0027s not obvious to me why this is desirable. It seems like it would be simpler to just reuse Type.cmp for sorting []*Type:\n\n    func (s typesByCmp) Less(i, j int) bool { return s[i].cmp(s[j]) \u003d\u003d ssa.CMPlt }\n\nand would also avoid constructing the LongStrings.",
      "range": {
        "startLine": 24,
        "startChar": 34,
        "endLine": 25,
        "endChar": 40
      },
      "revId": "3756fc4a149c81f0e275f2740f8ded289d824cd7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "28111219_e793bf7c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 25,
      "author": {
        "id": 5143
      },
      "writtenOn": "2017-04-06T20:34:54Z",
      "side": 1,
      "message": "I was nervous about having it depend on Type.cmp, since that is explicitly designed for the backend, and we could at some point decide that we wanted it to be more aggressive about considering types equivalent. If that happened, then the sorted order could depend on the input order, which is not well-defined.\n\nIf you\u0027re comfortable using Type.cmp, though, I\u0027ll switch. It is definitely both cheaper and simpler.",
      "parentUuid": "1dcc43ce_b97aec59",
      "range": {
        "startLine": 24,
        "startChar": 34,
        "endLine": 25,
        "endChar": 40
      },
      "revId": "3756fc4a149c81f0e275f2740f8ded289d824cd7",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    }
  ]
}