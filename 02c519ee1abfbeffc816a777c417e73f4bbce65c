{
  "comments": [
    {
      "key": {
        "uuid": "594a3c43_f51d72f2",
        "filename": "src/net/cgo_sockold.go",
        "patchSetId": 19
      },
      "lineNbr": 26,
      "author": {
        "id": 5440
      },
      "writtenOn": "2015-06-15T18:43:19Z",
      "side": 1,
      "message": "We\u0027re allocating a variable of type syscall.RawSockaddrInet4, and then the only live pointer to it will be of type *C.struct_sockaddr.  Is that okay?\n\nWould it still be okay if either of those structs contained pointer fields?  Or if we set those pointers to non-nil values?  (Not entirely hypothetical: a recent topic of discussion for the POSIX working group was focused on allowing pointer members in sockaddr types.)\n\nIs there any risk of future GC work changing these answers?",
      "range": {
        "startLine": 26,
        "startChar": 8,
        "endLine": 26,
        "endChar": 49
      },
      "revId": "02c519ee1abfbeffc816a777c417e73f4bbce65c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "594a3c43_d8d0a5c4",
        "filename": "src/net/cgo_sockold.go",
        "patchSetId": 19
      },
      "lineNbr": 26,
      "author": {
        "id": 5206
      },
      "writtenOn": "2015-06-15T19:54:00Z",
      "side": 1,
      "message": "Yes, this kind of thing is OK and there are no current plans to break it.  Allocations are typed, and that type directs the GC information for the allocated block.  The type of a pointer used to find the block is not relevant to the GC.  We can already have pointers of different type pointing to the same allocated object, so I think it\u0027s safe to assume that the type of the allocation is what matters, not the type of the pointer.",
      "parentUuid": "594a3c43_f51d72f2",
      "range": {
        "startLine": 26,
        "startChar": 8,
        "endLine": 26,
        "endChar": 49
      },
      "revId": "02c519ee1abfbeffc816a777c417e73f4bbce65c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "99abd4ef_cf77217c",
        "filename": "src/net/cgo_sockold.go",
        "patchSetId": 19
      },
      "lineNbr": 30,
      "author": {
        "id": 5206
      },
      "writtenOn": "2015-06-15T03:01:04Z",
      "side": 1,
      "message": "Should this be SizeofSockaddrInet6?",
      "revId": "02c519ee1abfbeffc816a777c417e73f4bbce65c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "594a3c43_b5676a9c",
        "filename": "src/net/cgo_unix.go",
        "patchSetId": 19
      },
      "lineNbr": 207,
      "author": {
        "id": 5440
      },
      "writtenOn": "2015-06-15T18:43:19Z",
      "side": 1,
      "message": "Why switch for a single case?",
      "range": {
        "startLine": 207,
        "startChar": 9,
        "endLine": 207,
        "endChar": 15
      },
      "revId": "02c519ee1abfbeffc816a777c417e73f4bbce65c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "99abd4ef_4f64d1c2",
        "filename": "src/net/cgo_unix.go",
        "patchSetId": 19
      },
      "lineNbr": 219,
      "author": {
        "id": 5206
      },
      "writtenOn": "2015-06-15T03:01:04Z",
      "side": 1,
      "message": "I think this is easier to read if written as\n    if b[i] \u003d\u003d 0 {\n        b \u003d b[:i]\n        break\n    }",
      "revId": "02c519ee1abfbeffc816a777c417e73f4bbce65c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "594a3c43_5581de96",
        "filename": "src/net/cgo_unix.go",
        "patchSetId": 19
      },
      "lineNbr": 231,
      "author": {
        "id": 5440
      },
      "writtenOn": "2015-06-15T18:43:19Z",
      "side": 1,
      "message": "This can be just a regular \"if\" instead of an \"else if\".",
      "range": {
        "startLine": 231,
        "startChar": 3,
        "endLine": 231,
        "endChar": 7
      },
      "revId": "02c519ee1abfbeffc816a777c417e73f4bbce65c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "99abd4ef_af4f353a",
        "filename": "src/net/cgo_unix.go",
        "patchSetId": 19
      },
      "lineNbr": 234,
      "author": {
        "id": 5206
      },
      "writtenOn": "2015-06-15T03:01:04Z",
      "side": 1,
      "message": "Here you are constructing an AddrError, but it looks like the only caller is going to turn it back into a string.  Why not return the DNSError here?",
      "revId": "02c519ee1abfbeffc816a777c417e73f4bbce65c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "99abd4ef_8f54f9cf",
        "filename": "src/net/lookup_unix.go",
        "patchSetId": 19
      },
      "lineNbr": 151,
      "author": {
        "id": 5206
      },
      "writtenOn": "2015-06-15T03:01:04Z",
      "side": 1,
      "message": "Now we\u0027ve changed all the code to decide whether to use Go first, and then use cgo.  I guess this code should do the same.",
      "revId": "02c519ee1abfbeffc816a777c417e73f4bbce65c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}