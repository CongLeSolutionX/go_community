{
  "comments": [
    {
      "key": {
        "uuid": "594a3c43_f51d72f2",
        "filename": "src/net/cgo_sockold.go",
        "patchSetId": 19
      },
      "lineNbr": 26,
      "author": {
        "id": 5440
      },
      "writtenOn": "2015-06-15T18:43:19Z",
      "side": 1,
      "message": "We\u0027re allocating a variable of type syscall.RawSockaddrInet4, and then the only live pointer to it will be of type *C.struct_sockaddr.  Is that okay?\n\nWould it still be okay if either of those structs contained pointer fields?  Or if we set those pointers to non-nil values?  (Not entirely hypothetical: a recent topic of discussion for the POSIX working group was focused on allowing pointer members in sockaddr types.)\n\nIs there any risk of future GC work changing these answers?",
      "range": {
        "startLine": 26,
        "startChar": 8,
        "endLine": 26,
        "endChar": 49
      },
      "revId": "02c519ee1abfbeffc816a777c417e73f4bbce65c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "594a3c43_d8d0a5c4",
        "filename": "src/net/cgo_sockold.go",
        "patchSetId": 19
      },
      "lineNbr": 26,
      "author": {
        "id": 5206
      },
      "writtenOn": "2015-06-15T19:54:00Z",
      "side": 1,
      "message": "Yes, this kind of thing is OK and there are no current plans to break it.  Allocations are typed, and that type directs the GC information for the allocated block.  The type of a pointer used to find the block is not relevant to the GC.  We can already have pointers of different type pointing to the same allocated object, so I think it\u0027s safe to assume that the type of the allocation is what matters, not the type of the pointer.",
      "parentUuid": "594a3c43_f51d72f2",
      "range": {
        "startLine": 26,
        "startChar": 8,
        "endLine": 26,
        "endChar": 49
      },
      "revId": "02c519ee1abfbeffc816a777c417e73f4bbce65c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "594a3c43_5813d512",
        "filename": "src/net/cgo_sockold.go",
        "patchSetId": 19
      },
      "lineNbr": 26,
      "author": {
        "id": 5440
      },
      "writtenOn": "2015-06-15T20:45:36Z",
      "side": 1,
      "message": "SGTM then.  Is that documented somewhere?",
      "parentUuid": "594a3c43_d8d0a5c4",
      "range": {
        "startLine": 26,
        "startChar": 8,
        "endLine": 26,
        "endChar": 49
      },
      "revId": "02c519ee1abfbeffc816a777c417e73f4bbce65c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "594a3c43_1bcb0795",
        "filename": "src/net/cgo_sockold.go",
        "patchSetId": 19
      },
      "lineNbr": 26,
      "author": {
        "id": 5206
      },
      "writtenOn": "2015-06-15T20:51:13Z",
      "side": 1,
      "message": "It\u0027s not clear to me that it needs to be documented explicitly.  Pure Go code can not break the garbage collector.  Only passing Go pointers into C code can do that.  The fact that a C type is involved here doesn\u0027t change the fact that what we are talking about here is pure Go code.\n\nIt\u0027s true that later we are going to pass this pointer to C, but the rules there have nothing to do with types, which of course C knows nothing about anyhow.  They have to do with whether the pointers point to memory allocated in C or in Go.  The rules there do need to be documented (http://golang.org/issue/8310) but this code is still OK.",
      "parentUuid": "594a3c43_5813d512",
      "range": {
        "startLine": 26,
        "startChar": 8,
        "endLine": 26,
        "endChar": 49
      },
      "revId": "02c519ee1abfbeffc816a777c417e73f4bbce65c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "99abd4ef_cf77217c",
        "filename": "src/net/cgo_sockold.go",
        "patchSetId": 19
      },
      "lineNbr": 30,
      "author": {
        "id": 5206
      },
      "writtenOn": "2015-06-15T03:01:04Z",
      "side": 1,
      "message": "Should this be SizeofSockaddrInet6?",
      "revId": "02c519ee1abfbeffc816a777c417e73f4bbce65c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "99abd4ef_60739ac6",
        "filename": "src/net/cgo_sockold.go",
        "patchSetId": 19
      },
      "lineNbr": 30,
      "author": {
        "id": 5076
      },
      "writtenOn": "2015-06-16T18:52:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "99abd4ef_cf77217c",
      "revId": "02c519ee1abfbeffc816a777c417e73f4bbce65c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "594a3c43_b5676a9c",
        "filename": "src/net/cgo_unix.go",
        "patchSetId": 19
      },
      "lineNbr": 207,
      "author": {
        "id": 5440
      },
      "writtenOn": "2015-06-15T18:43:19Z",
      "side": 1,
      "message": "Why switch for a single case?",
      "range": {
        "startLine": 207,
        "startChar": 9,
        "endLine": 207,
        "endChar": 15
      },
      "revId": "02c519ee1abfbeffc816a777c417e73f4bbce65c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "99abd4ef_0020d6a2",
        "filename": "src/net/cgo_unix.go",
        "patchSetId": 19
      },
      "lineNbr": 207,
      "author": {
        "id": 5076
      },
      "writtenOn": "2015-06-16T18:52:10Z",
      "side": 1,
      "message": "just make it look the same as cgoLookupPort, cgoLookupIPCNAME.\nit\u0027s easy to capture other EAII_XXX errors if needed.",
      "parentUuid": "594a3c43_b5676a9c",
      "range": {
        "startLine": 207,
        "startChar": 9,
        "endLine": 207,
        "endChar": 15
      },
      "revId": "02c519ee1abfbeffc816a777c417e73f4bbce65c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "99abd4ef_4f64d1c2",
        "filename": "src/net/cgo_unix.go",
        "patchSetId": 19
      },
      "lineNbr": 219,
      "author": {
        "id": 5206
      },
      "writtenOn": "2015-06-15T03:01:04Z",
      "side": 1,
      "message": "I think this is easier to read if written as\n    if b[i] \u003d\u003d 0 {\n        b \u003d b[:i]\n        break\n    }",
      "revId": "02c519ee1abfbeffc816a777c417e73f4bbce65c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "99abd4ef_c0fece7c",
        "filename": "src/net/cgo_unix.go",
        "patchSetId": 19
      },
      "lineNbr": 219,
      "author": {
        "id": 5076
      },
      "writtenOn": "2015-06-16T18:52:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "99abd4ef_4f64d1c2",
      "revId": "02c519ee1abfbeffc816a777c417e73f4bbce65c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "594a3c43_5581de96",
        "filename": "src/net/cgo_unix.go",
        "patchSetId": 19
      },
      "lineNbr": 231,
      "author": {
        "id": 5440
      },
      "writtenOn": "2015-06-15T18:43:19Z",
      "side": 1,
      "message": "This can be just a regular \"if\" instead of an \"else if\".",
      "range": {
        "startLine": 231,
        "startChar": 3,
        "endLine": 231,
        "endChar": 7
      },
      "revId": "02c519ee1abfbeffc816a777c417e73f4bbce65c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "99abd4ef_e00dca40",
        "filename": "src/net/cgo_unix.go",
        "patchSetId": 19
      },
      "lineNbr": 231,
      "author": {
        "id": 5076
      },
      "writtenOn": "2015-06-16T18:52:10Z",
      "side": 1,
      "message": "in that case we need a expr: ip.To16() !\u003d nil \u0026\u0026 ip.To4() \u003d\u003d nil.\ni\u0027m fine either way.",
      "parentUuid": "594a3c43_5581de96",
      "range": {
        "startLine": 231,
        "startChar": 3,
        "endLine": 231,
        "endChar": 7
      },
      "revId": "02c519ee1abfbeffc816a777c417e73f4bbce65c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "594a3c43_c74efc0d",
        "filename": "src/net/cgo_unix.go",
        "patchSetId": 19
      },
      "lineNbr": 231,
      "author": {
        "id": 5440
      },
      "writtenOn": "2015-06-16T19:05:27Z",
      "side": 1,
      "message": "Why would you need \"\u0026\u0026 ip.To4() \u003d\u003d nil\"?  If that was false (i.e., ip.To4() !\u003d nil), then the preceding \"return\" statement would execute.\n\n    if ip4 :\u003d ip.To4(); ip4 !\u003d nil {\n        return cgoSockaddrInet4(ip4), ...\n    }\n    if ip6 :\u003d ip.To6(); ip6 !\u003d nil {\n        return cgoSockaddrInet6(ip6), ...\n    }\n    return nil, 0",
      "parentUuid": "99abd4ef_e00dca40",
      "range": {
        "startLine": 231,
        "startChar": 3,
        "endLine": 231,
        "endChar": 7
      },
      "revId": "02c519ee1abfbeffc816a777c417e73f4bbce65c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "99abd4ef_af4f353a",
        "filename": "src/net/cgo_unix.go",
        "patchSetId": 19
      },
      "lineNbr": 234,
      "author": {
        "id": 5206
      },
      "writtenOn": "2015-06-15T03:01:04Z",
      "side": 1,
      "message": "Here you are constructing an AddrError, but it looks like the only caller is going to turn it back into a string.  Why not return the DNSError here?",
      "revId": "02c519ee1abfbeffc816a777c417e73f4bbce65c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "99abd4ef_c0252eb7",
        "filename": "src/net/cgo_unix.go",
        "patchSetId": 19
      },
      "lineNbr": 234,
      "author": {
        "id": 5076
      },
      "writtenOn": "2015-06-16T18:52:10Z",
      "side": 1,
      "message": "yup, make cgoSockaddr not return error",
      "parentUuid": "99abd4ef_af4f353a",
      "revId": "02c519ee1abfbeffc816a777c417e73f4bbce65c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "99abd4ef_8f54f9cf",
        "filename": "src/net/lookup_unix.go",
        "patchSetId": 19
      },
      "lineNbr": 151,
      "author": {
        "id": 5206
      },
      "writtenOn": "2015-06-15T03:01:04Z",
      "side": 1,
      "message": "Now we\u0027ve changed all the code to decide whether to use Go first, and then use cgo.  I guess this code should do the same.",
      "revId": "02c519ee1abfbeffc816a777c417e73f4bbce65c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "99abd4ef_e024aab8",
        "filename": "src/net/lookup_unix.go",
        "patchSetId": 19
      },
      "lineNbr": 151,
      "author": {
        "id": 5076
      },
      "writtenOn": "2015-06-16T18:52:10Z",
      "side": 1,
      "message": "well... i didn\u0027t know that. ah... is it true? looks like lookup{Port,CNAME} have no order change.",
      "parentUuid": "99abd4ef_8f54f9cf",
      "revId": "02c519ee1abfbeffc816a777c417e73f4bbce65c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}