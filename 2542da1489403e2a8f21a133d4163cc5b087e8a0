{
  "comments": [
    {
      "key": {
        "uuid": "b5e54895_dc84f8da",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 16,
      "author": {
        "id": 13315
      },
      "writtenOn": "2017-07-05T15:20:16Z",
      "side": 1,
      "message": "typo",
      "range": {
        "startLine": 16,
        "startChar": 4,
        "endLine": 16,
        "endChar": 13
      },
      "revId": "2542da1489403e2a8f21a133d4163cc5b087e8a0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "664f5f92_e14dc225",
        "filename": "src/cmd/compile/internal/ssa/regalloc.go",
        "patchSetId": 1
      },
      "lineNbr": 19,
      "author": {
        "id": 13315
      },
      "writtenOn": "2017-07-05T15:20:16Z",
      "side": 1,
      "message": "Maybe revise this comment?",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 19,
        "endChar": 69
      },
      "revId": "2542da1489403e2a8f21a133d4163cc5b087e8a0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "29b5bd99_59e5d9e9",
        "filename": "src/cmd/compile/internal/ssa/regalloc.go",
        "patchSetId": 1
      },
      "lineNbr": 604,
      "author": {
        "id": 5143
      },
      "writtenOn": "2017-06-30T22:34:42Z",
      "side": 1,
      "message": "Just use s.visitOrder directly, and omit this local var.",
      "revId": "2542da1489403e2a8f21a133d4163cc5b087e8a0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2d855688_f07bf337",
        "filename": "src/cmd/compile/internal/ssa/regalloc.go",
        "patchSetId": 1
      },
      "lineNbr": 604,
      "author": {
        "id": 7061
      },
      "writtenOn": "2017-07-01T02:05:27Z",
      "side": 1,
      "message": "will fix",
      "parentUuid": "29b5bd99_59e5d9e9",
      "revId": "2542da1489403e2a8f21a133d4163cc5b087e8a0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f8733899_03e4ec0d",
        "filename": "src/cmd/compile/internal/ssa/regalloc.go",
        "patchSetId": 1
      },
      "lineNbr": 606,
      "author": {
        "id": 5143
      },
      "writtenOn": "2017-06-30T22:34:42Z",
      "side": 1,
      "message": "Any chance of strings rather than ints here, for easier mnemonics and stability?",
      "revId": "2542da1489403e2a8f21a133d4163cc5b087e8a0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3ae349c4_6d642fdf",
        "filename": "src/cmd/compile/internal/ssa/regalloc.go",
        "patchSetId": 1
      },
      "lineNbr": 606,
      "author": {
        "id": 7061
      },
      "writtenOn": "2017-07-01T02:05:27Z",
      "side": 1,
      "message": "f.pass.test has integer values, doesn\u0027t it?\nThe command-line options are 0, 1, 2, 3, etc, this is only for developer experiments.",
      "parentUuid": "f8733899_03e4ec0d",
      "revId": "2542da1489403e2a8f21a133d4163cc5b087e8a0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "07c4d3c2_4266017f",
        "filename": "src/cmd/compile/internal/ssa/regalloc.go",
        "patchSetId": 1
      },
      "lineNbr": 607,
      "author": {
        "id": 5143
      },
      "writtenOn": "2017-06-30T22:34:42Z",
      "side": 1,
      "message": "When would layoutOrder differ from f.Blocks?\n\nIs layoutOrder cheap enough that we don\u0027t mind re-calculating it?",
      "revId": "2542da1489403e2a8f21a133d4163cc5b087e8a0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b1b0cc1f_59d260cb",
        "filename": "src/cmd/compile/internal/ssa/regalloc.go",
        "patchSetId": 1
      },
      "lineNbr": 607,
      "author": {
        "id": 7061
      },
      "writtenOn": "2017-07-01T02:05:27Z",
      "side": 1,
      "message": "It differs from f.Blocks today, because it doesn\u0027t have the separate rotate pass following it.\nSome of the orders that I was generating while attempting to improve the order (before decoupling\norders) were plain wrong.\n\nI don\u0027t know if it is cheap enough, but it doesn\u0027t look like it contains a lot of hard work in it.\n\nIn my experimental version, I add a second boolean parameter indicating whether it should do a \"plain\"\n(what we have now) layout or the enhanced (with attempts at loop rotation by construction) layout.\nOur existing layout is much better than terrible, I\u0027ve found out that much with a pile of experiments\nand benchmarking, so I suspect that we\u0027ll always use it for non-loop code.  I tried a sort of synthetic\nlayout based on advice by Wimmer and Franz, and it did not do nearly as well for register allocation.",
      "parentUuid": "07c4d3c2_4266017f",
      "revId": "2542da1489403e2a8f21a133d4163cc5b087e8a0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "42e85819_de96185f",
        "filename": "src/cmd/compile/internal/ssa/regalloc.go",
        "patchSetId": 1
      },
      "lineNbr": 607,
      "author": {
        "id": 13315
      },
      "writtenOn": "2017-07-05T15:20:16Z",
      "side": 1,
      "message": "Currently the rotate pass runs after register allocation. So f.Blocks and layout order are same here.\n\nMaybe set the default to existing block order for now, so there is no change for the default case?",
      "parentUuid": "b1b0cc1f_59d260cb",
      "revId": "2542da1489403e2a8f21a133d4163cc5b087e8a0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "23139dc0_93da918b",
        "filename": "src/cmd/compile/internal/ssa/regalloc.go",
        "patchSetId": 1
      },
      "lineNbr": 607,
      "author": {
        "id": 7061
      },
      "writtenOn": "2017-07-05T16:08:00Z",
      "side": 1,
      "message": "I missed that rotate had not yet run, whoops.\n\nThat makes my earlier benchmarking results even more mystifying; I was measuring not-much-at-all, yet getting what looked like a clear signal on an N\u003d25 run, on a relatively quiet machine using Austin\u0027s perflock to hold things even more constant.\n\nAt least for the short term I was planning to experiment with different orders while passing a boolean parameter to layout.  Maybe I should split it into goodBranchOrder and goodRegallocOrder, and for now those are both the same thing.",
      "parentUuid": "42e85819_de96185f",
      "revId": "2542da1489403e2a8f21a133d4163cc5b087e8a0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3a9a59b9_3bf8acdf",
        "filename": "src/cmd/compile/internal/ssa/regalloc.go",
        "patchSetId": 1
      },
      "lineNbr": 618,
      "author": {
        "id": 5143
      },
      "writtenOn": "2017-06-30T22:34:42Z",
      "side": 1,
      "message": "Does regalloc thoroughly check the required block ordering invariants already? If not, it might be worth adding such checks here, if they are not prohibitively expensive, so that the failure messages are right next to the code to examine. (And if they are expensive, they could go in ssa/check.)",
      "revId": "2542da1489403e2a8f21a133d4163cc5b087e8a0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ee471ab2_65ea2342",
        "filename": "src/cmd/compile/internal/ssa/regalloc.go",
        "patchSetId": 1
      },
      "lineNbr": 618,
      "author": {
        "id": 7061
      },
      "writtenOn": "2017-07-01T02:05:27Z",
      "side": 1,
      "message": "Not really. It generates hilariously wrong code, attempts to spill SB, then use some other register as the base register for accessing statics, and then the assembler chokes.",
      "parentUuid": "3a9a59b9_3bf8acdf",
      "revId": "2542da1489403e2a8f21a133d4163cc5b087e8a0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "62493b79_689e6ef0",
        "filename": "src/cmd/compile/internal/ssa/regalloc.go",
        "patchSetId": 1
      },
      "lineNbr": 622,
      "author": {
        "id": 13315
      },
      "writtenOn": "2017-07-05T15:20:16Z",
      "side": 1,
      "message": "From the comment above, this is to distinguish forward edges from backward edges, so it should be scheduling order here.",
      "range": {
        "startLine": 622,
        "startChar": 19,
        "endLine": 622,
        "endChar": 29
      },
      "revId": "2542da1489403e2a8f21a133d4163cc5b087e8a0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e5d194e9_ecdb0c3e",
        "filename": "src/cmd/compile/internal/ssa/regalloc.go",
        "patchSetId": 1
      },
      "lineNbr": 622,
      "author": {
        "id": 7061
      },
      "writtenOn": "2017-07-05T16:08:00Z",
      "side": 1,
      "message": "I think this is supposed to be \"backward\" and \"how far\" with respect to however regalloc happens to be visiting blocks, not w.r.t. the graph structure of the code.",
      "parentUuid": "62493b79_689e6ef0",
      "range": {
        "startLine": 622,
        "startChar": 19,
        "endLine": 622,
        "endChar": 29
      },
      "revId": "2542da1489403e2a8f21a133d4163cc5b087e8a0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "82f46f59_caf49006",
        "filename": "src/cmd/compile/internal/ssa/regalloc.go",
        "patchSetId": 1
      },
      "lineNbr": 622,
      "author": {
        "id": 13315
      },
      "writtenOn": "2017-07-06T18:28:42Z",
      "side": 1,
      "message": "Ok, you are right. This is used in computing primary predecessor. At least the requirement is that the primary predecessor must be visited before visiting the current block. So visiting order sounds right. Maybe clarify it in the comment?",
      "parentUuid": "e5d194e9_ecdb0c3e",
      "range": {
        "startLine": 622,
        "startChar": 19,
        "endLine": 622,
        "endChar": 29
      },
      "revId": "2542da1489403e2a8f21a133d4163cc5b087e8a0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    }
  ]
}