{
  "comments": [
    {
      "key": {
        "uuid": "b272af0c_d725b6b2",
        "filename": "src/cmd/compile/internal/arm64/ssa.go",
        "patchSetId": 2
      },
      "lineNbr": 235,
      "author": {
        "id": 10961
      },
      "writtenOn": "2018-09-11T09:33:30Z",
      "side": 1,
      "message": "Couldn\u0027t this be applied for 0x12300678 too?\nFind LSB set, or MSB, whatever\u0027s cheapest, mask out 0xfff starting there.\nIf width of MSB-LSB of remainder, w, is [1, 12] then split into two ADDs.",
      "revId": "e01d51988f97e5f88733d0f87f274ecf377fde63",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ef474cc3_b807a337",
        "filename": "src/cmd/compile/internal/arm64/ssa.go",
        "patchSetId": 2
      },
      "lineNbr": 235,
      "author": {
        "id": 16935
      },
      "writtenOn": "2018-09-11T10:13:52Z",
      "side": 1,
      "message": "No. only 0x123456 is applicable. Please see ARM64\u0027s reference manual for details.",
      "parentUuid": "b272af0c_d725b6b2",
      "revId": "e01d51988f97e5f88733d0f87f274ecf377fde63",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "704851cb_eb42b6a0",
        "filename": "src/cmd/compile/internal/arm64/ssa.go",
        "patchSetId": 2
      },
      "lineNbr": 235,
      "author": {
        "id": 10961
      },
      "writtenOn": "2018-09-11T10:29:44Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "ef474cc3_b807a337",
      "revId": "e01d51988f97e5f88733d0f87f274ecf377fde63",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1f1ee7d1_76fca774",
        "filename": "src/cmd/compile/internal/arm64/ssa.go",
        "patchSetId": 2
      },
      "lineNbr": 236,
      "author": {
        "id": 10961
      },
      "writtenOn": "2018-09-11T09:33:30Z",
      "side": 1,
      "message": "Test v.AuxInt\u003e0xffffff first, wrapping entire case.  h,l not needed otherwise.",
      "revId": "e01d51988f97e5f88733d0f87f274ecf377fde63",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "58f08498_556b6445",
        "filename": "src/cmd/compile/internal/arm64/ssa.go",
        "patchSetId": 2
      },
      "lineNbr": 236,
      "author": {
        "id": 16935
      },
      "writtenOn": "2018-09-11T10:13:52Z",
      "side": 1,
      "message": "No. we can only break 0x123456 to 0x123000 and 0x456.\n\nx.AuxInt\u003e0xffffff can not cover all cases, such as v.AuxInt \u003d\u003d 0x123000\n\nFor 0x123000, breaking it to 0x123000 and 0x000 will even harm performance.",
      "parentUuid": "1f1ee7d1_76fca774",
      "revId": "e01d51988f97e5f88733d0f87f274ecf377fde63",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "84bd2a43_aef3896f",
        "filename": "src/cmd/compile/internal/arm64/ssa.go",
        "patchSetId": 2
      },
      "lineNbr": 236,
      "author": {
        "id": 10961
      },
      "writtenOn": "2018-09-11T10:29:44Z",
      "side": 1,
      "message": "Yes, I understand that.  I\u0027m suggesting the first test is v.AuxInt\u003c\u003d0xffffff and\nthen inside its then-block v.AuxInt is pulled apart into h,l and they\u0027re both checked\nto be non-zero, as now.",
      "parentUuid": "58f08498_556b6445",
      "revId": "e01d51988f97e5f88733d0f87f274ecf377fde63",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9d6b0a0b_68ab8001",
        "filename": "src/cmd/compile/internal/arm64/ssa.go",
        "patchSetId": 2
      },
      "lineNbr": 236,
      "author": {
        "id": 16935
      },
      "writtenOn": "2018-09-11T10:43:47Z",
      "side": 1,
      "message": "fixed in patch set 3.",
      "parentUuid": "84bd2a43_aef3896f",
      "revId": "e01d51988f97e5f88733d0f87f274ecf377fde63",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "90c7bf3b_5e527fb7",
        "filename": "test/codegen/arithmetic.go",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 10961
      },
      "writtenOn": "2018-09-11T09:33:30Z",
      "side": 1,
      "message": "A literal dollar in a regexp is \\$\nUsing a character class is possibly an expensive method, and less idiomatic.",
      "revId": "e01d51988f97e5f88733d0f87f274ecf377fde63",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0c7328b5_a2a9f4d0",
        "filename": "test/codegen/arithmetic.go",
        "patchSetId": 2
      },
      "lineNbr": 18,
      "author": {
        "id": 10961
      },
      "writtenOn": "2018-09-11T09:33:30Z",
      "side": 1,
      "message": "The repetitive pattern of 0xaaaaaa isn\u0027t a good test of pulling it apart\nas errors could be hidden by the neighbouring bits that match those missed.",
      "revId": "e01d51988f97e5f88733d0f87f274ecf377fde63",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "08d882e5_10c8a7cd",
        "filename": "test/codegen/arithmetic.go",
        "patchSetId": 2
      },
      "lineNbr": 18,
      "author": {
        "id": 16935
      },
      "writtenOn": "2018-09-11T10:15:39Z",
      "side": 1,
      "message": "I think that is fairly OK. since the disassembler will decode 0xaaa000 and 0x000aaa to decimal form.",
      "parentUuid": "0c7328b5_a2a9f4d0",
      "revId": "e01d51988f97e5f88733d0f87f274ecf377fde63",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "be8781d9_f0d59db4",
        "filename": "test/codegen/arithmetic.go",
        "patchSetId": 2
      },
      "lineNbr": 18,
      "author": {
        "id": 10961
      },
      "writtenOn": "2018-09-11T10:29:44Z",
      "side": 1,
      "message": "Yes, I agree it does.  But if 0x345678 was wrongly pulled apart into 0x456 and 0x678\nthen the decimals will be wrong.  If 0xaaaaaa is wrongly pulled apart the same way it\nstill results in 0xaaa and 0xaaa.  The two 12-bit numbers want little similarity so\noverlap shows up.",
      "parentUuid": "08d882e5_10c8a7cd",
      "revId": "e01d51988f97e5f88733d0f87f274ecf377fde63",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7db67b94_cdfbd045",
        "filename": "test/codegen/arithmetic.go",
        "patchSetId": 2
      },
      "lineNbr": 18,
      "author": {
        "id": 16935
      },
      "writtenOn": "2018-09-12T01:36:05Z",
      "side": 1,
      "message": "Please read the arm64\u0027s reference manual carefully, it isn\u0027t like you understood.",
      "parentUuid": "be8781d9_f0d59db4",
      "revId": "e01d51988f97e5f88733d0f87f274ecf377fde63",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    }
  ]
}