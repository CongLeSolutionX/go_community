{
  "comments": [
    {
      "key": {
        "uuid": "b272af0c_d725b6b2",
        "filename": "src/cmd/compile/internal/arm64/ssa.go",
        "patchSetId": 2
      },
      "lineNbr": 235,
      "author": {
        "id": 10961
      },
      "writtenOn": "2018-09-11T09:33:30Z",
      "side": 1,
      "message": "Couldn\u0027t this be applied for 0x12300678 too?\nFind LSB set, or MSB, whatever\u0027s cheapest, mask out 0xfff starting there.\nIf width of MSB-LSB of remainder, w, is [1, 12] then split into two ADDs.",
      "revId": "e01d51988f97e5f88733d0f87f274ecf377fde63",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ef474cc3_b807a337",
        "filename": "src/cmd/compile/internal/arm64/ssa.go",
        "patchSetId": 2
      },
      "lineNbr": 235,
      "author": {
        "id": 16935
      },
      "writtenOn": "2018-09-11T10:13:52Z",
      "side": 1,
      "message": "No. only 0x123456 is applicable. Please see ARM64\u0027s reference manual for details.",
      "parentUuid": "b272af0c_d725b6b2",
      "revId": "e01d51988f97e5f88733d0f87f274ecf377fde63",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1f1ee7d1_76fca774",
        "filename": "src/cmd/compile/internal/arm64/ssa.go",
        "patchSetId": 2
      },
      "lineNbr": 236,
      "author": {
        "id": 10961
      },
      "writtenOn": "2018-09-11T09:33:30Z",
      "side": 1,
      "message": "Test v.AuxInt\u003e0xffffff first, wrapping entire case.  h,l not needed otherwise.",
      "revId": "e01d51988f97e5f88733d0f87f274ecf377fde63",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "58f08498_556b6445",
        "filename": "src/cmd/compile/internal/arm64/ssa.go",
        "patchSetId": 2
      },
      "lineNbr": 236,
      "author": {
        "id": 16935
      },
      "writtenOn": "2018-09-11T10:13:52Z",
      "side": 1,
      "message": "No. we can only break 0x123456 to 0x123000 and 0x456.\n\nx.AuxInt\u003e0xffffff can not cover all cases, such as v.AuxInt \u003d\u003d 0x123000\n\nFor 0x123000, breaking it to 0x123000 and 0x000 will even harm performance.",
      "parentUuid": "1f1ee7d1_76fca774",
      "revId": "e01d51988f97e5f88733d0f87f274ecf377fde63",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "90c7bf3b_5e527fb7",
        "filename": "test/codegen/arithmetic.go",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 10961
      },
      "writtenOn": "2018-09-11T09:33:30Z",
      "side": 1,
      "message": "A literal dollar in a regexp is \\$\nUsing a character class is possibly an expensive method, and less idiomatic.",
      "revId": "e01d51988f97e5f88733d0f87f274ecf377fde63",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0c7328b5_a2a9f4d0",
        "filename": "test/codegen/arithmetic.go",
        "patchSetId": 2
      },
      "lineNbr": 18,
      "author": {
        "id": 10961
      },
      "writtenOn": "2018-09-11T09:33:30Z",
      "side": 1,
      "message": "The repetitive pattern of 0xaaaaaa isn\u0027t a good test of pulling it apart\nas errors could be hidden by the neighbouring bits that match those missed.",
      "revId": "e01d51988f97e5f88733d0f87f274ecf377fde63",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    }
  ]
}