{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "80ee369c_327bee09",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-07-11T19:15:12Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003dbef031c6\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "bef031c60fe9acd18c6917fbb0cbd93eb71f8206",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "055de3c5_48e5cceb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-07-11T19:27:51Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "80ee369c_327bee09",
      "tag": "autogenerated:trybots~happy",
      "revId": "bef031c60fe9acd18c6917fbb0cbd93eb71f8206",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b08bf64c_08978a8e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 31647
      },
      "writtenOn": "2023-07-11T19:42:26Z",
      "side": 1,
      "message": "Does this change need to be ported to go/types?",
      "revId": "bef031c60fe9acd18c6917fbb0cbd93eb71f8206",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "58d10221_2cbcbd8c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 7061
      },
      "writtenOn": "2023-07-24T17:35:25Z",
      "side": 1,
      "message": "go/types, and/or go/ast?  It does seem necessary, if anyone ever writes code that cares about variable scope/lifetime in parsed Go files.\n\nI\u0027ve been looking at those two packages, one problem thus far is I cannot tell if (1) it is okay to add a new public field to go/ast/{ForStmt,RangeStmt}\n(2) how to determine the Go version in effect for whatever file is currently being parsed.\n\nI\u0027m trying to put together a separate CL for this",
      "parentUuid": "b08bf64c_08978a8e",
      "revId": "bef031c60fe9acd18c6917fbb0cbd93eb71f8206",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "090403a0_3b522ce7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 7061
      },
      "writtenOn": "2023-07-24T18:42:38Z",
      "side": 1,
      "message": "The scope is definitely affected by this.  Type checking however is not.\nFor example, this loop \n```\n   for i :\u003d 0; i \u003c 32; i++ {\n      g :\u003d float64(i)\n      f--\n      f +\u003d g\n   }\n```\ncurrently creates these scopes\n```\n.  .  .  for scope {\n.  .  .  .  var i int\n.  .  .  .  block scope {\n.  .  .  .  .  var g float64\n.  .  .  .  }\n.  .  .  }\n```\nbut with the new semantics it is instead (in my opinion)\n```\n.  .  .  for scope {\n.  .  .  .  block scope {\n.  .  .  .  .  var i int\n.  .  .  .  .  var g float64\n.  .  .  .  }\n.  .  .  }\n```\nor perhaps\n```\n.  .  .  for scope {\n.  .  .  .  var i int\n.  .  .  .  block scope {\n.  .  .  .  .  var i int\n.  .  .  .  .  var g float64\n.  .  .  .  }\n.  .  .  }\n```\nwhere the inner i is implicit (this is literally the transformation made in the compiler).",
      "parentUuid": "58d10221_2cbcbd8c",
      "revId": "bef031c60fe9acd18c6917fbb0cbd93eb71f8206",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e52d953a_0f2fc059",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 7061
      },
      "writtenOn": "2023-07-24T18:53:44Z",
      "side": 1,
      "message": "Alternately, the For/Range scope just means something different now, no different than throwing an extra set of braces around the loop body, e.g.\n```\n   for i :\u003d range make([]int, 32) {\n      i :\u003d i // For a range loop, this is the rewritten semantics\n      {\n         g :\u003d float64(i)\n         f--\n         f +\u003d g\n      }\n   }\n```",
      "parentUuid": "090403a0_3b522ce7",
      "revId": "bef031c60fe9acd18c6917fbb0cbd93eb71f8206",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "27315cef_a5889818",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 31647
      },
      "writtenOn": "2023-07-24T18:59:28Z",
      "side": 1,
      "message": "That would definitely warrant a change in go/types, because all changes to types2 should be mirrored there.\n\nWith respect to scopes, go/types and types2 track scopes, and so any changes to scope need to be reflected there (scopes in go/ast+go/parser are supported, but deprecated; updating them is a lower priority).\n\nNothing changed with respect to name resolution, right? In that case, I don\u0027t see why scopes need to be modified. The following program is still valid, no?\nhttps://go.dev/play/p/tlWfL7xJJG3",
      "parentUuid": "090403a0_3b522ce7",
      "revId": "bef031c60fe9acd18c6917fbb0cbd93eb71f8206",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0663a54b_8ee32dc6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 7061
      },
      "writtenOn": "2023-07-24T19:05:51Z",
      "side": 1,
      "message": "That program remains valid, yes.\n\nI don\u0027t see anything in the go/types API that depends on this change, and there\u0027s no existing clients that would be looking for it.  The change I think I am aiming for would be a private boolean on a scope to indicate that a scope is an \"unshared iteration variable loop\" and reveal that value with a method of some appropriate name.  That breaks no existing code, and ties the change to the scope, without changing the structure of the scope.",
      "parentUuid": "27315cef_a5889818",
      "revId": "bef031c60fe9acd18c6917fbb0cbd93eb71f8206",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dcb2daad_e28f2a8c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 31647
      },
      "writtenOn": "2023-07-28T15:58:10Z",
      "side": 1,
      "message": "Ok, what about the other changes",
      "parentUuid": "0663a54b_8ee32dc6",
      "revId": "bef031c60fe9acd18c6917fbb0cbd93eb71f8206",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "08fbe38d_fedbd67e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 7061
      },
      "writtenOn": "2023-07-28T16:10:10Z",
      "side": 1,
      "message": "This is what I had in mind for a change, not sure it is necessary:\nhttps://go-review.googlesource.com/c/go/+/512718",
      "parentUuid": "0663a54b_8ee32dc6",
      "revId": "bef031c60fe9acd18c6917fbb0cbd93eb71f8206",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "31b8081c_bb5ae064",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 31647
      },
      "writtenOn": "2023-07-28T16:28:23Z",
      "side": 1,
      "message": "(sorry, I think I had drafted that stub comment a few days ago, and didn\u0027t realize it was still there!)",
      "parentUuid": "08fbe38d_fedbd67e",
      "revId": "bef031c60fe9acd18c6917fbb0cbd93eb71f8206",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "33a5f1a6_fc85c90c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 7061
      },
      "writtenOn": "2023-08-04T14:22:36Z",
      "side": 1,
      "message": "resolved I think.",
      "parentUuid": "31b8081c_bb5ae064",
      "revId": "bef031c60fe9acd18c6917fbb0cbd93eb71f8206",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ff3efad3_1b5b1261",
        "filename": "src/cmd/compile/internal/types2/stmt.go",
        "patchSetId": 1
      },
      "lineNbr": 655,
      "author": {
        "id": 7061
      },
      "writtenOn": "2023-07-11T19:41:35Z",
      "side": 1,
      "message": "s/it/loopvar/",
      "range": {
        "startLine": 655,
        "startChar": 70,
        "endLine": 655,
        "endChar": 72
      },
      "revId": "bef031c60fe9acd18c6917fbb0cbd93eb71f8206",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "af2a5d4b_6dae770a",
        "filename": "src/cmd/compile/internal/types2/stmt.go",
        "patchSetId": 1
      },
      "lineNbr": 656,
      "author": {
        "id": 7061
      },
      "writtenOn": "2023-07-11T19:41:35Z",
      "side": 1,
      "message": "I am trying to decide if this right here.\n\nThe current 1.21 behavior is \"if GOEXPERIMENT or -d\u003dloopvar\u003d1+, then do it\", ignoring language behavior.\n\nArguably that is \"wrong\", but fixing it would interfere with people testing the loop semantics change since they\u0027d need to update their go.mod files all over the place.\n\nThe only reason to do the GOEXPERIMENT (which sets loopvar) with 1.22 would be to do a quick test of a an older\u003dversion package(s) to see if they were affected by the semantic change, and it seems like the same rules apply, and that it should not demand a concurrent go.mod update to 1.21 to run the experiment.",
      "range": {
        "startLine": 656,
        "startChar": 28,
        "endLine": 656,
        "endChar": 54
      },
      "revId": "bef031c60fe9acd18c6917fbb0cbd93eb71f8206",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "de3fc91c_47dd9a13",
        "filename": "src/cmd/compile/internal/types2/stmt.go",
        "patchSetId": 1
      },
      "lineNbr": 656,
      "author": {
        "id": 7061
      },
      "writtenOn": "2023-08-04T14:22:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "af2a5d4b_6dae770a",
      "range": {
        "startLine": 656,
        "startChar": 28,
        "endLine": 656,
        "endChar": 54
      },
      "revId": "bef031c60fe9acd18c6917fbb0cbd93eb71f8206",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9076e187_00019923",
        "filename": "src/cmd/compile/internal/types2/stmt.go",
        "patchSetId": 1
      },
      "lineNbr": 664,
      "author": {
        "id": 31647
      },
      "writtenOn": "2023-07-24T18:59:28Z",
      "side": 1,
      "message": "Note that there",
      "range": {
        "startLine": 663,
        "startChar": 2,
        "endLine": 664,
        "endChar": 26
      },
      "revId": "bef031c60fe9acd18c6917fbb0cbd93eb71f8206",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "367a00f8_b8783b0c",
        "filename": "src/cmd/compile/internal/types2/stmt.go",
        "patchSetId": 1
      },
      "lineNbr": 664,
      "author": {
        "id": 31647
      },
      "writtenOn": "2023-07-24T18:59:48Z",
      "side": 1,
      "message": "(ignore this partial comment)",
      "parentUuid": "9076e187_00019923",
      "range": {
        "startLine": 663,
        "startChar": 2,
        "endLine": 664,
        "endChar": 26
      },
      "revId": "bef031c60fe9acd18c6917fbb0cbd93eb71f8206",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}