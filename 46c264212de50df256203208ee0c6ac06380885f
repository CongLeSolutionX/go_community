{
  "comments": [
    {
      "key": {
        "uuid": "d8cfc759_ec8901a5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 11,
      "author": {
        "id": 5440
      },
      "writtenOn": "2020-07-27T20:24:36Z",
      "side": 1,
      "message": "nit (typo): generated",
      "range": {
        "startLine": 11,
        "startChar": 0,
        "endLine": 11,
        "endChar": 9
      },
      "revId": "46c264212de50df256203208ee0c6ac06380885f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9b235e92_990a6d4e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 11,
      "author": {
        "id": 14665
      },
      "writtenOn": "2020-07-28T07:10:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d8cfc759_ec8901a5",
      "range": {
        "startLine": 11,
        "startChar": 0,
        "endLine": 11,
        "endChar": 9
      },
      "revId": "46c264212de50df256203208ee0c6ac06380885f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dc83f8f8_ba85aa4f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 13,
      "author": {
        "id": 5440
      },
      "writtenOn": "2020-07-27T20:24:36Z",
      "side": 1,
      "message": "nit: This should be T.M.\n\nI\u0027m guessing you copied this from the comment in closure.go. We should fix that too.",
      "range": {
        "startLine": 13,
        "startChar": 32,
        "endLine": 13,
        "endChar": 35
      },
      "revId": "46c264212de50df256203208ee0c6ac06380885f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "63398be8_cdd9109d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 13,
      "author": {
        "id": 14665
      },
      "writtenOn": "2020-07-28T07:10:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "dc83f8f8_ba85aa4f",
      "range": {
        "startLine": 13,
        "startChar": 32,
        "endLine": 13,
        "endChar": 35
      },
      "revId": "46c264212de50df256203208ee0c6ac06380885f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "580d82a4_311380dc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5440
      },
      "writtenOn": "2020-07-27T20:24:36Z",
      "side": 1,
      "message": "Thanks for following up on this.",
      "revId": "46c264212de50df256203208ee0c6ac06380885f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f62d3a01_4d14ada5",
        "filename": "test/fixedbugs/issue39292.go",
        "patchSetId": 2
      },
      "lineNbr": 1,
      "author": {
        "id": 5440
      },
      "writtenOn": "2020-07-27T20:24:36Z",
      "side": 1,
      "message": "I think it would be good to change this to an errorcheck build where we explicitly test that t{} is heap allocated.",
      "revId": "46c264212de50df256203208ee0c6ac06380885f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "54ab4c82_96fb2ed6",
        "filename": "test/fixedbugs/issue39292.go",
        "patchSetId": 2
      },
      "lineNbr": 1,
      "author": {
        "id": 14665
      },
      "writtenOn": "2020-07-28T07:10:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f62d3a01_4d14ada5",
      "revId": "46c264212de50df256203208ee0c6ac06380885f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0cd7571e_5ddf64d4",
        "filename": "test/fixedbugs/issue39292.go",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 5440
      },
      "writtenOn": "2020-07-27T20:24:36Z",
      "side": 1,
      "message": "I\u0027m worried that pointers that flow to t{} need to be marked as escaping too. Can you change t to:\n\n    type t [10000]*int\n\nand then change main to:\n\n    var i int\n    x :\u003d t{\u0026i}.f\n    f()\n\nWe need to make sure that if the closure for \"t{\u0026i}.f\" is heap allocated, then \"i\" is heap allocated too.",
      "revId": "46c264212de50df256203208ee0c6ac06380885f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cbc8803f_8355dbc3",
        "filename": "test/fixedbugs/issue39292.go",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 14665
      },
      "writtenOn": "2020-07-28T04:12:17Z",
      "side": 1,
      "message": "Hmm, I\u0027m a little confused. With or without this fix, the generated closure is reported as does not escape. I guess this dues to `anylit` is run after escape analysis, even we set EscHeap, it\u0027s still reported as does not escape.\n\nWith current go1.14.6:\n\nmain.go:5:6: can inline t.f\nmain.go:5:6: can inline t.f-fm\nmain.go:5:6: inlining call to t.f\nmain.go:9:6: moved to heap: i\nmain.go:10:12: t literal.f does not escape\n\u003cautogenerated\u003e:1: inlining call to t.f\n\u003cautogenerated\u003e:1: .this does not escape",
      "parentUuid": "0cd7571e_5ddf64d4",
      "revId": "46c264212de50df256203208ee0c6ac06380885f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "463aaaaf_28c4b3e3",
        "filename": "test/fixedbugs/issue39292.go",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 14665
      },
      "writtenOn": "2020-07-28T05:48:16Z",
      "side": 1,
      "message": "With this fix, the program:\n\npackage main\n\ntype t [1000]*int\n\nfunc (t) f() {\n}\n\nfunc main() {\n\tvar i int\n\tx :\u003d t{\u0026i}.f\n\tx()\n}\n\ndoes not report that `i` was moved to heap anymore:\n\nmain.go:5:6: can inline t.f\nmain.go:5:6: can inline t.f-fm\nmain.go:5:6: inlining call to t.f\nmain.go:10:12: t literal.f does not escape\n\u003cautogenerated\u003e:1: inlining call to t.f\n\u003cautogenerated\u003e:1: .this does not escape",
      "parentUuid": "cbc8803f_8355dbc3",
      "revId": "46c264212de50df256203208ee0c6ac06380885f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "60fca729_0556206b",
        "filename": "test/fixedbugs/issue39292.go",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 14665
      },
      "writtenOn": "2020-07-28T06:12:38Z",
      "side": 1,
      "message": "Ah ok, never mind, I think it\u0027s not this CL, but your CL https://go-review.googlesource.com/c/go/+/228263 make i not moved to heap anymore.",
      "parentUuid": "463aaaaf_28c4b3e3",
      "revId": "46c264212de50df256203208ee0c6ac06380885f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d03bd400_7a9ca931",
        "filename": "test/fixedbugs/issue39292.go",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 14665
      },
      "writtenOn": "2020-07-28T07:10:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "60fca729_0556206b",
      "revId": "46c264212de50df256203208ee0c6ac06380885f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6f653195_c77925d5",
        "filename": "test/fixedbugs/issue39292.go",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 5440
      },
      "writtenOn": "2020-07-28T18:55:07Z",
      "side": 1,
      "message": "I think the correct takeaway here is that CL 228263 didn\u0027t handle this case correctly. \"t{\u0026i}.f\" should force \"i\" to be heap allocated, and we should correctly report that \"t{\u0026i}.f\" is heap allocated if that\u0027s what the code is doing.\n\nI think the right fix is in mustHeapAlloc. After the code for ONEW/OPTRLIT, probably need something like:\n\n```\nif n.Op \u003d\u003d OCLOSURE \u0026\u0026 closureType(n).Size() \u003e\u003d maxImplicitStackVarSize {\n    return true\n}\nif n.Op \u003d\u003d OCALLPART \u0026\u0026 partialCallType(n).Size() \u003e\u003d maxImplicitStackVarSize {\n    return true\n}\n```\n\nThen the change in sinit.go shouldn\u0027t be needed.",
      "parentUuid": "d03bd400_7a9ca931",
      "revId": "46c264212de50df256203208ee0c6ac06380885f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9140986f_25e75064",
        "filename": "test/fixedbugs/issue39292.go",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 14665
      },
      "writtenOn": "2020-07-29T02:17:29Z",
      "side": 1,
      "message": "Ah right, that sounds the right way. And now \"t{}.f\" will be heap allocated instead of stack.",
      "parentUuid": "6f653195_c77925d5",
      "revId": "46c264212de50df256203208ee0c6ac06380885f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cb126d1f_8f4bbde0",
        "filename": "test/fixedbugs/issue39292.go",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 5440
      },
      "writtenOn": "2020-07-29T03:04:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9140986f_25e75064",
      "revId": "46c264212de50df256203208ee0c6ac06380885f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}