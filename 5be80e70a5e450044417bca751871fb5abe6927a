{
  "comments": [
    {
      "key": {
        "uuid": "c25461d2_53c8d043",
        "filename": "src/cmd/go/internal/load/pkg.go",
        "patchSetId": 7
      },
      "lineNbr": 307,
      "author": {
        "id": 6365
      },
      "writtenOn": "2020-02-26T03:41:30Z",
      "side": 1,
      "message": "Per https://go-review.googlesource.com/c/go/+/217106/9/src/cmd/go/internal/load/pkg.go#376, this seems like a lot of complexity compared to putting the translation logic at the error the construction site.\n\nIt also makes the PackageError struct even lossier when round-tripped through marshaling and unmarshaling, and (less important but still not trivial) makes the merge with CL 185345 much more difficult.",
      "revId": "5be80e70a5e450044417bca751871fb5abe6927a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "75f97181_317329bf",
        "filename": "src/cmd/go/internal/load/pkg.go",
        "patchSetId": 7
      },
      "lineNbr": 438,
      "author": {
        "id": 6365
      },
      "writtenOn": "2020-02-26T03:41:30Z",
      "side": 1,
      "message": "(nit) s/Pos/Posn/\n\n(Heschi recently said that Pos refers to a token.Pos, while Posn refers to a token.Position.)",
      "range": {
        "startLine": 438,
        "startChar": 1,
        "endLine": 438,
        "endChar": 4
      },
      "revId": "5be80e70a5e450044417bca751871fb5abe6927a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "15e8ea89_664df973",
        "filename": "src/cmd/go/internal/load/pkg.go",
        "patchSetId": 7
      },
      "lineNbr": 448,
      "author": {
        "id": 6365
      },
      "writtenOn": "2020-02-26T03:41:30Z",
      "side": 1,
      "message": "NewImportStackFrame is nearly identical to (*ImportStack).Push — why do we need them both?",
      "range": {
        "startLine": 440,
        "startChar": 0,
        "endLine": 448,
        "endChar": 1
      },
      "revId": "5be80e70a5e450044417bca751871fb5abe6927a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "21179ba8_a3c936c0",
        "filename": "src/cmd/go/internal/load/pkg.go",
        "patchSetId": 7
      },
      "lineNbr": 473,
      "author": {
        "id": 6365
      },
      "writtenOn": "2020-02-26T03:41:30Z",
      "side": 1,
      "message": "As noted in https://go-review.googlesource.com/c/go/+/217106/9/src/cmd/go/internal/load/pkg.go#463, I think it\u0027s strange to accept a `[]token.Position` when we really only care about at most one Position.\n\nMoreover, the `nil` at some of the call sites seems mysterious, where `token.Position{}` would clearly indicate which information is missing.\n\nA plain `token.Position` argument combined with a `firstPosn` helper-function seems like it would make the behavior clearer at the call sites.",
      "range": {
        "startLine": 471,
        "startChar": 0,
        "endLine": 473,
        "endChar": 2
      },
      "revId": "5be80e70a5e450044417bca751871fb5abe6927a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8d434572_3503e5f9",
        "filename": "src/cmd/go/internal/load/pkg.go",
        "patchSetId": 7
      },
      "lineNbr": 492,
      "author": {
        "id": 6365
      },
      "writtenOn": "2020-02-26T03:41:30Z",
      "side": 1,
      "message": "I don\u0027t like this approach — it implies that the ImportStack is not always actually a stack of imports. (But sometimes it is?)\n\nI would much rather have firmer invariants that we can reason about consistently, and that we can use to guide fixes: if an ImportStack is always a stack of imports proper, then the way that we fix bugs involving weird things on the top of the stack is by preventing them from being added in the first place.\n\n(The lack of firm invariants in cmd/go has bitten me time and time again — search Gerrit for [thecodelesscode.com/case/84] for a few such examples.)",
      "range": {
        "startLine": 486,
        "startChar": 0,
        "endLine": 492,
        "endChar": 1
      },
      "revId": "5be80e70a5e450044417bca751871fb5abe6927a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2937c14b_f112ec26",
        "filename": "src/cmd/go/internal/load/pkg.go",
        "patchSetId": 7
      },
      "lineNbr": 492,
      "author": {
        "id": 10033
      },
      "writtenOn": "2020-02-27T18:54:48Z",
      "side": 1,
      "message": "Here\u0027s what I was trying to do with this: the import stack represents the stack of imports at the time the error was spotted. But that\u0027s different from the stack that\u0027s relevant to the *user*. So in some cases, when we know that the package that\u0027s actually being examined isn\u0027t relevant to the error, we chop it off the stack. In both cases, the ImportStack is a stack of imports.\n\nMaybe the function is poorly named? I wanted it to imply that it\u0027s a stack of imports for an error that was caused in the importing package (hence popping off the top entry of the stack).\n\nAn alternative that would address this would be to push the element on the stack right before reporting the error, rather than when we start examining a package, but to me that seems to be breaking a different invariant that the code seems to me to be trying to satisfy, that the top of the import stack is the package currently being examined.",
      "parentUuid": "8d434572_3503e5f9",
      "range": {
        "startLine": 486,
        "startChar": 0,
        "endLine": 492,
        "endChar": 1
      },
      "revId": "5be80e70a5e450044417bca751871fb5abe6927a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1f34f9ee_60c90fc1",
        "filename": "src/cmd/go/internal/load/pkg.go",
        "patchSetId": 7
      },
      "lineNbr": 1630,
      "author": {
        "id": 6365
      },
      "writtenOn": "2020-02-26T04:29:51Z",
      "side": 1,
      "message": "I\u0027m having trouble following this expression — this is a lot of conditions and a lot of indexing.\n\nI would rather we avoid pushing an irrelevant last element onto the stack in the first place.",
      "range": {
        "startLine": 1630,
        "startChar": 0,
        "endLine": 1630,
        "endChar": 138
      },
      "revId": "5be80e70a5e450044417bca751871fb5abe6927a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9486204e_147ccd9b",
        "filename": "src/cmd/go/internal/load/pkg.go",
        "patchSetId": 7
      },
      "lineNbr": 1630,
      "author": {
        "id": 10033
      },
      "writtenOn": "2020-02-27T18:54:48Z",
      "side": 1,
      "message": "This is what I was trying to do:\n\nFirst condition -\u003e is this an import error?\nSecond condition -\u003e is there an import path we can check (so that the next conditions don\u0027t panic)\nThird condition -\u003e is the top of the stack redundant with the import error message (not strictly necessary, but without this we will have a bit of redundancy in the error message)\nFourth condition -\u003e does the frame on the top have a valid position? (Mostly for backwards compatibility)",
      "parentUuid": "1f34f9ee_60c90fc1",
      "range": {
        "startLine": 1630,
        "startChar": 0,
        "endLine": 1630,
        "endChar": 138
      },
      "revId": "5be80e70a5e450044417bca751871fb5abe6927a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2384c7e2_e928a742",
        "filename": "src/cmd/go/internal/modload/import.go",
        "patchSetId": 7
      },
      "lineNbr": 65,
      "author": {
        "id": 6365
      },
      "writtenOn": "2020-02-26T04:29:51Z",
      "side": 1,
      "message": "Can this part be factored into a separate CL? It doesn\u0027t appear to be directly coupled to the ImportStack refactoring.",
      "revId": "5be80e70a5e450044417bca751871fb5abe6927a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "216f6e07_a9ecb06f",
        "filename": "src/cmd/go/testdata/script/vet_internal.txt",
        "patchSetId": 7
      },
      "lineNbr": 6,
      "author": {
        "id": 6365
      },
      "writtenOn": "2020-02-26T04:29:51Z",
      "side": 1,
      "message": "Please add leading anchors to these error message regexps. (We often end up with noisy prefixes due to error wrapping, and anchors help to detect that noise.)",
      "range": {
        "startLine": 6,
        "startChar": 7,
        "endLine": 6,
        "endChar": 9
      },
      "revId": "5be80e70a5e450044417bca751871fb5abe6927a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    }
  ]
}