{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "ed69c306_8163c321",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 17092
      },
      "writtenOn": "2021-10-04T18:19:19Z",
      "side": 1,
      "message": "in go.mod files?",
      "range": {
        "startLine": 10,
        "startChar": 24,
        "endLine": 10,
        "endChar": 31
      },
      "revId": "0d1b88bae727052241becb1c78a8ee2895d0c93b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "28f5f080_24ad9157",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 10033
      },
      "writtenOn": "2021-10-06T01:24:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ed69c306_8163c321",
      "range": {
        "startLine": 10,
        "startChar": 24,
        "endLine": 10,
        "endChar": 31
      },
      "revId": "0d1b88bae727052241becb1c78a8ee2895d0c93b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bd3c39e5_62a804f8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-10-01T22:02:19Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003d0d1b88ba",
      "tag": "autogenerated:trybots~beginning",
      "revId": "0d1b88bae727052241becb1c78a8ee2895d0c93b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0a40f74f_3c6e9a0d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-10-01T22:06:28Z",
      "side": 1,
      "message": "Build is still in progress... Status page: https://farmer.golang.org/try?commit\u003d0d1b88ba\nFailed on (x/tools) linux-amd64: https://storage.googleapis.com/go-build-log/0d1b88ba/linux-amd64_e47c705a.log\nOther builds still in progress; subsequent failure notices suppressed until final report.\n\nConsult https://build.golang.org/ to see whether they are new failures. Keep in mind that TryBots currently test *exactly* your git commit, without rebasing. If your commit\u0027s git parent is old, the failure might\u0027ve already been fixed.\n",
      "parentUuid": "bd3c39e5_62a804f8",
      "tag": "autogenerated:trybots~progress",
      "revId": "0d1b88bae727052241becb1c78a8ee2895d0c93b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1f027700_d222485e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-10-01T22:13:19Z",
      "side": 1,
      "message": "1 of 26 TryBots failed.\nFailed on (x/tools) linux-amd64: https://storage.googleapis.com/go-build-log/0d1b88ba/linux-amd64_e47c705a.log\n\nConsult https://build.golang.org/ to see whether they are new failures. Keep in mind that TryBots currently test *exactly* your git commit, without rebasing. If your commit\u0027s git parent is old, the failure might\u0027ve already been fixed.\n\n",
      "parentUuid": "bd3c39e5_62a804f8",
      "tag": "autogenerated:trybots~failed",
      "revId": "0d1b88bae727052241becb1c78a8ee2895d0c93b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4abc3d1c_f4b7ecfe",
        "filename": "src/cmd/go/internal/modload/init.go",
        "patchSetId": 2
      },
      "lineNbr": 76,
      "author": {
        "id": 17092
      },
      "writtenOn": "2021-10-04T18:19:19Z",
      "side": 1,
      "message": "Would it make sense to move these globals be moved into MainModuleSet?\n\nIn general, I\u0027m uncomfortable with the amount of global state and lack of encapsulation we have in this package. It makes it difficult to track when something is set and why.\n\nMoving these into MainModuleSet and hiding them from clients might help, if that\u0027s possible. We could think of MainModuleSet as containing everything needed to load Requirements, plus whatever metadata needed to read and write go.mod and go.work files.",
      "revId": "0d1b88bae727052241becb1c78a8ee2895d0c93b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "04e3c756_7813fb37",
        "filename": "src/cmd/go/internal/modload/init.go",
        "patchSetId": 2
      },
      "lineNbr": 76,
      "author": {
        "id": 10033
      },
      "writtenOn": "2021-10-06T01:24:01Z",
      "side": 1,
      "message": "I\u0027d like to, but there\u0027s a \"gap\" between when we determine modRoots (in Init) and when we load them (in LoadModfile) and since Init is called in so many different places, it\u0027s hard to tell what\u0027s available when. So we have to stash away at least something away from when we parse the mod file so it\u0027s available when we call LoadModFile.\n\nMaybe we can specify that those values are not to be accessed, and then pass them into makeMainModules?",
      "parentUuid": "4abc3d1c_f4b7ecfe",
      "revId": "0d1b88bae727052241becb1c78a8ee2895d0c93b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6b36101f_dc7e3839",
        "filename": "src/cmd/go/internal/modload/init.go",
        "patchSetId": 2
      },
      "lineNbr": 76,
      "author": {
        "id": 17092
      },
      "writtenOn": "2021-10-06T15:39:44Z",
      "side": 1,
      "message": "What about loading the go.work file in LoadModFile instead of Init? Do we need its contents before LoadModFile?\n\nThis package has become very difficult to work with because there\u0027s so much global state, initialized and changed in several places. That\u0027s requiring us to keep adding more global state. I think it\u0027s important to halt that if at all possible.",
      "parentUuid": "04e3c756_7813fb37",
      "revId": "0d1b88bae727052241becb1c78a8ee2895d0c93b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d5271c05_bbe2b52d",
        "filename": "src/cmd/go/internal/modload/init.go",
        "patchSetId": 2
      },
      "lineNbr": 76,
      "author": {
        "id": 10033
      },
      "writtenOn": "2021-10-06T18:43:12Z",
      "side": 1,
      "message": "I moved the last block of Init to LoadModFile, and it seems to work! I\u0027m just a little wary of doing these things because it\u0027s hard to reason about who\u0027s using what when (of course, that\u0027s the very problem at the center of all this).",
      "parentUuid": "6b36101f_dc7e3839",
      "revId": "0d1b88bae727052241becb1c78a8ee2895d0c93b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b01bea55_eac66b4c",
        "filename": "src/cmd/go/internal/modload/init.go",
        "patchSetId": 2
      },
      "lineNbr": 212,
      "author": {
        "id": 17092
      },
      "writtenOn": "2021-10-04T18:19:19Z",
      "side": 1,
      "message": "Why is the nil check needed? Some methods have it, others don\u0027t. I assume this is for command-line-arguments? Could we make MainModuleSet have a useful zero value instead?",
      "revId": "0d1b88bae727052241becb1c78a8ee2895d0c93b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e63ef3f3_317ab95b",
        "filename": "src/cmd/go/internal/modload/init.go",
        "patchSetId": 2
      },
      "lineNbr": 212,
      "author": {
        "id": 10033
      },
      "writtenOn": "2021-10-06T01:24:01Z",
      "side": 1,
      "message": "The MainModuleSet exists for command-line-arguments, but the function is called before modload.Init. Alternatively, we can check on the caller side if we\u0027ve done modload.Init?",
      "parentUuid": "b01bea55_eac66b4c",
      "revId": "0d1b88bae727052241becb1c78a8ee2895d0c93b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6ec2590b_0c1b0a39",
        "filename": "src/cmd/go/internal/modload/init.go",
        "patchSetId": 2
      },
      "lineNbr": 212,
      "author": {
        "id": 17092
      },
      "writtenOn": "2021-10-06T15:39:44Z",
      "side": 1,
      "message": "I\u0027m surprised this would be called before Init. How does that happen? Init should be before almost anything else.\n\nIf MainModuleSet can\u0027t be created first, it would be better to do the nil pointer check on the caller side. Calling a method on nil is usually a mistake. It\u0027s way too easy to forget to add the check to a method or to forget which methods allow nil and which don\u0027t. It makes small changes riskier than they need to be.",
      "parentUuid": "e63ef3f3_317ab95b",
      "revId": "0d1b88bae727052241becb1c78a8ee2895d0c93b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a6c08f49_e1f5de3b",
        "filename": "src/cmd/go/internal/modload/init.go",
        "patchSetId": 2
      },
      "lineNbr": 212,
      "author": {
        "id": 10033
      },
      "writtenOn": "2021-10-06T18:43:12Z",
      "side": 1,
      "message": "okay, moved the checks to callers.",
      "parentUuid": "6ec2590b_0c1b0a39",
      "revId": "0d1b88bae727052241becb1c78a8ee2895d0c93b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d285bfd5_4a9ce1f0",
        "filename": "src/cmd/go/internal/modload/init.go",
        "patchSetId": 2
      },
      "lineNbr": 216,
      "author": {
        "id": 17092
      },
      "writtenOn": "2021-10-04T18:19:19Z",
      "side": 1,
      "message": "return mms.highestReplaced[path]",
      "revId": "0d1b88bae727052241becb1c78a8ee2895d0c93b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6aa79d13_3de86a3d",
        "filename": "src/cmd/go/internal/modload/init.go",
        "patchSetId": 2
      },
      "lineNbr": 216,
      "author": {
        "id": 10033
      },
      "writtenOn": "2021-10-06T01:24:01Z",
      "side": 1,
      "message": "Won\u0027t the map access be treated as single value unless it\u0027s explicitly assigned?",
      "parentUuid": "d285bfd5_4a9ce1f0",
      "revId": "0d1b88bae727052241becb1c78a8ee2895d0c93b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a7f1b74a_6bee3e6e",
        "filename": "src/cmd/go/internal/modload/init.go",
        "patchSetId": 2
      },
      "lineNbr": 216,
      "author": {
        "id": 17092
      },
      "writtenOn": "2021-10-06T15:39:44Z",
      "side": 1,
      "message": "Ah, you\u0027re right.",
      "parentUuid": "6aa79d13_3de86a3d",
      "revId": "0d1b88bae727052241becb1c78a8ee2895d0c93b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ab7c9eae_4cf0ded0",
        "filename": "src/cmd/go/internal/modload/init.go",
        "patchSetId": 2
      },
      "lineNbr": 968,
      "author": {
        "id": 17092
      },
      "writtenOn": "2021-10-04T18:19:19Z",
      "side": 1,
      "message": "Can we recommend a specific command? \u0027go mod editwork -replace\u003dsomething\u0027?",
      "range": {
        "startLine": 968,
        "startChar": 68,
        "endLine": 968,
        "endChar": 125
      },
      "revId": "0d1b88bae727052241becb1c78a8ee2895d0c93b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0f77c881_72b0438a",
        "filename": "src/cmd/go/internal/modload/init.go",
        "patchSetId": 2
      },
      "lineNbr": 968,
      "author": {
        "id": 10033
      },
      "writtenOn": "2021-10-06T01:24:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ab7c9eae_4cf0ded0",
      "range": {
        "startLine": 968,
        "startChar": 68,
        "endLine": 968,
        "endChar": 125
      },
      "revId": "0d1b88bae727052241becb1c78a8ee2895d0c93b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5833767a_ee09c1b3",
        "filename": "src/cmd/go/internal/modload/modfile.go",
        "patchSetId": 2
      },
      "lineNbr": 325,
      "author": {
        "id": 17092
      },
      "writtenOn": "2021-10-04T18:19:19Z",
      "side": 1,
      "message": "At this point, I think this should be a method on MainModuleSet.",
      "revId": "0d1b88bae727052241becb1c78a8ee2895d0c93b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a6a49873_41f15f91",
        "filename": "src/cmd/go/internal/modload/modfile.go",
        "patchSetId": 2
      },
      "lineNbr": 325,
      "author": {
        "id": 10033
      },
      "writtenOn": "2021-10-06T01:24:01Z",
      "side": 1,
      "message": "Hm, one of the reasons I think it makes sense for it not to be is that sometimes we want to call it with the workfile\u0027s replacements (line 342 in this patch set) and sometimes with the mod file\u0027s replacements. I don\u0027t know if there\u0027s an interface that fits well so we have a single type to key both the workspace and individual modules?",
      "parentUuid": "5833767a_ee09c1b3",
      "revId": "0d1b88bae727052241becb1c78a8ee2895d0c93b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "87f929ca_f03b5ff6",
        "filename": "src/cmd/go/internal/modload/modfile.go",
        "patchSetId": 2
      },
      "lineNbr": 325,
      "author": {
        "id": 17092
      },
      "writtenOn": "2021-10-06T15:39:44Z",
      "side": 1,
      "message": "Maybe an interface or a new type. Conceptually, a single go.mod and go.work + workspace modules provide a set of requirements, replacements, and exclusions that determine how the rest of the system works. The rest of the system doesn\u0027t need to know where those things came from.\n\nProbably out of scope for this CL though.",
      "parentUuid": "a6a49873_41f15f91",
      "revId": "0d1b88bae727052241becb1c78a8ee2895d0c93b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c7aff2fc_1d4e37ac",
        "filename": "src/cmd/go/internal/modload/modfile.go",
        "patchSetId": 2
      },
      "lineNbr": 325,
      "author": {
        "id": 10033
      },
      "writtenOn": "2021-10-06T18:43:12Z",
      "side": 1,
      "message": "okay",
      "parentUuid": "87f929ca_f03b5ff6",
      "revId": "0d1b88bae727052241becb1c78a8ee2895d0c93b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bbbfffb3_d7c1aa40",
        "filename": "src/cmd/go/internal/modload/modfile.go",
        "patchSetId": 2
      },
      "lineNbr": 373,
      "author": {
        "id": 17092
      },
      "writtenOn": "2021-10-04T18:19:19Z",
      "side": 1,
      "message": "Is it no longer an error if a single go.mod contains conflicting replacements?",
      "revId": "0d1b88bae727052241becb1c78a8ee2895d0c93b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "012048b8_c1ea9710",
        "filename": "src/cmd/go/internal/modload/modfile.go",
        "patchSetId": 2
      },
      "lineNbr": 373,
      "author": {
        "id": 10033
      },
      "writtenOn": "2021-10-06T01:24:01Z",
      "side": 1,
      "message": "Ah, good catch! I restored the error from the original version of this code.",
      "parentUuid": "bbbfffb3_d7c1aa40",
      "revId": "0d1b88bae727052241becb1c78a8ee2895d0c93b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}