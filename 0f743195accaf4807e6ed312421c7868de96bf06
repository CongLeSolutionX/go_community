{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "6f2c7045_eba56f27",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5206
      },
      "writtenOn": "2022-08-15T18:29:40Z",
      "side": 1,
      "message": "Is this just for io.EOF?  If so, perhaps we should just return io.EOF without wrapping, as that is the usual convention.",
      "revId": "0f743195accaf4807e6ed312421c7868de96bf06",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5f85f9a7_39253111",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 34788
      },
      "writtenOn": "2022-08-15T18:43:19Z",
      "side": 1,
      "message": "imo it should either stay as is or use `io.ErrUnexpectedEOF` rather than exposing a plain `io.EOF`",
      "parentUuid": "6f2c7045_eba56f27",
      "revId": "0f743195accaf4807e6ed312421c7868de96bf06",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "31ed3512_21b610fe",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 58653
      },
      "writtenOn": "2022-08-15T19:26:27Z",
      "side": 1,
      "message": "There are numerous other places where io.EOF is returned by this function, and I\u0027ve been using the function in other in my code and haven\u0027t encountered this issue. It seems this is the only place that the error is wrapped.",
      "parentUuid": "5f85f9a7_39253111",
      "revId": "0f743195accaf4807e6ed312421c7868de96bf06",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9a352ea3_be2ce92f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 58653
      },
      "writtenOn": "2022-08-15T19:30:07Z",
      "side": 1,
      "message": "Probably worth noting that an identical change was proposed a couple of years ago but wasn\u0027t implemented - https://go-review.googlesource.com/c/go/+/256420",
      "parentUuid": "31ed3512_21b610fe",
      "revId": "0f743195accaf4807e6ed312421c7868de96bf06",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cf98aaf0_4fe077c6",
        "filename": "src/mime/multipart/multipart.go",
        "patchSetId": 1
      },
      "lineNbr": 363,
      "author": {
        "id": 5305
      },
      "writtenOn": "2022-08-15T19:27:57Z",
      "side": 1,
      "message": "This change isn\u0027t right: The error here is not io.EOF (which indicates a valid multipart EOF), it\u0027s that the input is invalid.\n\nPerhaps the error message here could be clearer when err is io.EOF, however; we could return something like \"multipart: NextPart: unexpected EOF\" to make it clear that this is not an expected end-of-input error.",
      "revId": "0f743195accaf4807e6ed312421c7868de96bf06",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}