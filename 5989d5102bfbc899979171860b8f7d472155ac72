{
  "comments": [
    {
      "key": {
        "uuid": "1c99da37_32f7b873",
        "filename": "src/cmd/vendor/golang.org/x/arch/ppc64/ppc64asm/objdump_test.go",
        "patchSetId": 2
      },
      "lineNbr": 15,
      "author": {
        "id": 6320
      },
      "writtenOn": "2016-10-12T20:52:34Z",
      "side": 1,
      "message": "Don\u0027t understand the purpose of the randomCases.  It is generating a large set of instruction words containing random bits.  Not all possible combinations are necessarily valid instructions.",
      "revId": "5989d5102bfbc899979171860b8f7d472155ac72",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1c99da37_87544c53",
        "filename": "src/cmd/vendor/golang.org/x/arch/ppc64/ppc64asm/objdumpext_test.go",
        "patchSetId": 2
      },
      "lineNbr": 22,
      "author": {
        "id": 6320
      },
      "writtenOn": "2016-10-12T20:25:45Z",
      "side": 1,
      "message": "This path doesn\u0027t look right? Usually it is at /usr/bin/objdump.",
      "revId": "5989d5102bfbc899979171860b8f7d472155ac72",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1c99da37_8761ac09",
        "filename": "src/cmd/vendor/golang.org/x/arch/ppc64/ppc64asm/testdata/decode.txt",
        "patchSetId": 2
      },
      "lineNbr": 16,
      "author": {
        "id": 6320
      },
      "writtenOn": "2016-10-12T20:25:45Z",
      "side": 1,
      "message": "The binary word should be f3c04322 but there is still an issue if it is changed.  The binutils objdump will name the vector registers as vs0, vs1, ... if the instruction is a vsx type.  Currently the golang disassembler just calls them v0, v1...",
      "revId": "5989d5102bfbc899979171860b8f7d472155ac72",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}